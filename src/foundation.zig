// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const security = @import("security.zig"); // Framework dependency Security.
const core_services = @import("core_services.zig"); // Framework dependency CoreServices.

pub const ExceptionName = ?*String;

pub const RunLoopMode = ?*String;

pub extern "Foundation" fn StringFromSelector(aSelector: *objc.SEL) callconv(.C) ?*String;

pub extern "Foundation" fn SelectorFromString(aSelectorName: ?*String) callconv(.C) *objc.SEL;

pub extern "Foundation" fn StringFromClass(aClass: *objc.Class) callconv(.C) ?*String;

pub extern "Foundation" fn ClassFromString(aClassName: ?*String) callconv(.C) *objc.Class;

pub extern "Foundation" fn StringFromProtocol(proto: ?*Protocol) callconv(.C) ?*String;

pub extern "Foundation" fn ProtocolFromString(namestr: ?*String) callconv(.C) ?*Protocol;

pub extern "Foundation" fn GetSizeAndAlignment(typePtr: ?*i8, sizep: ?*objc.NSUInteger, alignp: ?*objc.NSUInteger) callconv(.C) ?*i8;

pub extern "Foundation" fn Log(format: ?*String) callconv(.C) void;

pub extern "Foundation" fn Logv(format: ?*String, args: objc.va_list) callconv(.C) void;

pub const ComparisonResult = enum(objc.NSInteger) {
    OrderedAscending = -1,
    OrderedSame = 0,
    OrderedDescending = 1,
};

pub const Comparator = *const fn(*objc.Id, *objc.Id) callconv(.C) ComparisonResult;

pub const EnumerationOptions = enum(objc.NSUInteger) {
    Concurrent = 1,
    Reverse = 2,
};

pub const SortOptions = enum(objc.NSUInteger) {
    Concurrent = 1,
    Stable = 16,
};

pub const QualityOfService = enum(objc.NSInteger) {
    UserInteractive = 33,
    UserInitiated = 25,
    Utility = 17,
    Background = 9,
    Default = -1,
};

pub extern "Foundation" fn DefaultMallocZone() callconv(.C) ?*Zone;

pub extern "Foundation" fn CreateZone(startSize: objc.NSUInteger, granularity: objc.NSUInteger, canFree: objc.BOOL) callconv(.C) ?*Zone;

pub extern "Foundation" fn RecycleZone(zone: ?*Zone) callconv(.C) void;

pub extern "Foundation" fn SetZoneName(zone: ?*Zone, name: ?*String) callconv(.C) void;

pub extern "Foundation" fn ZoneName(zone: ?*Zone) callconv(.C) ?*String;

pub extern "Foundation" fn ZoneFromPointer(ptr: ?*anyopaque) callconv(.C) ?*Zone;

pub extern "Foundation" fn ZoneMalloc(zone: ?*Zone, size: objc.NSUInteger) callconv(.C) ?*anyopaque;

pub extern "Foundation" fn ZoneCalloc(zone: ?*Zone, numElems: objc.NSUInteger, byteSize: objc.NSUInteger) callconv(.C) ?*anyopaque;

pub extern "Foundation" fn ZoneRealloc(zone: ?*Zone, ptr: ?*anyopaque, size: objc.NSUInteger) callconv(.C) ?*anyopaque;

pub extern "Foundation" fn ZoneFree(zone: ?*Zone, ptr: ?*anyopaque) callconv(.C) void;

pub extern "Foundation" fn AllocateCollectable(size: objc.NSUInteger, options: objc.NSUInteger) callconv(.C) ?*anyopaque;

pub extern "Foundation" fn ReallocateCollectable(ptr: ?*anyopaque, size: objc.NSUInteger, options: objc.NSUInteger) callconv(.C) ?*anyopaque;

pub extern "Foundation" fn MakeCollectable(cf: core_foundation.TypeRef) callconv(.C) *objc.Id;

pub extern "Foundation" fn PageSize() callconv(.C) objc.NSUInteger;

pub extern "Foundation" fn LogPageSize() callconv(.C) objc.NSUInteger;

pub extern "Foundation" fn RoundUpToMultipleOfPageSize(bytes: objc.NSUInteger) callconv(.C) objc.NSUInteger;

pub extern "Foundation" fn RoundDownToMultipleOfPageSize(bytes: objc.NSUInteger) callconv(.C) objc.NSUInteger;

pub extern "Foundation" fn AllocateMemoryPages(bytes: objc.NSUInteger) callconv(.C) ?*anyopaque;

pub extern "Foundation" fn DeallocateMemoryPages(ptr: ?*anyopaque, bytes: objc.NSUInteger) callconv(.C) void;

pub extern "Foundation" fn CopyMemoryPages(source: ?*anyopaque, dest: ?*anyopaque, bytes: objc.NSUInteger) callconv(.C) void;

pub extern "Foundation" fn RealMemoryAvailable() callconv(.C) objc.NSUInteger;

/// https://developer.apple.com/documentation/Foundation/NSCopying?language=objc
pub const Copying = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn copyWithZone(self: *@This(), zone: ?*Zone) *objc.Id {
        return objc.msgSend(self, "copyWithZone:", *objc.Id, .{zone});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSMutableCopying?language=objc
pub const MutableCopying = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn mutableCopyWithZone(self: *@This(), zone: ?*Zone) *objc.Id {
        return objc.msgSend(self, "mutableCopyWithZone:", *objc.Id, .{zone});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSCoding?language=objc
pub const Coding = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn encodeWithCoder(self: *@This(), coder: ?*Coder) void {
        return objc.msgSend(self, "encodeWithCoder:", void, .{coder});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSSecureCoding?language=objc
pub const SecureCoding = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{Coding, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn supportsSecureCoding(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportsSecureCoding", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSDiscardableContent?language=objc
pub const DiscardableContent = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn beginContentAccess(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "beginContentAccess", objc.BOOL, .{});
    }

    pub fn endContentAccess(self: *@This()) void {
        return objc.msgSend(self, "endContentAccess", void, .{});
    }

    pub fn discardContentIfPossible(self: *@This()) void {
        return objc.msgSend(self, "discardContentIfPossible", void, .{});
    }

    pub fn isContentDiscarded(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isContentDiscarded", objc.BOOL, .{});
    }

};

pub extern "Foundation" fn AllocateObject(aClass: *objc.Class, extraBytes: objc.NSUInteger, zone: ?*Zone) callconv(.C) *objc.Id;

pub extern "Foundation" fn DeallocateObject(object: *objc.Id) callconv(.C) void;

pub extern "Foundation" fn CopyObject(object: *objc.Id, extraBytes: objc.NSUInteger, zone: ?*Zone) callconv(.C) *objc.Id;

pub extern "Foundation" fn ShouldRetainWithZone(anObject: *objc.Id, requestedZone: ?*Zone) callconv(.C) objc.BOOL;

pub extern "Foundation" fn IncrementExtraRefCount(object: *objc.Id) callconv(.C) void;

pub extern "Foundation" fn DecrementExtraRefCountWasZero(object: *objc.Id) callconv(.C) objc.BOOL;

pub extern "Foundation" fn ExtraRefCount(object: *objc.Id) callconv(.C) objc.NSUInteger;

pub extern "Foundation" fn CFBridgingRetain(X: *objc.Id) callconv(.C) core_foundation.TypeRef;

pub extern "Foundation" fn CFBridgingRelease(X: core_foundation.TypeRef) callconv(.C) *objc.Id;

pub const FastEnumerationState = extern struct {
    state: u64,
    itemsPtr: ?**objc.Id,
    mutationsPtr: ?*u64,
    extra: [5] u64,
};

/// https://developer.apple.com/documentation/Foundation/NSFastEnumeration?language=objc
pub const FastEnumeration = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn countByEnumeratingWithStateObjectsCount(self: *@This(), state: ?*FastEnumerationState, buffer: ?**objc.Id, len: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(self, "countByEnumeratingWithState:objects:count:", objc.NSUInteger, .{state, buffer, len});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSEnumerator?language=objc
pub const Enumerator = opaque {
    pub const InternalInfo = objc.ExternalClass("NSEnumerator", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn nextObject(self: *@This()) void {
        return objc.msgSend(self, "nextObject", void, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSValue?language=objc
pub const Value = opaque {
    pub const InternalInfo = objc.ExternalClass("NSValue", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn getValueSize(self: *@This(), value: ?*anyopaque, size: objc.NSUInteger) void {
        return objc.msgSend(self, "getValue:size:", void, .{value, size});
    }

    pub fn initWithBytesObjCType(self: *@This(), value: ?*anyopaque, @"type": ?*i8) *@This() {
        return objc.msgSend(self, "initWithBytes:objCType:", *@This(), .{value, @"type"});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn objCType(self: *@This()) ?*i8 {
        return objc.msgSend(self, "objCType", ?*i8, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSNumber?language=objc
pub const Number = opaque {
    pub const InternalInfo = objc.ExternalClass("NSNumber", @This(), Value, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithCoder(self: *@This(), coder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn initWithChar(self: *@This(), value: i8) ?*core_foundation.NSNumber {
        return objc.msgSend(self, "initWithChar:", ?*core_foundation.NSNumber, .{value});
    }

    pub fn initWithUnsignedChar(self: *@This(), value: u8) ?*Number {
        return objc.msgSend(self, "initWithUnsignedChar:", ?*Number, .{value});
    }

    pub fn initWithShort(self: *@This(), value: i16) ?*Number {
        return objc.msgSend(self, "initWithShort:", ?*Number, .{value});
    }

    pub fn initWithUnsignedShort(self: *@This(), value: u16) ?*Number {
        return objc.msgSend(self, "initWithUnsignedShort:", ?*Number, .{value});
    }

    pub fn initWithInt(self: *@This(), value: i32) ?*Number {
        return objc.msgSend(self, "initWithInt:", ?*Number, .{value});
    }

    pub fn initWithUnsignedInt(self: *@This(), value: u32) ?*Number {
        return objc.msgSend(self, "initWithUnsignedInt:", ?*Number, .{value});
    }

    pub fn initWithLong(self: *@This(), value: i64) ?*Number {
        return objc.msgSend(self, "initWithLong:", ?*Number, .{value});
    }

    pub fn initWithUnsignedLong(self: *@This(), value: u64) ?*Number {
        return objc.msgSend(self, "initWithUnsignedLong:", ?*Number, .{value});
    }

    pub fn initWithLongLong(self: *@This(), value: i64) ?*Number {
        return objc.msgSend(self, "initWithLongLong:", ?*Number, .{value});
    }

    pub fn initWithUnsignedLongLong(self: *@This(), value: u64) ?*Number {
        return objc.msgSend(self, "initWithUnsignedLongLong:", ?*Number, .{value});
    }

    pub fn initWithFloat(self: *@This(), value: f32) ?*Number {
        return objc.msgSend(self, "initWithFloat:", ?*Number, .{value});
    }

    pub fn initWithDouble(self: *@This(), value: f64) ?*Number {
        return objc.msgSend(self, "initWithDouble:", ?*Number, .{value});
    }

    pub fn initWithBool(self: *@This(), value: objc.BOOL) ?*Number {
        return objc.msgSend(self, "initWithBool:", ?*Number, .{value});
    }

    pub fn initWithInteger(self: *@This(), value: objc.NSInteger) ?*Number {
        return objc.msgSend(self, "initWithInteger:", ?*Number, .{value});
    }

    pub fn initWithUnsignedInteger(self: *@This(), value: objc.NSUInteger) ?*Number {
        return objc.msgSend(self, "initWithUnsignedInteger:", ?*Number, .{value});
    }

    pub fn compare(self: *@This(), otherNumber: ?*Number) ComparisonResult {
        return objc.msgSend(self, "compare:", ComparisonResult, .{otherNumber});
    }

    pub fn isEqualToNumber(self: *@This(), number: ?*Number) objc.BOOL {
        return objc.msgSend(self, "isEqualToNumber:", objc.BOOL, .{number});
    }

    pub fn descriptionWithLocale(self: *@This(), locale: *objc.Id) ?*String {
        return objc.msgSend(self, "descriptionWithLocale:", ?*String, .{locale});
    }

    pub fn charValue(self: *@This()) i8 {
        return objc.msgSend(self, "charValue", i8, .{});
    }

    pub fn unsignedCharValue(self: *@This()) u8 {
        return objc.msgSend(self, "unsignedCharValue", u8, .{});
    }

    pub fn shortValue(self: *@This()) i16 {
        return objc.msgSend(self, "shortValue", i16, .{});
    }

    pub fn unsignedShortValue(self: *@This()) u16 {
        return objc.msgSend(self, "unsignedShortValue", u16, .{});
    }

    pub fn intValue(self: *@This()) i32 {
        return objc.msgSend(self, "intValue", i32, .{});
    }

    pub fn unsignedIntValue(self: *@This()) u32 {
        return objc.msgSend(self, "unsignedIntValue", u32, .{});
    }

    pub fn longValue(self: *@This()) i64 {
        return objc.msgSend(self, "longValue", i64, .{});
    }

    pub fn unsignedLongValue(self: *@This()) u64 {
        return objc.msgSend(self, "unsignedLongValue", u64, .{});
    }

    pub fn longLongValue(self: *@This()) i64 {
        return objc.msgSend(self, "longLongValue", i64, .{});
    }

    pub fn unsignedLongLongValue(self: *@This()) u64 {
        return objc.msgSend(self, "unsignedLongLongValue", u64, .{});
    }

    pub fn floatValue(self: *@This()) f32 {
        return objc.msgSend(self, "floatValue", f32, .{});
    }

    pub fn doubleValue(self: *@This()) f64 {
        return objc.msgSend(self, "doubleValue", f64, .{});
    }

    pub fn boolValue(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "boolValue", objc.BOOL, .{});
    }

    pub fn integerValue(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "integerValue", objc.NSInteger, .{});
    }

    pub fn unsignedIntegerValue(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "unsignedIntegerValue", objc.NSUInteger, .{});
    }

    pub fn stringValue(self: *@This()) ?*String {
        return objc.msgSend(self, "stringValue", ?*String, .{});
    }

};

pub const _NSRange = extern struct {
    location: objc.NSUInteger,
    length: objc.NSUInteger,
};

pub const RangePointer = ?*Range;

pub extern "Foundation" fn MakeRange(loc: objc.NSUInteger, len: objc.NSUInteger) callconv(.C) Range;

pub extern "Foundation" fn MaxRange(range: Range) callconv(.C) objc.NSUInteger;

pub extern "Foundation" fn LocationInRange(loc: objc.NSUInteger, range: Range) callconv(.C) objc.BOOL;

pub extern "Foundation" fn EqualRanges(range1: Range, range2: Range) callconv(.C) objc.BOOL;

pub extern "Foundation" fn UnionRange(range1: Range, range2: Range) callconv(.C) Range;

pub extern "Foundation" fn IntersectionRange(range1: Range, range2: Range) callconv(.C) Range;

pub extern "Foundation" fn StringFromRange(range: Range) callconv(.C) ?*String;

pub extern "Foundation" fn RangeFromString(aString: ?*String) callconv(.C) Range;

pub const CollectionChangeType = enum(objc.NSInteger) {
    Insert = 0,
    Remove = 1,
};

/// https://developer.apple.com/documentation/Foundation/NSOrderedCollectionChange?language=objc
pub const OrderedCollectionChange = opaque {
    pub const InternalInfo = objc.ExternalClass("NSOrderedCollectionChange", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn changeWithObjectTypeIndex(self: *@This(), anObject: void, @"type": CollectionChangeType, index: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(self, "changeWithObject:type:index:", ?*anyopaque, .{anObject, @"type", index});
    }

    pub fn changeWithObjectTypeIndexAssociatedIndex(self: *@This(), anObject: void, @"type": CollectionChangeType, index: objc.NSUInteger, associatedIndex: objc.NSUInteger, ) ?*anyopaque {
        return objc.msgSend(self, "changeWithObject:type:index:associatedIndex:", ?*anyopaque, .{anObject, @"type", index, associatedIndex, });
    }

    pub fn init(self: *@This()) *objc.Id {
        return objc.msgSend(self, "init", *objc.Id, .{});
    }

    pub fn initWithObjectTypeIndex(self: *@This(), anObject: void, @"type": CollectionChangeType, index: objc.NSUInteger) *@This() {
        return objc.msgSend(self, "initWithObject:type:index:", *@This(), .{anObject, @"type", index});
    }

    pub fn initWithObjectTypeIndexAssociatedIndex(self: *@This(), anObject: void, @"type": CollectionChangeType, index: objc.NSUInteger, associatedIndex: objc.NSUInteger, ) *@This() {
        return objc.msgSend(self, "initWithObject:type:index:associatedIndex:", *@This(), .{anObject, @"type", index, associatedIndex, });
    }

    pub fn object(self: *@This()) void {
        return objc.msgSend(self, "object", void, .{});
    }

    pub fn changeType(self: *@This()) CollectionChangeType {
        return objc.msgSend(self, "changeType", CollectionChangeType, .{});
    }

    pub fn index(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "index", objc.NSUInteger, .{});
    }

    pub fn associatedIndex(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "associatedIndex", objc.NSUInteger, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSIndexSet?language=objc
pub const IndexSet = opaque {
    pub const InternalInfo = objc.ExternalClass("NSIndexSet", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn indexSet(self: *@This()) *@This() {
        return objc.msgSend(self, "indexSet", *@This(), .{});
    }

    pub fn indexSetWithIndex(self: *@This(), value: objc.NSUInteger) *@This() {
        return objc.msgSend(self, "indexSetWithIndex:", *@This(), .{value});
    }

    pub fn indexSetWithIndexesInRange(self: *@This(), range: Range) *@This() {
        return objc.msgSend(self, "indexSetWithIndexesInRange:", *@This(), .{range});
    }

    pub fn initWithIndexesInRange(self: *@This(), range: Range) *@This() {
        return objc.msgSend(self, "initWithIndexesInRange:", *@This(), .{range});
    }

    pub fn initWithIndexSet(self: *@This(), indexSet: ?*IndexSet) *@This() {
        return objc.msgSend(self, "initWithIndexSet:", *@This(), .{indexSet});
    }

    pub fn initWithIndex(self: *@This(), value: objc.NSUInteger) *@This() {
        return objc.msgSend(self, "initWithIndex:", *@This(), .{value});
    }

    pub fn isEqualToIndexSet(self: *@This(), indexSet: ?*IndexSet) objc.BOOL {
        return objc.msgSend(self, "isEqualToIndexSet:", objc.BOOL, .{indexSet});
    }

    pub fn indexGreaterThanIndex(self: *@This(), value: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(self, "indexGreaterThanIndex:", objc.NSUInteger, .{value});
    }

    pub fn indexLessThanIndex(self: *@This(), value: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(self, "indexLessThanIndex:", objc.NSUInteger, .{value});
    }

    pub fn indexGreaterThanOrEqualToIndex(self: *@This(), value: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(self, "indexGreaterThanOrEqualToIndex:", objc.NSUInteger, .{value});
    }

    pub fn indexLessThanOrEqualToIndex(self: *@This(), value: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(self, "indexLessThanOrEqualToIndex:", objc.NSUInteger, .{value});
    }

    pub fn getIndexesMaxCountInIndexRange(self: *@This(), indexBuffer: ?*objc.NSUInteger, bufferSize: objc.NSUInteger, range: RangePointer) objc.NSUInteger {
        return objc.msgSend(self, "getIndexes:maxCount:inIndexRange:", objc.NSUInteger, .{indexBuffer, bufferSize, range});
    }

    pub fn countOfIndexesInRange(self: *@This(), range: Range) objc.NSUInteger {
        return objc.msgSend(self, "countOfIndexesInRange:", objc.NSUInteger, .{range});
    }

    pub fn containsIndex(self: *@This(), value: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(self, "containsIndex:", objc.BOOL, .{value});
    }

    pub fn containsIndexesInRange(self: *@This(), range: Range) objc.BOOL {
        return objc.msgSend(self, "containsIndexesInRange:", objc.BOOL, .{range});
    }

    pub fn containsIndexes(self: *@This(), indexSet: ?*IndexSet) objc.BOOL {
        return objc.msgSend(self, "containsIndexes:", objc.BOOL, .{indexSet});
    }

    pub fn intersectsIndexesInRange(self: *@This(), range: Range) objc.BOOL {
        return objc.msgSend(self, "intersectsIndexesInRange:", objc.BOOL, .{range});
    }

    pub fn enumerateIndexesUsingBlock(self: *@This(), block: *const fn(objc.NSUInteger, ?*objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(self, "enumerateIndexesUsingBlock:", void, .{block});
    }

    pub fn enumerateIndexesWithOptionsUsingBlock(self: *@This(), opts: EnumerationOptions, block: *const fn(objc.NSUInteger, ?*objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(self, "enumerateIndexesWithOptions:usingBlock:", void, .{opts, block});
    }

    pub fn enumerateIndexesInRangeOptionsUsingBlock(self: *@This(), range: Range, opts: EnumerationOptions, block: *const fn(objc.NSUInteger, ?*objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(self, "enumerateIndexesInRange:options:usingBlock:", void, .{range, opts, block});
    }

    pub fn indexPassingTest(self: *@This(), predicate: *const fn(objc.NSUInteger, ?*objc.BOOL) callconv(.C) objc.BOOL) objc.NSUInteger {
        return objc.msgSend(self, "indexPassingTest:", objc.NSUInteger, .{predicate});
    }

    pub fn indexWithOptionsPassingTest(self: *@This(), opts: EnumerationOptions, predicate: *const fn(objc.NSUInteger, ?*objc.BOOL) callconv(.C) objc.BOOL) objc.NSUInteger {
        return objc.msgSend(self, "indexWithOptions:passingTest:", objc.NSUInteger, .{opts, predicate});
    }

    pub fn indexInRangeOptionsPassingTest(self: *@This(), range: Range, opts: EnumerationOptions, predicate: *const fn(objc.NSUInteger, ?*objc.BOOL) callconv(.C) objc.BOOL) objc.NSUInteger {
        return objc.msgSend(self, "indexInRange:options:passingTest:", objc.NSUInteger, .{range, opts, predicate});
    }

    pub fn indexesPassingTest(self: *@This(), predicate: *const fn(objc.NSUInteger, ?*objc.BOOL) callconv(.C) objc.BOOL) ?*IndexSet {
        return objc.msgSend(self, "indexesPassingTest:", ?*IndexSet, .{predicate});
    }

    pub fn indexesWithOptionsPassingTest(self: *@This(), opts: EnumerationOptions, predicate: *const fn(objc.NSUInteger, ?*objc.BOOL) callconv(.C) objc.BOOL) ?*IndexSet {
        return objc.msgSend(self, "indexesWithOptions:passingTest:", ?*IndexSet, .{opts, predicate});
    }

    pub fn indexesInRangeOptionsPassingTest(self: *@This(), range: Range, opts: EnumerationOptions, predicate: *const fn(objc.NSUInteger, ?*objc.BOOL) callconv(.C) objc.BOOL) ?*IndexSet {
        return objc.msgSend(self, "indexesInRange:options:passingTest:", ?*IndexSet, .{range, opts, predicate});
    }

    pub fn enumerateRangesUsingBlock(self: *@This(), block: *const fn(Range, ?*objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(self, "enumerateRangesUsingBlock:", void, .{block});
    }

    pub fn enumerateRangesWithOptionsUsingBlock(self: *@This(), opts: EnumerationOptions, block: *const fn(Range, ?*objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(self, "enumerateRangesWithOptions:usingBlock:", void, .{opts, block});
    }

    pub fn enumerateRangesInRangeOptionsUsingBlock(self: *@This(), range: Range, opts: EnumerationOptions, block: *const fn(Range, ?*objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(self, "enumerateRangesInRange:options:usingBlock:", void, .{range, opts, block});
    }

    pub fn count(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "count", objc.NSUInteger, .{});
    }

    pub fn firstIndex(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "firstIndex", objc.NSUInteger, .{});
    }

    pub fn lastIndex(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "lastIndex", objc.NSUInteger, .{});
    }

};

pub const anon335 = extern struct {
    _hasSingleRange: objc.NSUInteger,
    _hasBitfield: objc.NSUInteger,
    _reservedArrayBinderController: objc.NSUInteger,
};

pub const anon385 = extern union {
    _singleRange: anon399,
    _multipleRanges: anon429,
    _singleBitfield: anon469,
};

pub const anon399 = extern struct {
    _range: Range,
};

pub const anon429 = extern struct {
    _data: ?*anyopaque,
    _reserved: ?*anyopaque,
};

pub const anon469 = extern struct {
    _bitfield: objc.uint64_t,
};

/// https://developer.apple.com/documentation/Foundation/NSMutableIndexSet?language=objc
pub const MutableIndexSet = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMutableIndexSet", @This(), IndexSet, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn addIndexes(self: *@This(), indexSet: ?*IndexSet) void {
        return objc.msgSend(self, "addIndexes:", void, .{indexSet});
    }

    pub fn removeIndexes(self: *@This(), indexSet: ?*IndexSet) void {
        return objc.msgSend(self, "removeIndexes:", void, .{indexSet});
    }

    pub fn removeAllIndexes(self: *@This()) void {
        return objc.msgSend(self, "removeAllIndexes", void, .{});
    }

    pub fn addIndex(self: *@This(), value: objc.NSUInteger) void {
        return objc.msgSend(self, "addIndex:", void, .{value});
    }

    pub fn removeIndex(self: *@This(), value: objc.NSUInteger) void {
        return objc.msgSend(self, "removeIndex:", void, .{value});
    }

    pub fn addIndexesInRange(self: *@This(), range: Range) void {
        return objc.msgSend(self, "addIndexesInRange:", void, .{range});
    }

    pub fn removeIndexesInRange(self: *@This(), range: Range) void {
        return objc.msgSend(self, "removeIndexesInRange:", void, .{range});
    }

    pub fn shiftIndexesStartingAtIndexBy(self: *@This(), index: objc.NSUInteger, delta: objc.NSInteger) void {
        return objc.msgSend(self, "shiftIndexesStartingAtIndex:by:", void, .{index, delta});
    }

};

pub const OrderedCollectionDifferenceCalculationOptions = enum(objc.NSUInteger) {
    OmitInsertedObjects = 1,
    OmitRemovedObjects = 2,
    InferMoves = 4,
};

/// https://developer.apple.com/documentation/Foundation/NSOrderedCollectionDifference?language=objc
pub const OrderedCollectionDifference = opaque {
    pub const InternalInfo = objc.ExternalClass("NSOrderedCollectionDifference", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithChanges(self: *@This(), changes: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithChanges:", *@This(), .{changes});
    }

    pub fn initWithInsertIndexesInsertedObjectsRemoveIndexesRemovedObjectsAdditionalChanges(self: *@This(), inserts: ?*IndexSet, insertedObjects: ?*anyopaque, removes: ?*IndexSet, removedObjects: ?*anyopaque, changes: ?*anyopaque, ) *@This() {
        return objc.msgSend(self, "initWithInsertIndexes:insertedObjects:removeIndexes:removedObjects:additionalChanges:", *@This(), .{inserts, insertedObjects, removes, removedObjects, changes, });
    }

    pub fn initWithInsertIndexesInsertedObjectsRemoveIndexesRemovedObjects(self: *@This(), inserts: ?*IndexSet, insertedObjects: ?*anyopaque, removes: ?*IndexSet, removedObjects: ?*anyopaque, ) *@This() {
        return objc.msgSend(self, "initWithInsertIndexes:insertedObjects:removeIndexes:removedObjects:", *@This(), .{inserts, insertedObjects, removes, removedObjects, });
    }

    pub fn differenceByTransformingChangesWithBlock(self: *@This(), block: *const fn(?*anyopaque) callconv(.C) ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "differenceByTransformingChangesWithBlock:", ?*anyopaque, .{block});
    }

    pub fn inverseDifference(self: *@This()) *@This() {
        return objc.msgSend(self, "inverseDifference", *@This(), .{});
    }

    pub fn insertions(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "insertions", ?*anyopaque, .{});
    }

    pub fn removals(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "removals", ?*anyopaque, .{});
    }

    pub fn hasChanges(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasChanges", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSArray?language=objc
pub const Array = opaque {
    pub const InternalInfo = objc.ExternalClass("NSArray", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn objectAtIndex(self: *@This(), index: objc.NSUInteger) void {
        return objc.msgSend(self, "objectAtIndex:", void, .{index});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithObjectsCount(self: *@This(), objects: ?*anyopaque, cnt: objc.NSUInteger) *@This() {
        return objc.msgSend(self, "initWithObjects:count:", *@This(), .{objects, cnt});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn count(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "count", objc.NSUInteger, .{});
    }

};

pub const BinarySearchingOptions = enum(objc.NSUInteger) {
    FirstEqual = 256,
    LastEqual = 512,
    InsertionIndex = 1024,
};

/// https://developer.apple.com/documentation/Foundation/NSMutableArray?language=objc
pub const MutableArray = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMutableArray", @This(), Array, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn addObject(self: *@This(), anObject: void) void {
        return objc.msgSend(self, "addObject:", void, .{anObject});
    }

    pub fn insertObjectAtIndex(self: *@This(), anObject: void, index: objc.NSUInteger) void {
        return objc.msgSend(self, "insertObject:atIndex:", void, .{anObject, index});
    }

    pub fn removeLastObject(self: *@This()) void {
        return objc.msgSend(self, "removeLastObject", void, .{});
    }

    pub fn removeObjectAtIndex(self: *@This(), index: objc.NSUInteger) void {
        return objc.msgSend(self, "removeObjectAtIndex:", void, .{index});
    }

    pub fn replaceObjectAtIndexWithObject(self: *@This(), index: objc.NSUInteger, anObject: void) void {
        return objc.msgSend(self, "replaceObjectAtIndex:withObject:", void, .{index, anObject});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithCapacity(self: *@This(), numItems: objc.NSUInteger) *@This() {
        return objc.msgSend(self, "initWithCapacity:", *@This(), .{numItems});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSAutoreleasePool?language=objc
pub const AutoreleasePool = opaque {
    pub const InternalInfo = objc.ExternalClass("NSAutoreleasePool", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn addObject(self: *@This(), anObject: *objc.Id) void {
        return objc.msgSend(self, "addObject:", void, .{anObject});
    }

    pub fn addObject(self: *@This(), anObject: *objc.Id) void {
        return objc.msgSend(self, "addObject:", void, .{anObject});
    }

    pub fn drain(self: *@This()) void {
        return objc.msgSend(self, "drain", void, .{});
    }

};

pub const unichar = u16;

pub const ItemProviderRepresentationVisibility = enum(objc.NSInteger) {
    All = 0,
    Team = 1,
    Group = 2,
    OwnProcess = 3,
};

pub const ItemProviderFileOptions = enum(objc.NSInteger) {
    OpenInPlace = 1,
};

/// https://developer.apple.com/documentation/Foundation/NSItemProviderWriting?language=objc
pub const ItemProviderWriting = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn itemProviderVisibilityForRepresentationWithTypeIdentifier(self: *@This(), typeIdentifier: ?*String) ItemProviderRepresentationVisibility {
        return objc.msgSend(self, "itemProviderVisibilityForRepresentationWithTypeIdentifier:", ItemProviderRepresentationVisibility, .{typeIdentifier});
    }

    pub fn itemProviderVisibilityForRepresentationWithTypeIdentifier(self: *@This(), typeIdentifier: ?*String) ItemProviderRepresentationVisibility {
        return objc.msgSend(self, "itemProviderVisibilityForRepresentationWithTypeIdentifier:", ItemProviderRepresentationVisibility, .{typeIdentifier});
    }

    pub fn loadDataWithTypeIdentifierForItemProviderCompletionHandler(self: *@This(), typeIdentifier: ?*String, completionHandler: *const fn(?*Data, ?*core_foundation.NSError) callconv(.C) void) ?*Progress {
        return objc.msgSend(self, "loadDataWithTypeIdentifier:forItemProviderCompletionHandler:", ?*Progress, .{typeIdentifier, completionHandler});
    }

    pub fn writableTypeIdentifiersForItemProvider(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "writableTypeIdentifiersForItemProvider", ?*anyopaque, .{});
    }

    pub fn writableTypeIdentifiersForItemProvider(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "writableTypeIdentifiersForItemProvider", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSItemProviderReading?language=objc
pub const ItemProviderReading = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn objectWithItemProviderDataTypeIdentifierError(self: *@This(), data: ?*Data, typeIdentifier: ?*String, outError: ?*?*core_foundation.NSError) *@This() {
        return objc.msgSend(self, "objectWithItemProviderData:typeIdentifier:error:", *@This(), .{data, typeIdentifier, outError});
    }

    pub fn readableTypeIdentifiersForItemProvider(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "readableTypeIdentifiersForItemProvider", ?*anyopaque, .{});
    }

};

pub const ItemProviderCompletionHandler = *const fn(?*anyopaque, ?*core_foundation.NSError) callconv(.C) void;

pub const ItemProviderLoadHandler = *const fn(ItemProviderCompletionHandler, *objc.Class, ?*Dictionary) callconv(.C) void;

/// https://developer.apple.com/documentation/Foundation/NSItemProvider?language=objc
pub const ItemProvider = opaque {
    pub const InternalInfo = objc.ExternalClass("NSItemProvider", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn registerDataRepresentationForTypeIdentifierVisibilityLoadHandler(self: *@This(), typeIdentifier: ?*String, visibility: ItemProviderRepresentationVisibility, loadHandler: *const fn(*const fn(?*Data, ?*core_foundation.NSError) callconv(.C) void) callconv(.C) ?*Progress) void {
        return objc.msgSend(self, "registerDataRepresentationForTypeIdentifier:visibility:loadHandler:", void, .{typeIdentifier, visibility, loadHandler});
    }

    pub fn registerFileRepresentationForTypeIdentifierFileOptionsVisibilityLoadHandler(self: *@This(), typeIdentifier: ?*String, fileOptions: ItemProviderFileOptions, visibility: ItemProviderRepresentationVisibility, loadHandler: *const fn(*const fn(?*URL, objc.BOOL, ?*core_foundation.NSError) callconv(.C) void) callconv(.C) ?*Progress, ) void {
        return objc.msgSend(self, "registerFileRepresentationForTypeIdentifier:fileOptions:visibility:loadHandler:", void, .{typeIdentifier, fileOptions, visibility, loadHandler, });
    }

    pub fn registeredTypeIdentifiersWithFileOptions(self: *@This(), fileOptions: ItemProviderFileOptions) ?*anyopaque {
        return objc.msgSend(self, "registeredTypeIdentifiersWithFileOptions:", ?*anyopaque, .{fileOptions});
    }

    pub fn hasItemConformingToTypeIdentifier(self: *@This(), typeIdentifier: ?*String) objc.BOOL {
        return objc.msgSend(self, "hasItemConformingToTypeIdentifier:", objc.BOOL, .{typeIdentifier});
    }

    pub fn hasRepresentationConformingToTypeIdentifierFileOptions(self: *@This(), typeIdentifier: ?*String, fileOptions: ItemProviderFileOptions) objc.BOOL {
        return objc.msgSend(self, "hasRepresentationConformingToTypeIdentifier:fileOptions:", objc.BOOL, .{typeIdentifier, fileOptions});
    }

    pub fn loadDataRepresentationForTypeIdentifierCompletionHandler(self: *@This(), typeIdentifier: ?*String, completionHandler: *const fn(?*Data, ?*core_foundation.NSError) callconv(.C) void) ?*Progress {
        return objc.msgSend(self, "loadDataRepresentationForTypeIdentifier:completionHandler:", ?*Progress, .{typeIdentifier, completionHandler});
    }

    pub fn loadFileRepresentationForTypeIdentifierCompletionHandler(self: *@This(), typeIdentifier: ?*String, completionHandler: *const fn(?*URL, ?*core_foundation.NSError) callconv(.C) void) ?*Progress {
        return objc.msgSend(self, "loadFileRepresentationForTypeIdentifier:completionHandler:", ?*Progress, .{typeIdentifier, completionHandler});
    }

    pub fn loadInPlaceFileRepresentationForTypeIdentifierCompletionHandler(self: *@This(), typeIdentifier: ?*String, completionHandler: *const fn(?*URL, objc.BOOL, ?*core_foundation.NSError) callconv(.C) void) ?*Progress {
        return objc.msgSend(self, "loadInPlaceFileRepresentationForTypeIdentifier:completionHandler:", ?*Progress, .{typeIdentifier, completionHandler});
    }

    pub fn initWithObject(self: *@This(), object: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithObject:", *@This(), .{object});
    }

    pub fn registerObjectVisibility(self: *@This(), object: ?*anyopaque, visibility: ItemProviderRepresentationVisibility) void {
        return objc.msgSend(self, "registerObject:visibility:", void, .{object, visibility});
    }

    pub fn registerObjectOfClassVisibilityLoadHandler(self: *@This(), aClass: ?*anyopaque, visibility: ItemProviderRepresentationVisibility, loadHandler: *const fn(*const fn(?*anyopaque, ?*core_foundation.NSError) callconv(.C) void) callconv(.C) ?*Progress) void {
        return objc.msgSend(self, "registerObjectOfClass:visibility:loadHandler:", void, .{aClass, visibility, loadHandler});
    }

    pub fn canLoadObjectOfClass(self: *@This(), aClass: ?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "canLoadObjectOfClass:", objc.BOOL, .{aClass});
    }

    pub fn loadObjectOfClassCompletionHandler(self: *@This(), aClass: ?*anyopaque, completionHandler: *const fn(?*anyopaque, ?*core_foundation.NSError) callconv(.C) void) ?*Progress {
        return objc.msgSend(self, "loadObjectOfClass:completionHandler:", ?*Progress, .{aClass, completionHandler});
    }

    pub fn initWithItemTypeIdentifier(self: *@This(), item: ?*anyopaque, typeIdentifier: ?*String) *@This() {
        return objc.msgSend(self, "initWithItem:typeIdentifier:", *@This(), .{item, typeIdentifier});
    }

    pub fn initWithContentsOfURL(self: *@This(), fileURL: ?*URL) *@This() {
        return objc.msgSend(self, "initWithContentsOfURL:", *@This(), .{fileURL});
    }

    pub fn registerItemForTypeIdentifierLoadHandler(self: *@This(), typeIdentifier: ?*String, loadHandler: ItemProviderLoadHandler) void {
        return objc.msgSend(self, "registerItemForTypeIdentifier:loadHandler:", void, .{typeIdentifier, loadHandler});
    }

    pub fn loadItemForTypeIdentifierOptionsCompletionHandler(self: *@This(), typeIdentifier: ?*String, options: ?*Dictionary, completionHandler: ItemProviderCompletionHandler) void {
        return objc.msgSend(self, "loadItemForTypeIdentifier:options:completionHandler:", void, .{typeIdentifier, options, completionHandler});
    }

    pub fn registeredTypeIdentifiers(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "registeredTypeIdentifiers", ?*anyopaque, .{});
    }

    pub fn suggestedName(self: *@This()) ?*String {
        return objc.msgSend(self, "suggestedName", ?*String, .{});
    }

    pub fn setSuggestedName(self: *@This(), suggestedName: ?*String) void {
        return objc.msgSend(self, "setSuggestedName:", void, .{suggestedName});
    }

};

pub const ItemProviderErrorCode = enum(objc.NSInteger) {
    UnknownError = -1,
    ItemUnavailableError = -1000,
    UnexpectedValueClassError = -1100,
    UnavailableCoercionError = -1200,
};

pub const StringCompareOptions = enum(objc.NSUInteger) {
    CaseInsensitiveSearch = 1,
    LiteralSearch = 2,
    BackwardsSearch = 4,
    AnchoredSearch = 8,
    NumericSearch = 64,
    DiacriticInsensitiveSearch = 128,
    WidthInsensitiveSearch = 256,
    ForcedOrderingSearch = 512,
    RegularExpressionSearch = 1024,
};

pub const StringEncoding = objc.NSUInteger;

pub const StringEncodingConversionOptions = enum(objc.NSUInteger) {
    AllowLossy = 1,
    ExternalRepresentation = 2,
};

/// https://developer.apple.com/documentation/Foundation/NSString?language=objc
pub const String = opaque {
    pub const InternalInfo = objc.ExternalClass("NSString", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn characterAtIndex(self: *@This(), index: objc.NSUInteger) unichar {
        return objc.msgSend(self, "characterAtIndex:", unichar, .{index});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn length(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "length", objc.NSUInteger, .{});
    }

};

pub const StringEnumerationOptions = enum(objc.NSUInteger) {
    ByLines = 0,
    ByParagraphs = 1,
    ByComposedCharacterSequences = 2,
    ByWords = 3,
    BySentences = 4,
    ByCaretPositions = 5,
    ByDeletionClusters = 6,
    Reverse = 256,
    SubstringNotRequired = 512,
    Localized = 1024,
};

pub const StringTransform = ?*String;

pub const StringEncodingDetectionOptionsKey = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSMutableString?language=objc
pub const MutableString = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMutableString", @This(), String, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn replaceCharactersInRangeWithString(self: *@This(), range: Range, aString: ?*String) void {
        return objc.msgSend(self, "replaceCharactersInRange:withString:", void, .{range, aString});
    }

};

pub const anon5481 = enum(StringEncoding) {
    NSProprietaryStringEncoding = 65536,
};

/// https://developer.apple.com/documentation/Foundation/NSSimpleCString?language=objc
pub const SimpleCString = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSimpleCString", @This(), String, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;
};

/// https://developer.apple.com/documentation/Foundation/NSConstantString?language=objc
pub const ConstantString = opaque {
    pub const InternalInfo = objc.ExternalClass("NSConstantString", @This(), SimpleCString, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;
};

/// https://developer.apple.com/documentation/Foundation/NSDictionary?language=objc
pub const Dictionary = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDictionary", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn objectForKey(self: *@This(), aKey: void) void {
        return objc.msgSend(self, "objectForKey:", void, .{aKey});
    }

    pub fn keyEnumerator(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "keyEnumerator", ?*anyopaque, .{});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithObjectsForKeysCount(self: *@This(), objects: ?*anyopaque, keys: ?*anyopaque, cnt: objc.NSUInteger) *@This() {
        return objc.msgSend(self, "initWithObjects:forKeys:count:", *@This(), .{objects, keys, cnt});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn count(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "count", objc.NSUInteger, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSMutableDictionary?language=objc
pub const MutableDictionary = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMutableDictionary", @This(), Dictionary, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn removeObjectForKey(self: *@This(), aKey: void) void {
        return objc.msgSend(self, "removeObjectForKey:", void, .{aKey});
    }

    pub fn setObjectForKey(self: *@This(), anObject: void, aKey: void) void {
        return objc.msgSend(self, "setObject:forKey:", void, .{anObject, aKey});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithCapacity(self: *@This(), numItems: objc.NSUInteger) *@This() {
        return objc.msgSend(self, "initWithCapacity:", *@This(), .{numItems});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSSet?language=objc
pub const Set = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSet", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn member(self: *@This(), object: void) void {
        return objc.msgSend(self, "member:", void, .{object});
    }

    pub fn objectEnumerator(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "objectEnumerator", ?*anyopaque, .{});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithObjectsCount(self: *@This(), objects: ?*anyopaque, cnt: objc.NSUInteger) *@This() {
        return objc.msgSend(self, "initWithObjects:count:", *@This(), .{objects, cnt});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn count(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "count", objc.NSUInteger, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSMutableSet?language=objc
pub const MutableSet = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMutableSet", @This(), Set, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn addObject(self: *@This(), object: void) void {
        return objc.msgSend(self, "addObject:", void, .{object});
    }

    pub fn removeObject(self: *@This(), object: void) void {
        return objc.msgSend(self, "removeObject:", void, .{object});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithCapacity(self: *@This(), numItems: objc.NSUInteger) *@This() {
        return objc.msgSend(self, "initWithCapacity:", *@This(), .{numItems});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSCountedSet?language=objc
pub const CountedSet = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCountedSet", @This(), MutableSet, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithCapacity(self: *@This(), numItems: objc.NSUInteger) *@This() {
        return objc.msgSend(self, "initWithCapacity:", *@This(), .{numItems});
    }

    pub fn initWithArray(self: *@This(), array: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithArray:", *@This(), .{array});
    }

    pub fn initWithSet(self: *@This(), set: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithSet:", *@This(), .{set});
    }

    pub fn countForObject(self: *@This(), object: void) objc.NSUInteger {
        return objc.msgSend(self, "countForObject:", objc.NSUInteger, .{object});
    }

    pub fn objectEnumerator(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "objectEnumerator", ?*anyopaque, .{});
    }

    pub fn addObject(self: *@This(), object: void) void {
        return objc.msgSend(self, "addObject:", void, .{object});
    }

    pub fn removeObject(self: *@This(), object: void) void {
        return objc.msgSend(self, "removeObject:", void, .{object});
    }

};

pub const ProgressKind = ?*String;

pub const ProgressUserInfoKey = ?*String;

pub const ProgressFileOperationKind = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSProgress?language=objc
pub const Progress = opaque {
    pub const InternalInfo = objc.ExternalClass("NSProgress", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn currentProgress(self: *@This()) ?*Progress {
        return objc.msgSend(self, "currentProgress", ?*Progress, .{});
    }

    pub fn progressWithTotalUnitCount(self: *@This(), unitCount: objc.int64_t) ?*Progress {
        return objc.msgSend(self, "progressWithTotalUnitCount:", ?*Progress, .{unitCount});
    }

    pub fn discreteProgressWithTotalUnitCount(self: *@This(), unitCount: objc.int64_t) ?*Progress {
        return objc.msgSend(self, "discreteProgressWithTotalUnitCount:", ?*Progress, .{unitCount});
    }

    pub fn progressWithTotalUnitCountParentPendingUnitCount(self: *@This(), unitCount: objc.int64_t, parent: ?*Progress, portionOfParentTotalUnitCount: objc.int64_t) ?*Progress {
        return objc.msgSend(self, "progressWithTotalUnitCount:parent:pendingUnitCount:", ?*Progress, .{unitCount, parent, portionOfParentTotalUnitCount});
    }

    pub fn initWithParentUserInfo(self: *@This(), parentProgressOrNil: ?*Progress, userInfoOrNil: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithParent:userInfo:", *@This(), .{parentProgressOrNil, userInfoOrNil});
    }

    pub fn becomeCurrentWithPendingUnitCount(self: *@This(), unitCount: objc.int64_t) void {
        return objc.msgSend(self, "becomeCurrentWithPendingUnitCount:", void, .{unitCount});
    }

    pub fn performAsCurrentWithPendingUnitCountUsingBlock(self: *@This(), unitCount: objc.int64_t, work: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "performAsCurrentWithPendingUnitCount:usingBlock:", void, .{unitCount, work});
    }

    pub fn resignCurrent(self: *@This()) void {
        return objc.msgSend(self, "resignCurrent", void, .{});
    }

    pub fn addChildWithPendingUnitCount(self: *@This(), child: ?*Progress, inUnitCount: objc.int64_t) void {
        return objc.msgSend(self, "addChild:withPendingUnitCount:", void, .{child, inUnitCount});
    }

    pub fn setTotalUnitCount(self: *@This(), totalUnitCount: objc.int64_t) void {
        return objc.msgSend(self, "setTotalUnitCount:", void, .{totalUnitCount});
    }

    pub fn totalUnitCount(self: *@This()) objc.int64_t {
        return objc.msgSend(self, "totalUnitCount", objc.int64_t, .{});
    }

    pub fn completedUnitCount(self: *@This()) objc.int64_t {
        return objc.msgSend(self, "completedUnitCount", objc.int64_t, .{});
    }

    pub fn setCompletedUnitCount(self: *@This(), completedUnitCount: objc.int64_t) void {
        return objc.msgSend(self, "setCompletedUnitCount:", void, .{completedUnitCount});
    }

    pub fn localizedDescription(self: *@This()) ?*String {
        return objc.msgSend(self, "localizedDescription", ?*String, .{});
    }

    pub fn setLocalizedDescription(self: *@This(), localizedDescription: ?*String) void {
        return objc.msgSend(self, "setLocalizedDescription:", void, .{localizedDescription});
    }

    pub fn setLocalizedAdditionalDescription(self: *@This(), localizedAdditionalDescription: ?*String) void {
        return objc.msgSend(self, "setLocalizedAdditionalDescription:", void, .{localizedAdditionalDescription});
    }

    pub fn localizedAdditionalDescription(self: *@This()) ?*String {
        return objc.msgSend(self, "localizedAdditionalDescription", ?*String, .{});
    }

    pub fn setCancellable(self: *@This(), cancellable: objc.BOOL) void {
        return objc.msgSend(self, "setCancellable:", void, .{cancellable});
    }

    pub fn isCancellable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isCancellable", objc.BOOL, .{});
    }

    pub fn setPausable(self: *@This(), pausable: objc.BOOL) void {
        return objc.msgSend(self, "setPausable:", void, .{pausable});
    }

    pub fn isPausable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isPausable", objc.BOOL, .{});
    }

    pub fn isCancelled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isCancelled", objc.BOOL, .{});
    }

    pub fn isPaused(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isPaused", objc.BOOL, .{});
    }

    pub fn cancellationHandler(self: *@This()) *const fn() callconv(.C) void {
        return objc.msgSend(self, "cancellationHandler", *const fn() callconv(.C) void, .{});
    }

    pub fn setCancellationHandler(self: *@This(), cancellationHandler: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "setCancellationHandler:", void, .{cancellationHandler});
    }

    pub fn pausingHandler(self: *@This()) *const fn() callconv(.C) void {
        return objc.msgSend(self, "pausingHandler", *const fn() callconv(.C) void, .{});
    }

    pub fn setPausingHandler(self: *@This(), pausingHandler: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "setPausingHandler:", void, .{pausingHandler});
    }

    pub fn setResumingHandler(self: *@This(), resumingHandler: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "setResumingHandler:", void, .{resumingHandler});
    }

    pub fn resumingHandler(self: *@This()) *const fn() callconv(.C) void {
        return objc.msgSend(self, "resumingHandler", *const fn() callconv(.C) void, .{});
    }

    pub fn setUserInfoObjectForKey(self: *@This(), objectOrNil: *objc.Id, key: ProgressUserInfoKey) void {
        return objc.msgSend(self, "setUserInfoObject:forKey:", void, .{objectOrNil, key});
    }

    pub fn isIndeterminate(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isIndeterminate", objc.BOOL, .{});
    }

    pub fn fractionCompleted(self: *@This()) f64 {
        return objc.msgSend(self, "fractionCompleted", f64, .{});
    }

    pub fn isFinished(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isFinished", objc.BOOL, .{});
    }

    pub fn cancel(self: *@This()) void {
        return objc.msgSend(self, "cancel", void, .{});
    }

    pub fn pause(self: *@This()) void {
        return objc.msgSend(self, "pause", void, .{});
    }

    pub fn @"resume"(self: *@This()) void {
        return objc.msgSend(self, "resume", void, .{});
    }

    pub fn userInfo(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "userInfo", ?*anyopaque, .{});
    }

    pub fn kind(self: *@This()) ProgressKind {
        return objc.msgSend(self, "kind", ProgressKind, .{});
    }

    pub fn setKind(self: *@This(), kind: ProgressKind) void {
        return objc.msgSend(self, "setKind:", void, .{kind});
    }

    pub fn estimatedTimeRemaining(self: *@This()) ?*Number {
        return objc.msgSend(self, "estimatedTimeRemaining", ?*Number, .{});
    }

    pub fn setEstimatedTimeRemaining(self: *@This(), estimatedTimeRemaining: ?*Number) void {
        return objc.msgSend(self, "setEstimatedTimeRemaining:", void, .{estimatedTimeRemaining});
    }

    pub fn throughput(self: *@This()) ?*Number {
        return objc.msgSend(self, "throughput", ?*Number, .{});
    }

    pub fn setThroughput(self: *@This(), throughput: ?*Number) void {
        return objc.msgSend(self, "setThroughput:", void, .{throughput});
    }

    pub fn fileOperationKind(self: *@This()) ProgressFileOperationKind {
        return objc.msgSend(self, "fileOperationKind", ProgressFileOperationKind, .{});
    }

    pub fn setFileOperationKind(self: *@This(), fileOperationKind: ProgressFileOperationKind) void {
        return objc.msgSend(self, "setFileOperationKind:", void, .{fileOperationKind});
    }

    pub fn fileURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "fileURL", ?*URL, .{});
    }

    pub fn setFileURL(self: *@This(), fileURL: ?*URL) void {
        return objc.msgSend(self, "setFileURL:", void, .{fileURL});
    }

    pub fn setFileTotalCount(self: *@This(), fileTotalCount: ?*Number) void {
        return objc.msgSend(self, "setFileTotalCount:", void, .{fileTotalCount});
    }

    pub fn fileTotalCount(self: *@This()) ?*Number {
        return objc.msgSend(self, "fileTotalCount", ?*Number, .{});
    }

    pub fn fileCompletedCount(self: *@This()) ?*Number {
        return objc.msgSend(self, "fileCompletedCount", ?*Number, .{});
    }

    pub fn setFileCompletedCount(self: *@This(), fileCompletedCount: ?*Number) void {
        return objc.msgSend(self, "setFileCompletedCount:", void, .{fileCompletedCount});
    }

    pub fn publish(self: *@This()) void {
        return objc.msgSend(self, "publish", void, .{});
    }

    pub fn unpublish(self: *@This()) void {
        return objc.msgSend(self, "unpublish", void, .{});
    }

    pub fn addSubscriberForFileURLWithPublishingHandler(self: *@This(), url: ?*URL, publishingHandler: ProgressPublishingHandler) *objc.Id {
        return objc.msgSend(self, "addSubscriberForFileURL:withPublishingHandler:", *objc.Id, .{url, publishingHandler});
    }

    pub fn removeSubscriber(self: *@This(), subscriber: *objc.Id) void {
        return objc.msgSend(self, "removeSubscriber:", void, .{subscriber});
    }

    pub fn isOld(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isOld", objc.BOOL, .{});
    }

};

pub const ProgressUnpublishingHandler = *const fn() callconv(.C) void;

pub const ProgressPublishingHandler = *const fn(?*Progress) callconv(.C) ProgressUnpublishingHandler;

/// https://developer.apple.com/documentation/Foundation/NSProgressReporting?language=objc
pub const ProgressReporting = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn progress(self: *@This()) ?*Progress {
        return objc.msgSend(self, "progress", ?*Progress, .{});
    }

};

pub const NotificationName = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSNotification?language=objc
pub const Notification = opaque {
    pub const InternalInfo = objc.ExternalClass("NSNotification", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithNameObjectUserInfo(self: *@This(), name: NotificationName, object: *objc.Id, userInfo: ?*Dictionary) *@This() {
        return objc.msgSend(self, "initWithName:object:userInfo:", *@This(), .{name, object, userInfo});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn name(self: *@This()) NotificationName {
        return objc.msgSend(self, "name", NotificationName, .{});
    }

    pub fn object(self: *@This()) *objc.Id {
        return objc.msgSend(self, "object", *objc.Id, .{});
    }

    pub fn userInfo(self: *@This()) ?*Dictionary {
        return objc.msgSend(self, "userInfo", ?*Dictionary, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSNotificationCenter?language=objc
pub const NotificationCenter = opaque {
    pub const InternalInfo = objc.ExternalClass("NSNotificationCenter", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn addObserverSelectorNameObject(self: *@This(), observer: *objc.Id, aSelector: *objc.SEL, aName: NotificationName, anObject: *objc.Id, ) void {
        return objc.msgSend(self, "addObserver:selector:name:object:", void, .{observer, aSelector, aName, anObject, });
    }

    pub fn postNotification(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "postNotification:", void, .{notification});
    }

    pub fn postNotificationNameObject(self: *@This(), aName: NotificationName, anObject: *objc.Id) void {
        return objc.msgSend(self, "postNotificationName:object:", void, .{aName, anObject});
    }

    pub fn postNotificationNameObjectUserInfo(self: *@This(), aName: NotificationName, anObject: *objc.Id, aUserInfo: ?*Dictionary) void {
        return objc.msgSend(self, "postNotificationName:object:userInfo:", void, .{aName, anObject, aUserInfo});
    }

    pub fn removeObserver(self: *@This(), observer: *objc.Id) void {
        return objc.msgSend(self, "removeObserver:", void, .{observer});
    }

    pub fn removeObserverNameObject(self: *@This(), observer: *objc.Id, aName: NotificationName, anObject: *objc.Id) void {
        return objc.msgSend(self, "removeObserver:name:object:", void, .{observer, aName, anObject});
    }

    pub fn addObserverForNameObjectQueueUsingBlock(self: *@This(), name: NotificationName, obj: *objc.Id, queue: ?*OperationQueue, block: *const fn(?*Notification) callconv(.C) void, ) ?*anyopaque {
        return objc.msgSend(self, "addObserverForName:object:queue:usingBlock:", ?*anyopaque, .{name, obj, queue, block, });
    }

    pub fn defaultCenter(self: *@This()) ?*NotificationCenter {
        return objc.msgSend(self, "defaultCenter", ?*NotificationCenter, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSBundle?language=objc
pub const Bundle = opaque {
    pub const InternalInfo = objc.ExternalClass("NSBundle", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn mainBundle(self: *@This()) ?*Bundle {
        return objc.msgSend(self, "mainBundle", ?*Bundle, .{});
    }

    pub fn bundleWithPath(self: *@This(), path: ?*String) *@This() {
        return objc.msgSend(self, "bundleWithPath:", *@This(), .{path});
    }

    pub fn initWithPath(self: *@This(), path: ?*String) *@This() {
        return objc.msgSend(self, "initWithPath:", *@This(), .{path});
    }

    pub fn bundleWithURL(self: *@This(), url: ?*URL) *@This() {
        return objc.msgSend(self, "bundleWithURL:", *@This(), .{url});
    }

    pub fn initWithURL(self: *@This(), url: ?*URL) *@This() {
        return objc.msgSend(self, "initWithURL:", *@This(), .{url});
    }

    pub fn bundleForClass(self: *@This(), aClass: *objc.Class) ?*Bundle {
        return objc.msgSend(self, "bundleForClass:", ?*Bundle, .{aClass});
    }

    pub fn bundleWithIdentifier(self: *@This(), identifier: ?*String) ?*Bundle {
        return objc.msgSend(self, "bundleWithIdentifier:", ?*Bundle, .{identifier});
    }

    pub fn allBundles(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "allBundles", ?*anyopaque, .{});
    }

    pub fn allFrameworks(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "allFrameworks", ?*anyopaque, .{});
    }

    pub fn load(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "load", objc.BOOL, .{});
    }

    pub fn isLoaded(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isLoaded", objc.BOOL, .{});
    }

    pub fn unload(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "unload", objc.BOOL, .{});
    }

    pub fn preflightAndReturnError(self: *@This(), @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "preflightAndReturnError:", objc.BOOL, .{@"error"});
    }

    pub fn loadAndReturnError(self: *@This(), @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "loadAndReturnError:", objc.BOOL, .{@"error"});
    }

    pub fn bundleURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "bundleURL", ?*URL, .{});
    }

    pub fn resourceURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "resourceURL", ?*URL, .{});
    }

    pub fn executableURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "executableURL", ?*URL, .{});
    }

    pub fn URLForAuxiliaryExecutable(self: *@This(), executableName: ?*String) ?*URL {
        return objc.msgSend(self, "URLForAuxiliaryExecutable:", ?*URL, .{executableName});
    }

    pub fn privateFrameworksURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "privateFrameworksURL", ?*URL, .{});
    }

    pub fn sharedFrameworksURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "sharedFrameworksURL", ?*URL, .{});
    }

    pub fn sharedSupportURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "sharedSupportURL", ?*URL, .{});
    }

    pub fn builtInPlugInsURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "builtInPlugInsURL", ?*URL, .{});
    }

    pub fn appStoreReceiptURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "appStoreReceiptURL", ?*URL, .{});
    }

    pub fn bundlePath(self: *@This()) ?*String {
        return objc.msgSend(self, "bundlePath", ?*String, .{});
    }

    pub fn resourcePath(self: *@This()) ?*String {
        return objc.msgSend(self, "resourcePath", ?*String, .{});
    }

    pub fn executablePath(self: *@This()) ?*String {
        return objc.msgSend(self, "executablePath", ?*String, .{});
    }

    pub fn pathForAuxiliaryExecutable(self: *@This(), executableName: ?*String) ?*String {
        return objc.msgSend(self, "pathForAuxiliaryExecutable:", ?*String, .{executableName});
    }

    pub fn privateFrameworksPath(self: *@This()) ?*String {
        return objc.msgSend(self, "privateFrameworksPath", ?*String, .{});
    }

    pub fn sharedFrameworksPath(self: *@This()) ?*String {
        return objc.msgSend(self, "sharedFrameworksPath", ?*String, .{});
    }

    pub fn sharedSupportPath(self: *@This()) ?*String {
        return objc.msgSend(self, "sharedSupportPath", ?*String, .{});
    }

    pub fn builtInPlugInsPath(self: *@This()) ?*String {
        return objc.msgSend(self, "builtInPlugInsPath", ?*String, .{});
    }

    pub fn URLForResourceWithExtensionSubdirectoryInBundleWithURL(self: *@This(), name: ?*String, ext: ?*String, subpath: ?*String, bundleURL: ?*URL, ) ?*URL {
        return objc.msgSend(self, "URLForResource:withExtension:subdirectory:inBundleWithURL:", ?*URL, .{name, ext, subpath, bundleURL, });
    }

    pub fn URLsForResourcesWithExtensionSubdirectoryInBundleWithURL(self: *@This(), ext: ?*String, subpath: ?*String, bundleURL: ?*URL) ?*anyopaque {
        return objc.msgSend(self, "URLsForResourcesWithExtension:subdirectory:inBundleWithURL:", ?*anyopaque, .{ext, subpath, bundleURL});
    }

    pub fn URLForResourceWithExtension(self: *@This(), name: ?*String, ext: ?*String) ?*URL {
        return objc.msgSend(self, "URLForResource:withExtension:", ?*URL, .{name, ext});
    }

    pub fn URLForResourceWithExtensionSubdirectory(self: *@This(), name: ?*String, ext: ?*String, subpath: ?*String) ?*URL {
        return objc.msgSend(self, "URLForResource:withExtension:subdirectory:", ?*URL, .{name, ext, subpath});
    }

    pub fn URLForResourceWithExtensionSubdirectoryLocalization(self: *@This(), name: ?*String, ext: ?*String, subpath: ?*String, localizationName: ?*String, ) ?*URL {
        return objc.msgSend(self, "URLForResource:withExtension:subdirectory:localization:", ?*URL, .{name, ext, subpath, localizationName, });
    }

    pub fn URLsForResourcesWithExtensionSubdirectory(self: *@This(), ext: ?*String, subpath: ?*String) ?*anyopaque {
        return objc.msgSend(self, "URLsForResourcesWithExtension:subdirectory:", ?*anyopaque, .{ext, subpath});
    }

    pub fn URLsForResourcesWithExtensionSubdirectoryLocalization(self: *@This(), ext: ?*String, subpath: ?*String, localizationName: ?*String) ?*anyopaque {
        return objc.msgSend(self, "URLsForResourcesWithExtension:subdirectory:localization:", ?*anyopaque, .{ext, subpath, localizationName});
    }

    pub fn pathForResourceOfTypeInDirectory(self: *@This(), name: ?*String, ext: ?*String, bundlePath: ?*String) ?*String {
        return objc.msgSend(self, "pathForResource:ofType:inDirectory:", ?*String, .{name, ext, bundlePath});
    }

    pub fn pathsForResourcesOfTypeInDirectory(self: *@This(), ext: ?*String, bundlePath: ?*String) ?*anyopaque {
        return objc.msgSend(self, "pathsForResourcesOfType:inDirectory:", ?*anyopaque, .{ext, bundlePath});
    }

    pub fn pathForResourceOfType(self: *@This(), name: ?*String, ext: ?*String) ?*String {
        return objc.msgSend(self, "pathForResource:ofType:", ?*String, .{name, ext});
    }

    pub fn pathForResourceOfTypeInDirectory(self: *@This(), name: ?*String, ext: ?*String, subpath: ?*String) ?*String {
        return objc.msgSend(self, "pathForResource:ofType:inDirectory:", ?*String, .{name, ext, subpath});
    }

    pub fn pathForResourceOfTypeInDirectoryForLocalization(self: *@This(), name: ?*String, ext: ?*String, subpath: ?*String, localizationName: ?*String, ) ?*String {
        return objc.msgSend(self, "pathForResource:ofType:inDirectory:forLocalization:", ?*String, .{name, ext, subpath, localizationName, });
    }

    pub fn pathsForResourcesOfTypeInDirectory(self: *@This(), ext: ?*String, subpath: ?*String) ?*anyopaque {
        return objc.msgSend(self, "pathsForResourcesOfType:inDirectory:", ?*anyopaque, .{ext, subpath});
    }

    pub fn pathsForResourcesOfTypeInDirectoryForLocalization(self: *@This(), ext: ?*String, subpath: ?*String, localizationName: ?*String) ?*anyopaque {
        return objc.msgSend(self, "pathsForResourcesOfType:inDirectory:forLocalization:", ?*anyopaque, .{ext, subpath, localizationName});
    }

    pub fn localizedStringForKeyValueTable(self: *@This(), key: ?*String, value: ?*String, tableName: ?*String) ?*String {
        return objc.msgSend(self, "localizedStringForKey:value:table:", ?*String, .{key, value, tableName});
    }

    pub fn localizedAttributedStringForKeyValueTable(self: *@This(), key: ?*String, value: ?*String, tableName: ?*String) ?*core_foundation.NSAttributedString {
        return objc.msgSend(self, "localizedAttributedStringForKey:value:table:", ?*core_foundation.NSAttributedString, .{key, value, tableName});
    }

    pub fn bundleIdentifier(self: *@This()) ?*String {
        return objc.msgSend(self, "bundleIdentifier", ?*String, .{});
    }

    pub fn infoDictionary(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "infoDictionary", ?*anyopaque, .{});
    }

    pub fn localizedInfoDictionary(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "localizedInfoDictionary", ?*anyopaque, .{});
    }

    pub fn objectForInfoDictionaryKey(self: *@This(), key: ?*String) *objc.Id {
        return objc.msgSend(self, "objectForInfoDictionaryKey:", *objc.Id, .{key});
    }

    pub fn classNamed(self: *@This(), className: ?*String) *objc.Class {
        return objc.msgSend(self, "classNamed:", *objc.Class, .{className});
    }

    pub fn principalClass(self: *@This()) *objc.Class {
        return objc.msgSend(self, "principalClass", *objc.Class, .{});
    }

    pub fn preferredLocalizations(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "preferredLocalizations", ?*anyopaque, .{});
    }

    pub fn localizations(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "localizations", ?*anyopaque, .{});
    }

    pub fn developmentLocalization(self: *@This()) ?*String {
        return objc.msgSend(self, "developmentLocalization", ?*String, .{});
    }

    pub fn preferredLocalizationsFromArray(self: *@This(), localizationsArray: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "preferredLocalizationsFromArray:", ?*anyopaque, .{localizationsArray});
    }

    pub fn preferredLocalizationsFromArrayForPreferences(self: *@This(), localizationsArray: ?*anyopaque, preferencesArray: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "preferredLocalizationsFromArray:forPreferences:", ?*anyopaque, .{localizationsArray, preferencesArray});
    }

    pub fn executableArchitectures(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "executableArchitectures", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSBundleResourceRequest?language=objc
pub const BundleResourceRequest = opaque {
    pub const InternalInfo = objc.ExternalClass("NSBundleResourceRequest", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithTags(self: *@This(), tags: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithTags:", *@This(), .{tags});
    }

    pub fn initWithTagsBundle(self: *@This(), tags: ?*anyopaque, bundle: ?*Bundle) *@This() {
        return objc.msgSend(self, "initWithTags:bundle:", *@This(), .{tags, bundle});
    }

    pub fn beginAccessingResourcesWithCompletionHandler(self: *@This(), completionHandler: *const fn(?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "beginAccessingResourcesWithCompletionHandler:", void, .{completionHandler});
    }

    pub fn conditionallyBeginAccessingResourcesWithCompletionHandler(self: *@This(), completionHandler: *const fn(objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(self, "conditionallyBeginAccessingResourcesWithCompletionHandler:", void, .{completionHandler});
    }

    pub fn endAccessingResources(self: *@This()) void {
        return objc.msgSend(self, "endAccessingResources", void, .{});
    }

    pub fn loadingPriority(self: *@This()) f64 {
        return objc.msgSend(self, "loadingPriority", f64, .{});
    }

    pub fn setLoadingPriority(self: *@This(), loadingPriority: f64) void {
        return objc.msgSend(self, "setLoadingPriority:", void, .{loadingPriority});
    }

    pub fn tags(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "tags", ?*anyopaque, .{});
    }

    pub fn bundle(self: *@This()) ?*Bundle {
        return objc.msgSend(self, "bundle", ?*Bundle, .{});
    }

    pub fn progress(self: *@This()) ?*Progress {
        return objc.msgSend(self, "progress", ?*Progress, .{});
    }

};

pub const anon101 = enum(u32) {
    NS_UnknownByteOrder = 0,
    NS_LittleEndian = 1,
    NS_BigEndian = 2,
};

pub extern "Foundation" fn HostByteOrder() callconv(.C) i64;

pub extern "Foundation" fn SwapShort(inv: u16) callconv(.C) u16;

pub extern "Foundation" fn SwapInt(inv: u32) callconv(.C) u32;

pub extern "Foundation" fn SwapLong(inv: u64) callconv(.C) u64;

pub extern "Foundation" fn SwapLongLong(inv: u64) callconv(.C) u64;

pub extern "Foundation" fn SwapBigShortToHost(x: u16) callconv(.C) u16;

pub extern "Foundation" fn SwapBigIntToHost(x: u32) callconv(.C) u32;

pub extern "Foundation" fn SwapBigLongToHost(x: u64) callconv(.C) u64;

pub extern "Foundation" fn SwapBigLongLongToHost(x: u64) callconv(.C) u64;

pub extern "Foundation" fn SwapHostShortToBig(x: u16) callconv(.C) u16;

pub extern "Foundation" fn SwapHostIntToBig(x: u32) callconv(.C) u32;

pub extern "Foundation" fn SwapHostLongToBig(x: u64) callconv(.C) u64;

pub extern "Foundation" fn SwapHostLongLongToBig(x: u64) callconv(.C) u64;

pub extern "Foundation" fn SwapLittleShortToHost(x: u16) callconv(.C) u16;

pub extern "Foundation" fn SwapLittleIntToHost(x: u32) callconv(.C) u32;

pub extern "Foundation" fn SwapLittleLongToHost(x: u64) callconv(.C) u64;

pub extern "Foundation" fn SwapLittleLongLongToHost(x: u64) callconv(.C) u64;

pub extern "Foundation" fn SwapHostShortToLittle(x: u16) callconv(.C) u16;

pub extern "Foundation" fn SwapHostIntToLittle(x: u32) callconv(.C) u32;

pub extern "Foundation" fn SwapHostLongToLittle(x: u64) callconv(.C) u64;

pub extern "Foundation" fn SwapHostLongLongToLittle(x: u64) callconv(.C) u64;

pub const SwappedFloat = extern struct {
    v: u32,
};

pub const SwappedDouble = extern struct {
    v: u64,
};

pub extern "Foundation" fn ConvertHostFloatToSwapped(x: f32) callconv(.C) SwappedFloat;

pub extern "Foundation" fn ConvertSwappedFloatToHost(x: SwappedFloat) callconv(.C) f32;

pub extern "Foundation" fn ConvertHostDoubleToSwapped(x: f64) callconv(.C) SwappedDouble;

pub extern "Foundation" fn ConvertSwappedDoubleToHost(x: SwappedDouble) callconv(.C) f64;

pub extern "Foundation" fn SwapFloat(x: SwappedFloat) callconv(.C) SwappedFloat;

pub extern "Foundation" fn SwapDouble(x: SwappedDouble) callconv(.C) SwappedDouble;

pub extern "Foundation" fn SwapBigDoubleToHost(x: SwappedDouble) callconv(.C) f64;

pub extern "Foundation" fn SwapBigFloatToHost(x: SwappedFloat) callconv(.C) f32;

pub extern "Foundation" fn SwapHostDoubleToBig(x: f64) callconv(.C) SwappedDouble;

pub extern "Foundation" fn SwapHostFloatToBig(x: f32) callconv(.C) SwappedFloat;

pub extern "Foundation" fn SwapLittleDoubleToHost(x: SwappedDouble) callconv(.C) f64;

pub extern "Foundation" fn SwapLittleFloatToHost(x: SwappedFloat) callconv(.C) f32;

pub extern "Foundation" fn SwapHostDoubleToLittle(x: f64) callconv(.C) SwappedDouble;

pub extern "Foundation" fn SwapHostFloatToLittle(x: f32) callconv(.C) SwappedFloat;

pub const TimeInterval = f64;

/// https://developer.apple.com/documentation/Foundation/NSDate?language=objc
pub const Date = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDate", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithTimeIntervalSinceReferenceDate(self: *@This(), ti: TimeInterval) *@This() {
        return objc.msgSend(self, "initWithTimeIntervalSinceReferenceDate:", *@This(), .{ti});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn timeIntervalSinceReferenceDate(self: *@This()) TimeInterval {
        return objc.msgSend(self, "timeIntervalSinceReferenceDate", TimeInterval, .{});
    }

};

pub const CalendarIdentifier = ?*String;

pub const CalendarUnit = enum(objc.NSUInteger) {
    Era = 2,
    Year = 4,
    Month = 8,
    Day = 16,
    Hour = 32,
    Minute = 64,
    Second = 128,
    Weekday = 512,
    WeekdayOrdinal = 1024,
    Quarter = 2048,
    WeekOfMonth = 4096,
    WeekOfYear = 8192,
    YearForWeekOfYear = 16384,
    Nanosecond = 32768,
    DayOfYear = 65536,
    Calendar = 1048576,
    TimeZone = 2097152,
    EraCalendarUnit = 2,
    YearCalendarUnit = 4,
    MonthCalendarUnit = 8,
    DayCalendarUnit = 16,
    HourCalendarUnit = 32,
    MinuteCalendarUnit = 64,
    SecondCalendarUnit = 128,
    WeekCalendarUnit = 256,
    WeekdayCalendarUnit = 512,
    WeekdayOrdinalCalendarUnit = 1024,
    QuarterCalendarUnit = 2048,
    WeekOfMonthCalendarUnit = 4096,
    WeekOfYearCalendarUnit = 8192,
    YearForWeekOfYearCalendarUnit = 16384,
    CalendarUnit = 1048576,
    TimeZoneCalendarUnit = 2097152,
};

pub const CalendarOptions = enum(objc.NSUInteger) {
    WrapComponents = 1,
    MatchStrictly = 2,
    SearchBackwards = 4,
    MatchPreviousTimePreservingSmallerUnits = 256,
    MatchNextTimePreservingSmallerUnits = 512,
    MatchNextTime = 1024,
    MatchFirst = 4096,
    MatchLast = 8192,
};

/// https://developer.apple.com/documentation/Foundation/NSCalendar?language=objc
pub const Calendar = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCalendar", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn calendarWithIdentifier(self: *@This(), calendarIdentifierConstant: CalendarIdentifier) ?*Calendar {
        return objc.msgSend(self, "calendarWithIdentifier:", ?*Calendar, .{calendarIdentifierConstant});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithCalendarIdentifier(self: *@This(), ident: CalendarIdentifier) *objc.Id {
        return objc.msgSend(self, "initWithCalendarIdentifier:", *objc.Id, .{ident});
    }

    pub fn minimumRangeOfUnit(self: *@This(), unit: CalendarUnit) Range {
        return objc.msgSend(self, "minimumRangeOfUnit:", Range, .{unit});
    }

    pub fn maximumRangeOfUnit(self: *@This(), unit: CalendarUnit) Range {
        return objc.msgSend(self, "maximumRangeOfUnit:", Range, .{unit});
    }

    pub fn rangeOfUnitInUnitForDate(self: *@This(), smaller: CalendarUnit, larger: CalendarUnit, date: ?*core_foundation.NSDate) Range {
        return objc.msgSend(self, "rangeOfUnit:inUnit:forDate:", Range, .{smaller, larger, date});
    }

    pub fn ordinalityOfUnitInUnitForDate(self: *@This(), smaller: CalendarUnit, larger: CalendarUnit, date: ?*core_foundation.NSDate) objc.NSUInteger {
        return objc.msgSend(self, "ordinalityOfUnit:inUnit:forDate:", objc.NSUInteger, .{smaller, larger, date});
    }

    pub fn rangeOfUnitStartDateIntervalForDate(self: *@This(), unit: CalendarUnit, datep: ?*?*core_foundation.NSDate, tip: ?*TimeInterval, date: ?*core_foundation.NSDate, ) objc.BOOL {
        return objc.msgSend(self, "rangeOfUnit:startDate:interval:forDate:", objc.BOOL, .{unit, datep, tip, date, });
    }

    pub fn dateFromComponents(self: *@This(), comps: ?*DateComponents) ?*core_foundation.NSDate {
        return objc.msgSend(self, "dateFromComponents:", ?*core_foundation.NSDate, .{comps});
    }

    pub fn componentsFromDate(self: *@This(), unitFlags: CalendarUnit, date: ?*Date) ?*DateComponents {
        return objc.msgSend(self, "components:fromDate:", ?*DateComponents, .{unitFlags, date});
    }

    pub fn dateByAddingComponentsToDateOptions(self: *@This(), comps: ?*DateComponents, date: ?*Date, opts: CalendarOptions) ?*Date {
        return objc.msgSend(self, "dateByAddingComponents:toDate:options:", ?*Date, .{comps, date, opts});
    }

    pub fn componentsFromDateToDateOptions(self: *@This(), unitFlags: CalendarUnit, startingDate: ?*Date, resultDate: ?*Date, opts: CalendarOptions, ) ?*DateComponents {
        return objc.msgSend(self, "components:fromDate:toDate:options:", ?*DateComponents, .{unitFlags, startingDate, resultDate, opts, });
    }

    pub fn getEraYearMonthDayFromDate(self: *@This(), eraValuePointer: ?*objc.NSInteger, yearValuePointer: ?*objc.NSInteger, monthValuePointer: ?*objc.NSInteger, dayValuePointer: ?*objc.NSInteger, date: ?*Date, ) void {
        return objc.msgSend(self, "getEra:year:month:day:fromDate:", void, .{eraValuePointer, yearValuePointer, monthValuePointer, dayValuePointer, date, });
    }

    pub fn getEraYearForWeekOfYearWeekOfYearWeekdayFromDate(self: *@This(), eraValuePointer: ?*objc.NSInteger, yearValuePointer: ?*objc.NSInteger, weekValuePointer: ?*objc.NSInteger, weekdayValuePointer: ?*objc.NSInteger, date: ?*Date, ) void {
        return objc.msgSend(self, "getEra:yearForWeekOfYear:weekOfYear:weekday:fromDate:", void, .{eraValuePointer, yearValuePointer, weekValuePointer, weekdayValuePointer, date, });
    }

    pub fn getHourMinuteSecondNanosecondFromDate(self: *@This(), hourValuePointer: ?*objc.NSInteger, minuteValuePointer: ?*objc.NSInteger, secondValuePointer: ?*objc.NSInteger, nanosecondValuePointer: ?*objc.NSInteger, date: ?*Date, ) void {
        return objc.msgSend(self, "getHour:minute:second:nanosecond:fromDate:", void, .{hourValuePointer, minuteValuePointer, secondValuePointer, nanosecondValuePointer, date, });
    }

    pub fn componentFromDate(self: *@This(), unit: CalendarUnit, date: ?*Date) objc.NSInteger {
        return objc.msgSend(self, "component:fromDate:", objc.NSInteger, .{unit, date});
    }

    pub fn dateWithEraYearMonthDayHourMinuteSecondNanosecond(self: *@This(), eraValue: objc.NSInteger, yearValue: objc.NSInteger, monthValue: objc.NSInteger, dayValue: objc.NSInteger, hourValue: objc.NSInteger, minuteValue: objc.NSInteger, secondValue: objc.NSInteger, nanosecondValue: objc.NSInteger, ) ?*Date {
        return objc.msgSend(self, "dateWithEra:year:month:day:hour:minute:second:nanosecond:", ?*Date, .{eraValue, yearValue, monthValue, dayValue, hourValue, minuteValue, secondValue, nanosecondValue, });
    }

    pub fn dateWithEraYearForWeekOfYearWeekOfYearWeekdayHourMinuteSecondNanosecond(self: *@This(), eraValue: objc.NSInteger, yearValue: objc.NSInteger, weekValue: objc.NSInteger, weekdayValue: objc.NSInteger, hourValue: objc.NSInteger, minuteValue: objc.NSInteger, secondValue: objc.NSInteger, nanosecondValue: objc.NSInteger, ) ?*Date {
        return objc.msgSend(self, "dateWithEra:yearForWeekOfYear:weekOfYear:weekday:hour:minute:second:nanosecond:", ?*Date, .{eraValue, yearValue, weekValue, weekdayValue, hourValue, minuteValue, secondValue, nanosecondValue, });
    }

    pub fn startOfDayForDate(self: *@This(), date: ?*Date) ?*Date {
        return objc.msgSend(self, "startOfDayForDate:", ?*Date, .{date});
    }

    pub fn componentsInTimeZoneFromDate(self: *@This(), timezone: ?*TimeZone, date: ?*Date) ?*DateComponents {
        return objc.msgSend(self, "componentsInTimeZone:fromDate:", ?*DateComponents, .{timezone, date});
    }

    pub fn compareDateToDateToUnitGranularity(self: *@This(), date1: ?*Date, date2: ?*Date, unit: CalendarUnit) ComparisonResult {
        return objc.msgSend(self, "compareDate:toDate:toUnitGranularity:", ComparisonResult, .{date1, date2, unit});
    }

    pub fn isDateEqualToDateToUnitGranularity(self: *@This(), date1: ?*Date, date2: ?*Date, unit: CalendarUnit) objc.BOOL {
        return objc.msgSend(self, "isDate:equalToDate:toUnitGranularity:", objc.BOOL, .{date1, date2, unit});
    }

    pub fn isDateInSameDayAsDate(self: *@This(), date1: ?*Date, date2: ?*Date) objc.BOOL {
        return objc.msgSend(self, "isDate:inSameDayAsDate:", objc.BOOL, .{date1, date2});
    }

    pub fn isDateInToday(self: *@This(), date: ?*Date) objc.BOOL {
        return objc.msgSend(self, "isDateInToday:", objc.BOOL, .{date});
    }

    pub fn isDateInYesterday(self: *@This(), date: ?*Date) objc.BOOL {
        return objc.msgSend(self, "isDateInYesterday:", objc.BOOL, .{date});
    }

    pub fn isDateInTomorrow(self: *@This(), date: ?*Date) objc.BOOL {
        return objc.msgSend(self, "isDateInTomorrow:", objc.BOOL, .{date});
    }

    pub fn isDateInWeekend(self: *@This(), date: ?*Date) objc.BOOL {
        return objc.msgSend(self, "isDateInWeekend:", objc.BOOL, .{date});
    }

    pub fn rangeOfWeekendStartDateIntervalContainingDate(self: *@This(), datep: ?*?*Date, tip: ?*TimeInterval, date: ?*Date) objc.BOOL {
        return objc.msgSend(self, "rangeOfWeekendStartDate:interval:containingDate:", objc.BOOL, .{datep, tip, date});
    }

    pub fn nextWeekendStartDateIntervalOptionsAfterDate(self: *@This(), datep: ?*?*Date, tip: ?*TimeInterval, options: CalendarOptions, date: ?*Date, ) objc.BOOL {
        return objc.msgSend(self, "nextWeekendStartDate:interval:options:afterDate:", objc.BOOL, .{datep, tip, options, date, });
    }

    pub fn componentsFromDateComponentsToDateComponentsOptions(self: *@This(), unitFlags: CalendarUnit, startingDateComp: ?*DateComponents, resultDateComp: ?*DateComponents, options: CalendarOptions, ) ?*DateComponents {
        return objc.msgSend(self, "components:fromDateComponents:toDateComponents:options:", ?*DateComponents, .{unitFlags, startingDateComp, resultDateComp, options, });
    }

    pub fn dateByAddingUnitValueToDateOptions(self: *@This(), unit: CalendarUnit, value: objc.NSInteger, date: ?*Date, options: CalendarOptions, ) ?*Date {
        return objc.msgSend(self, "dateByAddingUnit:value:toDate:options:", ?*Date, .{unit, value, date, options, });
    }

    pub fn enumerateDatesStartingAfterDateMatchingComponentsOptionsUsingBlock(self: *@This(), start: ?*Date, comps: ?*DateComponents, opts: CalendarOptions, block: *const fn(?*Date, objc.BOOL, ?*objc.BOOL) callconv(.C) void, ) void {
        return objc.msgSend(self, "enumerateDatesStartingAfterDate:matchingComponents:options:usingBlock:", void, .{start, comps, opts, block, });
    }

    pub fn nextDateAfterDateMatchingComponentsOptions(self: *@This(), date: ?*Date, comps: ?*DateComponents, options: CalendarOptions) ?*Date {
        return objc.msgSend(self, "nextDateAfterDate:matchingComponents:options:", ?*Date, .{date, comps, options});
    }

    pub fn nextDateAfterDateMatchingUnitValueOptions(self: *@This(), date: ?*Date, unit: CalendarUnit, value: objc.NSInteger, options: CalendarOptions, ) ?*Date {
        return objc.msgSend(self, "nextDateAfterDate:matchingUnit:value:options:", ?*Date, .{date, unit, value, options, });
    }

    pub fn nextDateAfterDateMatchingHourMinuteSecondOptions(self: *@This(), date: ?*Date, hourValue: objc.NSInteger, minuteValue: objc.NSInteger, secondValue: objc.NSInteger, options: CalendarOptions, ) ?*Date {
        return objc.msgSend(self, "nextDateAfterDate:matchingHour:minute:second:options:", ?*Date, .{date, hourValue, minuteValue, secondValue, options, });
    }

    pub fn dateBySettingUnitValueOfDateOptions(self: *@This(), unit: CalendarUnit, v: objc.NSInteger, date: ?*Date, opts: CalendarOptions, ) ?*Date {
        return objc.msgSend(self, "dateBySettingUnit:value:ofDate:options:", ?*Date, .{unit, v, date, opts, });
    }

    pub fn dateBySettingHourMinuteSecondOfDateOptions(self: *@This(), h: objc.NSInteger, m: objc.NSInteger, s: objc.NSInteger, date: ?*Date, opts: CalendarOptions, ) ?*Date {
        return objc.msgSend(self, "dateBySettingHour:minute:second:ofDate:options:", ?*Date, .{h, m, s, date, opts, });
    }

    pub fn dateMatchesComponents(self: *@This(), date: ?*Date, components: ?*DateComponents) objc.BOOL {
        return objc.msgSend(self, "date:matchesComponents:", objc.BOOL, .{date, components});
    }

    pub fn currentCalendar(self: *@This()) ?*Calendar {
        return objc.msgSend(self, "currentCalendar", ?*Calendar, .{});
    }

    pub fn autoupdatingCurrentCalendar(self: *@This()) ?*Calendar {
        return objc.msgSend(self, "autoupdatingCurrentCalendar", ?*Calendar, .{});
    }

    pub fn calendarIdentifier(self: *@This()) CalendarIdentifier {
        return objc.msgSend(self, "calendarIdentifier", CalendarIdentifier, .{});
    }

    pub fn locale(self: *@This()) ?*Locale {
        return objc.msgSend(self, "locale", ?*Locale, .{});
    }

    pub fn setLocale(self: *@This(), locale: ?*Locale) void {
        return objc.msgSend(self, "setLocale:", void, .{locale});
    }

    pub fn timeZone(self: *@This()) ?*TimeZone {
        return objc.msgSend(self, "timeZone", ?*TimeZone, .{});
    }

    pub fn setTimeZone(self: *@This(), timeZone: ?*TimeZone) void {
        return objc.msgSend(self, "setTimeZone:", void, .{timeZone});
    }

    pub fn firstWeekday(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "firstWeekday", objc.NSUInteger, .{});
    }

    pub fn setFirstWeekday(self: *@This(), firstWeekday: objc.NSUInteger) void {
        return objc.msgSend(self, "setFirstWeekday:", void, .{firstWeekday});
    }

    pub fn minimumDaysInFirstWeek(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "minimumDaysInFirstWeek", objc.NSUInteger, .{});
    }

    pub fn setMinimumDaysInFirstWeek(self: *@This(), minimumDaysInFirstWeek: objc.NSUInteger) void {
        return objc.msgSend(self, "setMinimumDaysInFirstWeek:", void, .{minimumDaysInFirstWeek});
    }

    pub fn eraSymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "eraSymbols", ?*anyopaque, .{});
    }

    pub fn longEraSymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "longEraSymbols", ?*anyopaque, .{});
    }

    pub fn monthSymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "monthSymbols", ?*anyopaque, .{});
    }

    pub fn shortMonthSymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "shortMonthSymbols", ?*anyopaque, .{});
    }

    pub fn veryShortMonthSymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "veryShortMonthSymbols", ?*anyopaque, .{});
    }

    pub fn standaloneMonthSymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "standaloneMonthSymbols", ?*anyopaque, .{});
    }

    pub fn shortStandaloneMonthSymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "shortStandaloneMonthSymbols", ?*anyopaque, .{});
    }

    pub fn veryShortStandaloneMonthSymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "veryShortStandaloneMonthSymbols", ?*anyopaque, .{});
    }

    pub fn weekdaySymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "weekdaySymbols", ?*anyopaque, .{});
    }

    pub fn shortWeekdaySymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "shortWeekdaySymbols", ?*anyopaque, .{});
    }

    pub fn veryShortWeekdaySymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "veryShortWeekdaySymbols", ?*anyopaque, .{});
    }

    pub fn standaloneWeekdaySymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "standaloneWeekdaySymbols", ?*anyopaque, .{});
    }

    pub fn shortStandaloneWeekdaySymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "shortStandaloneWeekdaySymbols", ?*anyopaque, .{});
    }

    pub fn veryShortStandaloneWeekdaySymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "veryShortStandaloneWeekdaySymbols", ?*anyopaque, .{});
    }

    pub fn quarterSymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "quarterSymbols", ?*anyopaque, .{});
    }

    pub fn shortQuarterSymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "shortQuarterSymbols", ?*anyopaque, .{});
    }

    pub fn standaloneQuarterSymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "standaloneQuarterSymbols", ?*anyopaque, .{});
    }

    pub fn shortStandaloneQuarterSymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "shortStandaloneQuarterSymbols", ?*anyopaque, .{});
    }

    pub fn AMSymbol(self: *@This()) ?*String {
        return objc.msgSend(self, "AMSymbol", ?*String, .{});
    }

    pub fn PMSymbol(self: *@This()) ?*String {
        return objc.msgSend(self, "PMSymbol", ?*String, .{});
    }

};

pub const anon4111 = enum(objc.NSInteger) {
    NSDateComponentUndefined = 9223372036854775807,
    NSUndefinedDateComponent = 9223372036854775807,
};

/// https://developer.apple.com/documentation/Foundation/NSDateComponents?language=objc
pub const DateComponents = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDateComponents", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn week(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "week", objc.NSInteger, .{});
    }

    pub fn setWeek(self: *@This(), v: objc.NSInteger) void {
        return objc.msgSend(self, "setWeek:", void, .{v});
    }

    pub fn setValueForComponent(self: *@This(), value: objc.NSInteger, unit: CalendarUnit) void {
        return objc.msgSend(self, "setValue:forComponent:", void, .{value, unit});
    }

    pub fn valueForComponent(self: *@This(), unit: CalendarUnit) objc.NSInteger {
        return objc.msgSend(self, "valueForComponent:", objc.NSInteger, .{unit});
    }

    pub fn isValidDateInCalendar(self: *@This(), calendar: ?*Calendar) objc.BOOL {
        return objc.msgSend(self, "isValidDateInCalendar:", objc.BOOL, .{calendar});
    }

    pub fn calendar(self: *@This()) ?*Calendar {
        return objc.msgSend(self, "calendar", ?*Calendar, .{});
    }

    pub fn setCalendar(self: *@This(), calendar: ?*Calendar) void {
        return objc.msgSend(self, "setCalendar:", void, .{calendar});
    }

    pub fn timeZone(self: *@This()) ?*TimeZone {
        return objc.msgSend(self, "timeZone", ?*TimeZone, .{});
    }

    pub fn setTimeZone(self: *@This(), timeZone: ?*TimeZone) void {
        return objc.msgSend(self, "setTimeZone:", void, .{timeZone});
    }

    pub fn era(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "era", objc.NSInteger, .{});
    }

    pub fn setEra(self: *@This(), era: objc.NSInteger) void {
        return objc.msgSend(self, "setEra:", void, .{era});
    }

    pub fn year(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "year", objc.NSInteger, .{});
    }

    pub fn setYear(self: *@This(), year: objc.NSInteger) void {
        return objc.msgSend(self, "setYear:", void, .{year});
    }

    pub fn month(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "month", objc.NSInteger, .{});
    }

    pub fn setMonth(self: *@This(), month: objc.NSInteger) void {
        return objc.msgSend(self, "setMonth:", void, .{month});
    }

    pub fn day(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "day", objc.NSInteger, .{});
    }

    pub fn setDay(self: *@This(), day: objc.NSInteger) void {
        return objc.msgSend(self, "setDay:", void, .{day});
    }

    pub fn hour(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "hour", objc.NSInteger, .{});
    }

    pub fn setHour(self: *@This(), hour: objc.NSInteger) void {
        return objc.msgSend(self, "setHour:", void, .{hour});
    }

    pub fn minute(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "minute", objc.NSInteger, .{});
    }

    pub fn setMinute(self: *@This(), minute: objc.NSInteger) void {
        return objc.msgSend(self, "setMinute:", void, .{minute});
    }

    pub fn second(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "second", objc.NSInteger, .{});
    }

    pub fn setSecond(self: *@This(), second: objc.NSInteger) void {
        return objc.msgSend(self, "setSecond:", void, .{second});
    }

    pub fn nanosecond(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "nanosecond", objc.NSInteger, .{});
    }

    pub fn setNanosecond(self: *@This(), nanosecond: objc.NSInteger) void {
        return objc.msgSend(self, "setNanosecond:", void, .{nanosecond});
    }

    pub fn weekday(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "weekday", objc.NSInteger, .{});
    }

    pub fn setWeekday(self: *@This(), weekday: objc.NSInteger) void {
        return objc.msgSend(self, "setWeekday:", void, .{weekday});
    }

    pub fn weekdayOrdinal(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "weekdayOrdinal", objc.NSInteger, .{});
    }

    pub fn setWeekdayOrdinal(self: *@This(), weekdayOrdinal: objc.NSInteger) void {
        return objc.msgSend(self, "setWeekdayOrdinal:", void, .{weekdayOrdinal});
    }

    pub fn quarter(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "quarter", objc.NSInteger, .{});
    }

    pub fn setQuarter(self: *@This(), quarter: objc.NSInteger) void {
        return objc.msgSend(self, "setQuarter:", void, .{quarter});
    }

    pub fn weekOfMonth(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "weekOfMonth", objc.NSInteger, .{});
    }

    pub fn setWeekOfMonth(self: *@This(), weekOfMonth: objc.NSInteger) void {
        return objc.msgSend(self, "setWeekOfMonth:", void, .{weekOfMonth});
    }

    pub fn weekOfYear(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "weekOfYear", objc.NSInteger, .{});
    }

    pub fn setWeekOfYear(self: *@This(), weekOfYear: objc.NSInteger) void {
        return objc.msgSend(self, "setWeekOfYear:", void, .{weekOfYear});
    }

    pub fn yearForWeekOfYear(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "yearForWeekOfYear", objc.NSInteger, .{});
    }

    pub fn setYearForWeekOfYear(self: *@This(), yearForWeekOfYear: objc.NSInteger) void {
        return objc.msgSend(self, "setYearForWeekOfYear:", void, .{yearForWeekOfYear});
    }

    pub fn dayOfYear(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "dayOfYear", objc.NSInteger, .{});
    }

    pub fn setDayOfYear(self: *@This(), dayOfYear: objc.NSInteger) void {
        return objc.msgSend(self, "setDayOfYear:", void, .{dayOfYear});
    }

    pub fn isLeapMonth(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isLeapMonth", objc.BOOL, .{});
    }

    pub fn setLeapMonth(self: *@This(), leapMonth: objc.BOOL) void {
        return objc.msgSend(self, "setLeapMonth:", void, .{leapMonth});
    }

    pub fn date(self: *@This()) ?*Date {
        return objc.msgSend(self, "date", ?*Date, .{});
    }

    pub fn isValidDate(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isValidDate", objc.BOOL, .{});
    }

};

pub const anon141 = enum(u32) {
    NSOpenStepUnicodeReservedBase = 62464,
};

/// https://developer.apple.com/documentation/Foundation/NSCharacterSet?language=objc
pub const CharacterSet = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCharacterSet", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn characterSetWithRange(self: *@This(), aRange: Range) ?*CharacterSet {
        return objc.msgSend(self, "characterSetWithRange:", ?*CharacterSet, .{aRange});
    }

    pub fn characterSetWithCharactersInString(self: *@This(), aString: ?*String) ?*CharacterSet {
        return objc.msgSend(self, "characterSetWithCharactersInString:", ?*CharacterSet, .{aString});
    }

    pub fn characterSetWithBitmapRepresentation(self: *@This(), data: ?*Data) ?*CharacterSet {
        return objc.msgSend(self, "characterSetWithBitmapRepresentation:", ?*CharacterSet, .{data});
    }

    pub fn characterSetWithContentsOfFile(self: *@This(), fName: ?*String) ?*CharacterSet {
        return objc.msgSend(self, "characterSetWithContentsOfFile:", ?*CharacterSet, .{fName});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn characterIsMember(self: *@This(), aCharacter: unichar) objc.BOOL {
        return objc.msgSend(self, "characterIsMember:", objc.BOOL, .{aCharacter});
    }

    pub fn longCharacterIsMember(self: *@This(), theLongChar: objc.UTF32Char) objc.BOOL {
        return objc.msgSend(self, "longCharacterIsMember:", objc.BOOL, .{theLongChar});
    }

    pub fn isSupersetOfSet(self: *@This(), theOtherSet: ?*CharacterSet) objc.BOOL {
        return objc.msgSend(self, "isSupersetOfSet:", objc.BOOL, .{theOtherSet});
    }

    pub fn hasMemberInPlane(self: *@This(), thePlane: objc.uint8_t) objc.BOOL {
        return objc.msgSend(self, "hasMemberInPlane:", objc.BOOL, .{thePlane});
    }

    pub fn controlCharacterSet(self: *@This()) ?*CharacterSet {
        return objc.msgSend(self, "controlCharacterSet", ?*CharacterSet, .{});
    }

    pub fn whitespaceCharacterSet(self: *@This()) ?*CharacterSet {
        return objc.msgSend(self, "whitespaceCharacterSet", ?*CharacterSet, .{});
    }

    pub fn whitespaceAndNewlineCharacterSet(self: *@This()) ?*CharacterSet {
        return objc.msgSend(self, "whitespaceAndNewlineCharacterSet", ?*CharacterSet, .{});
    }

    pub fn decimalDigitCharacterSet(self: *@This()) ?*CharacterSet {
        return objc.msgSend(self, "decimalDigitCharacterSet", ?*CharacterSet, .{});
    }

    pub fn letterCharacterSet(self: *@This()) ?*CharacterSet {
        return objc.msgSend(self, "letterCharacterSet", ?*CharacterSet, .{});
    }

    pub fn lowercaseLetterCharacterSet(self: *@This()) ?*CharacterSet {
        return objc.msgSend(self, "lowercaseLetterCharacterSet", ?*CharacterSet, .{});
    }

    pub fn uppercaseLetterCharacterSet(self: *@This()) ?*CharacterSet {
        return objc.msgSend(self, "uppercaseLetterCharacterSet", ?*CharacterSet, .{});
    }

    pub fn nonBaseCharacterSet(self: *@This()) ?*CharacterSet {
        return objc.msgSend(self, "nonBaseCharacterSet", ?*CharacterSet, .{});
    }

    pub fn alphanumericCharacterSet(self: *@This()) ?*CharacterSet {
        return objc.msgSend(self, "alphanumericCharacterSet", ?*CharacterSet, .{});
    }

    pub fn decomposableCharacterSet(self: *@This()) ?*CharacterSet {
        return objc.msgSend(self, "decomposableCharacterSet", ?*CharacterSet, .{});
    }

    pub fn illegalCharacterSet(self: *@This()) ?*CharacterSet {
        return objc.msgSend(self, "illegalCharacterSet", ?*CharacterSet, .{});
    }

    pub fn punctuationCharacterSet(self: *@This()) ?*CharacterSet {
        return objc.msgSend(self, "punctuationCharacterSet", ?*CharacterSet, .{});
    }

    pub fn capitalizedLetterCharacterSet(self: *@This()) ?*CharacterSet {
        return objc.msgSend(self, "capitalizedLetterCharacterSet", ?*CharacterSet, .{});
    }

    pub fn symbolCharacterSet(self: *@This()) ?*CharacterSet {
        return objc.msgSend(self, "symbolCharacterSet", ?*CharacterSet, .{});
    }

    pub fn newlineCharacterSet(self: *@This()) ?*CharacterSet {
        return objc.msgSend(self, "newlineCharacterSet", ?*CharacterSet, .{});
    }

    pub fn bitmapRepresentation(self: *@This()) ?*Data {
        return objc.msgSend(self, "bitmapRepresentation", ?*Data, .{});
    }

    pub fn invertedSet(self: *@This()) ?*CharacterSet {
        return objc.msgSend(self, "invertedSet", ?*CharacterSet, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSMutableCharacterSet?language=objc
pub const MutableCharacterSet = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMutableCharacterSet", @This(), CharacterSet, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn addCharactersInRange(self: *@This(), aRange: Range) void {
        return objc.msgSend(self, "addCharactersInRange:", void, .{aRange});
    }

    pub fn removeCharactersInRange(self: *@This(), aRange: Range) void {
        return objc.msgSend(self, "removeCharactersInRange:", void, .{aRange});
    }

    pub fn addCharactersInString(self: *@This(), aString: ?*String) void {
        return objc.msgSend(self, "addCharactersInString:", void, .{aString});
    }

    pub fn removeCharactersInString(self: *@This(), aString: ?*String) void {
        return objc.msgSend(self, "removeCharactersInString:", void, .{aString});
    }

    pub fn formUnionWithCharacterSet(self: *@This(), otherSet: ?*CharacterSet) void {
        return objc.msgSend(self, "formUnionWithCharacterSet:", void, .{otherSet});
    }

    pub fn formIntersectionWithCharacterSet(self: *@This(), otherSet: ?*CharacterSet) void {
        return objc.msgSend(self, "formIntersectionWithCharacterSet:", void, .{otherSet});
    }

    pub fn invert(self: *@This()) void {
        return objc.msgSend(self, "invert", void, .{});
    }

    pub fn controlCharacterSet(self: *@This()) ?*MutableCharacterSet {
        return objc.msgSend(self, "controlCharacterSet", ?*MutableCharacterSet, .{});
    }

    pub fn whitespaceCharacterSet(self: *@This()) ?*MutableCharacterSet {
        return objc.msgSend(self, "whitespaceCharacterSet", ?*MutableCharacterSet, .{});
    }

    pub fn whitespaceAndNewlineCharacterSet(self: *@This()) ?*MutableCharacterSet {
        return objc.msgSend(self, "whitespaceAndNewlineCharacterSet", ?*MutableCharacterSet, .{});
    }

    pub fn decimalDigitCharacterSet(self: *@This()) ?*MutableCharacterSet {
        return objc.msgSend(self, "decimalDigitCharacterSet", ?*MutableCharacterSet, .{});
    }

    pub fn letterCharacterSet(self: *@This()) ?*MutableCharacterSet {
        return objc.msgSend(self, "letterCharacterSet", ?*MutableCharacterSet, .{});
    }

    pub fn lowercaseLetterCharacterSet(self: *@This()) ?*MutableCharacterSet {
        return objc.msgSend(self, "lowercaseLetterCharacterSet", ?*MutableCharacterSet, .{});
    }

    pub fn uppercaseLetterCharacterSet(self: *@This()) ?*MutableCharacterSet {
        return objc.msgSend(self, "uppercaseLetterCharacterSet", ?*MutableCharacterSet, .{});
    }

    pub fn nonBaseCharacterSet(self: *@This()) ?*MutableCharacterSet {
        return objc.msgSend(self, "nonBaseCharacterSet", ?*MutableCharacterSet, .{});
    }

    pub fn alphanumericCharacterSet(self: *@This()) ?*MutableCharacterSet {
        return objc.msgSend(self, "alphanumericCharacterSet", ?*MutableCharacterSet, .{});
    }

    pub fn decomposableCharacterSet(self: *@This()) ?*MutableCharacterSet {
        return objc.msgSend(self, "decomposableCharacterSet", ?*MutableCharacterSet, .{});
    }

    pub fn illegalCharacterSet(self: *@This()) ?*MutableCharacterSet {
        return objc.msgSend(self, "illegalCharacterSet", ?*MutableCharacterSet, .{});
    }

    pub fn punctuationCharacterSet(self: *@This()) ?*MutableCharacterSet {
        return objc.msgSend(self, "punctuationCharacterSet", ?*MutableCharacterSet, .{});
    }

    pub fn capitalizedLetterCharacterSet(self: *@This()) ?*MutableCharacterSet {
        return objc.msgSend(self, "capitalizedLetterCharacterSet", ?*MutableCharacterSet, .{});
    }

    pub fn symbolCharacterSet(self: *@This()) ?*MutableCharacterSet {
        return objc.msgSend(self, "symbolCharacterSet", ?*MutableCharacterSet, .{});
    }

    pub fn newlineCharacterSet(self: *@This()) ?*MutableCharacterSet {
        return objc.msgSend(self, "newlineCharacterSet", ?*MutableCharacterSet, .{});
    }

    pub fn characterSetWithRange(self: *@This(), aRange: Range) ?*MutableCharacterSet {
        return objc.msgSend(self, "characterSetWithRange:", ?*MutableCharacterSet, .{aRange});
    }

    pub fn characterSetWithCharactersInString(self: *@This(), aString: ?*String) ?*MutableCharacterSet {
        return objc.msgSend(self, "characterSetWithCharactersInString:", ?*MutableCharacterSet, .{aString});
    }

    pub fn characterSetWithBitmapRepresentation(self: *@This(), data: ?*Data) ?*MutableCharacterSet {
        return objc.msgSend(self, "characterSetWithBitmapRepresentation:", ?*MutableCharacterSet, .{data});
    }

    pub fn characterSetWithContentsOfFile(self: *@This(), fName: ?*String) ?*MutableCharacterSet {
        return objc.msgSend(self, "characterSetWithContentsOfFile:", ?*MutableCharacterSet, .{fName});
    }

};

pub const DecodingFailurePolicy = enum(objc.NSInteger) {
    RaiseException = 0,
    SetErrorAndReturn = 1,
};

/// https://developer.apple.com/documentation/Foundation/NSCoder?language=objc
pub const Coder = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCoder", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn encodeValueOfObjCTypeAt(self: *@This(), @"type": ?*i8, addr: ?*anyopaque) void {
        return objc.msgSend(self, "encodeValueOfObjCType:at:", void, .{@"type", addr});
    }

    pub fn encodeDataObject(self: *@This(), data: ?*Data) void {
        return objc.msgSend(self, "encodeDataObject:", void, .{data});
    }

    pub fn decodeDataObject(self: *@This()) ?*Data {
        return objc.msgSend(self, "decodeDataObject", ?*Data, .{});
    }

    pub fn decodeValueOfObjCTypeAtSize(self: *@This(), @"type": ?*i8, data: ?*anyopaque, size: objc.NSUInteger) void {
        return objc.msgSend(self, "decodeValueOfObjCType:at:size:", void, .{@"type", data, size});
    }

    pub fn versionForClassName(self: *@This(), className: ?*String) objc.NSInteger {
        return objc.msgSend(self, "versionForClassName:", objc.NSInteger, .{className});
    }

};

pub extern "Foundation" fn NXReadNSObjectFromCoder(decoder: ?*Coder) callconv(.C) ?*objc.NSObject;

pub const DataReadingOptions = enum(objc.NSUInteger) {
    MappedIfSafe = 1,
    Uncached = 2,
    MappedAlways = 8,
    Mapped = 1,
    MappedRead = 1,
    UncachedRead = 2,
};

pub const DataWritingOptions = enum(objc.NSUInteger) {
    Atomic = 1,
    WithoutOverwriting = 2,
    FileProtectionNone = 268435456,
    FileProtectionComplete = 536870912,
    FileProtectionCompleteUnlessOpen = 805306368,
    FileProtectionCompleteUntilFirstUserAuthentication = 1073741824,
    FileProtectionCompleteWhenUserInactive = 1342177280,
    FileProtectionMask = 4026531840,
    AtomicWrite = 1,
};

pub const DataSearchOptions = enum(objc.NSUInteger) {
    Backwards = 1,
    Anchored = 2,
};

pub const DataBase64EncodingOptions = enum(objc.NSUInteger) {
    Encoding64CharacterLineLength = 1,
    Encoding76CharacterLineLength = 2,
    EndLineWithCarriageReturn = 16,
    EndLineWithLineFeed = 32,
};

pub const DataBase64DecodingOptions = enum(objc.NSUInteger) {
    IgnoreUnknownCharacters = 1,
};

/// https://developer.apple.com/documentation/Foundation/NSData?language=objc
pub const Data = opaque {
    pub const InternalInfo = objc.ExternalClass("NSData", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn length(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "length", objc.NSUInteger, .{});
    }

    pub fn bytes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "bytes", ?*anyopaque, .{});
    }

};

pub const DataCompressionAlgorithm = enum(objc.NSInteger) {
    LZFSE = 0,
    LZ4 = 1,
    LZMA = 2,
    Zlib = 3,
};

/// https://developer.apple.com/documentation/Foundation/NSMutableData?language=objc
pub const MutableData = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMutableData", @This(), Data, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn mutableBytes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "mutableBytes", ?*anyopaque, .{});
    }

    pub fn length(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "length", objc.NSUInteger, .{});
    }

    pub fn setLength(self: *@This(), length: objc.NSUInteger) void {
        return objc.msgSend(self, "setLength:", void, .{length});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSPurgeableData?language=objc
pub const PurgeableData = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPurgeableData", @This(), MutableData, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;
};

/// https://developer.apple.com/documentation/Foundation/NSDateInterval?language=objc
pub const DateInterval = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDateInterval", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn initWithStartDateDuration(self: *@This(), startDate: ?*Date, duration: TimeInterval) *@This() {
        return objc.msgSend(self, "initWithStartDate:duration:", *@This(), .{startDate, duration});
    }

    pub fn initWithStartDateEndDate(self: *@This(), startDate: ?*Date, endDate: ?*Date) *@This() {
        return objc.msgSend(self, "initWithStartDate:endDate:", *@This(), .{startDate, endDate});
    }

    pub fn compare(self: *@This(), dateInterval: ?*DateInterval) ComparisonResult {
        return objc.msgSend(self, "compare:", ComparisonResult, .{dateInterval});
    }

    pub fn isEqualToDateInterval(self: *@This(), dateInterval: ?*DateInterval) objc.BOOL {
        return objc.msgSend(self, "isEqualToDateInterval:", objc.BOOL, .{dateInterval});
    }

    pub fn intersectsDateInterval(self: *@This(), dateInterval: ?*DateInterval) objc.BOOL {
        return objc.msgSend(self, "intersectsDateInterval:", objc.BOOL, .{dateInterval});
    }

    pub fn intersectionWithDateInterval(self: *@This(), dateInterval: ?*DateInterval) ?*DateInterval {
        return objc.msgSend(self, "intersectionWithDateInterval:", ?*DateInterval, .{dateInterval});
    }

    pub fn containsDate(self: *@This(), date: ?*Date) objc.BOOL {
        return objc.msgSend(self, "containsDate:", objc.BOOL, .{date});
    }

    pub fn startDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "startDate", ?*Date, .{});
    }

    pub fn endDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "endDate", ?*Date, .{});
    }

    pub fn duration(self: *@This()) TimeInterval {
        return objc.msgSend(self, "duration", TimeInterval, .{});
    }

};

pub const AttributedStringKey = ?*String;

pub const AttributedStringFormattingContextKey = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSAttributedString?language=objc
pub const AttributedString = opaque {
    pub const InternalInfo = objc.ExternalClass("NSAttributedString", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn attributesAtIndexEffectiveRange(self: *@This(), location: objc.NSUInteger, range: RangePointer) ?*anyopaque {
        return objc.msgSend(self, "attributesAtIndex:effectiveRange:", ?*anyopaque, .{location, range});
    }

    pub fn string(self: *@This()) ?*String {
        return objc.msgSend(self, "string", ?*String, .{});
    }

};

pub const AttributedStringEnumerationOptions = enum(objc.NSUInteger) {
    Reverse = 2,
    LongestEffectiveRangeNotRequired = 1048576,
};

/// https://developer.apple.com/documentation/Foundation/NSMutableAttributedString?language=objc
pub const MutableAttributedString = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMutableAttributedString", @This(), AttributedString, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn replaceCharactersInRangeWithString(self: *@This(), range: Range, str: ?*String) void {
        return objc.msgSend(self, "replaceCharactersInRange:withString:", void, .{range, str});
    }

    pub fn setAttributesRange(self: *@This(), attrs: ?*anyopaque, range: Range) void {
        return objc.msgSend(self, "setAttributes:range:", void, .{attrs, range});
    }

};

pub const InlinePresentationIntent = enum(objc.NSUInteger) {
    Emphasized = 1,
    StronglyEmphasized = 2,
    Code = 4,
    Strikethrough = 32,
    SoftBreak = 64,
    LineBreak = 128,
    InlineHTML = 256,
    BlockHTML = 512,
};

pub const AttributedStringMarkdownParsingFailurePolicy = enum(objc.NSInteger) {
    ReturnError = 0,
    ReturnPartiallyParsedIfPossible = 1,
};

pub const AttributedStringMarkdownInterpretedSyntax = enum(objc.NSInteger) {
    Full = 0,
    InlineOnly = 1,
    InlineOnlyPreservingWhitespace = 2,
};

/// https://developer.apple.com/documentation/Foundation/NSAttributedStringMarkdownSourcePosition?language=objc
pub const AttributedStringMarkdownSourcePosition = opaque {
    pub const InternalInfo = objc.ExternalClass("NSAttributedStringMarkdownSourcePosition", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithStartLineStartColumnEndLineEndColumn(self: *@This(), startLine: objc.NSInteger, startColumn: objc.NSInteger, endLine: objc.NSInteger, endColumn: objc.NSInteger, ) *@This() {
        return objc.msgSend(self, "initWithStartLine:startColumn:endLine:endColumn:", *@This(), .{startLine, startColumn, endLine, endColumn, });
    }

    pub fn rangeInString(self: *@This(), string: ?*String) Range {
        return objc.msgSend(self, "rangeInString:", Range, .{string});
    }

    pub fn startLine(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "startLine", objc.NSInteger, .{});
    }

    pub fn startColumn(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "startColumn", objc.NSInteger, .{});
    }

    pub fn endLine(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "endLine", objc.NSInteger, .{});
    }

    pub fn endColumn(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "endColumn", objc.NSInteger, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSAttributedStringMarkdownParsingOptions?language=objc
pub const AttributedStringMarkdownParsingOptions = opaque {
    pub const InternalInfo = objc.ExternalClass("NSAttributedStringMarkdownParsingOptions", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn allowsExtendedAttributes(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsExtendedAttributes", objc.BOOL, .{});
    }

    pub fn setAllowsExtendedAttributes(self: *@This(), allowsExtendedAttributes: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsExtendedAttributes:", void, .{allowsExtendedAttributes});
    }

    pub fn interpretedSyntax(self: *@This()) AttributedStringMarkdownInterpretedSyntax {
        return objc.msgSend(self, "interpretedSyntax", AttributedStringMarkdownInterpretedSyntax, .{});
    }

    pub fn setInterpretedSyntax(self: *@This(), interpretedSyntax: AttributedStringMarkdownInterpretedSyntax) void {
        return objc.msgSend(self, "setInterpretedSyntax:", void, .{interpretedSyntax});
    }

    pub fn failurePolicy(self: *@This()) AttributedStringMarkdownParsingFailurePolicy {
        return objc.msgSend(self, "failurePolicy", AttributedStringMarkdownParsingFailurePolicy, .{});
    }

    pub fn setFailurePolicy(self: *@This(), failurePolicy: AttributedStringMarkdownParsingFailurePolicy) void {
        return objc.msgSend(self, "setFailurePolicy:", void, .{failurePolicy});
    }

    pub fn languageCode(self: *@This()) ?*String {
        return objc.msgSend(self, "languageCode", ?*String, .{});
    }

    pub fn setLanguageCode(self: *@This(), languageCode: ?*String) void {
        return objc.msgSend(self, "setLanguageCode:", void, .{languageCode});
    }

    pub fn appliesSourcePositionAttributes(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "appliesSourcePositionAttributes", objc.BOOL, .{});
    }

    pub fn setAppliesSourcePositionAttributes(self: *@This(), appliesSourcePositionAttributes: objc.BOOL) void {
        return objc.msgSend(self, "setAppliesSourcePositionAttributes:", void, .{appliesSourcePositionAttributes});
    }

};

pub const AttributedStringFormattingOptions = enum(objc.NSUInteger) {
    InsertArgumentAttributesWithoutMerging = 1,
    ApplyReplacementIndexAttribute = 2,
};

pub const PresentationIntentKind = enum(objc.NSInteger) {
    Paragraph = 0,
    Header = 1,
    OrderedList = 2,
    UnorderedList = 3,
    ListItem = 4,
    CodeBlock = 5,
    BlockQuote = 6,
    ThematicBreak = 7,
    Table = 8,
    TableHeaderRow = 9,
    TableRow = 10,
    TableCell = 11,
};

pub const PresentationIntentTableColumnAlignment = enum(objc.NSInteger) {
    Left = 0,
    Center = 1,
    Right = 2,
};

/// https://developer.apple.com/documentation/Foundation/NSPresentationIntent?language=objc
pub const PresentationIntent = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPresentationIntent", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn paragraphIntentWithIdentityNestedInsideIntent(self: *@This(), identity: objc.NSInteger, parent: ?*PresentationIntent) ?*PresentationIntent {
        return objc.msgSend(self, "paragraphIntentWithIdentity:nestedInsideIntent:", ?*PresentationIntent, .{identity, parent});
    }

    pub fn headerIntentWithIdentityLevelNestedInsideIntent(self: *@This(), identity: objc.NSInteger, level: objc.NSInteger, parent: ?*PresentationIntent) ?*PresentationIntent {
        return objc.msgSend(self, "headerIntentWithIdentity:level:nestedInsideIntent:", ?*PresentationIntent, .{identity, level, parent});
    }

    pub fn codeBlockIntentWithIdentityLanguageHintNestedInsideIntent(self: *@This(), identity: objc.NSInteger, languageHint: ?*String, parent: ?*PresentationIntent) ?*PresentationIntent {
        return objc.msgSend(self, "codeBlockIntentWithIdentity:languageHint:nestedInsideIntent:", ?*PresentationIntent, .{identity, languageHint, parent});
    }

    pub fn thematicBreakIntentWithIdentityNestedInsideIntent(self: *@This(), identity: objc.NSInteger, parent: ?*PresentationIntent) ?*PresentationIntent {
        return objc.msgSend(self, "thematicBreakIntentWithIdentity:nestedInsideIntent:", ?*PresentationIntent, .{identity, parent});
    }

    pub fn orderedListIntentWithIdentityNestedInsideIntent(self: *@This(), identity: objc.NSInteger, parent: ?*PresentationIntent) ?*PresentationIntent {
        return objc.msgSend(self, "orderedListIntentWithIdentity:nestedInsideIntent:", ?*PresentationIntent, .{identity, parent});
    }

    pub fn unorderedListIntentWithIdentityNestedInsideIntent(self: *@This(), identity: objc.NSInteger, parent: ?*PresentationIntent) ?*PresentationIntent {
        return objc.msgSend(self, "unorderedListIntentWithIdentity:nestedInsideIntent:", ?*PresentationIntent, .{identity, parent});
    }

    pub fn listItemIntentWithIdentityOrdinalNestedInsideIntent(self: *@This(), identity: objc.NSInteger, ordinal: objc.NSInteger, parent: ?*PresentationIntent) ?*PresentationIntent {
        return objc.msgSend(self, "listItemIntentWithIdentity:ordinal:nestedInsideIntent:", ?*PresentationIntent, .{identity, ordinal, parent});
    }

    pub fn blockQuoteIntentWithIdentityNestedInsideIntent(self: *@This(), identity: objc.NSInteger, parent: ?*PresentationIntent) ?*PresentationIntent {
        return objc.msgSend(self, "blockQuoteIntentWithIdentity:nestedInsideIntent:", ?*PresentationIntent, .{identity, parent});
    }

    pub fn tableIntentWithIdentityColumnCountAlignmentsNestedInsideIntent(self: *@This(), identity: objc.NSInteger, columnCount: objc.NSInteger, alignments: ?*anyopaque, parent: ?*PresentationIntent, ) ?*PresentationIntent {
        return objc.msgSend(self, "tableIntentWithIdentity:columnCount:alignments:nestedInsideIntent:", ?*PresentationIntent, .{identity, columnCount, alignments, parent, });
    }

    pub fn tableHeaderRowIntentWithIdentityNestedInsideIntent(self: *@This(), identity: objc.NSInteger, parent: ?*PresentationIntent) ?*PresentationIntent {
        return objc.msgSend(self, "tableHeaderRowIntentWithIdentity:nestedInsideIntent:", ?*PresentationIntent, .{identity, parent});
    }

    pub fn tableRowIntentWithIdentityRowNestedInsideIntent(self: *@This(), identity: objc.NSInteger, row: objc.NSInteger, parent: ?*PresentationIntent) ?*PresentationIntent {
        return objc.msgSend(self, "tableRowIntentWithIdentity:row:nestedInsideIntent:", ?*PresentationIntent, .{identity, row, parent});
    }

    pub fn tableCellIntentWithIdentityColumnNestedInsideIntent(self: *@This(), identity: objc.NSInteger, column: objc.NSInteger, parent: ?*PresentationIntent) ?*PresentationIntent {
        return objc.msgSend(self, "tableCellIntentWithIdentity:column:nestedInsideIntent:", ?*PresentationIntent, .{identity, column, parent});
    }

    pub fn isEquivalentToPresentationIntent(self: *@This(), other: ?*PresentationIntent) objc.BOOL {
        return objc.msgSend(self, "isEquivalentToPresentationIntent:", objc.BOOL, .{other});
    }

    pub fn intentKind(self: *@This()) PresentationIntentKind {
        return objc.msgSend(self, "intentKind", PresentationIntentKind, .{});
    }

    pub fn parentIntent(self: *@This()) ?*PresentationIntent {
        return objc.msgSend(self, "parentIntent", ?*PresentationIntent, .{});
    }

    pub fn identity(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "identity", objc.NSInteger, .{});
    }

    pub fn ordinal(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "ordinal", objc.NSInteger, .{});
    }

    pub fn columnAlignments(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "columnAlignments", ?*anyopaque, .{});
    }

    pub fn columnCount(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "columnCount", objc.NSInteger, .{});
    }

    pub fn headerLevel(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "headerLevel", objc.NSInteger, .{});
    }

    pub fn languageHint(self: *@This()) ?*String {
        return objc.msgSend(self, "languageHint", ?*String, .{});
    }

    pub fn column(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "column", objc.NSInteger, .{});
    }

    pub fn row(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "row", objc.NSInteger, .{});
    }

    pub fn indentationLevel(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "indentationLevel", objc.NSInteger, .{});
    }

};

pub const FormattingContext = enum(objc.NSInteger) {
    Unknown = 0,
    Dynamic = 1,
    Standalone = 2,
    ListItem = 3,
    BeginningOfSentence = 4,
    MiddleOfSentence = 5,
};

pub const FormattingUnitStyle = enum(objc.NSInteger) {
    Short = 1,
    Medium = 2,
    Long = 3,
};

/// https://developer.apple.com/documentation/Foundation/NSFormatter?language=objc
pub const Formatter = opaque {
    pub const InternalInfo = objc.ExternalClass("NSFormatter", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn stringForObjectValue(self: *@This(), obj: *objc.Id) ?*String {
        return objc.msgSend(self, "stringForObjectValue:", ?*String, .{obj});
    }

    pub fn attributedStringForObjectValueWithDefaultAttributes(self: *@This(), obj: *objc.Id, attrs: ?*anyopaque) ?*AttributedString {
        return objc.msgSend(self, "attributedStringForObjectValue:withDefaultAttributes:", ?*AttributedString, .{obj, attrs});
    }

    pub fn editingStringForObjectValue(self: *@This(), obj: *objc.Id) ?*String {
        return objc.msgSend(self, "editingStringForObjectValue:", ?*String, .{obj});
    }

    pub fn getObjectValueForStringErrorDescription(self: *@This(), obj: ?**objc.Id, string: ?*String, @"error": ?*?*String) objc.BOOL {
        return objc.msgSend(self, "getObjectValue:forString:errorDescription:", objc.BOOL, .{obj, string, @"error"});
    }

    pub fn isPartialStringValidNewEditingStringErrorDescription(self: *@This(), partialString: ?*String, newString: ?*?*String, @"error": ?*?*String) objc.BOOL {
        return objc.msgSend(self, "isPartialStringValid:newEditingString:errorDescription:", objc.BOOL, .{partialString, newString, @"error"});
    }

    pub fn isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription(self: *@This(), partialStringPtr: ?*?*String, proposedSelRangePtr: RangePointer, origString: ?*String, origSelRange: Range, @"error": ?*?*String, ) objc.BOOL {
        return objc.msgSend(self, "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:", objc.BOOL, .{partialStringPtr, proposedSelRangePtr, origString, origSelRange, @"error", });
    }

};

/// https://developer.apple.com/documentation/Foundation/NSDateFormatter?language=objc
pub const DateFormatter = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDateFormatter", @This(), Formatter, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn setFormattingContext(self: *@This(), formattingContext: FormattingContext) void {
        return objc.msgSend(self, "setFormattingContext:", void, .{formattingContext});
    }

    pub fn formattingContext(self: *@This()) FormattingContext {
        return objc.msgSend(self, "formattingContext", FormattingContext, .{});
    }

    pub fn getObjectValueForStringRangeError(self: *@This(), obj: ?**objc.Id, string: ?*String, rangep: ?*Range, @"error": ?*?*Error, ) objc.BOOL {
        return objc.msgSend(self, "getObjectValue:forString:range:error:", objc.BOOL, .{obj, string, rangep, @"error", });
    }

    pub fn stringFromDate(self: *@This(), date: ?*Date) ?*String {
        return objc.msgSend(self, "stringFromDate:", ?*String, .{date});
    }

    pub fn dateFromString(self: *@This(), string: ?*String) ?*Date {
        return objc.msgSend(self, "dateFromString:", ?*Date, .{string});
    }

    pub fn localizedStringFromDateDateStyleTimeStyle(self: *@This(), date: ?*Date, dstyle: DateFormatterStyle, tstyle: DateFormatterStyle) ?*String {
        return objc.msgSend(self, "localizedStringFromDate:dateStyle:timeStyle:", ?*String, .{date, dstyle, tstyle});
    }

    pub fn dateFormatFromTemplateOptionsLocale(self: *@This(), tmplate: ?*String, opts: objc.NSUInteger, locale: ?*Locale) ?*String {
        return objc.msgSend(self, "dateFormatFromTemplate:options:locale:", ?*String, .{tmplate, opts, locale});
    }

    pub fn setDefaultFormatterBehavior(self: *@This(), defaultFormatterBehavior: DateFormatterBehavior) void {
        return objc.msgSend(self, "setDefaultFormatterBehavior:", void, .{defaultFormatterBehavior});
    }

    pub fn defaultFormatterBehavior(self: *@This()) DateFormatterBehavior {
        return objc.msgSend(self, "defaultFormatterBehavior", DateFormatterBehavior, .{});
    }

    pub fn setLocalizedDateFormatFromTemplate(self: *@This(), dateFormatTemplate: ?*String) void {
        return objc.msgSend(self, "setLocalizedDateFormatFromTemplate:", void, .{dateFormatTemplate});
    }

    pub fn setDateFormat(self: *@This(), dateFormat: ?*String) void {
        return objc.msgSend(self, "setDateFormat:", void, .{dateFormat});
    }

    pub fn dateFormat(self: *@This()) ?*String {
        return objc.msgSend(self, "dateFormat", ?*String, .{});
    }

    pub fn setDateStyle(self: *@This(), dateStyle: DateFormatterStyle) void {
        return objc.msgSend(self, "setDateStyle:", void, .{dateStyle});
    }

    pub fn dateStyle(self: *@This()) DateFormatterStyle {
        return objc.msgSend(self, "dateStyle", DateFormatterStyle, .{});
    }

    pub fn setTimeStyle(self: *@This(), timeStyle: DateFormatterStyle) void {
        return objc.msgSend(self, "setTimeStyle:", void, .{timeStyle});
    }

    pub fn timeStyle(self: *@This()) DateFormatterStyle {
        return objc.msgSend(self, "timeStyle", DateFormatterStyle, .{});
    }

    pub fn locale(self: *@This()) ?*Locale {
        return objc.msgSend(self, "locale", ?*Locale, .{});
    }

    pub fn setLocale(self: *@This(), locale: ?*Locale) void {
        return objc.msgSend(self, "setLocale:", void, .{locale});
    }

    pub fn setGeneratesCalendarDates(self: *@This(), generatesCalendarDates: objc.BOOL) void {
        return objc.msgSend(self, "setGeneratesCalendarDates:", void, .{generatesCalendarDates});
    }

    pub fn generatesCalendarDates(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "generatesCalendarDates", objc.BOOL, .{});
    }

    pub fn setFormatterBehavior(self: *@This(), formatterBehavior: DateFormatterBehavior) void {
        return objc.msgSend(self, "setFormatterBehavior:", void, .{formatterBehavior});
    }

    pub fn formatterBehavior(self: *@This()) DateFormatterBehavior {
        return objc.msgSend(self, "formatterBehavior", DateFormatterBehavior, .{});
    }

    pub fn setTimeZone(self: *@This(), timeZone: ?*TimeZone) void {
        return objc.msgSend(self, "setTimeZone:", void, .{timeZone});
    }

    pub fn timeZone(self: *@This()) ?*TimeZone {
        return objc.msgSend(self, "timeZone", ?*TimeZone, .{});
    }

    pub fn setCalendar(self: *@This(), calendar: ?*Calendar) void {
        return objc.msgSend(self, "setCalendar:", void, .{calendar});
    }

    pub fn calendar(self: *@This()) ?*Calendar {
        return objc.msgSend(self, "calendar", ?*Calendar, .{});
    }

    pub fn setLenient(self: *@This(), lenient: objc.BOOL) void {
        return objc.msgSend(self, "setLenient:", void, .{lenient});
    }

    pub fn isLenient(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isLenient", objc.BOOL, .{});
    }

    pub fn setTwoDigitStartDate(self: *@This(), twoDigitStartDate: ?*Date) void {
        return objc.msgSend(self, "setTwoDigitStartDate:", void, .{twoDigitStartDate});
    }

    pub fn twoDigitStartDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "twoDigitStartDate", ?*Date, .{});
    }

    pub fn setDefaultDate(self: *@This(), defaultDate: ?*Date) void {
        return objc.msgSend(self, "setDefaultDate:", void, .{defaultDate});
    }

    pub fn defaultDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "defaultDate", ?*Date, .{});
    }

    pub fn eraSymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "eraSymbols", ?*anyopaque, .{});
    }

    pub fn setEraSymbols(self: *@This(), eraSymbols: ?*anyopaque) void {
        return objc.msgSend(self, "setEraSymbols:", void, .{eraSymbols});
    }

    pub fn monthSymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "monthSymbols", ?*anyopaque, .{});
    }

    pub fn setMonthSymbols(self: *@This(), monthSymbols: ?*anyopaque) void {
        return objc.msgSend(self, "setMonthSymbols:", void, .{monthSymbols});
    }

    pub fn shortMonthSymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "shortMonthSymbols", ?*anyopaque, .{});
    }

    pub fn setShortMonthSymbols(self: *@This(), shortMonthSymbols: ?*anyopaque) void {
        return objc.msgSend(self, "setShortMonthSymbols:", void, .{shortMonthSymbols});
    }

    pub fn weekdaySymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "weekdaySymbols", ?*anyopaque, .{});
    }

    pub fn setWeekdaySymbols(self: *@This(), weekdaySymbols: ?*anyopaque) void {
        return objc.msgSend(self, "setWeekdaySymbols:", void, .{weekdaySymbols});
    }

    pub fn shortWeekdaySymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "shortWeekdaySymbols", ?*anyopaque, .{});
    }

    pub fn setShortWeekdaySymbols(self: *@This(), shortWeekdaySymbols: ?*anyopaque) void {
        return objc.msgSend(self, "setShortWeekdaySymbols:", void, .{shortWeekdaySymbols});
    }

    pub fn setAMSymbol(self: *@This(), AMSymbol: ?*String) void {
        return objc.msgSend(self, "setAMSymbol:", void, .{AMSymbol});
    }

    pub fn AMSymbol(self: *@This()) ?*String {
        return objc.msgSend(self, "AMSymbol", ?*String, .{});
    }

    pub fn setPMSymbol(self: *@This(), PMSymbol: ?*String) void {
        return objc.msgSend(self, "setPMSymbol:", void, .{PMSymbol});
    }

    pub fn PMSymbol(self: *@This()) ?*String {
        return objc.msgSend(self, "PMSymbol", ?*String, .{});
    }

    pub fn setLongEraSymbols(self: *@This(), longEraSymbols: ?*anyopaque) void {
        return objc.msgSend(self, "setLongEraSymbols:", void, .{longEraSymbols});
    }

    pub fn longEraSymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "longEraSymbols", ?*anyopaque, .{});
    }

    pub fn setVeryShortMonthSymbols(self: *@This(), veryShortMonthSymbols: ?*anyopaque) void {
        return objc.msgSend(self, "setVeryShortMonthSymbols:", void, .{veryShortMonthSymbols});
    }

    pub fn veryShortMonthSymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "veryShortMonthSymbols", ?*anyopaque, .{});
    }

    pub fn setStandaloneMonthSymbols(self: *@This(), standaloneMonthSymbols: ?*anyopaque) void {
        return objc.msgSend(self, "setStandaloneMonthSymbols:", void, .{standaloneMonthSymbols});
    }

    pub fn standaloneMonthSymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "standaloneMonthSymbols", ?*anyopaque, .{});
    }

    pub fn setShortStandaloneMonthSymbols(self: *@This(), shortStandaloneMonthSymbols: ?*anyopaque) void {
        return objc.msgSend(self, "setShortStandaloneMonthSymbols:", void, .{shortStandaloneMonthSymbols});
    }

    pub fn shortStandaloneMonthSymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "shortStandaloneMonthSymbols", ?*anyopaque, .{});
    }

    pub fn setVeryShortStandaloneMonthSymbols(self: *@This(), veryShortStandaloneMonthSymbols: ?*anyopaque) void {
        return objc.msgSend(self, "setVeryShortStandaloneMonthSymbols:", void, .{veryShortStandaloneMonthSymbols});
    }

    pub fn veryShortStandaloneMonthSymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "veryShortStandaloneMonthSymbols", ?*anyopaque, .{});
    }

    pub fn setVeryShortWeekdaySymbols(self: *@This(), veryShortWeekdaySymbols: ?*anyopaque) void {
        return objc.msgSend(self, "setVeryShortWeekdaySymbols:", void, .{veryShortWeekdaySymbols});
    }

    pub fn veryShortWeekdaySymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "veryShortWeekdaySymbols", ?*anyopaque, .{});
    }

    pub fn standaloneWeekdaySymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "standaloneWeekdaySymbols", ?*anyopaque, .{});
    }

    pub fn setStandaloneWeekdaySymbols(self: *@This(), standaloneWeekdaySymbols: ?*anyopaque) void {
        return objc.msgSend(self, "setStandaloneWeekdaySymbols:", void, .{standaloneWeekdaySymbols});
    }

    pub fn shortStandaloneWeekdaySymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "shortStandaloneWeekdaySymbols", ?*anyopaque, .{});
    }

    pub fn setShortStandaloneWeekdaySymbols(self: *@This(), shortStandaloneWeekdaySymbols: ?*anyopaque) void {
        return objc.msgSend(self, "setShortStandaloneWeekdaySymbols:", void, .{shortStandaloneWeekdaySymbols});
    }

    pub fn veryShortStandaloneWeekdaySymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "veryShortStandaloneWeekdaySymbols", ?*anyopaque, .{});
    }

    pub fn setVeryShortStandaloneWeekdaySymbols(self: *@This(), veryShortStandaloneWeekdaySymbols: ?*anyopaque) void {
        return objc.msgSend(self, "setVeryShortStandaloneWeekdaySymbols:", void, .{veryShortStandaloneWeekdaySymbols});
    }

    pub fn quarterSymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "quarterSymbols", ?*anyopaque, .{});
    }

    pub fn setQuarterSymbols(self: *@This(), quarterSymbols: ?*anyopaque) void {
        return objc.msgSend(self, "setQuarterSymbols:", void, .{quarterSymbols});
    }

    pub fn shortQuarterSymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "shortQuarterSymbols", ?*anyopaque, .{});
    }

    pub fn setShortQuarterSymbols(self: *@This(), shortQuarterSymbols: ?*anyopaque) void {
        return objc.msgSend(self, "setShortQuarterSymbols:", void, .{shortQuarterSymbols});
    }

    pub fn standaloneQuarterSymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "standaloneQuarterSymbols", ?*anyopaque, .{});
    }

    pub fn setStandaloneQuarterSymbols(self: *@This(), standaloneQuarterSymbols: ?*anyopaque) void {
        return objc.msgSend(self, "setStandaloneQuarterSymbols:", void, .{standaloneQuarterSymbols});
    }

    pub fn setShortStandaloneQuarterSymbols(self: *@This(), shortStandaloneQuarterSymbols: ?*anyopaque) void {
        return objc.msgSend(self, "setShortStandaloneQuarterSymbols:", void, .{shortStandaloneQuarterSymbols});
    }

    pub fn shortStandaloneQuarterSymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "shortStandaloneQuarterSymbols", ?*anyopaque, .{});
    }

    pub fn setGregorianStartDate(self: *@This(), gregorianStartDate: ?*Date) void {
        return objc.msgSend(self, "setGregorianStartDate:", void, .{gregorianStartDate});
    }

    pub fn gregorianStartDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "gregorianStartDate", ?*Date, .{});
    }

    pub fn doesRelativeDateFormatting(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "doesRelativeDateFormatting", objc.BOOL, .{});
    }

    pub fn setDoesRelativeDateFormatting(self: *@This(), doesRelativeDateFormatting: objc.BOOL) void {
        return objc.msgSend(self, "setDoesRelativeDateFormatting:", void, .{doesRelativeDateFormatting});
    }

};

pub const DateFormatterStyle = DateFormatterStyle;

pub const DateFormatterStyle = enum(objc.NSUInteger) {
    NoStyle = 0,
    ShortStyle = 1,
    MediumStyle = 2,
    LongStyle = 3,
    FullStyle = 4,
};

pub const DateFormatterBehavior = DateFormatterBehavior;

pub const DateFormatterBehavior = enum(objc.NSUInteger) {
    Default = 0,
    10_0 = 1000,
    10_4 = 1040,
};

pub const DateIntervalFormatterStyle = enum(objc.NSUInteger) {
    NoStyle = 0,
    ShortStyle = 1,
    MediumStyle = 2,
    LongStyle = 3,
    FullStyle = 4,
};

/// https://developer.apple.com/documentation/Foundation/NSDateIntervalFormatter?language=objc
pub const DateIntervalFormatter = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDateIntervalFormatter", @This(), Formatter, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn stringFromDateToDate(self: *@This(), fromDate: ?*Date, toDate: ?*Date) ?*String {
        return objc.msgSend(self, "stringFromDate:toDate:", ?*String, .{fromDate, toDate});
    }

    pub fn stringFromDateInterval(self: *@This(), dateInterval: ?*DateInterval) ?*String {
        return objc.msgSend(self, "stringFromDateInterval:", ?*String, .{dateInterval});
    }

    pub fn locale(self: *@This()) ?*Locale {
        return objc.msgSend(self, "locale", ?*Locale, .{});
    }

    pub fn setLocale(self: *@This(), locale: ?*Locale) void {
        return objc.msgSend(self, "setLocale:", void, .{locale});
    }

    pub fn calendar(self: *@This()) ?*Calendar {
        return objc.msgSend(self, "calendar", ?*Calendar, .{});
    }

    pub fn setCalendar(self: *@This(), calendar: ?*Calendar) void {
        return objc.msgSend(self, "setCalendar:", void, .{calendar});
    }

    pub fn timeZone(self: *@This()) ?*TimeZone {
        return objc.msgSend(self, "timeZone", ?*TimeZone, .{});
    }

    pub fn setTimeZone(self: *@This(), timeZone: ?*TimeZone) void {
        return objc.msgSend(self, "setTimeZone:", void, .{timeZone});
    }

    pub fn dateTemplate(self: *@This()) ?*String {
        return objc.msgSend(self, "dateTemplate", ?*String, .{});
    }

    pub fn setDateTemplate(self: *@This(), dateTemplate: ?*String) void {
        return objc.msgSend(self, "setDateTemplate:", void, .{dateTemplate});
    }

    pub fn dateStyle(self: *@This()) DateIntervalFormatterStyle {
        return objc.msgSend(self, "dateStyle", DateIntervalFormatterStyle, .{});
    }

    pub fn setDateStyle(self: *@This(), dateStyle: DateIntervalFormatterStyle) void {
        return objc.msgSend(self, "setDateStyle:", void, .{dateStyle});
    }

    pub fn timeStyle(self: *@This()) DateIntervalFormatterStyle {
        return objc.msgSend(self, "timeStyle", DateIntervalFormatterStyle, .{});
    }

    pub fn setTimeStyle(self: *@This(), timeStyle: DateIntervalFormatterStyle) void {
        return objc.msgSend(self, "setTimeStyle:", void, .{timeStyle});
    }

};

pub const ISO8601DateFormatOptions = enum(objc.NSUInteger) {
    WithYear = 1,
    WithMonth = 2,
    WithWeekOfYear = 4,
    WithDay = 16,
    WithTime = 32,
    WithTimeZone = 64,
    WithSpaceBetweenDateAndTime = 128,
    WithDashSeparatorInDate = 256,
    WithColonSeparatorInTime = 512,
    WithColonSeparatorInTimeZone = 1024,
    WithFractionalSeconds = 2048,
    WithFullDate = 275,
    WithFullTime = 1632,
    WithInternetDateTime = 1907,
};

/// https://developer.apple.com/documentation/Foundation/NSISO8601DateFormatter?language=objc
pub const ISO8601DateFormatter = opaque {
    pub const InternalInfo = objc.ExternalClass("NSISO8601DateFormatter", @This(), Formatter, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn stringFromDate(self: *@This(), date: ?*Date) ?*String {
        return objc.msgSend(self, "stringFromDate:", ?*String, .{date});
    }

    pub fn dateFromString(self: *@This(), string: ?*String) ?*Date {
        return objc.msgSend(self, "dateFromString:", ?*Date, .{string});
    }

    pub fn stringFromDateTimeZoneFormatOptions(self: *@This(), date: ?*Date, timeZone: ?*TimeZone, formatOptions: ISO8601DateFormatOptions) ?*String {
        return objc.msgSend(self, "stringFromDate:timeZone:formatOptions:", ?*String, .{date, timeZone, formatOptions});
    }

    pub fn timeZone(self: *@This()) ?*TimeZone {
        return objc.msgSend(self, "timeZone", ?*TimeZone, .{});
    }

    pub fn setTimeZone(self: *@This(), timeZone: ?*TimeZone) void {
        return objc.msgSend(self, "setTimeZone:", void, .{timeZone});
    }

    pub fn formatOptions(self: *@This()) ISO8601DateFormatOptions {
        return objc.msgSend(self, "formatOptions", ISO8601DateFormatOptions, .{});
    }

    pub fn setFormatOptions(self: *@This(), formatOptions: ISO8601DateFormatOptions) void {
        return objc.msgSend(self, "setFormatOptions:", void, .{formatOptions});
    }

};

pub const MassFormatterUnit = enum(objc.NSInteger) {
    Gram = 11,
    Kilogram = 14,
    Ounce = 1537,
    Pound = 1538,
    Stone = 1539,
};

/// https://developer.apple.com/documentation/Foundation/NSMassFormatter?language=objc
pub const MassFormatter = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMassFormatter", @This(), Formatter, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn stringFromValueUnit(self: *@This(), value: f64, unit: MassFormatterUnit) ?*String {
        return objc.msgSend(self, "stringFromValue:unit:", ?*String, .{value, unit});
    }

    pub fn stringFromKilograms(self: *@This(), numberInKilograms: f64) ?*String {
        return objc.msgSend(self, "stringFromKilograms:", ?*String, .{numberInKilograms});
    }

    pub fn unitStringFromValueUnit(self: *@This(), value: f64, unit: MassFormatterUnit) ?*String {
        return objc.msgSend(self, "unitStringFromValue:unit:", ?*String, .{value, unit});
    }

    pub fn unitStringFromKilogramsUsedUnit(self: *@This(), numberInKilograms: f64, unitp: ?*MassFormatterUnit) ?*String {
        return objc.msgSend(self, "unitStringFromKilograms:usedUnit:", ?*String, .{numberInKilograms, unitp});
    }

    pub fn getObjectValueForStringErrorDescription(self: *@This(), obj: ?**objc.Id, string: ?*String, @"error": ?*?*String) objc.BOOL {
        return objc.msgSend(self, "getObjectValue:forString:errorDescription:", objc.BOOL, .{obj, string, @"error"});
    }

    pub fn numberFormatter(self: *@This()) ?*NumberFormatter {
        return objc.msgSend(self, "numberFormatter", ?*NumberFormatter, .{});
    }

    pub fn setNumberFormatter(self: *@This(), numberFormatter: ?*NumberFormatter) void {
        return objc.msgSend(self, "setNumberFormatter:", void, .{numberFormatter});
    }

    pub fn unitStyle(self: *@This()) FormattingUnitStyle {
        return objc.msgSend(self, "unitStyle", FormattingUnitStyle, .{});
    }

    pub fn setUnitStyle(self: *@This(), unitStyle: FormattingUnitStyle) void {
        return objc.msgSend(self, "setUnitStyle:", void, .{unitStyle});
    }

    pub fn isForPersonMassUse(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isForPersonMassUse", objc.BOOL, .{});
    }

    pub fn setForPersonMassUse(self: *@This(), forPersonMassUse: objc.BOOL) void {
        return objc.msgSend(self, "setForPersonMassUse:", void, .{forPersonMassUse});
    }

};

pub const LengthFormatterUnit = enum(objc.NSInteger) {
    Millimeter = 8,
    Centimeter = 9,
    Meter = 11,
    Kilometer = 14,
    Inch = 1281,
    Foot = 1282,
    Yard = 1283,
    Mile = 1284,
};

/// https://developer.apple.com/documentation/Foundation/NSLengthFormatter?language=objc
pub const LengthFormatter = opaque {
    pub const InternalInfo = objc.ExternalClass("NSLengthFormatter", @This(), Formatter, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn stringFromValueUnit(self: *@This(), value: f64, unit: LengthFormatterUnit) ?*String {
        return objc.msgSend(self, "stringFromValue:unit:", ?*String, .{value, unit});
    }

    pub fn stringFromMeters(self: *@This(), numberInMeters: f64) ?*String {
        return objc.msgSend(self, "stringFromMeters:", ?*String, .{numberInMeters});
    }

    pub fn unitStringFromValueUnit(self: *@This(), value: f64, unit: LengthFormatterUnit) ?*String {
        return objc.msgSend(self, "unitStringFromValue:unit:", ?*String, .{value, unit});
    }

    pub fn unitStringFromMetersUsedUnit(self: *@This(), numberInMeters: f64, unitp: ?*LengthFormatterUnit) ?*String {
        return objc.msgSend(self, "unitStringFromMeters:usedUnit:", ?*String, .{numberInMeters, unitp});
    }

    pub fn getObjectValueForStringErrorDescription(self: *@This(), obj: ?**objc.Id, string: ?*String, @"error": ?*?*String) objc.BOOL {
        return objc.msgSend(self, "getObjectValue:forString:errorDescription:", objc.BOOL, .{obj, string, @"error"});
    }

    pub fn numberFormatter(self: *@This()) ?*NumberFormatter {
        return objc.msgSend(self, "numberFormatter", ?*NumberFormatter, .{});
    }

    pub fn setNumberFormatter(self: *@This(), numberFormatter: ?*NumberFormatter) void {
        return objc.msgSend(self, "setNumberFormatter:", void, .{numberFormatter});
    }

    pub fn unitStyle(self: *@This()) FormattingUnitStyle {
        return objc.msgSend(self, "unitStyle", FormattingUnitStyle, .{});
    }

    pub fn setUnitStyle(self: *@This(), unitStyle: FormattingUnitStyle) void {
        return objc.msgSend(self, "setUnitStyle:", void, .{unitStyle});
    }

    pub fn isForPersonHeightUse(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isForPersonHeightUse", objc.BOOL, .{});
    }

    pub fn setForPersonHeightUse(self: *@This(), forPersonHeightUse: objc.BOOL) void {
        return objc.msgSend(self, "setForPersonHeightUse:", void, .{forPersonHeightUse});
    }

};

pub const EnergyFormatterUnit = enum(objc.NSInteger) {
    Joule = 11,
    Kilojoule = 14,
    Calorie = 1793,
    Kilocalorie = 1794,
};

/// https://developer.apple.com/documentation/Foundation/NSEnergyFormatter?language=objc
pub const EnergyFormatter = opaque {
    pub const InternalInfo = objc.ExternalClass("NSEnergyFormatter", @This(), Formatter, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn stringFromValueUnit(self: *@This(), value: f64, unit: EnergyFormatterUnit) ?*String {
        return objc.msgSend(self, "stringFromValue:unit:", ?*String, .{value, unit});
    }

    pub fn stringFromJoules(self: *@This(), numberInJoules: f64) ?*String {
        return objc.msgSend(self, "stringFromJoules:", ?*String, .{numberInJoules});
    }

    pub fn unitStringFromValueUnit(self: *@This(), value: f64, unit: EnergyFormatterUnit) ?*String {
        return objc.msgSend(self, "unitStringFromValue:unit:", ?*String, .{value, unit});
    }

    pub fn unitStringFromJoulesUsedUnit(self: *@This(), numberInJoules: f64, unitp: ?*EnergyFormatterUnit) ?*String {
        return objc.msgSend(self, "unitStringFromJoules:usedUnit:", ?*String, .{numberInJoules, unitp});
    }

    pub fn getObjectValueForStringErrorDescription(self: *@This(), obj: ?**objc.Id, string: ?*String, @"error": ?*?*String) objc.BOOL {
        return objc.msgSend(self, "getObjectValue:forString:errorDescription:", objc.BOOL, .{obj, string, @"error"});
    }

    pub fn numberFormatter(self: *@This()) ?*NumberFormatter {
        return objc.msgSend(self, "numberFormatter", ?*NumberFormatter, .{});
    }

    pub fn setNumberFormatter(self: *@This(), numberFormatter: ?*NumberFormatter) void {
        return objc.msgSend(self, "setNumberFormatter:", void, .{numberFormatter});
    }

    pub fn unitStyle(self: *@This()) FormattingUnitStyle {
        return objc.msgSend(self, "unitStyle", FormattingUnitStyle, .{});
    }

    pub fn setUnitStyle(self: *@This(), unitStyle: FormattingUnitStyle) void {
        return objc.msgSend(self, "setUnitStyle:", void, .{unitStyle});
    }

    pub fn isForFoodEnergyUse(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isForFoodEnergyUse", objc.BOOL, .{});
    }

    pub fn setForFoodEnergyUse(self: *@This(), forFoodEnergyUse: objc.BOOL) void {
        return objc.msgSend(self, "setForFoodEnergyUse:", void, .{forFoodEnergyUse});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUnitConverter?language=objc
pub const UnitConverter = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUnitConverter", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn baseUnitValueFromValue(self: *@This(), value: f64) f64 {
        return objc.msgSend(self, "baseUnitValueFromValue:", f64, .{value});
    }

    pub fn valueFromBaseUnitValue(self: *@This(), baseUnitValue: f64) f64 {
        return objc.msgSend(self, "valueFromBaseUnitValue:", f64, .{baseUnitValue});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUnitConverterLinear?language=objc
pub const UnitConverterLinear = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUnitConverterLinear", @This(), UnitConverter, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithCoefficient(self: *@This(), coefficient: f64) *@This() {
        return objc.msgSend(self, "initWithCoefficient:", *@This(), .{coefficient});
    }

    pub fn initWithCoefficientConstant(self: *@This(), coefficient: f64, constant: f64) *@This() {
        return objc.msgSend(self, "initWithCoefficient:constant:", *@This(), .{coefficient, constant});
    }

    pub fn coefficient(self: *@This()) f64 {
        return objc.msgSend(self, "coefficient", f64, .{});
    }

    pub fn constant(self: *@This()) f64 {
        return objc.msgSend(self, "constant", f64, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUnit?language=objc
pub const Unit = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUnit", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn initWithSymbol(self: *@This(), symbol: ?*String) *@This() {
        return objc.msgSend(self, "initWithSymbol:", *@This(), .{symbol});
    }

    pub fn symbol(self: *@This()) ?*String {
        return objc.msgSend(self, "symbol", ?*String, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSDimension?language=objc
pub const Dimension = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDimension", @This(), Unit, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithSymbolConverter(self: *@This(), symbol: ?*String, converter: ?*UnitConverter) *@This() {
        return objc.msgSend(self, "initWithSymbol:converter:", *@This(), .{symbol, converter});
    }

    pub fn baseUnit(self: *@This()) *@This() {
        return objc.msgSend(self, "baseUnit", *@This(), .{});
    }

    pub fn converter(self: *@This()) ?*UnitConverter {
        return objc.msgSend(self, "converter", ?*UnitConverter, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUnitAcceleration?language=objc
pub const UnitAcceleration = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUnitAcceleration", @This(), Dimension, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn metersPerSecondSquared(self: *@This()) ?*UnitAcceleration {
        return objc.msgSend(self, "metersPerSecondSquared", ?*UnitAcceleration, .{});
    }

    pub fn gravity(self: *@This()) ?*UnitAcceleration {
        return objc.msgSend(self, "gravity", ?*UnitAcceleration, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUnitAngle?language=objc
pub const UnitAngle = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUnitAngle", @This(), Dimension, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn degrees(self: *@This()) ?*UnitAngle {
        return objc.msgSend(self, "degrees", ?*UnitAngle, .{});
    }

    pub fn arcMinutes(self: *@This()) ?*UnitAngle {
        return objc.msgSend(self, "arcMinutes", ?*UnitAngle, .{});
    }

    pub fn arcSeconds(self: *@This()) ?*UnitAngle {
        return objc.msgSend(self, "arcSeconds", ?*UnitAngle, .{});
    }

    pub fn radians(self: *@This()) ?*UnitAngle {
        return objc.msgSend(self, "radians", ?*UnitAngle, .{});
    }

    pub fn gradians(self: *@This()) ?*UnitAngle {
        return objc.msgSend(self, "gradians", ?*UnitAngle, .{});
    }

    pub fn revolutions(self: *@This()) ?*UnitAngle {
        return objc.msgSend(self, "revolutions", ?*UnitAngle, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUnitArea?language=objc
pub const UnitArea = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUnitArea", @This(), Dimension, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn squareMegameters(self: *@This()) ?*UnitArea {
        return objc.msgSend(self, "squareMegameters", ?*UnitArea, .{});
    }

    pub fn squareKilometers(self: *@This()) ?*UnitArea {
        return objc.msgSend(self, "squareKilometers", ?*UnitArea, .{});
    }

    pub fn squareMeters(self: *@This()) ?*UnitArea {
        return objc.msgSend(self, "squareMeters", ?*UnitArea, .{});
    }

    pub fn squareCentimeters(self: *@This()) ?*UnitArea {
        return objc.msgSend(self, "squareCentimeters", ?*UnitArea, .{});
    }

    pub fn squareMillimeters(self: *@This()) ?*UnitArea {
        return objc.msgSend(self, "squareMillimeters", ?*UnitArea, .{});
    }

    pub fn squareMicrometers(self: *@This()) ?*UnitArea {
        return objc.msgSend(self, "squareMicrometers", ?*UnitArea, .{});
    }

    pub fn squareNanometers(self: *@This()) ?*UnitArea {
        return objc.msgSend(self, "squareNanometers", ?*UnitArea, .{});
    }

    pub fn squareInches(self: *@This()) ?*UnitArea {
        return objc.msgSend(self, "squareInches", ?*UnitArea, .{});
    }

    pub fn squareFeet(self: *@This()) ?*UnitArea {
        return objc.msgSend(self, "squareFeet", ?*UnitArea, .{});
    }

    pub fn squareYards(self: *@This()) ?*UnitArea {
        return objc.msgSend(self, "squareYards", ?*UnitArea, .{});
    }

    pub fn squareMiles(self: *@This()) ?*UnitArea {
        return objc.msgSend(self, "squareMiles", ?*UnitArea, .{});
    }

    pub fn acres(self: *@This()) ?*UnitArea {
        return objc.msgSend(self, "acres", ?*UnitArea, .{});
    }

    pub fn ares(self: *@This()) ?*UnitArea {
        return objc.msgSend(self, "ares", ?*UnitArea, .{});
    }

    pub fn hectares(self: *@This()) ?*UnitArea {
        return objc.msgSend(self, "hectares", ?*UnitArea, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUnitConcentrationMass?language=objc
pub const UnitConcentrationMass = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUnitConcentrationMass", @This(), Dimension, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn millimolesPerLiterWithGramsPerMole(self: *@This(), gramsPerMole: f64) ?*UnitConcentrationMass {
        return objc.msgSend(self, "millimolesPerLiterWithGramsPerMole:", ?*UnitConcentrationMass, .{gramsPerMole});
    }

    pub fn gramsPerLiter(self: *@This()) ?*UnitConcentrationMass {
        return objc.msgSend(self, "gramsPerLiter", ?*UnitConcentrationMass, .{});
    }

    pub fn milligramsPerDeciliter(self: *@This()) ?*UnitConcentrationMass {
        return objc.msgSend(self, "milligramsPerDeciliter", ?*UnitConcentrationMass, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUnitDispersion?language=objc
pub const UnitDispersion = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUnitDispersion", @This(), Dimension, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn partsPerMillion(self: *@This()) ?*UnitDispersion {
        return objc.msgSend(self, "partsPerMillion", ?*UnitDispersion, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUnitDuration?language=objc
pub const UnitDuration = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUnitDuration", @This(), Dimension, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn hours(self: *@This()) ?*UnitDuration {
        return objc.msgSend(self, "hours", ?*UnitDuration, .{});
    }

    pub fn minutes(self: *@This()) ?*UnitDuration {
        return objc.msgSend(self, "minutes", ?*UnitDuration, .{});
    }

    pub fn seconds(self: *@This()) ?*UnitDuration {
        return objc.msgSend(self, "seconds", ?*UnitDuration, .{});
    }

    pub fn milliseconds(self: *@This()) ?*UnitDuration {
        return objc.msgSend(self, "milliseconds", ?*UnitDuration, .{});
    }

    pub fn microseconds(self: *@This()) ?*UnitDuration {
        return objc.msgSend(self, "microseconds", ?*UnitDuration, .{});
    }

    pub fn nanoseconds(self: *@This()) ?*UnitDuration {
        return objc.msgSend(self, "nanoseconds", ?*UnitDuration, .{});
    }

    pub fn picoseconds(self: *@This()) ?*UnitDuration {
        return objc.msgSend(self, "picoseconds", ?*UnitDuration, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUnitElectricCharge?language=objc
pub const UnitElectricCharge = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUnitElectricCharge", @This(), Dimension, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn coulombs(self: *@This()) ?*UnitElectricCharge {
        return objc.msgSend(self, "coulombs", ?*UnitElectricCharge, .{});
    }

    pub fn megaampereHours(self: *@This()) ?*UnitElectricCharge {
        return objc.msgSend(self, "megaampereHours", ?*UnitElectricCharge, .{});
    }

    pub fn kiloampereHours(self: *@This()) ?*UnitElectricCharge {
        return objc.msgSend(self, "kiloampereHours", ?*UnitElectricCharge, .{});
    }

    pub fn ampereHours(self: *@This()) ?*UnitElectricCharge {
        return objc.msgSend(self, "ampereHours", ?*UnitElectricCharge, .{});
    }

    pub fn milliampereHours(self: *@This()) ?*UnitElectricCharge {
        return objc.msgSend(self, "milliampereHours", ?*UnitElectricCharge, .{});
    }

    pub fn microampereHours(self: *@This()) ?*UnitElectricCharge {
        return objc.msgSend(self, "microampereHours", ?*UnitElectricCharge, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUnitElectricCurrent?language=objc
pub const UnitElectricCurrent = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUnitElectricCurrent", @This(), Dimension, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn megaamperes(self: *@This()) ?*UnitElectricCurrent {
        return objc.msgSend(self, "megaamperes", ?*UnitElectricCurrent, .{});
    }

    pub fn kiloamperes(self: *@This()) ?*UnitElectricCurrent {
        return objc.msgSend(self, "kiloamperes", ?*UnitElectricCurrent, .{});
    }

    pub fn amperes(self: *@This()) ?*UnitElectricCurrent {
        return objc.msgSend(self, "amperes", ?*UnitElectricCurrent, .{});
    }

    pub fn milliamperes(self: *@This()) ?*UnitElectricCurrent {
        return objc.msgSend(self, "milliamperes", ?*UnitElectricCurrent, .{});
    }

    pub fn microamperes(self: *@This()) ?*UnitElectricCurrent {
        return objc.msgSend(self, "microamperes", ?*UnitElectricCurrent, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUnitElectricPotentialDifference?language=objc
pub const UnitElectricPotentialDifference = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUnitElectricPotentialDifference", @This(), Dimension, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn megavolts(self: *@This()) ?*UnitElectricPotentialDifference {
        return objc.msgSend(self, "megavolts", ?*UnitElectricPotentialDifference, .{});
    }

    pub fn kilovolts(self: *@This()) ?*UnitElectricPotentialDifference {
        return objc.msgSend(self, "kilovolts", ?*UnitElectricPotentialDifference, .{});
    }

    pub fn volts(self: *@This()) ?*UnitElectricPotentialDifference {
        return objc.msgSend(self, "volts", ?*UnitElectricPotentialDifference, .{});
    }

    pub fn millivolts(self: *@This()) ?*UnitElectricPotentialDifference {
        return objc.msgSend(self, "millivolts", ?*UnitElectricPotentialDifference, .{});
    }

    pub fn microvolts(self: *@This()) ?*UnitElectricPotentialDifference {
        return objc.msgSend(self, "microvolts", ?*UnitElectricPotentialDifference, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUnitElectricResistance?language=objc
pub const UnitElectricResistance = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUnitElectricResistance", @This(), Dimension, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn megaohms(self: *@This()) ?*UnitElectricResistance {
        return objc.msgSend(self, "megaohms", ?*UnitElectricResistance, .{});
    }

    pub fn kiloohms(self: *@This()) ?*UnitElectricResistance {
        return objc.msgSend(self, "kiloohms", ?*UnitElectricResistance, .{});
    }

    pub fn ohms(self: *@This()) ?*UnitElectricResistance {
        return objc.msgSend(self, "ohms", ?*UnitElectricResistance, .{});
    }

    pub fn milliohms(self: *@This()) ?*UnitElectricResistance {
        return objc.msgSend(self, "milliohms", ?*UnitElectricResistance, .{});
    }

    pub fn microohms(self: *@This()) ?*UnitElectricResistance {
        return objc.msgSend(self, "microohms", ?*UnitElectricResistance, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUnitEnergy?language=objc
pub const UnitEnergy = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUnitEnergy", @This(), Dimension, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn kilojoules(self: *@This()) ?*UnitEnergy {
        return objc.msgSend(self, "kilojoules", ?*UnitEnergy, .{});
    }

    pub fn joules(self: *@This()) ?*UnitEnergy {
        return objc.msgSend(self, "joules", ?*UnitEnergy, .{});
    }

    pub fn kilocalories(self: *@This()) ?*UnitEnergy {
        return objc.msgSend(self, "kilocalories", ?*UnitEnergy, .{});
    }

    pub fn calories(self: *@This()) ?*UnitEnergy {
        return objc.msgSend(self, "calories", ?*UnitEnergy, .{});
    }

    pub fn kilowattHours(self: *@This()) ?*UnitEnergy {
        return objc.msgSend(self, "kilowattHours", ?*UnitEnergy, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUnitFrequency?language=objc
pub const UnitFrequency = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUnitFrequency", @This(), Dimension, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn terahertz(self: *@This()) ?*UnitFrequency {
        return objc.msgSend(self, "terahertz", ?*UnitFrequency, .{});
    }

    pub fn gigahertz(self: *@This()) ?*UnitFrequency {
        return objc.msgSend(self, "gigahertz", ?*UnitFrequency, .{});
    }

    pub fn megahertz(self: *@This()) ?*UnitFrequency {
        return objc.msgSend(self, "megahertz", ?*UnitFrequency, .{});
    }

    pub fn kilohertz(self: *@This()) ?*UnitFrequency {
        return objc.msgSend(self, "kilohertz", ?*UnitFrequency, .{});
    }

    pub fn hertz(self: *@This()) ?*UnitFrequency {
        return objc.msgSend(self, "hertz", ?*UnitFrequency, .{});
    }

    pub fn millihertz(self: *@This()) ?*UnitFrequency {
        return objc.msgSend(self, "millihertz", ?*UnitFrequency, .{});
    }

    pub fn microhertz(self: *@This()) ?*UnitFrequency {
        return objc.msgSend(self, "microhertz", ?*UnitFrequency, .{});
    }

    pub fn nanohertz(self: *@This()) ?*UnitFrequency {
        return objc.msgSend(self, "nanohertz", ?*UnitFrequency, .{});
    }

    pub fn framesPerSecond(self: *@This()) ?*UnitFrequency {
        return objc.msgSend(self, "framesPerSecond", ?*UnitFrequency, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUnitFuelEfficiency?language=objc
pub const UnitFuelEfficiency = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUnitFuelEfficiency", @This(), Dimension, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn litersPer100Kilometers(self: *@This()) ?*UnitFuelEfficiency {
        return objc.msgSend(self, "litersPer100Kilometers", ?*UnitFuelEfficiency, .{});
    }

    pub fn milesPerImperialGallon(self: *@This()) ?*UnitFuelEfficiency {
        return objc.msgSend(self, "milesPerImperialGallon", ?*UnitFuelEfficiency, .{});
    }

    pub fn milesPerGallon(self: *@This()) ?*UnitFuelEfficiency {
        return objc.msgSend(self, "milesPerGallon", ?*UnitFuelEfficiency, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUnitInformationStorage?language=objc
pub const UnitInformationStorage = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUnitInformationStorage", @This(), Dimension, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn bytes(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "bytes", ?*UnitInformationStorage, .{});
    }

    pub fn bits(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "bits", ?*UnitInformationStorage, .{});
    }

    pub fn nibbles(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "nibbles", ?*UnitInformationStorage, .{});
    }

    pub fn yottabytes(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "yottabytes", ?*UnitInformationStorage, .{});
    }

    pub fn zettabytes(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "zettabytes", ?*UnitInformationStorage, .{});
    }

    pub fn exabytes(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "exabytes", ?*UnitInformationStorage, .{});
    }

    pub fn petabytes(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "petabytes", ?*UnitInformationStorage, .{});
    }

    pub fn terabytes(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "terabytes", ?*UnitInformationStorage, .{});
    }

    pub fn gigabytes(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "gigabytes", ?*UnitInformationStorage, .{});
    }

    pub fn megabytes(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "megabytes", ?*UnitInformationStorage, .{});
    }

    pub fn kilobytes(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "kilobytes", ?*UnitInformationStorage, .{});
    }

    pub fn yottabits(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "yottabits", ?*UnitInformationStorage, .{});
    }

    pub fn zettabits(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "zettabits", ?*UnitInformationStorage, .{});
    }

    pub fn exabits(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "exabits", ?*UnitInformationStorage, .{});
    }

    pub fn petabits(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "petabits", ?*UnitInformationStorage, .{});
    }

    pub fn terabits(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "terabits", ?*UnitInformationStorage, .{});
    }

    pub fn gigabits(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "gigabits", ?*UnitInformationStorage, .{});
    }

    pub fn megabits(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "megabits", ?*UnitInformationStorage, .{});
    }

    pub fn kilobits(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "kilobits", ?*UnitInformationStorage, .{});
    }

    pub fn yobibytes(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "yobibytes", ?*UnitInformationStorage, .{});
    }

    pub fn zebibytes(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "zebibytes", ?*UnitInformationStorage, .{});
    }

    pub fn exbibytes(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "exbibytes", ?*UnitInformationStorage, .{});
    }

    pub fn pebibytes(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "pebibytes", ?*UnitInformationStorage, .{});
    }

    pub fn tebibytes(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "tebibytes", ?*UnitInformationStorage, .{});
    }

    pub fn gibibytes(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "gibibytes", ?*UnitInformationStorage, .{});
    }

    pub fn mebibytes(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "mebibytes", ?*UnitInformationStorage, .{});
    }

    pub fn kibibytes(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "kibibytes", ?*UnitInformationStorage, .{});
    }

    pub fn yobibits(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "yobibits", ?*UnitInformationStorage, .{});
    }

    pub fn zebibits(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "zebibits", ?*UnitInformationStorage, .{});
    }

    pub fn exbibits(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "exbibits", ?*UnitInformationStorage, .{});
    }

    pub fn pebibits(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "pebibits", ?*UnitInformationStorage, .{});
    }

    pub fn tebibits(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "tebibits", ?*UnitInformationStorage, .{});
    }

    pub fn gibibits(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "gibibits", ?*UnitInformationStorage, .{});
    }

    pub fn mebibits(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "mebibits", ?*UnitInformationStorage, .{});
    }

    pub fn kibibits(self: *@This()) ?*UnitInformationStorage {
        return objc.msgSend(self, "kibibits", ?*UnitInformationStorage, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUnitLength?language=objc
pub const UnitLength = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUnitLength", @This(), Dimension, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn megameters(self: *@This()) ?*UnitLength {
        return objc.msgSend(self, "megameters", ?*UnitLength, .{});
    }

    pub fn kilometers(self: *@This()) ?*UnitLength {
        return objc.msgSend(self, "kilometers", ?*UnitLength, .{});
    }

    pub fn hectometers(self: *@This()) ?*UnitLength {
        return objc.msgSend(self, "hectometers", ?*UnitLength, .{});
    }

    pub fn decameters(self: *@This()) ?*UnitLength {
        return objc.msgSend(self, "decameters", ?*UnitLength, .{});
    }

    pub fn meters(self: *@This()) ?*UnitLength {
        return objc.msgSend(self, "meters", ?*UnitLength, .{});
    }

    pub fn decimeters(self: *@This()) ?*UnitLength {
        return objc.msgSend(self, "decimeters", ?*UnitLength, .{});
    }

    pub fn centimeters(self: *@This()) ?*UnitLength {
        return objc.msgSend(self, "centimeters", ?*UnitLength, .{});
    }

    pub fn millimeters(self: *@This()) ?*UnitLength {
        return objc.msgSend(self, "millimeters", ?*UnitLength, .{});
    }

    pub fn micrometers(self: *@This()) ?*UnitLength {
        return objc.msgSend(self, "micrometers", ?*UnitLength, .{});
    }

    pub fn nanometers(self: *@This()) ?*UnitLength {
        return objc.msgSend(self, "nanometers", ?*UnitLength, .{});
    }

    pub fn picometers(self: *@This()) ?*UnitLength {
        return objc.msgSend(self, "picometers", ?*UnitLength, .{});
    }

    pub fn inches(self: *@This()) ?*UnitLength {
        return objc.msgSend(self, "inches", ?*UnitLength, .{});
    }

    pub fn feet(self: *@This()) ?*UnitLength {
        return objc.msgSend(self, "feet", ?*UnitLength, .{});
    }

    pub fn yards(self: *@This()) ?*UnitLength {
        return objc.msgSend(self, "yards", ?*UnitLength, .{});
    }

    pub fn miles(self: *@This()) ?*UnitLength {
        return objc.msgSend(self, "miles", ?*UnitLength, .{});
    }

    pub fn scandinavianMiles(self: *@This()) ?*UnitLength {
        return objc.msgSend(self, "scandinavianMiles", ?*UnitLength, .{});
    }

    pub fn lightyears(self: *@This()) ?*UnitLength {
        return objc.msgSend(self, "lightyears", ?*UnitLength, .{});
    }

    pub fn nauticalMiles(self: *@This()) ?*UnitLength {
        return objc.msgSend(self, "nauticalMiles", ?*UnitLength, .{});
    }

    pub fn fathoms(self: *@This()) ?*UnitLength {
        return objc.msgSend(self, "fathoms", ?*UnitLength, .{});
    }

    pub fn furlongs(self: *@This()) ?*UnitLength {
        return objc.msgSend(self, "furlongs", ?*UnitLength, .{});
    }

    pub fn astronomicalUnits(self: *@This()) ?*UnitLength {
        return objc.msgSend(self, "astronomicalUnits", ?*UnitLength, .{});
    }

    pub fn parsecs(self: *@This()) ?*UnitLength {
        return objc.msgSend(self, "parsecs", ?*UnitLength, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUnitIlluminance?language=objc
pub const UnitIlluminance = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUnitIlluminance", @This(), Dimension, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn lux(self: *@This()) ?*UnitIlluminance {
        return objc.msgSend(self, "lux", ?*UnitIlluminance, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUnitMass?language=objc
pub const UnitMass = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUnitMass", @This(), Dimension, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn kilograms(self: *@This()) ?*UnitMass {
        return objc.msgSend(self, "kilograms", ?*UnitMass, .{});
    }

    pub fn grams(self: *@This()) ?*UnitMass {
        return objc.msgSend(self, "grams", ?*UnitMass, .{});
    }

    pub fn decigrams(self: *@This()) ?*UnitMass {
        return objc.msgSend(self, "decigrams", ?*UnitMass, .{});
    }

    pub fn centigrams(self: *@This()) ?*UnitMass {
        return objc.msgSend(self, "centigrams", ?*UnitMass, .{});
    }

    pub fn milligrams(self: *@This()) ?*UnitMass {
        return objc.msgSend(self, "milligrams", ?*UnitMass, .{});
    }

    pub fn micrograms(self: *@This()) ?*UnitMass {
        return objc.msgSend(self, "micrograms", ?*UnitMass, .{});
    }

    pub fn nanograms(self: *@This()) ?*UnitMass {
        return objc.msgSend(self, "nanograms", ?*UnitMass, .{});
    }

    pub fn picograms(self: *@This()) ?*UnitMass {
        return objc.msgSend(self, "picograms", ?*UnitMass, .{});
    }

    pub fn ounces(self: *@This()) ?*UnitMass {
        return objc.msgSend(self, "ounces", ?*UnitMass, .{});
    }

    pub fn poundsMass(self: *@This()) ?*UnitMass {
        return objc.msgSend(self, "poundsMass", ?*UnitMass, .{});
    }

    pub fn stones(self: *@This()) ?*UnitMass {
        return objc.msgSend(self, "stones", ?*UnitMass, .{});
    }

    pub fn metricTons(self: *@This()) ?*UnitMass {
        return objc.msgSend(self, "metricTons", ?*UnitMass, .{});
    }

    pub fn shortTons(self: *@This()) ?*UnitMass {
        return objc.msgSend(self, "shortTons", ?*UnitMass, .{});
    }

    pub fn carats(self: *@This()) ?*UnitMass {
        return objc.msgSend(self, "carats", ?*UnitMass, .{});
    }

    pub fn ouncesTroy(self: *@This()) ?*UnitMass {
        return objc.msgSend(self, "ouncesTroy", ?*UnitMass, .{});
    }

    pub fn slugs(self: *@This()) ?*UnitMass {
        return objc.msgSend(self, "slugs", ?*UnitMass, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUnitPower?language=objc
pub const UnitPower = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUnitPower", @This(), Dimension, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn terawatts(self: *@This()) ?*UnitPower {
        return objc.msgSend(self, "terawatts", ?*UnitPower, .{});
    }

    pub fn gigawatts(self: *@This()) ?*UnitPower {
        return objc.msgSend(self, "gigawatts", ?*UnitPower, .{});
    }

    pub fn megawatts(self: *@This()) ?*UnitPower {
        return objc.msgSend(self, "megawatts", ?*UnitPower, .{});
    }

    pub fn kilowatts(self: *@This()) ?*UnitPower {
        return objc.msgSend(self, "kilowatts", ?*UnitPower, .{});
    }

    pub fn watts(self: *@This()) ?*UnitPower {
        return objc.msgSend(self, "watts", ?*UnitPower, .{});
    }

    pub fn milliwatts(self: *@This()) ?*UnitPower {
        return objc.msgSend(self, "milliwatts", ?*UnitPower, .{});
    }

    pub fn microwatts(self: *@This()) ?*UnitPower {
        return objc.msgSend(self, "microwatts", ?*UnitPower, .{});
    }

    pub fn nanowatts(self: *@This()) ?*UnitPower {
        return objc.msgSend(self, "nanowatts", ?*UnitPower, .{});
    }

    pub fn picowatts(self: *@This()) ?*UnitPower {
        return objc.msgSend(self, "picowatts", ?*UnitPower, .{});
    }

    pub fn femtowatts(self: *@This()) ?*UnitPower {
        return objc.msgSend(self, "femtowatts", ?*UnitPower, .{});
    }

    pub fn horsepower(self: *@This()) ?*UnitPower {
        return objc.msgSend(self, "horsepower", ?*UnitPower, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUnitPressure?language=objc
pub const UnitPressure = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUnitPressure", @This(), Dimension, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn newtonsPerMetersSquared(self: *@This()) ?*UnitPressure {
        return objc.msgSend(self, "newtonsPerMetersSquared", ?*UnitPressure, .{});
    }

    pub fn gigapascals(self: *@This()) ?*UnitPressure {
        return objc.msgSend(self, "gigapascals", ?*UnitPressure, .{});
    }

    pub fn megapascals(self: *@This()) ?*UnitPressure {
        return objc.msgSend(self, "megapascals", ?*UnitPressure, .{});
    }

    pub fn kilopascals(self: *@This()) ?*UnitPressure {
        return objc.msgSend(self, "kilopascals", ?*UnitPressure, .{});
    }

    pub fn hectopascals(self: *@This()) ?*UnitPressure {
        return objc.msgSend(self, "hectopascals", ?*UnitPressure, .{});
    }

    pub fn inchesOfMercury(self: *@This()) ?*UnitPressure {
        return objc.msgSend(self, "inchesOfMercury", ?*UnitPressure, .{});
    }

    pub fn bars(self: *@This()) ?*UnitPressure {
        return objc.msgSend(self, "bars", ?*UnitPressure, .{});
    }

    pub fn millibars(self: *@This()) ?*UnitPressure {
        return objc.msgSend(self, "millibars", ?*UnitPressure, .{});
    }

    pub fn millimetersOfMercury(self: *@This()) ?*UnitPressure {
        return objc.msgSend(self, "millimetersOfMercury", ?*UnitPressure, .{});
    }

    pub fn poundsForcePerSquareInch(self: *@This()) ?*UnitPressure {
        return objc.msgSend(self, "poundsForcePerSquareInch", ?*UnitPressure, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUnitSpeed?language=objc
pub const UnitSpeed = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUnitSpeed", @This(), Dimension, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn metersPerSecond(self: *@This()) ?*UnitSpeed {
        return objc.msgSend(self, "metersPerSecond", ?*UnitSpeed, .{});
    }

    pub fn kilometersPerHour(self: *@This()) ?*UnitSpeed {
        return objc.msgSend(self, "kilometersPerHour", ?*UnitSpeed, .{});
    }

    pub fn milesPerHour(self: *@This()) ?*UnitSpeed {
        return objc.msgSend(self, "milesPerHour", ?*UnitSpeed, .{});
    }

    pub fn knots(self: *@This()) ?*UnitSpeed {
        return objc.msgSend(self, "knots", ?*UnitSpeed, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUnitTemperature?language=objc
pub const UnitTemperature = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUnitTemperature", @This(), Dimension, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn kelvin(self: *@This()) ?*UnitTemperature {
        return objc.msgSend(self, "kelvin", ?*UnitTemperature, .{});
    }

    pub fn celsius(self: *@This()) ?*UnitTemperature {
        return objc.msgSend(self, "celsius", ?*UnitTemperature, .{});
    }

    pub fn fahrenheit(self: *@This()) ?*UnitTemperature {
        return objc.msgSend(self, "fahrenheit", ?*UnitTemperature, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUnitVolume?language=objc
pub const UnitVolume = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUnitVolume", @This(), Dimension, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn megaliters(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "megaliters", ?*UnitVolume, .{});
    }

    pub fn kiloliters(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "kiloliters", ?*UnitVolume, .{});
    }

    pub fn liters(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "liters", ?*UnitVolume, .{});
    }

    pub fn deciliters(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "deciliters", ?*UnitVolume, .{});
    }

    pub fn centiliters(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "centiliters", ?*UnitVolume, .{});
    }

    pub fn milliliters(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "milliliters", ?*UnitVolume, .{});
    }

    pub fn cubicKilometers(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "cubicKilometers", ?*UnitVolume, .{});
    }

    pub fn cubicMeters(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "cubicMeters", ?*UnitVolume, .{});
    }

    pub fn cubicDecimeters(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "cubicDecimeters", ?*UnitVolume, .{});
    }

    pub fn cubicCentimeters(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "cubicCentimeters", ?*UnitVolume, .{});
    }

    pub fn cubicMillimeters(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "cubicMillimeters", ?*UnitVolume, .{});
    }

    pub fn cubicInches(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "cubicInches", ?*UnitVolume, .{});
    }

    pub fn cubicFeet(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "cubicFeet", ?*UnitVolume, .{});
    }

    pub fn cubicYards(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "cubicYards", ?*UnitVolume, .{});
    }

    pub fn cubicMiles(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "cubicMiles", ?*UnitVolume, .{});
    }

    pub fn acreFeet(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "acreFeet", ?*UnitVolume, .{});
    }

    pub fn bushels(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "bushels", ?*UnitVolume, .{});
    }

    pub fn teaspoons(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "teaspoons", ?*UnitVolume, .{});
    }

    pub fn tablespoons(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "tablespoons", ?*UnitVolume, .{});
    }

    pub fn fluidOunces(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "fluidOunces", ?*UnitVolume, .{});
    }

    pub fn cups(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "cups", ?*UnitVolume, .{});
    }

    pub fn pints(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "pints", ?*UnitVolume, .{});
    }

    pub fn quarts(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "quarts", ?*UnitVolume, .{});
    }

    pub fn gallons(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "gallons", ?*UnitVolume, .{});
    }

    pub fn imperialTeaspoons(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "imperialTeaspoons", ?*UnitVolume, .{});
    }

    pub fn imperialTablespoons(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "imperialTablespoons", ?*UnitVolume, .{});
    }

    pub fn imperialFluidOunces(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "imperialFluidOunces", ?*UnitVolume, .{});
    }

    pub fn imperialPints(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "imperialPints", ?*UnitVolume, .{});
    }

    pub fn imperialQuarts(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "imperialQuarts", ?*UnitVolume, .{});
    }

    pub fn imperialGallons(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "imperialGallons", ?*UnitVolume, .{});
    }

    pub fn metricCups(self: *@This()) ?*UnitVolume {
        return objc.msgSend(self, "metricCups", ?*UnitVolume, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSMeasurement?language=objc
pub const Measurement = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMeasurement", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithDoubleValueUnit(self: *@This(), doubleValue: f64, unit: void) *@This() {
        return objc.msgSend(self, "initWithDoubleValue:unit:", *@This(), .{doubleValue, unit});
    }

    pub fn canBeConvertedToUnit(self: *@This(), unit: ?*Unit) objc.BOOL {
        return objc.msgSend(self, "canBeConvertedToUnit:", objc.BOOL, .{unit});
    }

    pub fn measurementByConvertingToUnit(self: *@This(), unit: ?*Unit) ?*Measurement {
        return objc.msgSend(self, "measurementByConvertingToUnit:", ?*Measurement, .{unit});
    }

    pub fn measurementByAddingMeasurement(self: *@This(), measurement: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "measurementByAddingMeasurement:", ?*anyopaque, .{measurement});
    }

    pub fn measurementBySubtractingMeasurement(self: *@This(), measurement: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "measurementBySubtractingMeasurement:", ?*anyopaque, .{measurement});
    }

    pub fn unit(self: *@This()) void {
        return objc.msgSend(self, "unit", void, .{});
    }

    pub fn doubleValue(self: *@This()) f64 {
        return objc.msgSend(self, "doubleValue", f64, .{});
    }

};

pub const NumberFormatterBehavior = enum(objc.NSUInteger) {
    Default = 0,
    10_0 = 1000,
    10_4 = 1040,
};

/// https://developer.apple.com/documentation/Foundation/NSNumberFormatter?language=objc
pub const NumberFormatter = opaque {
    pub const InternalInfo = objc.ExternalClass("NSNumberFormatter", @This(), Formatter, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn setFormattingContext(self: *@This(), formattingContext: FormattingContext) void {
        return objc.msgSend(self, "setFormattingContext:", void, .{formattingContext});
    }

    pub fn formattingContext(self: *@This()) FormattingContext {
        return objc.msgSend(self, "formattingContext", FormattingContext, .{});
    }

    pub fn getObjectValueForStringRangeError(self: *@This(), obj: ?**objc.Id, string: ?*String, rangep: ?*Range, @"error": ?*?*Error, ) objc.BOOL {
        return objc.msgSend(self, "getObjectValue:forString:range:error:", objc.BOOL, .{obj, string, rangep, @"error", });
    }

    pub fn stringFromNumber(self: *@This(), number: ?*Number) ?*String {
        return objc.msgSend(self, "stringFromNumber:", ?*String, .{number});
    }

    pub fn numberFromString(self: *@This(), string: ?*String) ?*Number {
        return objc.msgSend(self, "numberFromString:", ?*Number, .{string});
    }

    pub fn localizedStringFromNumberNumberStyle(self: *@This(), num: ?*Number, nstyle: NumberFormatterStyle) ?*String {
        return objc.msgSend(self, "localizedStringFromNumber:numberStyle:", ?*String, .{num, nstyle});
    }

    pub fn defaultFormatterBehavior(self: *@This()) NumberFormatterBehavior {
        return objc.msgSend(self, "defaultFormatterBehavior", NumberFormatterBehavior, .{});
    }

    pub fn setDefaultFormatterBehavior(self: *@This(), behavior: NumberFormatterBehavior) void {
        return objc.msgSend(self, "setDefaultFormatterBehavior:", void, .{behavior});
    }

    pub fn minimumGroupingDigits(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "minimumGroupingDigits", objc.NSInteger, .{});
    }

    pub fn setMinimumGroupingDigits(self: *@This(), minimumGroupingDigits: objc.NSInteger) void {
        return objc.msgSend(self, "setMinimumGroupingDigits:", void, .{minimumGroupingDigits});
    }

    pub fn numberStyle(self: *@This()) NumberFormatterStyle {
        return objc.msgSend(self, "numberStyle", NumberFormatterStyle, .{});
    }

    pub fn setNumberStyle(self: *@This(), numberStyle: NumberFormatterStyle) void {
        return objc.msgSend(self, "setNumberStyle:", void, .{numberStyle});
    }

    pub fn locale(self: *@This()) ?*Locale {
        return objc.msgSend(self, "locale", ?*Locale, .{});
    }

    pub fn setLocale(self: *@This(), locale: ?*Locale) void {
        return objc.msgSend(self, "setLocale:", void, .{locale});
    }

    pub fn setGeneratesDecimalNumbers(self: *@This(), generatesDecimalNumbers: objc.BOOL) void {
        return objc.msgSend(self, "setGeneratesDecimalNumbers:", void, .{generatesDecimalNumbers});
    }

    pub fn generatesDecimalNumbers(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "generatesDecimalNumbers", objc.BOOL, .{});
    }

    pub fn setFormatterBehavior(self: *@This(), formatterBehavior: NumberFormatterBehavior) void {
        return objc.msgSend(self, "setFormatterBehavior:", void, .{formatterBehavior});
    }

    pub fn formatterBehavior(self: *@This()) NumberFormatterBehavior {
        return objc.msgSend(self, "formatterBehavior", NumberFormatterBehavior, .{});
    }

    pub fn setNegativeFormat(self: *@This(), negativeFormat: ?*String) void {
        return objc.msgSend(self, "setNegativeFormat:", void, .{negativeFormat});
    }

    pub fn negativeFormat(self: *@This()) ?*String {
        return objc.msgSend(self, "negativeFormat", ?*String, .{});
    }

    pub fn textAttributesForNegativeValues(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "textAttributesForNegativeValues", ?*anyopaque, .{});
    }

    pub fn setTextAttributesForNegativeValues(self: *@This(), textAttributesForNegativeValues: ?*anyopaque) void {
        return objc.msgSend(self, "setTextAttributesForNegativeValues:", void, .{textAttributesForNegativeValues});
    }

    pub fn positiveFormat(self: *@This()) ?*String {
        return objc.msgSend(self, "positiveFormat", ?*String, .{});
    }

    pub fn setPositiveFormat(self: *@This(), positiveFormat: ?*String) void {
        return objc.msgSend(self, "setPositiveFormat:", void, .{positiveFormat});
    }

    pub fn textAttributesForPositiveValues(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "textAttributesForPositiveValues", ?*anyopaque, .{});
    }

    pub fn setTextAttributesForPositiveValues(self: *@This(), textAttributesForPositiveValues: ?*anyopaque) void {
        return objc.msgSend(self, "setTextAttributesForPositiveValues:", void, .{textAttributesForPositiveValues});
    }

    pub fn setAllowsFloats(self: *@This(), allowsFloats: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsFloats:", void, .{allowsFloats});
    }

    pub fn allowsFloats(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsFloats", objc.BOOL, .{});
    }

    pub fn decimalSeparator(self: *@This()) ?*String {
        return objc.msgSend(self, "decimalSeparator", ?*String, .{});
    }

    pub fn setDecimalSeparator(self: *@This(), decimalSeparator: ?*String) void {
        return objc.msgSend(self, "setDecimalSeparator:", void, .{decimalSeparator});
    }

    pub fn alwaysShowsDecimalSeparator(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "alwaysShowsDecimalSeparator", objc.BOOL, .{});
    }

    pub fn setAlwaysShowsDecimalSeparator(self: *@This(), alwaysShowsDecimalSeparator: objc.BOOL) void {
        return objc.msgSend(self, "setAlwaysShowsDecimalSeparator:", void, .{alwaysShowsDecimalSeparator});
    }

    pub fn currencyDecimalSeparator(self: *@This()) ?*String {
        return objc.msgSend(self, "currencyDecimalSeparator", ?*String, .{});
    }

    pub fn setCurrencyDecimalSeparator(self: *@This(), currencyDecimalSeparator: ?*String) void {
        return objc.msgSend(self, "setCurrencyDecimalSeparator:", void, .{currencyDecimalSeparator});
    }

    pub fn setUsesGroupingSeparator(self: *@This(), usesGroupingSeparator: objc.BOOL) void {
        return objc.msgSend(self, "setUsesGroupingSeparator:", void, .{usesGroupingSeparator});
    }

    pub fn usesGroupingSeparator(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesGroupingSeparator", objc.BOOL, .{});
    }

    pub fn setGroupingSeparator(self: *@This(), groupingSeparator: ?*String) void {
        return objc.msgSend(self, "setGroupingSeparator:", void, .{groupingSeparator});
    }

    pub fn groupingSeparator(self: *@This()) ?*String {
        return objc.msgSend(self, "groupingSeparator", ?*String, .{});
    }

    pub fn setZeroSymbol(self: *@This(), zeroSymbol: ?*String) void {
        return objc.msgSend(self, "setZeroSymbol:", void, .{zeroSymbol});
    }

    pub fn zeroSymbol(self: *@This()) ?*String {
        return objc.msgSend(self, "zeroSymbol", ?*String, .{});
    }

    pub fn textAttributesForZero(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "textAttributesForZero", ?*anyopaque, .{});
    }

    pub fn setTextAttributesForZero(self: *@This(), textAttributesForZero: ?*anyopaque) void {
        return objc.msgSend(self, "setTextAttributesForZero:", void, .{textAttributesForZero});
    }

    pub fn setNilSymbol(self: *@This(), nilSymbol: ?*String) void {
        return objc.msgSend(self, "setNilSymbol:", void, .{nilSymbol});
    }

    pub fn nilSymbol(self: *@This()) ?*String {
        return objc.msgSend(self, "nilSymbol", ?*String, .{});
    }

    pub fn setTextAttributesForNil(self: *@This(), textAttributesForNil: ?*anyopaque) void {
        return objc.msgSend(self, "setTextAttributesForNil:", void, .{textAttributesForNil});
    }

    pub fn textAttributesForNil(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "textAttributesForNil", ?*anyopaque, .{});
    }

    pub fn setNotANumberSymbol(self: *@This(), notANumberSymbol: ?*String) void {
        return objc.msgSend(self, "setNotANumberSymbol:", void, .{notANumberSymbol});
    }

    pub fn notANumberSymbol(self: *@This()) ?*String {
        return objc.msgSend(self, "notANumberSymbol", ?*String, .{});
    }

    pub fn setTextAttributesForNotANumber(self: *@This(), textAttributesForNotANumber: ?*anyopaque) void {
        return objc.msgSend(self, "setTextAttributesForNotANumber:", void, .{textAttributesForNotANumber});
    }

    pub fn textAttributesForNotANumber(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "textAttributesForNotANumber", ?*anyopaque, .{});
    }

    pub fn setPositiveInfinitySymbol(self: *@This(), positiveInfinitySymbol: ?*String) void {
        return objc.msgSend(self, "setPositiveInfinitySymbol:", void, .{positiveInfinitySymbol});
    }

    pub fn positiveInfinitySymbol(self: *@This()) ?*String {
        return objc.msgSend(self, "positiveInfinitySymbol", ?*String, .{});
    }

    pub fn textAttributesForPositiveInfinity(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "textAttributesForPositiveInfinity", ?*anyopaque, .{});
    }

    pub fn setTextAttributesForPositiveInfinity(self: *@This(), textAttributesForPositiveInfinity: ?*anyopaque) void {
        return objc.msgSend(self, "setTextAttributesForPositiveInfinity:", void, .{textAttributesForPositiveInfinity});
    }

    pub fn setNegativeInfinitySymbol(self: *@This(), negativeInfinitySymbol: ?*String) void {
        return objc.msgSend(self, "setNegativeInfinitySymbol:", void, .{negativeInfinitySymbol});
    }

    pub fn negativeInfinitySymbol(self: *@This()) ?*String {
        return objc.msgSend(self, "negativeInfinitySymbol", ?*String, .{});
    }

    pub fn textAttributesForNegativeInfinity(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "textAttributesForNegativeInfinity", ?*anyopaque, .{});
    }

    pub fn setTextAttributesForNegativeInfinity(self: *@This(), textAttributesForNegativeInfinity: ?*anyopaque) void {
        return objc.msgSend(self, "setTextAttributesForNegativeInfinity:", void, .{textAttributesForNegativeInfinity});
    }

    pub fn positivePrefix(self: *@This()) ?*String {
        return objc.msgSend(self, "positivePrefix", ?*String, .{});
    }

    pub fn setPositivePrefix(self: *@This(), positivePrefix: ?*String) void {
        return objc.msgSend(self, "setPositivePrefix:", void, .{positivePrefix});
    }

    pub fn setPositiveSuffix(self: *@This(), positiveSuffix: ?*String) void {
        return objc.msgSend(self, "setPositiveSuffix:", void, .{positiveSuffix});
    }

    pub fn positiveSuffix(self: *@This()) ?*String {
        return objc.msgSend(self, "positiveSuffix", ?*String, .{});
    }

    pub fn setNegativePrefix(self: *@This(), negativePrefix: ?*String) void {
        return objc.msgSend(self, "setNegativePrefix:", void, .{negativePrefix});
    }

    pub fn negativePrefix(self: *@This()) ?*String {
        return objc.msgSend(self, "negativePrefix", ?*String, .{});
    }

    pub fn setNegativeSuffix(self: *@This(), negativeSuffix: ?*String) void {
        return objc.msgSend(self, "setNegativeSuffix:", void, .{negativeSuffix});
    }

    pub fn negativeSuffix(self: *@This()) ?*String {
        return objc.msgSend(self, "negativeSuffix", ?*String, .{});
    }

    pub fn setCurrencyCode(self: *@This(), currencyCode: ?*String) void {
        return objc.msgSend(self, "setCurrencyCode:", void, .{currencyCode});
    }

    pub fn currencyCode(self: *@This()) ?*String {
        return objc.msgSend(self, "currencyCode", ?*String, .{});
    }

    pub fn setCurrencySymbol(self: *@This(), currencySymbol: ?*String) void {
        return objc.msgSend(self, "setCurrencySymbol:", void, .{currencySymbol});
    }

    pub fn currencySymbol(self: *@This()) ?*String {
        return objc.msgSend(self, "currencySymbol", ?*String, .{});
    }

    pub fn setInternationalCurrencySymbol(self: *@This(), internationalCurrencySymbol: ?*String) void {
        return objc.msgSend(self, "setInternationalCurrencySymbol:", void, .{internationalCurrencySymbol});
    }

    pub fn internationalCurrencySymbol(self: *@This()) ?*String {
        return objc.msgSend(self, "internationalCurrencySymbol", ?*String, .{});
    }

    pub fn percentSymbol(self: *@This()) ?*String {
        return objc.msgSend(self, "percentSymbol", ?*String, .{});
    }

    pub fn setPercentSymbol(self: *@This(), percentSymbol: ?*String) void {
        return objc.msgSend(self, "setPercentSymbol:", void, .{percentSymbol});
    }

    pub fn perMillSymbol(self: *@This()) ?*String {
        return objc.msgSend(self, "perMillSymbol", ?*String, .{});
    }

    pub fn setPerMillSymbol(self: *@This(), perMillSymbol: ?*String) void {
        return objc.msgSend(self, "setPerMillSymbol:", void, .{perMillSymbol});
    }

    pub fn minusSign(self: *@This()) ?*String {
        return objc.msgSend(self, "minusSign", ?*String, .{});
    }

    pub fn setMinusSign(self: *@This(), minusSign: ?*String) void {
        return objc.msgSend(self, "setMinusSign:", void, .{minusSign});
    }

    pub fn setPlusSign(self: *@This(), plusSign: ?*String) void {
        return objc.msgSend(self, "setPlusSign:", void, .{plusSign});
    }

    pub fn plusSign(self: *@This()) ?*String {
        return objc.msgSend(self, "plusSign", ?*String, .{});
    }

    pub fn exponentSymbol(self: *@This()) ?*String {
        return objc.msgSend(self, "exponentSymbol", ?*String, .{});
    }

    pub fn setExponentSymbol(self: *@This(), exponentSymbol: ?*String) void {
        return objc.msgSend(self, "setExponentSymbol:", void, .{exponentSymbol});
    }

    pub fn groupingSize(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "groupingSize", objc.NSUInteger, .{});
    }

    pub fn setGroupingSize(self: *@This(), groupingSize: objc.NSUInteger) void {
        return objc.msgSend(self, "setGroupingSize:", void, .{groupingSize});
    }

    pub fn secondaryGroupingSize(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "secondaryGroupingSize", objc.NSUInteger, .{});
    }

    pub fn setSecondaryGroupingSize(self: *@This(), secondaryGroupingSize: objc.NSUInteger) void {
        return objc.msgSend(self, "setSecondaryGroupingSize:", void, .{secondaryGroupingSize});
    }

    pub fn multiplier(self: *@This()) ?*Number {
        return objc.msgSend(self, "multiplier", ?*Number, .{});
    }

    pub fn setMultiplier(self: *@This(), multiplier: ?*Number) void {
        return objc.msgSend(self, "setMultiplier:", void, .{multiplier});
    }

    pub fn formatWidth(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "formatWidth", objc.NSUInteger, .{});
    }

    pub fn setFormatWidth(self: *@This(), formatWidth: objc.NSUInteger) void {
        return objc.msgSend(self, "setFormatWidth:", void, .{formatWidth});
    }

    pub fn paddingCharacter(self: *@This()) ?*String {
        return objc.msgSend(self, "paddingCharacter", ?*String, .{});
    }

    pub fn setPaddingCharacter(self: *@This(), paddingCharacter: ?*String) void {
        return objc.msgSend(self, "setPaddingCharacter:", void, .{paddingCharacter});
    }

    pub fn setPaddingPosition(self: *@This(), paddingPosition: NumberFormatterPadPosition) void {
        return objc.msgSend(self, "setPaddingPosition:", void, .{paddingPosition});
    }

    pub fn paddingPosition(self: *@This()) NumberFormatterPadPosition {
        return objc.msgSend(self, "paddingPosition", NumberFormatterPadPosition, .{});
    }

    pub fn setRoundingMode(self: *@This(), roundingMode: NumberFormatterRoundingMode) void {
        return objc.msgSend(self, "setRoundingMode:", void, .{roundingMode});
    }

    pub fn roundingMode(self: *@This()) NumberFormatterRoundingMode {
        return objc.msgSend(self, "roundingMode", NumberFormatterRoundingMode, .{});
    }

    pub fn setRoundingIncrement(self: *@This(), roundingIncrement: ?*Number) void {
        return objc.msgSend(self, "setRoundingIncrement:", void, .{roundingIncrement});
    }

    pub fn roundingIncrement(self: *@This()) ?*Number {
        return objc.msgSend(self, "roundingIncrement", ?*Number, .{});
    }

    pub fn minimumIntegerDigits(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "minimumIntegerDigits", objc.NSUInteger, .{});
    }

    pub fn setMinimumIntegerDigits(self: *@This(), minimumIntegerDigits: objc.NSUInteger) void {
        return objc.msgSend(self, "setMinimumIntegerDigits:", void, .{minimumIntegerDigits});
    }

    pub fn setMaximumIntegerDigits(self: *@This(), maximumIntegerDigits: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaximumIntegerDigits:", void, .{maximumIntegerDigits});
    }

    pub fn maximumIntegerDigits(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maximumIntegerDigits", objc.NSUInteger, .{});
    }

    pub fn setMinimumFractionDigits(self: *@This(), minimumFractionDigits: objc.NSUInteger) void {
        return objc.msgSend(self, "setMinimumFractionDigits:", void, .{minimumFractionDigits});
    }

    pub fn minimumFractionDigits(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "minimumFractionDigits", objc.NSUInteger, .{});
    }

    pub fn maximumFractionDigits(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maximumFractionDigits", objc.NSUInteger, .{});
    }

    pub fn setMaximumFractionDigits(self: *@This(), maximumFractionDigits: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaximumFractionDigits:", void, .{maximumFractionDigits});
    }

    pub fn setMinimum(self: *@This(), minimum: ?*Number) void {
        return objc.msgSend(self, "setMinimum:", void, .{minimum});
    }

    pub fn minimum(self: *@This()) ?*Number {
        return objc.msgSend(self, "minimum", ?*Number, .{});
    }

    pub fn setMaximum(self: *@This(), maximum: ?*Number) void {
        return objc.msgSend(self, "setMaximum:", void, .{maximum});
    }

    pub fn maximum(self: *@This()) ?*Number {
        return objc.msgSend(self, "maximum", ?*Number, .{});
    }

    pub fn setCurrencyGroupingSeparator(self: *@This(), currencyGroupingSeparator: ?*String) void {
        return objc.msgSend(self, "setCurrencyGroupingSeparator:", void, .{currencyGroupingSeparator});
    }

    pub fn currencyGroupingSeparator(self: *@This()) ?*String {
        return objc.msgSend(self, "currencyGroupingSeparator", ?*String, .{});
    }

    pub fn isLenient(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isLenient", objc.BOOL, .{});
    }

    pub fn setLenient(self: *@This(), lenient: objc.BOOL) void {
        return objc.msgSend(self, "setLenient:", void, .{lenient});
    }

    pub fn usesSignificantDigits(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesSignificantDigits", objc.BOOL, .{});
    }

    pub fn setUsesSignificantDigits(self: *@This(), usesSignificantDigits: objc.BOOL) void {
        return objc.msgSend(self, "setUsesSignificantDigits:", void, .{usesSignificantDigits});
    }

    pub fn minimumSignificantDigits(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "minimumSignificantDigits", objc.NSUInteger, .{});
    }

    pub fn setMinimumSignificantDigits(self: *@This(), minimumSignificantDigits: objc.NSUInteger) void {
        return objc.msgSend(self, "setMinimumSignificantDigits:", void, .{minimumSignificantDigits});
    }

    pub fn setMaximumSignificantDigits(self: *@This(), maximumSignificantDigits: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaximumSignificantDigits:", void, .{maximumSignificantDigits});
    }

    pub fn maximumSignificantDigits(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maximumSignificantDigits", objc.NSUInteger, .{});
    }

    pub fn isPartialStringValidationEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isPartialStringValidationEnabled", objc.BOOL, .{});
    }

    pub fn setPartialStringValidationEnabled(self: *@This(), partialStringValidationEnabled: objc.BOOL) void {
        return objc.msgSend(self, "setPartialStringValidationEnabled:", void, .{partialStringValidationEnabled});
    }

};

pub const NumberFormatterStyle = NumberFormatterStyle;

pub const NumberFormatterStyle = enum(objc.NSUInteger) {
    NoStyle = 0,
    DecimalStyle = 1,
    CurrencyStyle = 2,
    PercentStyle = 3,
    ScientificStyle = 4,
    SpellOutStyle = 5,
    OrdinalStyle = 6,
    CurrencyISOCodeStyle = 8,
    CurrencyPluralStyle = 9,
    CurrencyAccountingStyle = 10,
};

pub const NumberFormatterPadPosition = NumberFormatterPadPosition;

pub const NumberFormatterPadPosition = enum(objc.NSUInteger) {
    BeforePrefix = 0,
    AfterPrefix = 1,
    BeforeSuffix = 2,
    AfterSuffix = 3,
};

pub const NumberFormatterRoundingMode = NumberFormatterRoundingMode;

pub const NumberFormatterRoundingMode = enum(objc.NSUInteger) {
    Ceiling = 0,
    Floor = 1,
    Down = 2,
    Up = 3,
    HalfEven = 4,
    HalfDown = 5,
    HalfUp = 6,
};

pub const LocaleKey = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSLocale?language=objc
pub const Locale = opaque {
    pub const InternalInfo = objc.ExternalClass("NSLocale", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn objectForKey(self: *@This(), key: LocaleKey) *objc.Id {
        return objc.msgSend(self, "objectForKey:", *objc.Id, .{key});
    }

    pub fn displayNameForKeyValue(self: *@This(), key: LocaleKey, value: *objc.Id) ?*String {
        return objc.msgSend(self, "displayNameForKey:value:", ?*String, .{key, value});
    }

    pub fn initWithLocaleIdentifier(self: *@This(), string: ?*String) *@This() {
        return objc.msgSend(self, "initWithLocaleIdentifier:", *@This(), .{string});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

};

pub const LocaleLanguageDirection = enum(objc.NSUInteger) {
    Unknown = 0,
    LeftToRight = 1,
    RightToLeft = 2,
    TopToBottom = 3,
    BottomToTop = 4,
};

pub const MeasurementFormatterUnitOptions = enum(objc.NSUInteger) {
    ProvidedUnit = 1,
    NaturalScale = 2,
    TemperatureWithoutUnit = 4,
};

/// https://developer.apple.com/documentation/Foundation/NSMeasurementFormatter?language=objc
pub const MeasurementFormatter = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMeasurementFormatter", @This(), Formatter, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn stringFromMeasurement(self: *@This(), measurement: ?*Measurement) ?*String {
        return objc.msgSend(self, "stringFromMeasurement:", ?*String, .{measurement});
    }

    pub fn stringFromUnit(self: *@This(), unit: ?*Unit) ?*String {
        return objc.msgSend(self, "stringFromUnit:", ?*String, .{unit});
    }

    pub fn unitOptions(self: *@This()) MeasurementFormatterUnitOptions {
        return objc.msgSend(self, "unitOptions", MeasurementFormatterUnitOptions, .{});
    }

    pub fn setUnitOptions(self: *@This(), unitOptions: MeasurementFormatterUnitOptions) void {
        return objc.msgSend(self, "setUnitOptions:", void, .{unitOptions});
    }

    pub fn unitStyle(self: *@This()) FormattingUnitStyle {
        return objc.msgSend(self, "unitStyle", FormattingUnitStyle, .{});
    }

    pub fn setUnitStyle(self: *@This(), unitStyle: FormattingUnitStyle) void {
        return objc.msgSend(self, "setUnitStyle:", void, .{unitStyle});
    }

    pub fn locale(self: *@This()) ?*Locale {
        return objc.msgSend(self, "locale", ?*Locale, .{});
    }

    pub fn setLocale(self: *@This(), locale: ?*Locale) void {
        return objc.msgSend(self, "setLocale:", void, .{locale});
    }

    pub fn numberFormatter(self: *@This()) ?*NumberFormatter {
        return objc.msgSend(self, "numberFormatter", ?*NumberFormatter, .{});
    }

    pub fn setNumberFormatter(self: *@This(), numberFormatter: ?*NumberFormatter) void {
        return objc.msgSend(self, "setNumberFormatter:", void, .{numberFormatter});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSPersonNameComponents?language=objc
pub const PersonNameComponents = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPersonNameComponents", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn namePrefix(self: *@This()) ?*String {
        return objc.msgSend(self, "namePrefix", ?*String, .{});
    }

    pub fn setNamePrefix(self: *@This(), namePrefix: ?*String) void {
        return objc.msgSend(self, "setNamePrefix:", void, .{namePrefix});
    }

    pub fn givenName(self: *@This()) ?*String {
        return objc.msgSend(self, "givenName", ?*String, .{});
    }

    pub fn setGivenName(self: *@This(), givenName: ?*String) void {
        return objc.msgSend(self, "setGivenName:", void, .{givenName});
    }

    pub fn middleName(self: *@This()) ?*String {
        return objc.msgSend(self, "middleName", ?*String, .{});
    }

    pub fn setMiddleName(self: *@This(), middleName: ?*String) void {
        return objc.msgSend(self, "setMiddleName:", void, .{middleName});
    }

    pub fn familyName(self: *@This()) ?*String {
        return objc.msgSend(self, "familyName", ?*String, .{});
    }

    pub fn setFamilyName(self: *@This(), familyName: ?*String) void {
        return objc.msgSend(self, "setFamilyName:", void, .{familyName});
    }

    pub fn nameSuffix(self: *@This()) ?*String {
        return objc.msgSend(self, "nameSuffix", ?*String, .{});
    }

    pub fn setNameSuffix(self: *@This(), nameSuffix: ?*String) void {
        return objc.msgSend(self, "setNameSuffix:", void, .{nameSuffix});
    }

    pub fn nickname(self: *@This()) ?*String {
        return objc.msgSend(self, "nickname", ?*String, .{});
    }

    pub fn setNickname(self: *@This(), nickname: ?*String) void {
        return objc.msgSend(self, "setNickname:", void, .{nickname});
    }

    pub fn phoneticRepresentation(self: *@This()) ?*PersonNameComponents {
        return objc.msgSend(self, "phoneticRepresentation", ?*PersonNameComponents, .{});
    }

    pub fn setPhoneticRepresentation(self: *@This(), phoneticRepresentation: ?*PersonNameComponents) void {
        return objc.msgSend(self, "setPhoneticRepresentation:", void, .{phoneticRepresentation});
    }

};

pub const PersonNameComponentsFormatterStyle = enum(objc.NSInteger) {
    Default = 0,
    Short = 1,
    Medium = 2,
    Long = 3,
    Abbreviated = 4,
};

pub const PersonNameComponentsFormatterOptions = enum(objc.NSUInteger) {
    Phonetic = 2,
};

/// https://developer.apple.com/documentation/Foundation/NSPersonNameComponentsFormatter?language=objc
pub const PersonNameComponentsFormatter = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPersonNameComponentsFormatter", @This(), Formatter, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn localizedStringFromPersonNameComponentsStyleOptions(self: *@This(), components: ?*PersonNameComponents, nameFormatStyle: PersonNameComponentsFormatterStyle, nameOptions: PersonNameComponentsFormatterOptions) ?*String {
        return objc.msgSend(self, "localizedStringFromPersonNameComponents:style:options:", ?*String, .{components, nameFormatStyle, nameOptions});
    }

    pub fn stringFromPersonNameComponents(self: *@This(), components: ?*PersonNameComponents) ?*String {
        return objc.msgSend(self, "stringFromPersonNameComponents:", ?*String, .{components});
    }

    pub fn annotatedStringFromPersonNameComponents(self: *@This(), components: ?*PersonNameComponents) ?*AttributedString {
        return objc.msgSend(self, "annotatedStringFromPersonNameComponents:", ?*AttributedString, .{components});
    }

    pub fn personNameComponentsFromString(self: *@This(), string: ?*String) ?*PersonNameComponents {
        return objc.msgSend(self, "personNameComponentsFromString:", ?*PersonNameComponents, .{string});
    }

    pub fn getObjectValueForStringErrorDescription(self: *@This(), obj: ?**objc.Id, string: ?*String, @"error": ?*?*String) objc.BOOL {
        return objc.msgSend(self, "getObjectValue:forString:errorDescription:", objc.BOOL, .{obj, string, @"error"});
    }

    pub fn style(self: *@This()) PersonNameComponentsFormatterStyle {
        return objc.msgSend(self, "style", PersonNameComponentsFormatterStyle, .{});
    }

    pub fn setStyle(self: *@This(), style: PersonNameComponentsFormatterStyle) void {
        return objc.msgSend(self, "setStyle:", void, .{style});
    }

    pub fn isPhonetic(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isPhonetic", objc.BOOL, .{});
    }

    pub fn setPhonetic(self: *@This(), phonetic: objc.BOOL) void {
        return objc.msgSend(self, "setPhonetic:", void, .{phonetic});
    }

    pub fn locale(self: *@This()) ?*Locale {
        return objc.msgSend(self, "locale", ?*Locale, .{});
    }

    pub fn setLocale(self: *@This(), locale: ?*Locale) void {
        return objc.msgSend(self, "setLocale:", void, .{locale});
    }

};

pub const RelativeDateTimeFormatterStyle = enum(objc.NSInteger) {
    Numeric = 0,
    Named = 1,
};

pub const RelativeDateTimeFormatterUnitsStyle = enum(objc.NSInteger) {
    Full = 0,
    SpellOut = 1,
    Short = 2,
    Abbreviated = 3,
};

/// https://developer.apple.com/documentation/Foundation/NSRelativeDateTimeFormatter?language=objc
pub const RelativeDateTimeFormatter = opaque {
    pub const InternalInfo = objc.ExternalClass("NSRelativeDateTimeFormatter", @This(), Formatter, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn localizedStringFromDateComponents(self: *@This(), dateComponents: ?*DateComponents) ?*String {
        return objc.msgSend(self, "localizedStringFromDateComponents:", ?*String, .{dateComponents});
    }

    pub fn localizedStringFromTimeInterval(self: *@This(), timeInterval: TimeInterval) ?*String {
        return objc.msgSend(self, "localizedStringFromTimeInterval:", ?*String, .{timeInterval});
    }

    pub fn localizedStringForDateRelativeToDate(self: *@This(), date: ?*Date, referenceDate: ?*Date) ?*String {
        return objc.msgSend(self, "localizedStringForDate:relativeToDate:", ?*String, .{date, referenceDate});
    }

    pub fn stringForObjectValue(self: *@This(), obj: *objc.Id) ?*String {
        return objc.msgSend(self, "stringForObjectValue:", ?*String, .{obj});
    }

    pub fn dateTimeStyle(self: *@This()) RelativeDateTimeFormatterStyle {
        return objc.msgSend(self, "dateTimeStyle", RelativeDateTimeFormatterStyle, .{});
    }

    pub fn setDateTimeStyle(self: *@This(), dateTimeStyle: RelativeDateTimeFormatterStyle) void {
        return objc.msgSend(self, "setDateTimeStyle:", void, .{dateTimeStyle});
    }

    pub fn unitsStyle(self: *@This()) RelativeDateTimeFormatterUnitsStyle {
        return objc.msgSend(self, "unitsStyle", RelativeDateTimeFormatterUnitsStyle, .{});
    }

    pub fn setUnitsStyle(self: *@This(), unitsStyle: RelativeDateTimeFormatterUnitsStyle) void {
        return objc.msgSend(self, "setUnitsStyle:", void, .{unitsStyle});
    }

    pub fn formattingContext(self: *@This()) FormattingContext {
        return objc.msgSend(self, "formattingContext", FormattingContext, .{});
    }

    pub fn setFormattingContext(self: *@This(), formattingContext: FormattingContext) void {
        return objc.msgSend(self, "setFormattingContext:", void, .{formattingContext});
    }

    pub fn calendar(self: *@This()) ?*Calendar {
        return objc.msgSend(self, "calendar", ?*Calendar, .{});
    }

    pub fn setCalendar(self: *@This(), calendar: ?*Calendar) void {
        return objc.msgSend(self, "setCalendar:", void, .{calendar});
    }

    pub fn locale(self: *@This()) ?*Locale {
        return objc.msgSend(self, "locale", ?*Locale, .{});
    }

    pub fn setLocale(self: *@This(), locale: ?*Locale) void {
        return objc.msgSend(self, "setLocale:", void, .{locale});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSListFormatter?language=objc
pub const ListFormatter = opaque {
    pub const InternalInfo = objc.ExternalClass("NSListFormatter", @This(), Formatter, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn localizedStringByJoiningStrings(self: *@This(), strings: ?*anyopaque) ?*String {
        return objc.msgSend(self, "localizedStringByJoiningStrings:", ?*String, .{strings});
    }

    pub fn stringFromItems(self: *@This(), items: ?*Array) ?*String {
        return objc.msgSend(self, "stringFromItems:", ?*String, .{items});
    }

    pub fn stringForObjectValue(self: *@This(), obj: *objc.Id) ?*String {
        return objc.msgSend(self, "stringForObjectValue:", ?*String, .{obj});
    }

    pub fn locale(self: *@This()) ?*Locale {
        return objc.msgSend(self, "locale", ?*Locale, .{});
    }

    pub fn setLocale(self: *@This(), locale: ?*Locale) void {
        return objc.msgSend(self, "setLocale:", void, .{locale});
    }

    pub fn itemFormatter(self: *@This()) ?*Formatter {
        return objc.msgSend(self, "itemFormatter", ?*Formatter, .{});
    }

    pub fn setItemFormatter(self: *@This(), itemFormatter: ?*Formatter) void {
        return objc.msgSend(self, "setItemFormatter:", void, .{itemFormatter});
    }

};

pub const RoundingMode = enum(objc.NSUInteger) {
    Plain = 0,
    Down = 1,
    Up = 2,
    Bankers = 3,
};

pub const CalculationError = enum(objc.NSUInteger) {
    NoError = 0,
    LossOfPrecision = 1,
    Underflow = 2,
    Overflow = 3,
    DivideByZero = 4,
};

pub const Decimal = extern struct {
    _exponent: i32,
    _length: u32,
    _isNegative: u32,
    _isCompact: u32,
    _reserved: u32,
    _mantissa: [8] u16,
};

pub extern "Foundation" fn DecimalIsNotANumber(dcm: ?*Decimal) callconv(.C) objc.BOOL;

pub extern "Foundation" fn DecimalCopy(destination: ?*Decimal, source: ?*Decimal) callconv(.C) void;

pub extern "Foundation" fn DecimalCompact(number: ?*Decimal) callconv(.C) void;

pub extern "Foundation" fn DecimalCompare(leftOperand: ?*Decimal, rightOperand: ?*Decimal) callconv(.C) ComparisonResult;

pub extern "Foundation" fn DecimalRound(result: ?*Decimal, number: ?*Decimal, scale: objc.NSInteger, roundingMode: RoundingMode, ) callconv(.C) void;

pub extern "Foundation" fn DecimalNormalize(number1: ?*Decimal, number2: ?*Decimal, roundingMode: RoundingMode) callconv(.C) CalculationError;

pub extern "Foundation" fn DecimalAdd(result: ?*Decimal, leftOperand: ?*Decimal, rightOperand: ?*Decimal, roundingMode: RoundingMode, ) callconv(.C) CalculationError;

pub extern "Foundation" fn DecimalSubtract(result: ?*Decimal, leftOperand: ?*Decimal, rightOperand: ?*Decimal, roundingMode: RoundingMode, ) callconv(.C) CalculationError;

pub extern "Foundation" fn DecimalMultiply(result: ?*Decimal, leftOperand: ?*Decimal, rightOperand: ?*Decimal, roundingMode: RoundingMode, ) callconv(.C) CalculationError;

pub extern "Foundation" fn DecimalDivide(result: ?*Decimal, leftOperand: ?*Decimal, rightOperand: ?*Decimal, roundingMode: RoundingMode, ) callconv(.C) CalculationError;

pub extern "Foundation" fn DecimalPower(result: ?*Decimal, number: ?*Decimal, power: objc.NSUInteger, roundingMode: RoundingMode, ) callconv(.C) CalculationError;

pub extern "Foundation" fn DecimalMultiplyByPowerOf10(result: ?*Decimal, number: ?*Decimal, power: i16, roundingMode: RoundingMode, ) callconv(.C) CalculationError;

pub extern "Foundation" fn DecimalString(dcm: ?*Decimal, locale: *objc.Id) callconv(.C) ?*String;

/// https://developer.apple.com/documentation/Foundation/NSScanner?language=objc
pub const Scanner = opaque {
    pub const InternalInfo = objc.ExternalClass("NSScanner", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithString(self: *@This(), string: ?*String) *@This() {
        return objc.msgSend(self, "initWithString:", *@This(), .{string});
    }

    pub fn string(self: *@This()) ?*String {
        return objc.msgSend(self, "string", ?*String, .{});
    }

    pub fn scanLocation(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "scanLocation", objc.NSUInteger, .{});
    }

    pub fn setScanLocation(self: *@This(), scanLocation: objc.NSUInteger) void {
        return objc.msgSend(self, "setScanLocation:", void, .{scanLocation});
    }

    pub fn charactersToBeSkipped(self: *@This()) ?*CharacterSet {
        return objc.msgSend(self, "charactersToBeSkipped", ?*CharacterSet, .{});
    }

    pub fn setCharactersToBeSkipped(self: *@This(), charactersToBeSkipped: ?*CharacterSet) void {
        return objc.msgSend(self, "setCharactersToBeSkipped:", void, .{charactersToBeSkipped});
    }

    pub fn caseSensitive(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "caseSensitive", objc.BOOL, .{});
    }

    pub fn setCaseSensitive(self: *@This(), caseSensitive: objc.BOOL) void {
        return objc.msgSend(self, "setCaseSensitive:", void, .{caseSensitive});
    }

    pub fn locale(self: *@This()) *objc.Id {
        return objc.msgSend(self, "locale", *objc.Id, .{});
    }

    pub fn setLocale(self: *@This(), locale: *objc.Id) void {
        return objc.msgSend(self, "setLocale:", void, .{locale});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSException?language=objc
pub const Exception = opaque {
    pub const InternalInfo = objc.ExternalClass("NSException", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn exceptionWithNameReasonUserInfo(self: *@This(), name: ExceptionName, reason: ?*String, userInfo: ?*Dictionary) ?*Exception {
        return objc.msgSend(self, "exceptionWithName:reason:userInfo:", ?*Exception, .{name, reason, userInfo});
    }

    pub fn initWithNameReasonUserInfo(self: *@This(), aName: ExceptionName, aReason: ?*String, aUserInfo: ?*Dictionary) *@This() {
        return objc.msgSend(self, "initWithName:reason:userInfo:", *@This(), .{aName, aReason, aUserInfo});
    }

    pub fn raise(self: *@This()) void {
        return objc.msgSend(self, "raise", void, .{});
    }

    pub fn name(self: *@This()) ExceptionName {
        return objc.msgSend(self, "name", ExceptionName, .{});
    }

    pub fn reason(self: *@This()) ?*String {
        return objc.msgSend(self, "reason", ?*String, .{});
    }

    pub fn userInfo(self: *@This()) ?*Dictionary {
        return objc.msgSend(self, "userInfo", ?*Dictionary, .{});
    }

    pub fn callStackReturnAddresses(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "callStackReturnAddresses", ?*anyopaque, .{});
    }

    pub fn callStackSymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "callStackSymbols", ?*anyopaque, .{});
    }

};

pub const UncaughtExceptionHandler = fn(?*Exception) callconv(.C) void;

pub extern "Foundation" fn GetUncaughtExceptionHandler() callconv(.C) ?*UncaughtExceptionHandler;

pub extern "Foundation" fn SetUncaughtExceptionHandler(?*UncaughtExceptionHandler) callconv(.C) void;

/// https://developer.apple.com/documentation/Foundation/NSAssertionHandler?language=objc
pub const AssertionHandler = opaque {
    pub const InternalInfo = objc.ExternalClass("NSAssertionHandler", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn handleFailureInMethodObjectFileLineNumberDescription(self: *@This(), selector: *objc.SEL, object: *objc.Id, fileName: ?*String, line: objc.NSInteger, format: ?*String, ) void {
        return objc.msgSend(self, "handleFailureInMethod:object:file:lineNumber:description:", void, .{selector, object, fileName, line, format, });
    }

    pub fn handleFailureInFunctionFileLineNumberDescription(self: *@This(), functionName: ?*String, fileName: ?*String, line: objc.NSInteger, format: ?*String, ) void {
        return objc.msgSend(self, "handleFailureInFunction:file:lineNumber:description:", void, .{functionName, fileName, line, format, });
    }

    pub fn currentHandler(self: *@This()) ?*AssertionHandler {
        return objc.msgSend(self, "currentHandler", ?*AssertionHandler, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSDecimalNumberBehaviors?language=objc
pub const DecimalNumberBehaviors = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn roundingMode(self: *@This()) RoundingMode {
        return objc.msgSend(self, "roundingMode", RoundingMode, .{});
    }

    pub fn scale(self: *@This()) i16 {
        return objc.msgSend(self, "scale", i16, .{});
    }

    pub fn exceptionDuringOperationErrorLeftOperandRightOperand(self: *@This(), operation: *objc.SEL, @"error": CalculationError, leftOperand: ?*DecimalNumber, rightOperand: ?*DecimalNumber, ) ?*DecimalNumber {
        return objc.msgSend(self, "exceptionDuringOperation:error:leftOperand:rightOperand:", ?*DecimalNumber, .{operation, @"error", leftOperand, rightOperand, });
    }

};

/// https://developer.apple.com/documentation/Foundation/NSDecimalNumber?language=objc
pub const DecimalNumber = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDecimalNumber", @This(), Number, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithMantissaExponentIsNegative(self: *@This(), mantissa: u64, exponent: i16, flag: objc.BOOL) *@This() {
        return objc.msgSend(self, "initWithMantissa:exponent:isNegative:", *@This(), .{mantissa, exponent, flag});
    }

    pub fn initWithDecimal(self: *@This(), dcm: Decimal) *@This() {
        return objc.msgSend(self, "initWithDecimal:", *@This(), .{dcm});
    }

    pub fn initWithString(self: *@This(), numberValue: ?*String) *@This() {
        return objc.msgSend(self, "initWithString:", *@This(), .{numberValue});
    }

    pub fn initWithStringLocale(self: *@This(), numberValue: ?*String, locale: *objc.Id) *@This() {
        return objc.msgSend(self, "initWithString:locale:", *@This(), .{numberValue, locale});
    }

    pub fn descriptionWithLocale(self: *@This(), locale: *objc.Id) ?*String {
        return objc.msgSend(self, "descriptionWithLocale:", ?*String, .{locale});
    }

    pub fn decimalNumberWithMantissaExponentIsNegative(self: *@This(), mantissa: u64, exponent: i16, flag: objc.BOOL) ?*DecimalNumber {
        return objc.msgSend(self, "decimalNumberWithMantissa:exponent:isNegative:", ?*DecimalNumber, .{mantissa, exponent, flag});
    }

    pub fn decimalNumberWithDecimal(self: *@This(), dcm: Decimal) ?*DecimalNumber {
        return objc.msgSend(self, "decimalNumberWithDecimal:", ?*DecimalNumber, .{dcm});
    }

    pub fn decimalNumberWithString(self: *@This(), numberValue: ?*String) ?*DecimalNumber {
        return objc.msgSend(self, "decimalNumberWithString:", ?*DecimalNumber, .{numberValue});
    }

    pub fn decimalNumberWithStringLocale(self: *@This(), numberValue: ?*String, locale: *objc.Id) ?*DecimalNumber {
        return objc.msgSend(self, "decimalNumberWithString:locale:", ?*DecimalNumber, .{numberValue, locale});
    }

    pub fn decimalNumberByAdding(self: *@This(), decimalNumber: ?*DecimalNumber) ?*DecimalNumber {
        return objc.msgSend(self, "decimalNumberByAdding:", ?*DecimalNumber, .{decimalNumber});
    }

    pub fn decimalNumberByAddingWithBehavior(self: *@This(), decimalNumber: ?*DecimalNumber, behavior: ?*anyopaque) ?*DecimalNumber {
        return objc.msgSend(self, "decimalNumberByAdding:withBehavior:", ?*DecimalNumber, .{decimalNumber, behavior});
    }

    pub fn decimalNumberBySubtracting(self: *@This(), decimalNumber: ?*DecimalNumber) ?*DecimalNumber {
        return objc.msgSend(self, "decimalNumberBySubtracting:", ?*DecimalNumber, .{decimalNumber});
    }

    pub fn decimalNumberBySubtractingWithBehavior(self: *@This(), decimalNumber: ?*DecimalNumber, behavior: ?*anyopaque) ?*DecimalNumber {
        return objc.msgSend(self, "decimalNumberBySubtracting:withBehavior:", ?*DecimalNumber, .{decimalNumber, behavior});
    }

    pub fn decimalNumberByMultiplyingBy(self: *@This(), decimalNumber: ?*DecimalNumber) ?*DecimalNumber {
        return objc.msgSend(self, "decimalNumberByMultiplyingBy:", ?*DecimalNumber, .{decimalNumber});
    }

    pub fn decimalNumberByMultiplyingByWithBehavior(self: *@This(), decimalNumber: ?*DecimalNumber, behavior: ?*anyopaque) ?*DecimalNumber {
        return objc.msgSend(self, "decimalNumberByMultiplyingBy:withBehavior:", ?*DecimalNumber, .{decimalNumber, behavior});
    }

    pub fn decimalNumberByDividingBy(self: *@This(), decimalNumber: ?*DecimalNumber) ?*DecimalNumber {
        return objc.msgSend(self, "decimalNumberByDividingBy:", ?*DecimalNumber, .{decimalNumber});
    }

    pub fn decimalNumberByDividingByWithBehavior(self: *@This(), decimalNumber: ?*DecimalNumber, behavior: ?*anyopaque) ?*DecimalNumber {
        return objc.msgSend(self, "decimalNumberByDividingBy:withBehavior:", ?*DecimalNumber, .{decimalNumber, behavior});
    }

    pub fn decimalNumberByRaisingToPower(self: *@This(), power: objc.NSUInteger) ?*DecimalNumber {
        return objc.msgSend(self, "decimalNumberByRaisingToPower:", ?*DecimalNumber, .{power});
    }

    pub fn decimalNumberByRaisingToPowerWithBehavior(self: *@This(), power: objc.NSUInteger, behavior: ?*anyopaque) ?*DecimalNumber {
        return objc.msgSend(self, "decimalNumberByRaisingToPower:withBehavior:", ?*DecimalNumber, .{power, behavior});
    }

    pub fn decimalNumberByMultiplyingByPowerOf10(self: *@This(), power: i16) ?*DecimalNumber {
        return objc.msgSend(self, "decimalNumberByMultiplyingByPowerOf10:", ?*DecimalNumber, .{power});
    }

    pub fn decimalNumberByMultiplyingByPowerOf10WithBehavior(self: *@This(), power: i16, behavior: ?*anyopaque) ?*DecimalNumber {
        return objc.msgSend(self, "decimalNumberByMultiplyingByPowerOf10:withBehavior:", ?*DecimalNumber, .{power, behavior});
    }

    pub fn decimalNumberByRoundingAccordingToBehavior(self: *@This(), behavior: ?*anyopaque) ?*DecimalNumber {
        return objc.msgSend(self, "decimalNumberByRoundingAccordingToBehavior:", ?*DecimalNumber, .{behavior});
    }

    pub fn compare(self: *@This(), decimalNumber: ?*Number) ComparisonResult {
        return objc.msgSend(self, "compare:", ComparisonResult, .{decimalNumber});
    }

    pub fn decimalValue(self: *@This()) Decimal {
        return objc.msgSend(self, "decimalValue", Decimal, .{});
    }

    pub fn zero(self: *@This()) ?*DecimalNumber {
        return objc.msgSend(self, "zero", ?*DecimalNumber, .{});
    }

    pub fn one(self: *@This()) ?*DecimalNumber {
        return objc.msgSend(self, "one", ?*DecimalNumber, .{});
    }

    pub fn minimumDecimalNumber(self: *@This()) ?*DecimalNumber {
        return objc.msgSend(self, "minimumDecimalNumber", ?*DecimalNumber, .{});
    }

    pub fn maximumDecimalNumber(self: *@This()) ?*DecimalNumber {
        return objc.msgSend(self, "maximumDecimalNumber", ?*DecimalNumber, .{});
    }

    pub fn notANumber(self: *@This()) ?*DecimalNumber {
        return objc.msgSend(self, "notANumber", ?*DecimalNumber, .{});
    }

    pub fn defaultBehavior(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "defaultBehavior", ?*anyopaque, .{});
    }

    pub fn setDefaultBehavior(self: *@This(), defaultBehavior: ?*anyopaque) void {
        return objc.msgSend(self, "setDefaultBehavior:", void, .{defaultBehavior});
    }

    pub fn objCType(self: *@This()) ?*i8 {
        return objc.msgSend(self, "objCType", ?*i8, .{});
    }

    pub fn doubleValue(self: *@This()) f64 {
        return objc.msgSend(self, "doubleValue", f64, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSDecimalNumberHandler?language=objc
pub const DecimalNumberHandler = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDecimalNumberHandler", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithRoundingModeScaleRaiseOnExactnessRaiseOnOverflowRaiseOnUnderflowRaiseOnDivideByZero(self: *@This(), roundingMode: RoundingMode, scale: i16, exact: objc.BOOL, overflow: objc.BOOL, underflow: objc.BOOL, divideByZero: objc.BOOL, ) *@This() {
        return objc.msgSend(self, "initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:", *@This(), .{roundingMode, scale, exact, overflow, underflow, divideByZero, });
    }

    pub fn decimalNumberHandlerWithRoundingModeScaleRaiseOnExactnessRaiseOnOverflowRaiseOnUnderflowRaiseOnDivideByZero(self: *@This(), roundingMode: RoundingMode, scale: i16, exact: objc.BOOL, overflow: objc.BOOL, underflow: objc.BOOL, divideByZero: objc.BOOL, ) *@This() {
        return objc.msgSend(self, "decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:", *@This(), .{roundingMode, scale, exact, overflow, underflow, divideByZero, });
    }

    pub fn defaultDecimalNumberHandler(self: *@This()) ?*DecimalNumberHandler {
        return objc.msgSend(self, "defaultDecimalNumberHandler", ?*DecimalNumberHandler, .{});
    }

};

pub const ErrorDomain = ?*String;

pub const ErrorUserInfoKey = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSError?language=objc
pub const Error = opaque {
    pub const InternalInfo = objc.ExternalClass("NSError", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithDomainCodeUserInfo(self: *@This(), domain: ErrorDomain, code: objc.NSInteger, dict: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithDomain:code:userInfo:", *@This(), .{domain, code, dict});
    }

    pub fn errorWithDomainCodeUserInfo(self: *@This(), domain: ErrorDomain, code: objc.NSInteger, dict: ?*anyopaque) *@This() {
        return objc.msgSend(self, "errorWithDomain:code:userInfo:", *@This(), .{domain, code, dict});
    }

    pub fn setUserInfoValueProviderForDomainProvider(self: *@This(), errorDomain: ErrorDomain, provider: *const fn(?*Error, ErrorUserInfoKey) callconv(.C) *objc.Id) void {
        return objc.msgSend(self, "setUserInfoValueProviderForDomain:provider:", void, .{errorDomain, provider});
    }

    pub fn userInfoValueProviderForDomain(self: *@This(), err: ?*Error, userInfoKey: ErrorUserInfoKey, errorDomain: ErrorDomain) *const fn(?*Error, ErrorUserInfoKey) callconv(.C) *objc.Id {
        return objc.msgSend(self, "userInfoValueProviderForDomain:", *const fn(?*Error, ErrorUserInfoKey) callconv(.C) *objc.Id, .{err, userInfoKey, errorDomain});
    }

    pub fn domain(self: *@This()) ErrorDomain {
        return objc.msgSend(self, "domain", ErrorDomain, .{});
    }

    pub fn code(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "code", objc.NSInteger, .{});
    }

    pub fn userInfo(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "userInfo", ?*anyopaque, .{});
    }

    pub fn localizedDescription(self: *@This()) ?*String {
        return objc.msgSend(self, "localizedDescription", ?*String, .{});
    }

    pub fn localizedFailureReason(self: *@This()) ?*String {
        return objc.msgSend(self, "localizedFailureReason", ?*String, .{});
    }

    pub fn localizedRecoverySuggestion(self: *@This()) ?*String {
        return objc.msgSend(self, "localizedRecoverySuggestion", ?*String, .{});
    }

    pub fn localizedRecoveryOptions(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "localizedRecoveryOptions", ?*anyopaque, .{});
    }

    pub fn recoveryAttempter(self: *@This()) *objc.Id {
        return objc.msgSend(self, "recoveryAttempter", *objc.Id, .{});
    }

    pub fn helpAnchor(self: *@This()) ?*String {
        return objc.msgSend(self, "helpAnchor", ?*String, .{});
    }

    pub fn underlyingErrors(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "underlyingErrors", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSRunLoop?language=objc
pub const RunLoop = opaque {
    pub const InternalInfo = objc.ExternalClass("NSRunLoop", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn getCFRunLoop(self: *@This()) core_foundation.RunLoopRef {
        return objc.msgSend(self, "getCFRunLoop", core_foundation.RunLoopRef, .{});
    }

    pub fn addTimerForMode(self: *@This(), timer: ?*Timer, mode: RunLoopMode) void {
        return objc.msgSend(self, "addTimer:forMode:", void, .{timer, mode});
    }

    pub fn addPortForMode(self: *@This(), aPort: ?*Port, mode: RunLoopMode) void {
        return objc.msgSend(self, "addPort:forMode:", void, .{aPort, mode});
    }

    pub fn removePortForMode(self: *@This(), aPort: ?*Port, mode: RunLoopMode) void {
        return objc.msgSend(self, "removePort:forMode:", void, .{aPort, mode});
    }

    pub fn limitDateForMode(self: *@This(), mode: RunLoopMode) ?*Date {
        return objc.msgSend(self, "limitDateForMode:", ?*Date, .{mode});
    }

    pub fn acceptInputForModeBeforeDate(self: *@This(), mode: RunLoopMode, limitDate: ?*Date) void {
        return objc.msgSend(self, "acceptInputForMode:beforeDate:", void, .{mode, limitDate});
    }

    pub fn currentRunLoop(self: *@This()) ?*RunLoop {
        return objc.msgSend(self, "currentRunLoop", ?*RunLoop, .{});
    }

    pub fn mainRunLoop(self: *@This()) ?*RunLoop {
        return objc.msgSend(self, "mainRunLoop", ?*RunLoop, .{});
    }

    pub fn currentMode(self: *@This()) RunLoopMode {
        return objc.msgSend(self, "currentMode", RunLoopMode, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSFileHandle?language=objc
pub const FileHandle = opaque {
    pub const InternalInfo = objc.ExternalClass("NSFileHandle", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithFileDescriptorCloseOnDealloc(self: *@This(), fd: i32, closeopt: objc.BOOL) *@This() {
        return objc.msgSend(self, "initWithFileDescriptor:closeOnDealloc:", *@This(), .{fd, closeopt});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn readDataToEndOfFileAndReturnError(self: *@This(), @"error": ?*?*Error) ?*Data {
        return objc.msgSend(self, "readDataToEndOfFileAndReturnError:", ?*Data, .{@"error"});
    }

    pub fn readDataUpToLengthError(self: *@This(), length: objc.NSUInteger, @"error": ?*?*Error) ?*Data {
        return objc.msgSend(self, "readDataUpToLength:error:", ?*Data, .{length, @"error"});
    }

    pub fn writeDataError(self: *@This(), data: ?*Data, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "writeData:error:", objc.BOOL, .{data, @"error"});
    }

    pub fn getOffsetError(self: *@This(), offsetInFile: ?*u64, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "getOffset:error:", objc.BOOL, .{offsetInFile, @"error"});
    }

    pub fn seekToEndReturningOffsetError(self: *@This(), offsetInFile: ?*u64, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "seekToEndReturningOffset:error:", objc.BOOL, .{offsetInFile, @"error"});
    }

    pub fn seekToOffsetError(self: *@This(), offset: u64, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "seekToOffset:error:", objc.BOOL, .{offset, @"error"});
    }

    pub fn truncateAtOffsetError(self: *@This(), offset: u64, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "truncateAtOffset:error:", objc.BOOL, .{offset, @"error"});
    }

    pub fn synchronizeAndReturnError(self: *@This(), @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "synchronizeAndReturnError:", objc.BOOL, .{@"error"});
    }

    pub fn closeAndReturnError(self: *@This(), @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "closeAndReturnError:", objc.BOOL, .{@"error"});
    }

    pub fn availableData(self: *@This()) ?*Data {
        return objc.msgSend(self, "availableData", ?*Data, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSPipe?language=objc
pub const Pipe = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPipe", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn pipe(self: *@This()) ?*Pipe {
        return objc.msgSend(self, "pipe", ?*Pipe, .{});
    }

    pub fn fileHandleForReading(self: *@This()) ?*FileHandle {
        return objc.msgSend(self, "fileHandleForReading", ?*FileHandle, .{});
    }

    pub fn fileHandleForWriting(self: *@This()) ?*FileHandle {
        return objc.msgSend(self, "fileHandleForWriting", ?*FileHandle, .{});
    }

};

pub extern "Foundation" fn UserName() callconv(.C) ?*String;

pub extern "Foundation" fn FullUserName() callconv(.C) ?*String;

pub extern "Foundation" fn HomeDirectory() callconv(.C) ?*String;

pub extern "Foundation" fn HomeDirectoryForUser(userName: ?*String) callconv(.C) ?*String;

pub extern "Foundation" fn TemporaryDirectory() callconv(.C) ?*String;

pub extern "Foundation" fn OpenStepRootDirectory() callconv(.C) ?*String;

pub const SearchPathDirectory = enum(objc.NSUInteger) {
    ApplicationDirectory = 1,
    DemoApplicationDirectory = 2,
    DeveloperApplicationDirectory = 3,
    AdminApplicationDirectory = 4,
    LibraryDirectory = 5,
    DeveloperDirectory = 6,
    UserDirectory = 7,
    DocumentationDirectory = 8,
    DocumentDirectory = 9,
    CoreServiceDirectory = 10,
    AutosavedInformationDirectory = 11,
    DesktopDirectory = 12,
    CachesDirectory = 13,
    ApplicationSupportDirectory = 14,
    DownloadsDirectory = 15,
    InputMethodsDirectory = 16,
    MoviesDirectory = 17,
    MusicDirectory = 18,
    PicturesDirectory = 19,
    PrinterDescriptionDirectory = 20,
    SharedPublicDirectory = 21,
    PreferencePanesDirectory = 22,
    ApplicationScriptsDirectory = 23,
    ItemReplacementDirectory = 99,
    AllApplicationsDirectory = 100,
    AllLibrariesDirectory = 101,
    TrashDirectory = 102,
};

pub const SearchPathDomainMask = enum(objc.NSUInteger) {
    UserDomainMask = 1,
    LocalDomainMask = 2,
    NetworkDomainMask = 4,
    SystemDomainMask = 8,
    AllDomainsMask = 65535,
};

pub extern "Foundation" fn SearchPathForDirectoriesInDomains(directory: SearchPathDirectory, domainMask: SearchPathDomainMask, expandTilde: objc.BOOL) callconv(.C) ?*anyopaque;

pub const URLHandleStatus = enum(objc.NSUInteger) {
    NotLoaded = 0,
    LoadSucceeded = 1,
    LoadInProgress = 2,
    LoadFailed = 3,
};

/// https://developer.apple.com/documentation/Foundation/NSURLHandleClient?language=objc
pub const URLHandleClient = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn URLHandleResourceDataDidBecomeAvailable(self: *@This(), sender: ?*URLHandle, newBytes: ?*Data) void {
        return objc.msgSend(self, "URLHandle:resourceDataDidBecomeAvailable:", void, .{sender, newBytes});
    }

    pub fn URLHandleResourceDidBeginLoading(self: *@This(), sender: ?*URLHandle) void {
        return objc.msgSend(self, "URLHandleResourceDidBeginLoading:", void, .{sender});
    }

    pub fn URLHandleResourceDidFinishLoading(self: *@This(), sender: ?*URLHandle) void {
        return objc.msgSend(self, "URLHandleResourceDidFinishLoading:", void, .{sender});
    }

    pub fn URLHandleResourceDidCancelLoading(self: *@This(), sender: ?*URLHandle) void {
        return objc.msgSend(self, "URLHandleResourceDidCancelLoading:", void, .{sender});
    }

    pub fn URLHandleResourceDidFailLoadingWithReason(self: *@This(), sender: ?*URLHandle, reason: ?*String) void {
        return objc.msgSend(self, "URLHandle:resourceDidFailLoadingWithReason:", void, .{sender, reason});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSURLHandle?language=objc
pub const URLHandle = opaque {
    pub const InternalInfo = objc.ExternalClass("NSURLHandle", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn registerURLHandleClass(self: *@This(), anURLHandleSubclass: *objc.Class) void {
        return objc.msgSend(self, "registerURLHandleClass:", void, .{anURLHandleSubclass});
    }

    pub fn URLHandleClassForURL(self: *@This(), anURL: ?*URL) *objc.Class {
        return objc.msgSend(self, "URLHandleClassForURL:", *objc.Class, .{anURL});
    }

    pub fn status(self: *@This()) URLHandleStatus {
        return objc.msgSend(self, "status", URLHandleStatus, .{});
    }

    pub fn failureReason(self: *@This()) ?*String {
        return objc.msgSend(self, "failureReason", ?*String, .{});
    }

    pub fn addClient(self: *@This(), client: ?*anyopaque) void {
        return objc.msgSend(self, "addClient:", void, .{client});
    }

    pub fn removeClient(self: *@This(), client: ?*anyopaque) void {
        return objc.msgSend(self, "removeClient:", void, .{client});
    }

    pub fn loadInBackground(self: *@This()) void {
        return objc.msgSend(self, "loadInBackground", void, .{});
    }

    pub fn cancelLoadInBackground(self: *@This()) void {
        return objc.msgSend(self, "cancelLoadInBackground", void, .{});
    }

    pub fn resourceData(self: *@This()) ?*Data {
        return objc.msgSend(self, "resourceData", ?*Data, .{});
    }

    pub fn availableResourceData(self: *@This()) ?*Data {
        return objc.msgSend(self, "availableResourceData", ?*Data, .{});
    }

    pub fn expectedResourceDataSize(self: *@This()) i64 {
        return objc.msgSend(self, "expectedResourceDataSize", i64, .{});
    }

    pub fn flushCachedData(self: *@This()) void {
        return objc.msgSend(self, "flushCachedData", void, .{});
    }

    pub fn backgroundLoadDidFailWithReason(self: *@This(), reason: ?*String) void {
        return objc.msgSend(self, "backgroundLoadDidFailWithReason:", void, .{reason});
    }

    pub fn didLoadBytesLoadComplete(self: *@This(), newBytes: ?*Data, yorn: objc.BOOL) void {
        return objc.msgSend(self, "didLoadBytes:loadComplete:", void, .{newBytes, yorn});
    }

    pub fn canInitWithURL(self: *@This(), anURL: ?*URL) objc.BOOL {
        return objc.msgSend(self, "canInitWithURL:", objc.BOOL, .{anURL});
    }

    pub fn cachedHandleForURL(self: *@This(), anURL: ?*URL) ?*URLHandle {
        return objc.msgSend(self, "cachedHandleForURL:", ?*URLHandle, .{anURL});
    }

    pub fn initWithURLCached(self: *@This(), anURL: ?*URL, willCache: objc.BOOL) *objc.Id {
        return objc.msgSend(self, "initWithURL:cached:", *objc.Id, .{anURL, willCache});
    }

    pub fn propertyForKey(self: *@This(), propertyKey: ?*String) *objc.Id {
        return objc.msgSend(self, "propertyForKey:", *objc.Id, .{propertyKey});
    }

    pub fn propertyForKeyIfAvailable(self: *@This(), propertyKey: ?*String) *objc.Id {
        return objc.msgSend(self, "propertyForKeyIfAvailable:", *objc.Id, .{propertyKey});
    }

    pub fn writePropertyForKey(self: *@This(), propertyValue: *objc.Id, propertyKey: ?*String) objc.BOOL {
        return objc.msgSend(self, "writeProperty:forKey:", objc.BOOL, .{propertyValue, propertyKey});
    }

    pub fn writeData(self: *@This(), data: ?*Data) objc.BOOL {
        return objc.msgSend(self, "writeData:", objc.BOOL, .{data});
    }

    pub fn loadInForeground(self: *@This()) ?*Data {
        return objc.msgSend(self, "loadInForeground", ?*Data, .{});
    }

    pub fn beginLoadInBackground(self: *@This()) void {
        return objc.msgSend(self, "beginLoadInBackground", void, .{});
    }

    pub fn endLoadInBackground(self: *@This()) void {
        return objc.msgSend(self, "endLoadInBackground", void, .{});
    }

};

pub const URLResourceKey = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSURL?language=objc
pub const URL = opaque {
    pub const InternalInfo = objc.ExternalClass("NSURL", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithSchemeHostPath(self: *@This(), scheme: ?*String, host: ?*String, path: ?*String) *@This() {
        return objc.msgSend(self, "initWithScheme:host:path:", *@This(), .{scheme, host, path});
    }

    pub fn initFileURLWithPathIsDirectoryRelativeToURL(self: *@This(), path: ?*String, isDir: objc.BOOL, baseURL: ?*URL) *@This() {
        return objc.msgSend(self, "initFileURLWithPath:isDirectory:relativeToURL:", *@This(), .{path, isDir, baseURL});
    }

    pub fn initFileURLWithPathRelativeToURL(self: *@This(), path: ?*String, baseURL: ?*URL) *@This() {
        return objc.msgSend(self, "initFileURLWithPath:relativeToURL:", *@This(), .{path, baseURL});
    }

    pub fn initFileURLWithPathIsDirectory(self: *@This(), path: ?*String, isDir: objc.BOOL) *@This() {
        return objc.msgSend(self, "initFileURLWithPath:isDirectory:", *@This(), .{path, isDir});
    }

    pub fn initFileURLWithPath(self: *@This(), path: ?*String) *@This() {
        return objc.msgSend(self, "initFileURLWithPath:", *@This(), .{path});
    }

    pub fn fileURLWithPathIsDirectoryRelativeToURL(self: *@This(), path: ?*String, isDir: objc.BOOL, baseURL: ?*URL) ?*URL {
        return objc.msgSend(self, "fileURLWithPath:isDirectory:relativeToURL:", ?*URL, .{path, isDir, baseURL});
    }

    pub fn fileURLWithPathRelativeToURL(self: *@This(), path: ?*String, baseURL: ?*URL) ?*URL {
        return objc.msgSend(self, "fileURLWithPath:relativeToURL:", ?*URL, .{path, baseURL});
    }

    pub fn fileURLWithPathIsDirectory(self: *@This(), path: ?*String, isDir: objc.BOOL) ?*URL {
        return objc.msgSend(self, "fileURLWithPath:isDirectory:", ?*URL, .{path, isDir});
    }

    pub fn fileURLWithPath(self: *@This(), path: ?*String) ?*URL {
        return objc.msgSend(self, "fileURLWithPath:", ?*URL, .{path});
    }

    pub fn initFileURLWithFileSystemRepresentationIsDirectoryRelativeToURL(self: *@This(), path: ?*i8, isDir: objc.BOOL, baseURL: ?*URL) *@This() {
        return objc.msgSend(self, "initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", *@This(), .{path, isDir, baseURL});
    }

    pub fn fileURLWithFileSystemRepresentationIsDirectoryRelativeToURL(self: *@This(), path: ?*i8, isDir: objc.BOOL, baseURL: ?*URL) ?*URL {
        return objc.msgSend(self, "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", ?*URL, .{path, isDir, baseURL});
    }

    pub fn initWithString(self: *@This(), URLString: ?*String) *@This() {
        return objc.msgSend(self, "initWithString:", *@This(), .{URLString});
    }

    pub fn initWithStringRelativeToURL(self: *@This(), URLString: ?*String, baseURL: ?*URL) *@This() {
        return objc.msgSend(self, "initWithString:relativeToURL:", *@This(), .{URLString, baseURL});
    }

    pub fn URLWithString(self: *@This(), URLString: ?*String) *@This() {
        return objc.msgSend(self, "URLWithString:", *@This(), .{URLString});
    }

    pub fn URLWithStringRelativeToURL(self: *@This(), URLString: ?*String, baseURL: ?*URL) *@This() {
        return objc.msgSend(self, "URLWithString:relativeToURL:", *@This(), .{URLString, baseURL});
    }

    pub fn initWithStringEncodingInvalidCharacters(self: *@This(), URLString: ?*String, encodingInvalidCharacters: objc.BOOL) *@This() {
        return objc.msgSend(self, "initWithString:encodingInvalidCharacters:", *@This(), .{URLString, encodingInvalidCharacters});
    }

    pub fn URLWithStringEncodingInvalidCharacters(self: *@This(), URLString: ?*String, encodingInvalidCharacters: objc.BOOL) *@This() {
        return objc.msgSend(self, "URLWithString:encodingInvalidCharacters:", *@This(), .{URLString, encodingInvalidCharacters});
    }

    pub fn initWithDataRepresentationRelativeToURL(self: *@This(), data: ?*Data, baseURL: ?*URL) *@This() {
        return objc.msgSend(self, "initWithDataRepresentation:relativeToURL:", *@This(), .{data, baseURL});
    }

    pub fn URLWithDataRepresentationRelativeToURL(self: *@This(), data: ?*Data, baseURL: ?*URL) ?*URL {
        return objc.msgSend(self, "URLWithDataRepresentation:relativeToURL:", ?*URL, .{data, baseURL});
    }

    pub fn initAbsoluteURLWithDataRepresentationRelativeToURL(self: *@This(), data: ?*Data, baseURL: ?*URL) *@This() {
        return objc.msgSend(self, "initAbsoluteURLWithDataRepresentation:relativeToURL:", *@This(), .{data, baseURL});
    }

    pub fn absoluteURLWithDataRepresentationRelativeToURL(self: *@This(), data: ?*Data, baseURL: ?*URL) ?*URL {
        return objc.msgSend(self, "absoluteURLWithDataRepresentation:relativeToURL:", ?*URL, .{data, baseURL});
    }

    pub fn dataRepresentation(self: *@This()) ?*Data {
        return objc.msgSend(self, "dataRepresentation", ?*Data, .{});
    }

    pub fn absoluteString(self: *@This()) ?*String {
        return objc.msgSend(self, "absoluteString", ?*String, .{});
    }

    pub fn relativeString(self: *@This()) ?*String {
        return objc.msgSend(self, "relativeString", ?*String, .{});
    }

    pub fn baseURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "baseURL", ?*URL, .{});
    }

    pub fn absoluteURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "absoluteURL", ?*URL, .{});
    }

    pub fn scheme(self: *@This()) ?*String {
        return objc.msgSend(self, "scheme", ?*String, .{});
    }

    pub fn resourceSpecifier(self: *@This()) ?*String {
        return objc.msgSend(self, "resourceSpecifier", ?*String, .{});
    }

    pub fn host(self: *@This()) ?*String {
        return objc.msgSend(self, "host", ?*String, .{});
    }

    pub fn port(self: *@This()) ?*Number {
        return objc.msgSend(self, "port", ?*Number, .{});
    }

    pub fn user(self: *@This()) ?*String {
        return objc.msgSend(self, "user", ?*String, .{});
    }

    pub fn password(self: *@This()) ?*String {
        return objc.msgSend(self, "password", ?*String, .{});
    }

    pub fn path(self: *@This()) ?*String {
        return objc.msgSend(self, "path", ?*String, .{});
    }

    pub fn fragment(self: *@This()) ?*String {
        return objc.msgSend(self, "fragment", ?*String, .{});
    }

    pub fn parameterString(self: *@This()) ?*String {
        return objc.msgSend(self, "parameterString", ?*String, .{});
    }

    pub fn query(self: *@This()) ?*String {
        return objc.msgSend(self, "query", ?*String, .{});
    }

    pub fn relativePath(self: *@This()) ?*String {
        return objc.msgSend(self, "relativePath", ?*String, .{});
    }

    pub fn hasDirectoryPath(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasDirectoryPath", objc.BOOL, .{});
    }

    pub fn getFileSystemRepresentationMaxLength(self: *@This(), buffer: ?*i8, maxBufferLength: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(self, "getFileSystemRepresentation:maxLength:", objc.BOOL, .{buffer, maxBufferLength});
    }

    pub fn fileSystemRepresentation(self: *@This()) ?*i8 {
        return objc.msgSend(self, "fileSystemRepresentation", ?*i8, .{});
    }

    pub fn isFileURL(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isFileURL", objc.BOOL, .{});
    }

    pub fn standardizedURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "standardizedURL", ?*URL, .{});
    }

    pub fn isFileReferenceURL(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isFileReferenceURL", objc.BOOL, .{});
    }

    pub fn fileReferenceURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "fileReferenceURL", ?*URL, .{});
    }

    pub fn filePathURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "filePathURL", ?*URL, .{});
    }

    pub fn getResourceValueForKeyError(self: *@This(), value: ?**objc.Id, key: URLResourceKey, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "getResourceValue:forKey:error:", objc.BOOL, .{value, key, @"error"});
    }

    pub fn resourceValuesForKeysError(self: *@This(), keys: ?*anyopaque, @"error": ?*?*Error) ?*anyopaque {
        return objc.msgSend(self, "resourceValuesForKeys:error:", ?*anyopaque, .{keys, @"error"});
    }

    pub fn setResourceValueForKeyError(self: *@This(), value: *objc.Id, key: URLResourceKey, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "setResourceValue:forKey:error:", objc.BOOL, .{value, key, @"error"});
    }

    pub fn setResourceValuesError(self: *@This(), keyedValues: ?*anyopaque, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "setResourceValues:error:", objc.BOOL, .{keyedValues, @"error"});
    }

    pub fn removeCachedResourceValueForKey(self: *@This(), key: URLResourceKey) void {
        return objc.msgSend(self, "removeCachedResourceValueForKey:", void, .{key});
    }

    pub fn removeAllCachedResourceValues(self: *@This()) void {
        return objc.msgSend(self, "removeAllCachedResourceValues", void, .{});
    }

    pub fn setTemporaryResourceValueForKey(self: *@This(), value: *objc.Id, key: URLResourceKey) void {
        return objc.msgSend(self, "setTemporaryResourceValue:forKey:", void, .{value, key});
    }

    pub fn bookmarkDataWithOptionsIncludingResourceValuesForKeysRelativeToURLError(self: *@This(), options: URLBookmarkCreationOptions, keys: ?*anyopaque, relativeURL: ?*URL, @"error": ?*?*Error, ) ?*Data {
        return objc.msgSend(self, "bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:", ?*Data, .{options, keys, relativeURL, @"error", });
    }

    pub fn initByResolvingBookmarkDataOptionsRelativeToURLBookmarkDataIsStaleError(self: *@This(), bookmarkData: ?*Data, options: URLBookmarkResolutionOptions, relativeURL: ?*URL, isStale: ?*objc.BOOL, @"error": ?*?*Error, ) *@This() {
        return objc.msgSend(self, "initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:", *@This(), .{bookmarkData, options, relativeURL, isStale, @"error", });
    }

    pub fn URLByResolvingBookmarkDataOptionsRelativeToURLBookmarkDataIsStaleError(self: *@This(), bookmarkData: ?*Data, options: URLBookmarkResolutionOptions, relativeURL: ?*URL, isStale: ?*objc.BOOL, @"error": ?*?*Error, ) *@This() {
        return objc.msgSend(self, "URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:", *@This(), .{bookmarkData, options, relativeURL, isStale, @"error", });
    }

    pub fn resourceValuesForKeysFromBookmarkData(self: *@This(), keys: ?*anyopaque, bookmarkData: ?*Data) ?*anyopaque {
        return objc.msgSend(self, "resourceValuesForKeys:fromBookmarkData:", ?*anyopaque, .{keys, bookmarkData});
    }

    pub fn writeBookmarkDataToURLOptionsError(self: *@This(), bookmarkData: ?*Data, bookmarkFileURL: ?*URL, options: URLBookmarkFileCreationOptions, @"error": ?*?*Error, ) objc.BOOL {
        return objc.msgSend(self, "writeBookmarkData:toURL:options:error:", objc.BOOL, .{bookmarkData, bookmarkFileURL, options, @"error", });
    }

    pub fn bookmarkDataWithContentsOfURLError(self: *@This(), bookmarkFileURL: ?*URL, @"error": ?*?*Error) ?*Data {
        return objc.msgSend(self, "bookmarkDataWithContentsOfURL:error:", ?*Data, .{bookmarkFileURL, @"error"});
    }

    pub fn URLByResolvingAliasFileAtURLOptionsError(self: *@This(), url: ?*URL, options: URLBookmarkResolutionOptions, @"error": ?*?*Error) *@This() {
        return objc.msgSend(self, "URLByResolvingAliasFileAtURL:options:error:", *@This(), .{url, options, @"error"});
    }

    pub fn startAccessingSecurityScopedResource(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "startAccessingSecurityScopedResource", objc.BOOL, .{});
    }

    pub fn stopAccessingSecurityScopedResource(self: *@This()) void {
        return objc.msgSend(self, "stopAccessingSecurityScopedResource", void, .{});
    }

};

pub const URLFileResourceType = ?*String;

pub const URLThumbnailDictionaryItem = ?*String;

pub const URLFileProtectionType = ?*String;

pub const URLUbiquitousItemDownloadingStatus = ?*String;

pub const URLUbiquitousSharedItemRole = ?*String;

pub const URLUbiquitousSharedItemPermissions = ?*String;

pub const URLBookmarkCreationOptions = URLBookmarkCreationOptions;

pub const URLBookmarkCreationOptions = enum(objc.NSUInteger) {
    PreferFileIDResolution = 256,
    MinimalBookmark = 512,
    SuitableForBookmarkFile = 1024,
    WithSecurityScope = 2048,
    SecurityScopeAllowOnlyReadAccess = 4096,
    WithoutImplicitSecurityScope = 536870912,
};

pub const URLBookmarkResolutionOptions = URLBookmarkResolutionOptions;

pub const URLBookmarkResolutionOptions = enum(objc.NSUInteger) {
    WithoutUI = 256,
    WithoutMounting = 512,
    WithSecurityScope = 1024,
    WithoutImplicitStartAccessing = 32768,
};

pub const URLBookmarkFileCreationOptions = objc.NSUInteger;

/// https://developer.apple.com/documentation/Foundation/NSURLQueryItem?language=objc
pub const URLQueryItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSURLQueryItem", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithNameValue(self: *@This(), name: ?*String, value: ?*String) *@This() {
        return objc.msgSend(self, "initWithName:value:", *@This(), .{name, value});
    }

    pub fn queryItemWithNameValue(self: *@This(), name: ?*String, value: ?*String) *@This() {
        return objc.msgSend(self, "queryItemWithName:value:", *@This(), .{name, value});
    }

    pub fn name(self: *@This()) ?*String {
        return objc.msgSend(self, "name", ?*String, .{});
    }

    pub fn value(self: *@This()) ?*String {
        return objc.msgSend(self, "value", ?*String, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSURLComponents?language=objc
pub const URLComponents = opaque {
    pub const InternalInfo = objc.ExternalClass("NSURLComponents", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithURLResolvingAgainstBaseURL(self: *@This(), url: ?*URL, resolve: objc.BOOL) *@This() {
        return objc.msgSend(self, "initWithURL:resolvingAgainstBaseURL:", *@This(), .{url, resolve});
    }

    pub fn componentsWithURLResolvingAgainstBaseURL(self: *@This(), url: ?*URL, resolve: objc.BOOL) *@This() {
        return objc.msgSend(self, "componentsWithURL:resolvingAgainstBaseURL:", *@This(), .{url, resolve});
    }

    pub fn initWithString(self: *@This(), URLString: ?*String) *@This() {
        return objc.msgSend(self, "initWithString:", *@This(), .{URLString});
    }

    pub fn componentsWithString(self: *@This(), URLString: ?*String) *@This() {
        return objc.msgSend(self, "componentsWithString:", *@This(), .{URLString});
    }

    pub fn initWithStringEncodingInvalidCharacters(self: *@This(), URLString: ?*String, encodingInvalidCharacters: objc.BOOL) *@This() {
        return objc.msgSend(self, "initWithString:encodingInvalidCharacters:", *@This(), .{URLString, encodingInvalidCharacters});
    }

    pub fn componentsWithStringEncodingInvalidCharacters(self: *@This(), URLString: ?*String, encodingInvalidCharacters: objc.BOOL) *@This() {
        return objc.msgSend(self, "componentsWithString:encodingInvalidCharacters:", *@This(), .{URLString, encodingInvalidCharacters});
    }

    pub fn URLRelativeToURL(self: *@This(), baseURL: ?*URL) ?*URL {
        return objc.msgSend(self, "URLRelativeToURL:", ?*URL, .{baseURL});
    }

    pub fn URL(self: *@This()) ?*URL {
        return objc.msgSend(self, "URL", ?*URL, .{});
    }

    pub fn string(self: *@This()) ?*String {
        return objc.msgSend(self, "string", ?*String, .{});
    }

    pub fn scheme(self: *@This()) ?*String {
        return objc.msgSend(self, "scheme", ?*String, .{});
    }

    pub fn setScheme(self: *@This(), scheme: ?*String) void {
        return objc.msgSend(self, "setScheme:", void, .{scheme});
    }

    pub fn user(self: *@This()) ?*String {
        return objc.msgSend(self, "user", ?*String, .{});
    }

    pub fn setUser(self: *@This(), user: ?*String) void {
        return objc.msgSend(self, "setUser:", void, .{user});
    }

    pub fn password(self: *@This()) ?*String {
        return objc.msgSend(self, "password", ?*String, .{});
    }

    pub fn setPassword(self: *@This(), password: ?*String) void {
        return objc.msgSend(self, "setPassword:", void, .{password});
    }

    pub fn host(self: *@This()) ?*String {
        return objc.msgSend(self, "host", ?*String, .{});
    }

    pub fn setHost(self: *@This(), host: ?*String) void {
        return objc.msgSend(self, "setHost:", void, .{host});
    }

    pub fn port(self: *@This()) ?*Number {
        return objc.msgSend(self, "port", ?*Number, .{});
    }

    pub fn setPort(self: *@This(), port: ?*Number) void {
        return objc.msgSend(self, "setPort:", void, .{port});
    }

    pub fn path(self: *@This()) ?*String {
        return objc.msgSend(self, "path", ?*String, .{});
    }

    pub fn setPath(self: *@This(), path: ?*String) void {
        return objc.msgSend(self, "setPath:", void, .{path});
    }

    pub fn query(self: *@This()) ?*String {
        return objc.msgSend(self, "query", ?*String, .{});
    }

    pub fn setQuery(self: *@This(), query: ?*String) void {
        return objc.msgSend(self, "setQuery:", void, .{query});
    }

    pub fn fragment(self: *@This()) ?*String {
        return objc.msgSend(self, "fragment", ?*String, .{});
    }

    pub fn setFragment(self: *@This(), fragment: ?*String) void {
        return objc.msgSend(self, "setFragment:", void, .{fragment});
    }

    pub fn percentEncodedUser(self: *@This()) ?*String {
        return objc.msgSend(self, "percentEncodedUser", ?*String, .{});
    }

    pub fn setPercentEncodedUser(self: *@This(), percentEncodedUser: ?*String) void {
        return objc.msgSend(self, "setPercentEncodedUser:", void, .{percentEncodedUser});
    }

    pub fn percentEncodedPassword(self: *@This()) ?*String {
        return objc.msgSend(self, "percentEncodedPassword", ?*String, .{});
    }

    pub fn setPercentEncodedPassword(self: *@This(), percentEncodedPassword: ?*String) void {
        return objc.msgSend(self, "setPercentEncodedPassword:", void, .{percentEncodedPassword});
    }

    pub fn percentEncodedHost(self: *@This()) ?*String {
        return objc.msgSend(self, "percentEncodedHost", ?*String, .{});
    }

    pub fn setPercentEncodedHost(self: *@This(), percentEncodedHost: ?*String) void {
        return objc.msgSend(self, "setPercentEncodedHost:", void, .{percentEncodedHost});
    }

    pub fn percentEncodedPath(self: *@This()) ?*String {
        return objc.msgSend(self, "percentEncodedPath", ?*String, .{});
    }

    pub fn setPercentEncodedPath(self: *@This(), percentEncodedPath: ?*String) void {
        return objc.msgSend(self, "setPercentEncodedPath:", void, .{percentEncodedPath});
    }

    pub fn percentEncodedQuery(self: *@This()) ?*String {
        return objc.msgSend(self, "percentEncodedQuery", ?*String, .{});
    }

    pub fn setPercentEncodedQuery(self: *@This(), percentEncodedQuery: ?*String) void {
        return objc.msgSend(self, "setPercentEncodedQuery:", void, .{percentEncodedQuery});
    }

    pub fn percentEncodedFragment(self: *@This()) ?*String {
        return objc.msgSend(self, "percentEncodedFragment", ?*String, .{});
    }

    pub fn setPercentEncodedFragment(self: *@This(), percentEncodedFragment: ?*String) void {
        return objc.msgSend(self, "setPercentEncodedFragment:", void, .{percentEncodedFragment});
    }

    pub fn encodedHost(self: *@This()) ?*String {
        return objc.msgSend(self, "encodedHost", ?*String, .{});
    }

    pub fn setEncodedHost(self: *@This(), encodedHost: ?*String) void {
        return objc.msgSend(self, "setEncodedHost:", void, .{encodedHost});
    }

    pub fn rangeOfScheme(self: *@This()) Range {
        return objc.msgSend(self, "rangeOfScheme", Range, .{});
    }

    pub fn rangeOfUser(self: *@This()) Range {
        return objc.msgSend(self, "rangeOfUser", Range, .{});
    }

    pub fn rangeOfPassword(self: *@This()) Range {
        return objc.msgSend(self, "rangeOfPassword", Range, .{});
    }

    pub fn rangeOfHost(self: *@This()) Range {
        return objc.msgSend(self, "rangeOfHost", Range, .{});
    }

    pub fn rangeOfPort(self: *@This()) Range {
        return objc.msgSend(self, "rangeOfPort", Range, .{});
    }

    pub fn rangeOfPath(self: *@This()) Range {
        return objc.msgSend(self, "rangeOfPath", Range, .{});
    }

    pub fn rangeOfQuery(self: *@This()) Range {
        return objc.msgSend(self, "rangeOfQuery", Range, .{});
    }

    pub fn rangeOfFragment(self: *@This()) Range {
        return objc.msgSend(self, "rangeOfFragment", Range, .{});
    }

    pub fn queryItems(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "queryItems", ?*anyopaque, .{});
    }

    pub fn setQueryItems(self: *@This(), queryItems: ?*anyopaque) void {
        return objc.msgSend(self, "setQueryItems:", void, .{queryItems});
    }

    pub fn percentEncodedQueryItems(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "percentEncodedQueryItems", ?*anyopaque, .{});
    }

    pub fn setPercentEncodedQueryItems(self: *@This(), percentEncodedQueryItems: ?*anyopaque) void {
        return objc.msgSend(self, "setPercentEncodedQueryItems:", void, .{percentEncodedQueryItems});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSFileSecurity?language=objc
pub const FileSecurity = opaque {
    pub const InternalInfo = objc.ExternalClass("NSFileSecurity", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithCoder(self: *@This(), coder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

};

pub const FileAttributeKey = ?*String;

pub const FileAttributeType = ?*String;

pub const FileProtectionType = ?*String;

pub const FileProviderServiceName = ?*String;

pub const VolumeEnumerationOptions = enum(objc.NSUInteger) {
    SkipHiddenVolumes = 2,
    ProduceFileReferenceURLs = 4,
};

pub const DirectoryEnumerationOptions = enum(objc.NSUInteger) {
    SkipsSubdirectoryDescendants = 1,
    SkipsPackageDescendants = 2,
    SkipsHiddenFiles = 4,
    IncludesDirectoriesPostOrder = 8,
    ProducesRelativePathURLs = 16,
};

pub const FileManagerItemReplacementOptions = enum(objc.NSUInteger) {
    UsingNewMetadataOnly = 1,
    WithoutDeletingBackupItem = 2,
};

pub const URLRelationship = enum(objc.NSInteger) {
    Contains = 0,
    Same = 1,
    Other = 2,
};

pub const FileManagerUnmountOptions = enum(objc.NSUInteger) {
    AllPartitionsAndEjectDisk = 1,
    WithoutUI = 2,
};

/// https://developer.apple.com/documentation/Foundation/NSFileManager?language=objc
pub const FileManager = opaque {
    pub const InternalInfo = objc.ExternalClass("NSFileManager", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn mountedVolumeURLsIncludingResourceValuesForKeysOptions(self: *@This(), propertyKeys: ?*anyopaque, options: VolumeEnumerationOptions) ?*anyopaque {
        return objc.msgSend(self, "mountedVolumeURLsIncludingResourceValuesForKeys:options:", ?*anyopaque, .{propertyKeys, options});
    }

    pub fn unmountVolumeAtURLOptionsCompletionHandler(self: *@This(), url: ?*URL, mask: FileManagerUnmountOptions, completionHandler: *const fn(?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "unmountVolumeAtURL:options:completionHandler:", void, .{url, mask, completionHandler});
    }

    pub fn contentsOfDirectoryAtURLIncludingPropertiesForKeysOptionsError(self: *@This(), url: ?*URL, keys: ?*anyopaque, mask: DirectoryEnumerationOptions, @"error": ?*?*Error, ) ?*anyopaque {
        return objc.msgSend(self, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", ?*anyopaque, .{url, keys, mask, @"error", });
    }

    pub fn URLsForDirectoryInDomains(self: *@This(), directory: SearchPathDirectory, domainMask: SearchPathDomainMask) ?*anyopaque {
        return objc.msgSend(self, "URLsForDirectory:inDomains:", ?*anyopaque, .{directory, domainMask});
    }

    pub fn URLForDirectoryInDomainAppropriateForURLCreateError(self: *@This(), directory: SearchPathDirectory, domain: SearchPathDomainMask, url: ?*URL, shouldCreate: objc.BOOL, @"error": ?*?*Error, ) ?*URL {
        return objc.msgSend(self, "URLForDirectory:inDomain:appropriateForURL:create:error:", ?*URL, .{directory, domain, url, shouldCreate, @"error", });
    }

    pub fn getRelationshipOfDirectoryAtURLToItemAtURLError(self: *@This(), outRelationship: ?*URLRelationship, directoryURL: ?*URL, otherURL: ?*URL, @"error": ?*?*Error, ) objc.BOOL {
        return objc.msgSend(self, "getRelationship:ofDirectoryAtURL:toItemAtURL:error:", objc.BOOL, .{outRelationship, directoryURL, otherURL, @"error", });
    }

    pub fn getRelationshipOfDirectoryInDomainToItemAtURLError(self: *@This(), outRelationship: ?*URLRelationship, directory: SearchPathDirectory, domainMask: SearchPathDomainMask, url: ?*URL, @"error": ?*?*Error, ) objc.BOOL {
        return objc.msgSend(self, "getRelationship:ofDirectory:inDomain:toItemAtURL:error:", objc.BOOL, .{outRelationship, directory, domainMask, url, @"error", });
    }

    pub fn createDirectoryAtURLWithIntermediateDirectoriesAttributesError(self: *@This(), url: ?*URL, createIntermediates: objc.BOOL, attributes: ?*anyopaque, @"error": ?*?*Error, ) objc.BOOL {
        return objc.msgSend(self, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", objc.BOOL, .{url, createIntermediates, attributes, @"error", });
    }

    pub fn createSymbolicLinkAtURLWithDestinationURLError(self: *@This(), url: ?*URL, destURL: ?*URL, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "createSymbolicLinkAtURL:withDestinationURL:error:", objc.BOOL, .{url, destURL, @"error"});
    }

    pub fn setAttributesOfItemAtPathError(self: *@This(), attributes: ?*anyopaque, path: ?*String, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "setAttributes:ofItemAtPath:error:", objc.BOOL, .{attributes, path, @"error"});
    }

    pub fn createDirectoryAtPathWithIntermediateDirectoriesAttributesError(self: *@This(), path: ?*String, createIntermediates: objc.BOOL, attributes: ?*anyopaque, @"error": ?*?*Error, ) objc.BOOL {
        return objc.msgSend(self, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", objc.BOOL, .{path, createIntermediates, attributes, @"error", });
    }

    pub fn contentsOfDirectoryAtPathError(self: *@This(), path: ?*String, @"error": ?*?*Error) ?*anyopaque {
        return objc.msgSend(self, "contentsOfDirectoryAtPath:error:", ?*anyopaque, .{path, @"error"});
    }

    pub fn subpathsOfDirectoryAtPathError(self: *@This(), path: ?*String, @"error": ?*?*Error) ?*anyopaque {
        return objc.msgSend(self, "subpathsOfDirectoryAtPath:error:", ?*anyopaque, .{path, @"error"});
    }

    pub fn attributesOfItemAtPathError(self: *@This(), path: ?*String, @"error": ?*?*Error) ?*anyopaque {
        return objc.msgSend(self, "attributesOfItemAtPath:error:", ?*anyopaque, .{path, @"error"});
    }

    pub fn attributesOfFileSystemForPathError(self: *@This(), path: ?*String, @"error": ?*?*Error) ?*anyopaque {
        return objc.msgSend(self, "attributesOfFileSystemForPath:error:", ?*anyopaque, .{path, @"error"});
    }

    pub fn createSymbolicLinkAtPathWithDestinationPathError(self: *@This(), path: ?*String, destPath: ?*String, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "createSymbolicLinkAtPath:withDestinationPath:error:", objc.BOOL, .{path, destPath, @"error"});
    }

    pub fn destinationOfSymbolicLinkAtPathError(self: *@This(), path: ?*String, @"error": ?*?*Error) ?*String {
        return objc.msgSend(self, "destinationOfSymbolicLinkAtPath:error:", ?*String, .{path, @"error"});
    }

    pub fn copyItemAtPathToPathError(self: *@This(), srcPath: ?*String, dstPath: ?*String, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "copyItemAtPath:toPath:error:", objc.BOOL, .{srcPath, dstPath, @"error"});
    }

    pub fn moveItemAtPathToPathError(self: *@This(), srcPath: ?*String, dstPath: ?*String, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "moveItemAtPath:toPath:error:", objc.BOOL, .{srcPath, dstPath, @"error"});
    }

    pub fn linkItemAtPathToPathError(self: *@This(), srcPath: ?*String, dstPath: ?*String, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "linkItemAtPath:toPath:error:", objc.BOOL, .{srcPath, dstPath, @"error"});
    }

    pub fn removeItemAtPathError(self: *@This(), path: ?*String, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "removeItemAtPath:error:", objc.BOOL, .{path, @"error"});
    }

    pub fn copyItemAtURLToURLError(self: *@This(), srcURL: ?*URL, dstURL: ?*URL, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "copyItemAtURL:toURL:error:", objc.BOOL, .{srcURL, dstURL, @"error"});
    }

    pub fn moveItemAtURLToURLError(self: *@This(), srcURL: ?*URL, dstURL: ?*URL, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "moveItemAtURL:toURL:error:", objc.BOOL, .{srcURL, dstURL, @"error"});
    }

    pub fn linkItemAtURLToURLError(self: *@This(), srcURL: ?*URL, dstURL: ?*URL, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "linkItemAtURL:toURL:error:", objc.BOOL, .{srcURL, dstURL, @"error"});
    }

    pub fn removeItemAtURLError(self: *@This(), URL: ?*URL, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "removeItemAtURL:error:", objc.BOOL, .{URL, @"error"});
    }

    pub fn trashItemAtURLResultingItemURLError(self: *@This(), url: ?*URL, outResultingURL: ?*?*URL, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "trashItemAtURL:resultingItemURL:error:", objc.BOOL, .{url, outResultingURL, @"error"});
    }

    pub fn fileAttributesAtPathTraverseLink(self: *@This(), path: ?*String, yorn: objc.BOOL) ?*Dictionary {
        return objc.msgSend(self, "fileAttributesAtPath:traverseLink:", ?*Dictionary, .{path, yorn});
    }

    pub fn changeFileAttributesAtPath(self: *@This(), attributes: ?*Dictionary, path: ?*String) objc.BOOL {
        return objc.msgSend(self, "changeFileAttributes:atPath:", objc.BOOL, .{attributes, path});
    }

    pub fn directoryContentsAtPath(self: *@This(), path: ?*String) ?*Array {
        return objc.msgSend(self, "directoryContentsAtPath:", ?*Array, .{path});
    }

    pub fn fileSystemAttributesAtPath(self: *@This(), path: ?*String) ?*Dictionary {
        return objc.msgSend(self, "fileSystemAttributesAtPath:", ?*Dictionary, .{path});
    }

    pub fn pathContentOfSymbolicLinkAtPath(self: *@This(), path: ?*String) ?*String {
        return objc.msgSend(self, "pathContentOfSymbolicLinkAtPath:", ?*String, .{path});
    }

    pub fn createSymbolicLinkAtPathPathContent(self: *@This(), path: ?*String, otherpath: ?*String) objc.BOOL {
        return objc.msgSend(self, "createSymbolicLinkAtPath:pathContent:", objc.BOOL, .{path, otherpath});
    }

    pub fn createDirectoryAtPathAttributes(self: *@This(), path: ?*String, attributes: ?*Dictionary) objc.BOOL {
        return objc.msgSend(self, "createDirectoryAtPath:attributes:", objc.BOOL, .{path, attributes});
    }

    pub fn linkPathToPathHandler(self: *@This(), src: ?*String, dest: ?*String, handler: *objc.Id) objc.BOOL {
        return objc.msgSend(self, "linkPath:toPath:handler:", objc.BOOL, .{src, dest, handler});
    }

    pub fn copyPathToPathHandler(self: *@This(), src: ?*String, dest: ?*String, handler: *objc.Id) objc.BOOL {
        return objc.msgSend(self, "copyPath:toPath:handler:", objc.BOOL, .{src, dest, handler});
    }

    pub fn movePathToPathHandler(self: *@This(), src: ?*String, dest: ?*String, handler: *objc.Id) objc.BOOL {
        return objc.msgSend(self, "movePath:toPath:handler:", objc.BOOL, .{src, dest, handler});
    }

    pub fn removeFileAtPathHandler(self: *@This(), path: ?*String, handler: *objc.Id) objc.BOOL {
        return objc.msgSend(self, "removeFileAtPath:handler:", objc.BOOL, .{path, handler});
    }

    pub fn changeCurrentDirectoryPath(self: *@This(), path: ?*String) objc.BOOL {
        return objc.msgSend(self, "changeCurrentDirectoryPath:", objc.BOOL, .{path});
    }

    pub fn fileExistsAtPath(self: *@This(), path: ?*String) objc.BOOL {
        return objc.msgSend(self, "fileExistsAtPath:", objc.BOOL, .{path});
    }

    pub fn fileExistsAtPathIsDirectory(self: *@This(), path: ?*String, isDirectory: ?*objc.BOOL) objc.BOOL {
        return objc.msgSend(self, "fileExistsAtPath:isDirectory:", objc.BOOL, .{path, isDirectory});
    }

    pub fn isReadableFileAtPath(self: *@This(), path: ?*String) objc.BOOL {
        return objc.msgSend(self, "isReadableFileAtPath:", objc.BOOL, .{path});
    }

    pub fn isWritableFileAtPath(self: *@This(), path: ?*String) objc.BOOL {
        return objc.msgSend(self, "isWritableFileAtPath:", objc.BOOL, .{path});
    }

    pub fn isExecutableFileAtPath(self: *@This(), path: ?*String) objc.BOOL {
        return objc.msgSend(self, "isExecutableFileAtPath:", objc.BOOL, .{path});
    }

    pub fn isDeletableFileAtPath(self: *@This(), path: ?*String) objc.BOOL {
        return objc.msgSend(self, "isDeletableFileAtPath:", objc.BOOL, .{path});
    }

    pub fn contentsEqualAtPathAndPath(self: *@This(), path1: ?*String, path2: ?*String) objc.BOOL {
        return objc.msgSend(self, "contentsEqualAtPath:andPath:", objc.BOOL, .{path1, path2});
    }

    pub fn displayNameAtPath(self: *@This(), path: ?*String) ?*String {
        return objc.msgSend(self, "displayNameAtPath:", ?*String, .{path});
    }

    pub fn componentsToDisplayForPath(self: *@This(), path: ?*String) ?*anyopaque {
        return objc.msgSend(self, "componentsToDisplayForPath:", ?*anyopaque, .{path});
    }

    pub fn enumeratorAtPath(self: *@This(), path: ?*String) ?*anyopaque {
        return objc.msgSend(self, "enumeratorAtPath:", ?*anyopaque, .{path});
    }

    pub fn enumeratorAtURLIncludingPropertiesForKeysOptionsErrorHandler(self: *@This(), url: ?*URL, keys: ?*anyopaque, mask: DirectoryEnumerationOptions, handler: *const fn(?*URL, ?*Error) callconv(.C) objc.BOOL, ) ?*anyopaque {
        return objc.msgSend(self, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:", ?*anyopaque, .{url, keys, mask, handler, });
    }

    pub fn subpathsAtPath(self: *@This(), path: ?*String) ?*anyopaque {
        return objc.msgSend(self, "subpathsAtPath:", ?*anyopaque, .{path});
    }

    pub fn contentsAtPath(self: *@This(), path: ?*String) ?*Data {
        return objc.msgSend(self, "contentsAtPath:", ?*Data, .{path});
    }

    pub fn createFileAtPathContentsAttributes(self: *@This(), path: ?*String, data: ?*Data, attr: ?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "createFileAtPath:contents:attributes:", objc.BOOL, .{path, data, attr});
    }

    pub fn fileSystemRepresentationWithPath(self: *@This(), path: ?*String) ?*i8 {
        return objc.msgSend(self, "fileSystemRepresentationWithPath:", ?*i8, .{path});
    }

    pub fn stringWithFileSystemRepresentationLength(self: *@This(), str: ?*i8, len: objc.NSUInteger) ?*String {
        return objc.msgSend(self, "stringWithFileSystemRepresentation:length:", ?*String, .{str, len});
    }

    pub fn replaceItemAtURLWithItemAtURLBackupItemNameOptionsResultingItemURLError(self: *@This(), originalItemURL: ?*URL, newItemURL: ?*URL, backupItemName: ?*String, options: FileManagerItemReplacementOptions, resultingURL: ?*?*URL, @"error": ?*?*Error, ) objc.BOOL {
        return objc.msgSend(self, "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:", objc.BOOL, .{originalItemURL, newItemURL, backupItemName, options, resultingURL, @"error", });
    }

    pub fn setUbiquitousItemAtURLDestinationURLError(self: *@This(), flag: objc.BOOL, url: ?*URL, destinationURL: ?*URL, @"error": ?*?*Error, ) objc.BOOL {
        return objc.msgSend(self, "setUbiquitous:itemAtURL:destinationURL:error:", objc.BOOL, .{flag, url, destinationURL, @"error", });
    }

    pub fn isUbiquitousItemAtURL(self: *@This(), url: ?*URL) objc.BOOL {
        return objc.msgSend(self, "isUbiquitousItemAtURL:", objc.BOOL, .{url});
    }

    pub fn startDownloadingUbiquitousItemAtURLError(self: *@This(), url: ?*URL, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "startDownloadingUbiquitousItemAtURL:error:", objc.BOOL, .{url, @"error"});
    }

    pub fn evictUbiquitousItemAtURLError(self: *@This(), url: ?*URL, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "evictUbiquitousItemAtURL:error:", objc.BOOL, .{url, @"error"});
    }

    pub fn URLForUbiquityContainerIdentifier(self: *@This(), containerIdentifier: ?*String) ?*URL {
        return objc.msgSend(self, "URLForUbiquityContainerIdentifier:", ?*URL, .{containerIdentifier});
    }

    pub fn URLForPublishingUbiquitousItemAtURLExpirationDateError(self: *@This(), url: ?*URL, outDate: ?*?*Date, @"error": ?*?*Error) ?*URL {
        return objc.msgSend(self, "URLForPublishingUbiquitousItemAtURL:expirationDate:error:", ?*URL, .{url, outDate, @"error"});
    }

    pub fn getFileProviderServicesForItemAtURLCompletionHandler(self: *@This(), url: ?*URL, completionHandler: *const fn(?*anyopaque, ?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "getFileProviderServicesForItemAtURL:completionHandler:", void, .{url, completionHandler});
    }

    pub fn containerURLForSecurityApplicationGroupIdentifier(self: *@This(), groupIdentifier: ?*String) ?*URL {
        return objc.msgSend(self, "containerURLForSecurityApplicationGroupIdentifier:", ?*URL, .{groupIdentifier});
    }

    pub fn defaultManager(self: *@This()) ?*FileManager {
        return objc.msgSend(self, "defaultManager", ?*FileManager, .{});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn currentDirectoryPath(self: *@This()) ?*String {
        return objc.msgSend(self, "currentDirectoryPath", ?*String, .{});
    }

    pub fn ubiquityIdentityToken(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "ubiquityIdentityToken", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSFileManagerDelegate?language=objc
pub const FileManagerDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn fileManagerShouldCopyItemAtPathToPath(self: *@This(), fileManager: ?*FileManager, srcPath: ?*String, dstPath: ?*String) objc.BOOL {
        return objc.msgSend(self, "fileManager:shouldCopyItemAtPath:toPath:", objc.BOOL, .{fileManager, srcPath, dstPath});
    }

    pub fn fileManagerShouldCopyItemAtURLToURL(self: *@This(), fileManager: ?*FileManager, srcURL: ?*URL, dstURL: ?*URL) objc.BOOL {
        return objc.msgSend(self, "fileManager:shouldCopyItemAtURL:toURL:", objc.BOOL, .{fileManager, srcURL, dstURL});
    }

    pub fn fileManagerShouldProceedAfterErrorCopyingItemAtPathToPath(self: *@This(), fileManager: ?*FileManager, @"error": ?*Error, srcPath: ?*String, dstPath: ?*String, ) objc.BOOL {
        return objc.msgSend(self, "fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:", objc.BOOL, .{fileManager, @"error", srcPath, dstPath, });
    }

    pub fn fileManagerShouldProceedAfterErrorCopyingItemAtURLToURL(self: *@This(), fileManager: ?*FileManager, @"error": ?*Error, srcURL: ?*URL, dstURL: ?*URL, ) objc.BOOL {
        return objc.msgSend(self, "fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:", objc.BOOL, .{fileManager, @"error", srcURL, dstURL, });
    }

    pub fn fileManagerShouldMoveItemAtPathToPath(self: *@This(), fileManager: ?*FileManager, srcPath: ?*String, dstPath: ?*String) objc.BOOL {
        return objc.msgSend(self, "fileManager:shouldMoveItemAtPath:toPath:", objc.BOOL, .{fileManager, srcPath, dstPath});
    }

    pub fn fileManagerShouldMoveItemAtURLToURL(self: *@This(), fileManager: ?*FileManager, srcURL: ?*URL, dstURL: ?*URL) objc.BOOL {
        return objc.msgSend(self, "fileManager:shouldMoveItemAtURL:toURL:", objc.BOOL, .{fileManager, srcURL, dstURL});
    }

    pub fn fileManagerShouldProceedAfterErrorMovingItemAtPathToPath(self: *@This(), fileManager: ?*FileManager, @"error": ?*Error, srcPath: ?*String, dstPath: ?*String, ) objc.BOOL {
        return objc.msgSend(self, "fileManager:shouldProceedAfterError:movingItemAtPath:toPath:", objc.BOOL, .{fileManager, @"error", srcPath, dstPath, });
    }

    pub fn fileManagerShouldProceedAfterErrorMovingItemAtURLToURL(self: *@This(), fileManager: ?*FileManager, @"error": ?*Error, srcURL: ?*URL, dstURL: ?*URL, ) objc.BOOL {
        return objc.msgSend(self, "fileManager:shouldProceedAfterError:movingItemAtURL:toURL:", objc.BOOL, .{fileManager, @"error", srcURL, dstURL, });
    }

    pub fn fileManagerShouldLinkItemAtPathToPath(self: *@This(), fileManager: ?*FileManager, srcPath: ?*String, dstPath: ?*String) objc.BOOL {
        return objc.msgSend(self, "fileManager:shouldLinkItemAtPath:toPath:", objc.BOOL, .{fileManager, srcPath, dstPath});
    }

    pub fn fileManagerShouldLinkItemAtURLToURL(self: *@This(), fileManager: ?*FileManager, srcURL: ?*URL, dstURL: ?*URL) objc.BOOL {
        return objc.msgSend(self, "fileManager:shouldLinkItemAtURL:toURL:", objc.BOOL, .{fileManager, srcURL, dstURL});
    }

    pub fn fileManagerShouldProceedAfterErrorLinkingItemAtPathToPath(self: *@This(), fileManager: ?*FileManager, @"error": ?*Error, srcPath: ?*String, dstPath: ?*String, ) objc.BOOL {
        return objc.msgSend(self, "fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:", objc.BOOL, .{fileManager, @"error", srcPath, dstPath, });
    }

    pub fn fileManagerShouldProceedAfterErrorLinkingItemAtURLToURL(self: *@This(), fileManager: ?*FileManager, @"error": ?*Error, srcURL: ?*URL, dstURL: ?*URL, ) objc.BOOL {
        return objc.msgSend(self, "fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:", objc.BOOL, .{fileManager, @"error", srcURL, dstURL, });
    }

    pub fn fileManagerShouldRemoveItemAtPath(self: *@This(), fileManager: ?*FileManager, path: ?*String) objc.BOOL {
        return objc.msgSend(self, "fileManager:shouldRemoveItemAtPath:", objc.BOOL, .{fileManager, path});
    }

    pub fn fileManagerShouldRemoveItemAtURL(self: *@This(), fileManager: ?*FileManager, URL: ?*URL) objc.BOOL {
        return objc.msgSend(self, "fileManager:shouldRemoveItemAtURL:", objc.BOOL, .{fileManager, URL});
    }

    pub fn fileManagerShouldProceedAfterErrorRemovingItemAtPath(self: *@This(), fileManager: ?*FileManager, @"error": ?*Error, path: ?*String) objc.BOOL {
        return objc.msgSend(self, "fileManager:shouldProceedAfterError:removingItemAtPath:", objc.BOOL, .{fileManager, @"error", path});
    }

    pub fn fileManagerShouldProceedAfterErrorRemovingItemAtURL(self: *@This(), fileManager: ?*FileManager, @"error": ?*Error, URL: ?*URL) objc.BOOL {
        return objc.msgSend(self, "fileManager:shouldProceedAfterError:removingItemAtURL:", objc.BOOL, .{fileManager, @"error", URL});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSDirectoryEnumerator?language=objc
pub const DirectoryEnumerator = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDirectoryEnumerator", @This(), Enumerator, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn skipDescendents(self: *@This()) void {
        return objc.msgSend(self, "skipDescendents", void, .{});
    }

    pub fn skipDescendants(self: *@This()) void {
        return objc.msgSend(self, "skipDescendants", void, .{});
    }

    pub fn fileAttributes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "fileAttributes", ?*anyopaque, .{});
    }

    pub fn directoryAttributes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "directoryAttributes", ?*anyopaque, .{});
    }

    pub fn isEnumeratingDirectoryPostOrder(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEnumeratingDirectoryPostOrder", objc.BOOL, .{});
    }

    pub fn level(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "level", objc.NSUInteger, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSFileProviderService?language=objc
pub const FileProviderService = opaque {
    pub const InternalInfo = objc.ExternalClass("NSFileProviderService", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn getFileProviderConnectionWithCompletionHandler(self: *@This(), completionHandler: *const fn(?*XPCConnection, ?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "getFileProviderConnectionWithCompletionHandler:", void, .{completionHandler});
    }

    pub fn name(self: *@This()) FileProviderServiceName {
        return objc.msgSend(self, "name", FileProviderServiceName, .{});
    }

};

pub const PointerFunctionsOptions = enum(objc.NSUInteger) {
    StrongMemory = 0,
    ZeroingWeakMemory = 1,
    OpaqueMemory = 2,
    MallocMemory = 3,
    MachVirtualMemory = 4,
    WeakMemory = 5,
    ObjectPersonality = 0,
    OpaquePersonality = 256,
    ObjectPointerPersonality = 512,
    CStringPersonality = 768,
    StructPersonality = 1024,
    IntegerPersonality = 1280,
    CopyIn = 65536,
};

/// https://developer.apple.com/documentation/Foundation/NSPointerFunctions?language=objc
pub const PointerFunctions = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPointerFunctions", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithOptions(self: *@This(), options: PointerFunctionsOptions) *@This() {
        return objc.msgSend(self, "initWithOptions:", *@This(), .{options});
    }

    pub fn pointerFunctionsWithOptions(self: *@This(), options: PointerFunctionsOptions) ?*PointerFunctions {
        return objc.msgSend(self, "pointerFunctionsWithOptions:", ?*PointerFunctions, .{options});
    }

    pub fn hashFunction(self: *@This()) ?*const fn(?*anyopaque, ?*const fn(?*anyopaque) callconv(.C) objc.NSUInteger) callconv(.C) objc.NSUInteger {
        return objc.msgSend(self, "hashFunction", ?*const fn(?*anyopaque, ?*const fn(?*anyopaque) callconv(.C) objc.NSUInteger) callconv(.C) objc.NSUInteger, .{});
    }

    pub fn setHashFunction(self: *@This(), hashFunction: ?*const fn(?*anyopaque, ?*const fn(?*anyopaque) callconv(.C) objc.NSUInteger) callconv(.C) objc.NSUInteger) void {
        return objc.msgSend(self, "setHashFunction:", void, .{hashFunction});
    }

    pub fn isEqualFunction(self: *@This()) ?*const fn(?*anyopaque, ?*anyopaque, ?*const fn(?*anyopaque) callconv(.C) objc.NSUInteger) callconv(.C) objc.BOOL {
        return objc.msgSend(self, "isEqualFunction", ?*const fn(?*anyopaque, ?*anyopaque, ?*const fn(?*anyopaque) callconv(.C) objc.NSUInteger) callconv(.C) objc.BOOL, .{});
    }

    pub fn setIsEqualFunction(self: *@This(), isEqualFunction: ?*const fn(?*anyopaque, ?*anyopaque, ?*const fn(?*anyopaque) callconv(.C) objc.NSUInteger) callconv(.C) objc.BOOL) void {
        return objc.msgSend(self, "setIsEqualFunction:", void, .{isEqualFunction});
    }

    pub fn sizeFunction(self: *@This()) ?*const fn(?*anyopaque) callconv(.C) objc.NSUInteger {
        return objc.msgSend(self, "sizeFunction", ?*const fn(?*anyopaque) callconv(.C) objc.NSUInteger, .{});
    }

    pub fn setSizeFunction(self: *@This(), sizeFunction: ?*const fn(?*anyopaque) callconv(.C) objc.NSUInteger) void {
        return objc.msgSend(self, "setSizeFunction:", void, .{sizeFunction});
    }

    pub fn descriptionFunction(self: *@This()) ?*const fn(?*anyopaque) callconv(.C) ?*String {
        return objc.msgSend(self, "descriptionFunction", ?*const fn(?*anyopaque) callconv(.C) ?*String, .{});
    }

    pub fn setDescriptionFunction(self: *@This(), descriptionFunction: ?*const fn(?*anyopaque) callconv(.C) ?*String) void {
        return objc.msgSend(self, "setDescriptionFunction:", void, .{descriptionFunction});
    }

    pub fn relinquishFunction(self: *@This()) ?*const fn(?*anyopaque, ?*const fn(?*anyopaque) callconv(.C) objc.NSUInteger) callconv(.C) void {
        return objc.msgSend(self, "relinquishFunction", ?*const fn(?*anyopaque, ?*const fn(?*anyopaque) callconv(.C) objc.NSUInteger) callconv(.C) void, .{});
    }

    pub fn setRelinquishFunction(self: *@This(), relinquishFunction: ?*const fn(?*anyopaque, ?*const fn(?*anyopaque) callconv(.C) objc.NSUInteger) callconv(.C) void) void {
        return objc.msgSend(self, "setRelinquishFunction:", void, .{relinquishFunction});
    }

    pub fn acquireFunction(self: *@This()) ?*const fn(?*anyopaque, ?*const fn(?*anyopaque) callconv(.C) objc.NSUInteger, objc.BOOL) callconv(.C) ?*anyopaque {
        return objc.msgSend(self, "acquireFunction", ?*const fn(?*anyopaque, ?*const fn(?*anyopaque) callconv(.C) objc.NSUInteger, objc.BOOL) callconv(.C) ?*anyopaque, .{});
    }

    pub fn setAcquireFunction(self: *@This(), acquireFunction: ?*const fn(?*anyopaque, ?*const fn(?*anyopaque) callconv(.C) objc.NSUInteger, objc.BOOL) callconv(.C) ?*anyopaque) void {
        return objc.msgSend(self, "setAcquireFunction:", void, .{acquireFunction});
    }

    pub fn usesStrongWriteBarrier(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesStrongWriteBarrier", objc.BOOL, .{});
    }

    pub fn setUsesStrongWriteBarrier(self: *@This(), usesStrongWriteBarrier: objc.BOOL) void {
        return objc.msgSend(self, "setUsesStrongWriteBarrier:", void, .{usesStrongWriteBarrier});
    }

    pub fn usesWeakReadAndWriteBarriers(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesWeakReadAndWriteBarriers", objc.BOOL, .{});
    }

    pub fn setUsesWeakReadAndWriteBarriers(self: *@This(), usesWeakReadAndWriteBarriers: objc.BOOL) void {
        return objc.msgSend(self, "setUsesWeakReadAndWriteBarriers:", void, .{usesWeakReadAndWriteBarriers});
    }

};

pub const HashTableOptions = objc.NSUInteger;

/// https://developer.apple.com/documentation/Foundation/NSHashTable?language=objc
pub const HashTable = opaque {
    pub const InternalInfo = objc.ExternalClass("NSHashTable", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithOptionsCapacity(self: *@This(), options: PointerFunctionsOptions, initialCapacity: objc.NSUInteger) *@This() {
        return objc.msgSend(self, "initWithOptions:capacity:", *@This(), .{options, initialCapacity});
    }

    pub fn initWithPointerFunctionsCapacity(self: *@This(), functions: ?*PointerFunctions, initialCapacity: objc.NSUInteger) *@This() {
        return objc.msgSend(self, "initWithPointerFunctions:capacity:", *@This(), .{functions, initialCapacity});
    }

    pub fn hashTableWithOptions(self: *@This(), options: PointerFunctionsOptions) ?*anyopaque {
        return objc.msgSend(self, "hashTableWithOptions:", ?*anyopaque, .{options});
    }

    pub fn hashTableWithWeakObjects(self: *@This()) *objc.Id {
        return objc.msgSend(self, "hashTableWithWeakObjects", *objc.Id, .{});
    }

    pub fn weakObjectsHashTable(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "weakObjectsHashTable", ?*anyopaque, .{});
    }

    pub fn member(self: *@This(), object: void) void {
        return objc.msgSend(self, "member:", void, .{object});
    }

    pub fn objectEnumerator(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "objectEnumerator", ?*anyopaque, .{});
    }

    pub fn addObject(self: *@This(), object: void) void {
        return objc.msgSend(self, "addObject:", void, .{object});
    }

    pub fn removeObject(self: *@This(), object: void) void {
        return objc.msgSend(self, "removeObject:", void, .{object});
    }

    pub fn removeAllObjects(self: *@This()) void {
        return objc.msgSend(self, "removeAllObjects", void, .{});
    }

    pub fn containsObject(self: *@This(), anObject: void) objc.BOOL {
        return objc.msgSend(self, "containsObject:", objc.BOOL, .{anObject});
    }

    pub fn intersectsHashTable(self: *@This(), other: ?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "intersectsHashTable:", objc.BOOL, .{other});
    }

    pub fn isEqualToHashTable(self: *@This(), other: ?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "isEqualToHashTable:", objc.BOOL, .{other});
    }

    pub fn isSubsetOfHashTable(self: *@This(), other: ?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "isSubsetOfHashTable:", objc.BOOL, .{other});
    }

    pub fn intersectHashTable(self: *@This(), other: ?*anyopaque) void {
        return objc.msgSend(self, "intersectHashTable:", void, .{other});
    }

    pub fn unionHashTable(self: *@This(), other: ?*anyopaque) void {
        return objc.msgSend(self, "unionHashTable:", void, .{other});
    }

    pub fn minusHashTable(self: *@This(), other: ?*anyopaque) void {
        return objc.msgSend(self, "minusHashTable:", void, .{other});
    }

    pub fn pointerFunctions(self: *@This()) ?*PointerFunctions {
        return objc.msgSend(self, "pointerFunctions", ?*PointerFunctions, .{});
    }

    pub fn count(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "count", objc.NSUInteger, .{});
    }

    pub fn allObjects(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "allObjects", ?*anyopaque, .{});
    }

    pub fn anyObject(self: *@This()) void {
        return objc.msgSend(self, "anyObject", void, .{});
    }

    pub fn setRepresentation(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "setRepresentation", ?*anyopaque, .{});
    }

};

pub const HashEnumerator = extern struct {
    _pi: objc.NSUInteger,
    _si: objc.NSUInteger,
    _bs: ?*anyopaque,
};

pub extern "Foundation" fn FreeHashTable(table: ?*HashTable) callconv(.C) void;

pub extern "Foundation" fn ResetHashTable(table: ?*HashTable) callconv(.C) void;

pub extern "Foundation" fn CompareHashTables(table1: ?*HashTable, table2: ?*HashTable) callconv(.C) objc.BOOL;

pub extern "Foundation" fn CopyHashTableWithZone(table: ?*HashTable, zone: ?*Zone) callconv(.C) ?*HashTable;

pub extern "Foundation" fn HashGet(table: ?*HashTable, pointer: ?*anyopaque) callconv(.C) ?*anyopaque;

pub extern "Foundation" fn HashInsert(table: ?*HashTable, pointer: ?*anyopaque) callconv(.C) void;

pub extern "Foundation" fn HashInsertKnownAbsent(table: ?*HashTable, pointer: ?*anyopaque) callconv(.C) void;

pub extern "Foundation" fn HashInsertIfAbsent(table: ?*HashTable, pointer: ?*anyopaque) callconv(.C) ?*anyopaque;

pub extern "Foundation" fn HashRemove(table: ?*HashTable, pointer: ?*anyopaque) callconv(.C) void;

pub extern "Foundation" fn EnumerateHashTable(table: ?*HashTable) callconv(.C) HashEnumerator;

pub extern "Foundation" fn NextHashEnumeratorItem(enumerator: ?*HashEnumerator) callconv(.C) ?*anyopaque;

pub extern "Foundation" fn EndHashTableEnumeration(enumerator: ?*HashEnumerator) callconv(.C) void;

pub extern "Foundation" fn CountHashTable(table: ?*HashTable) callconv(.C) objc.NSUInteger;

pub extern "Foundation" fn StringFromHashTable(table: ?*HashTable) callconv(.C) ?*String;

pub extern "Foundation" fn AllHashTableObjects(table: ?*HashTable) callconv(.C) ?*Array;

pub const HashTableCallBacks = extern struct {
    hash: ?*const fn(?*HashTable, ?*anyopaque) callconv(.C) objc.NSUInteger,
    isEqual: ?*const fn(?*HashTable, ?*anyopaque, ?*anyopaque) callconv(.C) objc.BOOL,
    retain: ?*const fn(?*HashTable, ?*anyopaque) callconv(.C) void,
    release: ?*const fn(?*HashTable, ?*anyopaque) callconv(.C) void,
    describe: ?*const fn(?*HashTable, ?*anyopaque) callconv(.C) ?*String,
};

pub extern "Foundation" fn CreateHashTableWithZone(callBacks: HashTableCallBacks, capacity: objc.NSUInteger, zone: ?*Zone) callconv(.C) ?*HashTable;

pub extern "Foundation" fn CreateHashTable(callBacks: HashTableCallBacks, capacity: objc.NSUInteger) callconv(.C) ?*HashTable;

pub const HTTPCookiePropertyKey = ?*String;

pub const HTTPCookieStringPolicy = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSHTTPCookie?language=objc
pub const HTTPCookie = opaque {
    pub const InternalInfo = objc.ExternalClass("NSHTTPCookie", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithProperties(self: *@This(), properties: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithProperties:", *@This(), .{properties});
    }

    pub fn cookieWithProperties(self: *@This(), properties: ?*anyopaque) ?*HTTPCookie {
        return objc.msgSend(self, "cookieWithProperties:", ?*HTTPCookie, .{properties});
    }

    pub fn requestHeaderFieldsWithCookies(self: *@This(), cookies: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "requestHeaderFieldsWithCookies:", ?*anyopaque, .{cookies});
    }

    pub fn cookiesWithResponseHeaderFieldsForURL(self: *@This(), headerFields: ?*anyopaque, URL: ?*URL) ?*anyopaque {
        return objc.msgSend(self, "cookiesWithResponseHeaderFields:forURL:", ?*anyopaque, .{headerFields, URL});
    }

    pub fn properties(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "properties", ?*anyopaque, .{});
    }

    pub fn version(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "version", objc.NSUInteger, .{});
    }

    pub fn name(self: *@This()) ?*String {
        return objc.msgSend(self, "name", ?*String, .{});
    }

    pub fn value(self: *@This()) ?*String {
        return objc.msgSend(self, "value", ?*String, .{});
    }

    pub fn expiresDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "expiresDate", ?*Date, .{});
    }

    pub fn isSessionOnly(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isSessionOnly", objc.BOOL, .{});
    }

    pub fn domain(self: *@This()) ?*String {
        return objc.msgSend(self, "domain", ?*String, .{});
    }

    pub fn path(self: *@This()) ?*String {
        return objc.msgSend(self, "path", ?*String, .{});
    }

    pub fn isSecure(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isSecure", objc.BOOL, .{});
    }

    pub fn isHTTPOnly(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isHTTPOnly", objc.BOOL, .{});
    }

    pub fn comment(self: *@This()) ?*String {
        return objc.msgSend(self, "comment", ?*String, .{});
    }

    pub fn commentURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "commentURL", ?*URL, .{});
    }

    pub fn portList(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "portList", ?*anyopaque, .{});
    }

    pub fn sameSitePolicy(self: *@This()) HTTPCookieStringPolicy {
        return objc.msgSend(self, "sameSitePolicy", HTTPCookieStringPolicy, .{});
    }

};

pub const HTTPCookieAcceptPolicy = enum(objc.NSUInteger) {
    Always = 0,
    Never = 1,
    OnlyFromMainDocumentDomain = 2,
};

/// https://developer.apple.com/documentation/Foundation/NSHTTPCookieStorage?language=objc
pub const HTTPCookieStorage = opaque {
    pub const InternalInfo = objc.ExternalClass("NSHTTPCookieStorage", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn sharedCookieStorageForGroupContainerIdentifier(self: *@This(), identifier: ?*String) ?*HTTPCookieStorage {
        return objc.msgSend(self, "sharedCookieStorageForGroupContainerIdentifier:", ?*HTTPCookieStorage, .{identifier});
    }

    pub fn setCookie(self: *@This(), cookie: ?*HTTPCookie) void {
        return objc.msgSend(self, "setCookie:", void, .{cookie});
    }

    pub fn deleteCookie(self: *@This(), cookie: ?*HTTPCookie) void {
        return objc.msgSend(self, "deleteCookie:", void, .{cookie});
    }

    pub fn removeCookiesSinceDate(self: *@This(), date: ?*Date) void {
        return objc.msgSend(self, "removeCookiesSinceDate:", void, .{date});
    }

    pub fn cookiesForURL(self: *@This(), URL: ?*URL) ?*anyopaque {
        return objc.msgSend(self, "cookiesForURL:", ?*anyopaque, .{URL});
    }

    pub fn setCookiesForURLMainDocumentURL(self: *@This(), cookies: ?*anyopaque, URL: ?*URL, mainDocumentURL: ?*URL) void {
        return objc.msgSend(self, "setCookies:forURL:mainDocumentURL:", void, .{cookies, URL, mainDocumentURL});
    }

    pub fn sortedCookiesUsingDescriptors(self: *@This(), sortOrder: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "sortedCookiesUsingDescriptors:", ?*anyopaque, .{sortOrder});
    }

    pub fn sharedHTTPCookieStorage(self: *@This()) ?*HTTPCookieStorage {
        return objc.msgSend(self, "sharedHTTPCookieStorage", ?*HTTPCookieStorage, .{});
    }

    pub fn cookies(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "cookies", ?*anyopaque, .{});
    }

    pub fn cookieAcceptPolicy(self: *@This()) HTTPCookieAcceptPolicy {
        return objc.msgSend(self, "cookieAcceptPolicy", HTTPCookieAcceptPolicy, .{});
    }

    pub fn setCookieAcceptPolicy(self: *@This(), cookieAcceptPolicy: HTTPCookieAcceptPolicy) void {
        return objc.msgSend(self, "setCookieAcceptPolicy:", void, .{cookieAcceptPolicy});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSIndexPath?language=objc
pub const IndexPath = opaque {
    pub const InternalInfo = objc.ExternalClass("NSIndexPath", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn indexPathWithIndex(self: *@This(), index: objc.NSUInteger) *@This() {
        return objc.msgSend(self, "indexPathWithIndex:", *@This(), .{index});
    }

    pub fn indexPathWithIndexesLength(self: *@This(), indexes: ?*objc.NSUInteger, length: objc.NSUInteger) *@This() {
        return objc.msgSend(self, "indexPathWithIndexes:length:", *@This(), .{indexes, length});
    }

    pub fn initWithIndexesLength(self: *@This(), indexes: ?*objc.NSUInteger, length: objc.NSUInteger) *@This() {
        return objc.msgSend(self, "initWithIndexes:length:", *@This(), .{indexes, length});
    }

    pub fn initWithIndex(self: *@This(), index: objc.NSUInteger) *@This() {
        return objc.msgSend(self, "initWithIndex:", *@This(), .{index});
    }

    pub fn indexPathByAddingIndex(self: *@This(), index: objc.NSUInteger) ?*IndexPath {
        return objc.msgSend(self, "indexPathByAddingIndex:", ?*IndexPath, .{index});
    }

    pub fn indexPathByRemovingLastIndex(self: *@This()) ?*IndexPath {
        return objc.msgSend(self, "indexPathByRemovingLastIndex", ?*IndexPath, .{});
    }

    pub fn indexAtPosition(self: *@This(), position: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(self, "indexAtPosition:", objc.NSUInteger, .{position});
    }

    pub fn getIndexesRange(self: *@This(), indexes: ?*objc.NSUInteger, positionRange: Range) void {
        return objc.msgSend(self, "getIndexes:range:", void, .{indexes, positionRange});
    }

    pub fn compare(self: *@This(), otherObject: ?*IndexPath) ComparisonResult {
        return objc.msgSend(self, "compare:", ComparisonResult, .{otherObject});
    }

    pub fn length(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "length", objc.NSUInteger, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSInflectionRule?language=objc
pub const InflectionRule = opaque {
    pub const InternalInfo = objc.ExternalClass("NSInflectionRule", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *objc.Id {
        return objc.msgSend(self, "init", *objc.Id, .{});
    }

    pub fn automaticRule(self: *@This()) ?*InflectionRule {
        return objc.msgSend(self, "automaticRule", ?*InflectionRule, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSInflectionRuleExplicit?language=objc
pub const InflectionRuleExplicit = opaque {
    pub const InternalInfo = objc.ExternalClass("NSInflectionRuleExplicit", @This(), InflectionRule, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithMorphology(self: *@This(), morphology: ?*Morphology) *@This() {
        return objc.msgSend(self, "initWithMorphology:", *@This(), .{morphology});
    }

    pub fn morphology(self: *@This()) ?*Morphology {
        return objc.msgSend(self, "morphology", ?*Morphology, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSInvocation?language=objc
pub const Invocation = opaque {
    pub const InternalInfo = objc.ExternalClass("NSInvocation", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn invocationWithMethodSignature(self: *@This(), sig: ?*MethodSignature) ?*Invocation {
        return objc.msgSend(self, "invocationWithMethodSignature:", ?*Invocation, .{sig});
    }

    pub fn retainArguments(self: *@This()) void {
        return objc.msgSend(self, "retainArguments", void, .{});
    }

    pub fn getReturnValue(self: *@This(), retLoc: ?*anyopaque) void {
        return objc.msgSend(self, "getReturnValue:", void, .{retLoc});
    }

    pub fn setReturnValue(self: *@This(), retLoc: ?*anyopaque) void {
        return objc.msgSend(self, "setReturnValue:", void, .{retLoc});
    }

    pub fn getArgumentAtIndex(self: *@This(), argumentLocation: ?*anyopaque, idx: objc.NSInteger) void {
        return objc.msgSend(self, "getArgument:atIndex:", void, .{argumentLocation, idx});
    }

    pub fn setArgumentAtIndex(self: *@This(), argumentLocation: ?*anyopaque, idx: objc.NSInteger) void {
        return objc.msgSend(self, "setArgument:atIndex:", void, .{argumentLocation, idx});
    }

    pub fn invoke(self: *@This()) void {
        return objc.msgSend(self, "invoke", void, .{});
    }

    pub fn invokeWithTarget(self: *@This(), target: *objc.Id) void {
        return objc.msgSend(self, "invokeWithTarget:", void, .{target});
    }

    pub fn invokeUsingIMP(self: *@This(), imp: objc.IMP) void {
        return objc.msgSend(self, "invokeUsingIMP:", void, .{imp});
    }

    pub fn methodSignature(self: *@This()) ?*MethodSignature {
        return objc.msgSend(self, "methodSignature", ?*MethodSignature, .{});
    }

    pub fn argumentsRetained(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "argumentsRetained", objc.BOOL, .{});
    }

    pub fn target(self: *@This()) *objc.Id {
        return objc.msgSend(self, "target", *objc.Id, .{});
    }

    pub fn setTarget(self: *@This(), target: *objc.Id) void {
        return objc.msgSend(self, "setTarget:", void, .{target});
    }

    pub fn selector(self: *@This()) *objc.SEL {
        return objc.msgSend(self, "selector", *objc.SEL, .{});
    }

    pub fn setSelector(self: *@This(), selector: *objc.SEL) void {
        return objc.msgSend(self, "setSelector:", void, .{selector});
    }

};

pub const JSONReadingOptions = enum(objc.NSUInteger) {
    MutableContainers = 1,
    MutableLeaves = 2,
    FragmentsAllowed = 4,
    JSON5Allowed = 8,
    TopLevelDictionaryAssumed = 16,
    AllowFragments = 4,
};

pub const JSONWritingOptions = enum(objc.NSUInteger) {
    PrettyPrinted = 1,
    SortedKeys = 2,
    FragmentsAllowed = 4,
    WithoutEscapingSlashes = 8,
};

/// https://developer.apple.com/documentation/Foundation/NSJSONSerialization?language=objc
pub const JSONSerialization = opaque {
    pub const InternalInfo = objc.ExternalClass("NSJSONSerialization", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isValidJSONObject(self: *@This(), obj: *objc.Id) objc.BOOL {
        return objc.msgSend(self, "isValidJSONObject:", objc.BOOL, .{obj});
    }

    pub fn dataWithJSONObjectOptionsError(self: *@This(), obj: *objc.Id, opt: JSONWritingOptions, @"error": ?*?*Error) ?*Data {
        return objc.msgSend(self, "dataWithJSONObject:options:error:", ?*Data, .{obj, opt, @"error"});
    }

    pub fn JSONObjectWithDataOptionsError(self: *@This(), data: ?*Data, opt: JSONReadingOptions, @"error": ?*?*Error) *objc.Id {
        return objc.msgSend(self, "JSONObjectWithData:options:error:", *objc.Id, .{data, opt, @"error"});
    }

    pub fn writeJSONObjectToStreamOptionsError(self: *@This(), obj: *objc.Id, stream: ?*OutputStream, opt: JSONWritingOptions, @"error": ?*?*Error, ) objc.NSInteger {
        return objc.msgSend(self, "writeJSONObject:toStream:options:error:", objc.NSInteger, .{obj, stream, opt, @"error", });
    }

    pub fn JSONObjectWithStreamOptionsError(self: *@This(), stream: ?*InputStream, opt: JSONReadingOptions, @"error": ?*?*Error) *objc.Id {
        return objc.msgSend(self, "JSONObjectWithStream:options:error:", *objc.Id, .{stream, opt, @"error"});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSOrderedSet?language=objc
pub const OrderedSet = opaque {
    pub const InternalInfo = objc.ExternalClass("NSOrderedSet", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn objectAtIndex(self: *@This(), idx: objc.NSUInteger) void {
        return objc.msgSend(self, "objectAtIndex:", void, .{idx});
    }

    pub fn indexOfObject(self: *@This(), object: void) objc.NSUInteger {
        return objc.msgSend(self, "indexOfObject:", objc.NSUInteger, .{object});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithObjectsCount(self: *@This(), objects: ?*anyopaque, cnt: objc.NSUInteger) *@This() {
        return objc.msgSend(self, "initWithObjects:count:", *@This(), .{objects, cnt});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn count(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "count", objc.NSUInteger, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSMutableOrderedSet?language=objc
pub const MutableOrderedSet = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMutableOrderedSet", @This(), OrderedSet, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn insertObjectAtIndex(self: *@This(), object: void, idx: objc.NSUInteger) void {
        return objc.msgSend(self, "insertObject:atIndex:", void, .{object, idx});
    }

    pub fn removeObjectAtIndex(self: *@This(), idx: objc.NSUInteger) void {
        return objc.msgSend(self, "removeObjectAtIndex:", void, .{idx});
    }

    pub fn replaceObjectAtIndexWithObject(self: *@This(), idx: objc.NSUInteger, object: void) void {
        return objc.msgSend(self, "replaceObjectAtIndex:withObject:", void, .{idx, object});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithCapacity(self: *@This(), numItems: objc.NSUInteger) *@This() {
        return objc.msgSend(self, "initWithCapacity:", *@This(), .{numItems});
    }

};

pub const KeyValueOperator = ?*String;

pub const KeyValueObservingOptions = enum(objc.NSUInteger) {
    New = 1,
    Old = 2,
    Initial = 4,
    Prior = 8,
};

pub const KeyValueChange = enum(objc.NSUInteger) {
    Setting = 1,
    Insertion = 2,
    Removal = 3,
    Replacement = 4,
};

pub const KeyValueSetMutationKind = enum(objc.NSUInteger) {
    UnionSetMutation = 1,
    MinusSetMutation = 2,
    IntersectSetMutation = 3,
    SetMutation = 4,
};

pub const KeyValueChangeKey = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSKeyValueSharedObserversSnapshot?language=objc
pub const KeyValueSharedObserversSnapshot = opaque {
    pub const InternalInfo = objc.ExternalClass("NSKeyValueSharedObserversSnapshot", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *objc.Id {
        return objc.msgSend(self, "init", *objc.Id, .{});
    }

    pub fn new(self: *@This()) *objc.Id {
        return objc.msgSend(self, "new", *objc.Id, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSKeyValueSharedObservers?language=objc
pub const KeyValueSharedObservers = opaque {
    pub const InternalInfo = objc.ExternalClass("NSKeyValueSharedObservers", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithObservableClass(self: *@This(), observableClass: *objc.Class) *objc.Id {
        return objc.msgSend(self, "initWithObservableClass:", *objc.Id, .{observableClass});
    }

    pub fn init(self: *@This()) *objc.Id {
        return objc.msgSend(self, "init", *objc.Id, .{});
    }

    pub fn new(self: *@This()) *objc.Id {
        return objc.msgSend(self, "new", *objc.Id, .{});
    }

    pub fn addSharedObserverForKeyOptionsContext(self: *@This(), observer: ?*objc.NSObject, key: ?*String, options: KeyValueObservingOptions, context: ?*anyopaque, ) void {
        return objc.msgSend(self, "addSharedObserver:forKey:options:context:", void, .{observer, key, options, context, });
    }

    pub fn addObserverForKeyPathOptionsContext(self: *@This(), observer: ?*objc.NSObject, keyPath: ?*String, options: KeyValueObservingOptions, context: ?*anyopaque, ) void {
        return objc.msgSend(self, "addObserver:forKeyPath:options:context:", void, .{observer, keyPath, options, context, });
    }

    pub fn snapshot(self: *@This()) ?*KeyValueSharedObserversSnapshot {
        return objc.msgSend(self, "snapshot", ?*KeyValueSharedObserversSnapshot, .{});
    }

};

pub const PropertyListMutabilityOptions = enum(objc.NSUInteger) {
    Immutable = 0,
    MutableContainers = 1,
    MutableContainersAndLeaves = 2,
};

pub const PropertyListFormat = enum(objc.NSUInteger) {
    OpenStepFormat = 1,
    XMLFormat_v1_0 = 100,
    BinaryFormat_v1_0 = 200,
};

pub const PropertyListReadOptions = PropertyListMutabilityOptions;

pub const PropertyListWriteOptions = objc.NSUInteger;

/// https://developer.apple.com/documentation/Foundation/NSPropertyListSerialization?language=objc
pub const PropertyListSerialization = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPropertyListSerialization", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn propertyListIsValidForFormat(self: *@This(), plist: *objc.Id, format: PropertyListFormat) objc.BOOL {
        return objc.msgSend(self, "propertyList:isValidForFormat:", objc.BOOL, .{plist, format});
    }

    pub fn dataWithPropertyListFormatOptionsError(self: *@This(), plist: *objc.Id, format: PropertyListFormat, opt: PropertyListWriteOptions, @"error": ?*?*Error, ) ?*Data {
        return objc.msgSend(self, "dataWithPropertyList:format:options:error:", ?*Data, .{plist, format, opt, @"error", });
    }

    pub fn writePropertyListToStreamFormatOptionsError(self: *@This(), plist: *objc.Id, stream: ?*OutputStream, format: PropertyListFormat, opt: PropertyListWriteOptions, @"error": ?*?*Error, ) objc.NSInteger {
        return objc.msgSend(self, "writePropertyList:toStream:format:options:error:", objc.NSInteger, .{plist, stream, format, opt, @"error", });
    }

    pub fn propertyListWithDataOptionsFormatError(self: *@This(), data: ?*Data, opt: PropertyListReadOptions, format: ?*PropertyListFormat, @"error": ?*?*Error, ) *objc.Id {
        return objc.msgSend(self, "propertyListWithData:options:format:error:", *objc.Id, .{data, opt, format, @"error", });
    }

    pub fn propertyListWithStreamOptionsFormatError(self: *@This(), stream: ?*InputStream, opt: PropertyListReadOptions, format: ?*PropertyListFormat, @"error": ?*?*Error, ) *objc.Id {
        return objc.msgSend(self, "propertyListWithStream:options:format:error:", *objc.Id, .{stream, opt, format, @"error", });
    }

    pub fn dataFromPropertyListFormatErrorDescription(self: *@This(), plist: *objc.Id, format: PropertyListFormat, errorString: ?*?*String) ?*Data {
        return objc.msgSend(self, "dataFromPropertyList:format:errorDescription:", ?*Data, .{plist, format, errorString});
    }

    pub fn propertyListFromDataMutabilityOptionFormatErrorDescription(self: *@This(), data: ?*Data, opt: PropertyListMutabilityOptions, format: ?*PropertyListFormat, errorString: ?*?*String, ) *objc.Id {
        return objc.msgSend(self, "propertyListFromData:mutabilityOption:format:errorDescription:", *objc.Id, .{data, opt, format, errorString, });
    }

};

pub const Point = core_foundation.CGPoint;

pub const PointPointer = ?*Point;

pub const PointArray = ?*Point;

pub const Size = core_foundation.CGSize;

pub const SizePointer = ?*Size;

pub const SizeArray = ?*Size;

pub const Rect = core_foundation.CGRect;

pub const RectPointer = ?*Rect;

pub const RectArray = ?*Rect;

pub const RectEdge = enum(objc.NSUInteger) {
    MinX = 0,
    MinY = 1,
    MaxX = 2,
    MaxY = 3,
    MinXEdge = 0,
    MinYEdge = 1,
    MaxXEdge = 2,
    MaxYEdge = 3,
};

pub const EdgeInsets = extern struct {
    top: core_foundation.CGFloat,
    left: core_foundation.CGFloat,
    bottom: core_foundation.CGFloat,
    right: core_foundation.CGFloat,
};

pub const AlignmentOptions = enum(u64) {
    MinXInward = 1,
    MinYInward = 2,
    MaxXInward = 4,
    MaxYInward = 8,
    WidthInward = 16,
    HeightInward = 32,
    MinXOutward = 256,
    MinYOutward = 512,
    MaxXOutward = 1024,
    MaxYOutward = 2048,
    WidthOutward = 4096,
    HeightOutward = 8192,
    MinXNearest = 65536,
    MinYNearest = 131072,
    MaxXNearest = 262144,
    MaxYNearest = 524288,
    WidthNearest = 1048576,
    HeightNearest = 2097152,
    RectFlipped = -9223372036854775808,
    AllEdgesInward = 15,
    AllEdgesOutward = 3840,
    AllEdgesNearest = 983040,
};

pub extern "Foundation" fn MakePoint(x: core_foundation.CGFloat, y: core_foundation.CGFloat) callconv(.C) Point;

pub extern "Foundation" fn MakeSize(w: core_foundation.CGFloat, h: core_foundation.CGFloat) callconv(.C) Size;

pub extern "Foundation" fn MakeRect(x: core_foundation.CGFloat, y: core_foundation.CGFloat, w: core_foundation.CGFloat, h: core_foundation.CGFloat, ) callconv(.C) Rect;

pub extern "Foundation" fn MaxX(aRect: Rect) callconv(.C) core_foundation.CGFloat;

pub extern "Foundation" fn MaxY(aRect: Rect) callconv(.C) core_foundation.CGFloat;

pub extern "Foundation" fn MidX(aRect: Rect) callconv(.C) core_foundation.CGFloat;

pub extern "Foundation" fn MidY(aRect: Rect) callconv(.C) core_foundation.CGFloat;

pub extern "Foundation" fn MinX(aRect: Rect) callconv(.C) core_foundation.CGFloat;

pub extern "Foundation" fn MinY(aRect: Rect) callconv(.C) core_foundation.CGFloat;

pub extern "Foundation" fn Width(aRect: Rect) callconv(.C) core_foundation.CGFloat;

pub extern "Foundation" fn Height(aRect: Rect) callconv(.C) core_foundation.CGFloat;

pub extern "Foundation" fn RectFromCGRect(cgrect: core_foundation.CGRect) callconv(.C) Rect;

pub extern "Foundation" fn RectToCGRect(nsrect: Rect) callconv(.C) core_foundation.CGRect;

pub extern "Foundation" fn PointFromCGPoint(cgpoint: core_foundation.CGPoint) callconv(.C) Point;

pub extern "Foundation" fn PointToCGPoint(nspoint: Point) callconv(.C) core_foundation.CGPoint;

pub extern "Foundation" fn SizeFromCGSize(cgsize: core_foundation.CGSize) callconv(.C) Size;

pub extern "Foundation" fn SizeToCGSize(nssize: Size) callconv(.C) core_foundation.CGSize;

pub extern "Foundation" fn EdgeInsetsMake(top: core_foundation.CGFloat, left: core_foundation.CGFloat, bottom: core_foundation.CGFloat, right: core_foundation.CGFloat, ) callconv(.C) EdgeInsets;

pub extern "Foundation" fn EqualPoints(aPoint: Point, bPoint: Point) callconv(.C) objc.BOOL;

pub extern "Foundation" fn EqualSizes(aSize: Size, bSize: Size) callconv(.C) objc.BOOL;

pub extern "Foundation" fn EqualRects(aRect: Rect, bRect: Rect) callconv(.C) objc.BOOL;

pub extern "Foundation" fn IsEmptyRect(aRect: Rect) callconv(.C) objc.BOOL;

pub extern "Foundation" fn EdgeInsetsEqual(aInsets: EdgeInsets, bInsets: EdgeInsets) callconv(.C) objc.BOOL;

pub extern "Foundation" fn InsetRect(aRect: Rect, dX: core_foundation.CGFloat, dY: core_foundation.CGFloat) callconv(.C) Rect;

pub extern "Foundation" fn IntegralRect(aRect: Rect) callconv(.C) Rect;

pub extern "Foundation" fn IntegralRectWithOptions(aRect: Rect, opts: AlignmentOptions) callconv(.C) Rect;

pub extern "Foundation" fn UnionRect(aRect: Rect, bRect: Rect) callconv(.C) Rect;

pub extern "Foundation" fn IntersectionRect(aRect: Rect, bRect: Rect) callconv(.C) Rect;

pub extern "Foundation" fn OffsetRect(aRect: Rect, dX: core_foundation.CGFloat, dY: core_foundation.CGFloat) callconv(.C) Rect;

pub extern "Foundation" fn DivideRect(inRect: Rect, slice: ?*Rect, rem: ?*Rect, amount: core_foundation.CGFloat, edge: RectEdge, ) callconv(.C) void;

pub extern "Foundation" fn PointInRect(aPoint: Point, aRect: Rect) callconv(.C) objc.BOOL;

pub extern "Foundation" fn MouseInRect(aPoint: Point, aRect: Rect, flipped: objc.BOOL) callconv(.C) objc.BOOL;

pub extern "Foundation" fn ContainsRect(aRect: Rect, bRect: Rect) callconv(.C) objc.BOOL;

pub extern "Foundation" fn IntersectsRect(aRect: Rect, bRect: Rect) callconv(.C) objc.BOOL;

pub extern "Foundation" fn StringFromPoint(aPoint: Point) callconv(.C) ?*String;

pub extern "Foundation" fn StringFromSize(aSize: Size) callconv(.C) ?*String;

pub extern "Foundation" fn StringFromRect(aRect: Rect) callconv(.C) ?*String;

pub extern "Foundation" fn PointFromString(aString: ?*String) callconv(.C) Point;

pub extern "Foundation" fn SizeFromString(aString: ?*String) callconv(.C) Size;

pub extern "Foundation" fn RectFromString(aString: ?*String) callconv(.C) Rect;

/// https://developer.apple.com/documentation/Foundation/NSKeyedArchiver?language=objc
pub const KeyedArchiver = opaque {
    pub const InternalInfo = objc.ExternalClass("NSKeyedArchiver", @This(), Coder, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initRequiringSecureCoding(self: *@This(), requiresSecureCoding: objc.BOOL) *@This() {
        return objc.msgSend(self, "initRequiringSecureCoding:", *@This(), .{requiresSecureCoding});
    }

    pub fn archivedDataWithRootObjectRequiringSecureCodingError(self: *@This(), object: *objc.Id, requiresSecureCoding: objc.BOOL, @"error": ?*?*Error) ?*Data {
        return objc.msgSend(self, "archivedDataWithRootObject:requiringSecureCoding:error:", ?*Data, .{object, requiresSecureCoding, @"error"});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initForWritingWithMutableData(self: *@This(), data: ?*MutableData) *@This() {
        return objc.msgSend(self, "initForWritingWithMutableData:", *@This(), .{data});
    }

    pub fn archivedDataWithRootObject(self: *@This(), rootObject: *objc.Id) ?*Data {
        return objc.msgSend(self, "archivedDataWithRootObject:", ?*Data, .{rootObject});
    }

    pub fn archiveRootObjectToFile(self: *@This(), rootObject: *objc.Id, path: ?*String) objc.BOOL {
        return objc.msgSend(self, "archiveRootObject:toFile:", objc.BOOL, .{rootObject, path});
    }

    pub fn finishEncoding(self: *@This()) void {
        return objc.msgSend(self, "finishEncoding", void, .{});
    }

    pub fn setClassNameForClass(self: *@This(), codedName: ?*String, cls: *objc.Class) void {
        return objc.msgSend(self, "setClassName:forClass:", void, .{codedName, cls});
    }

    pub fn setClassNameForClass(self: *@This(), codedName: ?*String, cls: *objc.Class) void {
        return objc.msgSend(self, "setClassName:forClass:", void, .{codedName, cls});
    }

    pub fn classNameForClass(self: *@This(), cls: *objc.Class) ?*String {
        return objc.msgSend(self, "classNameForClass:", ?*String, .{cls});
    }

    pub fn classNameForClass(self: *@This(), cls: *objc.Class) ?*String {
        return objc.msgSend(self, "classNameForClass:", ?*String, .{cls});
    }

    pub fn encodeObjectForKey(self: *@This(), object: *objc.Id, key: ?*String) void {
        return objc.msgSend(self, "encodeObject:forKey:", void, .{object, key});
    }

    pub fn encodeConditionalObjectForKey(self: *@This(), object: *objc.Id, key: ?*String) void {
        return objc.msgSend(self, "encodeConditionalObject:forKey:", void, .{object, key});
    }

    pub fn encodeBoolForKey(self: *@This(), value: objc.BOOL, key: ?*String) void {
        return objc.msgSend(self, "encodeBool:forKey:", void, .{value, key});
    }

    pub fn encodeIntForKey(self: *@This(), value: i32, key: ?*String) void {
        return objc.msgSend(self, "encodeInt:forKey:", void, .{value, key});
    }

    pub fn encodeInt32ForKey(self: *@This(), value: objc.int32_t, key: ?*String) void {
        return objc.msgSend(self, "encodeInt32:forKey:", void, .{value, key});
    }

    pub fn encodeInt64ForKey(self: *@This(), value: objc.int64_t, key: ?*String) void {
        return objc.msgSend(self, "encodeInt64:forKey:", void, .{value, key});
    }

    pub fn encodeFloatForKey(self: *@This(), value: f32, key: ?*String) void {
        return objc.msgSend(self, "encodeFloat:forKey:", void, .{value, key});
    }

    pub fn encodeDoubleForKey(self: *@This(), value: f64, key: ?*String) void {
        return objc.msgSend(self, "encodeDouble:forKey:", void, .{value, key});
    }

    pub fn encodeBytesLengthForKey(self: *@This(), bytes: ?*objc.uint8_t, length: objc.NSUInteger, key: ?*String) void {
        return objc.msgSend(self, "encodeBytes:length:forKey:", void, .{bytes, length, key});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn outputFormat(self: *@This()) PropertyListFormat {
        return objc.msgSend(self, "outputFormat", PropertyListFormat, .{});
    }

    pub fn setOutputFormat(self: *@This(), outputFormat: PropertyListFormat) void {
        return objc.msgSend(self, "setOutputFormat:", void, .{outputFormat});
    }

    pub fn encodedData(self: *@This()) ?*Data {
        return objc.msgSend(self, "encodedData", ?*Data, .{});
    }

    pub fn requiresSecureCoding(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "requiresSecureCoding", objc.BOOL, .{});
    }

    pub fn setRequiresSecureCoding(self: *@This(), requiresSecureCoding: objc.BOOL) void {
        return objc.msgSend(self, "setRequiresSecureCoding:", void, .{requiresSecureCoding});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSKeyedUnarchiver?language=objc
pub const KeyedUnarchiver = opaque {
    pub const InternalInfo = objc.ExternalClass("NSKeyedUnarchiver", @This(), Coder, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initForReadingFromDataError(self: *@This(), data: ?*Data, @"error": ?*?*Error) *@This() {
        return objc.msgSend(self, "initForReadingFromData:error:", *@This(), .{data, @"error"});
    }

    pub fn unarchivedObjectOfClassFromDataError(self: *@This(), cls: *objc.Class, data: ?*Data, @"error": ?*?*Error) *objc.Id {
        return objc.msgSend(self, "unarchivedObjectOfClass:fromData:error:", *objc.Id, .{cls, data, @"error"});
    }

    pub fn unarchivedArrayOfObjectsOfClassFromDataError(self: *@This(), cls: *objc.Class, data: ?*Data, @"error": ?*?*Error) ?*Array {
        return objc.msgSend(self, "unarchivedArrayOfObjectsOfClass:fromData:error:", ?*Array, .{cls, data, @"error"});
    }

    pub fn unarchivedDictionaryWithKeysOfClassObjectsOfClassFromDataError(self: *@This(), keyCls: *objc.Class, valueCls: *objc.Class, data: ?*Data, @"error": ?*?*Error, ) ?*Dictionary {
        return objc.msgSend(self, "unarchivedDictionaryWithKeysOfClass:objectsOfClass:fromData:error:", ?*Dictionary, .{keyCls, valueCls, data, @"error", });
    }

    pub fn unarchivedObjectOfClassesFromDataError(self: *@This(), classes: ?*anyopaque, data: ?*Data, @"error": ?*?*Error) *objc.Id {
        return objc.msgSend(self, "unarchivedObjectOfClasses:fromData:error:", *objc.Id, .{classes, data, @"error"});
    }

    pub fn unarchivedArrayOfObjectsOfClassesFromDataError(self: *@This(), classes: ?*anyopaque, data: ?*Data, @"error": ?*?*Error) ?*Array {
        return objc.msgSend(self, "unarchivedArrayOfObjectsOfClasses:fromData:error:", ?*Array, .{classes, data, @"error"});
    }

    pub fn unarchivedDictionaryWithKeysOfClassesObjectsOfClassesFromDataError(self: *@This(), keyClasses: ?*anyopaque, valueClasses: ?*anyopaque, data: ?*Data, @"error": ?*?*Error, ) ?*Dictionary {
        return objc.msgSend(self, "unarchivedDictionaryWithKeysOfClasses:objectsOfClasses:fromData:error:", ?*Dictionary, .{keyClasses, valueClasses, data, @"error", });
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initForReadingWithData(self: *@This(), data: ?*Data) *@This() {
        return objc.msgSend(self, "initForReadingWithData:", *@This(), .{data});
    }

    pub fn unarchiveObjectWithData(self: *@This(), data: ?*Data) *objc.Id {
        return objc.msgSend(self, "unarchiveObjectWithData:", *objc.Id, .{data});
    }

    pub fn unarchiveTopLevelObjectWithDataError(self: *@This(), data: ?*Data, @"error": ?*?*Error) *objc.Id {
        return objc.msgSend(self, "unarchiveTopLevelObjectWithData:error:", *objc.Id, .{data, @"error"});
    }

    pub fn unarchiveObjectWithFile(self: *@This(), path: ?*String) *objc.Id {
        return objc.msgSend(self, "unarchiveObjectWithFile:", *objc.Id, .{path});
    }

    pub fn finishDecoding(self: *@This()) void {
        return objc.msgSend(self, "finishDecoding", void, .{});
    }

    pub fn setClassForClassName(self: *@This(), cls: *objc.Class, codedName: ?*String) void {
        return objc.msgSend(self, "setClass:forClassName:", void, .{cls, codedName});
    }

    pub fn setClassForClassName(self: *@This(), cls: *objc.Class, codedName: ?*String) void {
        return objc.msgSend(self, "setClass:forClassName:", void, .{cls, codedName});
    }

    pub fn classForClassName(self: *@This(), codedName: ?*String) *objc.Class {
        return objc.msgSend(self, "classForClassName:", *objc.Class, .{codedName});
    }

    pub fn classForClassName(self: *@This(), codedName: ?*String) *objc.Class {
        return objc.msgSend(self, "classForClassName:", *objc.Class, .{codedName});
    }

    pub fn containsValueForKey(self: *@This(), key: ?*String) objc.BOOL {
        return objc.msgSend(self, "containsValueForKey:", objc.BOOL, .{key});
    }

    pub fn decodeObjectForKey(self: *@This(), key: ?*String) *objc.Id {
        return objc.msgSend(self, "decodeObjectForKey:", *objc.Id, .{key});
    }

    pub fn decodeBoolForKey(self: *@This(), key: ?*String) objc.BOOL {
        return objc.msgSend(self, "decodeBoolForKey:", objc.BOOL, .{key});
    }

    pub fn decodeIntForKey(self: *@This(), key: ?*String) i32 {
        return objc.msgSend(self, "decodeIntForKey:", i32, .{key});
    }

    pub fn decodeInt32ForKey(self: *@This(), key: ?*String) objc.int32_t {
        return objc.msgSend(self, "decodeInt32ForKey:", objc.int32_t, .{key});
    }

    pub fn decodeInt64ForKey(self: *@This(), key: ?*String) objc.int64_t {
        return objc.msgSend(self, "decodeInt64ForKey:", objc.int64_t, .{key});
    }

    pub fn decodeFloatForKey(self: *@This(), key: ?*String) f32 {
        return objc.msgSend(self, "decodeFloatForKey:", f32, .{key});
    }

    pub fn decodeDoubleForKey(self: *@This(), key: ?*String) f64 {
        return objc.msgSend(self, "decodeDoubleForKey:", f64, .{key});
    }

    pub fn decodeBytesForKeyReturnedLength(self: *@This(), key: ?*String, lengthp: ?*objc.NSUInteger) ?*objc.uint8_t {
        return objc.msgSend(self, "decodeBytesForKey:returnedLength:", ?*objc.uint8_t, .{key, lengthp});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn requiresSecureCoding(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "requiresSecureCoding", objc.BOOL, .{});
    }

    pub fn setRequiresSecureCoding(self: *@This(), requiresSecureCoding: objc.BOOL) void {
        return objc.msgSend(self, "setRequiresSecureCoding:", void, .{requiresSecureCoding});
    }

    pub fn decodingFailurePolicy(self: *@This()) DecodingFailurePolicy {
        return objc.msgSend(self, "decodingFailurePolicy", DecodingFailurePolicy, .{});
    }

    pub fn setDecodingFailurePolicy(self: *@This(), decodingFailurePolicy: DecodingFailurePolicy) void {
        return objc.msgSend(self, "setDecodingFailurePolicy:", void, .{decodingFailurePolicy});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSKeyedArchiverDelegate?language=objc
pub const KeyedArchiverDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn archiverWillEncodeObject(self: *@This(), archiver: ?*KeyedArchiver, object: *objc.Id) *objc.Id {
        return objc.msgSend(self, "archiver:willEncodeObject:", *objc.Id, .{archiver, object});
    }

    pub fn archiverDidEncodeObject(self: *@This(), archiver: ?*KeyedArchiver, object: *objc.Id) void {
        return objc.msgSend(self, "archiver:didEncodeObject:", void, .{archiver, object});
    }

    pub fn archiverWillReplaceObjectWithObject(self: *@This(), archiver: ?*KeyedArchiver, object: *objc.Id, newObject: *objc.Id) void {
        return objc.msgSend(self, "archiver:willReplaceObject:withObject:", void, .{archiver, object, newObject});
    }

    pub fn archiverWillFinish(self: *@This(), archiver: ?*KeyedArchiver) void {
        return objc.msgSend(self, "archiverWillFinish:", void, .{archiver});
    }

    pub fn archiverDidFinish(self: *@This(), archiver: ?*KeyedArchiver) void {
        return objc.msgSend(self, "archiverDidFinish:", void, .{archiver});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSKeyedUnarchiverDelegate?language=objc
pub const KeyedUnarchiverDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn unarchiverCannotDecodeObjectOfClassNameOriginalClasses(self: *@This(), unarchiver: ?*KeyedUnarchiver, name: ?*String, classNames: ?*anyopaque) *objc.Class {
        return objc.msgSend(self, "unarchiver:cannotDecodeObjectOfClassName:originalClasses:", *objc.Class, .{unarchiver, name, classNames});
    }

    pub fn unarchiverDidDecodeObject(self: *@This(), unarchiver: ?*KeyedUnarchiver, object: *objc.Id) *objc.Id {
        return objc.msgSend(self, "unarchiver:didDecodeObject:", *objc.Id, .{unarchiver, object});
    }

    pub fn unarchiverWillReplaceObjectWithObject(self: *@This(), unarchiver: ?*KeyedUnarchiver, object: *objc.Id, newObject: *objc.Id) void {
        return objc.msgSend(self, "unarchiver:willReplaceObject:withObject:", void, .{unarchiver, object, newObject});
    }

    pub fn unarchiverWillFinish(self: *@This(), unarchiver: ?*KeyedUnarchiver) void {
        return objc.msgSend(self, "unarchiverWillFinish:", void, .{unarchiver});
    }

    pub fn unarchiverDidFinish(self: *@This(), unarchiver: ?*KeyedUnarchiver) void {
        return objc.msgSend(self, "unarchiverDidFinish:", void, .{unarchiver});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSLocking?language=objc
pub const Locking = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn lock(self: *@This()) void {
        return objc.msgSend(self, "lock", void, .{});
    }

    pub fn unlock(self: *@This()) void {
        return objc.msgSend(self, "unlock", void, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSLock?language=objc
pub const Lock = opaque {
    pub const InternalInfo = objc.ExternalClass("NSLock", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn tryLock(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "tryLock", objc.BOOL, .{});
    }

    pub fn lockBeforeDate(self: *@This(), limit: ?*Date) objc.BOOL {
        return objc.msgSend(self, "lockBeforeDate:", objc.BOOL, .{limit});
    }

    pub fn name(self: *@This()) ?*String {
        return objc.msgSend(self, "name", ?*String, .{});
    }

    pub fn setName(self: *@This(), name: ?*String) void {
        return objc.msgSend(self, "setName:", void, .{name});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSConditionLock?language=objc
pub const ConditionLock = opaque {
    pub const InternalInfo = objc.ExternalClass("NSConditionLock", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithCondition(self: *@This(), condition: objc.NSInteger) *@This() {
        return objc.msgSend(self, "initWithCondition:", *@This(), .{condition});
    }

    pub fn lockWhenCondition(self: *@This(), condition: objc.NSInteger) void {
        return objc.msgSend(self, "lockWhenCondition:", void, .{condition});
    }

    pub fn tryLock(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "tryLock", objc.BOOL, .{});
    }

    pub fn tryLockWhenCondition(self: *@This(), condition: objc.NSInteger) objc.BOOL {
        return objc.msgSend(self, "tryLockWhenCondition:", objc.BOOL, .{condition});
    }

    pub fn unlockWithCondition(self: *@This(), condition: objc.NSInteger) void {
        return objc.msgSend(self, "unlockWithCondition:", void, .{condition});
    }

    pub fn lockBeforeDate(self: *@This(), limit: ?*Date) objc.BOOL {
        return objc.msgSend(self, "lockBeforeDate:", objc.BOOL, .{limit});
    }

    pub fn lockWhenConditionBeforeDate(self: *@This(), condition: objc.NSInteger, limit: ?*Date) objc.BOOL {
        return objc.msgSend(self, "lockWhenCondition:beforeDate:", objc.BOOL, .{condition, limit});
    }

    pub fn condition(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "condition", objc.NSInteger, .{});
    }

    pub fn name(self: *@This()) ?*String {
        return objc.msgSend(self, "name", ?*String, .{});
    }

    pub fn setName(self: *@This(), name: ?*String) void {
        return objc.msgSend(self, "setName:", void, .{name});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSRecursiveLock?language=objc
pub const RecursiveLock = opaque {
    pub const InternalInfo = objc.ExternalClass("NSRecursiveLock", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn tryLock(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "tryLock", objc.BOOL, .{});
    }

    pub fn lockBeforeDate(self: *@This(), limit: ?*Date) objc.BOOL {
        return objc.msgSend(self, "lockBeforeDate:", objc.BOOL, .{limit});
    }

    pub fn name(self: *@This()) ?*String {
        return objc.msgSend(self, "name", ?*String, .{});
    }

    pub fn setName(self: *@This(), name: ?*String) void {
        return objc.msgSend(self, "setName:", void, .{name});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSCondition?language=objc
pub const Condition = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCondition", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn wait(self: *@This()) void {
        return objc.msgSend(self, "wait", void, .{});
    }

    pub fn waitUntilDate(self: *@This(), limit: ?*Date) objc.BOOL {
        return objc.msgSend(self, "waitUntilDate:", objc.BOOL, .{limit});
    }

    pub fn signal(self: *@This()) void {
        return objc.msgSend(self, "signal", void, .{});
    }

    pub fn broadcast(self: *@This()) void {
        return objc.msgSend(self, "broadcast", void, .{});
    }

    pub fn name(self: *@This()) ?*String {
        return objc.msgSend(self, "name", ?*String, .{});
    }

    pub fn setName(self: *@This(), name: ?*String) void {
        return objc.msgSend(self, "setName:", void, .{name});
    }

};

pub const MapTableOptions = objc.NSUInteger;

/// https://developer.apple.com/documentation/Foundation/NSMapTable?language=objc
pub const MapTable = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMapTable", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithKeyOptionsValueOptionsCapacity(self: *@This(), keyOptions: PointerFunctionsOptions, valueOptions: PointerFunctionsOptions, initialCapacity: objc.NSUInteger) *@This() {
        return objc.msgSend(self, "initWithKeyOptions:valueOptions:capacity:", *@This(), .{keyOptions, valueOptions, initialCapacity});
    }

    pub fn initWithKeyPointerFunctionsValuePointerFunctionsCapacity(self: *@This(), keyFunctions: ?*PointerFunctions, valueFunctions: ?*PointerFunctions, initialCapacity: objc.NSUInteger) *@This() {
        return objc.msgSend(self, "initWithKeyPointerFunctions:valuePointerFunctions:capacity:", *@This(), .{keyFunctions, valueFunctions, initialCapacity});
    }

    pub fn mapTableWithKeyOptionsValueOptions(self: *@This(), keyOptions: PointerFunctionsOptions, valueOptions: PointerFunctionsOptions) ?*anyopaque {
        return objc.msgSend(self, "mapTableWithKeyOptions:valueOptions:", ?*anyopaque, .{keyOptions, valueOptions});
    }

    pub fn mapTableWithStrongToStrongObjects(self: *@This()) *objc.Id {
        return objc.msgSend(self, "mapTableWithStrongToStrongObjects", *objc.Id, .{});
    }

    pub fn mapTableWithWeakToStrongObjects(self: *@This()) *objc.Id {
        return objc.msgSend(self, "mapTableWithWeakToStrongObjects", *objc.Id, .{});
    }

    pub fn mapTableWithStrongToWeakObjects(self: *@This()) *objc.Id {
        return objc.msgSend(self, "mapTableWithStrongToWeakObjects", *objc.Id, .{});
    }

    pub fn mapTableWithWeakToWeakObjects(self: *@This()) *objc.Id {
        return objc.msgSend(self, "mapTableWithWeakToWeakObjects", *objc.Id, .{});
    }

    pub fn strongToStrongObjectsMapTable(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "strongToStrongObjectsMapTable", ?*anyopaque, .{});
    }

    pub fn weakToStrongObjectsMapTable(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "weakToStrongObjectsMapTable", ?*anyopaque, .{});
    }

    pub fn strongToWeakObjectsMapTable(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "strongToWeakObjectsMapTable", ?*anyopaque, .{});
    }

    pub fn weakToWeakObjectsMapTable(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "weakToWeakObjectsMapTable", ?*anyopaque, .{});
    }

    pub fn objectForKey(self: *@This(), aKey: void) void {
        return objc.msgSend(self, "objectForKey:", void, .{aKey});
    }

    pub fn removeObjectForKey(self: *@This(), aKey: void) void {
        return objc.msgSend(self, "removeObjectForKey:", void, .{aKey});
    }

    pub fn setObjectForKey(self: *@This(), anObject: void, aKey: void) void {
        return objc.msgSend(self, "setObject:forKey:", void, .{anObject, aKey});
    }

    pub fn keyEnumerator(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "keyEnumerator", ?*anyopaque, .{});
    }

    pub fn objectEnumerator(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "objectEnumerator", ?*anyopaque, .{});
    }

    pub fn removeAllObjects(self: *@This()) void {
        return objc.msgSend(self, "removeAllObjects", void, .{});
    }

    pub fn dictionaryRepresentation(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "dictionaryRepresentation", ?*anyopaque, .{});
    }

    pub fn keyPointerFunctions(self: *@This()) ?*PointerFunctions {
        return objc.msgSend(self, "keyPointerFunctions", ?*PointerFunctions, .{});
    }

    pub fn valuePointerFunctions(self: *@This()) ?*PointerFunctions {
        return objc.msgSend(self, "valuePointerFunctions", ?*PointerFunctions, .{});
    }

    pub fn count(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "count", objc.NSUInteger, .{});
    }

};

pub const MapEnumerator = extern struct {
    _pi: objc.NSUInteger,
    _si: objc.NSUInteger,
    _bs: ?*anyopaque,
};

pub extern "Foundation" fn FreeMapTable(table: ?*MapTable) callconv(.C) void;

pub extern "Foundation" fn ResetMapTable(table: ?*MapTable) callconv(.C) void;

pub extern "Foundation" fn CompareMapTables(table1: ?*MapTable, table2: ?*MapTable) callconv(.C) objc.BOOL;

pub extern "Foundation" fn CopyMapTableWithZone(table: ?*MapTable, zone: ?*Zone) callconv(.C) ?*MapTable;

pub extern "Foundation" fn MapMember(table: ?*MapTable, key: ?*anyopaque, originalKey: ?*?*anyopaque, value: ?*?*anyopaque, ) callconv(.C) objc.BOOL;

pub extern "Foundation" fn MapGet(table: ?*MapTable, key: ?*anyopaque) callconv(.C) ?*anyopaque;

pub extern "Foundation" fn MapInsert(table: ?*MapTable, key: ?*anyopaque, value: ?*anyopaque) callconv(.C) void;

pub extern "Foundation" fn MapInsertKnownAbsent(table: ?*MapTable, key: ?*anyopaque, value: ?*anyopaque) callconv(.C) void;

pub extern "Foundation" fn MapInsertIfAbsent(table: ?*MapTable, key: ?*anyopaque, value: ?*anyopaque) callconv(.C) ?*anyopaque;

pub extern "Foundation" fn MapRemove(table: ?*MapTable, key: ?*anyopaque) callconv(.C) void;

pub extern "Foundation" fn EnumerateMapTable(table: ?*MapTable) callconv(.C) MapEnumerator;

pub extern "Foundation" fn NextMapEnumeratorPair(enumerator: ?*MapEnumerator, key: ?*?*anyopaque, value: ?*?*anyopaque) callconv(.C) objc.BOOL;

pub extern "Foundation" fn EndMapTableEnumeration(enumerator: ?*MapEnumerator) callconv(.C) void;

pub extern "Foundation" fn CountMapTable(table: ?*MapTable) callconv(.C) objc.NSUInteger;

pub extern "Foundation" fn StringFromMapTable(table: ?*MapTable) callconv(.C) ?*String;

pub extern "Foundation" fn AllMapTableKeys(table: ?*MapTable) callconv(.C) ?*Array;

pub extern "Foundation" fn AllMapTableValues(table: ?*MapTable) callconv(.C) ?*Array;

pub const MapTableKeyCallBacks = extern struct {
    hash: ?*const fn(?*MapTable, ?*anyopaque) callconv(.C) objc.NSUInteger,
    isEqual: ?*const fn(?*MapTable, ?*anyopaque, ?*anyopaque) callconv(.C) objc.BOOL,
    retain: ?*const fn(?*MapTable, ?*anyopaque) callconv(.C) void,
    release: ?*const fn(?*MapTable, ?*anyopaque) callconv(.C) void,
    describe: ?*const fn(?*MapTable, ?*anyopaque) callconv(.C) ?*String,
    notAKeyMarker: ?*anyopaque,
};

pub const MapTableValueCallBacks = extern struct {
    retain: ?*const fn(?*MapTable, ?*anyopaque) callconv(.C) void,
    release: ?*const fn(?*MapTable, ?*anyopaque) callconv(.C) void,
    describe: ?*const fn(?*MapTable, ?*anyopaque) callconv(.C) ?*String,
};

pub extern "Foundation" fn CreateMapTableWithZone(keyCallBacks: MapTableKeyCallBacks, valueCallBacks: MapTableValueCallBacks, capacity: objc.NSUInteger, zone: ?*Zone, ) callconv(.C) ?*MapTable;

pub extern "Foundation" fn CreateMapTable(keyCallBacks: MapTableKeyCallBacks, valueCallBacks: MapTableValueCallBacks, capacity: objc.NSUInteger) callconv(.C) ?*MapTable;

/// https://developer.apple.com/documentation/Foundation/NSMethodSignature?language=objc
pub const MethodSignature = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMethodSignature", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn signatureWithObjCTypes(self: *@This(), types: ?*i8) ?*MethodSignature {
        return objc.msgSend(self, "signatureWithObjCTypes:", ?*MethodSignature, .{types});
    }

    pub fn getArgumentTypeAtIndex(self: *@This(), idx: objc.NSUInteger) ?*i8 {
        return objc.msgSend(self, "getArgumentTypeAtIndex:", ?*i8, .{idx});
    }

    pub fn isOneway(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isOneway", objc.BOOL, .{});
    }

    pub fn numberOfArguments(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "numberOfArguments", objc.NSUInteger, .{});
    }

    pub fn frameLength(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "frameLength", objc.NSUInteger, .{});
    }

    pub fn methodReturnType(self: *@This()) ?*i8 {
        return objc.msgSend(self, "methodReturnType", ?*i8, .{});
    }

    pub fn methodReturnLength(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "methodReturnLength", objc.NSUInteger, .{});
    }

};

pub const GrammaticalGender = enum(objc.NSInteger) {
    NotSet = 0,
    Feminine = 1,
    Masculine = 2,
    Neuter = 3,
};

pub const GrammaticalPartOfSpeech = enum(objc.NSInteger) {
    NotSet = 0,
    Determiner = 1,
    Pronoun = 2,
    Letter = 3,
    Adverb = 4,
    Particle = 5,
    Adjective = 6,
    Adposition = 7,
    Verb = 8,
    Noun = 9,
    Conjunction = 10,
    Numeral = 11,
    Interjection = 12,
    Preposition = 13,
    Abbreviation = 14,
};

pub const GrammaticalNumber = enum(objc.NSInteger) {
    NotSet = 0,
    Singular = 1,
    Zero = 2,
    Plural = 3,
    PluralTwo = 4,
    PluralFew = 5,
    PluralMany = 6,
};

pub const GrammaticalCase = enum(objc.NSInteger) {
    NotSet = 0,
    Nominative = 1,
    Accusative = 2,
    Dative = 3,
    Genitive = 4,
    Prepositional = 5,
    Ablative = 6,
    Adessive = 7,
    Allative = 8,
    Elative = 9,
    Illative = 10,
    Essive = 11,
    Inessive = 12,
    Locative = 13,
    Translative = 14,
};

pub const GrammaticalPronounType = enum(objc.NSInteger) {
    NotSet = 0,
    Personal = 1,
    Reflexive = 2,
    Possessive = 3,
};

pub const GrammaticalPerson = enum(objc.NSInteger) {
    NotSet = 0,
    First = 1,
    Second = 2,
    Third = 3,
};

pub const GrammaticalDetermination = enum(objc.NSInteger) {
    NotSet = 0,
    Independent = 1,
    Dependent = 2,
};

pub const GrammaticalDefiniteness = enum(objc.NSInteger) {
    NotSet = 0,
    Indefinite = 1,
    Definite = 2,
};

/// https://developer.apple.com/documentation/Foundation/NSMorphology?language=objc
pub const Morphology = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMorphology", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn grammaticalGender(self: *@This()) GrammaticalGender {
        return objc.msgSend(self, "grammaticalGender", GrammaticalGender, .{});
    }

    pub fn setGrammaticalGender(self: *@This(), grammaticalGender: GrammaticalGender) void {
        return objc.msgSend(self, "setGrammaticalGender:", void, .{grammaticalGender});
    }

    pub fn partOfSpeech(self: *@This()) GrammaticalPartOfSpeech {
        return objc.msgSend(self, "partOfSpeech", GrammaticalPartOfSpeech, .{});
    }

    pub fn setPartOfSpeech(self: *@This(), partOfSpeech: GrammaticalPartOfSpeech) void {
        return objc.msgSend(self, "setPartOfSpeech:", void, .{partOfSpeech});
    }

    pub fn number(self: *@This()) GrammaticalNumber {
        return objc.msgSend(self, "number", GrammaticalNumber, .{});
    }

    pub fn setNumber(self: *@This(), number: GrammaticalNumber) void {
        return objc.msgSend(self, "setNumber:", void, .{number});
    }

    pub fn grammaticalCase(self: *@This()) GrammaticalCase {
        return objc.msgSend(self, "grammaticalCase", GrammaticalCase, .{});
    }

    pub fn setGrammaticalCase(self: *@This(), grammaticalCase: GrammaticalCase) void {
        return objc.msgSend(self, "setGrammaticalCase:", void, .{grammaticalCase});
    }

    pub fn determination(self: *@This()) GrammaticalDetermination {
        return objc.msgSend(self, "determination", GrammaticalDetermination, .{});
    }

    pub fn setDetermination(self: *@This(), determination: GrammaticalDetermination) void {
        return objc.msgSend(self, "setDetermination:", void, .{determination});
    }

    pub fn grammaticalPerson(self: *@This()) GrammaticalPerson {
        return objc.msgSend(self, "grammaticalPerson", GrammaticalPerson, .{});
    }

    pub fn setGrammaticalPerson(self: *@This(), grammaticalPerson: GrammaticalPerson) void {
        return objc.msgSend(self, "setGrammaticalPerson:", void, .{grammaticalPerson});
    }

    pub fn pronounType(self: *@This()) GrammaticalPronounType {
        return objc.msgSend(self, "pronounType", GrammaticalPronounType, .{});
    }

    pub fn setPronounType(self: *@This(), pronounType: GrammaticalPronounType) void {
        return objc.msgSend(self, "setPronounType:", void, .{pronounType});
    }

    pub fn definiteness(self: *@This()) GrammaticalDefiniteness {
        return objc.msgSend(self, "definiteness", GrammaticalDefiniteness, .{});
    }

    pub fn setDefiniteness(self: *@This(), definiteness: GrammaticalDefiniteness) void {
        return objc.msgSend(self, "setDefiniteness:", void, .{definiteness});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSMorphologyPronoun?language=objc
pub const MorphologyPronoun = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMorphologyPronoun", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithPronounMorphologyDependentMorphology(self: *@This(), pronoun: ?*String, morphology: ?*Morphology, dependentMorphology: ?*Morphology) *@This() {
        return objc.msgSend(self, "initWithPronoun:morphology:dependentMorphology:", *@This(), .{pronoun, morphology, dependentMorphology});
    }

    pub fn pronoun(self: *@This()) ?*String {
        return objc.msgSend(self, "pronoun", ?*String, .{});
    }

    pub fn morphology(self: *@This()) ?*Morphology {
        return objc.msgSend(self, "morphology", ?*Morphology, .{});
    }

    pub fn dependentMorphology(self: *@This()) ?*Morphology {
        return objc.msgSend(self, "dependentMorphology", ?*Morphology, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSMorphologyCustomPronoun?language=objc
pub const MorphologyCustomPronoun = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMorphologyCustomPronoun", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isSupportedForLanguage(self: *@This(), language: ?*String) objc.BOOL {
        return objc.msgSend(self, "isSupportedForLanguage:", objc.BOOL, .{language});
    }

    pub fn requiredKeysForLanguage(self: *@This(), language: ?*String) ?*anyopaque {
        return objc.msgSend(self, "requiredKeysForLanguage:", ?*anyopaque, .{language});
    }

    pub fn subjectForm(self: *@This()) ?*String {
        return objc.msgSend(self, "subjectForm", ?*String, .{});
    }

    pub fn setSubjectForm(self: *@This(), subjectForm: ?*String) void {
        return objc.msgSend(self, "setSubjectForm:", void, .{subjectForm});
    }

    pub fn objectForm(self: *@This()) ?*String {
        return objc.msgSend(self, "objectForm", ?*String, .{});
    }

    pub fn setObjectForm(self: *@This(), objectForm: ?*String) void {
        return objc.msgSend(self, "setObjectForm:", void, .{objectForm});
    }

    pub fn possessiveForm(self: *@This()) ?*String {
        return objc.msgSend(self, "possessiveForm", ?*String, .{});
    }

    pub fn setPossessiveForm(self: *@This(), possessiveForm: ?*String) void {
        return objc.msgSend(self, "setPossessiveForm:", void, .{possessiveForm});
    }

    pub fn possessiveAdjectiveForm(self: *@This()) ?*String {
        return objc.msgSend(self, "possessiveAdjectiveForm", ?*String, .{});
    }

    pub fn setPossessiveAdjectiveForm(self: *@This(), possessiveAdjectiveForm: ?*String) void {
        return objc.msgSend(self, "setPossessiveAdjectiveForm:", void, .{possessiveAdjectiveForm});
    }

    pub fn reflexiveForm(self: *@This()) ?*String {
        return objc.msgSend(self, "reflexiveForm", ?*String, .{});
    }

    pub fn setReflexiveForm(self: *@This(), reflexiveForm: ?*String) void {
        return objc.msgSend(self, "setReflexiveForm:", void, .{reflexiveForm});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSTermOfAddress?language=objc
pub const TermOfAddress = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTermOfAddress", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn neutral(self: *@This()) *@This() {
        return objc.msgSend(self, "neutral", *@This(), .{});
    }

    pub fn feminine(self: *@This()) *@This() {
        return objc.msgSend(self, "feminine", *@This(), .{});
    }

    pub fn masculine(self: *@This()) *@This() {
        return objc.msgSend(self, "masculine", *@This(), .{});
    }

    pub fn currentUser(self: *@This()) *@This() {
        return objc.msgSend(self, "currentUser", *@This(), .{});
    }

    pub fn localizedForLanguageIdentifierWithPronouns(self: *@This(), language: ?*String, pronouns: ?*anyopaque) *@This() {
        return objc.msgSend(self, "localizedForLanguageIdentifier:withPronouns:", *@This(), .{language, pronouns});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn languageIdentifier(self: *@This()) ?*String {
        return objc.msgSend(self, "languageIdentifier", ?*String, .{});
    }

    pub fn pronouns(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "pronouns", ?*anyopaque, .{});
    }

};

pub const PostingStyle = enum(objc.NSUInteger) {
    WhenIdle = 1,
    ASAP = 2,
    Now = 3,
};

pub const NotificationCoalescing = enum(objc.NSUInteger) {
    NoCoalescing = 0,
    OnName = 1,
    OnSender = 2,
};

/// https://developer.apple.com/documentation/Foundation/NSNotificationQueue?language=objc
pub const NotificationQueue = opaque {
    pub const InternalInfo = objc.ExternalClass("NSNotificationQueue", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithNotificationCenter(self: *@This(), notificationCenter: ?*NotificationCenter) *@This() {
        return objc.msgSend(self, "initWithNotificationCenter:", *@This(), .{notificationCenter});
    }

    pub fn enqueueNotificationPostingStyle(self: *@This(), notification: ?*Notification, postingStyle: PostingStyle) void {
        return objc.msgSend(self, "enqueueNotification:postingStyle:", void, .{notification, postingStyle});
    }

    pub fn enqueueNotificationPostingStyleCoalesceMaskForModes(self: *@This(), notification: ?*Notification, postingStyle: PostingStyle, coalesceMask: NotificationCoalescing, modes: ?*anyopaque, ) void {
        return objc.msgSend(self, "enqueueNotification:postingStyle:coalesceMask:forModes:", void, .{notification, postingStyle, coalesceMask, modes, });
    }

    pub fn dequeueNotificationsMatchingCoalesceMask(self: *@This(), notification: ?*Notification, coalesceMask: objc.NSUInteger) void {
        return objc.msgSend(self, "dequeueNotificationsMatching:coalesceMask:", void, .{notification, coalesceMask});
    }

    pub fn defaultQueue(self: *@This()) ?*NotificationQueue {
        return objc.msgSend(self, "defaultQueue", ?*NotificationQueue, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSNull?language=objc
pub const Null = opaque {
    pub const InternalInfo = objc.ExternalClass("NSNull", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn null(self: *@This()) ?*core_foundation.NSNull {
        return objc.msgSend(self, "null", ?*core_foundation.NSNull, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSLocalizedNumberFormatRule?language=objc
pub const LocalizedNumberFormatRule = opaque {
    pub const InternalInfo = objc.ExternalClass("NSLocalizedNumberFormatRule", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn new(self: *@This()) *objc.Id {
        return objc.msgSend(self, "new", *objc.Id, .{});
    }

    pub fn init(self: *@This()) *objc.Id {
        return objc.msgSend(self, "init", *objc.Id, .{});
    }

    pub fn automatic(self: *@This()) ?*LocalizedNumberFormatRule {
        return objc.msgSend(self, "automatic", ?*LocalizedNumberFormatRule, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSOperation?language=objc
pub const Operation = opaque {
    pub const InternalInfo = objc.ExternalClass("NSOperation", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn start(self: *@This()) void {
        return objc.msgSend(self, "start", void, .{});
    }

    pub fn main(self: *@This()) void {
        return objc.msgSend(self, "main", void, .{});
    }

    pub fn isCancelled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isCancelled", objc.BOOL, .{});
    }

    pub fn cancel(self: *@This()) void {
        return objc.msgSend(self, "cancel", void, .{});
    }

    pub fn isExecuting(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isExecuting", objc.BOOL, .{});
    }

    pub fn isFinished(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isFinished", objc.BOOL, .{});
    }

    pub fn isConcurrent(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isConcurrent", objc.BOOL, .{});
    }

    pub fn isAsynchronous(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAsynchronous", objc.BOOL, .{});
    }

    pub fn isReady(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isReady", objc.BOOL, .{});
    }

    pub fn addDependency(self: *@This(), op: ?*Operation) void {
        return objc.msgSend(self, "addDependency:", void, .{op});
    }

    pub fn removeDependency(self: *@This(), op: ?*Operation) void {
        return objc.msgSend(self, "removeDependency:", void, .{op});
    }

    pub fn dependencies(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "dependencies", ?*anyopaque, .{});
    }

    pub fn setQueuePriority(self: *@This(), queuePriority: OperationQueuePriority) void {
        return objc.msgSend(self, "setQueuePriority:", void, .{queuePriority});
    }

    pub fn queuePriority(self: *@This()) OperationQueuePriority {
        return objc.msgSend(self, "queuePriority", OperationQueuePriority, .{});
    }

    pub fn setCompletionBlock(self: *@This(), completionBlock: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "setCompletionBlock:", void, .{completionBlock});
    }

    pub fn completionBlock(self: *@This()) *const fn() callconv(.C) void {
        return objc.msgSend(self, "completionBlock", *const fn() callconv(.C) void, .{});
    }

    pub fn waitUntilFinished(self: *@This()) void {
        return objc.msgSend(self, "waitUntilFinished", void, .{});
    }

    pub fn setThreadPriority(self: *@This(), threadPriority: f64) void {
        return objc.msgSend(self, "setThreadPriority:", void, .{threadPriority});
    }

    pub fn threadPriority(self: *@This()) f64 {
        return objc.msgSend(self, "threadPriority", f64, .{});
    }

    pub fn qualityOfService(self: *@This()) QualityOfService {
        return objc.msgSend(self, "qualityOfService", QualityOfService, .{});
    }

    pub fn setQualityOfService(self: *@This(), qualityOfService: QualityOfService) void {
        return objc.msgSend(self, "setQualityOfService:", void, .{qualityOfService});
    }

    pub fn name(self: *@This()) ?*String {
        return objc.msgSend(self, "name", ?*String, .{});
    }

    pub fn setName(self: *@This(), name: ?*String) void {
        return objc.msgSend(self, "setName:", void, .{name});
    }

};

pub const OperationQueuePriority = OperationQueuePriority;

pub const OperationQueuePriority = enum(objc.NSInteger) {
    VeryLow = -8,
    Low = -4,
    Normal = 0,
    High = 4,
    VeryHigh = 8,
};

/// https://developer.apple.com/documentation/Foundation/NSBlockOperation?language=objc
pub const BlockOperation = opaque {
    pub const InternalInfo = objc.ExternalClass("NSBlockOperation", @This(), Operation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn blockOperationWithBlock(self: *@This(), block: *const fn() callconv(.C) void) *@This() {
        return objc.msgSend(self, "blockOperationWithBlock:", *@This(), .{block});
    }

    pub fn addExecutionBlock(self: *@This(), block: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "addExecutionBlock:", void, .{block});
    }

    pub fn executionBlocks(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "executionBlocks", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSInvocationOperation?language=objc
pub const InvocationOperation = opaque {
    pub const InternalInfo = objc.ExternalClass("NSInvocationOperation", @This(), Operation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithTargetSelectorObject(self: *@This(), target: *objc.Id, sel: *objc.SEL, arg: *objc.Id) *@This() {
        return objc.msgSend(self, "initWithTarget:selector:object:", *@This(), .{target, sel, arg});
    }

    pub fn initWithInvocation(self: *@This(), inv: ?*Invocation) *@This() {
        return objc.msgSend(self, "initWithInvocation:", *@This(), .{inv});
    }

    pub fn invocation(self: *@This()) ?*Invocation {
        return objc.msgSend(self, "invocation", ?*Invocation, .{});
    }

    pub fn result(self: *@This()) *objc.Id {
        return objc.msgSend(self, "result", *objc.Id, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSOperationQueue?language=objc
pub const OperationQueue = opaque {
    pub const InternalInfo = objc.ExternalClass("NSOperationQueue", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn addOperation(self: *@This(), op: ?*Operation) void {
        return objc.msgSend(self, "addOperation:", void, .{op});
    }

    pub fn addOperationsWaitUntilFinished(self: *@This(), ops: ?*anyopaque, wait: objc.BOOL) void {
        return objc.msgSend(self, "addOperations:waitUntilFinished:", void, .{ops, wait});
    }

    pub fn addOperationWithBlock(self: *@This(), block: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "addOperationWithBlock:", void, .{block});
    }

    pub fn addBarrierBlock(self: *@This(), barrier: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "addBarrierBlock:", void, .{barrier});
    }

    pub fn cancelAllOperations(self: *@This()) void {
        return objc.msgSend(self, "cancelAllOperations", void, .{});
    }

    pub fn waitUntilAllOperationsAreFinished(self: *@This()) void {
        return objc.msgSend(self, "waitUntilAllOperationsAreFinished", void, .{});
    }

    pub fn progress(self: *@This()) ?*Progress {
        return objc.msgSend(self, "progress", ?*Progress, .{});
    }

    pub fn maxConcurrentOperationCount(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "maxConcurrentOperationCount", objc.NSInteger, .{});
    }

    pub fn setMaxConcurrentOperationCount(self: *@This(), maxConcurrentOperationCount: objc.NSInteger) void {
        return objc.msgSend(self, "setMaxConcurrentOperationCount:", void, .{maxConcurrentOperationCount});
    }

    pub fn isSuspended(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isSuspended", objc.BOOL, .{});
    }

    pub fn setSuspended(self: *@This(), suspended: objc.BOOL) void {
        return objc.msgSend(self, "setSuspended:", void, .{suspended});
    }

    pub fn name(self: *@This()) ?*String {
        return objc.msgSend(self, "name", ?*String, .{});
    }

    pub fn setName(self: *@This(), name: ?*String) void {
        return objc.msgSend(self, "setName:", void, .{name});
    }

    pub fn qualityOfService(self: *@This()) QualityOfService {
        return objc.msgSend(self, "qualityOfService", QualityOfService, .{});
    }

    pub fn setQualityOfService(self: *@This(), qualityOfService: QualityOfService) void {
        return objc.msgSend(self, "setQualityOfService:", void, .{qualityOfService});
    }

    pub fn underlyingQueue(self: *@This()) objc.dispatch_queue_t {
        return objc.msgSend(self, "underlyingQueue", objc.dispatch_queue_t, .{});
    }

    pub fn setUnderlyingQueue(self: *@This(), underlyingQueue: objc.dispatch_queue_t) void {
        return objc.msgSend(self, "setUnderlyingQueue:", void, .{underlyingQueue});
    }

    pub fn currentQueue(self: *@This()) ?*OperationQueue {
        return objc.msgSend(self, "currentQueue", ?*OperationQueue, .{});
    }

    pub fn mainQueue(self: *@This()) ?*OperationQueue {
        return objc.msgSend(self, "mainQueue", ?*OperationQueue, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSOrthography?language=objc
pub const Orthography = opaque {
    pub const InternalInfo = objc.ExternalClass("NSOrthography", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithDominantScriptLanguageMap(self: *@This(), script: ?*String, map: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithDominantScript:languageMap:", *@This(), .{script, map});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn dominantScript(self: *@This()) ?*String {
        return objc.msgSend(self, "dominantScript", ?*String, .{});
    }

    pub fn languageMap(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "languageMap", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSPointerArray?language=objc
pub const PointerArray = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPointerArray", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithOptions(self: *@This(), options: PointerFunctionsOptions) *@This() {
        return objc.msgSend(self, "initWithOptions:", *@This(), .{options});
    }

    pub fn initWithPointerFunctions(self: *@This(), functions: ?*PointerFunctions) *@This() {
        return objc.msgSend(self, "initWithPointerFunctions:", *@This(), .{functions});
    }

    pub fn pointerArrayWithOptions(self: *@This(), options: PointerFunctionsOptions) ?*PointerArray {
        return objc.msgSend(self, "pointerArrayWithOptions:", ?*PointerArray, .{options});
    }

    pub fn pointerArrayWithPointerFunctions(self: *@This(), functions: ?*PointerFunctions) ?*PointerArray {
        return objc.msgSend(self, "pointerArrayWithPointerFunctions:", ?*PointerArray, .{functions});
    }

    pub fn pointerAtIndex(self: *@This(), index: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(self, "pointerAtIndex:", ?*anyopaque, .{index});
    }

    pub fn addPointer(self: *@This(), pointer: ?*anyopaque) void {
        return objc.msgSend(self, "addPointer:", void, .{pointer});
    }

    pub fn removePointerAtIndex(self: *@This(), index: objc.NSUInteger) void {
        return objc.msgSend(self, "removePointerAtIndex:", void, .{index});
    }

    pub fn insertPointerAtIndex(self: *@This(), item: ?*anyopaque, index: objc.NSUInteger) void {
        return objc.msgSend(self, "insertPointer:atIndex:", void, .{item, index});
    }

    pub fn replacePointerAtIndexWithPointer(self: *@This(), index: objc.NSUInteger, item: ?*anyopaque) void {
        return objc.msgSend(self, "replacePointerAtIndex:withPointer:", void, .{index, item});
    }

    pub fn compact(self: *@This()) void {
        return objc.msgSend(self, "compact", void, .{});
    }

    pub fn pointerFunctions(self: *@This()) ?*PointerFunctions {
        return objc.msgSend(self, "pointerFunctions", ?*PointerFunctions, .{});
    }

    pub fn count(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "count", objc.NSUInteger, .{});
    }

    pub fn setCount(self: *@This(), count: objc.NSUInteger) void {
        return objc.msgSend(self, "setCount:", void, .{count});
    }

};

pub const SocketNativeHandle = i32;

/// https://developer.apple.com/documentation/Foundation/NSPort?language=objc
pub const Port = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPort", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn port(self: *@This()) ?*Port {
        return objc.msgSend(self, "port", ?*Port, .{});
    }

    pub fn invalidate(self: *@This()) void {
        return objc.msgSend(self, "invalidate", void, .{});
    }

    pub fn setDelegate(self: *@This(), anObject: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{anObject});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn scheduleInRunLoopForMode(self: *@This(), runLoop: ?*RunLoop, mode: RunLoopMode) void {
        return objc.msgSend(self, "scheduleInRunLoop:forMode:", void, .{runLoop, mode});
    }

    pub fn removeFromRunLoopForMode(self: *@This(), runLoop: ?*RunLoop, mode: RunLoopMode) void {
        return objc.msgSend(self, "removeFromRunLoop:forMode:", void, .{runLoop, mode});
    }

    pub fn sendBeforeDateComponentsFromReserved(self: *@This(), limitDate: ?*Date, components: ?*MutableArray, receivePort: ?*Port, headerSpaceReserved: objc.NSUInteger, ) objc.BOOL {
        return objc.msgSend(self, "sendBeforeDate:components:from:reserved:", objc.BOOL, .{limitDate, components, receivePort, headerSpaceReserved, });
    }

    pub fn sendBeforeDateMsgidComponentsFromReserved(self: *@This(), limitDate: ?*Date, msgID: objc.NSUInteger, components: ?*MutableArray, receivePort: ?*Port, headerSpaceReserved: objc.NSUInteger, ) objc.BOOL {
        return objc.msgSend(self, "sendBeforeDate:msgid:components:from:reserved:", objc.BOOL, .{limitDate, msgID, components, receivePort, headerSpaceReserved, });
    }

    pub fn addConnectionToRunLoopForMode(self: *@This(), conn: ?*Connection, runLoop: ?*RunLoop, mode: RunLoopMode) void {
        return objc.msgSend(self, "addConnection:toRunLoop:forMode:", void, .{conn, runLoop, mode});
    }

    pub fn removeConnectionFromRunLoopForMode(self: *@This(), conn: ?*Connection, runLoop: ?*RunLoop, mode: RunLoopMode) void {
        return objc.msgSend(self, "removeConnection:fromRunLoop:forMode:", void, .{conn, runLoop, mode});
    }

    pub fn isValid(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isValid", objc.BOOL, .{});
    }

    pub fn reservedSpaceLength(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "reservedSpaceLength", objc.NSUInteger, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSPortDelegate?language=objc
pub const PortDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn handlePortMessage(self: *@This(), message: ?*PortMessage) void {
        return objc.msgSend(self, "handlePortMessage:", void, .{message});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSMachPort?language=objc
pub const MachPort = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMachPort", @This(), Port, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn portWithMachPort(self: *@This(), machPort: objc.uint32_t) ?*Port {
        return objc.msgSend(self, "portWithMachPort:", ?*Port, .{machPort});
    }

    pub fn initWithMachPort(self: *@This(), machPort: objc.uint32_t) *@This() {
        return objc.msgSend(self, "initWithMachPort:", *@This(), .{machPort});
    }

    pub fn setDelegate(self: *@This(), anObject: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{anObject});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn portWithMachPortOptions(self: *@This(), machPort: objc.uint32_t, f: MachPortOptions) ?*Port {
        return objc.msgSend(self, "portWithMachPort:options:", ?*Port, .{machPort, f});
    }

    pub fn initWithMachPortOptions(self: *@This(), machPort: objc.uint32_t, f: MachPortOptions) *@This() {
        return objc.msgSend(self, "initWithMachPort:options:", *@This(), .{machPort, f});
    }

    pub fn machPort(self: *@This()) objc.uint32_t {
        return objc.msgSend(self, "machPort", objc.uint32_t, .{});
    }

    pub fn scheduleInRunLoopForMode(self: *@This(), runLoop: ?*RunLoop, mode: RunLoopMode) void {
        return objc.msgSend(self, "scheduleInRunLoop:forMode:", void, .{runLoop, mode});
    }

    pub fn removeFromRunLoopForMode(self: *@This(), runLoop: ?*RunLoop, mode: RunLoopMode) void {
        return objc.msgSend(self, "removeFromRunLoop:forMode:", void, .{runLoop, mode});
    }

};

pub const MachPortOptions = MachPortOptions;

pub const MachPortOptions = enum(objc.NSUInteger) {
    DeallocateNone = 0,
    DeallocateSendRight = 1,
    DeallocateReceiveRight = 2,
};

/// https://developer.apple.com/documentation/Foundation/NSMachPortDelegate?language=objc
pub const MachPortDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{PortDelegate, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn handleMachMessage(self: *@This(), msg: ?*anyopaque) void {
        return objc.msgSend(self, "handleMachMessage:", void, .{msg});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSMessagePort?language=objc
pub const MessagePort = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMessagePort", @This(), Port, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;
};

/// https://developer.apple.com/documentation/Foundation/NSSocketPort?language=objc
pub const SocketPort = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSocketPort", @This(), Port, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithTCPPort(self: *@This(), port: u16) *@This() {
        return objc.msgSend(self, "initWithTCPPort:", *@This(), .{port});
    }

    pub fn initWithProtocolFamilySocketTypeProtocolAddress(self: *@This(), family: i32, @"type": i32, protocol: i32, address: ?*Data, ) *@This() {
        return objc.msgSend(self, "initWithProtocolFamily:socketType:protocol:address:", *@This(), .{family, @"type", protocol, address, });
    }

    pub fn initWithProtocolFamilySocketTypeProtocolSocket(self: *@This(), family: i32, @"type": i32, protocol: i32, sock: SocketNativeHandle, ) *@This() {
        return objc.msgSend(self, "initWithProtocolFamily:socketType:protocol:socket:", *@This(), .{family, @"type", protocol, sock, });
    }

    pub fn initRemoteWithTCPPortHost(self: *@This(), port: u16, hostName: ?*String) *@This() {
        return objc.msgSend(self, "initRemoteWithTCPPort:host:", *@This(), .{port, hostName});
    }

    pub fn initRemoteWithProtocolFamilySocketTypeProtocolAddress(self: *@This(), family: i32, @"type": i32, protocol: i32, address: ?*Data, ) *@This() {
        return objc.msgSend(self, "initRemoteWithProtocolFamily:socketType:protocol:address:", *@This(), .{family, @"type", protocol, address, });
    }

    pub fn protocolFamily(self: *@This()) i32 {
        return objc.msgSend(self, "protocolFamily", i32, .{});
    }

    pub fn socketType(self: *@This()) i32 {
        return objc.msgSend(self, "socketType", i32, .{});
    }

    pub fn protocol(self: *@This()) i32 {
        return objc.msgSend(self, "protocol", i32, .{});
    }

    pub fn address(self: *@This()) ?*Data {
        return objc.msgSend(self, "address", ?*Data, .{});
    }

    pub fn socket(self: *@This()) SocketNativeHandle {
        return objc.msgSend(self, "socket", SocketNativeHandle, .{});
    }

};

pub const anon111 = enum(objc.NSInteger) {
    NSFileNoSuchFileError = 4,
    NSFileLockingError = 255,
    NSFileReadUnknownError = 256,
    NSFileReadNoPermissionError = 257,
    NSFileReadInvalidFileNameError = 258,
    NSFileReadCorruptFileError = 259,
    NSFileReadNoSuchFileError = 260,
    NSFileReadInapplicableStringEncodingError = 261,
    NSFileReadUnsupportedSchemeError = 262,
    NSFileReadTooLargeError = 263,
    NSFileReadUnknownStringEncodingError = 264,
    NSFileWriteUnknownError = 512,
    NSFileWriteNoPermissionError = 513,
    NSFileWriteInvalidFileNameError = 514,
    NSFileWriteFileExistsError = 516,
    NSFileWriteInapplicableStringEncodingError = 517,
    NSFileWriteUnsupportedSchemeError = 518,
    NSFileWriteOutOfSpaceError = 640,
    NSFileWriteVolumeReadOnlyError = 642,
    NSFileManagerUnmountUnknownError = 768,
    NSFileManagerUnmountBusyError = 769,
    NSKeyValueValidationError = 1024,
    NSFormattingError = 2048,
    NSUserCancelledError = 3072,
    NSFeatureUnsupportedError = 3328,
    NSExecutableNotLoadableError = 3584,
    NSExecutableArchitectureMismatchError = 3585,
    NSExecutableRuntimeMismatchError = 3586,
    NSExecutableLoadError = 3587,
    NSExecutableLinkError = 3588,
    NSFileErrorMinimum = 0,
    NSFileErrorMaximum = 1023,
    NSValidationErrorMinimum = 1024,
    NSValidationErrorMaximum = 2047,
    NSExecutableErrorMinimum = 3584,
    NSExecutableErrorMaximum = 3839,
    NSFormattingErrorMinimum = 2048,
    NSFormattingErrorMaximum = 2559,
    NSPropertyListReadCorruptError = 3840,
    NSPropertyListReadUnknownVersionError = 3841,
    NSPropertyListReadStreamError = 3842,
    NSPropertyListWriteStreamError = 3851,
    NSPropertyListWriteInvalidError = 3852,
    NSPropertyListErrorMinimum = 3840,
    NSPropertyListErrorMaximum = 4095,
    NSXPCConnectionInterrupted = 4097,
    NSXPCConnectionInvalid = 4099,
    NSXPCConnectionReplyInvalid = 4101,
    NSXPCConnectionCodeSigningRequirementFailure = 4102,
    NSXPCConnectionErrorMinimum = 4096,
    NSXPCConnectionErrorMaximum = 4224,
    NSUbiquitousFileUnavailableError = 4353,
    NSUbiquitousFileNotUploadedDueToQuotaError = 4354,
    NSUbiquitousFileUbiquityServerNotAvailable = 4355,
    NSUbiquitousFileErrorMinimum = 4352,
    NSUbiquitousFileErrorMaximum = 4607,
    NSUserActivityHandoffFailedError = 4608,
    NSUserActivityConnectionUnavailableError = 4609,
    NSUserActivityRemoteApplicationTimedOutError = 4610,
    NSUserActivityHandoffUserInfoTooLargeError = 4611,
    NSUserActivityErrorMinimum = 4608,
    NSUserActivityErrorMaximum = 4863,
    NSCoderReadCorruptError = 4864,
    NSCoderValueNotFoundError = 4865,
    NSCoderInvalidValueError = 4866,
    NSCoderErrorMinimum = 4864,
    NSCoderErrorMaximum = 4991,
    NSBundleErrorMinimum = 4992,
    NSBundleErrorMaximum = 5119,
    NSBundleOnDemandResourceOutOfSpaceError = 4992,
    NSBundleOnDemandResourceExceededMaximumSizeError = 4993,
    NSBundleOnDemandResourceInvalidTagError = 4994,
    NSCloudSharingNetworkFailureError = 5120,
    NSCloudSharingQuotaExceededError = 5121,
    NSCloudSharingTooManyParticipantsError = 5122,
    NSCloudSharingConflictError = 5123,
    NSCloudSharingNoPermissionError = 5124,
    NSCloudSharingOtherError = 5375,
    NSCloudSharingErrorMinimum = 5120,
    NSCloudSharingErrorMaximum = 5375,
    NSCompressionFailedError = 5376,
    NSDecompressionFailedError = 5377,
    NSCompressionErrorMinimum = 5376,
    NSCompressionErrorMaximum = 5503,
};

pub const OperatingSystemVersion = extern struct {
    majorVersion: objc.NSInteger,
    minorVersion: objc.NSInteger,
    patchVersion: objc.NSInteger,
};

/// https://developer.apple.com/documentation/Foundation/NSProcessInfo?language=objc
pub const ProcessInfo = opaque {
    pub const InternalInfo = objc.ExternalClass("NSProcessInfo", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn operatingSystem(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "operatingSystem", objc.NSUInteger, .{});
    }

    pub fn operatingSystemName(self: *@This()) ?*String {
        return objc.msgSend(self, "operatingSystemName", ?*String, .{});
    }

    pub fn isOperatingSystemAtLeastVersion(self: *@This(), version: OperatingSystemVersion) objc.BOOL {
        return objc.msgSend(self, "isOperatingSystemAtLeastVersion:", objc.BOOL, .{version});
    }

    pub fn disableSuddenTermination(self: *@This()) void {
        return objc.msgSend(self, "disableSuddenTermination", void, .{});
    }

    pub fn enableSuddenTermination(self: *@This()) void {
        return objc.msgSend(self, "enableSuddenTermination", void, .{});
    }

    pub fn disableAutomaticTermination(self: *@This(), reason: ?*String) void {
        return objc.msgSend(self, "disableAutomaticTermination:", void, .{reason});
    }

    pub fn enableAutomaticTermination(self: *@This(), reason: ?*String) void {
        return objc.msgSend(self, "enableAutomaticTermination:", void, .{reason});
    }

    pub fn processInfo(self: *@This()) ?*ProcessInfo {
        return objc.msgSend(self, "processInfo", ?*ProcessInfo, .{});
    }

    pub fn environment(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "environment", ?*anyopaque, .{});
    }

    pub fn arguments(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "arguments", ?*anyopaque, .{});
    }

    pub fn hostName(self: *@This()) ?*String {
        return objc.msgSend(self, "hostName", ?*String, .{});
    }

    pub fn processName(self: *@This()) ?*String {
        return objc.msgSend(self, "processName", ?*String, .{});
    }

    pub fn setProcessName(self: *@This(), processName: ?*String) void {
        return objc.msgSend(self, "setProcessName:", void, .{processName});
    }

    pub fn processIdentifier(self: *@This()) i32 {
        return objc.msgSend(self, "processIdentifier", i32, .{});
    }

    pub fn globallyUniqueString(self: *@This()) ?*String {
        return objc.msgSend(self, "globallyUniqueString", ?*String, .{});
    }

    pub fn operatingSystemVersionString(self: *@This()) ?*String {
        return objc.msgSend(self, "operatingSystemVersionString", ?*String, .{});
    }

    pub fn operatingSystemVersion(self: *@This()) OperatingSystemVersion {
        return objc.msgSend(self, "operatingSystemVersion", OperatingSystemVersion, .{});
    }

    pub fn processorCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "processorCount", objc.NSUInteger, .{});
    }

    pub fn activeProcessorCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "activeProcessorCount", objc.NSUInteger, .{});
    }

    pub fn physicalMemory(self: *@This()) u64 {
        return objc.msgSend(self, "physicalMemory", u64, .{});
    }

    pub fn systemUptime(self: *@This()) TimeInterval {
        return objc.msgSend(self, "systemUptime", TimeInterval, .{});
    }

    pub fn automaticTerminationSupportEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "automaticTerminationSupportEnabled", objc.BOOL, .{});
    }

    pub fn setAutomaticTerminationSupportEnabled(self: *@This(), automaticTerminationSupportEnabled: objc.BOOL) void {
        return objc.msgSend(self, "setAutomaticTerminationSupportEnabled:", void, .{automaticTerminationSupportEnabled});
    }

};

pub const ActivityOptions = enum(objc.uint64_t) {
    IdleDisplaySleepDisabled = 1099511627776,
    IdleSystemSleepDisabled = 1048576,
    SuddenTerminationDisabled = 16384,
    AutomaticTerminationDisabled = 32768,
    AnimationTrackingEnabled = 35184372088832,
    TrackingEnabled = 70368744177664,
    UserInitiated = 16777215,
    UserInitiatedAllowingIdleSystemSleep = 15728639,
    Background = 255,
    LatencyCritical = 1095216660480,
    UserInteractive = 1095233437695,
};

pub const ProcessInfoThermalState = enum(objc.NSInteger) {
    Nominal = 0,
    Fair = 1,
    Serious = 2,
    Critical = 3,
};

/// https://developer.apple.com/documentation/Foundation/NSProxy?language=objc
pub const Proxy = opaque {
    pub const InternalInfo = objc.ExternalClass("NSProxy", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn alloc(self: *@This()) *objc.Id {
        return objc.msgSend(self, "alloc", *objc.Id, .{});
    }

    pub fn allocWithZone(self: *@This(), zone: ?*Zone) *objc.Id {
        return objc.msgSend(self, "allocWithZone:", *objc.Id, .{zone});
    }

    pub fn class(self: *@This()) *objc.Class {
        return objc.msgSend(self, "class", *objc.Class, .{});
    }

    pub fn forwardInvocation(self: *@This(), invocation: ?*Invocation) void {
        return objc.msgSend(self, "forwardInvocation:", void, .{invocation});
    }

    pub fn methodSignatureForSelector(self: *@This(), sel: *objc.SEL) ?*MethodSignature {
        return objc.msgSend(self, "methodSignatureForSelector:", ?*MethodSignature, .{sel});
    }

    pub fn dealloc(self: *@This()) void {
        return objc.msgSend(self, "dealloc", void, .{});
    }

    pub fn finalize(self: *@This()) void {
        return objc.msgSend(self, "finalize", void, .{});
    }

    pub fn respondsToSelector(self: *@This(), aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(self, "respondsToSelector:", objc.BOOL, .{aSelector});
    }

    pub fn allowsWeakReference(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn description(self: *@This()) ?*String {
        return objc.msgSend(self, "description", ?*String, .{});
    }

    pub fn debugDescription(self: *@This()) ?*String {
        return objc.msgSend(self, "debugDescription", ?*String, .{});
    }

};

pub const TextCheckingType = enum(objc.uint64_t) {
    Orthography = 1,
    Spelling = 2,
    Grammar = 4,
    Date = 8,
    Address = 16,
    Link = 32,
    Quote = 64,
    Dash = 128,
    Replacement = 256,
    Correction = 512,
    RegularExpression = 1024,
    PhoneNumber = 2048,
    TransitInformation = 4096,
};

pub const TextCheckingTypes = objc.uint64_t;

pub const TextCheckingKey = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSTextCheckingResult?language=objc
pub const TextCheckingResult = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTextCheckingResult", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn resultType(self: *@This()) TextCheckingType {
        return objc.msgSend(self, "resultType", TextCheckingType, .{});
    }

    pub fn range(self: *@This()) Range {
        return objc.msgSend(self, "range", Range, .{});
    }

};

pub const RegularExpressionOptions = enum(objc.NSUInteger) {
    CaseInsensitive = 1,
    AllowCommentsAndWhitespace = 2,
    IgnoreMetacharacters = 4,
    DotMatchesLineSeparators = 8,
    AnchorsMatchLines = 16,
    UseUnixLineSeparators = 32,
    UseUnicodeWordBoundaries = 64,
};

/// https://developer.apple.com/documentation/Foundation/NSRegularExpression?language=objc
pub const RegularExpression = opaque {
    pub const InternalInfo = objc.ExternalClass("NSRegularExpression", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn regularExpressionWithPatternOptionsError(self: *@This(), pattern: ?*String, options: RegularExpressionOptions, @"error": ?*?*Error) ?*RegularExpression {
        return objc.msgSend(self, "regularExpressionWithPattern:options:error:", ?*RegularExpression, .{pattern, options, @"error"});
    }

    pub fn initWithPatternOptionsError(self: *@This(), pattern: ?*String, options: RegularExpressionOptions, @"error": ?*?*Error) *@This() {
        return objc.msgSend(self, "initWithPattern:options:error:", *@This(), .{pattern, options, @"error"});
    }

    pub fn escapedPatternForString(self: *@This(), string: ?*String) ?*String {
        return objc.msgSend(self, "escapedPatternForString:", ?*String, .{string});
    }

    pub fn pattern(self: *@This()) ?*String {
        return objc.msgSend(self, "pattern", ?*String, .{});
    }

    pub fn options(self: *@This()) RegularExpressionOptions {
        return objc.msgSend(self, "options", RegularExpressionOptions, .{});
    }

    pub fn numberOfCaptureGroups(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "numberOfCaptureGroups", objc.NSUInteger, .{});
    }

};

pub const MatchingOptions = enum(objc.NSUInteger) {
    ReportProgress = 1,
    ReportCompletion = 2,
    Anchored = 4,
    WithTransparentBounds = 8,
    WithoutAnchoringBounds = 16,
};

pub const MatchingFlags = enum(objc.NSUInteger) {
    Progress = 1,
    Completed = 2,
    HitEnd = 4,
    RequiredEnd = 8,
    InternalError = 16,
};

/// https://developer.apple.com/documentation/Foundation/NSDataDetector?language=objc
pub const DataDetector = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDataDetector", @This(), RegularExpression, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn dataDetectorWithTypesError(self: *@This(), checkingTypes: TextCheckingTypes, @"error": ?*?*Error) ?*DataDetector {
        return objc.msgSend(self, "dataDetectorWithTypes:error:", ?*DataDetector, .{checkingTypes, @"error"});
    }

    pub fn initWithTypesError(self: *@This(), checkingTypes: TextCheckingTypes, @"error": ?*?*Error) *@This() {
        return objc.msgSend(self, "initWithTypes:error:", *@This(), .{checkingTypes, @"error"});
    }

    pub fn checkingTypes(self: *@This()) TextCheckingTypes {
        return objc.msgSend(self, "checkingTypes", TextCheckingTypes, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSSortDescriptor?language=objc
pub const SortDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSortDescriptor", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn sortDescriptorWithKeyAscending(self: *@This(), key: ?*String, ascending: objc.BOOL) *@This() {
        return objc.msgSend(self, "sortDescriptorWithKey:ascending:", *@This(), .{key, ascending});
    }

    pub fn sortDescriptorWithKeyAscendingSelector(self: *@This(), key: ?*String, ascending: objc.BOOL, selector: *objc.SEL) *@This() {
        return objc.msgSend(self, "sortDescriptorWithKey:ascending:selector:", *@This(), .{key, ascending, selector});
    }

    pub fn initWithKeyAscending(self: *@This(), key: ?*String, ascending: objc.BOOL) *@This() {
        return objc.msgSend(self, "initWithKey:ascending:", *@This(), .{key, ascending});
    }

    pub fn initWithKeyAscendingSelector(self: *@This(), key: ?*String, ascending: objc.BOOL, selector: *objc.SEL) *@This() {
        return objc.msgSend(self, "initWithKey:ascending:selector:", *@This(), .{key, ascending, selector});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn allowEvaluation(self: *@This()) void {
        return objc.msgSend(self, "allowEvaluation", void, .{});
    }

    pub fn sortDescriptorWithKeyAscendingComparator(self: *@This(), key: ?*String, ascending: objc.BOOL, cmptr: Comparator) *@This() {
        return objc.msgSend(self, "sortDescriptorWithKey:ascending:comparator:", *@This(), .{key, ascending, cmptr});
    }

    pub fn initWithKeyAscendingComparator(self: *@This(), key: ?*String, ascending: objc.BOOL, cmptr: Comparator) *@This() {
        return objc.msgSend(self, "initWithKey:ascending:comparator:", *@This(), .{key, ascending, cmptr});
    }

    pub fn compareObjectToObject(self: *@This(), object1: *objc.Id, object2: *objc.Id) ComparisonResult {
        return objc.msgSend(self, "compareObject:toObject:", ComparisonResult, .{object1, object2});
    }

    pub fn key(self: *@This()) ?*String {
        return objc.msgSend(self, "key", ?*String, .{});
    }

    pub fn ascending(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "ascending", objc.BOOL, .{});
    }

    pub fn selector(self: *@This()) *objc.SEL {
        return objc.msgSend(self, "selector", *objc.SEL, .{});
    }

    pub fn comparator(self: *@This()) Comparator {
        return objc.msgSend(self, "comparator", Comparator, .{});
    }

    pub fn reversedSortDescriptor(self: *@This()) *objc.Id {
        return objc.msgSend(self, "reversedSortDescriptor", *objc.Id, .{});
    }

};

pub const StreamPropertyKey = ?*String;

pub const StreamStatus = enum(objc.NSUInteger) {
    NotOpen = 0,
    Opening = 1,
    Open = 2,
    Reading = 3,
    Writing = 4,
    AtEnd = 5,
    Closed = 6,
    Error = 7,
};

pub const StreamEvent = enum(objc.NSUInteger) {
    None = 0,
    OpenCompleted = 1,
    HasBytesAvailable = 2,
    HasSpaceAvailable = 4,
    ErrorOccurred = 8,
    EndEncountered = 16,
};

/// https://developer.apple.com/documentation/Foundation/NSStream?language=objc
pub const Stream = opaque {
    pub const InternalInfo = objc.ExternalClass("NSStream", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn open(self: *@This()) void {
        return objc.msgSend(self, "open", void, .{});
    }

    pub fn close(self: *@This()) void {
        return objc.msgSend(self, "close", void, .{});
    }

    pub fn propertyForKey(self: *@This(), key: StreamPropertyKey) *objc.Id {
        return objc.msgSend(self, "propertyForKey:", *objc.Id, .{key});
    }

    pub fn setPropertyForKey(self: *@This(), property: *objc.Id, key: StreamPropertyKey) objc.BOOL {
        return objc.msgSend(self, "setProperty:forKey:", objc.BOOL, .{property, key});
    }

    pub fn scheduleInRunLoopForMode(self: *@This(), aRunLoop: ?*RunLoop, mode: RunLoopMode) void {
        return objc.msgSend(self, "scheduleInRunLoop:forMode:", void, .{aRunLoop, mode});
    }

    pub fn removeFromRunLoopForMode(self: *@This(), aRunLoop: ?*RunLoop, mode: RunLoopMode) void {
        return objc.msgSend(self, "removeFromRunLoop:forMode:", void, .{aRunLoop, mode});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn streamStatus(self: *@This()) StreamStatus {
        return objc.msgSend(self, "streamStatus", StreamStatus, .{});
    }

    pub fn streamError(self: *@This()) ?*Error {
        return objc.msgSend(self, "streamError", ?*Error, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSInputStream?language=objc
pub const InputStream = opaque {
    pub const InternalInfo = objc.ExternalClass("NSInputStream", @This(), Stream, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn readMaxLength(self: *@This(), buffer: ?*objc.uint8_t, len: objc.NSUInteger) objc.NSInteger {
        return objc.msgSend(self, "read:maxLength:", objc.NSInteger, .{buffer, len});
    }

    pub fn getBufferLength(self: *@This(), buffer: ?*?*objc.uint8_t, len: ?*objc.NSUInteger) objc.BOOL {
        return objc.msgSend(self, "getBuffer:length:", objc.BOOL, .{buffer, len});
    }

    pub fn initWithData(self: *@This(), data: ?*Data) *@This() {
        return objc.msgSend(self, "initWithData:", *@This(), .{data});
    }

    pub fn initWithURL(self: *@This(), url: ?*URL) *@This() {
        return objc.msgSend(self, "initWithURL:", *@This(), .{url});
    }

    pub fn hasBytesAvailable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasBytesAvailable", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSOutputStream?language=objc
pub const OutputStream = opaque {
    pub const InternalInfo = objc.ExternalClass("NSOutputStream", @This(), Stream, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn writeMaxLength(self: *@This(), buffer: ?*objc.uint8_t, len: objc.NSUInteger) objc.NSInteger {
        return objc.msgSend(self, "write:maxLength:", objc.NSInteger, .{buffer, len});
    }

    pub fn initToMemory(self: *@This()) *@This() {
        return objc.msgSend(self, "initToMemory", *@This(), .{});
    }

    pub fn initToBufferCapacity(self: *@This(), buffer: ?*objc.uint8_t, capacity: objc.NSUInteger) *@This() {
        return objc.msgSend(self, "initToBuffer:capacity:", *@This(), .{buffer, capacity});
    }

    pub fn initWithURLAppend(self: *@This(), url: ?*URL, shouldAppend: objc.BOOL) *@This() {
        return objc.msgSend(self, "initWithURL:append:", *@This(), .{url, shouldAppend});
    }

    pub fn hasSpaceAvailable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasSpaceAvailable", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSStreamDelegate?language=objc
pub const StreamDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn streamHandleEvent(self: *@This(), aStream: ?*Stream, eventCode: StreamEvent) void {
        return objc.msgSend(self, "stream:handleEvent:", void, .{aStream, eventCode});
    }

};

pub const StreamSocketSecurityLevel = ?*String;

pub const StreamSOCKSProxyConfiguration = ?*String;

pub const StreamSOCKSProxyVersion = ?*String;

pub const StreamNetworkServiceTypeValue = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSThread?language=objc
pub const Thread = opaque {
    pub const InternalInfo = objc.ExternalClass("NSThread", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn detachNewThreadWithBlock(self: *@This(), block: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "detachNewThreadWithBlock:", void, .{block});
    }

    pub fn detachNewThreadSelectorToTargetWithObject(self: *@This(), selector: *objc.SEL, target: *objc.Id, argument: *objc.Id) void {
        return objc.msgSend(self, "detachNewThreadSelector:toTarget:withObject:", void, .{selector, target, argument});
    }

    pub fn isMultiThreaded(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isMultiThreaded", objc.BOOL, .{});
    }

    pub fn sleepUntilDate(self: *@This(), date: ?*Date) void {
        return objc.msgSend(self, "sleepUntilDate:", void, .{date});
    }

    pub fn sleepForTimeInterval(self: *@This(), ti: TimeInterval) void {
        return objc.msgSend(self, "sleepForTimeInterval:", void, .{ti});
    }

    pub fn exit(self: *@This()) void {
        return objc.msgSend(self, "exit", void, .{});
    }

    pub fn threadPriority(self: *@This()) f64 {
        return objc.msgSend(self, "threadPriority", f64, .{});
    }

    pub fn setThreadPriority(self: *@This(), p: f64) objc.BOOL {
        return objc.msgSend(self, "setThreadPriority:", objc.BOOL, .{p});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithTargetSelectorObject(self: *@This(), target: *objc.Id, selector: *objc.SEL, argument: *objc.Id) *@This() {
        return objc.msgSend(self, "initWithTarget:selector:object:", *@This(), .{target, selector, argument});
    }

    pub fn initWithBlock(self: *@This(), block: *const fn() callconv(.C) void) *@This() {
        return objc.msgSend(self, "initWithBlock:", *@This(), .{block});
    }

    pub fn cancel(self: *@This()) void {
        return objc.msgSend(self, "cancel", void, .{});
    }

    pub fn start(self: *@This()) void {
        return objc.msgSend(self, "start", void, .{});
    }

    pub fn main(self: *@This()) void {
        return objc.msgSend(self, "main", void, .{});
    }

    pub fn currentThread(self: *@This()) ?*Thread {
        return objc.msgSend(self, "currentThread", ?*Thread, .{});
    }

    pub fn threadDictionary(self: *@This()) ?*MutableDictionary {
        return objc.msgSend(self, "threadDictionary", ?*MutableDictionary, .{});
    }

    pub fn threadPriority(self: *@This()) f64 {
        return objc.msgSend(self, "threadPriority", f64, .{});
    }

    pub fn setThreadPriority(self: *@This(), threadPriority: f64) void {
        return objc.msgSend(self, "setThreadPriority:", void, .{threadPriority});
    }

    pub fn qualityOfService(self: *@This()) QualityOfService {
        return objc.msgSend(self, "qualityOfService", QualityOfService, .{});
    }

    pub fn setQualityOfService(self: *@This(), qualityOfService: QualityOfService) void {
        return objc.msgSend(self, "setQualityOfService:", void, .{qualityOfService});
    }

    pub fn callStackReturnAddresses(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "callStackReturnAddresses", ?*anyopaque, .{});
    }

    pub fn callStackSymbols(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "callStackSymbols", ?*anyopaque, .{});
    }

    pub fn name(self: *@This()) ?*String {
        return objc.msgSend(self, "name", ?*String, .{});
    }

    pub fn setName(self: *@This(), name: ?*String) void {
        return objc.msgSend(self, "setName:", void, .{name});
    }

    pub fn stackSize(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "stackSize", objc.NSUInteger, .{});
    }

    pub fn setStackSize(self: *@This(), stackSize: objc.NSUInteger) void {
        return objc.msgSend(self, "setStackSize:", void, .{stackSize});
    }

    pub fn isMainThread(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isMainThread", objc.BOOL, .{});
    }

    pub fn isMainThread(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isMainThread", objc.BOOL, .{});
    }

    pub fn mainThread(self: *@This()) ?*Thread {
        return objc.msgSend(self, "mainThread", ?*Thread, .{});
    }

    pub fn isExecuting(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isExecuting", objc.BOOL, .{});
    }

    pub fn isFinished(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isFinished", objc.BOOL, .{});
    }

    pub fn isCancelled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isCancelled", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSTimeZone?language=objc
pub const TimeZone = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTimeZone", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn secondsFromGMTForDate(self: *@This(), aDate: ?*Date) objc.NSInteger {
        return objc.msgSend(self, "secondsFromGMTForDate:", objc.NSInteger, .{aDate});
    }

    pub fn abbreviationForDate(self: *@This(), aDate: ?*Date) ?*String {
        return objc.msgSend(self, "abbreviationForDate:", ?*String, .{aDate});
    }

    pub fn isDaylightSavingTimeForDate(self: *@This(), aDate: ?*Date) objc.BOOL {
        return objc.msgSend(self, "isDaylightSavingTimeForDate:", objc.BOOL, .{aDate});
    }

    pub fn daylightSavingTimeOffsetForDate(self: *@This(), aDate: ?*Date) TimeInterval {
        return objc.msgSend(self, "daylightSavingTimeOffsetForDate:", TimeInterval, .{aDate});
    }

    pub fn nextDaylightSavingTimeTransitionAfterDate(self: *@This(), aDate: ?*Date) ?*Date {
        return objc.msgSend(self, "nextDaylightSavingTimeTransitionAfterDate:", ?*Date, .{aDate});
    }

    pub fn name(self: *@This()) ?*String {
        return objc.msgSend(self, "name", ?*String, .{});
    }

    pub fn data(self: *@This()) ?*Data {
        return objc.msgSend(self, "data", ?*Data, .{});
    }

};

pub const TimeZoneNameStyle = enum(objc.NSInteger) {
    Standard = 0,
    ShortStandard = 1,
    DaylightSaving = 2,
    ShortDaylightSaving = 3,
    Generic = 4,
    ShortGeneric = 5,
};

/// https://developer.apple.com/documentation/Foundation/NSTimer?language=objc
pub const Timer = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTimer", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn timerWithTimeIntervalInvocationRepeats(self: *@This(), ti: TimeInterval, invocation: ?*Invocation, yesOrNo: objc.BOOL) ?*Timer {
        return objc.msgSend(self, "timerWithTimeInterval:invocation:repeats:", ?*Timer, .{ti, invocation, yesOrNo});
    }

    pub fn scheduledTimerWithTimeIntervalInvocationRepeats(self: *@This(), ti: TimeInterval, invocation: ?*Invocation, yesOrNo: objc.BOOL) ?*Timer {
        return objc.msgSend(self, "scheduledTimerWithTimeInterval:invocation:repeats:", ?*Timer, .{ti, invocation, yesOrNo});
    }

    pub fn timerWithTimeIntervalTargetSelectorUserInfoRepeats(self: *@This(), ti: TimeInterval, aTarget: *objc.Id, aSelector: *objc.SEL, userInfo: *objc.Id, yesOrNo: objc.BOOL, ) ?*Timer {
        return objc.msgSend(self, "timerWithTimeInterval:target:selector:userInfo:repeats:", ?*Timer, .{ti, aTarget, aSelector, userInfo, yesOrNo, });
    }

    pub fn scheduledTimerWithTimeIntervalTargetSelectorUserInfoRepeats(self: *@This(), ti: TimeInterval, aTarget: *objc.Id, aSelector: *objc.SEL, userInfo: *objc.Id, yesOrNo: objc.BOOL, ) ?*Timer {
        return objc.msgSend(self, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", ?*Timer, .{ti, aTarget, aSelector, userInfo, yesOrNo, });
    }

    pub fn timerWithTimeIntervalRepeatsBlock(self: *@This(), interval: TimeInterval, repeats: objc.BOOL, block: *const fn(?*Timer) callconv(.C) void) ?*Timer {
        return objc.msgSend(self, "timerWithTimeInterval:repeats:block:", ?*Timer, .{interval, repeats, block});
    }

    pub fn scheduledTimerWithTimeIntervalRepeatsBlock(self: *@This(), interval: TimeInterval, repeats: objc.BOOL, block: *const fn(?*Timer) callconv(.C) void) ?*Timer {
        return objc.msgSend(self, "scheduledTimerWithTimeInterval:repeats:block:", ?*Timer, .{interval, repeats, block});
    }

    pub fn initWithFireDateIntervalRepeatsBlock(self: *@This(), date: ?*Date, interval: TimeInterval, repeats: objc.BOOL, block: *const fn(?*Timer) callconv(.C) void, ) *@This() {
        return objc.msgSend(self, "initWithFireDate:interval:repeats:block:", *@This(), .{date, interval, repeats, block, });
    }

    pub fn initWithFireDateIntervalTargetSelectorUserInfoRepeats(self: *@This(), date: ?*Date, ti: TimeInterval, t: *objc.Id, s: *objc.SEL, ui: *objc.Id, rep: objc.BOOL, ) *@This() {
        return objc.msgSend(self, "initWithFireDate:interval:target:selector:userInfo:repeats:", *@This(), .{date, ti, t, s, ui, rep, });
    }

    pub fn fire(self: *@This()) void {
        return objc.msgSend(self, "fire", void, .{});
    }

    pub fn invalidate(self: *@This()) void {
        return objc.msgSend(self, "invalidate", void, .{});
    }

    pub fn fireDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "fireDate", ?*Date, .{});
    }

    pub fn setFireDate(self: *@This(), fireDate: ?*Date) void {
        return objc.msgSend(self, "setFireDate:", void, .{fireDate});
    }

    pub fn timeInterval(self: *@This()) TimeInterval {
        return objc.msgSend(self, "timeInterval", TimeInterval, .{});
    }

    pub fn tolerance(self: *@This()) TimeInterval {
        return objc.msgSend(self, "tolerance", TimeInterval, .{});
    }

    pub fn setTolerance(self: *@This(), tolerance: TimeInterval) void {
        return objc.msgSend(self, "setTolerance:", void, .{tolerance});
    }

    pub fn isValid(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isValid", objc.BOOL, .{});
    }

    pub fn userInfo(self: *@This()) *objc.Id {
        return objc.msgSend(self, "userInfo", *objc.Id, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSURLAuthenticationChallengeSender?language=objc
pub const URLAuthenticationChallengeSender = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn useCredentialForAuthenticationChallenge(self: *@This(), credential: ?*URLCredential, challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(self, "useCredential:forAuthenticationChallenge:", void, .{credential, challenge});
    }

    pub fn continueWithoutCredentialForAuthenticationChallenge(self: *@This(), challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(self, "continueWithoutCredentialForAuthenticationChallenge:", void, .{challenge});
    }

    pub fn cancelAuthenticationChallenge(self: *@This(), challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(self, "cancelAuthenticationChallenge:", void, .{challenge});
    }

    pub fn performDefaultHandlingForAuthenticationChallenge(self: *@This(), challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(self, "performDefaultHandlingForAuthenticationChallenge:", void, .{challenge});
    }

    pub fn rejectProtectionSpaceAndContinueWithChallenge(self: *@This(), challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(self, "rejectProtectionSpaceAndContinueWithChallenge:", void, .{challenge});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSURLAuthenticationChallenge?language=objc
pub const URLAuthenticationChallenge = opaque {
    pub const InternalInfo = objc.ExternalClass("NSURLAuthenticationChallenge", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithProtectionSpaceProposedCredentialPreviousFailureCountFailureResponseErrorSender(self: *@This(), space: ?*URLProtectionSpace, credential: ?*URLCredential, previousFailureCount: objc.NSInteger, response: ?*URLResponse, @"error": ?*Error, sender: ?*anyopaque, ) *@This() {
        return objc.msgSend(self, "initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:", *@This(), .{space, credential, previousFailureCount, response, @"error", sender, });
    }

    pub fn initWithAuthenticationChallengeSender(self: *@This(), challenge: ?*URLAuthenticationChallenge, sender: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithAuthenticationChallenge:sender:", *@This(), .{challenge, sender});
    }

    pub fn protectionSpace(self: *@This()) ?*URLProtectionSpace {
        return objc.msgSend(self, "protectionSpace", ?*URLProtectionSpace, .{});
    }

    pub fn proposedCredential(self: *@This()) ?*URLCredential {
        return objc.msgSend(self, "proposedCredential", ?*URLCredential, .{});
    }

    pub fn previousFailureCount(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "previousFailureCount", objc.NSInteger, .{});
    }

    pub fn failureResponse(self: *@This()) ?*URLResponse {
        return objc.msgSend(self, "failureResponse", ?*URLResponse, .{});
    }

    pub fn @"error"(self: *@This()) ?*Error {
        return objc.msgSend(self, "error", ?*Error, .{});
    }

    pub fn sender(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "sender", ?*anyopaque, .{});
    }

};

pub const URLCacheStoragePolicy = enum(objc.NSUInteger) {
    Allowed = 0,
    AllowedInMemoryOnly = 1,
    NotAllowed = 2,
};

/// https://developer.apple.com/documentation/Foundation/NSCachedURLResponse?language=objc
pub const CachedURLResponse = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCachedURLResponse", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithResponseData(self: *@This(), response: ?*URLResponse, data: ?*Data) *@This() {
        return objc.msgSend(self, "initWithResponse:data:", *@This(), .{response, data});
    }

    pub fn initWithResponseDataUserInfoStoragePolicy(self: *@This(), response: ?*URLResponse, data: ?*Data, userInfo: ?*Dictionary, storagePolicy: URLCacheStoragePolicy, ) *@This() {
        return objc.msgSend(self, "initWithResponse:data:userInfo:storagePolicy:", *@This(), .{response, data, userInfo, storagePolicy, });
    }

    pub fn response(self: *@This()) ?*URLResponse {
        return objc.msgSend(self, "response", ?*URLResponse, .{});
    }

    pub fn data(self: *@This()) ?*Data {
        return objc.msgSend(self, "data", ?*Data, .{});
    }

    pub fn userInfo(self: *@This()) ?*Dictionary {
        return objc.msgSend(self, "userInfo", ?*Dictionary, .{});
    }

    pub fn storagePolicy(self: *@This()) URLCacheStoragePolicy {
        return objc.msgSend(self, "storagePolicy", URLCacheStoragePolicy, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSURLCache?language=objc
pub const URLCache = opaque {
    pub const InternalInfo = objc.ExternalClass("NSURLCache", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithMemoryCapacityDiskCapacityDiskPath(self: *@This(), memoryCapacity: objc.NSUInteger, diskCapacity: objc.NSUInteger, path: ?*String) *@This() {
        return objc.msgSend(self, "initWithMemoryCapacity:diskCapacity:diskPath:", *@This(), .{memoryCapacity, diskCapacity, path});
    }

    pub fn initWithMemoryCapacityDiskCapacityDirectoryURL(self: *@This(), memoryCapacity: objc.NSUInteger, diskCapacity: objc.NSUInteger, directoryURL: ?*URL) *@This() {
        return objc.msgSend(self, "initWithMemoryCapacity:diskCapacity:directoryURL:", *@This(), .{memoryCapacity, diskCapacity, directoryURL});
    }

    pub fn cachedResponseForRequest(self: *@This(), request: ?*URLRequest) ?*CachedURLResponse {
        return objc.msgSend(self, "cachedResponseForRequest:", ?*CachedURLResponse, .{request});
    }

    pub fn storeCachedResponseForRequest(self: *@This(), cachedResponse: ?*CachedURLResponse, request: ?*URLRequest) void {
        return objc.msgSend(self, "storeCachedResponse:forRequest:", void, .{cachedResponse, request});
    }

    pub fn removeCachedResponseForRequest(self: *@This(), request: ?*URLRequest) void {
        return objc.msgSend(self, "removeCachedResponseForRequest:", void, .{request});
    }

    pub fn removeAllCachedResponses(self: *@This()) void {
        return objc.msgSend(self, "removeAllCachedResponses", void, .{});
    }

    pub fn removeCachedResponsesSinceDate(self: *@This(), date: ?*Date) void {
        return objc.msgSend(self, "removeCachedResponsesSinceDate:", void, .{date});
    }

    pub fn sharedURLCache(self: *@This()) ?*URLCache {
        return objc.msgSend(self, "sharedURLCache", ?*URLCache, .{});
    }

    pub fn setSharedURLCache(self: *@This(), sharedURLCache: ?*URLCache) void {
        return objc.msgSend(self, "setSharedURLCache:", void, .{sharedURLCache});
    }

    pub fn memoryCapacity(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "memoryCapacity", objc.NSUInteger, .{});
    }

    pub fn setMemoryCapacity(self: *@This(), memoryCapacity: objc.NSUInteger) void {
        return objc.msgSend(self, "setMemoryCapacity:", void, .{memoryCapacity});
    }

    pub fn diskCapacity(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "diskCapacity", objc.NSUInteger, .{});
    }

    pub fn setDiskCapacity(self: *@This(), diskCapacity: objc.NSUInteger) void {
        return objc.msgSend(self, "setDiskCapacity:", void, .{diskCapacity});
    }

    pub fn currentMemoryUsage(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "currentMemoryUsage", objc.NSUInteger, .{});
    }

    pub fn currentDiskUsage(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "currentDiskUsage", objc.NSUInteger, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSURLConnection?language=objc
pub const URLConnection = opaque {
    pub const InternalInfo = objc.ExternalClass("NSURLConnection", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithRequestDelegateStartImmediately(self: *@This(), request: ?*URLRequest, delegate: *objc.Id, startImmediately: objc.BOOL) *@This() {
        return objc.msgSend(self, "initWithRequest:delegate:startImmediately:", *@This(), .{request, delegate, startImmediately});
    }

    pub fn initWithRequestDelegate(self: *@This(), request: ?*URLRequest, delegate: *objc.Id) *@This() {
        return objc.msgSend(self, "initWithRequest:delegate:", *@This(), .{request, delegate});
    }

    pub fn connectionWithRequestDelegate(self: *@This(), request: ?*URLRequest, delegate: *objc.Id) ?*URLConnection {
        return objc.msgSend(self, "connectionWithRequest:delegate:", ?*URLConnection, .{request, delegate});
    }

    pub fn start(self: *@This()) void {
        return objc.msgSend(self, "start", void, .{});
    }

    pub fn cancel(self: *@This()) void {
        return objc.msgSend(self, "cancel", void, .{});
    }

    pub fn scheduleInRunLoopForMode(self: *@This(), aRunLoop: ?*RunLoop, mode: RunLoopMode) void {
        return objc.msgSend(self, "scheduleInRunLoop:forMode:", void, .{aRunLoop, mode});
    }

    pub fn unscheduleFromRunLoopForMode(self: *@This(), aRunLoop: ?*RunLoop, mode: RunLoopMode) void {
        return objc.msgSend(self, "unscheduleFromRunLoop:forMode:", void, .{aRunLoop, mode});
    }

    pub fn setDelegateQueue(self: *@This(), queue: ?*OperationQueue) void {
        return objc.msgSend(self, "setDelegateQueue:", void, .{queue});
    }

    pub fn canHandleRequest(self: *@This(), request: ?*URLRequest) objc.BOOL {
        return objc.msgSend(self, "canHandleRequest:", objc.BOOL, .{request});
    }

    pub fn originalRequest(self: *@This()) ?*URLRequest {
        return objc.msgSend(self, "originalRequest", ?*URLRequest, .{});
    }

    pub fn currentRequest(self: *@This()) ?*URLRequest {
        return objc.msgSend(self, "currentRequest", ?*URLRequest, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSURLConnectionDelegate?language=objc
pub const URLConnectionDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn connectionDidFailWithError(self: *@This(), connection: ?*URLConnection, @"error": ?*Error) void {
        return objc.msgSend(self, "connection:didFailWithError:", void, .{connection, @"error"});
    }

    pub fn connectionShouldUseCredentialStorage(self: *@This(), connection: ?*URLConnection) objc.BOOL {
        return objc.msgSend(self, "connectionShouldUseCredentialStorage:", objc.BOOL, .{connection});
    }

    pub fn connectionWillSendRequestForAuthenticationChallenge(self: *@This(), connection: ?*URLConnection, challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(self, "connection:willSendRequestForAuthenticationChallenge:", void, .{connection, challenge});
    }

    pub fn connectionCanAuthenticateAgainstProtectionSpace(self: *@This(), connection: ?*URLConnection, protectionSpace: ?*URLProtectionSpace) objc.BOOL {
        return objc.msgSend(self, "connection:canAuthenticateAgainstProtectionSpace:", objc.BOOL, .{connection, protectionSpace});
    }

    pub fn connectionDidReceiveAuthenticationChallenge(self: *@This(), connection: ?*URLConnection, challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(self, "connection:didReceiveAuthenticationChallenge:", void, .{connection, challenge});
    }

    pub fn connectionDidCancelAuthenticationChallenge(self: *@This(), connection: ?*URLConnection, challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(self, "connection:didCancelAuthenticationChallenge:", void, .{connection, challenge});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSURLConnectionDataDelegate?language=objc
pub const URLConnectionDataDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{URLConnectionDelegate, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn connectionWillSendRequestRedirectResponse(self: *@This(), connection: ?*URLConnection, request: ?*URLRequest, response: ?*URLResponse) ?*URLRequest {
        return objc.msgSend(self, "connection:willSendRequest:redirectResponse:", ?*URLRequest, .{connection, request, response});
    }

    pub fn connectionDidReceiveResponse(self: *@This(), connection: ?*URLConnection, response: ?*URLResponse) void {
        return objc.msgSend(self, "connection:didReceiveResponse:", void, .{connection, response});
    }

    pub fn connectionDidReceiveData(self: *@This(), connection: ?*URLConnection, data: ?*Data) void {
        return objc.msgSend(self, "connection:didReceiveData:", void, .{connection, data});
    }

    pub fn connectionNeedNewBodyStream(self: *@This(), connection: ?*URLConnection, request: ?*URLRequest) ?*InputStream {
        return objc.msgSend(self, "connection:needNewBodyStream:", ?*InputStream, .{connection, request});
    }

    pub fn connectionDidSendBodyDataTotalBytesWrittenTotalBytesExpectedToWrite(self: *@This(), connection: ?*URLConnection, bytesWritten: objc.NSInteger, totalBytesWritten: objc.NSInteger, totalBytesExpectedToWrite: objc.NSInteger, ) void {
        return objc.msgSend(self, "connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:", void, .{connection, bytesWritten, totalBytesWritten, totalBytesExpectedToWrite, });
    }

    pub fn connectionWillCacheResponse(self: *@This(), connection: ?*URLConnection, cachedResponse: ?*CachedURLResponse) ?*CachedURLResponse {
        return objc.msgSend(self, "connection:willCacheResponse:", ?*CachedURLResponse, .{connection, cachedResponse});
    }

    pub fn connectionDidFinishLoading(self: *@This(), connection: ?*URLConnection) void {
        return objc.msgSend(self, "connectionDidFinishLoading:", void, .{connection});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSURLConnectionDownloadDelegate?language=objc
pub const URLConnectionDownloadDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{URLConnectionDelegate, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn connectionDidWriteDataTotalBytesWrittenExpectedTotalBytes(self: *@This(), connection: ?*URLConnection, bytesWritten: i64, totalBytesWritten: i64, expectedTotalBytes: i64, ) void {
        return objc.msgSend(self, "connection:didWriteData:totalBytesWritten:expectedTotalBytes:", void, .{connection, bytesWritten, totalBytesWritten, expectedTotalBytes, });
    }

    pub fn connectionDidResumeDownloadingTotalBytesWrittenExpectedTotalBytes(self: *@This(), connection: ?*URLConnection, totalBytesWritten: i64, expectedTotalBytes: i64) void {
        return objc.msgSend(self, "connectionDidResumeDownloading:totalBytesWritten:expectedTotalBytes:", void, .{connection, totalBytesWritten, expectedTotalBytes});
    }

    pub fn connectionDidFinishDownloadingDestinationURL(self: *@This(), connection: ?*URLConnection, destinationURL: ?*URL) void {
        return objc.msgSend(self, "connectionDidFinishDownloading:destinationURL:", void, .{connection, destinationURL});
    }

};

pub const anon471 = enum(objc.NSInteger) {
    NSUbiquitousKeyValueStoreServerChange = 0,
    NSUbiquitousKeyValueStoreInitialSyncChange = 1,
    NSUbiquitousKeyValueStoreQuotaViolationChange = 2,
    NSUbiquitousKeyValueStoreAccountChange = 3,
};

pub const URLCredentialPersistence = enum(objc.NSUInteger) {
    None = 0,
    ForSession = 1,
    Permanent = 2,
    Synchronizable = 3,
};

/// https://developer.apple.com/documentation/Foundation/NSURLCredential?language=objc
pub const URLCredential = opaque {
    pub const InternalInfo = objc.ExternalClass("NSURLCredential", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn persistence(self: *@This()) URLCredentialPersistence {
        return objc.msgSend(self, "persistence", URLCredentialPersistence, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSURLProtectionSpace?language=objc
pub const URLProtectionSpace = opaque {
    pub const InternalInfo = objc.ExternalClass("NSURLProtectionSpace", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithHostPortProtocolRealmAuthenticationMethod(self: *@This(), host: ?*String, port: objc.NSInteger, protocol: ?*String, realm: ?*String, authenticationMethod: ?*String, ) *@This() {
        return objc.msgSend(self, "initWithHost:port:protocol:realm:authenticationMethod:", *@This(), .{host, port, protocol, realm, authenticationMethod, });
    }

    pub fn initWithProxyHostPortTypeRealmAuthenticationMethod(self: *@This(), host: ?*String, port: objc.NSInteger, @"type": ?*String, realm: ?*String, authenticationMethod: ?*String, ) *@This() {
        return objc.msgSend(self, "initWithProxyHost:port:type:realm:authenticationMethod:", *@This(), .{host, port, @"type", realm, authenticationMethod, });
    }

    pub fn realm(self: *@This()) ?*String {
        return objc.msgSend(self, "realm", ?*String, .{});
    }

    pub fn receivesCredentialSecurely(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "receivesCredentialSecurely", objc.BOOL, .{});
    }

    pub fn isProxy(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isProxy", objc.BOOL, .{});
    }

    pub fn host(self: *@This()) ?*String {
        return objc.msgSend(self, "host", ?*String, .{});
    }

    pub fn port(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "port", objc.NSInteger, .{});
    }

    pub fn proxyType(self: *@This()) ?*String {
        return objc.msgSend(self, "proxyType", ?*String, .{});
    }

    pub fn protocol(self: *@This()) ?*String {
        return objc.msgSend(self, "protocol", ?*String, .{});
    }

    pub fn authenticationMethod(self: *@This()) ?*String {
        return objc.msgSend(self, "authenticationMethod", ?*String, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSURLCredentialStorage?language=objc
pub const URLCredentialStorage = opaque {
    pub const InternalInfo = objc.ExternalClass("NSURLCredentialStorage", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn credentialsForProtectionSpace(self: *@This(), space: ?*URLProtectionSpace) ?*anyopaque {
        return objc.msgSend(self, "credentialsForProtectionSpace:", ?*anyopaque, .{space});
    }

    pub fn setCredentialForProtectionSpace(self: *@This(), credential: ?*URLCredential, space: ?*URLProtectionSpace) void {
        return objc.msgSend(self, "setCredential:forProtectionSpace:", void, .{credential, space});
    }

    pub fn removeCredentialForProtectionSpace(self: *@This(), credential: ?*URLCredential, space: ?*URLProtectionSpace) void {
        return objc.msgSend(self, "removeCredential:forProtectionSpace:", void, .{credential, space});
    }

    pub fn removeCredentialForProtectionSpaceOptions(self: *@This(), credential: ?*URLCredential, space: ?*URLProtectionSpace, options: ?*anyopaque) void {
        return objc.msgSend(self, "removeCredential:forProtectionSpace:options:", void, .{credential, space, options});
    }

    pub fn defaultCredentialForProtectionSpace(self: *@This(), space: ?*URLProtectionSpace) ?*URLCredential {
        return objc.msgSend(self, "defaultCredentialForProtectionSpace:", ?*URLCredential, .{space});
    }

    pub fn setDefaultCredentialForProtectionSpace(self: *@This(), credential: ?*URLCredential, space: ?*URLProtectionSpace) void {
        return objc.msgSend(self, "setDefaultCredential:forProtectionSpace:", void, .{credential, space});
    }

    pub fn sharedCredentialStorage(self: *@This()) ?*URLCredentialStorage {
        return objc.msgSend(self, "sharedCredentialStorage", ?*URLCredentialStorage, .{});
    }

    pub fn allCredentials(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "allCredentials", ?*anyopaque, .{});
    }

};

pub const anon691 = enum(objc.NSInteger) {
    NSURLErrorCancelledReasonUserForceQuitApplication = 0,
    NSURLErrorCancelledReasonBackgroundUpdatesDisabled = 1,
    NSURLErrorCancelledReasonInsufficientSystemResources = 2,
};

pub const URLErrorNetworkUnavailableReason = enum(objc.NSInteger) {
    Cellular = 0,
    Expensive = 1,
    Constrained = 2,
};

pub const anon1001 = enum(objc.NSInteger) {
    NSURLErrorUnknown = -1,
    NSURLErrorCancelled = -999,
    NSURLErrorBadURL = -1000,
    NSURLErrorTimedOut = -1001,
    NSURLErrorUnsupportedURL = -1002,
    NSURLErrorCannotFindHost = -1003,
    NSURLErrorCannotConnectToHost = -1004,
    NSURLErrorNetworkConnectionLost = -1005,
    NSURLErrorDNSLookupFailed = -1006,
    NSURLErrorHTTPTooManyRedirects = -1007,
    NSURLErrorResourceUnavailable = -1008,
    NSURLErrorNotConnectedToInternet = -1009,
    NSURLErrorRedirectToNonExistentLocation = -1010,
    NSURLErrorBadServerResponse = -1011,
    NSURLErrorUserCancelledAuthentication = -1012,
    NSURLErrorUserAuthenticationRequired = -1013,
    NSURLErrorZeroByteResource = -1014,
    NSURLErrorCannotDecodeRawData = -1015,
    NSURLErrorCannotDecodeContentData = -1016,
    NSURLErrorCannotParseResponse = -1017,
    NSURLErrorAppTransportSecurityRequiresSecureConnection = -1022,
    NSURLErrorFileDoesNotExist = -1100,
    NSURLErrorFileIsDirectory = -1101,
    NSURLErrorNoPermissionsToReadFile = -1102,
    NSURLErrorDataLengthExceedsMaximum = -1103,
    NSURLErrorFileOutsideSafeArea = -1104,
    NSURLErrorSecureConnectionFailed = -1200,
    NSURLErrorServerCertificateHasBadDate = -1201,
    NSURLErrorServerCertificateUntrusted = -1202,
    NSURLErrorServerCertificateHasUnknownRoot = -1203,
    NSURLErrorServerCertificateNotYetValid = -1204,
    NSURLErrorClientCertificateRejected = -1205,
    NSURLErrorClientCertificateRequired = -1206,
    NSURLErrorCannotLoadFromNetwork = -2000,
    NSURLErrorCannotCreateFile = -3000,
    NSURLErrorCannotOpenFile = -3001,
    NSURLErrorCannotCloseFile = -3002,
    NSURLErrorCannotWriteToFile = -3003,
    NSURLErrorCannotRemoveFile = -3004,
    NSURLErrorCannotMoveFile = -3005,
    NSURLErrorDownloadDecodingFailedMidStream = -3006,
    NSURLErrorDownloadDecodingFailedToComplete = -3007,
    NSURLErrorInternationalRoamingOff = -1018,
    NSURLErrorCallIsActive = -1019,
    NSURLErrorDataNotAllowed = -1020,
    NSURLErrorRequestBodyStreamExhausted = -1021,
    NSURLErrorBackgroundSessionRequiresSharedContainer = -995,
    NSURLErrorBackgroundSessionInUseByAnotherProcess = -996,
    NSURLErrorBackgroundSessionWasDisconnected = -997,
};

/// https://developer.apple.com/documentation/Foundation/NSURLProtocolClient?language=objc
pub const URLProtocolClient = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn URLProtocolWasRedirectedToRequestRedirectResponse(self: *@This(), protocol: ?*URLProtocol, request: ?*URLRequest, redirectResponse: ?*URLResponse) void {
        return objc.msgSend(self, "URLProtocol:wasRedirectedToRequest:redirectResponse:", void, .{protocol, request, redirectResponse});
    }

    pub fn URLProtocolCachedResponseIsValid(self: *@This(), protocol: ?*URLProtocol, cachedResponse: ?*CachedURLResponse) void {
        return objc.msgSend(self, "URLProtocol:cachedResponseIsValid:", void, .{protocol, cachedResponse});
    }

    pub fn URLProtocolDidReceiveResponseCacheStoragePolicy(self: *@This(), protocol: ?*URLProtocol, response: ?*URLResponse, policy: URLCacheStoragePolicy) void {
        return objc.msgSend(self, "URLProtocol:didReceiveResponse:cacheStoragePolicy:", void, .{protocol, response, policy});
    }

    pub fn URLProtocolDidLoadData(self: *@This(), protocol: ?*URLProtocol, data: ?*Data) void {
        return objc.msgSend(self, "URLProtocol:didLoadData:", void, .{protocol, data});
    }

    pub fn URLProtocolDidFinishLoading(self: *@This(), protocol: ?*URLProtocol) void {
        return objc.msgSend(self, "URLProtocolDidFinishLoading:", void, .{protocol});
    }

    pub fn URLProtocolDidFailWithError(self: *@This(), protocol: ?*URLProtocol, @"error": ?*Error) void {
        return objc.msgSend(self, "URLProtocol:didFailWithError:", void, .{protocol, @"error"});
    }

    pub fn URLProtocolDidReceiveAuthenticationChallenge(self: *@This(), protocol: ?*URLProtocol, challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(self, "URLProtocol:didReceiveAuthenticationChallenge:", void, .{protocol, challenge});
    }

    pub fn URLProtocolDidCancelAuthenticationChallenge(self: *@This(), protocol: ?*URLProtocol, challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(self, "URLProtocol:didCancelAuthenticationChallenge:", void, .{protocol, challenge});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSURLProtocol?language=objc
pub const URLProtocol = opaque {
    pub const InternalInfo = objc.ExternalClass("NSURLProtocol", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithRequestCachedResponseClient(self: *@This(), request: ?*URLRequest, cachedResponse: ?*CachedURLResponse, client: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithRequest:cachedResponse:client:", *@This(), .{request, cachedResponse, client});
    }

    pub fn canInitWithRequest(self: *@This(), request: ?*URLRequest) objc.BOOL {
        return objc.msgSend(self, "canInitWithRequest:", objc.BOOL, .{request});
    }

    pub fn canonicalRequestForRequest(self: *@This(), request: ?*URLRequest) ?*URLRequest {
        return objc.msgSend(self, "canonicalRequestForRequest:", ?*URLRequest, .{request});
    }

    pub fn requestIsCacheEquivalentToRequest(self: *@This(), a: ?*URLRequest, b: ?*URLRequest) objc.BOOL {
        return objc.msgSend(self, "requestIsCacheEquivalent:toRequest:", objc.BOOL, .{a, b});
    }

    pub fn startLoading(self: *@This()) void {
        return objc.msgSend(self, "startLoading", void, .{});
    }

    pub fn stopLoading(self: *@This()) void {
        return objc.msgSend(self, "stopLoading", void, .{});
    }

    pub fn propertyForKeyInRequest(self: *@This(), key: ?*String, request: ?*URLRequest) *objc.Id {
        return objc.msgSend(self, "propertyForKey:inRequest:", *objc.Id, .{key, request});
    }

    pub fn setPropertyForKeyInRequest(self: *@This(), value: *objc.Id, key: ?*String, request: ?*MutableURLRequest) void {
        return objc.msgSend(self, "setProperty:forKey:inRequest:", void, .{value, key, request});
    }

    pub fn removePropertyForKeyInRequest(self: *@This(), key: ?*String, request: ?*MutableURLRequest) void {
        return objc.msgSend(self, "removePropertyForKey:inRequest:", void, .{key, request});
    }

    pub fn registerClass(self: *@This(), protocolClass: *objc.Class) objc.BOOL {
        return objc.msgSend(self, "registerClass:", objc.BOOL, .{protocolClass});
    }

    pub fn unregisterClass(self: *@This(), protocolClass: *objc.Class) void {
        return objc.msgSend(self, "unregisterClass:", void, .{protocolClass});
    }

    pub fn client(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "client", ?*anyopaque, .{});
    }

    pub fn request(self: *@This()) ?*URLRequest {
        return objc.msgSend(self, "request", ?*URLRequest, .{});
    }

    pub fn cachedResponse(self: *@This()) ?*CachedURLResponse {
        return objc.msgSend(self, "cachedResponse", ?*CachedURLResponse, .{});
    }

};

pub const URLRequestCachePolicy = enum(objc.NSUInteger) {
    UseProtocolCachePolicy = 0,
    ReloadIgnoringLocalCacheData = 1,
    ReloadIgnoringLocalAndRemoteCacheData = 4,
    ReloadIgnoringCacheData = 1,
    ReturnCacheDataElseLoad = 2,
    ReturnCacheDataDontLoad = 3,
    ReloadRevalidatingCacheData = 5,
};

pub const URLRequestNetworkServiceType = enum(objc.NSUInteger) {
    NetworkServiceTypeDefault = 0,
    NetworkServiceTypeVoIP = 1,
    NetworkServiceTypeVideo = 2,
    NetworkServiceTypeBackground = 3,
    NetworkServiceTypeVoice = 4,
    NetworkServiceTypeResponsiveData = 6,
    NetworkServiceTypeAVStreaming = 8,
    NetworkServiceTypeResponsiveAV = 9,
    NetworkServiceTypeCallSignaling = 11,
};

pub const URLRequestAttribution = enum(objc.NSUInteger) {
    Developer = 0,
    User = 1,
};

/// https://developer.apple.com/documentation/Foundation/NSURLRequest?language=objc
pub const URLRequest = opaque {
    pub const InternalInfo = objc.ExternalClass("NSURLRequest", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn requestWithURL(self: *@This(), URL: ?*URL) *@This() {
        return objc.msgSend(self, "requestWithURL:", *@This(), .{URL});
    }

    pub fn requestWithURLCachePolicyTimeoutInterval(self: *@This(), URL: ?*URL, cachePolicy: URLRequestCachePolicy, timeoutInterval: TimeInterval) *@This() {
        return objc.msgSend(self, "requestWithURL:cachePolicy:timeoutInterval:", *@This(), .{URL, cachePolicy, timeoutInterval});
    }

    pub fn initWithURL(self: *@This(), URL: ?*URL) *@This() {
        return objc.msgSend(self, "initWithURL:", *@This(), .{URL});
    }

    pub fn initWithURLCachePolicyTimeoutInterval(self: *@This(), URL: ?*URL, cachePolicy: URLRequestCachePolicy, timeoutInterval: TimeInterval) *@This() {
        return objc.msgSend(self, "initWithURL:cachePolicy:timeoutInterval:", *@This(), .{URL, cachePolicy, timeoutInterval});
    }

    pub fn supportsSecureCoding(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn URL(self: *@This()) ?*URL {
        return objc.msgSend(self, "URL", ?*URL, .{});
    }

    pub fn cachePolicy(self: *@This()) URLRequestCachePolicy {
        return objc.msgSend(self, "cachePolicy", URLRequestCachePolicy, .{});
    }

    pub fn timeoutInterval(self: *@This()) TimeInterval {
        return objc.msgSend(self, "timeoutInterval", TimeInterval, .{});
    }

    pub fn mainDocumentURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "mainDocumentURL", ?*URL, .{});
    }

    pub fn networkServiceType(self: *@This()) URLRequestNetworkServiceType {
        return objc.msgSend(self, "networkServiceType", URLRequestNetworkServiceType, .{});
    }

    pub fn allowsCellularAccess(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsCellularAccess", objc.BOOL, .{});
    }

    pub fn allowsExpensiveNetworkAccess(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsExpensiveNetworkAccess", objc.BOOL, .{});
    }

    pub fn allowsConstrainedNetworkAccess(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsConstrainedNetworkAccess", objc.BOOL, .{});
    }

    pub fn assumesHTTP3Capable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "assumesHTTP3Capable", objc.BOOL, .{});
    }

    pub fn attribution(self: *@This()) URLRequestAttribution {
        return objc.msgSend(self, "attribution", URLRequestAttribution, .{});
    }

    pub fn requiresDNSSECValidation(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "requiresDNSSECValidation", objc.BOOL, .{});
    }

    pub fn allowsPersistentDNS(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsPersistentDNS", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSMutableURLRequest?language=objc
pub const MutableURLRequest = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMutableURLRequest", @This(), URLRequest, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn URL(self: *@This()) ?*URL {
        return objc.msgSend(self, "URL", ?*URL, .{});
    }

    pub fn setURL(self: *@This(), URL: ?*URL) void {
        return objc.msgSend(self, "setURL:", void, .{URL});
    }

    pub fn cachePolicy(self: *@This()) URLRequestCachePolicy {
        return objc.msgSend(self, "cachePolicy", URLRequestCachePolicy, .{});
    }

    pub fn setCachePolicy(self: *@This(), cachePolicy: URLRequestCachePolicy) void {
        return objc.msgSend(self, "setCachePolicy:", void, .{cachePolicy});
    }

    pub fn timeoutInterval(self: *@This()) TimeInterval {
        return objc.msgSend(self, "timeoutInterval", TimeInterval, .{});
    }

    pub fn setTimeoutInterval(self: *@This(), timeoutInterval: TimeInterval) void {
        return objc.msgSend(self, "setTimeoutInterval:", void, .{timeoutInterval});
    }

    pub fn mainDocumentURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "mainDocumentURL", ?*URL, .{});
    }

    pub fn setMainDocumentURL(self: *@This(), mainDocumentURL: ?*URL) void {
        return objc.msgSend(self, "setMainDocumentURL:", void, .{mainDocumentURL});
    }

    pub fn networkServiceType(self: *@This()) URLRequestNetworkServiceType {
        return objc.msgSend(self, "networkServiceType", URLRequestNetworkServiceType, .{});
    }

    pub fn setNetworkServiceType(self: *@This(), networkServiceType: URLRequestNetworkServiceType) void {
        return objc.msgSend(self, "setNetworkServiceType:", void, .{networkServiceType});
    }

    pub fn allowsCellularAccess(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsCellularAccess", objc.BOOL, .{});
    }

    pub fn setAllowsCellularAccess(self: *@This(), allowsCellularAccess: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsCellularAccess:", void, .{allowsCellularAccess});
    }

    pub fn allowsExpensiveNetworkAccess(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsExpensiveNetworkAccess", objc.BOOL, .{});
    }

    pub fn setAllowsExpensiveNetworkAccess(self: *@This(), allowsExpensiveNetworkAccess: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsExpensiveNetworkAccess:", void, .{allowsExpensiveNetworkAccess});
    }

    pub fn allowsConstrainedNetworkAccess(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsConstrainedNetworkAccess", objc.BOOL, .{});
    }

    pub fn setAllowsConstrainedNetworkAccess(self: *@This(), allowsConstrainedNetworkAccess: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsConstrainedNetworkAccess:", void, .{allowsConstrainedNetworkAccess});
    }

    pub fn assumesHTTP3Capable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "assumesHTTP3Capable", objc.BOOL, .{});
    }

    pub fn setAssumesHTTP3Capable(self: *@This(), assumesHTTP3Capable: objc.BOOL) void {
        return objc.msgSend(self, "setAssumesHTTP3Capable:", void, .{assumesHTTP3Capable});
    }

    pub fn attribution(self: *@This()) URLRequestAttribution {
        return objc.msgSend(self, "attribution", URLRequestAttribution, .{});
    }

    pub fn setAttribution(self: *@This(), attribution: URLRequestAttribution) void {
        return objc.msgSend(self, "setAttribution:", void, .{attribution});
    }

    pub fn requiresDNSSECValidation(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "requiresDNSSECValidation", objc.BOOL, .{});
    }

    pub fn setRequiresDNSSECValidation(self: *@This(), requiresDNSSECValidation: objc.BOOL) void {
        return objc.msgSend(self, "setRequiresDNSSECValidation:", void, .{requiresDNSSECValidation});
    }

    pub fn allowsPersistentDNS(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsPersistentDNS", objc.BOOL, .{});
    }

    pub fn setAllowsPersistentDNS(self: *@This(), allowsPersistentDNS: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsPersistentDNS:", void, .{allowsPersistentDNS});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSURLResponse?language=objc
pub const URLResponse = opaque {
    pub const InternalInfo = objc.ExternalClass("NSURLResponse", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithURLMIMETypeExpectedContentLengthTextEncodingName(self: *@This(), URL: ?*URL, MIMEType: ?*String, length: objc.NSInteger, name: ?*String, ) *@This() {
        return objc.msgSend(self, "initWithURL:MIMEType:expectedContentLength:textEncodingName:", *@This(), .{URL, MIMEType, length, name, });
    }

    pub fn URL(self: *@This()) ?*URL {
        return objc.msgSend(self, "URL", ?*URL, .{});
    }

    pub fn MIMEType(self: *@This()) ?*String {
        return objc.msgSend(self, "MIMEType", ?*String, .{});
    }

    pub fn expectedContentLength(self: *@This()) i64 {
        return objc.msgSend(self, "expectedContentLength", i64, .{});
    }

    pub fn textEncodingName(self: *@This()) ?*String {
        return objc.msgSend(self, "textEncodingName", ?*String, .{});
    }

    pub fn suggestedFilename(self: *@This()) ?*String {
        return objc.msgSend(self, "suggestedFilename", ?*String, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSHTTPURLResponse?language=objc
pub const HTTPURLResponse = opaque {
    pub const InternalInfo = objc.ExternalClass("NSHTTPURLResponse", @This(), URLResponse, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithURLStatusCodeHTTPVersionHeaderFields(self: *@This(), url: ?*URL, statusCode: objc.NSInteger, HTTPVersion: ?*String, headerFields: ?*anyopaque, ) *@This() {
        return objc.msgSend(self, "initWithURL:statusCode:HTTPVersion:headerFields:", *@This(), .{url, statusCode, HTTPVersion, headerFields, });
    }

    pub fn valueForHTTPHeaderField(self: *@This(), field: ?*String) ?*String {
        return objc.msgSend(self, "valueForHTTPHeaderField:", ?*String, .{field});
    }

    pub fn localizedStringForStatusCode(self: *@This(), statusCode: objc.NSInteger) ?*String {
        return objc.msgSend(self, "localizedStringForStatusCode:", ?*String, .{statusCode});
    }

    pub fn statusCode(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "statusCode", objc.NSInteger, .{});
    }

    pub fn allHeaderFields(self: *@This()) ?*Dictionary {
        return objc.msgSend(self, "allHeaderFields", ?*Dictionary, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUserDefaults?language=objc
pub const UserDefaults = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUserDefaults", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn resetStandardUserDefaults(self: *@This()) void {
        return objc.msgSend(self, "resetStandardUserDefaults", void, .{});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithSuiteName(self: *@This(), suitename: ?*String) *@This() {
        return objc.msgSend(self, "initWithSuiteName:", *@This(), .{suitename});
    }

    pub fn initWithUser(self: *@This(), username: ?*String) *objc.Id {
        return objc.msgSend(self, "initWithUser:", *objc.Id, .{username});
    }

    pub fn objectForKey(self: *@This(), defaultName: ?*String) *objc.Id {
        return objc.msgSend(self, "objectForKey:", *objc.Id, .{defaultName});
    }

    pub fn setObjectForKey(self: *@This(), value: *objc.Id, defaultName: ?*String) void {
        return objc.msgSend(self, "setObject:forKey:", void, .{value, defaultName});
    }

    pub fn removeObjectForKey(self: *@This(), defaultName: ?*String) void {
        return objc.msgSend(self, "removeObjectForKey:", void, .{defaultName});
    }

    pub fn stringForKey(self: *@This(), defaultName: ?*String) ?*String {
        return objc.msgSend(self, "stringForKey:", ?*String, .{defaultName});
    }

    pub fn arrayForKey(self: *@This(), defaultName: ?*String) ?*Array {
        return objc.msgSend(self, "arrayForKey:", ?*Array, .{defaultName});
    }

    pub fn dictionaryForKey(self: *@This(), defaultName: ?*String) ?*anyopaque {
        return objc.msgSend(self, "dictionaryForKey:", ?*anyopaque, .{defaultName});
    }

    pub fn dataForKey(self: *@This(), defaultName: ?*String) ?*Data {
        return objc.msgSend(self, "dataForKey:", ?*Data, .{defaultName});
    }

    pub fn stringArrayForKey(self: *@This(), defaultName: ?*String) ?*anyopaque {
        return objc.msgSend(self, "stringArrayForKey:", ?*anyopaque, .{defaultName});
    }

    pub fn integerForKey(self: *@This(), defaultName: ?*String) objc.NSInteger {
        return objc.msgSend(self, "integerForKey:", objc.NSInteger, .{defaultName});
    }

    pub fn floatForKey(self: *@This(), defaultName: ?*String) f32 {
        return objc.msgSend(self, "floatForKey:", f32, .{defaultName});
    }

    pub fn doubleForKey(self: *@This(), defaultName: ?*String) f64 {
        return objc.msgSend(self, "doubleForKey:", f64, .{defaultName});
    }

    pub fn boolForKey(self: *@This(), defaultName: ?*String) objc.BOOL {
        return objc.msgSend(self, "boolForKey:", objc.BOOL, .{defaultName});
    }

    pub fn URLForKey(self: *@This(), defaultName: ?*String) ?*URL {
        return objc.msgSend(self, "URLForKey:", ?*URL, .{defaultName});
    }

    pub fn setIntegerForKey(self: *@This(), value: objc.NSInteger, defaultName: ?*String) void {
        return objc.msgSend(self, "setInteger:forKey:", void, .{value, defaultName});
    }

    pub fn setFloatForKey(self: *@This(), value: f32, defaultName: ?*String) void {
        return objc.msgSend(self, "setFloat:forKey:", void, .{value, defaultName});
    }

    pub fn setDoubleForKey(self: *@This(), value: f64, defaultName: ?*String) void {
        return objc.msgSend(self, "setDouble:forKey:", void, .{value, defaultName});
    }

    pub fn setBoolForKey(self: *@This(), value: objc.BOOL, defaultName: ?*String) void {
        return objc.msgSend(self, "setBool:forKey:", void, .{value, defaultName});
    }

    pub fn setURLForKey(self: *@This(), url: ?*URL, defaultName: ?*String) void {
        return objc.msgSend(self, "setURL:forKey:", void, .{url, defaultName});
    }

    pub fn registerDefaults(self: *@This(), registrationDictionary: ?*anyopaque) void {
        return objc.msgSend(self, "registerDefaults:", void, .{registrationDictionary});
    }

    pub fn addSuiteNamed(self: *@This(), suiteName: ?*String) void {
        return objc.msgSend(self, "addSuiteNamed:", void, .{suiteName});
    }

    pub fn removeSuiteNamed(self: *@This(), suiteName: ?*String) void {
        return objc.msgSend(self, "removeSuiteNamed:", void, .{suiteName});
    }

    pub fn dictionaryRepresentation(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "dictionaryRepresentation", ?*anyopaque, .{});
    }

    pub fn volatileDomainForName(self: *@This(), domainName: ?*String) ?*anyopaque {
        return objc.msgSend(self, "volatileDomainForName:", ?*anyopaque, .{domainName});
    }

    pub fn setVolatileDomainForName(self: *@This(), domain: ?*anyopaque, domainName: ?*String) void {
        return objc.msgSend(self, "setVolatileDomain:forName:", void, .{domain, domainName});
    }

    pub fn removeVolatileDomainForName(self: *@This(), domainName: ?*String) void {
        return objc.msgSend(self, "removeVolatileDomainForName:", void, .{domainName});
    }

    pub fn persistentDomainNames(self: *@This()) ?*Array {
        return objc.msgSend(self, "persistentDomainNames", ?*Array, .{});
    }

    pub fn persistentDomainForName(self: *@This(), domainName: ?*String) ?*anyopaque {
        return objc.msgSend(self, "persistentDomainForName:", ?*anyopaque, .{domainName});
    }

    pub fn setPersistentDomainForName(self: *@This(), domain: ?*anyopaque, domainName: ?*String) void {
        return objc.msgSend(self, "setPersistentDomain:forName:", void, .{domain, domainName});
    }

    pub fn removePersistentDomainForName(self: *@This(), domainName: ?*String) void {
        return objc.msgSend(self, "removePersistentDomainForName:", void, .{domainName});
    }

    pub fn synchronize(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "synchronize", objc.BOOL, .{});
    }

    pub fn objectIsForcedForKey(self: *@This(), key: ?*String) objc.BOOL {
        return objc.msgSend(self, "objectIsForcedForKey:", objc.BOOL, .{key});
    }

    pub fn objectIsForcedForKeyInDomain(self: *@This(), key: ?*String, domain: ?*String) objc.BOOL {
        return objc.msgSend(self, "objectIsForcedForKey:inDomain:", objc.BOOL, .{key, domain});
    }

    pub fn standardUserDefaults(self: *@This()) ?*UserDefaults {
        return objc.msgSend(self, "standardUserDefaults", ?*UserDefaults, .{});
    }

    pub fn volatileDomainNames(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "volatileDomainNames", ?*anyopaque, .{});
    }

};

pub const ValueTransformerName = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSValueTransformer?language=objc
pub const ValueTransformer = opaque {
    pub const InternalInfo = objc.ExternalClass("NSValueTransformer", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn setValueTransformerForName(self: *@This(), transformer: ?*ValueTransformer, name: ValueTransformerName) void {
        return objc.msgSend(self, "setValueTransformer:forName:", void, .{transformer, name});
    }

    pub fn valueTransformerForName(self: *@This(), name: ValueTransformerName) ?*ValueTransformer {
        return objc.msgSend(self, "valueTransformerForName:", ?*ValueTransformer, .{name});
    }

    pub fn valueTransformerNames(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "valueTransformerNames", ?*anyopaque, .{});
    }

    pub fn transformedValueClass(self: *@This()) *objc.Class {
        return objc.msgSend(self, "transformedValueClass", *objc.Class, .{});
    }

    pub fn allowsReverseTransformation(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsReverseTransformation", objc.BOOL, .{});
    }

    pub fn transformedValue(self: *@This(), value: *objc.Id) *objc.Id {
        return objc.msgSend(self, "transformedValue:", *objc.Id, .{value});
    }

    pub fn reverseTransformedValue(self: *@This(), value: *objc.Id) *objc.Id {
        return objc.msgSend(self, "reverseTransformedValue:", *objc.Id, .{value});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSSecureUnarchiveFromDataTransformer?language=objc
pub const SecureUnarchiveFromDataTransformer = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSecureUnarchiveFromDataTransformer", @This(), ValueTransformer, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn allowedTopLevelClasses(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "allowedTopLevelClasses", ?*anyopaque, .{});
    }

};

pub const XMLParserExternalEntityResolvingPolicy = enum(objc.NSUInteger) {
    ResolveExternalEntitiesNever = 0,
    ResolveExternalEntitiesNoNetwork = 1,
    ResolveExternalEntitiesSameOriginOnly = 2,
    ResolveExternalEntitiesAlways = 3,
};

/// https://developer.apple.com/documentation/Foundation/NSXMLParser?language=objc
pub const XMLParser = opaque {
    pub const InternalInfo = objc.ExternalClass("NSXMLParser", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithContentsOfURL(self: *@This(), url: ?*URL) *@This() {
        return objc.msgSend(self, "initWithContentsOfURL:", *@This(), .{url});
    }

    pub fn initWithData(self: *@This(), data: ?*Data) *@This() {
        return objc.msgSend(self, "initWithData:", *@This(), .{data});
    }

    pub fn initWithStream(self: *@This(), stream: ?*InputStream) *@This() {
        return objc.msgSend(self, "initWithStream:", *@This(), .{stream});
    }

    pub fn parse(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "parse", objc.BOOL, .{});
    }

    pub fn abortParsing(self: *@This()) void {
        return objc.msgSend(self, "abortParsing", void, .{});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn shouldProcessNamespaces(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "shouldProcessNamespaces", objc.BOOL, .{});
    }

    pub fn setShouldProcessNamespaces(self: *@This(), shouldProcessNamespaces: objc.BOOL) void {
        return objc.msgSend(self, "setShouldProcessNamespaces:", void, .{shouldProcessNamespaces});
    }

    pub fn shouldReportNamespacePrefixes(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "shouldReportNamespacePrefixes", objc.BOOL, .{});
    }

    pub fn setShouldReportNamespacePrefixes(self: *@This(), shouldReportNamespacePrefixes: objc.BOOL) void {
        return objc.msgSend(self, "setShouldReportNamespacePrefixes:", void, .{shouldReportNamespacePrefixes});
    }

    pub fn externalEntityResolvingPolicy(self: *@This()) XMLParserExternalEntityResolvingPolicy {
        return objc.msgSend(self, "externalEntityResolvingPolicy", XMLParserExternalEntityResolvingPolicy, .{});
    }

    pub fn setExternalEntityResolvingPolicy(self: *@This(), externalEntityResolvingPolicy: XMLParserExternalEntityResolvingPolicy) void {
        return objc.msgSend(self, "setExternalEntityResolvingPolicy:", void, .{externalEntityResolvingPolicy});
    }

    pub fn allowedExternalEntityURLs(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "allowedExternalEntityURLs", ?*anyopaque, .{});
    }

    pub fn setAllowedExternalEntityURLs(self: *@This(), allowedExternalEntityURLs: ?*anyopaque) void {
        return objc.msgSend(self, "setAllowedExternalEntityURLs:", void, .{allowedExternalEntityURLs});
    }

    pub fn parserError(self: *@This()) ?*Error {
        return objc.msgSend(self, "parserError", ?*Error, .{});
    }

    pub fn shouldResolveExternalEntities(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "shouldResolveExternalEntities", objc.BOOL, .{});
    }

    pub fn setShouldResolveExternalEntities(self: *@This(), shouldResolveExternalEntities: objc.BOOL) void {
        return objc.msgSend(self, "setShouldResolveExternalEntities:", void, .{shouldResolveExternalEntities});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSXMLParserDelegate?language=objc
pub const XMLParserDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn parserDidStartDocument(self: *@This(), parser: ?*XMLParser) void {
        return objc.msgSend(self, "parserDidStartDocument:", void, .{parser});
    }

    pub fn parserDidEndDocument(self: *@This(), parser: ?*XMLParser) void {
        return objc.msgSend(self, "parserDidEndDocument:", void, .{parser});
    }

    pub fn parserFoundNotationDeclarationWithNamePublicIDSystemID(self: *@This(), parser: ?*XMLParser, name: ?*String, publicID: ?*String, systemID: ?*String, ) void {
        return objc.msgSend(self, "parser:foundNotationDeclarationWithName:publicID:systemID:", void, .{parser, name, publicID, systemID, });
    }

    pub fn parserFoundUnparsedEntityDeclarationWithNamePublicIDSystemIDNotationName(self: *@This(), parser: ?*XMLParser, name: ?*String, publicID: ?*String, systemID: ?*String, notationName: ?*String, ) void {
        return objc.msgSend(self, "parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:", void, .{parser, name, publicID, systemID, notationName, });
    }

    pub fn parserFoundAttributeDeclarationWithNameForElementTypeDefaultValue(self: *@This(), parser: ?*XMLParser, attributeName: ?*String, elementName: ?*String, @"type": ?*String, defaultValue: ?*String, ) void {
        return objc.msgSend(self, "parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:", void, .{parser, attributeName, elementName, @"type", defaultValue, });
    }

    pub fn parserFoundElementDeclarationWithNameModel(self: *@This(), parser: ?*XMLParser, elementName: ?*String, model: ?*String) void {
        return objc.msgSend(self, "parser:foundElementDeclarationWithName:model:", void, .{parser, elementName, model});
    }

    pub fn parserFoundInternalEntityDeclarationWithNameValue(self: *@This(), parser: ?*XMLParser, name: ?*String, value: ?*String) void {
        return objc.msgSend(self, "parser:foundInternalEntityDeclarationWithName:value:", void, .{parser, name, value});
    }

    pub fn parserFoundExternalEntityDeclarationWithNamePublicIDSystemID(self: *@This(), parser: ?*XMLParser, name: ?*String, publicID: ?*String, systemID: ?*String, ) void {
        return objc.msgSend(self, "parser:foundExternalEntityDeclarationWithName:publicID:systemID:", void, .{parser, name, publicID, systemID, });
    }

    pub fn parserDidStartElementNamespaceURIQualifiedNameAttributes(self: *@This(), parser: ?*XMLParser, elementName: ?*String, namespaceURI: ?*String, qName: ?*String, attributeDict: ?*anyopaque, ) void {
        return objc.msgSend(self, "parser:didStartElement:namespaceURI:qualifiedName:attributes:", void, .{parser, elementName, namespaceURI, qName, attributeDict, });
    }

    pub fn parserDidEndElementNamespaceURIQualifiedName(self: *@This(), parser: ?*XMLParser, elementName: ?*String, namespaceURI: ?*String, qName: ?*String, ) void {
        return objc.msgSend(self, "parser:didEndElement:namespaceURI:qualifiedName:", void, .{parser, elementName, namespaceURI, qName, });
    }

    pub fn parserDidStartMappingPrefixToURI(self: *@This(), parser: ?*XMLParser, prefix: ?*String, namespaceURI: ?*String) void {
        return objc.msgSend(self, "parser:didStartMappingPrefix:toURI:", void, .{parser, prefix, namespaceURI});
    }

    pub fn parserDidEndMappingPrefix(self: *@This(), parser: ?*XMLParser, prefix: ?*String) void {
        return objc.msgSend(self, "parser:didEndMappingPrefix:", void, .{parser, prefix});
    }

    pub fn parserFoundCharacters(self: *@This(), parser: ?*XMLParser, string: ?*String) void {
        return objc.msgSend(self, "parser:foundCharacters:", void, .{parser, string});
    }

    pub fn parserFoundIgnorableWhitespace(self: *@This(), parser: ?*XMLParser, whitespaceString: ?*String) void {
        return objc.msgSend(self, "parser:foundIgnorableWhitespace:", void, .{parser, whitespaceString});
    }

    pub fn parserFoundProcessingInstructionWithTargetData(self: *@This(), parser: ?*XMLParser, target: ?*String, data: ?*String) void {
        return objc.msgSend(self, "parser:foundProcessingInstructionWithTarget:data:", void, .{parser, target, data});
    }

    pub fn parserFoundComment(self: *@This(), parser: ?*XMLParser, comment: ?*String) void {
        return objc.msgSend(self, "parser:foundComment:", void, .{parser, comment});
    }

    pub fn parserFoundCDATA(self: *@This(), parser: ?*XMLParser, CDATABlock: ?*Data) void {
        return objc.msgSend(self, "parser:foundCDATA:", void, .{parser, CDATABlock});
    }

    pub fn parserResolveExternalEntityNameSystemID(self: *@This(), parser: ?*XMLParser, name: ?*String, systemID: ?*String) ?*Data {
        return objc.msgSend(self, "parser:resolveExternalEntityName:systemID:", ?*Data, .{parser, name, systemID});
    }

    pub fn parserParseErrorOccurred(self: *@This(), parser: ?*XMLParser, parseError: ?*Error) void {
        return objc.msgSend(self, "parser:parseErrorOccurred:", void, .{parser, parseError});
    }

    pub fn parserValidationErrorOccurred(self: *@This(), parser: ?*XMLParser, validationError: ?*Error) void {
        return objc.msgSend(self, "parser:validationErrorOccurred:", void, .{parser, validationError});
    }

};

pub const XMLParserError = enum(objc.NSInteger) {
    InternalError = 1,
    OutOfMemoryError = 2,
    DocumentStartError = 3,
    EmptyDocumentError = 4,
    PrematureDocumentEndError = 5,
    InvalidHexCharacterRefError = 6,
    InvalidDecimalCharacterRefError = 7,
    InvalidCharacterRefError = 8,
    InvalidCharacterError = 9,
    CharacterRefAtEOFError = 10,
    CharacterRefInPrologError = 11,
    CharacterRefInEpilogError = 12,
    CharacterRefInDTDError = 13,
    EntityRefAtEOFError = 14,
    EntityRefInPrologError = 15,
    EntityRefInEpilogError = 16,
    EntityRefInDTDError = 17,
    ParsedEntityRefAtEOFError = 18,
    ParsedEntityRefInPrologError = 19,
    ParsedEntityRefInEpilogError = 20,
    ParsedEntityRefInInternalSubsetError = 21,
    EntityReferenceWithoutNameError = 22,
    EntityReferenceMissingSemiError = 23,
    ParsedEntityRefNoNameError = 24,
    ParsedEntityRefMissingSemiError = 25,
    UndeclaredEntityError = 26,
    UnparsedEntityError = 28,
    EntityIsExternalError = 29,
    EntityIsParameterError = 30,
    UnknownEncodingError = 31,
    EncodingNotSupportedError = 32,
    StringNotStartedError = 33,
    StringNotClosedError = 34,
    NamespaceDeclarationError = 35,
    EntityNotStartedError = 36,
    EntityNotFinishedError = 37,
    LessThanSymbolInAttributeError = 38,
    AttributeNotStartedError = 39,
    AttributeNotFinishedError = 40,
    AttributeHasNoValueError = 41,
    AttributeRedefinedError = 42,
    LiteralNotStartedError = 43,
    LiteralNotFinishedError = 44,
    CommentNotFinishedError = 45,
    ProcessingInstructionNotStartedError = 46,
    ProcessingInstructionNotFinishedError = 47,
    NotationNotStartedError = 48,
    NotationNotFinishedError = 49,
    AttributeListNotStartedError = 50,
    AttributeListNotFinishedError = 51,
    MixedContentDeclNotStartedError = 52,
    MixedContentDeclNotFinishedError = 53,
    ElementContentDeclNotStartedError = 54,
    ElementContentDeclNotFinishedError = 55,
    XMLDeclNotStartedError = 56,
    XMLDeclNotFinishedError = 57,
    ConditionalSectionNotStartedError = 58,
    ConditionalSectionNotFinishedError = 59,
    ExternalSubsetNotFinishedError = 60,
    DOCTYPEDeclNotFinishedError = 61,
    MisplacedCDATAEndStringError = 62,
    CDATANotFinishedError = 63,
    MisplacedXMLDeclarationError = 64,
    SpaceRequiredError = 65,
    SeparatorRequiredError = 66,
    NMTOKENRequiredError = 67,
    NAMERequiredError = 68,
    PCDATARequiredError = 69,
    URIRequiredError = 70,
    PublicIdentifierRequiredError = 71,
    LTRequiredError = 72,
    GTRequiredError = 73,
    LTSlashRequiredError = 74,
    EqualExpectedError = 75,
    TagNameMismatchError = 76,
    UnfinishedTagError = 77,
    StandaloneValueError = 78,
    InvalidEncodingNameError = 79,
    CommentContainsDoubleHyphenError = 80,
    InvalidEncodingError = 81,
    ExternalStandaloneEntityError = 82,
    InvalidConditionalSectionError = 83,
    EntityValueRequiredError = 84,
    NotWellBalancedError = 85,
    ExtraContentError = 86,
    InvalidCharacterInEntityError = 87,
    ParsedEntityRefInInternalError = 88,
    EntityRefLoopError = 89,
    EntityBoundaryError = 90,
    InvalidURIError = 91,
    URIFragmentError = 92,
    NoDTDError = 94,
    DelegateAbortedParseError = 512,
};

/// https://developer.apple.com/documentation/Foundation/NSXPCProxyCreating?language=objc
pub const XPCProxyCreating = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn remoteObjectProxy(self: *@This()) *objc.Id {
        return objc.msgSend(self, "remoteObjectProxy", *objc.Id, .{});
    }

    pub fn remoteObjectProxyWithErrorHandler(self: *@This(), handler: *const fn(?*Error) callconv(.C) void) *objc.Id {
        return objc.msgSend(self, "remoteObjectProxyWithErrorHandler:", *objc.Id, .{handler});
    }

    pub fn synchronousRemoteObjectProxyWithErrorHandler(self: *@This(), handler: *const fn(?*Error) callconv(.C) void) *objc.Id {
        return objc.msgSend(self, "synchronousRemoteObjectProxyWithErrorHandler:", *objc.Id, .{handler});
    }

};

pub const XPCConnectionOptions = enum(objc.NSUInteger) {
    Privileged = 4096,
};

/// https://developer.apple.com/documentation/Foundation/NSXPCConnection?language=objc
pub const XPCConnection = opaque {
    pub const InternalInfo = objc.ExternalClass("NSXPCConnection", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithServiceName(self: *@This(), serviceName: ?*String) *@This() {
        return objc.msgSend(self, "initWithServiceName:", *@This(), .{serviceName});
    }

    pub fn initWithMachServiceNameOptions(self: *@This(), name: ?*String, options: XPCConnectionOptions) *@This() {
        return objc.msgSend(self, "initWithMachServiceName:options:", *@This(), .{name, options});
    }

    pub fn initWithListenerEndpoint(self: *@This(), endpoint: ?*XPCListenerEndpoint) *@This() {
        return objc.msgSend(self, "initWithListenerEndpoint:", *@This(), .{endpoint});
    }

    pub fn remoteObjectProxyWithErrorHandler(self: *@This(), handler: *const fn(?*Error) callconv(.C) void) *objc.Id {
        return objc.msgSend(self, "remoteObjectProxyWithErrorHandler:", *objc.Id, .{handler});
    }

    pub fn synchronousRemoteObjectProxyWithErrorHandler(self: *@This(), handler: *const fn(?*Error) callconv(.C) void) *objc.Id {
        return objc.msgSend(self, "synchronousRemoteObjectProxyWithErrorHandler:", *objc.Id, .{handler});
    }

    pub fn @"resume"(self: *@This()) void {
        return objc.msgSend(self, "resume", void, .{});
    }

    pub fn @"suspend"(self: *@This()) void {
        return objc.msgSend(self, "suspend", void, .{});
    }

    pub fn activate(self: *@This()) void {
        return objc.msgSend(self, "activate", void, .{});
    }

    pub fn invalidate(self: *@This()) void {
        return objc.msgSend(self, "invalidate", void, .{});
    }

    pub fn currentConnection(self: *@This()) ?*XPCConnection {
        return objc.msgSend(self, "currentConnection", ?*XPCConnection, .{});
    }

    pub fn scheduleSendBarrierBlock(self: *@This(), block: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "scheduleSendBarrierBlock:", void, .{block});
    }

    pub fn setCodeSigningRequirement(self: *@This(), requirement: ?*String) void {
        return objc.msgSend(self, "setCodeSigningRequirement:", void, .{requirement});
    }

    pub fn serviceName(self: *@This()) ?*String {
        return objc.msgSend(self, "serviceName", ?*String, .{});
    }

    pub fn endpoint(self: *@This()) ?*XPCListenerEndpoint {
        return objc.msgSend(self, "endpoint", ?*XPCListenerEndpoint, .{});
    }

    pub fn exportedInterface(self: *@This()) ?*XPCInterface {
        return objc.msgSend(self, "exportedInterface", ?*XPCInterface, .{});
    }

    pub fn setExportedInterface(self: *@This(), exportedInterface: ?*XPCInterface) void {
        return objc.msgSend(self, "setExportedInterface:", void, .{exportedInterface});
    }

    pub fn exportedObject(self: *@This()) *objc.Id {
        return objc.msgSend(self, "exportedObject", *objc.Id, .{});
    }

    pub fn setExportedObject(self: *@This(), exportedObject: *objc.Id) void {
        return objc.msgSend(self, "setExportedObject:", void, .{exportedObject});
    }

    pub fn remoteObjectInterface(self: *@This()) ?*XPCInterface {
        return objc.msgSend(self, "remoteObjectInterface", ?*XPCInterface, .{});
    }

    pub fn setRemoteObjectInterface(self: *@This(), remoteObjectInterface: ?*XPCInterface) void {
        return objc.msgSend(self, "setRemoteObjectInterface:", void, .{remoteObjectInterface});
    }

    pub fn remoteObjectProxy(self: *@This()) *objc.Id {
        return objc.msgSend(self, "remoteObjectProxy", *objc.Id, .{});
    }

    pub fn interruptionHandler(self: *@This()) *const fn() callconv(.C) void {
        return objc.msgSend(self, "interruptionHandler", *const fn() callconv(.C) void, .{});
    }

    pub fn setInterruptionHandler(self: *@This(), interruptionHandler: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "setInterruptionHandler:", void, .{interruptionHandler});
    }

    pub fn invalidationHandler(self: *@This()) *const fn() callconv(.C) void {
        return objc.msgSend(self, "invalidationHandler", *const fn() callconv(.C) void, .{});
    }

    pub fn setInvalidationHandler(self: *@This(), invalidationHandler: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "setInvalidationHandler:", void, .{invalidationHandler});
    }

    pub fn auditSessionIdentifier(self: *@This()) objc.au_asid_t {
        return objc.msgSend(self, "auditSessionIdentifier", objc.au_asid_t, .{});
    }

    pub fn processIdentifier(self: *@This()) objc.pid_t {
        return objc.msgSend(self, "processIdentifier", objc.pid_t, .{});
    }

    pub fn effectiveUserIdentifier(self: *@This()) objc.uid_t {
        return objc.msgSend(self, "effectiveUserIdentifier", objc.uid_t, .{});
    }

    pub fn effectiveGroupIdentifier(self: *@This()) objc.gid_t {
        return objc.msgSend(self, "effectiveGroupIdentifier", objc.gid_t, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSXPCListener?language=objc
pub const XPCListener = opaque {
    pub const InternalInfo = objc.ExternalClass("NSXPCListener", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn serviceListener(self: *@This()) ?*XPCListener {
        return objc.msgSend(self, "serviceListener", ?*XPCListener, .{});
    }

    pub fn anonymousListener(self: *@This()) ?*XPCListener {
        return objc.msgSend(self, "anonymousListener", ?*XPCListener, .{});
    }

    pub fn initWithMachServiceName(self: *@This(), name: ?*String) *@This() {
        return objc.msgSend(self, "initWithMachServiceName:", *@This(), .{name});
    }

    pub fn @"resume"(self: *@This()) void {
        return objc.msgSend(self, "resume", void, .{});
    }

    pub fn @"suspend"(self: *@This()) void {
        return objc.msgSend(self, "suspend", void, .{});
    }

    pub fn activate(self: *@This()) void {
        return objc.msgSend(self, "activate", void, .{});
    }

    pub fn invalidate(self: *@This()) void {
        return objc.msgSend(self, "invalidate", void, .{});
    }

    pub fn setConnectionCodeSigningRequirement(self: *@This(), requirement: ?*String) void {
        return objc.msgSend(self, "setConnectionCodeSigningRequirement:", void, .{requirement});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn endpoint(self: *@This()) ?*XPCListenerEndpoint {
        return objc.msgSend(self, "endpoint", ?*XPCListenerEndpoint, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSXPCListenerDelegate?language=objc
pub const XPCListenerDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn listenerShouldAcceptNewConnection(self: *@This(), listener: ?*XPCListener, newConnection: ?*XPCConnection) objc.BOOL {
        return objc.msgSend(self, "listener:shouldAcceptNewConnection:", objc.BOOL, .{listener, newConnection});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSXPCInterface?language=objc
pub const XPCInterface = opaque {
    pub const InternalInfo = objc.ExternalClass("NSXPCInterface", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn interfaceWithProtocol(self: *@This(), protocol: ?*Protocol) ?*XPCInterface {
        return objc.msgSend(self, "interfaceWithProtocol:", ?*XPCInterface, .{protocol});
    }

    pub fn setClassesForSelectorArgumentIndexOfReply(self: *@This(), classes: ?*anyopaque, sel: *objc.SEL, arg: objc.NSUInteger, ofReply: objc.BOOL, ) void {
        return objc.msgSend(self, "setClasses:forSelector:argumentIndex:ofReply:", void, .{classes, sel, arg, ofReply, });
    }

    pub fn classesForSelectorArgumentIndexOfReply(self: *@This(), sel: *objc.SEL, arg: objc.NSUInteger, ofReply: objc.BOOL) ?*anyopaque {
        return objc.msgSend(self, "classesForSelector:argumentIndex:ofReply:", ?*anyopaque, .{sel, arg, ofReply});
    }

    pub fn setInterfaceForSelectorArgumentIndexOfReply(self: *@This(), ifc: ?*XPCInterface, sel: *objc.SEL, arg: objc.NSUInteger, ofReply: objc.BOOL, ) void {
        return objc.msgSend(self, "setInterface:forSelector:argumentIndex:ofReply:", void, .{ifc, sel, arg, ofReply, });
    }

    pub fn interfaceForSelectorArgumentIndexOfReply(self: *@This(), sel: *objc.SEL, arg: objc.NSUInteger, ofReply: objc.BOOL) ?*XPCInterface {
        return objc.msgSend(self, "interfaceForSelector:argumentIndex:ofReply:", ?*XPCInterface, .{sel, arg, ofReply});
    }

    pub fn setXPCTypeForSelectorArgumentIndexOfReply(self: *@This(), @"type": objc.xpc_type_t, sel: *objc.SEL, arg: objc.NSUInteger, ofReply: objc.BOOL, ) void {
        return objc.msgSend(self, "setXPCType:forSelector:argumentIndex:ofReply:", void, .{@"type", sel, arg, ofReply, });
    }

    pub fn XPCTypeForSelectorArgumentIndexOfReply(self: *@This(), sel: *objc.SEL, arg: objc.NSUInteger, ofReply: objc.BOOL) objc.xpc_type_t {
        return objc.msgSend(self, "XPCTypeForSelector:argumentIndex:ofReply:", objc.xpc_type_t, .{sel, arg, ofReply});
    }

    pub fn protocol(self: *@This()) ?*Protocol {
        return objc.msgSend(self, "protocol", ?*Protocol, .{});
    }

    pub fn setProtocol(self: *@This(), protocol: ?*Protocol) void {
        return objc.msgSend(self, "setProtocol:", void, .{protocol});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSXPCListenerEndpoint?language=objc
pub const XPCListenerEndpoint = opaque {
    pub const InternalInfo = objc.ExternalClass("NSXPCListenerEndpoint", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;
};

/// https://developer.apple.com/documentation/Foundation/NSXPCCoder?language=objc
pub const XPCCoder = opaque {
    pub const InternalInfo = objc.ExternalClass("NSXPCCoder", @This(), Coder, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn encodeXPCObjectForKey(self: *@This(), xpcObject: objc.xpc_object_t, key: ?*String) void {
        return objc.msgSend(self, "encodeXPCObject:forKey:", void, .{xpcObject, key});
    }

    pub fn decodeXPCObjectOfTypeForKey(self: *@This(), @"type": objc.xpc_type_t, key: ?*String) objc.xpc_object_t {
        return objc.msgSend(self, "decodeXPCObjectOfType:forKey:", objc.xpc_object_t, .{@"type", key});
    }

    pub fn userInfo(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "userInfo", ?*anyopaque, .{});
    }

    pub fn setUserInfo(self: *@This(), userInfo: ?*anyopaque) void {
        return objc.msgSend(self, "setUserInfo:", void, .{userInfo});
    }

    pub fn connection(self: *@This()) ?*XPCConnection {
        return objc.msgSend(self, "connection", ?*XPCConnection, .{});
    }

};

pub const ByteCountFormatterUnits = enum(objc.NSUInteger) {
    UseDefault = 0,
    UseBytes = 1,
    UseKB = 2,
    UseMB = 4,
    UseGB = 8,
    UseTB = 16,
    UsePB = 32,
    UseEB = 64,
    UseZB = 128,
    UseYBOrHigher = 65280,
    UseAll = 65535,
};

pub const ByteCountFormatterCountStyle = enum(objc.NSInteger) {
    File = 0,
    Memory = 1,
    Decimal = 2,
    Binary = 3,
};

/// https://developer.apple.com/documentation/Foundation/NSByteCountFormatter?language=objc
pub const ByteCountFormatter = opaque {
    pub const InternalInfo = objc.ExternalClass("NSByteCountFormatter", @This(), Formatter, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn stringFromByteCountCountStyle(self: *@This(), byteCount: i64, countStyle: ByteCountFormatterCountStyle) ?*String {
        return objc.msgSend(self, "stringFromByteCount:countStyle:", ?*String, .{byteCount, countStyle});
    }

    pub fn stringFromByteCount(self: *@This(), byteCount: i64) ?*String {
        return objc.msgSend(self, "stringFromByteCount:", ?*String, .{byteCount});
    }

    pub fn stringFromMeasurementCountStyle(self: *@This(), measurement: ?*anyopaque, countStyle: ByteCountFormatterCountStyle) ?*String {
        return objc.msgSend(self, "stringFromMeasurement:countStyle:", ?*String, .{measurement, countStyle});
    }

    pub fn stringFromMeasurement(self: *@This(), measurement: ?*anyopaque) ?*String {
        return objc.msgSend(self, "stringFromMeasurement:", ?*String, .{measurement});
    }

    pub fn stringForObjectValue(self: *@This(), obj: *objc.Id) ?*String {
        return objc.msgSend(self, "stringForObjectValue:", ?*String, .{obj});
    }

    pub fn allowedUnits(self: *@This()) ByteCountFormatterUnits {
        return objc.msgSend(self, "allowedUnits", ByteCountFormatterUnits, .{});
    }

    pub fn setAllowedUnits(self: *@This(), allowedUnits: ByteCountFormatterUnits) void {
        return objc.msgSend(self, "setAllowedUnits:", void, .{allowedUnits});
    }

    pub fn countStyle(self: *@This()) ByteCountFormatterCountStyle {
        return objc.msgSend(self, "countStyle", ByteCountFormatterCountStyle, .{});
    }

    pub fn setCountStyle(self: *@This(), countStyle: ByteCountFormatterCountStyle) void {
        return objc.msgSend(self, "setCountStyle:", void, .{countStyle});
    }

    pub fn allowsNonnumericFormatting(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsNonnumericFormatting", objc.BOOL, .{});
    }

    pub fn setAllowsNonnumericFormatting(self: *@This(), allowsNonnumericFormatting: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsNonnumericFormatting:", void, .{allowsNonnumericFormatting});
    }

    pub fn includesUnit(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "includesUnit", objc.BOOL, .{});
    }

    pub fn setIncludesUnit(self: *@This(), includesUnit: objc.BOOL) void {
        return objc.msgSend(self, "setIncludesUnit:", void, .{includesUnit});
    }

    pub fn includesCount(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "includesCount", objc.BOOL, .{});
    }

    pub fn setIncludesCount(self: *@This(), includesCount: objc.BOOL) void {
        return objc.msgSend(self, "setIncludesCount:", void, .{includesCount});
    }

    pub fn includesActualByteCount(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "includesActualByteCount", objc.BOOL, .{});
    }

    pub fn setIncludesActualByteCount(self: *@This(), includesActualByteCount: objc.BOOL) void {
        return objc.msgSend(self, "setIncludesActualByteCount:", void, .{includesActualByteCount});
    }

    pub fn isAdaptive(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAdaptive", objc.BOOL, .{});
    }

    pub fn setAdaptive(self: *@This(), adaptive: objc.BOOL) void {
        return objc.msgSend(self, "setAdaptive:", void, .{adaptive});
    }

    pub fn zeroPadsFractionDigits(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "zeroPadsFractionDigits", objc.BOOL, .{});
    }

    pub fn setZeroPadsFractionDigits(self: *@This(), zeroPadsFractionDigits: objc.BOOL) void {
        return objc.msgSend(self, "setZeroPadsFractionDigits:", void, .{zeroPadsFractionDigits});
    }

    pub fn formattingContext(self: *@This()) FormattingContext {
        return objc.msgSend(self, "formattingContext", FormattingContext, .{});
    }

    pub fn setFormattingContext(self: *@This(), formattingContext: FormattingContext) void {
        return objc.msgSend(self, "setFormattingContext:", void, .{formattingContext});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSCache?language=objc
pub const Cache = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCache", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn objectForKey(self: *@This(), key: void) void {
        return objc.msgSend(self, "objectForKey:", void, .{key});
    }

    pub fn setObjectForKey(self: *@This(), obj: void, key: void) void {
        return objc.msgSend(self, "setObject:forKey:", void, .{obj, key});
    }

    pub fn setObjectForKeyCost(self: *@This(), obj: void, key: void, g: objc.NSUInteger) void {
        return objc.msgSend(self, "setObject:forKey:cost:", void, .{obj, key, g});
    }

    pub fn removeObjectForKey(self: *@This(), key: void) void {
        return objc.msgSend(self, "removeObjectForKey:", void, .{key});
    }

    pub fn removeAllObjects(self: *@This()) void {
        return objc.msgSend(self, "removeAllObjects", void, .{});
    }

    pub fn name(self: *@This()) ?*String {
        return objc.msgSend(self, "name", ?*String, .{});
    }

    pub fn setName(self: *@This(), name: ?*String) void {
        return objc.msgSend(self, "setName:", void, .{name});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn totalCostLimit(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "totalCostLimit", objc.NSUInteger, .{});
    }

    pub fn setTotalCostLimit(self: *@This(), totalCostLimit: objc.NSUInteger) void {
        return objc.msgSend(self, "setTotalCostLimit:", void, .{totalCostLimit});
    }

    pub fn countLimit(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "countLimit", objc.NSUInteger, .{});
    }

    pub fn setCountLimit(self: *@This(), countLimit: objc.NSUInteger) void {
        return objc.msgSend(self, "setCountLimit:", void, .{countLimit});
    }

    pub fn evictsObjectsWithDiscardedContent(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "evictsObjectsWithDiscardedContent", objc.BOOL, .{});
    }

    pub fn setEvictsObjectsWithDiscardedContent(self: *@This(), evictsObjectsWithDiscardedContent: objc.BOOL) void {
        return objc.msgSend(self, "setEvictsObjectsWithDiscardedContent:", void, .{evictsObjectsWithDiscardedContent});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSCacheDelegate?language=objc
pub const CacheDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn cacheWillEvictObject(self: *@This(), cache: ?*Cache, obj: *objc.Id) void {
        return objc.msgSend(self, "cache:willEvictObject:", void, .{cache, obj});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSPredicate?language=objc
pub const Predicate = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPredicate", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn predicateWithFormatArgumentArray(self: *@This(), predicateFormat: ?*String, arguments: ?*Array) ?*Predicate {
        return objc.msgSend(self, "predicateWithFormat:argumentArray:", ?*Predicate, .{predicateFormat, arguments});
    }

    pub fn predicateWithFormat(self: *@This(), predicateFormat: ?*String) ?*Predicate {
        return objc.msgSend(self, "predicateWithFormat:", ?*Predicate, .{predicateFormat});
    }

    pub fn predicateWithFormatArguments(self: *@This(), predicateFormat: ?*String, argList: objc.va_list) ?*Predicate {
        return objc.msgSend(self, "predicateWithFormat:arguments:", ?*Predicate, .{predicateFormat, argList});
    }

    pub fn predicateFromMetadataQueryString(self: *@This(), queryString: ?*String) ?*Predicate {
        return objc.msgSend(self, "predicateFromMetadataQueryString:", ?*Predicate, .{queryString});
    }

    pub fn predicateWithValue(self: *@This(), value: objc.BOOL) ?*Predicate {
        return objc.msgSend(self, "predicateWithValue:", ?*Predicate, .{value});
    }

    pub fn predicateWithBlock(self: *@This(), block: *const fn(*objc.Id, ?*anyopaque) callconv(.C) objc.BOOL) ?*Predicate {
        return objc.msgSend(self, "predicateWithBlock:", ?*Predicate, .{block});
    }

    pub fn predicateWithSubstitutionVariables(self: *@This(), variables: ?*anyopaque) *@This() {
        return objc.msgSend(self, "predicateWithSubstitutionVariables:", *@This(), .{variables});
    }

    pub fn evaluateWithObject(self: *@This(), object: *objc.Id) objc.BOOL {
        return objc.msgSend(self, "evaluateWithObject:", objc.BOOL, .{object});
    }

    pub fn evaluateWithObjectSubstitutionVariables(self: *@This(), object: *objc.Id, bindings: ?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "evaluateWithObject:substitutionVariables:", objc.BOOL, .{object, bindings});
    }

    pub fn allowEvaluation(self: *@This()) void {
        return objc.msgSend(self, "allowEvaluation", void, .{});
    }

    pub fn predicateFormat(self: *@This()) ?*String {
        return objc.msgSend(self, "predicateFormat", ?*String, .{});
    }

};

pub const _predicateFlags = extern struct {
    _evaluationBlocked: u32,
    _reservedPredicateFlags: u32,
};

pub const ComparisonPredicateOptions = enum(objc.NSUInteger) {
    CaseInsensitivePredicateOption = 1,
    DiacriticInsensitivePredicateOption = 2,
    NormalizedPredicateOption = 4,
};

pub const ComparisonPredicateModifier = enum(objc.NSUInteger) {
    DirectPredicateModifier = 0,
    AllPredicateModifier = 1,
    AnyPredicateModifier = 2,
};

pub const PredicateOperatorType = enum(objc.NSUInteger) {
    LessThanPredicateOperatorType = 0,
    LessThanOrEqualToPredicateOperatorType = 1,
    GreaterThanPredicateOperatorType = 2,
    GreaterThanOrEqualToPredicateOperatorType = 3,
    EqualToPredicateOperatorType = 4,
    NotEqualToPredicateOperatorType = 5,
    MatchesPredicateOperatorType = 6,
    LikePredicateOperatorType = 7,
    BeginsWithPredicateOperatorType = 8,
    EndsWithPredicateOperatorType = 9,
    InPredicateOperatorType = 10,
    CustomSelectorPredicateOperatorType = 11,
    ContainsPredicateOperatorType = 99,
    BetweenPredicateOperatorType = 100,
};

/// https://developer.apple.com/documentation/Foundation/NSComparisonPredicate?language=objc
pub const ComparisonPredicate = opaque {
    pub const InternalInfo = objc.ExternalClass("NSComparisonPredicate", @This(), Predicate, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn predicateWithLeftExpressionRightExpressionModifierTypeOptions(self: *@This(), lhs: ?*Expression, rhs: ?*Expression, modifier: ComparisonPredicateModifier, @"type": PredicateOperatorType, options: ComparisonPredicateOptions, ) ?*ComparisonPredicate {
        return objc.msgSend(self, "predicateWithLeftExpression:rightExpression:modifier:type:options:", ?*ComparisonPredicate, .{lhs, rhs, modifier, @"type", options, });
    }

    pub fn predicateWithLeftExpressionRightExpressionCustomSelector(self: *@This(), lhs: ?*Expression, rhs: ?*Expression, selector: *objc.SEL) ?*ComparisonPredicate {
        return objc.msgSend(self, "predicateWithLeftExpression:rightExpression:customSelector:", ?*ComparisonPredicate, .{lhs, rhs, selector});
    }

    pub fn initWithLeftExpressionRightExpressionModifierTypeOptions(self: *@This(), lhs: ?*Expression, rhs: ?*Expression, modifier: ComparisonPredicateModifier, @"type": PredicateOperatorType, options: ComparisonPredicateOptions, ) *@This() {
        return objc.msgSend(self, "initWithLeftExpression:rightExpression:modifier:type:options:", *@This(), .{lhs, rhs, modifier, @"type", options, });
    }

    pub fn initWithLeftExpressionRightExpressionCustomSelector(self: *@This(), lhs: ?*Expression, rhs: ?*Expression, selector: *objc.SEL) *@This() {
        return objc.msgSend(self, "initWithLeftExpression:rightExpression:customSelector:", *@This(), .{lhs, rhs, selector});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn predicateOperatorType(self: *@This()) PredicateOperatorType {
        return objc.msgSend(self, "predicateOperatorType", PredicateOperatorType, .{});
    }

    pub fn comparisonPredicateModifier(self: *@This()) ComparisonPredicateModifier {
        return objc.msgSend(self, "comparisonPredicateModifier", ComparisonPredicateModifier, .{});
    }

    pub fn leftExpression(self: *@This()) ?*Expression {
        return objc.msgSend(self, "leftExpression", ?*Expression, .{});
    }

    pub fn rightExpression(self: *@This()) ?*Expression {
        return objc.msgSend(self, "rightExpression", ?*Expression, .{});
    }

    pub fn customSelector(self: *@This()) *objc.SEL {
        return objc.msgSend(self, "customSelector", *objc.SEL, .{});
    }

    pub fn options(self: *@This()) ComparisonPredicateOptions {
        return objc.msgSend(self, "options", ComparisonPredicateOptions, .{});
    }

};

pub const CompoundPredicateType = enum(objc.NSUInteger) {
    NotPredicateType = 0,
    AndPredicateType = 1,
    OrPredicateType = 2,
};

/// https://developer.apple.com/documentation/Foundation/NSCompoundPredicate?language=objc
pub const CompoundPredicate = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCompoundPredicate", @This(), Predicate, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithTypeSubpredicates(self: *@This(), @"type": CompoundPredicateType, subpredicates: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithType:subpredicates:", *@This(), .{@"type", subpredicates});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn andPredicateWithSubpredicates(self: *@This(), subpredicates: ?*anyopaque) ?*CompoundPredicate {
        return objc.msgSend(self, "andPredicateWithSubpredicates:", ?*CompoundPredicate, .{subpredicates});
    }

    pub fn orPredicateWithSubpredicates(self: *@This(), subpredicates: ?*anyopaque) ?*CompoundPredicate {
        return objc.msgSend(self, "orPredicateWithSubpredicates:", ?*CompoundPredicate, .{subpredicates});
    }

    pub fn notPredicateWithSubpredicate(self: *@This(), predicate: ?*Predicate) ?*CompoundPredicate {
        return objc.msgSend(self, "notPredicateWithSubpredicate:", ?*CompoundPredicate, .{predicate});
    }

    pub fn compoundPredicateType(self: *@This()) CompoundPredicateType {
        return objc.msgSend(self, "compoundPredicateType", CompoundPredicateType, .{});
    }

    pub fn subpredicates(self: *@This()) ?*Array {
        return objc.msgSend(self, "subpredicates", ?*Array, .{});
    }

};

pub const DateComponentsFormatterUnitsStyle = enum(objc.NSInteger) {
    Positional = 0,
    Abbreviated = 1,
    Short = 2,
    Full = 3,
    SpellOut = 4,
    Brief = 5,
};

pub const DateComponentsFormatterZeroFormattingBehavior = enum(objc.NSUInteger) {
    None = 0,
    Default = 1,
    DropLeading = 2,
    DropMiddle = 4,
    DropTrailing = 8,
    DropAll = 14,
    Pad = 65536,
};

/// https://developer.apple.com/documentation/Foundation/NSDateComponentsFormatter?language=objc
pub const DateComponentsFormatter = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDateComponentsFormatter", @This(), Formatter, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn stringForObjectValue(self: *@This(), obj: *objc.Id) ?*String {
        return objc.msgSend(self, "stringForObjectValue:", ?*String, .{obj});
    }

    pub fn stringFromDateComponents(self: *@This(), components: ?*DateComponents) ?*String {
        return objc.msgSend(self, "stringFromDateComponents:", ?*String, .{components});
    }

    pub fn stringFromDateToDate(self: *@This(), startDate: ?*Date, endDate: ?*Date) ?*String {
        return objc.msgSend(self, "stringFromDate:toDate:", ?*String, .{startDate, endDate});
    }

    pub fn stringFromTimeInterval(self: *@This(), ti: TimeInterval) ?*String {
        return objc.msgSend(self, "stringFromTimeInterval:", ?*String, .{ti});
    }

    pub fn localizedStringFromDateComponentsUnitsStyle(self: *@This(), components: ?*DateComponents, unitsStyle: DateComponentsFormatterUnitsStyle) ?*String {
        return objc.msgSend(self, "localizedStringFromDateComponents:unitsStyle:", ?*String, .{components, unitsStyle});
    }

    pub fn getObjectValueForStringErrorDescription(self: *@This(), obj: ?**objc.Id, string: ?*String, @"error": ?*?*String) objc.BOOL {
        return objc.msgSend(self, "getObjectValue:forString:errorDescription:", objc.BOOL, .{obj, string, @"error"});
    }

    pub fn unitsStyle(self: *@This()) DateComponentsFormatterUnitsStyle {
        return objc.msgSend(self, "unitsStyle", DateComponentsFormatterUnitsStyle, .{});
    }

    pub fn setUnitsStyle(self: *@This(), unitsStyle: DateComponentsFormatterUnitsStyle) void {
        return objc.msgSend(self, "setUnitsStyle:", void, .{unitsStyle});
    }

    pub fn allowedUnits(self: *@This()) CalendarUnit {
        return objc.msgSend(self, "allowedUnits", CalendarUnit, .{});
    }

    pub fn setAllowedUnits(self: *@This(), allowedUnits: CalendarUnit) void {
        return objc.msgSend(self, "setAllowedUnits:", void, .{allowedUnits});
    }

    pub fn zeroFormattingBehavior(self: *@This()) DateComponentsFormatterZeroFormattingBehavior {
        return objc.msgSend(self, "zeroFormattingBehavior", DateComponentsFormatterZeroFormattingBehavior, .{});
    }

    pub fn setZeroFormattingBehavior(self: *@This(), zeroFormattingBehavior: DateComponentsFormatterZeroFormattingBehavior) void {
        return objc.msgSend(self, "setZeroFormattingBehavior:", void, .{zeroFormattingBehavior});
    }

    pub fn calendar(self: *@This()) ?*Calendar {
        return objc.msgSend(self, "calendar", ?*Calendar, .{});
    }

    pub fn setCalendar(self: *@This(), calendar: ?*Calendar) void {
        return objc.msgSend(self, "setCalendar:", void, .{calendar});
    }

    pub fn referenceDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "referenceDate", ?*Date, .{});
    }

    pub fn setReferenceDate(self: *@This(), referenceDate: ?*Date) void {
        return objc.msgSend(self, "setReferenceDate:", void, .{referenceDate});
    }

    pub fn allowsFractionalUnits(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsFractionalUnits", objc.BOOL, .{});
    }

    pub fn setAllowsFractionalUnits(self: *@This(), allowsFractionalUnits: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsFractionalUnits:", void, .{allowsFractionalUnits});
    }

    pub fn maximumUnitCount(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "maximumUnitCount", objc.NSInteger, .{});
    }

    pub fn setMaximumUnitCount(self: *@This(), maximumUnitCount: objc.NSInteger) void {
        return objc.msgSend(self, "setMaximumUnitCount:", void, .{maximumUnitCount});
    }

    pub fn collapsesLargestUnit(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "collapsesLargestUnit", objc.BOOL, .{});
    }

    pub fn setCollapsesLargestUnit(self: *@This(), collapsesLargestUnit: objc.BOOL) void {
        return objc.msgSend(self, "setCollapsesLargestUnit:", void, .{collapsesLargestUnit});
    }

    pub fn includesApproximationPhrase(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "includesApproximationPhrase", objc.BOOL, .{});
    }

    pub fn setIncludesApproximationPhrase(self: *@This(), includesApproximationPhrase: objc.BOOL) void {
        return objc.msgSend(self, "setIncludesApproximationPhrase:", void, .{includesApproximationPhrase});
    }

    pub fn includesTimeRemainingPhrase(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "includesTimeRemainingPhrase", objc.BOOL, .{});
    }

    pub fn setIncludesTimeRemainingPhrase(self: *@This(), includesTimeRemainingPhrase: objc.BOOL) void {
        return objc.msgSend(self, "setIncludesTimeRemainingPhrase:", void, .{includesTimeRemainingPhrase});
    }

    pub fn formattingContext(self: *@This()) FormattingContext {
        return objc.msgSend(self, "formattingContext", FormattingContext, .{});
    }

    pub fn setFormattingContext(self: *@This(), formattingContext: FormattingContext) void {
        return objc.msgSend(self, "setFormattingContext:", void, .{formattingContext});
    }

};

pub const ExpressionType = enum(objc.NSUInteger) {
    ConstantValueExpressionType = 0,
    EvaluatedObjectExpressionType = 1,
    VariableExpressionType = 2,
    KeyPathExpressionType = 3,
    FunctionExpressionType = 4,
    UnionSetExpressionType = 5,
    IntersectSetExpressionType = 6,
    MinusSetExpressionType = 7,
    SubqueryExpressionType = 13,
    AggregateExpressionType = 14,
    AnyKeyExpressionType = 15,
    BlockExpressionType = 19,
    ConditionalExpressionType = 20,
};

/// https://developer.apple.com/documentation/Foundation/NSExpression?language=objc
pub const Expression = opaque {
    pub const InternalInfo = objc.ExternalClass("NSExpression", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn expressionWithFormatArgumentArray(self: *@This(), expressionFormat: ?*String, arguments: ?*Array) ?*Expression {
        return objc.msgSend(self, "expressionWithFormat:argumentArray:", ?*Expression, .{expressionFormat, arguments});
    }

    pub fn expressionWithFormat(self: *@This(), expressionFormat: ?*String) ?*Expression {
        return objc.msgSend(self, "expressionWithFormat:", ?*Expression, .{expressionFormat});
    }

    pub fn expressionWithFormatArguments(self: *@This(), expressionFormat: ?*String, argList: objc.va_list) ?*Expression {
        return objc.msgSend(self, "expressionWithFormat:arguments:", ?*Expression, .{expressionFormat, argList});
    }

    pub fn expressionForConstantValue(self: *@This(), obj: *objc.Id) ?*Expression {
        return objc.msgSend(self, "expressionForConstantValue:", ?*Expression, .{obj});
    }

    pub fn expressionForEvaluatedObject(self: *@This()) ?*Expression {
        return objc.msgSend(self, "expressionForEvaluatedObject", ?*Expression, .{});
    }

    pub fn expressionForVariable(self: *@This(), string: ?*String) ?*Expression {
        return objc.msgSend(self, "expressionForVariable:", ?*Expression, .{string});
    }

    pub fn expressionForKeyPath(self: *@This(), keyPath: ?*String) ?*Expression {
        return objc.msgSend(self, "expressionForKeyPath:", ?*Expression, .{keyPath});
    }

    pub fn expressionForFunctionArguments(self: *@This(), name: ?*String, parameters: ?*Array) ?*Expression {
        return objc.msgSend(self, "expressionForFunction:arguments:", ?*Expression, .{name, parameters});
    }

    pub fn expressionForAggregate(self: *@This(), subexpressions: ?*anyopaque) ?*Expression {
        return objc.msgSend(self, "expressionForAggregate:", ?*Expression, .{subexpressions});
    }

    pub fn expressionForUnionSetWith(self: *@This(), left: ?*Expression, right: ?*Expression) ?*Expression {
        return objc.msgSend(self, "expressionForUnionSet:with:", ?*Expression, .{left, right});
    }

    pub fn expressionForIntersectSetWith(self: *@This(), left: ?*Expression, right: ?*Expression) ?*Expression {
        return objc.msgSend(self, "expressionForIntersectSet:with:", ?*Expression, .{left, right});
    }

    pub fn expressionForMinusSetWith(self: *@This(), left: ?*Expression, right: ?*Expression) ?*Expression {
        return objc.msgSend(self, "expressionForMinusSet:with:", ?*Expression, .{left, right});
    }

    pub fn expressionForSubqueryUsingIteratorVariablePredicate(self: *@This(), expression: ?*Expression, variable: ?*String, predicate: ?*Predicate) ?*Expression {
        return objc.msgSend(self, "expressionForSubquery:usingIteratorVariable:predicate:", ?*Expression, .{expression, variable, predicate});
    }

    pub fn expressionForFunctionSelectorNameArguments(self: *@This(), target: ?*Expression, name: ?*String, parameters: ?*Array) ?*Expression {
        return objc.msgSend(self, "expressionForFunction:selectorName:arguments:", ?*Expression, .{target, name, parameters});
    }

    pub fn expressionForAnyKey(self: *@This()) ?*Expression {
        return objc.msgSend(self, "expressionForAnyKey", ?*Expression, .{});
    }

    pub fn expressionForBlockArguments(self: *@This(), block: *const fn(*objc.Id, ?*anyopaque, ?*MutableDictionary) callconv(.C) *objc.Id, arguments: ?*anyopaque) ?*Expression {
        return objc.msgSend(self, "expressionForBlock:arguments:", ?*Expression, .{block, arguments});
    }

    pub fn expressionForConditionalTrueExpressionFalseExpression(self: *@This(), predicate: ?*Predicate, trueExpression: ?*Expression, falseExpression: ?*Expression) ?*Expression {
        return objc.msgSend(self, "expressionForConditional:trueExpression:falseExpression:", ?*Expression, .{predicate, trueExpression, falseExpression});
    }

    pub fn initWithExpressionType(self: *@This(), @"type": ExpressionType) *@This() {
        return objc.msgSend(self, "initWithExpressionType:", *@This(), .{@"type"});
    }

    pub fn initWithCoder(self: *@This(), coder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{coder});
    }

    pub fn expressionValueWithObjectContext(self: *@This(), object: *objc.Id, context: ?*MutableDictionary) *objc.Id {
        return objc.msgSend(self, "expressionValueWithObject:context:", *objc.Id, .{object, context});
    }

    pub fn allowEvaluation(self: *@This()) void {
        return objc.msgSend(self, "allowEvaluation", void, .{});
    }

    pub fn expressionType(self: *@This()) ExpressionType {
        return objc.msgSend(self, "expressionType", ExpressionType, .{});
    }

    pub fn constantValue(self: *@This()) *objc.Id {
        return objc.msgSend(self, "constantValue", *objc.Id, .{});
    }

    pub fn keyPath(self: *@This()) ?*String {
        return objc.msgSend(self, "keyPath", ?*String, .{});
    }

    pub fn function(self: *@This()) ?*String {
        return objc.msgSend(self, "function", ?*String, .{});
    }

    pub fn variable(self: *@This()) ?*String {
        return objc.msgSend(self, "variable", ?*String, .{});
    }

    pub fn operand(self: *@This()) ?*Expression {
        return objc.msgSend(self, "operand", ?*Expression, .{});
    }

    pub fn arguments(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "arguments", ?*anyopaque, .{});
    }

    pub fn collection(self: *@This()) *objc.Id {
        return objc.msgSend(self, "collection", *objc.Id, .{});
    }

    pub fn predicate(self: *@This()) ?*Predicate {
        return objc.msgSend(self, "predicate", ?*Predicate, .{});
    }

    pub fn leftExpression(self: *@This()) ?*Expression {
        return objc.msgSend(self, "leftExpression", ?*Expression, .{});
    }

    pub fn rightExpression(self: *@This()) ?*Expression {
        return objc.msgSend(self, "rightExpression", ?*Expression, .{});
    }

    pub fn trueExpression(self: *@This()) ?*Expression {
        return objc.msgSend(self, "trueExpression", ?*Expression, .{});
    }

    pub fn falseExpression(self: *@This()) ?*Expression {
        return objc.msgSend(self, "falseExpression", ?*Expression, .{});
    }

    pub fn expressionBlock(self: *@This()) *const fn(*objc.Id, ?*anyopaque, ?*MutableDictionary) callconv(.C) *objc.Id {
        return objc.msgSend(self, "expressionBlock", *const fn(*objc.Id, ?*anyopaque, ?*MutableDictionary) callconv(.C) *objc.Id, .{});
    }

};

pub const _expressionFlags = extern struct {
    _evaluationBlocked: u32,
    _usesKVC: u32,
    _validatedExpression: u32,
    _validatedKeys: u32,
    _reservedExpressionFlags: u32,
};

/// https://developer.apple.com/documentation/Foundation/NSExtensionContext?language=objc
pub const ExtensionContext = opaque {
    pub const InternalInfo = objc.ExternalClass("NSExtensionContext", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn completeRequestReturningItemsCompletionHandler(self: *@This(), items: ?*Array, completionHandler: *const fn(objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(self, "completeRequestReturningItems:completionHandler:", void, .{items, completionHandler});
    }

    pub fn cancelRequestWithError(self: *@This(), @"error": ?*Error) void {
        return objc.msgSend(self, "cancelRequestWithError:", void, .{@"error"});
    }

    pub fn openURLCompletionHandler(self: *@This(), URL: ?*URL, completionHandler: *const fn(objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(self, "openURL:completionHandler:", void, .{URL, completionHandler});
    }

    pub fn inputItems(self: *@This()) ?*Array {
        return objc.msgSend(self, "inputItems", ?*Array, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSExtensionItem?language=objc
pub const ExtensionItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSExtensionItem", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn attributedTitle(self: *@This()) ?*AttributedString {
        return objc.msgSend(self, "attributedTitle", ?*AttributedString, .{});
    }

    pub fn setAttributedTitle(self: *@This(), attributedTitle: ?*AttributedString) void {
        return objc.msgSend(self, "setAttributedTitle:", void, .{attributedTitle});
    }

    pub fn attributedContentText(self: *@This()) ?*AttributedString {
        return objc.msgSend(self, "attributedContentText", ?*AttributedString, .{});
    }

    pub fn setAttributedContentText(self: *@This(), attributedContentText: ?*AttributedString) void {
        return objc.msgSend(self, "setAttributedContentText:", void, .{attributedContentText});
    }

    pub fn attachments(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "attachments", ?*anyopaque, .{});
    }

    pub fn setAttachments(self: *@This(), attachments: ?*anyopaque) void {
        return objc.msgSend(self, "setAttachments:", void, .{attachments});
    }

    pub fn userInfo(self: *@This()) ?*Dictionary {
        return objc.msgSend(self, "userInfo", ?*Dictionary, .{});
    }

    pub fn setUserInfo(self: *@This(), userInfo: ?*Dictionary) void {
        return objc.msgSend(self, "setUserInfo:", void, .{userInfo});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSExtensionRequestHandling?language=objc
pub const ExtensionRequestHandling = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn beginRequestWithExtensionContext(self: *@This(), context: ?*ExtensionContext) void {
        return objc.msgSend(self, "beginRequestWithExtensionContext:", void, .{context});
    }

};

pub const FileCoordinatorReadingOptions = enum(objc.NSUInteger) {
    WithoutChanges = 1,
    ResolvesSymbolicLink = 2,
    ImmediatelyAvailableMetadataOnly = 4,
    ForUploading = 8,
};

pub const FileCoordinatorWritingOptions = enum(objc.NSUInteger) {
    ForDeleting = 1,
    ForMoving = 2,
    ForMerging = 4,
    ForReplacing = 8,
    ContentIndependentMetadataOnly = 16,
};

/// https://developer.apple.com/documentation/Foundation/NSFileAccessIntent?language=objc
pub const FileAccessIntent = opaque {
    pub const InternalInfo = objc.ExternalClass("NSFileAccessIntent", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn readingIntentWithURLOptions(self: *@This(), url: ?*URL, options: FileCoordinatorReadingOptions) *@This() {
        return objc.msgSend(self, "readingIntentWithURL:options:", *@This(), .{url, options});
    }

    pub fn writingIntentWithURLOptions(self: *@This(), url: ?*URL, options: FileCoordinatorWritingOptions) *@This() {
        return objc.msgSend(self, "writingIntentWithURL:options:", *@This(), .{url, options});
    }

    pub fn URL(self: *@This()) ?*URL {
        return objc.msgSend(self, "URL", ?*URL, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSFileCoordinator?language=objc
pub const FileCoordinator = opaque {
    pub const InternalInfo = objc.ExternalClass("NSFileCoordinator", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn addFilePresenter(self: *@This(), filePresenter: ?*anyopaque) void {
        return objc.msgSend(self, "addFilePresenter:", void, .{filePresenter});
    }

    pub fn removeFilePresenter(self: *@This(), filePresenter: ?*anyopaque) void {
        return objc.msgSend(self, "removeFilePresenter:", void, .{filePresenter});
    }

    pub fn initWithFilePresenter(self: *@This(), filePresenterOrNil: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithFilePresenter:", *@This(), .{filePresenterOrNil});
    }

    pub fn coordinateAccessWithIntentsQueueByAccessor(self: *@This(), intents: ?*anyopaque, queue: ?*OperationQueue, accessor: *const fn(?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "coordinateAccessWithIntents:queue:byAccessor:", void, .{intents, queue, accessor});
    }

    pub fn coordinateReadingItemAtURLOptionsErrorByAccessor(self: *@This(), url: ?*URL, options: FileCoordinatorReadingOptions, outError: ?*?*Error, reader: *const fn(?*URL) callconv(.C) void, ) void {
        return objc.msgSend(self, "coordinateReadingItemAtURL:options:error:byAccessor:", void, .{url, options, outError, reader, });
    }

    pub fn coordinateWritingItemAtURLOptionsErrorByAccessor(self: *@This(), url: ?*URL, options: FileCoordinatorWritingOptions, outError: ?*?*Error, writer: *const fn(?*URL) callconv(.C) void, ) void {
        return objc.msgSend(self, "coordinateWritingItemAtURL:options:error:byAccessor:", void, .{url, options, outError, writer, });
    }

    pub fn coordinateReadingItemAtURLOptionsWritingItemAtURLOptionsErrorByAccessor(self: *@This(), readingURL: ?*URL, readingOptions: FileCoordinatorReadingOptions, writingURL: ?*URL, writingOptions: FileCoordinatorWritingOptions, outError: ?*?*Error, readerWriter: *const fn(?*URL, ?*URL) callconv(.C) void, ) void {
        return objc.msgSend(self, "coordinateReadingItemAtURL:options:writingItemAtURL:options:error:byAccessor:", void, .{readingURL, readingOptions, writingURL, writingOptions, outError, readerWriter, });
    }

    pub fn coordinateWritingItemAtURLOptionsWritingItemAtURLOptionsErrorByAccessor(self: *@This(), url1: ?*URL, options1: FileCoordinatorWritingOptions, url2: ?*URL, options2: FileCoordinatorWritingOptions, outError: ?*?*Error, writer: *const fn(?*URL, ?*URL) callconv(.C) void, ) void {
        return objc.msgSend(self, "coordinateWritingItemAtURL:options:writingItemAtURL:options:error:byAccessor:", void, .{url1, options1, url2, options2, outError, writer, });
    }

    pub fn prepareForReadingItemsAtURLsOptionsWritingItemsAtURLsOptionsErrorByAccessor(self: *@This(), readingURLs: ?*anyopaque, readingOptions: FileCoordinatorReadingOptions, writingURLs: ?*anyopaque, writingOptions: FileCoordinatorWritingOptions, outError: ?*?*Error, batchAccessor: *const fn(*const fn() callconv(.C) void) callconv(.C) void, ) void {
        return objc.msgSend(self, "prepareForReadingItemsAtURLs:options:writingItemsAtURLs:options:error:byAccessor:", void, .{readingURLs, readingOptions, writingURLs, writingOptions, outError, batchAccessor, });
    }

    pub fn itemAtURLWillMoveToURL(self: *@This(), oldURL: ?*URL, newURL: ?*URL) void {
        return objc.msgSend(self, "itemAtURL:willMoveToURL:", void, .{oldURL, newURL});
    }

    pub fn itemAtURLDidMoveToURL(self: *@This(), oldURL: ?*URL, newURL: ?*URL) void {
        return objc.msgSend(self, "itemAtURL:didMoveToURL:", void, .{oldURL, newURL});
    }

    pub fn itemAtURLDidChangeUbiquityAttributes(self: *@This(), url: ?*URL, attributes: ?*anyopaque) void {
        return objc.msgSend(self, "itemAtURL:didChangeUbiquityAttributes:", void, .{url, attributes});
    }

    pub fn cancel(self: *@This()) void {
        return objc.msgSend(self, "cancel", void, .{});
    }

    pub fn filePresenters(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "filePresenters", ?*anyopaque, .{});
    }

    pub fn purposeIdentifier(self: *@This()) ?*String {
        return objc.msgSend(self, "purposeIdentifier", ?*String, .{});
    }

    pub fn setPurposeIdentifier(self: *@This(), purposeIdentifier: ?*String) void {
        return objc.msgSend(self, "setPurposeIdentifier:", void, .{purposeIdentifier});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSFilePresenter?language=objc
pub const FilePresenter = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn relinquishPresentedItemToReader(self: *@This(), reader: *const fn(*const fn() callconv(.C) void) callconv(.C) void) void {
        return objc.msgSend(self, "relinquishPresentedItemToReader:", void, .{reader});
    }

    pub fn relinquishPresentedItemToWriter(self: *@This(), writer: *const fn(*const fn() callconv(.C) void) callconv(.C) void) void {
        return objc.msgSend(self, "relinquishPresentedItemToWriter:", void, .{writer});
    }

    pub fn savePresentedItemChangesWithCompletionHandler(self: *@This(), completionHandler: *const fn(?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "savePresentedItemChangesWithCompletionHandler:", void, .{completionHandler});
    }

    pub fn accommodatePresentedItemDeletionWithCompletionHandler(self: *@This(), completionHandler: *const fn(?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "accommodatePresentedItemDeletionWithCompletionHandler:", void, .{completionHandler});
    }

    pub fn accommodatePresentedItemEvictionWithCompletionHandler(self: *@This(), completionHandler: *const fn(?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "accommodatePresentedItemEvictionWithCompletionHandler:", void, .{completionHandler});
    }

    pub fn presentedItemDidMoveToURL(self: *@This(), newURL: ?*URL) void {
        return objc.msgSend(self, "presentedItemDidMoveToURL:", void, .{newURL});
    }

    pub fn presentedItemDidChange(self: *@This()) void {
        return objc.msgSend(self, "presentedItemDidChange", void, .{});
    }

    pub fn presentedItemDidChangeUbiquityAttributes(self: *@This(), attributes: ?*anyopaque) void {
        return objc.msgSend(self, "presentedItemDidChangeUbiquityAttributes:", void, .{attributes});
    }

    pub fn presentedItemDidGainVersion(self: *@This(), version: ?*FileVersion) void {
        return objc.msgSend(self, "presentedItemDidGainVersion:", void, .{version});
    }

    pub fn presentedItemDidLoseVersion(self: *@This(), version: ?*FileVersion) void {
        return objc.msgSend(self, "presentedItemDidLoseVersion:", void, .{version});
    }

    pub fn presentedItemDidResolveConflictVersion(self: *@This(), version: ?*FileVersion) void {
        return objc.msgSend(self, "presentedItemDidResolveConflictVersion:", void, .{version});
    }

    pub fn accommodatePresentedSubitemDeletionAtURLCompletionHandler(self: *@This(), url: ?*URL, completionHandler: *const fn(?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "accommodatePresentedSubitemDeletionAtURL:completionHandler:", void, .{url, completionHandler});
    }

    pub fn presentedSubitemDidAppearAtURL(self: *@This(), url: ?*URL) void {
        return objc.msgSend(self, "presentedSubitemDidAppearAtURL:", void, .{url});
    }

    pub fn presentedSubitemAtURLDidMoveToURL(self: *@This(), oldURL: ?*URL, newURL: ?*URL) void {
        return objc.msgSend(self, "presentedSubitemAtURL:didMoveToURL:", void, .{oldURL, newURL});
    }

    pub fn presentedSubitemDidChangeAtURL(self: *@This(), url: ?*URL) void {
        return objc.msgSend(self, "presentedSubitemDidChangeAtURL:", void, .{url});
    }

    pub fn presentedSubitemAtURLDidGainVersion(self: *@This(), url: ?*URL, version: ?*FileVersion) void {
        return objc.msgSend(self, "presentedSubitemAtURL:didGainVersion:", void, .{url, version});
    }

    pub fn presentedSubitemAtURLDidLoseVersion(self: *@This(), url: ?*URL, version: ?*FileVersion) void {
        return objc.msgSend(self, "presentedSubitemAtURL:didLoseVersion:", void, .{url, version});
    }

    pub fn presentedSubitemAtURLDidResolveConflictVersion(self: *@This(), url: ?*URL, version: ?*FileVersion) void {
        return objc.msgSend(self, "presentedSubitemAtURL:didResolveConflictVersion:", void, .{url, version});
    }

    pub fn presentedItemURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "presentedItemURL", ?*URL, .{});
    }

    pub fn presentedItemOperationQueue(self: *@This()) ?*OperationQueue {
        return objc.msgSend(self, "presentedItemOperationQueue", ?*OperationQueue, .{});
    }

    pub fn primaryPresentedItemURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "primaryPresentedItemURL", ?*URL, .{});
    }

    pub fn observedPresentedItemUbiquityAttributes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "observedPresentedItemUbiquityAttributes", ?*anyopaque, .{});
    }

};

pub const FileVersionAddingOptions = enum(objc.NSUInteger) {
    ByMoving = 1,
};

pub const FileVersionReplacingOptions = enum(objc.NSUInteger) {
    ByMoving = 1,
};

/// https://developer.apple.com/documentation/Foundation/NSFileVersion?language=objc
pub const FileVersion = opaque {
    pub const InternalInfo = objc.ExternalClass("NSFileVersion", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn currentVersionOfItemAtURL(self: *@This(), url: ?*URL) ?*FileVersion {
        return objc.msgSend(self, "currentVersionOfItemAtURL:", ?*FileVersion, .{url});
    }

    pub fn otherVersionsOfItemAtURL(self: *@This(), url: ?*URL) ?*anyopaque {
        return objc.msgSend(self, "otherVersionsOfItemAtURL:", ?*anyopaque, .{url});
    }

    pub fn unresolvedConflictVersionsOfItemAtURL(self: *@This(), url: ?*URL) ?*anyopaque {
        return objc.msgSend(self, "unresolvedConflictVersionsOfItemAtURL:", ?*anyopaque, .{url});
    }

    pub fn getNonlocalVersionsOfItemAtURLCompletionHandler(self: *@This(), url: ?*URL, completionHandler: *const fn(?*anyopaque, ?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "getNonlocalVersionsOfItemAtURL:completionHandler:", void, .{url, completionHandler});
    }

    pub fn versionOfItemAtURLForPersistentIdentifier(self: *@This(), url: ?*URL, persistentIdentifier: *objc.Id) ?*FileVersion {
        return objc.msgSend(self, "versionOfItemAtURL:forPersistentIdentifier:", ?*FileVersion, .{url, persistentIdentifier});
    }

    pub fn addVersionOfItemAtURLWithContentsOfURLOptionsError(self: *@This(), url: ?*URL, contentsURL: ?*URL, options: FileVersionAddingOptions, outError: ?*?*Error, ) ?*FileVersion {
        return objc.msgSend(self, "addVersionOfItemAtURL:withContentsOfURL:options:error:", ?*FileVersion, .{url, contentsURL, options, outError, });
    }

    pub fn temporaryDirectoryURLForNewVersionOfItemAtURL(self: *@This(), url: ?*URL) ?*URL {
        return objc.msgSend(self, "temporaryDirectoryURLForNewVersionOfItemAtURL:", ?*URL, .{url});
    }

    pub fn replaceItemAtURLOptionsError(self: *@This(), url: ?*URL, options: FileVersionReplacingOptions, @"error": ?*?*Error) ?*URL {
        return objc.msgSend(self, "replaceItemAtURL:options:error:", ?*URL, .{url, options, @"error"});
    }

    pub fn removeAndReturnError(self: *@This(), outError: ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "removeAndReturnError:", objc.BOOL, .{outError});
    }

    pub fn removeOtherVersionsOfItemAtURLError(self: *@This(), url: ?*URL, outError: ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "removeOtherVersionsOfItemAtURL:error:", objc.BOOL, .{url, outError});
    }

    pub fn URL(self: *@This()) ?*URL {
        return objc.msgSend(self, "URL", ?*URL, .{});
    }

    pub fn localizedName(self: *@This()) ?*String {
        return objc.msgSend(self, "localizedName", ?*String, .{});
    }

    pub fn localizedNameOfSavingComputer(self: *@This()) ?*String {
        return objc.msgSend(self, "localizedNameOfSavingComputer", ?*String, .{});
    }

    pub fn originatorNameComponents(self: *@This()) ?*PersonNameComponents {
        return objc.msgSend(self, "originatorNameComponents", ?*PersonNameComponents, .{});
    }

    pub fn modificationDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "modificationDate", ?*Date, .{});
    }

    pub fn persistentIdentifier(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "persistentIdentifier", ?*anyopaque, .{});
    }

    pub fn isConflict(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isConflict", objc.BOOL, .{});
    }

    pub fn isResolved(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isResolved", objc.BOOL, .{});
    }

    pub fn setResolved(self: *@This(), resolved: objc.BOOL) void {
        return objc.msgSend(self, "setResolved:", void, .{resolved});
    }

    pub fn isDiscardable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isDiscardable", objc.BOOL, .{});
    }

    pub fn setDiscardable(self: *@This(), discardable: objc.BOOL) void {
        return objc.msgSend(self, "setDiscardable:", void, .{discardable});
    }

    pub fn hasLocalContents(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasLocalContents", objc.BOOL, .{});
    }

    pub fn hasThumbnail(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasThumbnail", objc.BOOL, .{});
    }

};

pub const FileWrapperReadingOptions = enum(objc.NSUInteger) {
    Immediate = 1,
    WithoutMapping = 2,
};

pub const FileWrapperWritingOptions = enum(objc.NSUInteger) {
    Atomic = 1,
    WithNameUpdating = 2,
};

/// https://developer.apple.com/documentation/Foundation/NSFileWrapper?language=objc
pub const FileWrapper = opaque {
    pub const InternalInfo = objc.ExternalClass("NSFileWrapper", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithURLOptionsError(self: *@This(), url: ?*URL, options: FileWrapperReadingOptions, outError: ?*?*Error) *@This() {
        return objc.msgSend(self, "initWithURL:options:error:", *@This(), .{url, options, outError});
    }

    pub fn initDirectoryWithFileWrappers(self: *@This(), childrenByPreferredName: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initDirectoryWithFileWrappers:", *@This(), .{childrenByPreferredName});
    }

    pub fn initRegularFileWithContents(self: *@This(), contents: ?*Data) *@This() {
        return objc.msgSend(self, "initRegularFileWithContents:", *@This(), .{contents});
    }

    pub fn initSymbolicLinkWithDestinationURL(self: *@This(), url: ?*URL) *@This() {
        return objc.msgSend(self, "initSymbolicLinkWithDestinationURL:", *@This(), .{url});
    }

    pub fn initWithSerializedRepresentation(self: *@This(), serializeRepresentation: ?*Data) *@This() {
        return objc.msgSend(self, "initWithSerializedRepresentation:", *@This(), .{serializeRepresentation});
    }

    pub fn initWithCoder(self: *@This(), inCoder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{inCoder});
    }

    pub fn matchesContentsOfURL(self: *@This(), url: ?*URL) objc.BOOL {
        return objc.msgSend(self, "matchesContentsOfURL:", objc.BOOL, .{url});
    }

    pub fn readFromURLOptionsError(self: *@This(), url: ?*URL, options: FileWrapperReadingOptions, outError: ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "readFromURL:options:error:", objc.BOOL, .{url, options, outError});
    }

    pub fn writeToURLOptionsOriginalContentsURLError(self: *@This(), url: ?*URL, options: FileWrapperWritingOptions, originalContentsURL: ?*URL, outError: ?*?*Error, ) objc.BOOL {
        return objc.msgSend(self, "writeToURL:options:originalContentsURL:error:", objc.BOOL, .{url, options, originalContentsURL, outError, });
    }

    pub fn addFileWrapper(self: *@This(), child: ?*FileWrapper) ?*String {
        return objc.msgSend(self, "addFileWrapper:", ?*String, .{child});
    }

    pub fn addRegularFileWithContentsPreferredFilename(self: *@This(), data: ?*Data, fileName: ?*String) ?*String {
        return objc.msgSend(self, "addRegularFileWithContents:preferredFilename:", ?*String, .{data, fileName});
    }

    pub fn removeFileWrapper(self: *@This(), child: ?*FileWrapper) void {
        return objc.msgSend(self, "removeFileWrapper:", void, .{child});
    }

    pub fn keyForFileWrapper(self: *@This(), child: ?*FileWrapper) ?*String {
        return objc.msgSend(self, "keyForFileWrapper:", ?*String, .{child});
    }

    pub fn isDirectory(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isDirectory", objc.BOOL, .{});
    }

    pub fn isRegularFile(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isRegularFile", objc.BOOL, .{});
    }

    pub fn isSymbolicLink(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isSymbolicLink", objc.BOOL, .{});
    }

    pub fn preferredFilename(self: *@This()) ?*String {
        return objc.msgSend(self, "preferredFilename", ?*String, .{});
    }

    pub fn setPreferredFilename(self: *@This(), preferredFilename: ?*String) void {
        return objc.msgSend(self, "setPreferredFilename:", void, .{preferredFilename});
    }

    pub fn filename(self: *@This()) ?*String {
        return objc.msgSend(self, "filename", ?*String, .{});
    }

    pub fn setFilename(self: *@This(), filename: ?*String) void {
        return objc.msgSend(self, "setFilename:", void, .{filename});
    }

    pub fn fileAttributes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "fileAttributes", ?*anyopaque, .{});
    }

    pub fn setFileAttributes(self: *@This(), fileAttributes: ?*anyopaque) void {
        return objc.msgSend(self, "setFileAttributes:", void, .{fileAttributes});
    }

    pub fn serializedRepresentation(self: *@This()) ?*Data {
        return objc.msgSend(self, "serializedRepresentation", ?*Data, .{});
    }

    pub fn fileWrappers(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "fileWrappers", ?*anyopaque, .{});
    }

    pub fn regularFileContents(self: *@This()) ?*Data {
        return objc.msgSend(self, "regularFileContents", ?*Data, .{});
    }

    pub fn symbolicLinkDestinationURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "symbolicLinkDestinationURL", ?*URL, .{});
    }

};

pub const LinguisticTagScheme = ?*String;

pub const LinguisticTag = ?*String;

pub const LinguisticTaggerUnit = enum(objc.NSInteger) {
    Word = 0,
    Sentence = 1,
    Paragraph = 2,
    Document = 3,
};

pub const LinguisticTaggerOptions = enum(objc.NSUInteger) {
    OmitWords = 1,
    OmitPunctuation = 2,
    OmitWhitespace = 4,
    OmitOther = 8,
    JoinNames = 16,
};

/// https://developer.apple.com/documentation/Foundation/NSLinguisticTagger?language=objc
pub const LinguisticTagger = opaque {
    pub const InternalInfo = objc.ExternalClass("NSLinguisticTagger", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithTagSchemesOptions(self: *@This(), tagSchemes: ?*anyopaque, opts: objc.NSUInteger) *@This() {
        return objc.msgSend(self, "initWithTagSchemes:options:", *@This(), .{tagSchemes, opts});
    }

    pub fn availableTagSchemesForUnitLanguage(self: *@This(), unit: LinguisticTaggerUnit, language: ?*String) ?*anyopaque {
        return objc.msgSend(self, "availableTagSchemesForUnit:language:", ?*anyopaque, .{unit, language});
    }

    pub fn availableTagSchemesForLanguage(self: *@This(), language: ?*String) ?*anyopaque {
        return objc.msgSend(self, "availableTagSchemesForLanguage:", ?*anyopaque, .{language});
    }

    pub fn setOrthographyRange(self: *@This(), orthography: ?*Orthography, range: Range) void {
        return objc.msgSend(self, "setOrthography:range:", void, .{orthography, range});
    }

    pub fn orthographyAtIndexEffectiveRange(self: *@This(), charIndex: objc.NSUInteger, effectiveRange: RangePointer) ?*Orthography {
        return objc.msgSend(self, "orthographyAtIndex:effectiveRange:", ?*Orthography, .{charIndex, effectiveRange});
    }

    pub fn stringEditedInRangeChangeInLength(self: *@This(), newRange: Range, delta: objc.NSInteger) void {
        return objc.msgSend(self, "stringEditedInRange:changeInLength:", void, .{newRange, delta});
    }

    pub fn tokenRangeAtIndexUnit(self: *@This(), charIndex: objc.NSUInteger, unit: LinguisticTaggerUnit) Range {
        return objc.msgSend(self, "tokenRangeAtIndex:unit:", Range, .{charIndex, unit});
    }

    pub fn sentenceRangeForRange(self: *@This(), range: Range) Range {
        return objc.msgSend(self, "sentenceRangeForRange:", Range, .{range});
    }

    pub fn enumerateTagsInRangeUnitSchemeOptionsUsingBlock(self: *@This(), range: Range, unit: LinguisticTaggerUnit, scheme: LinguisticTagScheme, options: LinguisticTaggerOptions, block: *const fn(LinguisticTag, Range, ?*objc.BOOL) callconv(.C) void, ) void {
        return objc.msgSend(self, "enumerateTagsInRange:unit:scheme:options:usingBlock:", void, .{range, unit, scheme, options, block, });
    }

    pub fn tagAtIndexUnitSchemeTokenRange(self: *@This(), charIndex: objc.NSUInteger, unit: LinguisticTaggerUnit, scheme: LinguisticTagScheme, tokenRange: RangePointer, ) LinguisticTag {
        return objc.msgSend(self, "tagAtIndex:unit:scheme:tokenRange:", LinguisticTag, .{charIndex, unit, scheme, tokenRange, });
    }

    pub fn tagsInRangeUnitSchemeOptionsTokenRanges(self: *@This(), range: Range, unit: LinguisticTaggerUnit, scheme: LinguisticTagScheme, options: LinguisticTaggerOptions, tokenRanges: ?*?*anyopaque, ) ?*anyopaque {
        return objc.msgSend(self, "tagsInRange:unit:scheme:options:tokenRanges:", ?*anyopaque, .{range, unit, scheme, options, tokenRanges, });
    }

    pub fn enumerateTagsInRangeSchemeOptionsUsingBlock(self: *@This(), range: Range, tagScheme: LinguisticTagScheme, opts: LinguisticTaggerOptions, block: *const fn(LinguisticTag, Range, Range, ?*objc.BOOL, ) callconv(.C) void, ) void {
        return objc.msgSend(self, "enumerateTagsInRange:scheme:options:usingBlock:", void, .{range, tagScheme, opts, block, });
    }

    pub fn tagAtIndexSchemeTokenRangeSentenceRange(self: *@This(), charIndex: objc.NSUInteger, scheme: LinguisticTagScheme, tokenRange: RangePointer, sentenceRange: RangePointer, ) LinguisticTag {
        return objc.msgSend(self, "tagAtIndex:scheme:tokenRange:sentenceRange:", LinguisticTag, .{charIndex, scheme, tokenRange, sentenceRange, });
    }

    pub fn tagsInRangeSchemeOptionsTokenRanges(self: *@This(), range: Range, tagScheme: ?*String, opts: LinguisticTaggerOptions, tokenRanges: ?*?*anyopaque, ) ?*anyopaque {
        return objc.msgSend(self, "tagsInRange:scheme:options:tokenRanges:", ?*anyopaque, .{range, tagScheme, opts, tokenRanges, });
    }

    pub fn dominantLanguageForString(self: *@This(), string: ?*String) ?*String {
        return objc.msgSend(self, "dominantLanguageForString:", ?*String, .{string});
    }

    pub fn tagForStringAtIndexUnitSchemeOrthographyTokenRange(self: *@This(), string: ?*String, charIndex: objc.NSUInteger, unit: LinguisticTaggerUnit, scheme: LinguisticTagScheme, orthography: ?*Orthography, tokenRange: RangePointer, ) LinguisticTag {
        return objc.msgSend(self, "tagForString:atIndex:unit:scheme:orthography:tokenRange:", LinguisticTag, .{string, charIndex, unit, scheme, orthography, tokenRange, });
    }

    pub fn tagsForStringRangeUnitSchemeOptionsOrthographyTokenRanges(self: *@This(), string: ?*String, range: Range, unit: LinguisticTaggerUnit, scheme: LinguisticTagScheme, options: LinguisticTaggerOptions, orthography: ?*Orthography, tokenRanges: ?*?*anyopaque, ) ?*anyopaque {
        return objc.msgSend(self, "tagsForString:range:unit:scheme:options:orthography:tokenRanges:", ?*anyopaque, .{string, range, unit, scheme, options, orthography, tokenRanges, });
    }

    pub fn enumerateTagsForStringRangeUnitSchemeOptionsOrthographyUsingBlock(self: *@This(), string: ?*String, range: Range, unit: LinguisticTaggerUnit, scheme: LinguisticTagScheme, options: LinguisticTaggerOptions, orthography: ?*Orthography, block: *const fn(LinguisticTag, Range, ?*objc.BOOL) callconv(.C) void, ) void {
        return objc.msgSend(self, "enumerateTagsForString:range:unit:scheme:options:orthography:usingBlock:", void, .{string, range, unit, scheme, options, orthography, block, });
    }

    pub fn possibleTagsAtIndexSchemeTokenRangeSentenceRangeScores(self: *@This(), charIndex: objc.NSUInteger, tagScheme: ?*String, tokenRange: RangePointer, sentenceRange: RangePointer, scores: ?*?*anyopaque, ) ?*anyopaque {
        return objc.msgSend(self, "possibleTagsAtIndex:scheme:tokenRange:sentenceRange:scores:", ?*anyopaque, .{charIndex, tagScheme, tokenRange, sentenceRange, scores, });
    }

    pub fn tagSchemes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "tagSchemes", ?*anyopaque, .{});
    }

    pub fn string(self: *@This()) ?*String {
        return objc.msgSend(self, "string", ?*String, .{});
    }

    pub fn setString(self: *@This(), string: ?*String) void {
        return objc.msgSend(self, "setString:", void, .{string});
    }

    pub fn dominantLanguage(self: *@This()) ?*String {
        return objc.msgSend(self, "dominantLanguage", ?*String, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSMetadataQuery?language=objc
pub const MetadataQuery = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMetadataQuery", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn startQuery(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "startQuery", objc.BOOL, .{});
    }

    pub fn stopQuery(self: *@This()) void {
        return objc.msgSend(self, "stopQuery", void, .{});
    }

    pub fn disableUpdates(self: *@This()) void {
        return objc.msgSend(self, "disableUpdates", void, .{});
    }

    pub fn enableUpdates(self: *@This()) void {
        return objc.msgSend(self, "enableUpdates", void, .{});
    }

    pub fn resultAtIndex(self: *@This(), idx: objc.NSUInteger) *objc.Id {
        return objc.msgSend(self, "resultAtIndex:", *objc.Id, .{idx});
    }

    pub fn enumerateResultsUsingBlock(self: *@This(), block: *const fn(*objc.Id, objc.NSUInteger, ?*objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(self, "enumerateResultsUsingBlock:", void, .{block});
    }

    pub fn enumerateResultsWithOptionsUsingBlock(self: *@This(), opts: EnumerationOptions, block: *const fn(*objc.Id, objc.NSUInteger, ?*objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(self, "enumerateResultsWithOptions:usingBlock:", void, .{opts, block});
    }

    pub fn indexOfResult(self: *@This(), result: *objc.Id) objc.NSUInteger {
        return objc.msgSend(self, "indexOfResult:", objc.NSUInteger, .{result});
    }

    pub fn valueOfAttributeForResultAtIndex(self: *@This(), attrName: ?*String, idx: objc.NSUInteger) *objc.Id {
        return objc.msgSend(self, "valueOfAttribute:forResultAtIndex:", *objc.Id, .{attrName, idx});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn predicate(self: *@This()) ?*Predicate {
        return objc.msgSend(self, "predicate", ?*Predicate, .{});
    }

    pub fn setPredicate(self: *@This(), predicate: ?*Predicate) void {
        return objc.msgSend(self, "setPredicate:", void, .{predicate});
    }

    pub fn sortDescriptors(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "sortDescriptors", ?*anyopaque, .{});
    }

    pub fn setSortDescriptors(self: *@This(), sortDescriptors: ?*anyopaque) void {
        return objc.msgSend(self, "setSortDescriptors:", void, .{sortDescriptors});
    }

    pub fn valueListAttributes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "valueListAttributes", ?*anyopaque, .{});
    }

    pub fn setValueListAttributes(self: *@This(), valueListAttributes: ?*anyopaque) void {
        return objc.msgSend(self, "setValueListAttributes:", void, .{valueListAttributes});
    }

    pub fn groupingAttributes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "groupingAttributes", ?*anyopaque, .{});
    }

    pub fn setGroupingAttributes(self: *@This(), groupingAttributes: ?*anyopaque) void {
        return objc.msgSend(self, "setGroupingAttributes:", void, .{groupingAttributes});
    }

    pub fn notificationBatchingInterval(self: *@This()) TimeInterval {
        return objc.msgSend(self, "notificationBatchingInterval", TimeInterval, .{});
    }

    pub fn setNotificationBatchingInterval(self: *@This(), notificationBatchingInterval: TimeInterval) void {
        return objc.msgSend(self, "setNotificationBatchingInterval:", void, .{notificationBatchingInterval});
    }

    pub fn searchScopes(self: *@This()) ?*Array {
        return objc.msgSend(self, "searchScopes", ?*Array, .{});
    }

    pub fn setSearchScopes(self: *@This(), searchScopes: ?*Array) void {
        return objc.msgSend(self, "setSearchScopes:", void, .{searchScopes});
    }

    pub fn searchItems(self: *@This()) ?*Array {
        return objc.msgSend(self, "searchItems", ?*Array, .{});
    }

    pub fn setSearchItems(self: *@This(), searchItems: ?*Array) void {
        return objc.msgSend(self, "setSearchItems:", void, .{searchItems});
    }

    pub fn operationQueue(self: *@This()) ?*OperationQueue {
        return objc.msgSend(self, "operationQueue", ?*OperationQueue, .{});
    }

    pub fn setOperationQueue(self: *@This(), operationQueue: ?*OperationQueue) void {
        return objc.msgSend(self, "setOperationQueue:", void, .{operationQueue});
    }

    pub fn isStarted(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isStarted", objc.BOOL, .{});
    }

    pub fn isGathering(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isGathering", objc.BOOL, .{});
    }

    pub fn isStopped(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isStopped", objc.BOOL, .{});
    }

    pub fn resultCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "resultCount", objc.NSUInteger, .{});
    }

    pub fn results(self: *@This()) ?*Array {
        return objc.msgSend(self, "results", ?*Array, .{});
    }

    pub fn valueLists(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "valueLists", ?*anyopaque, .{});
    }

    pub fn groupedResults(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "groupedResults", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSMetadataQueryDelegate?language=objc
pub const MetadataQueryDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn metadataQueryReplacementObjectForResultObject(self: *@This(), query: ?*MetadataQuery, result: ?*MetadataItem) *objc.Id {
        return objc.msgSend(self, "metadataQuery:replacementObjectForResultObject:", *objc.Id, .{query, result});
    }

    pub fn metadataQueryReplacementValueForAttributeValue(self: *@This(), query: ?*MetadataQuery, attrName: ?*String, attrValue: *objc.Id) *objc.Id {
        return objc.msgSend(self, "metadataQuery:replacementValueForAttribute:value:", *objc.Id, .{query, attrName, attrValue});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSMetadataItem?language=objc
pub const MetadataItem = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMetadataItem", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithURL(self: *@This(), url: ?*URL) *@This() {
        return objc.msgSend(self, "initWithURL:", *@This(), .{url});
    }

    pub fn valueForAttribute(self: *@This(), key: ?*String) *objc.Id {
        return objc.msgSend(self, "valueForAttribute:", *objc.Id, .{key});
    }

    pub fn valuesForAttributes(self: *@This(), keys: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "valuesForAttributes:", ?*anyopaque, .{keys});
    }

    pub fn attributes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "attributes", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSMetadataQueryAttributeValueTuple?language=objc
pub const MetadataQueryAttributeValueTuple = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMetadataQueryAttributeValueTuple", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn attribute(self: *@This()) ?*String {
        return objc.msgSend(self, "attribute", ?*String, .{});
    }

    pub fn value(self: *@This()) *objc.Id {
        return objc.msgSend(self, "value", *objc.Id, .{});
    }

    pub fn count(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "count", objc.NSUInteger, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSMetadataQueryResultGroup?language=objc
pub const MetadataQueryResultGroup = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMetadataQueryResultGroup", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn resultAtIndex(self: *@This(), idx: objc.NSUInteger) *objc.Id {
        return objc.msgSend(self, "resultAtIndex:", *objc.Id, .{idx});
    }

    pub fn attribute(self: *@This()) ?*String {
        return objc.msgSend(self, "attribute", ?*String, .{});
    }

    pub fn value(self: *@This()) *objc.Id {
        return objc.msgSend(self, "value", *objc.Id, .{});
    }

    pub fn subgroups(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "subgroups", ?*anyopaque, .{});
    }

    pub fn resultCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "resultCount", objc.NSUInteger, .{});
    }

    pub fn results(self: *@This()) ?*Array {
        return objc.msgSend(self, "results", ?*Array, .{});
    }

};

pub const NetServicesError = enum(objc.NSInteger) {
    UnknownError = -72000,
    CollisionError = -72001,
    NotFoundError = -72002,
    ActivityInProgress = -72003,
    BadArgumentError = -72004,
    CancelledError = -72005,
    InvalidError = -72006,
    TimeoutError = -72007,
    MissingRequiredConfigurationError = -72008,
};

pub const NetServiceOptions = enum(objc.NSUInteger) {
    NoAutoRename = 1,
    ListenForConnections = 2,
};

/// https://developer.apple.com/documentation/Foundation/NSNetService?language=objc
pub const NetService = opaque {
    pub const InternalInfo = objc.ExternalClass("NSNetService", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithDomainTypeNamePort(self: *@This(), domain: ?*String, @"type": ?*String, name: ?*String, port: i32, ) *@This() {
        return objc.msgSend(self, "initWithDomain:type:name:port:", *@This(), .{domain, @"type", name, port, });
    }

    pub fn initWithDomainTypeName(self: *@This(), domain: ?*String, @"type": ?*String, name: ?*String) *@This() {
        return objc.msgSend(self, "initWithDomain:type:name:", *@This(), .{domain, @"type", name});
    }

    pub fn scheduleInRunLoopForMode(self: *@This(), aRunLoop: ?*RunLoop, mode: RunLoopMode) void {
        return objc.msgSend(self, "scheduleInRunLoop:forMode:", void, .{aRunLoop, mode});
    }

    pub fn removeFromRunLoopForMode(self: *@This(), aRunLoop: ?*RunLoop, mode: RunLoopMode) void {
        return objc.msgSend(self, "removeFromRunLoop:forMode:", void, .{aRunLoop, mode});
    }

    pub fn publish(self: *@This()) void {
        return objc.msgSend(self, "publish", void, .{});
    }

    pub fn publishWithOptions(self: *@This(), options: NetServiceOptions) void {
        return objc.msgSend(self, "publishWithOptions:", void, .{options});
    }

    pub fn resolve(self: *@This()) void {
        return objc.msgSend(self, "resolve", void, .{});
    }

    pub fn stop(self: *@This()) void {
        return objc.msgSend(self, "stop", void, .{});
    }

    pub fn dictionaryFromTXTRecordData(self: *@This(), txtData: ?*Data) ?*anyopaque {
        return objc.msgSend(self, "dictionaryFromTXTRecordData:", ?*anyopaque, .{txtData});
    }

    pub fn dataFromTXTRecordDictionary(self: *@This(), txtDictionary: ?*anyopaque) ?*Data {
        return objc.msgSend(self, "dataFromTXTRecordDictionary:", ?*Data, .{txtDictionary});
    }

    pub fn resolveWithTimeout(self: *@This(), timeout: TimeInterval) void {
        return objc.msgSend(self, "resolveWithTimeout:", void, .{timeout});
    }

    pub fn getInputStreamOutputStream(self: *@This(), inputStream: ?*?*InputStream, outputStream: ?*?*OutputStream) objc.BOOL {
        return objc.msgSend(self, "getInputStream:outputStream:", objc.BOOL, .{inputStream, outputStream});
    }

    pub fn setTXTRecordData(self: *@This(), recordData: ?*Data) objc.BOOL {
        return objc.msgSend(self, "setTXTRecordData:", objc.BOOL, .{recordData});
    }

    pub fn TXTRecordData(self: *@This()) ?*Data {
        return objc.msgSend(self, "TXTRecordData", ?*Data, .{});
    }

    pub fn startMonitoring(self: *@This()) void {
        return objc.msgSend(self, "startMonitoring", void, .{});
    }

    pub fn stopMonitoring(self: *@This()) void {
        return objc.msgSend(self, "stopMonitoring", void, .{});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn includesPeerToPeer(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "includesPeerToPeer", objc.BOOL, .{});
    }

    pub fn setIncludesPeerToPeer(self: *@This(), includesPeerToPeer: objc.BOOL) void {
        return objc.msgSend(self, "setIncludesPeerToPeer:", void, .{includesPeerToPeer});
    }

    pub fn name(self: *@This()) ?*String {
        return objc.msgSend(self, "name", ?*String, .{});
    }

    pub fn @"type"(self: *@This()) ?*String {
        return objc.msgSend(self, "type", ?*String, .{});
    }

    pub fn domain(self: *@This()) ?*String {
        return objc.msgSend(self, "domain", ?*String, .{});
    }

    pub fn hostName(self: *@This()) ?*String {
        return objc.msgSend(self, "hostName", ?*String, .{});
    }

    pub fn addresses(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "addresses", ?*anyopaque, .{});
    }

    pub fn port(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "port", objc.NSInteger, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSNetServiceBrowser?language=objc
pub const NetServiceBrowser = opaque {
    pub const InternalInfo = objc.ExternalClass("NSNetServiceBrowser", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn scheduleInRunLoopForMode(self: *@This(), aRunLoop: ?*RunLoop, mode: RunLoopMode) void {
        return objc.msgSend(self, "scheduleInRunLoop:forMode:", void, .{aRunLoop, mode});
    }

    pub fn removeFromRunLoopForMode(self: *@This(), aRunLoop: ?*RunLoop, mode: RunLoopMode) void {
        return objc.msgSend(self, "removeFromRunLoop:forMode:", void, .{aRunLoop, mode});
    }

    pub fn searchForBrowsableDomains(self: *@This()) void {
        return objc.msgSend(self, "searchForBrowsableDomains", void, .{});
    }

    pub fn searchForRegistrationDomains(self: *@This()) void {
        return objc.msgSend(self, "searchForRegistrationDomains", void, .{});
    }

    pub fn searchForServicesOfTypeInDomain(self: *@This(), @"type": ?*String, domainString: ?*String) void {
        return objc.msgSend(self, "searchForServicesOfType:inDomain:", void, .{@"type", domainString});
    }

    pub fn stop(self: *@This()) void {
        return objc.msgSend(self, "stop", void, .{});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn includesPeerToPeer(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "includesPeerToPeer", objc.BOOL, .{});
    }

    pub fn setIncludesPeerToPeer(self: *@This(), includesPeerToPeer: objc.BOOL) void {
        return objc.msgSend(self, "setIncludesPeerToPeer:", void, .{includesPeerToPeer});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSNetServiceDelegate?language=objc
pub const NetServiceDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn netServiceWillPublish(self: *@This(), sender: ?*NetService) void {
        return objc.msgSend(self, "netServiceWillPublish:", void, .{sender});
    }

    pub fn netServiceDidPublish(self: *@This(), sender: ?*NetService) void {
        return objc.msgSend(self, "netServiceDidPublish:", void, .{sender});
    }

    pub fn netServiceDidNotPublish(self: *@This(), sender: ?*NetService, errorDict: ?*anyopaque) void {
        return objc.msgSend(self, "netService:didNotPublish:", void, .{sender, errorDict});
    }

    pub fn netServiceWillResolve(self: *@This(), sender: ?*NetService) void {
        return objc.msgSend(self, "netServiceWillResolve:", void, .{sender});
    }

    pub fn netServiceDidResolveAddress(self: *@This(), sender: ?*NetService) void {
        return objc.msgSend(self, "netServiceDidResolveAddress:", void, .{sender});
    }

    pub fn netServiceDidNotResolve(self: *@This(), sender: ?*NetService, errorDict: ?*anyopaque) void {
        return objc.msgSend(self, "netService:didNotResolve:", void, .{sender, errorDict});
    }

    pub fn netServiceDidStop(self: *@This(), sender: ?*NetService) void {
        return objc.msgSend(self, "netServiceDidStop:", void, .{sender});
    }

    pub fn netServiceDidUpdateTXTRecordData(self: *@This(), sender: ?*NetService, data: ?*Data) void {
        return objc.msgSend(self, "netService:didUpdateTXTRecordData:", void, .{sender, data});
    }

    pub fn netServiceDidAcceptConnectionWithInputStreamOutputStream(self: *@This(), sender: ?*NetService, inputStream: ?*InputStream, outputStream: ?*OutputStream) void {
        return objc.msgSend(self, "netService:didAcceptConnectionWithInputStream:outputStream:", void, .{sender, inputStream, outputStream});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSNetServiceBrowserDelegate?language=objc
pub const NetServiceBrowserDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn netServiceBrowserWillSearch(self: *@This(), browser: ?*NetServiceBrowser) void {
        return objc.msgSend(self, "netServiceBrowserWillSearch:", void, .{browser});
    }

    pub fn netServiceBrowserDidStopSearch(self: *@This(), browser: ?*NetServiceBrowser) void {
        return objc.msgSend(self, "netServiceBrowserDidStopSearch:", void, .{browser});
    }

    pub fn netServiceBrowserDidNotSearch(self: *@This(), browser: ?*NetServiceBrowser, errorDict: ?*anyopaque) void {
        return objc.msgSend(self, "netServiceBrowser:didNotSearch:", void, .{browser, errorDict});
    }

    pub fn netServiceBrowserDidFindDomainMoreComing(self: *@This(), browser: ?*NetServiceBrowser, domainString: ?*String, moreComing: objc.BOOL) void {
        return objc.msgSend(self, "netServiceBrowser:didFindDomain:moreComing:", void, .{browser, domainString, moreComing});
    }

    pub fn netServiceBrowserDidFindServiceMoreComing(self: *@This(), browser: ?*NetServiceBrowser, service: ?*NetService, moreComing: objc.BOOL) void {
        return objc.msgSend(self, "netServiceBrowser:didFindService:moreComing:", void, .{browser, service, moreComing});
    }

    pub fn netServiceBrowserDidRemoveDomainMoreComing(self: *@This(), browser: ?*NetServiceBrowser, domainString: ?*String, moreComing: objc.BOOL) void {
        return objc.msgSend(self, "netServiceBrowser:didRemoveDomain:moreComing:", void, .{browser, domainString, moreComing});
    }

    pub fn netServiceBrowserDidRemoveServiceMoreComing(self: *@This(), browser: ?*NetServiceBrowser, service: ?*NetService, moreComing: objc.BOOL) void {
        return objc.msgSend(self, "netServiceBrowser:didRemoveService:moreComing:", void, .{browser, service, moreComing});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUbiquitousKeyValueStore?language=objc
pub const UbiquitousKeyValueStore = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUbiquitousKeyValueStore", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn objectForKey(self: *@This(), aKey: ?*String) *objc.Id {
        return objc.msgSend(self, "objectForKey:", *objc.Id, .{aKey});
    }

    pub fn setObjectForKey(self: *@This(), anObject: *objc.Id, aKey: ?*String) void {
        return objc.msgSend(self, "setObject:forKey:", void, .{anObject, aKey});
    }

    pub fn removeObjectForKey(self: *@This(), aKey: ?*String) void {
        return objc.msgSend(self, "removeObjectForKey:", void, .{aKey});
    }

    pub fn stringForKey(self: *@This(), aKey: ?*String) ?*String {
        return objc.msgSend(self, "stringForKey:", ?*String, .{aKey});
    }

    pub fn arrayForKey(self: *@This(), aKey: ?*String) ?*Array {
        return objc.msgSend(self, "arrayForKey:", ?*Array, .{aKey});
    }

    pub fn dictionaryForKey(self: *@This(), aKey: ?*String) ?*anyopaque {
        return objc.msgSend(self, "dictionaryForKey:", ?*anyopaque, .{aKey});
    }

    pub fn dataForKey(self: *@This(), aKey: ?*String) ?*Data {
        return objc.msgSend(self, "dataForKey:", ?*Data, .{aKey});
    }

    pub fn longLongForKey(self: *@This(), aKey: ?*String) i64 {
        return objc.msgSend(self, "longLongForKey:", i64, .{aKey});
    }

    pub fn doubleForKey(self: *@This(), aKey: ?*String) f64 {
        return objc.msgSend(self, "doubleForKey:", f64, .{aKey});
    }

    pub fn boolForKey(self: *@This(), aKey: ?*String) objc.BOOL {
        return objc.msgSend(self, "boolForKey:", objc.BOOL, .{aKey});
    }

    pub fn setStringForKey(self: *@This(), aString: ?*String, aKey: ?*String) void {
        return objc.msgSend(self, "setString:forKey:", void, .{aString, aKey});
    }

    pub fn setDataForKey(self: *@This(), aData: ?*Data, aKey: ?*String) void {
        return objc.msgSend(self, "setData:forKey:", void, .{aData, aKey});
    }

    pub fn setArrayForKey(self: *@This(), anArray: ?*Array, aKey: ?*String) void {
        return objc.msgSend(self, "setArray:forKey:", void, .{anArray, aKey});
    }

    pub fn setDictionaryForKey(self: *@This(), aDictionary: ?*anyopaque, aKey: ?*String) void {
        return objc.msgSend(self, "setDictionary:forKey:", void, .{aDictionary, aKey});
    }

    pub fn setLongLongForKey(self: *@This(), value: i64, aKey: ?*String) void {
        return objc.msgSend(self, "setLongLong:forKey:", void, .{value, aKey});
    }

    pub fn setDoubleForKey(self: *@This(), value: f64, aKey: ?*String) void {
        return objc.msgSend(self, "setDouble:forKey:", void, .{value, aKey});
    }

    pub fn setBoolForKey(self: *@This(), value: objc.BOOL, aKey: ?*String) void {
        return objc.msgSend(self, "setBool:forKey:", void, .{value, aKey});
    }

    pub fn synchronize(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "synchronize", objc.BOOL, .{});
    }

    pub fn defaultStore(self: *@This()) ?*UbiquitousKeyValueStore {
        return objc.msgSend(self, "defaultStore", ?*UbiquitousKeyValueStore, .{});
    }

    pub fn dictionaryRepresentation(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "dictionaryRepresentation", ?*anyopaque, .{});
    }

};

pub const UndoManagerUserInfoKey = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSUndoManager?language=objc
pub const UndoManager = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUndoManager", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn beginUndoGrouping(self: *@This()) void {
        return objc.msgSend(self, "beginUndoGrouping", void, .{});
    }

    pub fn endUndoGrouping(self: *@This()) void {
        return objc.msgSend(self, "endUndoGrouping", void, .{});
    }

    pub fn groupingLevel(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "groupingLevel", objc.NSInteger, .{});
    }

    pub fn disableUndoRegistration(self: *@This()) void {
        return objc.msgSend(self, "disableUndoRegistration", void, .{});
    }

    pub fn enableUndoRegistration(self: *@This()) void {
        return objc.msgSend(self, "enableUndoRegistration", void, .{});
    }

    pub fn isUndoRegistrationEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isUndoRegistrationEnabled", objc.BOOL, .{});
    }

    pub fn setGroupsByEvent(self: *@This(), groupsByEvent: objc.BOOL) void {
        return objc.msgSend(self, "setGroupsByEvent:", void, .{groupsByEvent});
    }

    pub fn groupsByEvent(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "groupsByEvent", objc.BOOL, .{});
    }

    pub fn setLevelsOfUndo(self: *@This(), levelsOfUndo: objc.NSUInteger) void {
        return objc.msgSend(self, "setLevelsOfUndo:", void, .{levelsOfUndo});
    }

    pub fn levelsOfUndo(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "levelsOfUndo", objc.NSUInteger, .{});
    }

    pub fn setRunLoopModes(self: *@This(), runLoopModes: ?*anyopaque) void {
        return objc.msgSend(self, "setRunLoopModes:", void, .{runLoopModes});
    }

    pub fn runLoopModes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "runLoopModes", ?*anyopaque, .{});
    }

    pub fn undo(self: *@This()) void {
        return objc.msgSend(self, "undo", void, .{});
    }

    pub fn redo(self: *@This()) void {
        return objc.msgSend(self, "redo", void, .{});
    }

    pub fn undoNestedGroup(self: *@This()) void {
        return objc.msgSend(self, "undoNestedGroup", void, .{});
    }

    pub fn canUndo(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canUndo", objc.BOOL, .{});
    }

    pub fn canRedo(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "canRedo", objc.BOOL, .{});
    }

    pub fn undoCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "undoCount", objc.NSUInteger, .{});
    }

    pub fn redoCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "redoCount", objc.NSUInteger, .{});
    }

    pub fn isUndoing(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isUndoing", objc.BOOL, .{});
    }

    pub fn isRedoing(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isRedoing", objc.BOOL, .{});
    }

    pub fn removeAllActions(self: *@This()) void {
        return objc.msgSend(self, "removeAllActions", void, .{});
    }

    pub fn removeAllActionsWithTarget(self: *@This(), target: *objc.Id) void {
        return objc.msgSend(self, "removeAllActionsWithTarget:", void, .{target});
    }

    pub fn registerUndoWithTargetSelectorObject(self: *@This(), target: *objc.Id, selector: *objc.SEL, object: *objc.Id) void {
        return objc.msgSend(self, "registerUndoWithTarget:selector:object:", void, .{target, selector, object});
    }

    pub fn prepareWithInvocationTarget(self: *@This(), target: *objc.Id) *objc.Id {
        return objc.msgSend(self, "prepareWithInvocationTarget:", *objc.Id, .{target});
    }

    pub fn registerUndoWithTargetHandler(self: *@This(), target: *objc.Id, undoHandler: *const fn(*objc.Id) callconv(.C) void) void {
        return objc.msgSend(self, "registerUndoWithTarget:handler:", void, .{target, undoHandler});
    }

    pub fn setActionIsDiscardable(self: *@This(), discardable: objc.BOOL) void {
        return objc.msgSend(self, "setActionIsDiscardable:", void, .{discardable});
    }

    pub fn undoActionIsDiscardable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "undoActionIsDiscardable", objc.BOOL, .{});
    }

    pub fn redoActionIsDiscardable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "redoActionIsDiscardable", objc.BOOL, .{});
    }

    pub fn undoActionName(self: *@This()) ?*String {
        return objc.msgSend(self, "undoActionName", ?*String, .{});
    }

    pub fn redoActionName(self: *@This()) ?*String {
        return objc.msgSend(self, "redoActionName", ?*String, .{});
    }

    pub fn setActionName(self: *@This(), actionName: ?*String) void {
        return objc.msgSend(self, "setActionName:", void, .{actionName});
    }

    pub fn undoActionUserInfoValueForKey(self: *@This(), key: UndoManagerUserInfoKey) *objc.Id {
        return objc.msgSend(self, "undoActionUserInfoValueForKey:", *objc.Id, .{key});
    }

    pub fn redoActionUserInfoValueForKey(self: *@This(), key: UndoManagerUserInfoKey) *objc.Id {
        return objc.msgSend(self, "redoActionUserInfoValueForKey:", *objc.Id, .{key});
    }

    pub fn setActionUserInfoValueForKey(self: *@This(), info: *objc.Id, key: UndoManagerUserInfoKey) void {
        return objc.msgSend(self, "setActionUserInfoValue:forKey:", void, .{info, key});
    }

    pub fn undoMenuItemTitle(self: *@This()) ?*String {
        return objc.msgSend(self, "undoMenuItemTitle", ?*String, .{});
    }

    pub fn redoMenuItemTitle(self: *@This()) ?*String {
        return objc.msgSend(self, "redoMenuItemTitle", ?*String, .{});
    }

    pub fn undoMenuTitleForUndoActionName(self: *@This(), actionName: ?*String) ?*String {
        return objc.msgSend(self, "undoMenuTitleForUndoActionName:", ?*String, .{actionName});
    }

    pub fn redoMenuTitleForUndoActionName(self: *@This(), actionName: ?*String) ?*String {
        return objc.msgSend(self, "redoMenuTitleForUndoActionName:", ?*String, .{actionName});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSURLSession?language=objc
pub const URLSession = opaque {
    pub const InternalInfo = objc.ExternalClass("NSURLSession", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn sessionWithConfiguration(self: *@This(), configuration: ?*URLSessionConfiguration) ?*URLSession {
        return objc.msgSend(self, "sessionWithConfiguration:", ?*URLSession, .{configuration});
    }

    pub fn sessionWithConfigurationDelegateDelegateQueue(self: *@This(), configuration: ?*URLSessionConfiguration, delegate: ?*anyopaque, queue: ?*OperationQueue) ?*URLSession {
        return objc.msgSend(self, "sessionWithConfiguration:delegate:delegateQueue:", ?*URLSession, .{configuration, delegate, queue});
    }

    pub fn finishTasksAndInvalidate(self: *@This()) void {
        return objc.msgSend(self, "finishTasksAndInvalidate", void, .{});
    }

    pub fn invalidateAndCancel(self: *@This()) void {
        return objc.msgSend(self, "invalidateAndCancel", void, .{});
    }

    pub fn resetWithCompletionHandler(self: *@This(), completionHandler: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "resetWithCompletionHandler:", void, .{completionHandler});
    }

    pub fn flushWithCompletionHandler(self: *@This(), completionHandler: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "flushWithCompletionHandler:", void, .{completionHandler});
    }

    pub fn getTasksWithCompletionHandler(self: *@This(), completionHandler: *const fn(?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) void) void {
        return objc.msgSend(self, "getTasksWithCompletionHandler:", void, .{completionHandler});
    }

    pub fn getAllTasksWithCompletionHandler(self: *@This(), completionHandler: *const fn(?*anyopaque) callconv(.C) void) void {
        return objc.msgSend(self, "getAllTasksWithCompletionHandler:", void, .{completionHandler});
    }

    pub fn dataTaskWithRequest(self: *@This(), request: ?*URLRequest) ?*URLSessionDataTask {
        return objc.msgSend(self, "dataTaskWithRequest:", ?*URLSessionDataTask, .{request});
    }

    pub fn dataTaskWithURL(self: *@This(), url: ?*URL) ?*URLSessionDataTask {
        return objc.msgSend(self, "dataTaskWithURL:", ?*URLSessionDataTask, .{url});
    }

    pub fn uploadTaskWithRequestFromFile(self: *@This(), request: ?*URLRequest, fileURL: ?*URL) ?*URLSessionUploadTask {
        return objc.msgSend(self, "uploadTaskWithRequest:fromFile:", ?*URLSessionUploadTask, .{request, fileURL});
    }

    pub fn uploadTaskWithRequestFromData(self: *@This(), request: ?*URLRequest, bodyData: ?*Data) ?*URLSessionUploadTask {
        return objc.msgSend(self, "uploadTaskWithRequest:fromData:", ?*URLSessionUploadTask, .{request, bodyData});
    }

    pub fn uploadTaskWithResumeData(self: *@This(), resumeData: ?*Data) ?*URLSessionUploadTask {
        return objc.msgSend(self, "uploadTaskWithResumeData:", ?*URLSessionUploadTask, .{resumeData});
    }

    pub fn uploadTaskWithStreamedRequest(self: *@This(), request: ?*URLRequest) ?*URLSessionUploadTask {
        return objc.msgSend(self, "uploadTaskWithStreamedRequest:", ?*URLSessionUploadTask, .{request});
    }

    pub fn downloadTaskWithRequest(self: *@This(), request: ?*URLRequest) ?*URLSessionDownloadTask {
        return objc.msgSend(self, "downloadTaskWithRequest:", ?*URLSessionDownloadTask, .{request});
    }

    pub fn downloadTaskWithURL(self: *@This(), url: ?*URL) ?*URLSessionDownloadTask {
        return objc.msgSend(self, "downloadTaskWithURL:", ?*URLSessionDownloadTask, .{url});
    }

    pub fn downloadTaskWithResumeData(self: *@This(), resumeData: ?*Data) ?*URLSessionDownloadTask {
        return objc.msgSend(self, "downloadTaskWithResumeData:", ?*URLSessionDownloadTask, .{resumeData});
    }

    pub fn streamTaskWithHostNamePort(self: *@This(), hostname: ?*String, port: objc.NSInteger) ?*URLSessionStreamTask {
        return objc.msgSend(self, "streamTaskWithHostName:port:", ?*URLSessionStreamTask, .{hostname, port});
    }

    pub fn streamTaskWithNetService(self: *@This(), service: ?*NetService) ?*URLSessionStreamTask {
        return objc.msgSend(self, "streamTaskWithNetService:", ?*URLSessionStreamTask, .{service});
    }

    pub fn webSocketTaskWithURL(self: *@This(), url: ?*URL) ?*URLSessionWebSocketTask {
        return objc.msgSend(self, "webSocketTaskWithURL:", ?*URLSessionWebSocketTask, .{url});
    }

    pub fn webSocketTaskWithURLProtocols(self: *@This(), url: ?*URL, protocols: ?*anyopaque) ?*URLSessionWebSocketTask {
        return objc.msgSend(self, "webSocketTaskWithURL:protocols:", ?*URLSessionWebSocketTask, .{url, protocols});
    }

    pub fn webSocketTaskWithRequest(self: *@This(), request: ?*URLRequest) ?*URLSessionWebSocketTask {
        return objc.msgSend(self, "webSocketTaskWithRequest:", ?*URLSessionWebSocketTask, .{request});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn sharedSession(self: *@This()) ?*URLSession {
        return objc.msgSend(self, "sharedSession", ?*URLSession, .{});
    }

    pub fn delegateQueue(self: *@This()) ?*OperationQueue {
        return objc.msgSend(self, "delegateQueue", ?*OperationQueue, .{});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn configuration(self: *@This()) ?*URLSessionConfiguration {
        return objc.msgSend(self, "configuration", ?*URLSessionConfiguration, .{});
    }

    pub fn sessionDescription(self: *@This()) ?*String {
        return objc.msgSend(self, "sessionDescription", ?*String, .{});
    }

    pub fn setSessionDescription(self: *@This(), sessionDescription: ?*String) void {
        return objc.msgSend(self, "setSessionDescription:", void, .{sessionDescription});
    }

};

pub const URLSessionTaskState = enum(objc.NSInteger) {
    Running = 0,
    Suspended = 1,
    Canceling = 2,
    Completed = 3,
};

/// https://developer.apple.com/documentation/Foundation/NSURLSessionTask?language=objc
pub const URLSessionTask = opaque {
    pub const InternalInfo = objc.ExternalClass("NSURLSessionTask", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn cancel(self: *@This()) void {
        return objc.msgSend(self, "cancel", void, .{});
    }

    pub fn @"suspend"(self: *@This()) void {
        return objc.msgSend(self, "suspend", void, .{});
    }

    pub fn @"resume"(self: *@This()) void {
        return objc.msgSend(self, "resume", void, .{});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn taskIdentifier(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "taskIdentifier", objc.NSUInteger, .{});
    }

    pub fn originalRequest(self: *@This()) ?*URLRequest {
        return objc.msgSend(self, "originalRequest", ?*URLRequest, .{});
    }

    pub fn currentRequest(self: *@This()) ?*URLRequest {
        return objc.msgSend(self, "currentRequest", ?*URLRequest, .{});
    }

    pub fn response(self: *@This()) ?*URLResponse {
        return objc.msgSend(self, "response", ?*URLResponse, .{});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn progress(self: *@This()) ?*Progress {
        return objc.msgSend(self, "progress", ?*Progress, .{});
    }

    pub fn earliestBeginDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "earliestBeginDate", ?*Date, .{});
    }

    pub fn setEarliestBeginDate(self: *@This(), earliestBeginDate: ?*Date) void {
        return objc.msgSend(self, "setEarliestBeginDate:", void, .{earliestBeginDate});
    }

    pub fn countOfBytesClientExpectsToSend(self: *@This()) objc.int64_t {
        return objc.msgSend(self, "countOfBytesClientExpectsToSend", objc.int64_t, .{});
    }

    pub fn setCountOfBytesClientExpectsToSend(self: *@This(), countOfBytesClientExpectsToSend: objc.int64_t) void {
        return objc.msgSend(self, "setCountOfBytesClientExpectsToSend:", void, .{countOfBytesClientExpectsToSend});
    }

    pub fn countOfBytesClientExpectsToReceive(self: *@This()) objc.int64_t {
        return objc.msgSend(self, "countOfBytesClientExpectsToReceive", objc.int64_t, .{});
    }

    pub fn setCountOfBytesClientExpectsToReceive(self: *@This(), countOfBytesClientExpectsToReceive: objc.int64_t) void {
        return objc.msgSend(self, "setCountOfBytesClientExpectsToReceive:", void, .{countOfBytesClientExpectsToReceive});
    }

    pub fn countOfBytesSent(self: *@This()) objc.int64_t {
        return objc.msgSend(self, "countOfBytesSent", objc.int64_t, .{});
    }

    pub fn countOfBytesReceived(self: *@This()) objc.int64_t {
        return objc.msgSend(self, "countOfBytesReceived", objc.int64_t, .{});
    }

    pub fn countOfBytesExpectedToSend(self: *@This()) objc.int64_t {
        return objc.msgSend(self, "countOfBytesExpectedToSend", objc.int64_t, .{});
    }

    pub fn countOfBytesExpectedToReceive(self: *@This()) objc.int64_t {
        return objc.msgSend(self, "countOfBytesExpectedToReceive", objc.int64_t, .{});
    }

    pub fn taskDescription(self: *@This()) ?*String {
        return objc.msgSend(self, "taskDescription", ?*String, .{});
    }

    pub fn setTaskDescription(self: *@This(), taskDescription: ?*String) void {
        return objc.msgSend(self, "setTaskDescription:", void, .{taskDescription});
    }

    pub fn state(self: *@This()) URLSessionTaskState {
        return objc.msgSend(self, "state", URLSessionTaskState, .{});
    }

    pub fn @"error"(self: *@This()) ?*Error {
        return objc.msgSend(self, "error", ?*Error, .{});
    }

    pub fn priority(self: *@This()) f32 {
        return objc.msgSend(self, "priority", f32, .{});
    }

    pub fn setPriority(self: *@This(), priority: f32) void {
        return objc.msgSend(self, "setPriority:", void, .{priority});
    }

    pub fn prefersIncrementalDelivery(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "prefersIncrementalDelivery", objc.BOOL, .{});
    }

    pub fn setPrefersIncrementalDelivery(self: *@This(), prefersIncrementalDelivery: objc.BOOL) void {
        return objc.msgSend(self, "setPrefersIncrementalDelivery:", void, .{prefersIncrementalDelivery});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSURLSessionDataTask?language=objc
pub const URLSessionDataTask = opaque {
    pub const InternalInfo = objc.ExternalClass("NSURLSessionDataTask", @This(), URLSessionTask, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSURLSessionUploadTask?language=objc
pub const URLSessionUploadTask = opaque {
    pub const InternalInfo = objc.ExternalClass("NSURLSessionUploadTask", @This(), URLSessionDataTask, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn cancelByProducingResumeData(self: *@This(), completionHandler: *const fn(?*Data) callconv(.C) void) void {
        return objc.msgSend(self, "cancelByProducingResumeData:", void, .{completionHandler});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSURLSessionDownloadTask?language=objc
pub const URLSessionDownloadTask = opaque {
    pub const InternalInfo = objc.ExternalClass("NSURLSessionDownloadTask", @This(), URLSessionTask, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn cancelByProducingResumeData(self: *@This(), completionHandler: *const fn(?*Data) callconv(.C) void) void {
        return objc.msgSend(self, "cancelByProducingResumeData:", void, .{completionHandler});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSURLSessionStreamTask?language=objc
pub const URLSessionStreamTask = opaque {
    pub const InternalInfo = objc.ExternalClass("NSURLSessionStreamTask", @This(), URLSessionTask, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn readDataOfMinLengthMaxLengthTimeoutCompletionHandler(self: *@This(), minBytes: objc.NSUInteger, maxBytes: objc.NSUInteger, timeout: TimeInterval, completionHandler: *const fn(?*Data, objc.BOOL, ?*Error) callconv(.C) void, ) void {
        return objc.msgSend(self, "readDataOfMinLength:maxLength:timeout:completionHandler:", void, .{minBytes, maxBytes, timeout, completionHandler, });
    }

    pub fn writeDataTimeoutCompletionHandler(self: *@This(), data: ?*Data, timeout: TimeInterval, completionHandler: *const fn(?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "writeData:timeout:completionHandler:", void, .{data, timeout, completionHandler});
    }

    pub fn captureStreams(self: *@This()) void {
        return objc.msgSend(self, "captureStreams", void, .{});
    }

    pub fn closeWrite(self: *@This()) void {
        return objc.msgSend(self, "closeWrite", void, .{});
    }

    pub fn closeRead(self: *@This()) void {
        return objc.msgSend(self, "closeRead", void, .{});
    }

    pub fn startSecureConnection(self: *@This()) void {
        return objc.msgSend(self, "startSecureConnection", void, .{});
    }

    pub fn stopSecureConnection(self: *@This()) void {
        return objc.msgSend(self, "stopSecureConnection", void, .{});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

};

pub const URLSessionWebSocketMessageType = enum(objc.NSInteger) {
    Data = 0,
    String = 1,
};

/// https://developer.apple.com/documentation/Foundation/NSURLSessionWebSocketMessage?language=objc
pub const URLSessionWebSocketMessage = opaque {
    pub const InternalInfo = objc.ExternalClass("NSURLSessionWebSocketMessage", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithData(self: *@This(), data: ?*Data) *@This() {
        return objc.msgSend(self, "initWithData:", *@This(), .{data});
    }

    pub fn initWithString(self: *@This(), string: ?*String) *@This() {
        return objc.msgSend(self, "initWithString:", *@This(), .{string});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn @"type"(self: *@This()) URLSessionWebSocketMessageType {
        return objc.msgSend(self, "type", URLSessionWebSocketMessageType, .{});
    }

    pub fn data(self: *@This()) ?*Data {
        return objc.msgSend(self, "data", ?*Data, .{});
    }

    pub fn string(self: *@This()) ?*String {
        return objc.msgSend(self, "string", ?*String, .{});
    }

};

pub const URLSessionWebSocketCloseCode = enum(objc.NSInteger) {
    Invalid = 0,
    NormalClosure = 1000,
    GoingAway = 1001,
    ProtocolError = 1002,
    UnsupportedData = 1003,
    NoStatusReceived = 1005,
    AbnormalClosure = 1006,
    InvalidFramePayloadData = 1007,
    PolicyViolation = 1008,
    MessageTooBig = 1009,
    MandatoryExtensionMissing = 1010,
    InternalServerError = 1011,
    TLSHandshakeFailure = 1015,
};

/// https://developer.apple.com/documentation/Foundation/NSURLSessionWebSocketTask?language=objc
pub const URLSessionWebSocketTask = opaque {
    pub const InternalInfo = objc.ExternalClass("NSURLSessionWebSocketTask", @This(), URLSessionTask, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn sendMessageCompletionHandler(self: *@This(), message: ?*URLSessionWebSocketMessage, completionHandler: *const fn(?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "sendMessage:completionHandler:", void, .{message, completionHandler});
    }

    pub fn receiveMessageWithCompletionHandler(self: *@This(), completionHandler: *const fn(?*URLSessionWebSocketMessage, ?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "receiveMessageWithCompletionHandler:", void, .{completionHandler});
    }

    pub fn sendPingWithPongReceiveHandler(self: *@This(), pongReceiveHandler: *const fn(?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "sendPingWithPongReceiveHandler:", void, .{pongReceiveHandler});
    }

    pub fn cancelWithCloseCodeReason(self: *@This(), closeCode: URLSessionWebSocketCloseCode, reason: ?*Data) void {
        return objc.msgSend(self, "cancelWithCloseCode:reason:", void, .{closeCode, reason});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn maximumMessageSize(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "maximumMessageSize", objc.NSInteger, .{});
    }

    pub fn setMaximumMessageSize(self: *@This(), maximumMessageSize: objc.NSInteger) void {
        return objc.msgSend(self, "setMaximumMessageSize:", void, .{maximumMessageSize});
    }

    pub fn closeCode(self: *@This()) URLSessionWebSocketCloseCode {
        return objc.msgSend(self, "closeCode", URLSessionWebSocketCloseCode, .{});
    }

    pub fn closeReason(self: *@This()) ?*Data {
        return objc.msgSend(self, "closeReason", ?*Data, .{});
    }

};

pub const URLSessionMultipathServiceType = enum(objc.NSInteger) {
    None = 0,
    Handover = 1,
    Interactive = 2,
    Aggregate = 3,
};

/// https://developer.apple.com/documentation/Foundation/NSURLSessionConfiguration?language=objc
pub const URLSessionConfiguration = opaque {
    pub const InternalInfo = objc.ExternalClass("NSURLSessionConfiguration", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn backgroundSessionConfigurationWithIdentifier(self: *@This(), identifier: ?*String) ?*URLSessionConfiguration {
        return objc.msgSend(self, "backgroundSessionConfigurationWithIdentifier:", ?*URLSessionConfiguration, .{identifier});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn defaultSessionConfiguration(self: *@This()) ?*URLSessionConfiguration {
        return objc.msgSend(self, "defaultSessionConfiguration", ?*URLSessionConfiguration, .{});
    }

    pub fn ephemeralSessionConfiguration(self: *@This()) ?*URLSessionConfiguration {
        return objc.msgSend(self, "ephemeralSessionConfiguration", ?*URLSessionConfiguration, .{});
    }

    pub fn identifier(self: *@This()) ?*String {
        return objc.msgSend(self, "identifier", ?*String, .{});
    }

    pub fn requestCachePolicy(self: *@This()) URLRequestCachePolicy {
        return objc.msgSend(self, "requestCachePolicy", URLRequestCachePolicy, .{});
    }

    pub fn setRequestCachePolicy(self: *@This(), requestCachePolicy: URLRequestCachePolicy) void {
        return objc.msgSend(self, "setRequestCachePolicy:", void, .{requestCachePolicy});
    }

    pub fn timeoutIntervalForRequest(self: *@This()) TimeInterval {
        return objc.msgSend(self, "timeoutIntervalForRequest", TimeInterval, .{});
    }

    pub fn setTimeoutIntervalForRequest(self: *@This(), timeoutIntervalForRequest: TimeInterval) void {
        return objc.msgSend(self, "setTimeoutIntervalForRequest:", void, .{timeoutIntervalForRequest});
    }

    pub fn timeoutIntervalForResource(self: *@This()) TimeInterval {
        return objc.msgSend(self, "timeoutIntervalForResource", TimeInterval, .{});
    }

    pub fn setTimeoutIntervalForResource(self: *@This(), timeoutIntervalForResource: TimeInterval) void {
        return objc.msgSend(self, "setTimeoutIntervalForResource:", void, .{timeoutIntervalForResource});
    }

    pub fn networkServiceType(self: *@This()) URLRequestNetworkServiceType {
        return objc.msgSend(self, "networkServiceType", URLRequestNetworkServiceType, .{});
    }

    pub fn setNetworkServiceType(self: *@This(), networkServiceType: URLRequestNetworkServiceType) void {
        return objc.msgSend(self, "setNetworkServiceType:", void, .{networkServiceType});
    }

    pub fn allowsCellularAccess(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsCellularAccess", objc.BOOL, .{});
    }

    pub fn setAllowsCellularAccess(self: *@This(), allowsCellularAccess: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsCellularAccess:", void, .{allowsCellularAccess});
    }

    pub fn allowsExpensiveNetworkAccess(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsExpensiveNetworkAccess", objc.BOOL, .{});
    }

    pub fn setAllowsExpensiveNetworkAccess(self: *@This(), allowsExpensiveNetworkAccess: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsExpensiveNetworkAccess:", void, .{allowsExpensiveNetworkAccess});
    }

    pub fn allowsConstrainedNetworkAccess(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsConstrainedNetworkAccess", objc.BOOL, .{});
    }

    pub fn setAllowsConstrainedNetworkAccess(self: *@This(), allowsConstrainedNetworkAccess: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsConstrainedNetworkAccess:", void, .{allowsConstrainedNetworkAccess});
    }

    pub fn requiresDNSSECValidation(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "requiresDNSSECValidation", objc.BOOL, .{});
    }

    pub fn setRequiresDNSSECValidation(self: *@This(), requiresDNSSECValidation: objc.BOOL) void {
        return objc.msgSend(self, "setRequiresDNSSECValidation:", void, .{requiresDNSSECValidation});
    }

    pub fn waitsForConnectivity(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "waitsForConnectivity", objc.BOOL, .{});
    }

    pub fn setWaitsForConnectivity(self: *@This(), waitsForConnectivity: objc.BOOL) void {
        return objc.msgSend(self, "setWaitsForConnectivity:", void, .{waitsForConnectivity});
    }

    pub fn isDiscretionary(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isDiscretionary", objc.BOOL, .{});
    }

    pub fn setDiscretionary(self: *@This(), discretionary: objc.BOOL) void {
        return objc.msgSend(self, "setDiscretionary:", void, .{discretionary});
    }

    pub fn sharedContainerIdentifier(self: *@This()) ?*String {
        return objc.msgSend(self, "sharedContainerIdentifier", ?*String, .{});
    }

    pub fn setSharedContainerIdentifier(self: *@This(), sharedContainerIdentifier: ?*String) void {
        return objc.msgSend(self, "setSharedContainerIdentifier:", void, .{sharedContainerIdentifier});
    }

    pub fn sessionSendsLaunchEvents(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "sessionSendsLaunchEvents", objc.BOOL, .{});
    }

    pub fn setSessionSendsLaunchEvents(self: *@This(), sessionSendsLaunchEvents: objc.BOOL) void {
        return objc.msgSend(self, "setSessionSendsLaunchEvents:", void, .{sessionSendsLaunchEvents});
    }

    pub fn connectionProxyDictionary(self: *@This()) ?*Dictionary {
        return objc.msgSend(self, "connectionProxyDictionary", ?*Dictionary, .{});
    }

    pub fn setConnectionProxyDictionary(self: *@This(), connectionProxyDictionary: ?*Dictionary) void {
        return objc.msgSend(self, "setConnectionProxyDictionary:", void, .{connectionProxyDictionary});
    }

    pub fn TLSMinimumSupportedProtocol(self: *@This()) security.SSLProtocol {
        return objc.msgSend(self, "TLSMinimumSupportedProtocol", security.SSLProtocol, .{});
    }

    pub fn setTLSMinimumSupportedProtocol(self: *@This(), TLSMinimumSupportedProtocol: security.SSLProtocol) void {
        return objc.msgSend(self, "setTLSMinimumSupportedProtocol:", void, .{TLSMinimumSupportedProtocol});
    }

    pub fn TLSMaximumSupportedProtocol(self: *@This()) security.SSLProtocol {
        return objc.msgSend(self, "TLSMaximumSupportedProtocol", security.SSLProtocol, .{});
    }

    pub fn setTLSMaximumSupportedProtocol(self: *@This(), TLSMaximumSupportedProtocol: security.SSLProtocol) void {
        return objc.msgSend(self, "setTLSMaximumSupportedProtocol:", void, .{TLSMaximumSupportedProtocol});
    }

    pub fn TLSMinimumSupportedProtocolVersion(self: *@This()) security.tls_protocol_version_t {
        return objc.msgSend(self, "TLSMinimumSupportedProtocolVersion", security.tls_protocol_version_t, .{});
    }

    pub fn setTLSMinimumSupportedProtocolVersion(self: *@This(), TLSMinimumSupportedProtocolVersion: security.tls_protocol_version_t) void {
        return objc.msgSend(self, "setTLSMinimumSupportedProtocolVersion:", void, .{TLSMinimumSupportedProtocolVersion});
    }

    pub fn TLSMaximumSupportedProtocolVersion(self: *@This()) security.tls_protocol_version_t {
        return objc.msgSend(self, "TLSMaximumSupportedProtocolVersion", security.tls_protocol_version_t, .{});
    }

    pub fn setTLSMaximumSupportedProtocolVersion(self: *@This(), TLSMaximumSupportedProtocolVersion: security.tls_protocol_version_t) void {
        return objc.msgSend(self, "setTLSMaximumSupportedProtocolVersion:", void, .{TLSMaximumSupportedProtocolVersion});
    }

    pub fn HTTPShouldUsePipelining(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "HTTPShouldUsePipelining", objc.BOOL, .{});
    }

    pub fn setHTTPShouldUsePipelining(self: *@This(), HTTPShouldUsePipelining: objc.BOOL) void {
        return objc.msgSend(self, "setHTTPShouldUsePipelining:", void, .{HTTPShouldUsePipelining});
    }

    pub fn HTTPShouldSetCookies(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "HTTPShouldSetCookies", objc.BOOL, .{});
    }

    pub fn setHTTPShouldSetCookies(self: *@This(), HTTPShouldSetCookies: objc.BOOL) void {
        return objc.msgSend(self, "setHTTPShouldSetCookies:", void, .{HTTPShouldSetCookies});
    }

    pub fn HTTPCookieAcceptPolicy(self: *@This()) HTTPCookieAcceptPolicy {
        return objc.msgSend(self, "HTTPCookieAcceptPolicy", HTTPCookieAcceptPolicy, .{});
    }

    pub fn setHTTPCookieAcceptPolicy(self: *@This(), HTTPCookieAcceptPolicy: HTTPCookieAcceptPolicy) void {
        return objc.msgSend(self, "setHTTPCookieAcceptPolicy:", void, .{HTTPCookieAcceptPolicy});
    }

    pub fn HTTPAdditionalHeaders(self: *@This()) ?*Dictionary {
        return objc.msgSend(self, "HTTPAdditionalHeaders", ?*Dictionary, .{});
    }

    pub fn setHTTPAdditionalHeaders(self: *@This(), HTTPAdditionalHeaders: ?*Dictionary) void {
        return objc.msgSend(self, "setHTTPAdditionalHeaders:", void, .{HTTPAdditionalHeaders});
    }

    pub fn HTTPMaximumConnectionsPerHost(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "HTTPMaximumConnectionsPerHost", objc.NSInteger, .{});
    }

    pub fn setHTTPMaximumConnectionsPerHost(self: *@This(), HTTPMaximumConnectionsPerHost: objc.NSInteger) void {
        return objc.msgSend(self, "setHTTPMaximumConnectionsPerHost:", void, .{HTTPMaximumConnectionsPerHost});
    }

    pub fn HTTPCookieStorage(self: *@This()) ?*HTTPCookieStorage {
        return objc.msgSend(self, "HTTPCookieStorage", ?*HTTPCookieStorage, .{});
    }

    pub fn setHTTPCookieStorage(self: *@This(), HTTPCookieStorage: ?*HTTPCookieStorage) void {
        return objc.msgSend(self, "setHTTPCookieStorage:", void, .{HTTPCookieStorage});
    }

    pub fn URLCredentialStorage(self: *@This()) ?*URLCredentialStorage {
        return objc.msgSend(self, "URLCredentialStorage", ?*URLCredentialStorage, .{});
    }

    pub fn setURLCredentialStorage(self: *@This(), URLCredentialStorage: ?*URLCredentialStorage) void {
        return objc.msgSend(self, "setURLCredentialStorage:", void, .{URLCredentialStorage});
    }

    pub fn URLCache(self: *@This()) ?*URLCache {
        return objc.msgSend(self, "URLCache", ?*URLCache, .{});
    }

    pub fn setURLCache(self: *@This(), URLCache: ?*URLCache) void {
        return objc.msgSend(self, "setURLCache:", void, .{URLCache});
    }

    pub fn shouldUseExtendedBackgroundIdleMode(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "shouldUseExtendedBackgroundIdleMode", objc.BOOL, .{});
    }

    pub fn setShouldUseExtendedBackgroundIdleMode(self: *@This(), shouldUseExtendedBackgroundIdleMode: objc.BOOL) void {
        return objc.msgSend(self, "setShouldUseExtendedBackgroundIdleMode:", void, .{shouldUseExtendedBackgroundIdleMode});
    }

    pub fn protocolClasses(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "protocolClasses", ?*anyopaque, .{});
    }

    pub fn setProtocolClasses(self: *@This(), protocolClasses: ?*anyopaque) void {
        return objc.msgSend(self, "setProtocolClasses:", void, .{protocolClasses});
    }

    pub fn multipathServiceType(self: *@This()) URLSessionMultipathServiceType {
        return objc.msgSend(self, "multipathServiceType", URLSessionMultipathServiceType, .{});
    }

    pub fn setMultipathServiceType(self: *@This(), multipathServiceType: URLSessionMultipathServiceType) void {
        return objc.msgSend(self, "setMultipathServiceType:", void, .{multipathServiceType});
    }

};

pub const URLSessionDelayedRequestDisposition = enum(objc.NSInteger) {
    ContinueLoading = 0,
    UseNewRequest = 1,
    Cancel = 2,
};

pub const URLSessionAuthChallengeDisposition = enum(objc.NSInteger) {
    UseCredential = 0,
    PerformDefaultHandling = 1,
    CancelAuthenticationChallenge = 2,
    RejectProtectionSpace = 3,
};

pub const URLSessionResponseDisposition = enum(objc.NSInteger) {
    Cancel = 0,
    Allow = 1,
    BecomeDownload = 2,
    BecomeStream = 3,
};

/// https://developer.apple.com/documentation/Foundation/NSURLSessionDelegate?language=objc
pub const URLSessionDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn URLSessionDidBecomeInvalidWithError(self: *@This(), session: ?*URLSession, @"error": ?*Error) void {
        return objc.msgSend(self, "URLSession:didBecomeInvalidWithError:", void, .{session, @"error"});
    }

    pub fn URLSessionDidReceiveChallengeCompletionHandler(self: *@This(), session: ?*URLSession, challenge: ?*URLAuthenticationChallenge, completionHandler: *const fn(URLSessionAuthChallengeDisposition, ?*URLCredential) callconv(.C) void) void {
        return objc.msgSend(self, "URLSession:didReceiveChallenge:completionHandler:", void, .{session, challenge, completionHandler});
    }

    pub fn URLSessionDidFinishEventsForBackgroundURLSession(self: *@This(), session: ?*URLSession) void {
        return objc.msgSend(self, "URLSessionDidFinishEventsForBackgroundURLSession:", void, .{session});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSURLSessionTaskDelegate?language=objc
pub const URLSessionTaskDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{URLSessionDelegate, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn URLSessionDidCreateTask(self: *@This(), session: ?*URLSession, task: ?*URLSessionTask) void {
        return objc.msgSend(self, "URLSession:didCreateTask:", void, .{session, task});
    }

    pub fn URLSessionTaskWillBeginDelayedRequestCompletionHandler(self: *@This(), session: ?*URLSession, task: ?*URLSessionTask, request: ?*URLRequest, completionHandler: *const fn(URLSessionDelayedRequestDisposition, ?*URLRequest) callconv(.C) void, ) void {
        return objc.msgSend(self, "URLSession:task:willBeginDelayedRequest:completionHandler:", void, .{session, task, request, completionHandler, });
    }

    pub fn URLSessionTaskIsWaitingForConnectivity(self: *@This(), session: ?*URLSession, task: ?*URLSessionTask) void {
        return objc.msgSend(self, "URLSession:taskIsWaitingForConnectivity:", void, .{session, task});
    }

    pub fn URLSessionTaskWillPerformHTTPRedirectionNewRequestCompletionHandler(self: *@This(), session: ?*URLSession, task: ?*URLSessionTask, response: ?*HTTPURLResponse, request: ?*URLRequest, completionHandler: *const fn(?*URLRequest) callconv(.C) void, ) void {
        return objc.msgSend(self, "URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:", void, .{session, task, response, request, completionHandler, });
    }

    pub fn URLSessionTaskDidReceiveChallengeCompletionHandler(self: *@This(), session: ?*URLSession, task: ?*URLSessionTask, challenge: ?*URLAuthenticationChallenge, completionHandler: *const fn(URLSessionAuthChallengeDisposition, ?*URLCredential) callconv(.C) void, ) void {
        return objc.msgSend(self, "URLSession:task:didReceiveChallenge:completionHandler:", void, .{session, task, challenge, completionHandler, });
    }

    pub fn URLSessionTaskNeedNewBodyStream(self: *@This(), session: ?*URLSession, task: ?*URLSessionTask, completionHandler: *const fn(?*InputStream) callconv(.C) void) void {
        return objc.msgSend(self, "URLSession:task:needNewBodyStream:", void, .{session, task, completionHandler});
    }

    pub fn URLSessionTaskNeedNewBodyStreamFromOffsetCompletionHandler(self: *@This(), session: ?*URLSession, task: ?*URLSessionTask, offset: objc.int64_t, completionHandler: *const fn(?*InputStream) callconv(.C) void, ) void {
        return objc.msgSend(self, "URLSession:task:needNewBodyStreamFromOffset:completionHandler:", void, .{session, task, offset, completionHandler, });
    }

    pub fn URLSessionTaskDidSendBodyDataTotalBytesSentTotalBytesExpectedToSend(self: *@This(), session: ?*URLSession, task: ?*URLSessionTask, bytesSent: objc.int64_t, totalBytesSent: objc.int64_t, totalBytesExpectedToSend: objc.int64_t, ) void {
        return objc.msgSend(self, "URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:", void, .{session, task, bytesSent, totalBytesSent, totalBytesExpectedToSend, });
    }

    pub fn URLSessionTaskDidReceiveInformationalResponse(self: *@This(), session: ?*URLSession, task: ?*URLSessionTask, response: ?*HTTPURLResponse) void {
        return objc.msgSend(self, "URLSession:task:didReceiveInformationalResponse:", void, .{session, task, response});
    }

    pub fn URLSessionTaskDidFinishCollectingMetrics(self: *@This(), session: ?*URLSession, task: ?*URLSessionTask, metrics: ?*URLSessionTaskMetrics) void {
        return objc.msgSend(self, "URLSession:task:didFinishCollectingMetrics:", void, .{session, task, metrics});
    }

    pub fn URLSessionTaskDidCompleteWithError(self: *@This(), session: ?*URLSession, task: ?*URLSessionTask, @"error": ?*Error) void {
        return objc.msgSend(self, "URLSession:task:didCompleteWithError:", void, .{session, task, @"error"});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSURLSessionDataDelegate?language=objc
pub const URLSessionDataDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{URLSessionTaskDelegate, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn URLSessionDataTaskDidReceiveResponseCompletionHandler(self: *@This(), session: ?*URLSession, dataTask: ?*URLSessionDataTask, response: ?*URLResponse, completionHandler: *const fn(URLSessionResponseDisposition) callconv(.C) void, ) void {
        return objc.msgSend(self, "URLSession:dataTask:didReceiveResponse:completionHandler:", void, .{session, dataTask, response, completionHandler, });
    }

    pub fn URLSessionDataTaskDidBecomeDownloadTask(self: *@This(), session: ?*URLSession, dataTask: ?*URLSessionDataTask, downloadTask: ?*URLSessionDownloadTask) void {
        return objc.msgSend(self, "URLSession:dataTask:didBecomeDownloadTask:", void, .{session, dataTask, downloadTask});
    }

    pub fn URLSessionDataTaskDidBecomeStreamTask(self: *@This(), session: ?*URLSession, dataTask: ?*URLSessionDataTask, streamTask: ?*URLSessionStreamTask) void {
        return objc.msgSend(self, "URLSession:dataTask:didBecomeStreamTask:", void, .{session, dataTask, streamTask});
    }

    pub fn URLSessionDataTaskDidReceiveData(self: *@This(), session: ?*URLSession, dataTask: ?*URLSessionDataTask, data: ?*Data) void {
        return objc.msgSend(self, "URLSession:dataTask:didReceiveData:", void, .{session, dataTask, data});
    }

    pub fn URLSessionDataTaskWillCacheResponseCompletionHandler(self: *@This(), session: ?*URLSession, dataTask: ?*URLSessionDataTask, proposedResponse: ?*CachedURLResponse, completionHandler: *const fn(?*CachedURLResponse) callconv(.C) void, ) void {
        return objc.msgSend(self, "URLSession:dataTask:willCacheResponse:completionHandler:", void, .{session, dataTask, proposedResponse, completionHandler, });
    }

};

/// https://developer.apple.com/documentation/Foundation/NSURLSessionDownloadDelegate?language=objc
pub const URLSessionDownloadDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{URLSessionTaskDelegate, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn URLSessionDownloadTaskDidFinishDownloadingToURL(self: *@This(), session: ?*URLSession, downloadTask: ?*URLSessionDownloadTask, location: ?*URL) void {
        return objc.msgSend(self, "URLSession:downloadTask:didFinishDownloadingToURL:", void, .{session, downloadTask, location});
    }

    pub fn URLSessionDownloadTaskDidWriteDataTotalBytesWrittenTotalBytesExpectedToWrite(self: *@This(), session: ?*URLSession, downloadTask: ?*URLSessionDownloadTask, bytesWritten: objc.int64_t, totalBytesWritten: objc.int64_t, totalBytesExpectedToWrite: objc.int64_t, ) void {
        return objc.msgSend(self, "URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:", void, .{session, downloadTask, bytesWritten, totalBytesWritten, totalBytesExpectedToWrite, });
    }

    pub fn URLSessionDownloadTaskDidResumeAtOffsetExpectedTotalBytes(self: *@This(), session: ?*URLSession, downloadTask: ?*URLSessionDownloadTask, fileOffset: objc.int64_t, expectedTotalBytes: objc.int64_t, ) void {
        return objc.msgSend(self, "URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:", void, .{session, downloadTask, fileOffset, expectedTotalBytes, });
    }

};

/// https://developer.apple.com/documentation/Foundation/NSURLSessionStreamDelegate?language=objc
pub const URLSessionStreamDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{URLSessionTaskDelegate, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn URLSessionReadClosedForStreamTask(self: *@This(), session: ?*URLSession, streamTask: ?*URLSessionStreamTask) void {
        return objc.msgSend(self, "URLSession:readClosedForStreamTask:", void, .{session, streamTask});
    }

    pub fn URLSessionWriteClosedForStreamTask(self: *@This(), session: ?*URLSession, streamTask: ?*URLSessionStreamTask) void {
        return objc.msgSend(self, "URLSession:writeClosedForStreamTask:", void, .{session, streamTask});
    }

    pub fn URLSessionBetterRouteDiscoveredForStreamTask(self: *@This(), session: ?*URLSession, streamTask: ?*URLSessionStreamTask) void {
        return objc.msgSend(self, "URLSession:betterRouteDiscoveredForStreamTask:", void, .{session, streamTask});
    }

    pub fn URLSessionStreamTaskDidBecomeInputStreamOutputStream(self: *@This(), session: ?*URLSession, streamTask: ?*URLSessionStreamTask, inputStream: ?*InputStream, outputStream: ?*OutputStream, ) void {
        return objc.msgSend(self, "URLSession:streamTask:didBecomeInputStream:outputStream:", void, .{session, streamTask, inputStream, outputStream, });
    }

};

/// https://developer.apple.com/documentation/Foundation/NSURLSessionWebSocketDelegate?language=objc
pub const URLSessionWebSocketDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{URLSessionTaskDelegate, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn URLSessionWebSocketTaskDidOpenWithProtocol(self: *@This(), session: ?*URLSession, webSocketTask: ?*URLSessionWebSocketTask, protocol: ?*String) void {
        return objc.msgSend(self, "URLSession:webSocketTask:didOpenWithProtocol:", void, .{session, webSocketTask, protocol});
    }

    pub fn URLSessionWebSocketTaskDidCloseWithCodeReason(self: *@This(), session: ?*URLSession, webSocketTask: ?*URLSessionWebSocketTask, closeCode: URLSessionWebSocketCloseCode, reason: ?*Data, ) void {
        return objc.msgSend(self, "URLSession:webSocketTask:didCloseWithCode:reason:", void, .{session, webSocketTask, closeCode, reason, });
    }

};

pub const URLSessionTaskMetricsResourceFetchType = enum(objc.NSInteger) {
    Unknown = 0,
    NetworkLoad = 1,
    ServerPush = 2,
    LocalCache = 3,
};

pub const URLSessionTaskMetricsDomainResolutionProtocol = enum(objc.NSInteger) {
    Unknown = 0,
    UDP = 1,
    TCP = 2,
    TLS = 3,
    HTTPS = 4,
};

/// https://developer.apple.com/documentation/Foundation/NSURLSessionTaskTransactionMetrics?language=objc
pub const URLSessionTaskTransactionMetrics = opaque {
    pub const InternalInfo = objc.ExternalClass("NSURLSessionTaskTransactionMetrics", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn request(self: *@This()) ?*URLRequest {
        return objc.msgSend(self, "request", ?*URLRequest, .{});
    }

    pub fn response(self: *@This()) ?*URLResponse {
        return objc.msgSend(self, "response", ?*URLResponse, .{});
    }

    pub fn fetchStartDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "fetchStartDate", ?*Date, .{});
    }

    pub fn domainLookupStartDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "domainLookupStartDate", ?*Date, .{});
    }

    pub fn domainLookupEndDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "domainLookupEndDate", ?*Date, .{});
    }

    pub fn connectStartDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "connectStartDate", ?*Date, .{});
    }

    pub fn secureConnectionStartDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "secureConnectionStartDate", ?*Date, .{});
    }

    pub fn secureConnectionEndDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "secureConnectionEndDate", ?*Date, .{});
    }

    pub fn connectEndDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "connectEndDate", ?*Date, .{});
    }

    pub fn requestStartDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "requestStartDate", ?*Date, .{});
    }

    pub fn requestEndDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "requestEndDate", ?*Date, .{});
    }

    pub fn responseStartDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "responseStartDate", ?*Date, .{});
    }

    pub fn responseEndDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "responseEndDate", ?*Date, .{});
    }

    pub fn networkProtocolName(self: *@This()) ?*String {
        return objc.msgSend(self, "networkProtocolName", ?*String, .{});
    }

    pub fn isProxyConnection(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isProxyConnection", objc.BOOL, .{});
    }

    pub fn isReusedConnection(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isReusedConnection", objc.BOOL, .{});
    }

    pub fn resourceFetchType(self: *@This()) URLSessionTaskMetricsResourceFetchType {
        return objc.msgSend(self, "resourceFetchType", URLSessionTaskMetricsResourceFetchType, .{});
    }

    pub fn countOfRequestHeaderBytesSent(self: *@This()) objc.int64_t {
        return objc.msgSend(self, "countOfRequestHeaderBytesSent", objc.int64_t, .{});
    }

    pub fn countOfRequestBodyBytesSent(self: *@This()) objc.int64_t {
        return objc.msgSend(self, "countOfRequestBodyBytesSent", objc.int64_t, .{});
    }

    pub fn countOfRequestBodyBytesBeforeEncoding(self: *@This()) objc.int64_t {
        return objc.msgSend(self, "countOfRequestBodyBytesBeforeEncoding", objc.int64_t, .{});
    }

    pub fn countOfResponseHeaderBytesReceived(self: *@This()) objc.int64_t {
        return objc.msgSend(self, "countOfResponseHeaderBytesReceived", objc.int64_t, .{});
    }

    pub fn countOfResponseBodyBytesReceived(self: *@This()) objc.int64_t {
        return objc.msgSend(self, "countOfResponseBodyBytesReceived", objc.int64_t, .{});
    }

    pub fn countOfResponseBodyBytesAfterDecoding(self: *@This()) objc.int64_t {
        return objc.msgSend(self, "countOfResponseBodyBytesAfterDecoding", objc.int64_t, .{});
    }

    pub fn localAddress(self: *@This()) ?*String {
        return objc.msgSend(self, "localAddress", ?*String, .{});
    }

    pub fn localPort(self: *@This()) ?*Number {
        return objc.msgSend(self, "localPort", ?*Number, .{});
    }

    pub fn remoteAddress(self: *@This()) ?*String {
        return objc.msgSend(self, "remoteAddress", ?*String, .{});
    }

    pub fn remotePort(self: *@This()) ?*Number {
        return objc.msgSend(self, "remotePort", ?*Number, .{});
    }

    pub fn negotiatedTLSProtocolVersion(self: *@This()) ?*Number {
        return objc.msgSend(self, "negotiatedTLSProtocolVersion", ?*Number, .{});
    }

    pub fn negotiatedTLSCipherSuite(self: *@This()) ?*Number {
        return objc.msgSend(self, "negotiatedTLSCipherSuite", ?*Number, .{});
    }

    pub fn isCellular(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isCellular", objc.BOOL, .{});
    }

    pub fn isExpensive(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isExpensive", objc.BOOL, .{});
    }

    pub fn isConstrained(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isConstrained", objc.BOOL, .{});
    }

    pub fn isMultipath(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isMultipath", objc.BOOL, .{});
    }

    pub fn domainResolutionProtocol(self: *@This()) URLSessionTaskMetricsDomainResolutionProtocol {
        return objc.msgSend(self, "domainResolutionProtocol", URLSessionTaskMetricsDomainResolutionProtocol, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSURLSessionTaskMetrics?language=objc
pub const URLSessionTaskMetrics = opaque {
    pub const InternalInfo = objc.ExternalClass("NSURLSessionTaskMetrics", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn transactionMetrics(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "transactionMetrics", ?*anyopaque, .{});
    }

    pub fn taskInterval(self: *@This()) ?*DateInterval {
        return objc.msgSend(self, "taskInterval", ?*DateInterval, .{});
    }

    pub fn redirectCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "redirectCount", objc.NSUInteger, .{});
    }

};

pub const UserActivityPersistentIdentifier = ?*String;

/// https://developer.apple.com/documentation/Foundation/NSUserActivity?language=objc
pub const UserActivity = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUserActivity", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithActivityType(self: *@This(), activityType: ?*String) *@This() {
        return objc.msgSend(self, "initWithActivityType:", *@This(), .{activityType});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn addUserInfoEntriesFromDictionary(self: *@This(), otherDictionary: ?*Dictionary) void {
        return objc.msgSend(self, "addUserInfoEntriesFromDictionary:", void, .{otherDictionary});
    }

    pub fn becomeCurrent(self: *@This()) void {
        return objc.msgSend(self, "becomeCurrent", void, .{});
    }

    pub fn resignCurrent(self: *@This()) void {
        return objc.msgSend(self, "resignCurrent", void, .{});
    }

    pub fn invalidate(self: *@This()) void {
        return objc.msgSend(self, "invalidate", void, .{});
    }

    pub fn getContinuationStreamsWithCompletionHandler(self: *@This(), completionHandler: *const fn(?*InputStream, ?*OutputStream, ?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "getContinuationStreamsWithCompletionHandler:", void, .{completionHandler});
    }

    pub fn deleteSavedUserActivitiesWithPersistentIdentifiersCompletionHandler(self: *@This(), persistentIdentifiers: ?*anyopaque, handler: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "deleteSavedUserActivitiesWithPersistentIdentifiers:completionHandler:", void, .{persistentIdentifiers, handler});
    }

    pub fn deleteAllSavedUserActivitiesWithCompletionHandler(self: *@This(), handler: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "deleteAllSavedUserActivitiesWithCompletionHandler:", void, .{handler});
    }

    pub fn activityType(self: *@This()) ?*String {
        return objc.msgSend(self, "activityType", ?*String, .{});
    }

    pub fn title(self: *@This()) ?*String {
        return objc.msgSend(self, "title", ?*String, .{});
    }

    pub fn setTitle(self: *@This(), title: ?*String) void {
        return objc.msgSend(self, "setTitle:", void, .{title});
    }

    pub fn userInfo(self: *@This()) ?*Dictionary {
        return objc.msgSend(self, "userInfo", ?*Dictionary, .{});
    }

    pub fn setUserInfo(self: *@This(), userInfo: ?*Dictionary) void {
        return objc.msgSend(self, "setUserInfo:", void, .{userInfo});
    }

    pub fn requiredUserInfoKeys(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "requiredUserInfoKeys", ?*anyopaque, .{});
    }

    pub fn setRequiredUserInfoKeys(self: *@This(), requiredUserInfoKeys: ?*anyopaque) void {
        return objc.msgSend(self, "setRequiredUserInfoKeys:", void, .{requiredUserInfoKeys});
    }

    pub fn needsSave(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "needsSave", objc.BOOL, .{});
    }

    pub fn setNeedsSave(self: *@This(), needsSave: objc.BOOL) void {
        return objc.msgSend(self, "setNeedsSave:", void, .{needsSave});
    }

    pub fn webpageURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "webpageURL", ?*URL, .{});
    }

    pub fn setWebpageURL(self: *@This(), webpageURL: ?*URL) void {
        return objc.msgSend(self, "setWebpageURL:", void, .{webpageURL});
    }

    pub fn referrerURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "referrerURL", ?*URL, .{});
    }

    pub fn setReferrerURL(self: *@This(), referrerURL: ?*URL) void {
        return objc.msgSend(self, "setReferrerURL:", void, .{referrerURL});
    }

    pub fn expirationDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "expirationDate", ?*Date, .{});
    }

    pub fn setExpirationDate(self: *@This(), expirationDate: ?*Date) void {
        return objc.msgSend(self, "setExpirationDate:", void, .{expirationDate});
    }

    pub fn keywords(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "keywords", ?*anyopaque, .{});
    }

    pub fn setKeywords(self: *@This(), keywords: ?*anyopaque) void {
        return objc.msgSend(self, "setKeywords:", void, .{keywords});
    }

    pub fn supportsContinuationStreams(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportsContinuationStreams", objc.BOOL, .{});
    }

    pub fn setSupportsContinuationStreams(self: *@This(), supportsContinuationStreams: objc.BOOL) void {
        return objc.msgSend(self, "setSupportsContinuationStreams:", void, .{supportsContinuationStreams});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn targetContentIdentifier(self: *@This()) ?*String {
        return objc.msgSend(self, "targetContentIdentifier", ?*String, .{});
    }

    pub fn setTargetContentIdentifier(self: *@This(), targetContentIdentifier: ?*String) void {
        return objc.msgSend(self, "setTargetContentIdentifier:", void, .{targetContentIdentifier});
    }

    pub fn isEligibleForHandoff(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEligibleForHandoff", objc.BOOL, .{});
    }

    pub fn setEligibleForHandoff(self: *@This(), eligibleForHandoff: objc.BOOL) void {
        return objc.msgSend(self, "setEligibleForHandoff:", void, .{eligibleForHandoff});
    }

    pub fn isEligibleForSearch(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEligibleForSearch", objc.BOOL, .{});
    }

    pub fn setEligibleForSearch(self: *@This(), eligibleForSearch: objc.BOOL) void {
        return objc.msgSend(self, "setEligibleForSearch:", void, .{eligibleForSearch});
    }

    pub fn isEligibleForPublicIndexing(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEligibleForPublicIndexing", objc.BOOL, .{});
    }

    pub fn setEligibleForPublicIndexing(self: *@This(), eligibleForPublicIndexing: objc.BOOL) void {
        return objc.msgSend(self, "setEligibleForPublicIndexing:", void, .{eligibleForPublicIndexing});
    }

    pub fn isEligibleForPrediction(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEligibleForPrediction", objc.BOOL, .{});
    }

    pub fn setEligibleForPrediction(self: *@This(), eligibleForPrediction: objc.BOOL) void {
        return objc.msgSend(self, "setEligibleForPrediction:", void, .{eligibleForPrediction});
    }

    pub fn persistentIdentifier(self: *@This()) UserActivityPersistentIdentifier {
        return objc.msgSend(self, "persistentIdentifier", UserActivityPersistentIdentifier, .{});
    }

    pub fn setPersistentIdentifier(self: *@This(), persistentIdentifier: UserActivityPersistentIdentifier) void {
        return objc.msgSend(self, "setPersistentIdentifier:", void, .{persistentIdentifier});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUserActivityDelegate?language=objc
pub const UserActivityDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn userActivityWillSave(self: *@This(), userActivity: ?*UserActivity) void {
        return objc.msgSend(self, "userActivityWillSave:", void, .{userActivity});
    }

    pub fn userActivityWasContinued(self: *@This(), userActivity: ?*UserActivity) void {
        return objc.msgSend(self, "userActivityWasContinued:", void, .{userActivity});
    }

    pub fn userActivityDidReceiveInputStreamOutputStream(self: *@This(), userActivity: ?*UserActivity, inputStream: ?*InputStream, outputStream: ?*OutputStream) void {
        return objc.msgSend(self, "userActivity:didReceiveInputStream:outputStream:", void, .{userActivity, inputStream, outputStream});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUUID?language=objc
pub const UUID = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUUID", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn UUID(self: *@This()) *@This() {
        return objc.msgSend(self, "UUID", *@This(), .{});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithUUIDString(self: *@This(), string: ?*String) *@This() {
        return objc.msgSend(self, "initWithUUIDString:", *@This(), .{string});
    }

    pub fn initWithUUIDBytes(self: *@This(), bytes: ?*u8) *@This() {
        return objc.msgSend(self, "initWithUUIDBytes:", *@This(), .{bytes});
    }

    pub fn getUUIDBytes(self: *@This(), uuid: ?*u8) void {
        return objc.msgSend(self, "getUUIDBytes:", void, .{uuid});
    }

    pub fn compare(self: *@This(), otherUUID: ?*UUID) ComparisonResult {
        return objc.msgSend(self, "compare:", ComparisonResult, .{otherUUID});
    }

    pub fn UUIDString(self: *@This()) ?*String {
        return objc.msgSend(self, "UUIDString", ?*String, .{});
    }

};

pub const AffineTransformStruct = extern struct {
    m11: core_foundation.CGFloat,
    m12: core_foundation.CGFloat,
    m21: core_foundation.CGFloat,
    m22: core_foundation.CGFloat,
    tX: core_foundation.CGFloat,
    tY: core_foundation.CGFloat,
};

/// https://developer.apple.com/documentation/Foundation/NSAffineTransform?language=objc
pub const AffineTransform = opaque {
    pub const InternalInfo = objc.ExternalClass("NSAffineTransform", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn transform(self: *@This()) ?*AffineTransform {
        return objc.msgSend(self, "transform", ?*AffineTransform, .{});
    }

    pub fn initWithTransform(self: *@This(), transform: ?*AffineTransform) *@This() {
        return objc.msgSend(self, "initWithTransform:", *@This(), .{transform});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn translateXByYBy(self: *@This(), deltaX: core_foundation.CGFloat, deltaY: core_foundation.CGFloat) void {
        return objc.msgSend(self, "translateXBy:yBy:", void, .{deltaX, deltaY});
    }

    pub fn rotateByDegrees(self: *@This(), angle: core_foundation.CGFloat) void {
        return objc.msgSend(self, "rotateByDegrees:", void, .{angle});
    }

    pub fn rotateByRadians(self: *@This(), angle: core_foundation.CGFloat) void {
        return objc.msgSend(self, "rotateByRadians:", void, .{angle});
    }

    pub fn scaleBy(self: *@This(), scale: core_foundation.CGFloat) void {
        return objc.msgSend(self, "scaleBy:", void, .{scale});
    }

    pub fn scaleXByYBy(self: *@This(), scaleX: core_foundation.CGFloat, scaleY: core_foundation.CGFloat) void {
        return objc.msgSend(self, "scaleXBy:yBy:", void, .{scaleX, scaleY});
    }

    pub fn invert(self: *@This()) void {
        return objc.msgSend(self, "invert", void, .{});
    }

    pub fn appendTransform(self: *@This(), transform: ?*AffineTransform) void {
        return objc.msgSend(self, "appendTransform:", void, .{transform});
    }

    pub fn prependTransform(self: *@This(), transform: ?*AffineTransform) void {
        return objc.msgSend(self, "prependTransform:", void, .{transform});
    }

    pub fn transformPoint(self: *@This(), aPoint: Point) Point {
        return objc.msgSend(self, "transformPoint:", Point, .{aPoint});
    }

    pub fn transformSize(self: *@This(), aSize: Size) Size {
        return objc.msgSend(self, "transformSize:", Size, .{aSize});
    }

    pub fn transformStruct(self: *@This()) AffineTransformStruct {
        return objc.msgSend(self, "transformStruct", AffineTransformStruct, .{});
    }

    pub fn setTransformStruct(self: *@This(), transformStruct: AffineTransformStruct) void {
        return objc.msgSend(self, "setTransformStruct:", void, .{transformStruct});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSAppleScript?language=objc
pub const AppleScript = opaque {
    pub const InternalInfo = objc.ExternalClass("NSAppleScript", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithContentsOfURLError(self: *@This(), url: ?*URL, errorInfo: ?*?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithContentsOfURL:error:", *@This(), .{url, errorInfo});
    }

    pub fn initWithSource(self: *@This(), source: ?*String) *@This() {
        return objc.msgSend(self, "initWithSource:", *@This(), .{source});
    }

    pub fn compileAndReturnError(self: *@This(), errorInfo: ?*?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "compileAndReturnError:", objc.BOOL, .{errorInfo});
    }

    pub fn executeAndReturnError(self: *@This(), errorInfo: ?*?*anyopaque) ?*AppleEventDescriptor {
        return objc.msgSend(self, "executeAndReturnError:", ?*AppleEventDescriptor, .{errorInfo});
    }

    pub fn executeAppleEventError(self: *@This(), event: ?*AppleEventDescriptor, errorInfo: ?*?*anyopaque) ?*AppleEventDescriptor {
        return objc.msgSend(self, "executeAppleEvent:error:", ?*AppleEventDescriptor, .{event, errorInfo});
    }

    pub fn source(self: *@This()) ?*String {
        return objc.msgSend(self, "source", ?*String, .{});
    }

    pub fn isCompiled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isCompiled", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSArchiver?language=objc
pub const Archiver = opaque {
    pub const InternalInfo = objc.ExternalClass("NSArchiver", @This(), Coder, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initForWritingWithMutableData(self: *@This(), mdata: ?*MutableData) *@This() {
        return objc.msgSend(self, "initForWritingWithMutableData:", *@This(), .{mdata});
    }

    pub fn encodeRootObject(self: *@This(), rootObject: *objc.Id) void {
        return objc.msgSend(self, "encodeRootObject:", void, .{rootObject});
    }

    pub fn encodeConditionalObject(self: *@This(), object: *objc.Id) void {
        return objc.msgSend(self, "encodeConditionalObject:", void, .{object});
    }

    pub fn archivedDataWithRootObject(self: *@This(), rootObject: *objc.Id) ?*Data {
        return objc.msgSend(self, "archivedDataWithRootObject:", ?*Data, .{rootObject});
    }

    pub fn archiveRootObjectToFile(self: *@This(), rootObject: *objc.Id, path: ?*String) objc.BOOL {
        return objc.msgSend(self, "archiveRootObject:toFile:", objc.BOOL, .{rootObject, path});
    }

    pub fn encodeClassNameIntoClassName(self: *@This(), trueName: ?*String, inArchiveName: ?*String) void {
        return objc.msgSend(self, "encodeClassName:intoClassName:", void, .{trueName, inArchiveName});
    }

    pub fn classNameEncodedForTrueClassName(self: *@This(), trueName: ?*String) ?*String {
        return objc.msgSend(self, "classNameEncodedForTrueClassName:", ?*String, .{trueName});
    }

    pub fn replaceObjectWithObject(self: *@This(), object: *objc.Id, newObject: *objc.Id) void {
        return objc.msgSend(self, "replaceObject:withObject:", void, .{object, newObject});
    }

    pub fn archiverData(self: *@This()) ?*MutableData {
        return objc.msgSend(self, "archiverData", ?*MutableData, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUnarchiver?language=objc
pub const Unarchiver = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUnarchiver", @This(), Coder, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initForReadingWithData(self: *@This(), data: ?*Data) *@This() {
        return objc.msgSend(self, "initForReadingWithData:", *@This(), .{data});
    }

    pub fn setObjectZone(self: *@This(), zone: ?*Zone) void {
        return objc.msgSend(self, "setObjectZone:", void, .{zone});
    }

    pub fn objectZone(self: *@This()) ?*Zone {
        return objc.msgSend(self, "objectZone", ?*Zone, .{});
    }

    pub fn unarchiveObjectWithData(self: *@This(), data: ?*Data) *objc.Id {
        return objc.msgSend(self, "unarchiveObjectWithData:", *objc.Id, .{data});
    }

    pub fn unarchiveObjectWithFile(self: *@This(), path: ?*String) *objc.Id {
        return objc.msgSend(self, "unarchiveObjectWithFile:", *objc.Id, .{path});
    }

    pub fn decodeClassNameAsClassName(self: *@This(), inArchiveName: ?*String, trueName: ?*String) void {
        return objc.msgSend(self, "decodeClassName:asClassName:", void, .{inArchiveName, trueName});
    }

    pub fn decodeClassNameAsClassName(self: *@This(), inArchiveName: ?*String, trueName: ?*String) void {
        return objc.msgSend(self, "decodeClassName:asClassName:", void, .{inArchiveName, trueName});
    }

    pub fn classNameDecodedForArchiveClassName(self: *@This(), inArchiveName: ?*String) ?*String {
        return objc.msgSend(self, "classNameDecodedForArchiveClassName:", ?*String, .{inArchiveName});
    }

    pub fn classNameDecodedForArchiveClassName(self: *@This(), inArchiveName: ?*String) ?*String {
        return objc.msgSend(self, "classNameDecodedForArchiveClassName:", ?*String, .{inArchiveName});
    }

    pub fn replaceObjectWithObject(self: *@This(), object: *objc.Id, newObject: *objc.Id) void {
        return objc.msgSend(self, "replaceObject:withObject:", void, .{object, newObject});
    }

    pub fn isAtEnd(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAtEnd", objc.BOOL, .{});
    }

    pub fn systemVersion(self: *@This()) u32 {
        return objc.msgSend(self, "systemVersion", u32, .{});
    }

};

pub const BackgroundActivityResult = enum(objc.NSInteger) {
    Finished = 1,
    Deferred = 2,
};

pub const BackgroundActivityCompletionHandler = *const fn(BackgroundActivityResult) callconv(.C) void;

/// https://developer.apple.com/documentation/Foundation/NSBackgroundActivityScheduler?language=objc
pub const BackgroundActivityScheduler = opaque {
    pub const InternalInfo = objc.ExternalClass("NSBackgroundActivityScheduler", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithIdentifier(self: *@This(), identifier: ?*String) *@This() {
        return objc.msgSend(self, "initWithIdentifier:", *@This(), .{identifier});
    }

    pub fn scheduleWithBlock(self: *@This(), block: *const fn(BackgroundActivityCompletionHandler) callconv(.C) void) void {
        return objc.msgSend(self, "scheduleWithBlock:", void, .{block});
    }

    pub fn invalidate(self: *@This()) void {
        return objc.msgSend(self, "invalidate", void, .{});
    }

    pub fn identifier(self: *@This()) ?*String {
        return objc.msgSend(self, "identifier", ?*String, .{});
    }

    pub fn qualityOfService(self: *@This()) QualityOfService {
        return objc.msgSend(self, "qualityOfService", QualityOfService, .{});
    }

    pub fn setQualityOfService(self: *@This(), qualityOfService: QualityOfService) void {
        return objc.msgSend(self, "setQualityOfService:", void, .{qualityOfService});
    }

    pub fn repeats(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "repeats", objc.BOOL, .{});
    }

    pub fn setRepeats(self: *@This(), repeats: objc.BOOL) void {
        return objc.msgSend(self, "setRepeats:", void, .{repeats});
    }

    pub fn interval(self: *@This()) TimeInterval {
        return objc.msgSend(self, "interval", TimeInterval, .{});
    }

    pub fn setInterval(self: *@This(), interval: TimeInterval) void {
        return objc.msgSend(self, "setInterval:", void, .{interval});
    }

    pub fn tolerance(self: *@This()) TimeInterval {
        return objc.msgSend(self, "tolerance", TimeInterval, .{});
    }

    pub fn setTolerance(self: *@This(), tolerance: TimeInterval) void {
        return objc.msgSend(self, "setTolerance:", void, .{tolerance});
    }

    pub fn shouldDefer(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "shouldDefer", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSCalendarDate?language=objc
pub const CalendarDate = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCalendarDate", @This(), Date, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn calendarDate(self: *@This()) *objc.Id {
        return objc.msgSend(self, "calendarDate", *objc.Id, .{});
    }

    pub fn dateWithStringCalendarFormatLocale(self: *@This(), description: ?*String, format: ?*String, locale: *objc.Id) *objc.Id {
        return objc.msgSend(self, "dateWithString:calendarFormat:locale:", *objc.Id, .{description, format, locale});
    }

    pub fn dateWithStringCalendarFormat(self: *@This(), description: ?*String, format: ?*String) *objc.Id {
        return objc.msgSend(self, "dateWithString:calendarFormat:", *objc.Id, .{description, format});
    }

    pub fn dateWithYearMonthDayHourMinuteSecondTimeZone(self: *@This(), year: objc.NSInteger, month: objc.NSUInteger, day: objc.NSUInteger, hour: objc.NSUInteger, minute: objc.NSUInteger, second: objc.NSUInteger, aTimeZone: ?*TimeZone, ) *objc.Id {
        return objc.msgSend(self, "dateWithYear:month:day:hour:minute:second:timeZone:", *objc.Id, .{year, month, day, hour, minute, second, aTimeZone, });
    }

    pub fn dateByAddingYearsMonthsDaysHoursMinutesSeconds(self: *@This(), year: objc.NSInteger, month: objc.NSInteger, day: objc.NSInteger, hour: objc.NSInteger, minute: objc.NSInteger, second: objc.NSInteger, ) ?*CalendarDate {
        return objc.msgSend(self, "dateByAddingYears:months:days:hours:minutes:seconds:", ?*CalendarDate, .{year, month, day, hour, minute, second, });
    }

    pub fn dayOfCommonEra(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "dayOfCommonEra", objc.NSInteger, .{});
    }

    pub fn dayOfMonth(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "dayOfMonth", objc.NSInteger, .{});
    }

    pub fn dayOfWeek(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "dayOfWeek", objc.NSInteger, .{});
    }

    pub fn dayOfYear(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "dayOfYear", objc.NSInteger, .{});
    }

    pub fn hourOfDay(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "hourOfDay", objc.NSInteger, .{});
    }

    pub fn minuteOfHour(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "minuteOfHour", objc.NSInteger, .{});
    }

    pub fn monthOfYear(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "monthOfYear", objc.NSInteger, .{});
    }

    pub fn secondOfMinute(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "secondOfMinute", objc.NSInteger, .{});
    }

    pub fn yearOfCommonEra(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "yearOfCommonEra", objc.NSInteger, .{});
    }

    pub fn calendarFormat(self: *@This()) ?*String {
        return objc.msgSend(self, "calendarFormat", ?*String, .{});
    }

    pub fn descriptionWithCalendarFormatLocale(self: *@This(), format: ?*String, locale: *objc.Id) ?*String {
        return objc.msgSend(self, "descriptionWithCalendarFormat:locale:", ?*String, .{format, locale});
    }

    pub fn descriptionWithCalendarFormat(self: *@This(), format: ?*String) ?*String {
        return objc.msgSend(self, "descriptionWithCalendarFormat:", ?*String, .{format});
    }

    pub fn descriptionWithLocale(self: *@This(), locale: *objc.Id) ?*String {
        return objc.msgSend(self, "descriptionWithLocale:", ?*String, .{locale});
    }

    pub fn timeZone(self: *@This()) ?*TimeZone {
        return objc.msgSend(self, "timeZone", ?*TimeZone, .{});
    }

    pub fn initWithStringCalendarFormatLocale(self: *@This(), description: ?*String, format: ?*String, locale: *objc.Id) *objc.Id {
        return objc.msgSend(self, "initWithString:calendarFormat:locale:", *objc.Id, .{description, format, locale});
    }

    pub fn initWithStringCalendarFormat(self: *@This(), description: ?*String, format: ?*String) *objc.Id {
        return objc.msgSend(self, "initWithString:calendarFormat:", *objc.Id, .{description, format});
    }

    pub fn initWithString(self: *@This(), description: ?*String) *objc.Id {
        return objc.msgSend(self, "initWithString:", *objc.Id, .{description});
    }

    pub fn initWithYearMonthDayHourMinuteSecondTimeZone(self: *@This(), year: objc.NSInteger, month: objc.NSUInteger, day: objc.NSUInteger, hour: objc.NSUInteger, minute: objc.NSUInteger, second: objc.NSUInteger, aTimeZone: ?*TimeZone, ) *objc.Id {
        return objc.msgSend(self, "initWithYear:month:day:hour:minute:second:timeZone:", *objc.Id, .{year, month, day, hour, minute, second, aTimeZone, });
    }

    pub fn setCalendarFormat(self: *@This(), format: ?*String) void {
        return objc.msgSend(self, "setCalendarFormat:", void, .{format});
    }

    pub fn setTimeZone(self: *@This(), aTimeZone: ?*TimeZone) void {
        return objc.msgSend(self, "setTimeZone:", void, .{aTimeZone});
    }

    pub fn yearsMonthsDaysHoursMinutesSecondsSinceDate(self: *@This(), yp: ?*objc.NSInteger, mop: ?*objc.NSInteger, dp: ?*objc.NSInteger, hp: ?*objc.NSInteger, mip: ?*objc.NSInteger, sp: ?*objc.NSInteger, date: ?*CalendarDate, ) void {
        return objc.msgSend(self, "years:months:days:hours:minutes:seconds:sinceDate:", void, .{yp, mop, dp, hp, mip, sp, date, });
    }

    pub fn distantFuture(self: *@This()) *@This() {
        return objc.msgSend(self, "distantFuture", *@This(), .{});
    }

    pub fn distantPast(self: *@This()) *@This() {
        return objc.msgSend(self, "distantPast", *@This(), .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSConnection?language=objc
pub const Connection = opaque {
    pub const InternalInfo = objc.ExternalClass("NSConnection", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn allConnections(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "allConnections", ?*anyopaque, .{});
    }

    pub fn defaultConnection(self: *@This()) ?*Connection {
        return objc.msgSend(self, "defaultConnection", ?*Connection, .{});
    }

    pub fn connectionWithRegisteredNameHost(self: *@This(), name: ?*String, hostName: ?*String) *@This() {
        return objc.msgSend(self, "connectionWithRegisteredName:host:", *@This(), .{name, hostName});
    }

    pub fn connectionWithRegisteredNameHostUsingNameServer(self: *@This(), name: ?*String, hostName: ?*String, server: ?*PortNameServer) *@This() {
        return objc.msgSend(self, "connectionWithRegisteredName:host:usingNameServer:", *@This(), .{name, hostName, server});
    }

    pub fn rootProxyForConnectionWithRegisteredNameHost(self: *@This(), name: ?*String, hostName: ?*String) ?*DistantObject {
        return objc.msgSend(self, "rootProxyForConnectionWithRegisteredName:host:", ?*DistantObject, .{name, hostName});
    }

    pub fn rootProxyForConnectionWithRegisteredNameHostUsingNameServer(self: *@This(), name: ?*String, hostName: ?*String, server: ?*PortNameServer) ?*DistantObject {
        return objc.msgSend(self, "rootProxyForConnectionWithRegisteredName:host:usingNameServer:", ?*DistantObject, .{name, hostName, server});
    }

    pub fn serviceConnectionWithNameRootObjectUsingNameServer(self: *@This(), name: ?*String, root: *objc.Id, server: ?*PortNameServer) *@This() {
        return objc.msgSend(self, "serviceConnectionWithName:rootObject:usingNameServer:", *@This(), .{name, root, server});
    }

    pub fn serviceConnectionWithNameRootObject(self: *@This(), name: ?*String, root: *objc.Id) *@This() {
        return objc.msgSend(self, "serviceConnectionWithName:rootObject:", *@This(), .{name, root});
    }

    pub fn invalidate(self: *@This()) void {
        return objc.msgSend(self, "invalidate", void, .{});
    }

    pub fn addRequestMode(self: *@This(), rmode: ?*String) void {
        return objc.msgSend(self, "addRequestMode:", void, .{rmode});
    }

    pub fn removeRequestMode(self: *@This(), rmode: ?*String) void {
        return objc.msgSend(self, "removeRequestMode:", void, .{rmode});
    }

    pub fn registerName(self: *@This(), name: ?*String) objc.BOOL {
        return objc.msgSend(self, "registerName:", objc.BOOL, .{name});
    }

    pub fn registerNameWithNameServer(self: *@This(), name: ?*String, server: ?*PortNameServer) objc.BOOL {
        return objc.msgSend(self, "registerName:withNameServer:", objc.BOOL, .{name, server});
    }

    pub fn connectionWithReceivePortSendPort(self: *@This(), receivePort: ?*Port, sendPort: ?*Port) *@This() {
        return objc.msgSend(self, "connectionWithReceivePort:sendPort:", *@This(), .{receivePort, sendPort});
    }

    pub fn currentConversation(self: *@This()) *objc.Id {
        return objc.msgSend(self, "currentConversation", *objc.Id, .{});
    }

    pub fn initWithReceivePortSendPort(self: *@This(), receivePort: ?*Port, sendPort: ?*Port) *@This() {
        return objc.msgSend(self, "initWithReceivePort:sendPort:", *@This(), .{receivePort, sendPort});
    }

    pub fn enableMultipleThreads(self: *@This()) void {
        return objc.msgSend(self, "enableMultipleThreads", void, .{});
    }

    pub fn addRunLoop(self: *@This(), runloop: ?*RunLoop) void {
        return objc.msgSend(self, "addRunLoop:", void, .{runloop});
    }

    pub fn removeRunLoop(self: *@This(), runloop: ?*RunLoop) void {
        return objc.msgSend(self, "removeRunLoop:", void, .{runloop});
    }

    pub fn runInNewThread(self: *@This()) void {
        return objc.msgSend(self, "runInNewThread", void, .{});
    }

    pub fn dispatchWithComponents(self: *@This(), components: ?*Array) void {
        return objc.msgSend(self, "dispatchWithComponents:", void, .{components});
    }

    pub fn statistics(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "statistics", ?*anyopaque, .{});
    }

    pub fn requestTimeout(self: *@This()) TimeInterval {
        return objc.msgSend(self, "requestTimeout", TimeInterval, .{});
    }

    pub fn setRequestTimeout(self: *@This(), requestTimeout: TimeInterval) void {
        return objc.msgSend(self, "setRequestTimeout:", void, .{requestTimeout});
    }

    pub fn replyTimeout(self: *@This()) TimeInterval {
        return objc.msgSend(self, "replyTimeout", TimeInterval, .{});
    }

    pub fn setReplyTimeout(self: *@This(), replyTimeout: TimeInterval) void {
        return objc.msgSend(self, "setReplyTimeout:", void, .{replyTimeout});
    }

    pub fn rootObject(self: *@This()) *objc.Id {
        return objc.msgSend(self, "rootObject", *objc.Id, .{});
    }

    pub fn setRootObject(self: *@This(), rootObject: *objc.Id) void {
        return objc.msgSend(self, "setRootObject:", void, .{rootObject});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn independentConversationQueueing(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "independentConversationQueueing", objc.BOOL, .{});
    }

    pub fn setIndependentConversationQueueing(self: *@This(), independentConversationQueueing: objc.BOOL) void {
        return objc.msgSend(self, "setIndependentConversationQueueing:", void, .{independentConversationQueueing});
    }

    pub fn isValid(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isValid", objc.BOOL, .{});
    }

    pub fn rootProxy(self: *@This()) ?*DistantObject {
        return objc.msgSend(self, "rootProxy", ?*DistantObject, .{});
    }

    pub fn requestModes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "requestModes", ?*anyopaque, .{});
    }

    pub fn sendPort(self: *@This()) ?*Port {
        return objc.msgSend(self, "sendPort", ?*Port, .{});
    }

    pub fn receivePort(self: *@This()) ?*Port {
        return objc.msgSend(self, "receivePort", ?*Port, .{});
    }

    pub fn multipleThreadsEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "multipleThreadsEnabled", objc.BOOL, .{});
    }

    pub fn remoteObjects(self: *@This()) ?*Array {
        return objc.msgSend(self, "remoteObjects", ?*Array, .{});
    }

    pub fn localObjects(self: *@This()) ?*Array {
        return objc.msgSend(self, "localObjects", ?*Array, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSConnectionDelegate?language=objc
pub const ConnectionDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn makeNewConnectionSender(self: *@This(), conn: ?*Connection, ancestor: ?*Connection) objc.BOOL {
        return objc.msgSend(self, "makeNewConnection:sender:", objc.BOOL, .{conn, ancestor});
    }

    pub fn connectionShouldMakeNewConnection(self: *@This(), ancestor: ?*Connection, conn: ?*Connection) objc.BOOL {
        return objc.msgSend(self, "connection:shouldMakeNewConnection:", objc.BOOL, .{ancestor, conn});
    }

    pub fn authenticationDataForComponents(self: *@This(), components: ?*Array) ?*Data {
        return objc.msgSend(self, "authenticationDataForComponents:", ?*Data, .{components});
    }

    pub fn authenticateComponentsWithData(self: *@This(), components: ?*Array, signature: ?*Data) objc.BOOL {
        return objc.msgSend(self, "authenticateComponents:withData:", objc.BOOL, .{components, signature});
    }

    pub fn createConversationForConnection(self: *@This(), conn: ?*Connection) *objc.Id {
        return objc.msgSend(self, "createConversationForConnection:", *objc.Id, .{conn});
    }

    pub fn connectionHandleRequest(self: *@This(), connection: ?*Connection, doreq: ?*DistantObjectRequest) objc.BOOL {
        return objc.msgSend(self, "connection:handleRequest:", objc.BOOL, .{connection, doreq});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSDistantObjectRequest?language=objc
pub const DistantObjectRequest = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDistantObjectRequest", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn replyWithException(self: *@This(), exception: ?*Exception) void {
        return objc.msgSend(self, "replyWithException:", void, .{exception});
    }

    pub fn invocation(self: *@This()) ?*Invocation {
        return objc.msgSend(self, "invocation", ?*Invocation, .{});
    }

    pub fn connection(self: *@This()) ?*Connection {
        return objc.msgSend(self, "connection", ?*Connection, .{});
    }

    pub fn conversation(self: *@This()) *objc.Id {
        return objc.msgSend(self, "conversation", *objc.Id, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSDistantObject?language=objc
pub const DistantObject = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDistantObject", @This(), Proxy, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn proxyWithTargetConnection(self: *@This(), target: *objc.Id, connection: ?*Connection) *objc.Id {
        return objc.msgSend(self, "proxyWithTarget:connection:", *objc.Id, .{target, connection});
    }

    pub fn initWithTargetConnection(self: *@This(), target: *objc.Id, connection: ?*Connection) *@This() {
        return objc.msgSend(self, "initWithTarget:connection:", *@This(), .{target, connection});
    }

    pub fn proxyWithLocalConnection(self: *@This(), target: *objc.Id, connection: ?*Connection) *objc.Id {
        return objc.msgSend(self, "proxyWithLocal:connection:", *objc.Id, .{target, connection});
    }

    pub fn initWithLocalConnection(self: *@This(), target: *objc.Id, connection: ?*Connection) *@This() {
        return objc.msgSend(self, "initWithLocal:connection:", *@This(), .{target, connection});
    }

    pub fn initWithCoder(self: *@This(), inCoder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{inCoder});
    }

    pub fn setProtocolForProxy(self: *@This(), proto: ?*Protocol) void {
        return objc.msgSend(self, "setProtocolForProxy:", void, .{proto});
    }

    pub fn connectionForProxy(self: *@This()) ?*Connection {
        return objc.msgSend(self, "connectionForProxy", ?*Connection, .{});
    }

};

pub const DistributedNotificationCenterType = ?*String;

pub const NotificationSuspensionBehavior = enum(objc.NSUInteger) {
    Drop = 1,
    Coalesce = 2,
    Hold = 3,
    DeliverImmediately = 4,
};

pub const DistributedNotificationOptions = enum(objc.NSUInteger) {
    DeliverImmediately = 1,
    PostToAllSessions = 2,
};

/// https://developer.apple.com/documentation/Foundation/NSDistributedNotificationCenter?language=objc
pub const DistributedNotificationCenter = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDistributedNotificationCenter", @This(), NotificationCenter, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn notificationCenterForType(self: *@This(), notificationCenterType: DistributedNotificationCenterType) ?*DistributedNotificationCenter {
        return objc.msgSend(self, "notificationCenterForType:", ?*DistributedNotificationCenter, .{notificationCenterType});
    }

    pub fn defaultCenter(self: *@This()) ?*DistributedNotificationCenter {
        return objc.msgSend(self, "defaultCenter", ?*DistributedNotificationCenter, .{});
    }

    pub fn addObserverSelectorNameObjectSuspensionBehavior(self: *@This(), observer: *objc.Id, selector: *objc.SEL, name: NotificationName, object: ?*String, suspensionBehavior: NotificationSuspensionBehavior, ) void {
        return objc.msgSend(self, "addObserver:selector:name:object:suspensionBehavior:", void, .{observer, selector, name, object, suspensionBehavior, });
    }

    pub fn postNotificationNameObjectUserInfoDeliverImmediately(self: *@This(), name: NotificationName, object: ?*String, userInfo: ?*Dictionary, deliverImmediately: objc.BOOL, ) void {
        return objc.msgSend(self, "postNotificationName:object:userInfo:deliverImmediately:", void, .{name, object, userInfo, deliverImmediately, });
    }

    pub fn postNotificationNameObjectUserInfoOptions(self: *@This(), name: NotificationName, object: ?*String, userInfo: ?*Dictionary, options: DistributedNotificationOptions, ) void {
        return objc.msgSend(self, "postNotificationName:object:userInfo:options:", void, .{name, object, userInfo, options, });
    }

    pub fn addObserverSelectorNameObject(self: *@This(), observer: *objc.Id, aSelector: *objc.SEL, aName: NotificationName, anObject: ?*String, ) void {
        return objc.msgSend(self, "addObserver:selector:name:object:", void, .{observer, aSelector, aName, anObject, });
    }

    pub fn postNotificationNameObject(self: *@This(), aName: NotificationName, anObject: ?*String) void {
        return objc.msgSend(self, "postNotificationName:object:", void, .{aName, anObject});
    }

    pub fn postNotificationNameObjectUserInfo(self: *@This(), aName: NotificationName, anObject: ?*String, aUserInfo: ?*Dictionary) void {
        return objc.msgSend(self, "postNotificationName:object:userInfo:", void, .{aName, anObject, aUserInfo});
    }

    pub fn removeObserverNameObject(self: *@This(), observer: *objc.Id, aName: NotificationName, anObject: ?*String) void {
        return objc.msgSend(self, "removeObserver:name:object:", void, .{observer, aName, anObject});
    }

    pub fn suspended(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "suspended", objc.BOOL, .{});
    }

    pub fn setSuspended(self: *@This(), suspended: objc.BOOL) void {
        return objc.msgSend(self, "setSuspended:", void, .{suspended});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSPortCoder?language=objc
pub const PortCoder = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPortCoder", @This(), Coder, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isBycopy(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isBycopy", objc.BOOL, .{});
    }

    pub fn isByref(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isByref", objc.BOOL, .{});
    }

    pub fn encodePortObject(self: *@This(), aport: ?*Port) void {
        return objc.msgSend(self, "encodePortObject:", void, .{aport});
    }

    pub fn decodePortObject(self: *@This()) ?*Port {
        return objc.msgSend(self, "decodePortObject", ?*Port, .{});
    }

    pub fn connection(self: *@This()) ?*Connection {
        return objc.msgSend(self, "connection", ?*Connection, .{});
    }

    pub fn portCoderWithReceivePortSendPortComponents(self: *@This(), rcvPort: ?*Port, sndPort: ?*Port, comps: ?*Array) *objc.Id {
        return objc.msgSend(self, "portCoderWithReceivePort:sendPort:components:", *objc.Id, .{rcvPort, sndPort, comps});
    }

    pub fn initWithReceivePortSendPortComponents(self: *@This(), rcvPort: ?*Port, sndPort: ?*Port, comps: ?*Array) *objc.Id {
        return objc.msgSend(self, "initWithReceivePort:sendPort:components:", *objc.Id, .{rcvPort, sndPort, comps});
    }

    pub fn dispatch(self: *@This()) void {
        return objc.msgSend(self, "dispatch", void, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSPortMessage?language=objc
pub const PortMessage = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPortMessage", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithSendPortReceivePortComponents(self: *@This(), sendPort: ?*Port, replyPort: ?*Port, components: ?*Array) *@This() {
        return objc.msgSend(self, "initWithSendPort:receivePort:components:", *@This(), .{sendPort, replyPort, components});
    }

    pub fn sendBeforeDate(self: *@This(), date: ?*Date) objc.BOOL {
        return objc.msgSend(self, "sendBeforeDate:", objc.BOOL, .{date});
    }

    pub fn components(self: *@This()) ?*Array {
        return objc.msgSend(self, "components", ?*Array, .{});
    }

    pub fn receivePort(self: *@This()) ?*Port {
        return objc.msgSend(self, "receivePort", ?*Port, .{});
    }

    pub fn sendPort(self: *@This()) ?*Port {
        return objc.msgSend(self, "sendPort", ?*Port, .{});
    }

    pub fn msgid(self: *@This()) objc.uint32_t {
        return objc.msgSend(self, "msgid", objc.uint32_t, .{});
    }

    pub fn setMsgid(self: *@This(), msgid: objc.uint32_t) void {
        return objc.msgSend(self, "setMsgid:", void, .{msgid});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSPortNameServer?language=objc
pub const PortNameServer = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPortNameServer", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn systemDefaultPortNameServer(self: *@This()) ?*PortNameServer {
        return objc.msgSend(self, "systemDefaultPortNameServer", ?*PortNameServer, .{});
    }

    pub fn portForName(self: *@This(), name: ?*String) ?*Port {
        return objc.msgSend(self, "portForName:", ?*Port, .{name});
    }

    pub fn portForNameHost(self: *@This(), name: ?*String, host: ?*String) ?*Port {
        return objc.msgSend(self, "portForName:host:", ?*Port, .{name, host});
    }

    pub fn registerPortName(self: *@This(), port: ?*Port, name: ?*String) objc.BOOL {
        return objc.msgSend(self, "registerPort:name:", objc.BOOL, .{port, name});
    }

    pub fn removePortForName(self: *@This(), name: ?*String) objc.BOOL {
        return objc.msgSend(self, "removePortForName:", objc.BOOL, .{name});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSMachBootstrapServer?language=objc
pub const MachBootstrapServer = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMachBootstrapServer", @This(), PortNameServer, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn sharedInstance(self: *@This()) *objc.Id {
        return objc.msgSend(self, "sharedInstance", *objc.Id, .{});
    }

    pub fn portForName(self: *@This(), name: ?*String) ?*Port {
        return objc.msgSend(self, "portForName:", ?*Port, .{name});
    }

    pub fn portForNameHost(self: *@This(), name: ?*String, host: ?*String) ?*Port {
        return objc.msgSend(self, "portForName:host:", ?*Port, .{name, host});
    }

    pub fn registerPortName(self: *@This(), port: ?*Port, name: ?*String) objc.BOOL {
        return objc.msgSend(self, "registerPort:name:", objc.BOOL, .{port, name});
    }

    pub fn servicePortWithName(self: *@This(), name: ?*String) ?*Port {
        return objc.msgSend(self, "servicePortWithName:", ?*Port, .{name});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSMessagePortNameServer?language=objc
pub const MessagePortNameServer = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMessagePortNameServer", @This(), PortNameServer, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn sharedInstance(self: *@This()) *objc.Id {
        return objc.msgSend(self, "sharedInstance", *objc.Id, .{});
    }

    pub fn portForName(self: *@This(), name: ?*String) ?*Port {
        return objc.msgSend(self, "portForName:", ?*Port, .{name});
    }

    pub fn portForNameHost(self: *@This(), name: ?*String, host: ?*String) ?*Port {
        return objc.msgSend(self, "portForName:host:", ?*Port, .{name, host});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSSocketPortNameServer?language=objc
pub const SocketPortNameServer = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSocketPortNameServer", @This(), PortNameServer, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn sharedInstance(self: *@This()) *objc.Id {
        return objc.msgSend(self, "sharedInstance", *objc.Id, .{});
    }

    pub fn portForName(self: *@This(), name: ?*String) ?*Port {
        return objc.msgSend(self, "portForName:", ?*Port, .{name});
    }

    pub fn portForNameHost(self: *@This(), name: ?*String, host: ?*String) ?*Port {
        return objc.msgSend(self, "portForName:host:", ?*Port, .{name, host});
    }

    pub fn registerPortName(self: *@This(), port: ?*Port, name: ?*String) objc.BOOL {
        return objc.msgSend(self, "registerPort:name:", objc.BOOL, .{port, name});
    }

    pub fn removePortForName(self: *@This(), name: ?*String) objc.BOOL {
        return objc.msgSend(self, "removePortForName:", objc.BOOL, .{name});
    }

    pub fn portForNameHostNameServerPortNumber(self: *@This(), name: ?*String, host: ?*String, portNumber: objc.uint16_t) ?*Port {
        return objc.msgSend(self, "portForName:host:nameServerPortNumber:", ?*Port, .{name, host, portNumber});
    }

    pub fn registerPortNameNameServerPortNumber(self: *@This(), port: ?*Port, name: ?*String, portNumber: objc.uint16_t) objc.BOOL {
        return objc.msgSend(self, "registerPort:name:nameServerPortNumber:", objc.BOOL, .{port, name, portNumber});
    }

    pub fn defaultNameServerPortNumber(self: *@This()) objc.uint16_t {
        return objc.msgSend(self, "defaultNameServerPortNumber", objc.uint16_t, .{});
    }

    pub fn setDefaultNameServerPortNumber(self: *@This(), defaultNameServerPortNumber: objc.uint16_t) void {
        return objc.msgSend(self, "setDefaultNameServerPortNumber:", void, .{defaultNameServerPortNumber});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSProtocolChecker?language=objc
pub const ProtocolChecker = opaque {
    pub const InternalInfo = objc.ExternalClass("NSProtocolChecker", @This(), Proxy, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn protocol(self: *@This()) ?*Protocol {
        return objc.msgSend(self, "protocol", ?*Protocol, .{});
    }

    pub fn target(self: *@This()) ?*objc.NSObject {
        return objc.msgSend(self, "target", ?*objc.NSObject, .{});
    }

};

pub const TaskTerminationReason = enum(objc.NSInteger) {
    Exit = 1,
    UncaughtSignal = 2,
};

/// https://developer.apple.com/documentation/Foundation/NSTask?language=objc
pub const Task = opaque {
    pub const InternalInfo = objc.ExternalClass("NSTask", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn launchAndReturnError(self: *@This(), @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "launchAndReturnError:", objc.BOOL, .{@"error"});
    }

    pub fn interrupt(self: *@This()) void {
        return objc.msgSend(self, "interrupt", void, .{});
    }

    pub fn terminate(self: *@This()) void {
        return objc.msgSend(self, "terminate", void, .{});
    }

    pub fn @"suspend"(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "suspend", objc.BOOL, .{});
    }

    pub fn @"resume"(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "resume", objc.BOOL, .{});
    }

    pub fn executableURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "executableURL", ?*URL, .{});
    }

    pub fn setExecutableURL(self: *@This(), executableURL: ?*URL) void {
        return objc.msgSend(self, "setExecutableURL:", void, .{executableURL});
    }

    pub fn arguments(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "arguments", ?*anyopaque, .{});
    }

    pub fn setArguments(self: *@This(), arguments: ?*anyopaque) void {
        return objc.msgSend(self, "setArguments:", void, .{arguments});
    }

    pub fn environment(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "environment", ?*anyopaque, .{});
    }

    pub fn setEnvironment(self: *@This(), environment: ?*anyopaque) void {
        return objc.msgSend(self, "setEnvironment:", void, .{environment});
    }

    pub fn currentDirectoryURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "currentDirectoryURL", ?*URL, .{});
    }

    pub fn setCurrentDirectoryURL(self: *@This(), currentDirectoryURL: ?*URL) void {
        return objc.msgSend(self, "setCurrentDirectoryURL:", void, .{currentDirectoryURL});
    }

    pub fn launchRequirementData(self: *@This()) ?*Data {
        return objc.msgSend(self, "launchRequirementData", ?*Data, .{});
    }

    pub fn setLaunchRequirementData(self: *@This(), launchRequirementData: ?*Data) void {
        return objc.msgSend(self, "setLaunchRequirementData:", void, .{launchRequirementData});
    }

    pub fn standardInput(self: *@This()) *objc.Id {
        return objc.msgSend(self, "standardInput", *objc.Id, .{});
    }

    pub fn setStandardInput(self: *@This(), standardInput: *objc.Id) void {
        return objc.msgSend(self, "setStandardInput:", void, .{standardInput});
    }

    pub fn standardOutput(self: *@This()) *objc.Id {
        return objc.msgSend(self, "standardOutput", *objc.Id, .{});
    }

    pub fn setStandardOutput(self: *@This(), standardOutput: *objc.Id) void {
        return objc.msgSend(self, "setStandardOutput:", void, .{standardOutput});
    }

    pub fn standardError(self: *@This()) *objc.Id {
        return objc.msgSend(self, "standardError", *objc.Id, .{});
    }

    pub fn setStandardError(self: *@This(), standardError: *objc.Id) void {
        return objc.msgSend(self, "setStandardError:", void, .{standardError});
    }

    pub fn processIdentifier(self: *@This()) i32 {
        return objc.msgSend(self, "processIdentifier", i32, .{});
    }

    pub fn isRunning(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isRunning", objc.BOOL, .{});
    }

    pub fn terminationStatus(self: *@This()) i32 {
        return objc.msgSend(self, "terminationStatus", i32, .{});
    }

    pub fn terminationReason(self: *@This()) TaskTerminationReason {
        return objc.msgSend(self, "terminationReason", TaskTerminationReason, .{});
    }

    pub fn terminationHandler(self: *@This()) *const fn(?*Task) callconv(.C) void {
        return objc.msgSend(self, "terminationHandler", *const fn(?*Task) callconv(.C) void, .{});
    }

    pub fn setTerminationHandler(self: *@This(), terminationHandler: *const fn(?*Task) callconv(.C) void) void {
        return objc.msgSend(self, "setTerminationHandler:", void, .{terminationHandler});
    }

    pub fn qualityOfService(self: *@This()) QualityOfService {
        return objc.msgSend(self, "qualityOfService", QualityOfService, .{});
    }

    pub fn setQualityOfService(self: *@This(), qualityOfService: QualityOfService) void {
        return objc.msgSend(self, "setQualityOfService:", void, .{qualityOfService});
    }

};

pub const XMLNodeOptions = enum(objc.NSUInteger) {
    None = 0,
    IsCDATA = 1,
    ExpandEmptyElement = 2,
    CompactEmptyElement = 4,
    UseSingleQuotes = 8,
    UseDoubleQuotes = 16,
    NeverEscapeContents = 32,
    DocumentTidyHTML = 512,
    DocumentTidyXML = 1024,
    DocumentValidate = 8192,
    LoadExternalEntitiesAlways = 16384,
    LoadExternalEntitiesSameOriginOnly = 32768,
    LoadExternalEntitiesNever = 524288,
    DocumentXInclude = 65536,
    PrettyPrint = 131072,
    DocumentIncludeContentTypeDeclaration = 262144,
    PreserveNamespaceOrder = 1048576,
    PreserveAttributeOrder = 2097152,
    PreserveEntities = 4194304,
    PreservePrefixes = 8388608,
    PreserveCDATA = 16777216,
    PreserveWhitespace = 33554432,
    PreserveDTD = 67108864,
    PreserveCharacterReferences = 134217728,
    PromoteSignificantWhitespace = 268435456,
    PreserveEmptyElements = 6,
    PreserveQuotes = 24,
    PreserveAll = 4293918750,
};

pub const XMLNodeKind = enum(objc.NSUInteger) {
    InvalidKind = 0,
    DocumentKind = 1,
    ElementKind = 2,
    AttributeKind = 3,
    NamespaceKind = 4,
    ProcessingInstructionKind = 5,
    CommentKind = 6,
    TextKind = 7,
    DTDKind = 8,
    EntityDeclarationKind = 9,
    AttributeDeclarationKind = 10,
    ElementDeclarationKind = 11,
    NotationDeclarationKind = 12,
};

/// https://developer.apple.com/documentation/Foundation/NSXMLNode?language=objc
pub const XMLNode = opaque {
    pub const InternalInfo = objc.ExternalClass("NSXMLNode", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithKind(self: *@This(), kind: XMLNodeKind) *@This() {
        return objc.msgSend(self, "initWithKind:", *@This(), .{kind});
    }

    pub fn initWithKindOptions(self: *@This(), kind: XMLNodeKind, options: XMLNodeOptions) *@This() {
        return objc.msgSend(self, "initWithKind:options:", *@This(), .{kind, options});
    }

    pub fn document(self: *@This()) *objc.Id {
        return objc.msgSend(self, "document", *objc.Id, .{});
    }

    pub fn documentWithRootElement(self: *@This(), element: ?*XMLElement) *objc.Id {
        return objc.msgSend(self, "documentWithRootElement:", *objc.Id, .{element});
    }

    pub fn elementWithName(self: *@This(), name: ?*String) *objc.Id {
        return objc.msgSend(self, "elementWithName:", *objc.Id, .{name});
    }

    pub fn elementWithNameURI(self: *@This(), name: ?*String, URI: ?*String) *objc.Id {
        return objc.msgSend(self, "elementWithName:URI:", *objc.Id, .{name, URI});
    }

    pub fn elementWithNameStringValue(self: *@This(), name: ?*String, string: ?*String) *objc.Id {
        return objc.msgSend(self, "elementWithName:stringValue:", *objc.Id, .{name, string});
    }

    pub fn elementWithNameChildrenAttributes(self: *@This(), name: ?*String, children: ?*anyopaque, attributes: ?*anyopaque) *objc.Id {
        return objc.msgSend(self, "elementWithName:children:attributes:", *objc.Id, .{name, children, attributes});
    }

    pub fn attributeWithNameStringValue(self: *@This(), name: ?*String, stringValue: ?*String) *objc.Id {
        return objc.msgSend(self, "attributeWithName:stringValue:", *objc.Id, .{name, stringValue});
    }

    pub fn attributeWithNameURIStringValue(self: *@This(), name: ?*String, URI: ?*String, stringValue: ?*String) *objc.Id {
        return objc.msgSend(self, "attributeWithName:URI:stringValue:", *objc.Id, .{name, URI, stringValue});
    }

    pub fn namespaceWithNameStringValue(self: *@This(), name: ?*String, stringValue: ?*String) *objc.Id {
        return objc.msgSend(self, "namespaceWithName:stringValue:", *objc.Id, .{name, stringValue});
    }

    pub fn processingInstructionWithNameStringValue(self: *@This(), name: ?*String, stringValue: ?*String) *objc.Id {
        return objc.msgSend(self, "processingInstructionWithName:stringValue:", *objc.Id, .{name, stringValue});
    }

    pub fn commentWithStringValue(self: *@This(), stringValue: ?*String) *objc.Id {
        return objc.msgSend(self, "commentWithStringValue:", *objc.Id, .{stringValue});
    }

    pub fn textWithStringValue(self: *@This(), stringValue: ?*String) *objc.Id {
        return objc.msgSend(self, "textWithStringValue:", *objc.Id, .{stringValue});
    }

    pub fn DTDNodeWithXMLString(self: *@This(), string: ?*String) *objc.Id {
        return objc.msgSend(self, "DTDNodeWithXMLString:", *objc.Id, .{string});
    }

    pub fn setStringValueResolvingEntities(self: *@This(), string: ?*String, resolve: objc.BOOL) void {
        return objc.msgSend(self, "setStringValue:resolvingEntities:", void, .{string, resolve});
    }

    pub fn childAtIndex(self: *@This(), index: objc.NSUInteger) ?*XMLNode {
        return objc.msgSend(self, "childAtIndex:", ?*XMLNode, .{index});
    }

    pub fn detach(self: *@This()) void {
        return objc.msgSend(self, "detach", void, .{});
    }

    pub fn localNameForName(self: *@This(), name: ?*String) ?*String {
        return objc.msgSend(self, "localNameForName:", ?*String, .{name});
    }

    pub fn prefixForName(self: *@This(), name: ?*String) ?*String {
        return objc.msgSend(self, "prefixForName:", ?*String, .{name});
    }

    pub fn predefinedNamespaceForPrefix(self: *@This(), name: ?*String) ?*XMLNode {
        return objc.msgSend(self, "predefinedNamespaceForPrefix:", ?*XMLNode, .{name});
    }

    pub fn XMLStringWithOptions(self: *@This(), options: XMLNodeOptions) ?*String {
        return objc.msgSend(self, "XMLStringWithOptions:", ?*String, .{options});
    }

    pub fn canonicalXMLStringPreservingComments(self: *@This(), comments: objc.BOOL) ?*String {
        return objc.msgSend(self, "canonicalXMLStringPreservingComments:", ?*String, .{comments});
    }

    pub fn nodesForXPathError(self: *@This(), xpath: ?*String, @"error": ?*?*Error) ?*anyopaque {
        return objc.msgSend(self, "nodesForXPath:error:", ?*anyopaque, .{xpath, @"error"});
    }

    pub fn objectsForXQueryConstantsError(self: *@This(), xquery: ?*String, constants: ?*anyopaque, @"error": ?*?*Error) ?*Array {
        return objc.msgSend(self, "objectsForXQuery:constants:error:", ?*Array, .{xquery, constants, @"error"});
    }

    pub fn objectsForXQueryError(self: *@This(), xquery: ?*String, @"error": ?*?*Error) ?*Array {
        return objc.msgSend(self, "objectsForXQuery:error:", ?*Array, .{xquery, @"error"});
    }

    pub fn kind(self: *@This()) XMLNodeKind {
        return objc.msgSend(self, "kind", XMLNodeKind, .{});
    }

    pub fn name(self: *@This()) ?*String {
        return objc.msgSend(self, "name", ?*String, .{});
    }

    pub fn setName(self: *@This(), name: ?*String) void {
        return objc.msgSend(self, "setName:", void, .{name});
    }

    pub fn objectValue(self: *@This()) *objc.Id {
        return objc.msgSend(self, "objectValue", *objc.Id, .{});
    }

    pub fn setObjectValue(self: *@This(), objectValue: *objc.Id) void {
        return objc.msgSend(self, "setObjectValue:", void, .{objectValue});
    }

    pub fn stringValue(self: *@This()) ?*String {
        return objc.msgSend(self, "stringValue", ?*String, .{});
    }

    pub fn setStringValue(self: *@This(), stringValue: ?*String) void {
        return objc.msgSend(self, "setStringValue:", void, .{stringValue});
    }

    pub fn index(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "index", objc.NSUInteger, .{});
    }

    pub fn level(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "level", objc.NSUInteger, .{});
    }

    pub fn rootDocument(self: *@This()) ?*XMLDocument {
        return objc.msgSend(self, "rootDocument", ?*XMLDocument, .{});
    }

    pub fn parent(self: *@This()) ?*XMLNode {
        return objc.msgSend(self, "parent", ?*XMLNode, .{});
    }

    pub fn childCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "childCount", objc.NSUInteger, .{});
    }

    pub fn children(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "children", ?*anyopaque, .{});
    }

    pub fn previousSibling(self: *@This()) ?*XMLNode {
        return objc.msgSend(self, "previousSibling", ?*XMLNode, .{});
    }

    pub fn nextSibling(self: *@This()) ?*XMLNode {
        return objc.msgSend(self, "nextSibling", ?*XMLNode, .{});
    }

    pub fn previousNode(self: *@This()) ?*XMLNode {
        return objc.msgSend(self, "previousNode", ?*XMLNode, .{});
    }

    pub fn nextNode(self: *@This()) ?*XMLNode {
        return objc.msgSend(self, "nextNode", ?*XMLNode, .{});
    }

    pub fn XPath(self: *@This()) ?*String {
        return objc.msgSend(self, "XPath", ?*String, .{});
    }

    pub fn localName(self: *@This()) ?*String {
        return objc.msgSend(self, "localName", ?*String, .{});
    }

    pub fn prefix(self: *@This()) ?*String {
        return objc.msgSend(self, "prefix", ?*String, .{});
    }

    pub fn URI(self: *@This()) ?*String {
        return objc.msgSend(self, "URI", ?*String, .{});
    }

    pub fn setURI(self: *@This(), URI: ?*String) void {
        return objc.msgSend(self, "setURI:", void, .{URI});
    }

    pub fn description(self: *@This()) ?*String {
        return objc.msgSend(self, "description", ?*String, .{});
    }

    pub fn XMLString(self: *@This()) ?*String {
        return objc.msgSend(self, "XMLString", ?*String, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSXMLDTD?language=objc
pub const XMLDTD = opaque {
    pub const InternalInfo = objc.ExternalClass("NSXMLDTD", @This(), XMLNode, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithKindOptions(self: *@This(), kind: XMLNodeKind, options: XMLNodeOptions) *@This() {
        return objc.msgSend(self, "initWithKind:options:", *@This(), .{kind, options});
    }

    pub fn initWithContentsOfURLOptionsError(self: *@This(), url: ?*URL, mask: XMLNodeOptions, @"error": ?*?*Error) *@This() {
        return objc.msgSend(self, "initWithContentsOfURL:options:error:", *@This(), .{url, mask, @"error"});
    }

    pub fn initWithDataOptionsError(self: *@This(), data: ?*Data, mask: XMLNodeOptions, @"error": ?*?*Error) *@This() {
        return objc.msgSend(self, "initWithData:options:error:", *@This(), .{data, mask, @"error"});
    }

    pub fn insertChildAtIndex(self: *@This(), child: ?*XMLNode, index: objc.NSUInteger) void {
        return objc.msgSend(self, "insertChild:atIndex:", void, .{child, index});
    }

    pub fn insertChildrenAtIndex(self: *@This(), children: ?*anyopaque, index: objc.NSUInteger) void {
        return objc.msgSend(self, "insertChildren:atIndex:", void, .{children, index});
    }

    pub fn removeChildAtIndex(self: *@This(), index: objc.NSUInteger) void {
        return objc.msgSend(self, "removeChildAtIndex:", void, .{index});
    }

    pub fn setChildren(self: *@This(), children: ?*anyopaque) void {
        return objc.msgSend(self, "setChildren:", void, .{children});
    }

    pub fn addChild(self: *@This(), child: ?*XMLNode) void {
        return objc.msgSend(self, "addChild:", void, .{child});
    }

    pub fn replaceChildAtIndexWithNode(self: *@This(), index: objc.NSUInteger, node: ?*XMLNode) void {
        return objc.msgSend(self, "replaceChildAtIndex:withNode:", void, .{index, node});
    }

    pub fn entityDeclarationForName(self: *@This(), name: ?*String) ?*XMLDTDNode {
        return objc.msgSend(self, "entityDeclarationForName:", ?*XMLDTDNode, .{name});
    }

    pub fn notationDeclarationForName(self: *@This(), name: ?*String) ?*XMLDTDNode {
        return objc.msgSend(self, "notationDeclarationForName:", ?*XMLDTDNode, .{name});
    }

    pub fn elementDeclarationForName(self: *@This(), name: ?*String) ?*XMLDTDNode {
        return objc.msgSend(self, "elementDeclarationForName:", ?*XMLDTDNode, .{name});
    }

    pub fn attributeDeclarationForNameElementName(self: *@This(), name: ?*String, elementName: ?*String) ?*XMLDTDNode {
        return objc.msgSend(self, "attributeDeclarationForName:elementName:", ?*XMLDTDNode, .{name, elementName});
    }

    pub fn predefinedEntityDeclarationForName(self: *@This(), name: ?*String) ?*XMLDTDNode {
        return objc.msgSend(self, "predefinedEntityDeclarationForName:", ?*XMLDTDNode, .{name});
    }

    pub fn publicID(self: *@This()) ?*String {
        return objc.msgSend(self, "publicID", ?*String, .{});
    }

    pub fn setPublicID(self: *@This(), publicID: ?*String) void {
        return objc.msgSend(self, "setPublicID:", void, .{publicID});
    }

    pub fn systemID(self: *@This()) ?*String {
        return objc.msgSend(self, "systemID", ?*String, .{});
    }

    pub fn setSystemID(self: *@This(), systemID: ?*String) void {
        return objc.msgSend(self, "setSystemID:", void, .{systemID});
    }

};

pub const XMLDTDNodeKind = enum(objc.NSUInteger) {
    EntityGeneralKind = 1,
    EntityParsedKind = 2,
    EntityUnparsedKind = 3,
    EntityParameterKind = 4,
    EntityPredefined = 5,
    AttributeCDATAKind = 6,
    AttributeIDKind = 7,
    AttributeIDRefKind = 8,
    AttributeIDRefsKind = 9,
    AttributeEntityKind = 10,
    AttributeEntitiesKind = 11,
    AttributeNMTokenKind = 12,
    AttributeNMTokensKind = 13,
    AttributeEnumerationKind = 14,
    AttributeNotationKind = 15,
    ElementDeclarationUndefinedKind = 16,
    ElementDeclarationEmptyKind = 17,
    ElementDeclarationAnyKind = 18,
    ElementDeclarationMixedKind = 19,
    ElementDeclarationElementKind = 20,
};

/// https://developer.apple.com/documentation/Foundation/NSXMLDTDNode?language=objc
pub const XMLDTDNode = opaque {
    pub const InternalInfo = objc.ExternalClass("NSXMLDTDNode", @This(), XMLNode, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithXMLString(self: *@This(), string: ?*String) *@This() {
        return objc.msgSend(self, "initWithXMLString:", *@This(), .{string});
    }

    pub fn initWithKindOptions(self: *@This(), kind: XMLNodeKind, options: XMLNodeOptions) *@This() {
        return objc.msgSend(self, "initWithKind:options:", *@This(), .{kind, options});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn DTDKind(self: *@This()) XMLDTDNodeKind {
        return objc.msgSend(self, "DTDKind", XMLDTDNodeKind, .{});
    }

    pub fn setDTDKind(self: *@This(), DTDKind: XMLDTDNodeKind) void {
        return objc.msgSend(self, "setDTDKind:", void, .{DTDKind});
    }

    pub fn isExternal(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isExternal", objc.BOOL, .{});
    }

    pub fn publicID(self: *@This()) ?*String {
        return objc.msgSend(self, "publicID", ?*String, .{});
    }

    pub fn setPublicID(self: *@This(), publicID: ?*String) void {
        return objc.msgSend(self, "setPublicID:", void, .{publicID});
    }

    pub fn systemID(self: *@This()) ?*String {
        return objc.msgSend(self, "systemID", ?*String, .{});
    }

    pub fn setSystemID(self: *@This(), systemID: ?*String) void {
        return objc.msgSend(self, "setSystemID:", void, .{systemID});
    }

    pub fn notationName(self: *@This()) ?*String {
        return objc.msgSend(self, "notationName", ?*String, .{});
    }

    pub fn setNotationName(self: *@This(), notationName: ?*String) void {
        return objc.msgSend(self, "setNotationName:", void, .{notationName});
    }

};

pub const XMLDocumentContentKind = enum(objc.NSUInteger) {
    XMLKind = 0,
    XHTMLKind = 1,
    HTMLKind = 2,
    TextKind = 3,
};

/// https://developer.apple.com/documentation/Foundation/NSXMLDocument?language=objc
pub const XMLDocument = opaque {
    pub const InternalInfo = objc.ExternalClass("NSXMLDocument", @This(), XMLNode, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithXMLStringOptionsError(self: *@This(), string: ?*String, mask: XMLNodeOptions, @"error": ?*?*Error) *@This() {
        return objc.msgSend(self, "initWithXMLString:options:error:", *@This(), .{string, mask, @"error"});
    }

    pub fn initWithContentsOfURLOptionsError(self: *@This(), url: ?*URL, mask: XMLNodeOptions, @"error": ?*?*Error) *@This() {
        return objc.msgSend(self, "initWithContentsOfURL:options:error:", *@This(), .{url, mask, @"error"});
    }

    pub fn initWithDataOptionsError(self: *@This(), data: ?*Data, mask: XMLNodeOptions, @"error": ?*?*Error) *@This() {
        return objc.msgSend(self, "initWithData:options:error:", *@This(), .{data, mask, @"error"});
    }

    pub fn initWithRootElement(self: *@This(), element: ?*XMLElement) *@This() {
        return objc.msgSend(self, "initWithRootElement:", *@This(), .{element});
    }

    pub fn replacementClassForClass(self: *@This(), cls: *objc.Class) *objc.Class {
        return objc.msgSend(self, "replacementClassForClass:", *objc.Class, .{cls});
    }

    pub fn setRootElement(self: *@This(), root: ?*XMLElement) void {
        return objc.msgSend(self, "setRootElement:", void, .{root});
    }

    pub fn rootElement(self: *@This()) ?*XMLElement {
        return objc.msgSend(self, "rootElement", ?*XMLElement, .{});
    }

    pub fn insertChildAtIndex(self: *@This(), child: ?*XMLNode, index: objc.NSUInteger) void {
        return objc.msgSend(self, "insertChild:atIndex:", void, .{child, index});
    }

    pub fn insertChildrenAtIndex(self: *@This(), children: ?*anyopaque, index: objc.NSUInteger) void {
        return objc.msgSend(self, "insertChildren:atIndex:", void, .{children, index});
    }

    pub fn removeChildAtIndex(self: *@This(), index: objc.NSUInteger) void {
        return objc.msgSend(self, "removeChildAtIndex:", void, .{index});
    }

    pub fn setChildren(self: *@This(), children: ?*anyopaque) void {
        return objc.msgSend(self, "setChildren:", void, .{children});
    }

    pub fn addChild(self: *@This(), child: ?*XMLNode) void {
        return objc.msgSend(self, "addChild:", void, .{child});
    }

    pub fn replaceChildAtIndexWithNode(self: *@This(), index: objc.NSUInteger, node: ?*XMLNode) void {
        return objc.msgSend(self, "replaceChildAtIndex:withNode:", void, .{index, node});
    }

    pub fn XMLDataWithOptions(self: *@This(), options: XMLNodeOptions) ?*Data {
        return objc.msgSend(self, "XMLDataWithOptions:", ?*Data, .{options});
    }

    pub fn objectByApplyingXSLTArgumentsError(self: *@This(), xslt: ?*Data, arguments: ?*anyopaque, @"error": ?*?*Error) *objc.Id {
        return objc.msgSend(self, "objectByApplyingXSLT:arguments:error:", *objc.Id, .{xslt, arguments, @"error"});
    }

    pub fn objectByApplyingXSLTStringArgumentsError(self: *@This(), xslt: ?*String, arguments: ?*anyopaque, @"error": ?*?*Error) *objc.Id {
        return objc.msgSend(self, "objectByApplyingXSLTString:arguments:error:", *objc.Id, .{xslt, arguments, @"error"});
    }

    pub fn objectByApplyingXSLTAtURLArgumentsError(self: *@This(), xsltURL: ?*URL, argument: ?*anyopaque, @"error": ?*?*Error) *objc.Id {
        return objc.msgSend(self, "objectByApplyingXSLTAtURL:arguments:error:", *objc.Id, .{xsltURL, argument, @"error"});
    }

    pub fn validateAndReturnError(self: *@This(), @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "validateAndReturnError:", objc.BOOL, .{@"error"});
    }

    pub fn characterEncoding(self: *@This()) ?*String {
        return objc.msgSend(self, "characterEncoding", ?*String, .{});
    }

    pub fn setCharacterEncoding(self: *@This(), characterEncoding: ?*String) void {
        return objc.msgSend(self, "setCharacterEncoding:", void, .{characterEncoding});
    }

    pub fn version(self: *@This()) ?*String {
        return objc.msgSend(self, "version", ?*String, .{});
    }

    pub fn setVersion(self: *@This(), version: ?*String) void {
        return objc.msgSend(self, "setVersion:", void, .{version});
    }

    pub fn isStandalone(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isStandalone", objc.BOOL, .{});
    }

    pub fn setStandalone(self: *@This(), standalone: objc.BOOL) void {
        return objc.msgSend(self, "setStandalone:", void, .{standalone});
    }

    pub fn documentContentKind(self: *@This()) XMLDocumentContentKind {
        return objc.msgSend(self, "documentContentKind", XMLDocumentContentKind, .{});
    }

    pub fn setDocumentContentKind(self: *@This(), documentContentKind: XMLDocumentContentKind) void {
        return objc.msgSend(self, "setDocumentContentKind:", void, .{documentContentKind});
    }

    pub fn MIMEType(self: *@This()) ?*String {
        return objc.msgSend(self, "MIMEType", ?*String, .{});
    }

    pub fn setMIMEType(self: *@This(), MIMEType: ?*String) void {
        return objc.msgSend(self, "setMIMEType:", void, .{MIMEType});
    }

    pub fn DTD(self: *@This()) ?*XMLDTD {
        return objc.msgSend(self, "DTD", ?*XMLDTD, .{});
    }

    pub fn setDTD(self: *@This(), DTD: ?*XMLDTD) void {
        return objc.msgSend(self, "setDTD:", void, .{DTD});
    }

    pub fn XMLData(self: *@This()) ?*Data {
        return objc.msgSend(self, "XMLData", ?*Data, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSXMLElement?language=objc
pub const XMLElement = opaque {
    pub const InternalInfo = objc.ExternalClass("NSXMLElement", @This(), XMLNode, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithName(self: *@This(), name: ?*String) *@This() {
        return objc.msgSend(self, "initWithName:", *@This(), .{name});
    }

    pub fn initWithNameURI(self: *@This(), name: ?*String, URI: ?*String) *@This() {
        return objc.msgSend(self, "initWithName:URI:", *@This(), .{name, URI});
    }

    pub fn initWithNameStringValue(self: *@This(), name: ?*String, string: ?*String) *@This() {
        return objc.msgSend(self, "initWithName:stringValue:", *@This(), .{name, string});
    }

    pub fn initWithXMLStringError(self: *@This(), string: ?*String, @"error": ?*?*Error) *@This() {
        return objc.msgSend(self, "initWithXMLString:error:", *@This(), .{string, @"error"});
    }

    pub fn initWithKindOptions(self: *@This(), kind: XMLNodeKind, options: XMLNodeOptions) *@This() {
        return objc.msgSend(self, "initWithKind:options:", *@This(), .{kind, options});
    }

    pub fn elementsForName(self: *@This(), name: ?*String) ?*anyopaque {
        return objc.msgSend(self, "elementsForName:", ?*anyopaque, .{name});
    }

    pub fn elementsForLocalNameURI(self: *@This(), localName: ?*String, URI: ?*String) ?*anyopaque {
        return objc.msgSend(self, "elementsForLocalName:URI:", ?*anyopaque, .{localName, URI});
    }

    pub fn addAttribute(self: *@This(), attribute: ?*XMLNode) void {
        return objc.msgSend(self, "addAttribute:", void, .{attribute});
    }

    pub fn removeAttributeForName(self: *@This(), name: ?*String) void {
        return objc.msgSend(self, "removeAttributeForName:", void, .{name});
    }

    pub fn setAttributesWithDictionary(self: *@This(), attributes: ?*anyopaque) void {
        return objc.msgSend(self, "setAttributesWithDictionary:", void, .{attributes});
    }

    pub fn attributeForName(self: *@This(), name: ?*String) ?*XMLNode {
        return objc.msgSend(self, "attributeForName:", ?*XMLNode, .{name});
    }

    pub fn attributeForLocalNameURI(self: *@This(), localName: ?*String, URI: ?*String) ?*XMLNode {
        return objc.msgSend(self, "attributeForLocalName:URI:", ?*XMLNode, .{localName, URI});
    }

    pub fn addNamespace(self: *@This(), aNamespace: ?*XMLNode) void {
        return objc.msgSend(self, "addNamespace:", void, .{aNamespace});
    }

    pub fn removeNamespaceForPrefix(self: *@This(), name: ?*String) void {
        return objc.msgSend(self, "removeNamespaceForPrefix:", void, .{name});
    }

    pub fn namespaceForPrefix(self: *@This(), name: ?*String) ?*XMLNode {
        return objc.msgSend(self, "namespaceForPrefix:", ?*XMLNode, .{name});
    }

    pub fn resolveNamespaceForName(self: *@This(), name: ?*String) ?*XMLNode {
        return objc.msgSend(self, "resolveNamespaceForName:", ?*XMLNode, .{name});
    }

    pub fn resolvePrefixForNamespaceURI(self: *@This(), namespaceURI: ?*String) ?*String {
        return objc.msgSend(self, "resolvePrefixForNamespaceURI:", ?*String, .{namespaceURI});
    }

    pub fn insertChildAtIndex(self: *@This(), child: ?*XMLNode, index: objc.NSUInteger) void {
        return objc.msgSend(self, "insertChild:atIndex:", void, .{child, index});
    }

    pub fn insertChildrenAtIndex(self: *@This(), children: ?*anyopaque, index: objc.NSUInteger) void {
        return objc.msgSend(self, "insertChildren:atIndex:", void, .{children, index});
    }

    pub fn removeChildAtIndex(self: *@This(), index: objc.NSUInteger) void {
        return objc.msgSend(self, "removeChildAtIndex:", void, .{index});
    }

    pub fn setChildren(self: *@This(), children: ?*anyopaque) void {
        return objc.msgSend(self, "setChildren:", void, .{children});
    }

    pub fn addChild(self: *@This(), child: ?*XMLNode) void {
        return objc.msgSend(self, "addChild:", void, .{child});
    }

    pub fn replaceChildAtIndexWithNode(self: *@This(), index: objc.NSUInteger, node: ?*XMLNode) void {
        return objc.msgSend(self, "replaceChildAtIndex:withNode:", void, .{index, node});
    }

    pub fn normalizeAdjacentTextNodesPreservingCDATA(self: *@This(), preserve: objc.BOOL) void {
        return objc.msgSend(self, "normalizeAdjacentTextNodesPreservingCDATA:", void, .{preserve});
    }

    pub fn attributes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "attributes", ?*anyopaque, .{});
    }

    pub fn setAttributes(self: *@This(), attributes: ?*anyopaque) void {
        return objc.msgSend(self, "setAttributes:", void, .{attributes});
    }

    pub fn namespaces(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "namespaces", ?*anyopaque, .{});
    }

    pub fn setNamespaces(self: *@This(), namespaces: ?*anyopaque) void {
        return objc.msgSend(self, "setNamespaces:", void, .{namespaces});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSURLDownload?language=objc
pub const URLDownload = opaque {
    pub const InternalInfo = objc.ExternalClass("NSURLDownload", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn canResumeDownloadDecodedWithEncodingMIMEType(self: *@This(), MIMEType: ?*String) objc.BOOL {
        return objc.msgSend(self, "canResumeDownloadDecodedWithEncodingMIMEType:", objc.BOOL, .{MIMEType});
    }

    pub fn initWithRequestDelegate(self: *@This(), request: ?*URLRequest, delegate: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithRequest:delegate:", *@This(), .{request, delegate});
    }

    pub fn initWithResumeDataDelegatePath(self: *@This(), resumeData: ?*Data, delegate: ?*anyopaque, path: ?*String) *@This() {
        return objc.msgSend(self, "initWithResumeData:delegate:path:", *@This(), .{resumeData, delegate, path});
    }

    pub fn cancel(self: *@This()) void {
        return objc.msgSend(self, "cancel", void, .{});
    }

    pub fn setDestinationAllowOverwrite(self: *@This(), path: ?*String, allowOverwrite: objc.BOOL) void {
        return objc.msgSend(self, "setDestination:allowOverwrite:", void, .{path, allowOverwrite});
    }

    pub fn request(self: *@This()) ?*URLRequest {
        return objc.msgSend(self, "request", ?*URLRequest, .{});
    }

    pub fn resumeData(self: *@This()) ?*Data {
        return objc.msgSend(self, "resumeData", ?*Data, .{});
    }

    pub fn deletesFileUponFailure(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "deletesFileUponFailure", objc.BOOL, .{});
    }

    pub fn setDeletesFileUponFailure(self: *@This(), deletesFileUponFailure: objc.BOOL) void {
        return objc.msgSend(self, "setDeletesFileUponFailure:", void, .{deletesFileUponFailure});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSURLDownloadDelegate?language=objc
pub const URLDownloadDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn downloadDidBegin(self: *@This(), download: ?*URLDownload) void {
        return objc.msgSend(self, "downloadDidBegin:", void, .{download});
    }

    pub fn downloadWillSendRequestRedirectResponse(self: *@This(), download: ?*URLDownload, request: ?*URLRequest, redirectResponse: ?*URLResponse) ?*URLRequest {
        return objc.msgSend(self, "download:willSendRequest:redirectResponse:", ?*URLRequest, .{download, request, redirectResponse});
    }

    pub fn downloadCanAuthenticateAgainstProtectionSpace(self: *@This(), connection: ?*URLDownload, protectionSpace: ?*URLProtectionSpace) objc.BOOL {
        return objc.msgSend(self, "download:canAuthenticateAgainstProtectionSpace:", objc.BOOL, .{connection, protectionSpace});
    }

    pub fn downloadDidReceiveAuthenticationChallenge(self: *@This(), download: ?*URLDownload, challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(self, "download:didReceiveAuthenticationChallenge:", void, .{download, challenge});
    }

    pub fn downloadDidCancelAuthenticationChallenge(self: *@This(), download: ?*URLDownload, challenge: ?*URLAuthenticationChallenge) void {
        return objc.msgSend(self, "download:didCancelAuthenticationChallenge:", void, .{download, challenge});
    }

    pub fn downloadShouldUseCredentialStorage(self: *@This(), download: ?*URLDownload) objc.BOOL {
        return objc.msgSend(self, "downloadShouldUseCredentialStorage:", objc.BOOL, .{download});
    }

    pub fn downloadDidReceiveResponse(self: *@This(), download: ?*URLDownload, response: ?*URLResponse) void {
        return objc.msgSend(self, "download:didReceiveResponse:", void, .{download, response});
    }

    pub fn downloadWillResumeWithResponseFromByte(self: *@This(), download: ?*URLDownload, response: ?*URLResponse, startingByte: i64) void {
        return objc.msgSend(self, "download:willResumeWithResponse:fromByte:", void, .{download, response, startingByte});
    }

    pub fn downloadDidReceiveDataOfLength(self: *@This(), download: ?*URLDownload, length: objc.NSUInteger) void {
        return objc.msgSend(self, "download:didReceiveDataOfLength:", void, .{download, length});
    }

    pub fn downloadShouldDecodeSourceDataOfMIMEType(self: *@This(), download: ?*URLDownload, encodingType: ?*String) objc.BOOL {
        return objc.msgSend(self, "download:shouldDecodeSourceDataOfMIMEType:", objc.BOOL, .{download, encodingType});
    }

    pub fn downloadDecideDestinationWithSuggestedFilename(self: *@This(), download: ?*URLDownload, filename: ?*String) void {
        return objc.msgSend(self, "download:decideDestinationWithSuggestedFilename:", void, .{download, filename});
    }

    pub fn downloadDidCreateDestination(self: *@This(), download: ?*URLDownload, path: ?*String) void {
        return objc.msgSend(self, "download:didCreateDestination:", void, .{download, path});
    }

    pub fn downloadDidFinish(self: *@This(), download: ?*URLDownload) void {
        return objc.msgSend(self, "downloadDidFinish:", void, .{download});
    }

    pub fn downloadDidFailWithError(self: *@This(), download: ?*URLDownload, @"error": ?*Error) void {
        return objc.msgSend(self, "download:didFailWithError:", void, .{download, @"error"});
    }

};

pub const AppleEventSendOptions = enum(objc.NSUInteger) {
    NoReply = 1,
    QueueReply = 2,
    WaitForReply = 3,
    NeverInteract = 16,
    CanInteract = 32,
    AlwaysInteract = 48,
    CanSwitchLayer = 64,
    DontRecord = 4096,
    DontExecute = 8192,
    DontAnnotate = 65536,
    DefaultOptions = 35,
};

/// https://developer.apple.com/documentation/Foundation/NSAppleEventDescriptor?language=objc
pub const AppleEventDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("NSAppleEventDescriptor", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn nullDescriptor(self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(self, "nullDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn descriptorWithDescriptorTypeBytesLength(self: *@This(), descriptorType: core_services.DescType, bytes: ?*anyopaque, byteCount: objc.NSUInteger) ?*AppleEventDescriptor {
        return objc.msgSend(self, "descriptorWithDescriptorType:bytes:length:", ?*AppleEventDescriptor, .{descriptorType, bytes, byteCount});
    }

    pub fn descriptorWithDescriptorTypeData(self: *@This(), descriptorType: core_services.DescType, data: ?*Data) ?*AppleEventDescriptor {
        return objc.msgSend(self, "descriptorWithDescriptorType:data:", ?*AppleEventDescriptor, .{descriptorType, data});
    }

    pub fn descriptorWithBoolean(self: *@This(), boolean: objc.Boolean) ?*AppleEventDescriptor {
        return objc.msgSend(self, "descriptorWithBoolean:", ?*AppleEventDescriptor, .{boolean});
    }

    pub fn descriptorWithEnumCode(self: *@This(), enumerator: objc.OSType) ?*AppleEventDescriptor {
        return objc.msgSend(self, "descriptorWithEnumCode:", ?*AppleEventDescriptor, .{enumerator});
    }

    pub fn descriptorWithInt32(self: *@This(), signedInt: objc.SInt32) ?*AppleEventDescriptor {
        return objc.msgSend(self, "descriptorWithInt32:", ?*AppleEventDescriptor, .{signedInt});
    }

    pub fn descriptorWithDouble(self: *@This(), doubleValue: f64) ?*AppleEventDescriptor {
        return objc.msgSend(self, "descriptorWithDouble:", ?*AppleEventDescriptor, .{doubleValue});
    }

    pub fn descriptorWithTypeCode(self: *@This(), typeCode: objc.OSType) ?*AppleEventDescriptor {
        return objc.msgSend(self, "descriptorWithTypeCode:", ?*AppleEventDescriptor, .{typeCode});
    }

    pub fn descriptorWithString(self: *@This(), string: ?*String) ?*AppleEventDescriptor {
        return objc.msgSend(self, "descriptorWithString:", ?*AppleEventDescriptor, .{string});
    }

    pub fn descriptorWithDate(self: *@This(), date: ?*Date) ?*AppleEventDescriptor {
        return objc.msgSend(self, "descriptorWithDate:", ?*AppleEventDescriptor, .{date});
    }

    pub fn descriptorWithFileURL(self: *@This(), fileURL: ?*URL) ?*AppleEventDescriptor {
        return objc.msgSend(self, "descriptorWithFileURL:", ?*AppleEventDescriptor, .{fileURL});
    }

    pub fn appleEventWithEventClassEventIDTargetDescriptorReturnIDTransactionID(self: *@This(), eventClass: core_services.AEEventClass, eventID: core_services.AEEventID, targetDescriptor: ?*AppleEventDescriptor, returnID: core_services.AEReturnID, transactionID: core_services.AETransactionID, ) ?*AppleEventDescriptor {
        return objc.msgSend(self, "appleEventWithEventClass:eventID:targetDescriptor:returnID:transactionID:", ?*AppleEventDescriptor, .{eventClass, eventID, targetDescriptor, returnID, transactionID, });
    }

    pub fn listDescriptor(self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(self, "listDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn recordDescriptor(self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(self, "recordDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn currentProcessDescriptor(self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(self, "currentProcessDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn descriptorWithProcessIdentifier(self: *@This(), processIdentifier: objc.pid_t) ?*AppleEventDescriptor {
        return objc.msgSend(self, "descriptorWithProcessIdentifier:", ?*AppleEventDescriptor, .{processIdentifier});
    }

    pub fn descriptorWithBundleIdentifier(self: *@This(), bundleIdentifier: ?*String) ?*AppleEventDescriptor {
        return objc.msgSend(self, "descriptorWithBundleIdentifier:", ?*AppleEventDescriptor, .{bundleIdentifier});
    }

    pub fn descriptorWithApplicationURL(self: *@This(), applicationURL: ?*URL) ?*AppleEventDescriptor {
        return objc.msgSend(self, "descriptorWithApplicationURL:", ?*AppleEventDescriptor, .{applicationURL});
    }

    pub fn initWithAEDescNoCopy(self: *@This(), aeDesc: ?*core_services.AEDesc) *@This() {
        return objc.msgSend(self, "initWithAEDescNoCopy:", *@This(), .{aeDesc});
    }

    pub fn initWithDescriptorTypeBytesLength(self: *@This(), descriptorType: core_services.DescType, bytes: ?*anyopaque, byteCount: objc.NSUInteger) *@This() {
        return objc.msgSend(self, "initWithDescriptorType:bytes:length:", *@This(), .{descriptorType, bytes, byteCount});
    }

    pub fn initWithDescriptorTypeData(self: *@This(), descriptorType: core_services.DescType, data: ?*Data) *@This() {
        return objc.msgSend(self, "initWithDescriptorType:data:", *@This(), .{descriptorType, data});
    }

    pub fn initWithEventClassEventIDTargetDescriptorReturnIDTransactionID(self: *@This(), eventClass: core_services.AEEventClass, eventID: core_services.AEEventID, targetDescriptor: ?*AppleEventDescriptor, returnID: core_services.AEReturnID, transactionID: core_services.AETransactionID, ) *@This() {
        return objc.msgSend(self, "initWithEventClass:eventID:targetDescriptor:returnID:transactionID:", *@This(), .{eventClass, eventID, targetDescriptor, returnID, transactionID, });
    }

    pub fn initListDescriptor(self: *@This()) *@This() {
        return objc.msgSend(self, "initListDescriptor", *@This(), .{});
    }

    pub fn initRecordDescriptor(self: *@This()) *@This() {
        return objc.msgSend(self, "initRecordDescriptor", *@This(), .{});
    }

    pub fn setParamDescriptorForKeyword(self: *@This(), descriptor: ?*AppleEventDescriptor, keyword: core_services.AEKeyword) void {
        return objc.msgSend(self, "setParamDescriptor:forKeyword:", void, .{descriptor, keyword});
    }

    pub fn paramDescriptorForKeyword(self: *@This(), keyword: core_services.AEKeyword) ?*AppleEventDescriptor {
        return objc.msgSend(self, "paramDescriptorForKeyword:", ?*AppleEventDescriptor, .{keyword});
    }

    pub fn removeParamDescriptorWithKeyword(self: *@This(), keyword: core_services.AEKeyword) void {
        return objc.msgSend(self, "removeParamDescriptorWithKeyword:", void, .{keyword});
    }

    pub fn setAttributeDescriptorForKeyword(self: *@This(), descriptor: ?*AppleEventDescriptor, keyword: core_services.AEKeyword) void {
        return objc.msgSend(self, "setAttributeDescriptor:forKeyword:", void, .{descriptor, keyword});
    }

    pub fn attributeDescriptorForKeyword(self: *@This(), keyword: core_services.AEKeyword) ?*AppleEventDescriptor {
        return objc.msgSend(self, "attributeDescriptorForKeyword:", ?*AppleEventDescriptor, .{keyword});
    }

    pub fn sendEventWithOptionsTimeoutError(self: *@This(), sendOptions: AppleEventSendOptions, timeoutInSeconds: TimeInterval, @"error": ?*?*Error) ?*AppleEventDescriptor {
        return objc.msgSend(self, "sendEventWithOptions:timeout:error:", ?*AppleEventDescriptor, .{sendOptions, timeoutInSeconds, @"error"});
    }

    pub fn insertDescriptorAtIndex(self: *@This(), descriptor: ?*AppleEventDescriptor, index: objc.NSInteger) void {
        return objc.msgSend(self, "insertDescriptor:atIndex:", void, .{descriptor, index});
    }

    pub fn descriptorAtIndex(self: *@This(), index: objc.NSInteger) ?*AppleEventDescriptor {
        return objc.msgSend(self, "descriptorAtIndex:", ?*AppleEventDescriptor, .{index});
    }

    pub fn removeDescriptorAtIndex(self: *@This(), index: objc.NSInteger) void {
        return objc.msgSend(self, "removeDescriptorAtIndex:", void, .{index});
    }

    pub fn setDescriptorForKeyword(self: *@This(), descriptor: ?*AppleEventDescriptor, keyword: core_services.AEKeyword) void {
        return objc.msgSend(self, "setDescriptor:forKeyword:", void, .{descriptor, keyword});
    }

    pub fn descriptorForKeyword(self: *@This(), keyword: core_services.AEKeyword) ?*AppleEventDescriptor {
        return objc.msgSend(self, "descriptorForKeyword:", ?*AppleEventDescriptor, .{keyword});
    }

    pub fn removeDescriptorWithKeyword(self: *@This(), keyword: core_services.AEKeyword) void {
        return objc.msgSend(self, "removeDescriptorWithKeyword:", void, .{keyword});
    }

    pub fn keywordForDescriptorAtIndex(self: *@This(), index: objc.NSInteger) core_services.AEKeyword {
        return objc.msgSend(self, "keywordForDescriptorAtIndex:", core_services.AEKeyword, .{index});
    }

    pub fn coerceToDescriptorType(self: *@This(), descriptorType: core_services.DescType) ?*AppleEventDescriptor {
        return objc.msgSend(self, "coerceToDescriptorType:", ?*AppleEventDescriptor, .{descriptorType});
    }

    pub fn aeDesc(self: *@This()) ?*core_services.AEDesc {
        return objc.msgSend(self, "aeDesc", ?*core_services.AEDesc, .{});
    }

    pub fn descriptorType(self: *@This()) core_services.DescType {
        return objc.msgSend(self, "descriptorType", core_services.DescType, .{});
    }

    pub fn data(self: *@This()) ?*Data {
        return objc.msgSend(self, "data", ?*Data, .{});
    }

    pub fn booleanValue(self: *@This()) objc.Boolean {
        return objc.msgSend(self, "booleanValue", objc.Boolean, .{});
    }

    pub fn enumCodeValue(self: *@This()) objc.OSType {
        return objc.msgSend(self, "enumCodeValue", objc.OSType, .{});
    }

    pub fn int32Value(self: *@This()) objc.SInt32 {
        return objc.msgSend(self, "int32Value", objc.SInt32, .{});
    }

    pub fn doubleValue(self: *@This()) f64 {
        return objc.msgSend(self, "doubleValue", f64, .{});
    }

    pub fn typeCodeValue(self: *@This()) objc.OSType {
        return objc.msgSend(self, "typeCodeValue", objc.OSType, .{});
    }

    pub fn stringValue(self: *@This()) ?*String {
        return objc.msgSend(self, "stringValue", ?*String, .{});
    }

    pub fn dateValue(self: *@This()) ?*Date {
        return objc.msgSend(self, "dateValue", ?*Date, .{});
    }

    pub fn fileURLValue(self: *@This()) ?*URL {
        return objc.msgSend(self, "fileURLValue", ?*URL, .{});
    }

    pub fn eventClass(self: *@This()) core_services.AEEventClass {
        return objc.msgSend(self, "eventClass", core_services.AEEventClass, .{});
    }

    pub fn eventID(self: *@This()) core_services.AEEventID {
        return objc.msgSend(self, "eventID", core_services.AEEventID, .{});
    }

    pub fn returnID(self: *@This()) core_services.AEReturnID {
        return objc.msgSend(self, "returnID", core_services.AEReturnID, .{});
    }

    pub fn transactionID(self: *@This()) core_services.AETransactionID {
        return objc.msgSend(self, "transactionID", core_services.AETransactionID, .{});
    }

    pub fn isRecordDescriptor(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isRecordDescriptor", objc.BOOL, .{});
    }

    pub fn numberOfItems(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "numberOfItems", objc.NSInteger, .{});
    }

};

pub const __NSAppleEventManagerSuspension = extern struct {};

pub const AppleEventManagerSuspensionID = ?*__NSAppleEventManagerSuspension;

/// https://developer.apple.com/documentation/Foundation/NSAppleEventManager?language=objc
pub const AppleEventManager = opaque {
    pub const InternalInfo = objc.ExternalClass("NSAppleEventManager", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn sharedAppleEventManager(self: *@This()) ?*AppleEventManager {
        return objc.msgSend(self, "sharedAppleEventManager", ?*AppleEventManager, .{});
    }

    pub fn setEventHandlerAndSelectorForEventClassAndEventID(self: *@This(), handler: *objc.Id, handleEventSelector: *objc.SEL, eventClass: core_services.AEEventClass, eventID: core_services.AEEventID, ) void {
        return objc.msgSend(self, "setEventHandler:andSelector:forEventClass:andEventID:", void, .{handler, handleEventSelector, eventClass, eventID, });
    }

    pub fn removeEventHandlerForEventClassAndEventID(self: *@This(), eventClass: core_services.AEEventClass, eventID: core_services.AEEventID) void {
        return objc.msgSend(self, "removeEventHandlerForEventClass:andEventID:", void, .{eventClass, eventID});
    }

    pub fn dispatchRawAppleEventWithRawReplyHandlerRefCon(self: *@This(), theAppleEvent: ?*core_services.AppleEvent, theReply: ?*core_services.AppleEvent, handlerRefCon: objc.SRefCon) objc.OSErr {
        return objc.msgSend(self, "dispatchRawAppleEvent:withRawReply:handlerRefCon:", objc.OSErr, .{theAppleEvent, theReply, handlerRefCon});
    }

    pub fn suspendCurrentAppleEvent(self: *@This()) AppleEventManagerSuspensionID {
        return objc.msgSend(self, "suspendCurrentAppleEvent", AppleEventManagerSuspensionID, .{});
    }

    pub fn appleEventForSuspensionID(self: *@This(), suspensionID: AppleEventManagerSuspensionID) ?*AppleEventDescriptor {
        return objc.msgSend(self, "appleEventForSuspensionID:", ?*AppleEventDescriptor, .{suspensionID});
    }

    pub fn replyAppleEventForSuspensionID(self: *@This(), suspensionID: AppleEventManagerSuspensionID) ?*AppleEventDescriptor {
        return objc.msgSend(self, "replyAppleEventForSuspensionID:", ?*AppleEventDescriptor, .{suspensionID});
    }

    pub fn setCurrentAppleEventAndReplyEventWithSuspensionID(self: *@This(), suspensionID: AppleEventManagerSuspensionID) void {
        return objc.msgSend(self, "setCurrentAppleEventAndReplyEventWithSuspensionID:", void, .{suspensionID});
    }

    pub fn resumeWithSuspensionID(self: *@This(), suspensionID: AppleEventManagerSuspensionID) void {
        return objc.msgSend(self, "resumeWithSuspensionID:", void, .{suspensionID});
    }

    pub fn currentAppleEvent(self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(self, "currentAppleEvent", ?*AppleEventDescriptor, .{});
    }

    pub fn currentReplyAppleEvent(self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(self, "currentReplyAppleEvent", ?*AppleEventDescriptor, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSClassDescription?language=objc
pub const ClassDescription = opaque {
    pub const InternalInfo = objc.ExternalClass("NSClassDescription", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn registerClassDescriptionForClass(self: *@This(), description: ?*ClassDescription, aClass: *objc.Class) void {
        return objc.msgSend(self, "registerClassDescription:forClass:", void, .{description, aClass});
    }

    pub fn invalidateClassDescriptionCache(self: *@This()) void {
        return objc.msgSend(self, "invalidateClassDescriptionCache", void, .{});
    }

    pub fn classDescriptionForClass(self: *@This(), aClass: *objc.Class) ?*ClassDescription {
        return objc.msgSend(self, "classDescriptionForClass:", ?*ClassDescription, .{aClass});
    }

    pub fn inverseForRelationshipKey(self: *@This(), relationshipKey: ?*String) ?*String {
        return objc.msgSend(self, "inverseForRelationshipKey:", ?*String, .{relationshipKey});
    }

    pub fn attributeKeys(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "attributeKeys", ?*anyopaque, .{});
    }

    pub fn toOneRelationshipKeys(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "toOneRelationshipKeys", ?*anyopaque, .{});
    }

    pub fn toManyRelationshipKeys(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "toManyRelationshipKeys", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSDistributedLock?language=objc
pub const DistributedLock = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDistributedLock", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn lockWithPath(self: *@This(), path: ?*String) ?*DistributedLock {
        return objc.msgSend(self, "lockWithPath:", ?*DistributedLock, .{path});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithPath(self: *@This(), path: ?*String) *@This() {
        return objc.msgSend(self, "initWithPath:", *@This(), .{path});
    }

    pub fn tryLock(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "tryLock", objc.BOOL, .{});
    }

    pub fn unlock(self: *@This()) void {
        return objc.msgSend(self, "unlock", void, .{});
    }

    pub fn breakLock(self: *@This()) void {
        return objc.msgSend(self, "breakLock", void, .{});
    }

    pub fn lockDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "lockDate", ?*Date, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSGarbageCollector?language=objc
pub const GarbageCollector = opaque {
    pub const InternalInfo = objc.ExternalClass("NSGarbageCollector", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn defaultCollector(self: *@This()) *objc.Id {
        return objc.msgSend(self, "defaultCollector", *objc.Id, .{});
    }

    pub fn isCollecting(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isCollecting", objc.BOOL, .{});
    }

    pub fn disable(self: *@This()) void {
        return objc.msgSend(self, "disable", void, .{});
    }

    pub fn enable(self: *@This()) void {
        return objc.msgSend(self, "enable", void, .{});
    }

    pub fn isEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEnabled", objc.BOOL, .{});
    }

    pub fn collectIfNeeded(self: *@This()) void {
        return objc.msgSend(self, "collectIfNeeded", void, .{});
    }

    pub fn collectExhaustively(self: *@This()) void {
        return objc.msgSend(self, "collectExhaustively", void, .{});
    }

    pub fn disableCollectorForPointer(self: *@This(), ptr: ?*anyopaque) void {
        return objc.msgSend(self, "disableCollectorForPointer:", void, .{ptr});
    }

    pub fn enableCollectorForPointer(self: *@This(), ptr: ?*anyopaque) void {
        return objc.msgSend(self, "enableCollectorForPointer:", void, .{ptr});
    }

    pub fn zone(self: *@This()) ?*Zone {
        return objc.msgSend(self, "zone", ?*Zone, .{});
    }

};

pub extern "Foundation" fn FileTypeForHFSTypeCode(hfsFileTypeCode: objc.OSType) callconv(.C) ?*String;

pub extern "Foundation" fn HFSTypeCodeFromFileType(fileTypeString: ?*String) callconv(.C) objc.OSType;

pub extern "Foundation" fn HFSTypeOfFile(fullFilePath: ?*String) callconv(.C) ?*String;

/// https://developer.apple.com/documentation/Foundation/NSHost?language=objc
pub const Host = opaque {
    pub const InternalInfo = objc.ExternalClass("NSHost", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn currentHost(self: *@This()) *@This() {
        return objc.msgSend(self, "currentHost", *@This(), .{});
    }

    pub fn hostWithName(self: *@This(), name: ?*String) *@This() {
        return objc.msgSend(self, "hostWithName:", *@This(), .{name});
    }

    pub fn hostWithAddress(self: *@This(), address: ?*String) *@This() {
        return objc.msgSend(self, "hostWithAddress:", *@This(), .{address});
    }

    pub fn isEqualToHost(self: *@This(), aHost: ?*Host) objc.BOOL {
        return objc.msgSend(self, "isEqualToHost:", objc.BOOL, .{aHost});
    }

    pub fn setHostCacheEnabled(self: *@This(), flag: objc.BOOL) void {
        return objc.msgSend(self, "setHostCacheEnabled:", void, .{flag});
    }

    pub fn isHostCacheEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isHostCacheEnabled", objc.BOOL, .{});
    }

    pub fn flushHostCache(self: *@This()) void {
        return objc.msgSend(self, "flushHostCache", void, .{});
    }

    pub fn name(self: *@This()) ?*String {
        return objc.msgSend(self, "name", ?*String, .{});
    }

    pub fn names(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "names", ?*anyopaque, .{});
    }

    pub fn address(self: *@This()) ?*String {
        return objc.msgSend(self, "address", ?*String, .{});
    }

    pub fn addresses(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "addresses", ?*anyopaque, .{});
    }

    pub fn localizedName(self: *@This()) ?*String {
        return objc.msgSend(self, "localizedName", ?*String, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSScriptClassDescription?language=objc
pub const ScriptClassDescription = opaque {
    pub const InternalInfo = objc.ExternalClass("NSScriptClassDescription", @This(), ClassDescription, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn classDescriptionForClass(self: *@This(), aClass: *objc.Class) ?*ScriptClassDescription {
        return objc.msgSend(self, "classDescriptionForClass:", ?*ScriptClassDescription, .{aClass});
    }

    pub fn initWithSuiteNameClassNameDictionary(self: *@This(), suiteName: ?*String, className: ?*String, classDeclaration: ?*Dictionary) *@This() {
        return objc.msgSend(self, "initWithSuiteName:className:dictionary:", *@This(), .{suiteName, className, classDeclaration});
    }

    pub fn matchesAppleEventCode(self: *@This(), appleEventCode: objc.FourCharCode) objc.BOOL {
        return objc.msgSend(self, "matchesAppleEventCode:", objc.BOOL, .{appleEventCode});
    }

    pub fn supportsCommand(self: *@This(), commandDescription: ?*ScriptCommandDescription) objc.BOOL {
        return objc.msgSend(self, "supportsCommand:", objc.BOOL, .{commandDescription});
    }

    pub fn selectorForCommand(self: *@This(), commandDescription: ?*ScriptCommandDescription) *objc.SEL {
        return objc.msgSend(self, "selectorForCommand:", *objc.SEL, .{commandDescription});
    }

    pub fn typeForKey(self: *@This(), key: ?*String) ?*String {
        return objc.msgSend(self, "typeForKey:", ?*String, .{key});
    }

    pub fn classDescriptionForKey(self: *@This(), key: ?*String) ?*ScriptClassDescription {
        return objc.msgSend(self, "classDescriptionForKey:", ?*ScriptClassDescription, .{key});
    }

    pub fn appleEventCodeForKey(self: *@This(), key: ?*String) objc.FourCharCode {
        return objc.msgSend(self, "appleEventCodeForKey:", objc.FourCharCode, .{key});
    }

    pub fn keyWithAppleEventCode(self: *@This(), appleEventCode: objc.FourCharCode) ?*String {
        return objc.msgSend(self, "keyWithAppleEventCode:", ?*String, .{appleEventCode});
    }

    pub fn isLocationRequiredToCreateForKey(self: *@This(), toManyRelationshipKey: ?*String) objc.BOOL {
        return objc.msgSend(self, "isLocationRequiredToCreateForKey:", objc.BOOL, .{toManyRelationshipKey});
    }

    pub fn hasPropertyForKey(self: *@This(), key: ?*String) objc.BOOL {
        return objc.msgSend(self, "hasPropertyForKey:", objc.BOOL, .{key});
    }

    pub fn hasOrderedToManyRelationshipForKey(self: *@This(), key: ?*String) objc.BOOL {
        return objc.msgSend(self, "hasOrderedToManyRelationshipForKey:", objc.BOOL, .{key});
    }

    pub fn hasReadablePropertyForKey(self: *@This(), key: ?*String) objc.BOOL {
        return objc.msgSend(self, "hasReadablePropertyForKey:", objc.BOOL, .{key});
    }

    pub fn hasWritablePropertyForKey(self: *@This(), key: ?*String) objc.BOOL {
        return objc.msgSend(self, "hasWritablePropertyForKey:", objc.BOOL, .{key});
    }

    pub fn suiteName(self: *@This()) ?*String {
        return objc.msgSend(self, "suiteName", ?*String, .{});
    }

    pub fn className(self: *@This()) ?*String {
        return objc.msgSend(self, "className", ?*String, .{});
    }

    pub fn implementationClassName(self: *@This()) ?*String {
        return objc.msgSend(self, "implementationClassName", ?*String, .{});
    }

    pub fn superclassDescription(self: *@This()) ?*ScriptClassDescription {
        return objc.msgSend(self, "superclassDescription", ?*ScriptClassDescription, .{});
    }

    pub fn appleEventCode(self: *@This()) objc.FourCharCode {
        return objc.msgSend(self, "appleEventCode", objc.FourCharCode, .{});
    }

    pub fn defaultSubcontainerAttributeKey(self: *@This()) ?*String {
        return objc.msgSend(self, "defaultSubcontainerAttributeKey", ?*String, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSScriptCoercionHandler?language=objc
pub const ScriptCoercionHandler = opaque {
    pub const InternalInfo = objc.ExternalClass("NSScriptCoercionHandler", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn sharedCoercionHandler(self: *@This()) ?*ScriptCoercionHandler {
        return objc.msgSend(self, "sharedCoercionHandler", ?*ScriptCoercionHandler, .{});
    }

    pub fn coerceValueToClass(self: *@This(), value: *objc.Id, toClass: *objc.Class) *objc.Id {
        return objc.msgSend(self, "coerceValue:toClass:", *objc.Id, .{value, toClass});
    }

    pub fn registerCoercerSelectorToConvertFromClassToClass(self: *@This(), coercer: *objc.Id, selector: *objc.SEL, fromClass: *objc.Class, toClass: *objc.Class, ) void {
        return objc.msgSend(self, "registerCoercer:selector:toConvertFromClass:toClass:", void, .{coercer, selector, fromClass, toClass, });
    }

};

pub const anon131 = enum(objc.NSInteger) {
    NSNoSpecifierError = 0,
    NSNoTopLevelContainersSpecifierError = 1,
    NSContainerSpecifierError = 2,
    NSUnknownKeySpecifierError = 3,
    NSInvalidIndexSpecifierError = 4,
    NSInternalSpecifierError = 5,
    NSOperationNotSupportedForKeySpecifierError = 6,
};

/// https://developer.apple.com/documentation/Foundation/NSScriptCommand?language=objc
pub const ScriptCommand = opaque {
    pub const InternalInfo = objc.ExternalClass("NSScriptCommand", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithCommandDescription(self: *@This(), commandDef: ?*ScriptCommandDescription) *@This() {
        return objc.msgSend(self, "initWithCommandDescription:", *@This(), .{commandDef});
    }

    pub fn initWithCoder(self: *@This(), inCoder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{inCoder});
    }

    pub fn performDefaultImplementation(self: *@This()) *objc.Id {
        return objc.msgSend(self, "performDefaultImplementation", *objc.Id, .{});
    }

    pub fn executeCommand(self: *@This()) *objc.Id {
        return objc.msgSend(self, "executeCommand", *objc.Id, .{});
    }

    pub fn currentCommand(self: *@This()) ?*ScriptCommand {
        return objc.msgSend(self, "currentCommand", ?*ScriptCommand, .{});
    }

    pub fn suspendExecution(self: *@This()) void {
        return objc.msgSend(self, "suspendExecution", void, .{});
    }

    pub fn resumeExecutionWithResult(self: *@This(), result: *objc.Id) void {
        return objc.msgSend(self, "resumeExecutionWithResult:", void, .{result});
    }

    pub fn commandDescription(self: *@This()) ?*ScriptCommandDescription {
        return objc.msgSend(self, "commandDescription", ?*ScriptCommandDescription, .{});
    }

    pub fn directParameter(self: *@This()) *objc.Id {
        return objc.msgSend(self, "directParameter", *objc.Id, .{});
    }

    pub fn setDirectParameter(self: *@This(), directParameter: *objc.Id) void {
        return objc.msgSend(self, "setDirectParameter:", void, .{directParameter});
    }

    pub fn receiversSpecifier(self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(self, "receiversSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setReceiversSpecifier(self: *@This(), receiversSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(self, "setReceiversSpecifier:", void, .{receiversSpecifier});
    }

    pub fn evaluatedReceivers(self: *@This()) *objc.Id {
        return objc.msgSend(self, "evaluatedReceivers", *objc.Id, .{});
    }

    pub fn arguments(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "arguments", ?*anyopaque, .{});
    }

    pub fn setArguments(self: *@This(), arguments: ?*anyopaque) void {
        return objc.msgSend(self, "setArguments:", void, .{arguments});
    }

    pub fn evaluatedArguments(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "evaluatedArguments", ?*anyopaque, .{});
    }

    pub fn isWellFormed(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isWellFormed", objc.BOOL, .{});
    }

    pub fn scriptErrorNumber(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "scriptErrorNumber", objc.NSInteger, .{});
    }

    pub fn setScriptErrorNumber(self: *@This(), scriptErrorNumber: objc.NSInteger) void {
        return objc.msgSend(self, "setScriptErrorNumber:", void, .{scriptErrorNumber});
    }

    pub fn scriptErrorOffendingObjectDescriptor(self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(self, "scriptErrorOffendingObjectDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn setScriptErrorOffendingObjectDescriptor(self: *@This(), scriptErrorOffendingObjectDescriptor: ?*AppleEventDescriptor) void {
        return objc.msgSend(self, "setScriptErrorOffendingObjectDescriptor:", void, .{scriptErrorOffendingObjectDescriptor});
    }

    pub fn scriptErrorExpectedTypeDescriptor(self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(self, "scriptErrorExpectedTypeDescriptor", ?*AppleEventDescriptor, .{});
    }

    pub fn setScriptErrorExpectedTypeDescriptor(self: *@This(), scriptErrorExpectedTypeDescriptor: ?*AppleEventDescriptor) void {
        return objc.msgSend(self, "setScriptErrorExpectedTypeDescriptor:", void, .{scriptErrorExpectedTypeDescriptor});
    }

    pub fn scriptErrorString(self: *@This()) ?*String {
        return objc.msgSend(self, "scriptErrorString", ?*String, .{});
    }

    pub fn setScriptErrorString(self: *@This(), scriptErrorString: ?*String) void {
        return objc.msgSend(self, "setScriptErrorString:", void, .{scriptErrorString});
    }

    pub fn appleEvent(self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(self, "appleEvent", ?*AppleEventDescriptor, .{});
    }

};

pub const anon375 = extern struct {
    hasEvaluatedReceivers: u32,
    hasEvaluatedArguments: u32,
    RESERVED: u32,
};

/// https://developer.apple.com/documentation/Foundation/NSScriptCommandDescription?language=objc
pub const ScriptCommandDescription = opaque {
    pub const InternalInfo = objc.ExternalClass("NSScriptCommandDescription", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *objc.Id {
        return objc.msgSend(self, "init", *objc.Id, .{});
    }

    pub fn initWithSuiteNameCommandNameDictionary(self: *@This(), suiteName: ?*String, commandName: ?*String, commandDeclaration: ?*Dictionary) *@This() {
        return objc.msgSend(self, "initWithSuiteName:commandName:dictionary:", *@This(), .{suiteName, commandName, commandDeclaration});
    }

    pub fn initWithCoder(self: *@This(), inCoder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{inCoder});
    }

    pub fn typeForArgumentWithName(self: *@This(), argumentName: ?*String) ?*String {
        return objc.msgSend(self, "typeForArgumentWithName:", ?*String, .{argumentName});
    }

    pub fn appleEventCodeForArgumentWithName(self: *@This(), argumentName: ?*String) objc.FourCharCode {
        return objc.msgSend(self, "appleEventCodeForArgumentWithName:", objc.FourCharCode, .{argumentName});
    }

    pub fn isOptionalArgumentWithName(self: *@This(), argumentName: ?*String) objc.BOOL {
        return objc.msgSend(self, "isOptionalArgumentWithName:", objc.BOOL, .{argumentName});
    }

    pub fn createCommandInstance(self: *@This()) ?*ScriptCommand {
        return objc.msgSend(self, "createCommandInstance", ?*ScriptCommand, .{});
    }

    pub fn createCommandInstanceWithZone(self: *@This(), zone: ?*Zone) ?*ScriptCommand {
        return objc.msgSend(self, "createCommandInstanceWithZone:", ?*ScriptCommand, .{zone});
    }

    pub fn suiteName(self: *@This()) ?*String {
        return objc.msgSend(self, "suiteName", ?*String, .{});
    }

    pub fn commandName(self: *@This()) ?*String {
        return objc.msgSend(self, "commandName", ?*String, .{});
    }

    pub fn appleEventClassCode(self: *@This()) objc.FourCharCode {
        return objc.msgSend(self, "appleEventClassCode", objc.FourCharCode, .{});
    }

    pub fn appleEventCode(self: *@This()) objc.FourCharCode {
        return objc.msgSend(self, "appleEventCode", objc.FourCharCode, .{});
    }

    pub fn commandClassName(self: *@This()) ?*String {
        return objc.msgSend(self, "commandClassName", ?*String, .{});
    }

    pub fn returnType(self: *@This()) ?*String {
        return objc.msgSend(self, "returnType", ?*String, .{});
    }

    pub fn appleEventCodeForReturnType(self: *@This()) objc.FourCharCode {
        return objc.msgSend(self, "appleEventCodeForReturnType", objc.FourCharCode, .{});
    }

    pub fn argumentNames(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "argumentNames", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSScriptExecutionContext?language=objc
pub const ScriptExecutionContext = opaque {
    pub const InternalInfo = objc.ExternalClass("NSScriptExecutionContext", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn sharedScriptExecutionContext(self: *@This()) ?*ScriptExecutionContext {
        return objc.msgSend(self, "sharedScriptExecutionContext", ?*ScriptExecutionContext, .{});
    }

    pub fn topLevelObject(self: *@This()) *objc.Id {
        return objc.msgSend(self, "topLevelObject", *objc.Id, .{});
    }

    pub fn setTopLevelObject(self: *@This(), topLevelObject: *objc.Id) void {
        return objc.msgSend(self, "setTopLevelObject:", void, .{topLevelObject});
    }

    pub fn objectBeingTested(self: *@This()) *objc.Id {
        return objc.msgSend(self, "objectBeingTested", *objc.Id, .{});
    }

    pub fn setObjectBeingTested(self: *@This(), objectBeingTested: *objc.Id) void {
        return objc.msgSend(self, "setObjectBeingTested:", void, .{objectBeingTested});
    }

    pub fn rangeContainerObject(self: *@This()) *objc.Id {
        return objc.msgSend(self, "rangeContainerObject", *objc.Id, .{});
    }

    pub fn setRangeContainerObject(self: *@This(), rangeContainerObject: *objc.Id) void {
        return objc.msgSend(self, "setRangeContainerObject:", void, .{rangeContainerObject});
    }

};

pub const InsertionPosition = enum(objc.NSUInteger) {
    PositionAfter = 0,
    PositionBefore = 1,
    PositionBeginning = 2,
    PositionEnd = 3,
    PositionReplace = 4,
};

pub const RelativePosition = enum(objc.NSUInteger) {
    After = 0,
    Before = 1,
};

pub const WhoseSubelementIdentifier = enum(objc.NSUInteger) {
    IndexSubelement = 0,
    EverySubelement = 1,
    MiddleSubelement = 2,
    RandomSubelement = 3,
    NoSubelement = 4,
};

/// https://developer.apple.com/documentation/Foundation/NSScriptObjectSpecifier?language=objc
pub const ScriptObjectSpecifier = opaque {
    pub const InternalInfo = objc.ExternalClass("NSScriptObjectSpecifier", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn objectSpecifierWithDescriptor(self: *@This(), descriptor: ?*AppleEventDescriptor) ?*ScriptObjectSpecifier {
        return objc.msgSend(self, "objectSpecifierWithDescriptor:", ?*ScriptObjectSpecifier, .{descriptor});
    }

    pub fn initWithContainerSpecifierKey(self: *@This(), container: ?*ScriptObjectSpecifier, property: ?*String) *@This() {
        return objc.msgSend(self, "initWithContainerSpecifier:key:", *@This(), .{container, property});
    }

    pub fn initWithContainerClassDescriptionContainerSpecifierKey(self: *@This(), classDesc: ?*ScriptClassDescription, container: ?*ScriptObjectSpecifier, property: ?*String) *@This() {
        return objc.msgSend(self, "initWithContainerClassDescription:containerSpecifier:key:", *@This(), .{classDesc, container, property});
    }

    pub fn initWithCoder(self: *@This(), inCoder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{inCoder});
    }

    pub fn indicesOfObjectsByEvaluatingWithContainerCount(self: *@This(), container: *objc.Id, count: ?*objc.NSInteger) ?*objc.NSInteger {
        return objc.msgSend(self, "indicesOfObjectsByEvaluatingWithContainer:count:", ?*objc.NSInteger, .{container, count});
    }

    pub fn objectsByEvaluatingWithContainers(self: *@This(), containers: *objc.Id) *objc.Id {
        return objc.msgSend(self, "objectsByEvaluatingWithContainers:", *objc.Id, .{containers});
    }

    pub fn childSpecifier(self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(self, "childSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setChildSpecifier(self: *@This(), childSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(self, "setChildSpecifier:", void, .{childSpecifier});
    }

    pub fn containerSpecifier(self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(self, "containerSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setContainerSpecifier(self: *@This(), containerSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(self, "setContainerSpecifier:", void, .{containerSpecifier});
    }

    pub fn containerIsObjectBeingTested(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "containerIsObjectBeingTested", objc.BOOL, .{});
    }

    pub fn setContainerIsObjectBeingTested(self: *@This(), containerIsObjectBeingTested: objc.BOOL) void {
        return objc.msgSend(self, "setContainerIsObjectBeingTested:", void, .{containerIsObjectBeingTested});
    }

    pub fn containerIsRangeContainerObject(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "containerIsRangeContainerObject", objc.BOOL, .{});
    }

    pub fn setContainerIsRangeContainerObject(self: *@This(), containerIsRangeContainerObject: objc.BOOL) void {
        return objc.msgSend(self, "setContainerIsRangeContainerObject:", void, .{containerIsRangeContainerObject});
    }

    pub fn key(self: *@This()) ?*String {
        return objc.msgSend(self, "key", ?*String, .{});
    }

    pub fn setKey(self: *@This(), key: ?*String) void {
        return objc.msgSend(self, "setKey:", void, .{key});
    }

    pub fn containerClassDescription(self: *@This()) ?*ScriptClassDescription {
        return objc.msgSend(self, "containerClassDescription", ?*ScriptClassDescription, .{});
    }

    pub fn setContainerClassDescription(self: *@This(), containerClassDescription: ?*ScriptClassDescription) void {
        return objc.msgSend(self, "setContainerClassDescription:", void, .{containerClassDescription});
    }

    pub fn keyClassDescription(self: *@This()) ?*ScriptClassDescription {
        return objc.msgSend(self, "keyClassDescription", ?*ScriptClassDescription, .{});
    }

    pub fn objectsByEvaluatingSpecifier(self: *@This()) *objc.Id {
        return objc.msgSend(self, "objectsByEvaluatingSpecifier", *objc.Id, .{});
    }

    pub fn evaluationErrorNumber(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "evaluationErrorNumber", objc.NSInteger, .{});
    }

    pub fn setEvaluationErrorNumber(self: *@This(), evaluationErrorNumber: objc.NSInteger) void {
        return objc.msgSend(self, "setEvaluationErrorNumber:", void, .{evaluationErrorNumber});
    }

    pub fn evaluationErrorSpecifier(self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(self, "evaluationErrorSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn descriptor(self: *@This()) ?*AppleEventDescriptor {
        return objc.msgSend(self, "descriptor", ?*AppleEventDescriptor, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSIndexSpecifier?language=objc
pub const IndexSpecifier = opaque {
    pub const InternalInfo = objc.ExternalClass("NSIndexSpecifier", @This(), ScriptObjectSpecifier, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithContainerClassDescriptionContainerSpecifierKeyIndex(self: *@This(), classDesc: ?*ScriptClassDescription, container: ?*ScriptObjectSpecifier, property: ?*String, index: objc.NSInteger, ) *@This() {
        return objc.msgSend(self, "initWithContainerClassDescription:containerSpecifier:key:index:", *@This(), .{classDesc, container, property, index, });
    }

    pub fn index(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "index", objc.NSInteger, .{});
    }

    pub fn setIndex(self: *@This(), index: objc.NSInteger) void {
        return objc.msgSend(self, "setIndex:", void, .{index});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSMiddleSpecifier?language=objc
pub const MiddleSpecifier = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMiddleSpecifier", @This(), ScriptObjectSpecifier, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;
};

/// https://developer.apple.com/documentation/Foundation/NSNameSpecifier?language=objc
pub const NameSpecifier = opaque {
    pub const InternalInfo = objc.ExternalClass("NSNameSpecifier", @This(), ScriptObjectSpecifier, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithCoder(self: *@This(), inCoder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{inCoder});
    }

    pub fn initWithContainerClassDescriptionContainerSpecifierKeyName(self: *@This(), classDesc: ?*ScriptClassDescription, container: ?*ScriptObjectSpecifier, property: ?*String, name: ?*String, ) *@This() {
        return objc.msgSend(self, "initWithContainerClassDescription:containerSpecifier:key:name:", *@This(), .{classDesc, container, property, name, });
    }

    pub fn name(self: *@This()) ?*String {
        return objc.msgSend(self, "name", ?*String, .{});
    }

    pub fn setName(self: *@This(), name: ?*String) void {
        return objc.msgSend(self, "setName:", void, .{name});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSPositionalSpecifier?language=objc
pub const PositionalSpecifier = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPositionalSpecifier", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithPositionObjectSpecifier(self: *@This(), position: InsertionPosition, specifier: ?*ScriptObjectSpecifier) *@This() {
        return objc.msgSend(self, "initWithPosition:objectSpecifier:", *@This(), .{position, specifier});
    }

    pub fn setInsertionClassDescription(self: *@This(), classDescription: ?*ScriptClassDescription) void {
        return objc.msgSend(self, "setInsertionClassDescription:", void, .{classDescription});
    }

    pub fn evaluate(self: *@This()) void {
        return objc.msgSend(self, "evaluate", void, .{});
    }

    pub fn position(self: *@This()) InsertionPosition {
        return objc.msgSend(self, "position", InsertionPosition, .{});
    }

    pub fn objectSpecifier(self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(self, "objectSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn insertionContainer(self: *@This()) *objc.Id {
        return objc.msgSend(self, "insertionContainer", *objc.Id, .{});
    }

    pub fn insertionKey(self: *@This()) ?*String {
        return objc.msgSend(self, "insertionKey", ?*String, .{});
    }

    pub fn insertionIndex(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "insertionIndex", objc.NSInteger, .{});
    }

    pub fn insertionReplaces(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "insertionReplaces", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSPropertySpecifier?language=objc
pub const PropertySpecifier = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPropertySpecifier", @This(), ScriptObjectSpecifier, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;
};

/// https://developer.apple.com/documentation/Foundation/NSRandomSpecifier?language=objc
pub const RandomSpecifier = opaque {
    pub const InternalInfo = objc.ExternalClass("NSRandomSpecifier", @This(), ScriptObjectSpecifier, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;
};

/// https://developer.apple.com/documentation/Foundation/NSRangeSpecifier?language=objc
pub const RangeSpecifier = opaque {
    pub const InternalInfo = objc.ExternalClass("NSRangeSpecifier", @This(), ScriptObjectSpecifier, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithCoder(self: *@This(), inCoder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{inCoder});
    }

    pub fn initWithContainerClassDescriptionContainerSpecifierKeyStartSpecifierEndSpecifier(self: *@This(), classDesc: ?*ScriptClassDescription, container: ?*ScriptObjectSpecifier, property: ?*String, startSpec: ?*ScriptObjectSpecifier, endSpec: ?*ScriptObjectSpecifier, ) *@This() {
        return objc.msgSend(self, "initWithContainerClassDescription:containerSpecifier:key:startSpecifier:endSpecifier:", *@This(), .{classDesc, container, property, startSpec, endSpec, });
    }

    pub fn startSpecifier(self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(self, "startSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setStartSpecifier(self: *@This(), startSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(self, "setStartSpecifier:", void, .{startSpecifier});
    }

    pub fn endSpecifier(self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(self, "endSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setEndSpecifier(self: *@This(), endSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(self, "setEndSpecifier:", void, .{endSpecifier});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSRelativeSpecifier?language=objc
pub const RelativeSpecifier = opaque {
    pub const InternalInfo = objc.ExternalClass("NSRelativeSpecifier", @This(), ScriptObjectSpecifier, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithCoder(self: *@This(), inCoder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{inCoder});
    }

    pub fn initWithContainerClassDescriptionContainerSpecifierKeyRelativePositionBaseSpecifier(self: *@This(), classDesc: ?*ScriptClassDescription, container: ?*ScriptObjectSpecifier, property: ?*String, relPos: RelativePosition, baseSpecifier: ?*ScriptObjectSpecifier, ) *@This() {
        return objc.msgSend(self, "initWithContainerClassDescription:containerSpecifier:key:relativePosition:baseSpecifier:", *@This(), .{classDesc, container, property, relPos, baseSpecifier, });
    }

    pub fn relativePosition(self: *@This()) RelativePosition {
        return objc.msgSend(self, "relativePosition", RelativePosition, .{});
    }

    pub fn setRelativePosition(self: *@This(), relativePosition: RelativePosition) void {
        return objc.msgSend(self, "setRelativePosition:", void, .{relativePosition});
    }

    pub fn baseSpecifier(self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(self, "baseSpecifier", ?*ScriptObjectSpecifier, .{});
    }

    pub fn setBaseSpecifier(self: *@This(), baseSpecifier: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(self, "setBaseSpecifier:", void, .{baseSpecifier});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUniqueIDSpecifier?language=objc
pub const UniqueIDSpecifier = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUniqueIDSpecifier", @This(), ScriptObjectSpecifier, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithCoder(self: *@This(), inCoder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{inCoder});
    }

    pub fn initWithContainerClassDescriptionContainerSpecifierKeyUniqueID(self: *@This(), classDesc: ?*ScriptClassDescription, container: ?*ScriptObjectSpecifier, property: ?*String, uniqueID: *objc.Id, ) *@This() {
        return objc.msgSend(self, "initWithContainerClassDescription:containerSpecifier:key:uniqueID:", *@This(), .{classDesc, container, property, uniqueID, });
    }

    pub fn uniqueID(self: *@This()) *objc.Id {
        return objc.msgSend(self, "uniqueID", *objc.Id, .{});
    }

    pub fn setUniqueID(self: *@This(), uniqueID: *objc.Id) void {
        return objc.msgSend(self, "setUniqueID:", void, .{uniqueID});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSWhoseSpecifier?language=objc
pub const WhoseSpecifier = opaque {
    pub const InternalInfo = objc.ExternalClass("NSWhoseSpecifier", @This(), ScriptObjectSpecifier, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithCoder(self: *@This(), inCoder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{inCoder});
    }

    pub fn initWithContainerClassDescriptionContainerSpecifierKeyTest(self: *@This(), classDesc: ?*ScriptClassDescription, container: ?*ScriptObjectSpecifier, property: ?*String, test: ?*ScriptWhoseTest, ) *@This() {
        return objc.msgSend(self, "initWithContainerClassDescription:containerSpecifier:key:test:", *@This(), .{classDesc, container, property, test, });
    }

    pub fn test(self: *@This()) ?*ScriptWhoseTest {
        return objc.msgSend(self, "test", ?*ScriptWhoseTest, .{});
    }

    pub fn setTest(self: *@This(), test: ?*ScriptWhoseTest) void {
        return objc.msgSend(self, "setTest:", void, .{test});
    }

    pub fn startSubelementIdentifier(self: *@This()) WhoseSubelementIdentifier {
        return objc.msgSend(self, "startSubelementIdentifier", WhoseSubelementIdentifier, .{});
    }

    pub fn setStartSubelementIdentifier(self: *@This(), startSubelementIdentifier: WhoseSubelementIdentifier) void {
        return objc.msgSend(self, "setStartSubelementIdentifier:", void, .{startSubelementIdentifier});
    }

    pub fn startSubelementIndex(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "startSubelementIndex", objc.NSInteger, .{});
    }

    pub fn setStartSubelementIndex(self: *@This(), startSubelementIndex: objc.NSInteger) void {
        return objc.msgSend(self, "setStartSubelementIndex:", void, .{startSubelementIndex});
    }

    pub fn endSubelementIdentifier(self: *@This()) WhoseSubelementIdentifier {
        return objc.msgSend(self, "endSubelementIdentifier", WhoseSubelementIdentifier, .{});
    }

    pub fn setEndSubelementIdentifier(self: *@This(), endSubelementIdentifier: WhoseSubelementIdentifier) void {
        return objc.msgSend(self, "setEndSubelementIdentifier:", void, .{endSubelementIdentifier});
    }

    pub fn endSubelementIndex(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "endSubelementIndex", objc.NSInteger, .{});
    }

    pub fn setEndSubelementIndex(self: *@This(), endSubelementIndex: objc.NSInteger) void {
        return objc.msgSend(self, "setEndSubelementIndex:", void, .{endSubelementIndex});
    }

};

pub const SaveOptions = enum(objc.NSUInteger) {
    Yes = 0,
    No = 1,
    Ask = 2,
};

/// https://developer.apple.com/documentation/Foundation/NSCloneCommand?language=objc
pub const CloneCommand = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCloneCommand", @This(), ScriptCommand, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn setReceiversSpecifier(self: *@This(), receiversRef: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(self, "setReceiversSpecifier:", void, .{receiversRef});
    }

    pub fn keySpecifier(self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(self, "keySpecifier", ?*ScriptObjectSpecifier, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSCloseCommand?language=objc
pub const CloseCommand = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCloseCommand", @This(), ScriptCommand, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn saveOptions(self: *@This()) SaveOptions {
        return objc.msgSend(self, "saveOptions", SaveOptions, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSCountCommand?language=objc
pub const CountCommand = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCountCommand", @This(), ScriptCommand, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;
};

/// https://developer.apple.com/documentation/Foundation/NSCreateCommand?language=objc
pub const CreateCommand = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCreateCommand", @This(), ScriptCommand, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn createClassDescription(self: *@This()) ?*ScriptClassDescription {
        return objc.msgSend(self, "createClassDescription", ?*ScriptClassDescription, .{});
    }

    pub fn resolvedKeyDictionary(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "resolvedKeyDictionary", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSDeleteCommand?language=objc
pub const DeleteCommand = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDeleteCommand", @This(), ScriptCommand, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn setReceiversSpecifier(self: *@This(), receiversRef: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(self, "setReceiversSpecifier:", void, .{receiversRef});
    }

    pub fn keySpecifier(self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(self, "keySpecifier", ?*ScriptObjectSpecifier, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSExistsCommand?language=objc
pub const ExistsCommand = opaque {
    pub const InternalInfo = objc.ExternalClass("NSExistsCommand", @This(), ScriptCommand, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;
};

/// https://developer.apple.com/documentation/Foundation/NSGetCommand?language=objc
pub const GetCommand = opaque {
    pub const InternalInfo = objc.ExternalClass("NSGetCommand", @This(), ScriptCommand, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;
};

/// https://developer.apple.com/documentation/Foundation/NSMoveCommand?language=objc
pub const MoveCommand = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMoveCommand", @This(), ScriptCommand, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn setReceiversSpecifier(self: *@This(), receiversRef: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(self, "setReceiversSpecifier:", void, .{receiversRef});
    }

    pub fn keySpecifier(self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(self, "keySpecifier", ?*ScriptObjectSpecifier, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSQuitCommand?language=objc
pub const QuitCommand = opaque {
    pub const InternalInfo = objc.ExternalClass("NSQuitCommand", @This(), ScriptCommand, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn saveOptions(self: *@This()) SaveOptions {
        return objc.msgSend(self, "saveOptions", SaveOptions, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSSetCommand?language=objc
pub const SetCommand = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSetCommand", @This(), ScriptCommand, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn setReceiversSpecifier(self: *@This(), receiversRef: ?*ScriptObjectSpecifier) void {
        return objc.msgSend(self, "setReceiversSpecifier:", void, .{receiversRef});
    }

    pub fn keySpecifier(self: *@This()) ?*ScriptObjectSpecifier {
        return objc.msgSend(self, "keySpecifier", ?*ScriptObjectSpecifier, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSScriptSuiteRegistry?language=objc
pub const ScriptSuiteRegistry = opaque {
    pub const InternalInfo = objc.ExternalClass("NSScriptSuiteRegistry", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn sharedScriptSuiteRegistry(self: *@This()) ?*ScriptSuiteRegistry {
        return objc.msgSend(self, "sharedScriptSuiteRegistry", ?*ScriptSuiteRegistry, .{});
    }

    pub fn setSharedScriptSuiteRegistry(self: *@This(), registry: ?*ScriptSuiteRegistry) void {
        return objc.msgSend(self, "setSharedScriptSuiteRegistry:", void, .{registry});
    }

    pub fn loadSuitesFromBundle(self: *@This(), bundle: ?*Bundle) void {
        return objc.msgSend(self, "loadSuitesFromBundle:", void, .{bundle});
    }

    pub fn loadSuiteWithDictionaryFromBundle(self: *@This(), suiteDeclaration: ?*Dictionary, bundle: ?*Bundle) void {
        return objc.msgSend(self, "loadSuiteWithDictionary:fromBundle:", void, .{suiteDeclaration, bundle});
    }

    pub fn registerClassDescription(self: *@This(), classDescription: ?*ScriptClassDescription) void {
        return objc.msgSend(self, "registerClassDescription:", void, .{classDescription});
    }

    pub fn registerCommandDescription(self: *@This(), commandDescription: ?*ScriptCommandDescription) void {
        return objc.msgSend(self, "registerCommandDescription:", void, .{commandDescription});
    }

    pub fn appleEventCodeForSuite(self: *@This(), suiteName: ?*String) objc.FourCharCode {
        return objc.msgSend(self, "appleEventCodeForSuite:", objc.FourCharCode, .{suiteName});
    }

    pub fn bundleForSuite(self: *@This(), suiteName: ?*String) ?*Bundle {
        return objc.msgSend(self, "bundleForSuite:", ?*Bundle, .{suiteName});
    }

    pub fn classDescriptionsInSuite(self: *@This(), suiteName: ?*String) ?*anyopaque {
        return objc.msgSend(self, "classDescriptionsInSuite:", ?*anyopaque, .{suiteName});
    }

    pub fn commandDescriptionsInSuite(self: *@This(), suiteName: ?*String) ?*anyopaque {
        return objc.msgSend(self, "commandDescriptionsInSuite:", ?*anyopaque, .{suiteName});
    }

    pub fn suiteForAppleEventCode(self: *@This(), appleEventCode: objc.FourCharCode) ?*String {
        return objc.msgSend(self, "suiteForAppleEventCode:", ?*String, .{appleEventCode});
    }

    pub fn classDescriptionWithAppleEventCode(self: *@This(), appleEventCode: objc.FourCharCode) ?*ScriptClassDescription {
        return objc.msgSend(self, "classDescriptionWithAppleEventCode:", ?*ScriptClassDescription, .{appleEventCode});
    }

    pub fn commandDescriptionWithAppleEventClassAndAppleEventCode(self: *@This(), appleEventClassCode: objc.FourCharCode, appleEventIDCode: objc.FourCharCode) ?*ScriptCommandDescription {
        return objc.msgSend(self, "commandDescriptionWithAppleEventClass:andAppleEventCode:", ?*ScriptCommandDescription, .{appleEventClassCode, appleEventIDCode});
    }

    pub fn aeteResource(self: *@This(), languageName: ?*String) ?*Data {
        return objc.msgSend(self, "aeteResource:", ?*Data, .{languageName});
    }

    pub fn suiteNames(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "suiteNames", ?*anyopaque, .{});
    }

};

pub const TestComparisonOperation = enum(objc.NSUInteger) {
    EqualToComparison = 0,
    LessThanOrEqualToComparison = 1,
    LessThanComparison = 2,
    GreaterThanOrEqualToComparison = 3,
    GreaterThanComparison = 4,
    BeginsWithComparison = 5,
    EndsWithComparison = 6,
    ContainsComparison = 7,
};

/// https://developer.apple.com/documentation/Foundation/NSScriptWhoseTest?language=objc
pub const ScriptWhoseTest = opaque {
    pub const InternalInfo = objc.ExternalClass("NSScriptWhoseTest", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isTrue(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isTrue", objc.BOOL, .{});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithCoder(self: *@This(), inCoder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{inCoder});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSLogicalTest?language=objc
pub const LogicalTest = opaque {
    pub const InternalInfo = objc.ExternalClass("NSLogicalTest", @This(), ScriptWhoseTest, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initAndTestWithTests(self: *@This(), subTests: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initAndTestWithTests:", *@This(), .{subTests});
    }

    pub fn initOrTestWithTests(self: *@This(), subTests: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initOrTestWithTests:", *@This(), .{subTests});
    }

    pub fn initNotTestWithTest(self: *@This(), subTest: ?*ScriptWhoseTest) *@This() {
        return objc.msgSend(self, "initNotTestWithTest:", *@This(), .{subTest});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSSpecifierTest?language=objc
pub const SpecifierTest = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSpecifierTest", @This(), ScriptWhoseTest, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithCoder(self: *@This(), inCoder: ?*Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{inCoder});
    }

    pub fn initWithObjectSpecifierComparisonOperatorTestObject(self: *@This(), obj1: ?*ScriptObjectSpecifier, compOp: TestComparisonOperation, obj2: *objc.Id) *@This() {
        return objc.msgSend(self, "initWithObjectSpecifier:comparisonOperator:testObject:", *@This(), .{obj1, compOp, obj2});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSSpellServer?language=objc
pub const SpellServer = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSpellServer", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn registerLanguageByVendor(self: *@This(), language: ?*String, vendor: ?*String) objc.BOOL {
        return objc.msgSend(self, "registerLanguage:byVendor:", objc.BOOL, .{language, vendor});
    }

    pub fn isWordInUserDictionariesCaseSensitive(self: *@This(), word: ?*String, flag: objc.BOOL) objc.BOOL {
        return objc.msgSend(self, "isWordInUserDictionaries:caseSensitive:", objc.BOOL, .{word, flag});
    }

    pub fn run(self: *@This()) void {
        return objc.msgSend(self, "run", void, .{});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSSpellServerDelegate?language=objc
pub const SpellServerDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn spellServerFindMisspelledWordInStringLanguageWordCountCountOnly(self: *@This(), sender: ?*SpellServer, stringToCheck: ?*String, language: ?*String, wordCount: ?*objc.NSInteger, countOnly: objc.BOOL, ) Range {
        return objc.msgSend(self, "spellServer:findMisspelledWordInString:language:wordCount:countOnly:", Range, .{sender, stringToCheck, language, wordCount, countOnly, });
    }

    pub fn spellServerSuggestGuessesForWordInLanguage(self: *@This(), sender: ?*SpellServer, word: ?*String, language: ?*String) ?*anyopaque {
        return objc.msgSend(self, "spellServer:suggestGuessesForWord:inLanguage:", ?*anyopaque, .{sender, word, language});
    }

    pub fn spellServerDidLearnWordInLanguage(self: *@This(), sender: ?*SpellServer, word: ?*String, language: ?*String) void {
        return objc.msgSend(self, "spellServer:didLearnWord:inLanguage:", void, .{sender, word, language});
    }

    pub fn spellServerDidForgetWordInLanguage(self: *@This(), sender: ?*SpellServer, word: ?*String, language: ?*String) void {
        return objc.msgSend(self, "spellServer:didForgetWord:inLanguage:", void, .{sender, word, language});
    }

    pub fn spellServerSuggestCompletionsForPartialWordRangeInStringLanguage(self: *@This(), sender: ?*SpellServer, range: Range, string: ?*String, language: ?*String, ) ?*anyopaque {
        return objc.msgSend(self, "spellServer:suggestCompletionsForPartialWordRange:inString:language:", ?*anyopaque, .{sender, range, string, language, });
    }

    pub fn spellServerCheckGrammarInStringLanguageDetails(self: *@This(), sender: ?*SpellServer, stringToCheck: ?*String, language: ?*String, details: ?*?*anyopaque, ) Range {
        return objc.msgSend(self, "spellServer:checkGrammarInString:language:details:", Range, .{sender, stringToCheck, language, details, });
    }

    pub fn spellServerCheckStringOffsetTypesOptionsOrthographyWordCount(self: *@This(), sender: ?*SpellServer, stringToCheck: ?*String, offset: objc.NSUInteger, checkingTypes: TextCheckingTypes, options: ?*anyopaque, orthography: ?*Orthography, wordCount: ?*objc.NSInteger, ) ?*anyopaque {
        return objc.msgSend(self, "spellServer:checkString:offset:types:options:orthography:wordCount:", ?*anyopaque, .{sender, stringToCheck, offset, checkingTypes, options, orthography, wordCount, });
    }

    pub fn spellServerRecordResponseToCorrectionForWordLanguage(self: *@This(), sender: ?*SpellServer, response: objc.NSUInteger, correction: ?*String, word: ?*String, language: ?*String, ) void {
        return objc.msgSend(self, "spellServer:recordResponse:toCorrection:forWord:language:", void, .{sender, response, correction, word, language, });
    }

};

pub const UserNotificationActivationType = enum(objc.NSInteger) {
    None = 0,
    ContentsClicked = 1,
    ActionButtonClicked = 2,
    Replied = 3,
    AdditionalActionClicked = 4,
};

/// https://developer.apple.com/documentation/Foundation/NSUserNotification?language=objc
pub const UserNotification = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUserNotification", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn title(self: *@This()) ?*String {
        return objc.msgSend(self, "title", ?*String, .{});
    }

    pub fn setTitle(self: *@This(), title: ?*String) void {
        return objc.msgSend(self, "setTitle:", void, .{title});
    }

    pub fn subtitle(self: *@This()) ?*String {
        return objc.msgSend(self, "subtitle", ?*String, .{});
    }

    pub fn setSubtitle(self: *@This(), subtitle: ?*String) void {
        return objc.msgSend(self, "setSubtitle:", void, .{subtitle});
    }

    pub fn informativeText(self: *@This()) ?*String {
        return objc.msgSend(self, "informativeText", ?*String, .{});
    }

    pub fn setInformativeText(self: *@This(), informativeText: ?*String) void {
        return objc.msgSend(self, "setInformativeText:", void, .{informativeText});
    }

    pub fn actionButtonTitle(self: *@This()) ?*String {
        return objc.msgSend(self, "actionButtonTitle", ?*String, .{});
    }

    pub fn setActionButtonTitle(self: *@This(), actionButtonTitle: ?*String) void {
        return objc.msgSend(self, "setActionButtonTitle:", void, .{actionButtonTitle});
    }

    pub fn userInfo(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "userInfo", ?*anyopaque, .{});
    }

    pub fn setUserInfo(self: *@This(), userInfo: ?*anyopaque) void {
        return objc.msgSend(self, "setUserInfo:", void, .{userInfo});
    }

    pub fn deliveryDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "deliveryDate", ?*Date, .{});
    }

    pub fn setDeliveryDate(self: *@This(), deliveryDate: ?*Date) void {
        return objc.msgSend(self, "setDeliveryDate:", void, .{deliveryDate});
    }

    pub fn deliveryTimeZone(self: *@This()) ?*TimeZone {
        return objc.msgSend(self, "deliveryTimeZone", ?*TimeZone, .{});
    }

    pub fn setDeliveryTimeZone(self: *@This(), deliveryTimeZone: ?*TimeZone) void {
        return objc.msgSend(self, "setDeliveryTimeZone:", void, .{deliveryTimeZone});
    }

    pub fn deliveryRepeatInterval(self: *@This()) ?*DateComponents {
        return objc.msgSend(self, "deliveryRepeatInterval", ?*DateComponents, .{});
    }

    pub fn setDeliveryRepeatInterval(self: *@This(), deliveryRepeatInterval: ?*DateComponents) void {
        return objc.msgSend(self, "setDeliveryRepeatInterval:", void, .{deliveryRepeatInterval});
    }

    pub fn actualDeliveryDate(self: *@This()) ?*Date {
        return objc.msgSend(self, "actualDeliveryDate", ?*Date, .{});
    }

    pub fn isPresented(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isPresented", objc.BOOL, .{});
    }

    pub fn isRemote(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isRemote", objc.BOOL, .{});
    }

    pub fn soundName(self: *@This()) ?*String {
        return objc.msgSend(self, "soundName", ?*String, .{});
    }

    pub fn setSoundName(self: *@This(), soundName: ?*String) void {
        return objc.msgSend(self, "setSoundName:", void, .{soundName});
    }

    pub fn hasActionButton(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasActionButton", objc.BOOL, .{});
    }

    pub fn setHasActionButton(self: *@This(), hasActionButton: objc.BOOL) void {
        return objc.msgSend(self, "setHasActionButton:", void, .{hasActionButton});
    }

    pub fn activationType(self: *@This()) UserNotificationActivationType {
        return objc.msgSend(self, "activationType", UserNotificationActivationType, .{});
    }

    pub fn otherButtonTitle(self: *@This()) ?*String {
        return objc.msgSend(self, "otherButtonTitle", ?*String, .{});
    }

    pub fn setOtherButtonTitle(self: *@This(), otherButtonTitle: ?*String) void {
        return objc.msgSend(self, "setOtherButtonTitle:", void, .{otherButtonTitle});
    }

    pub fn identifier(self: *@This()) ?*String {
        return objc.msgSend(self, "identifier", ?*String, .{});
    }

    pub fn setIdentifier(self: *@This(), identifier: ?*String) void {
        return objc.msgSend(self, "setIdentifier:", void, .{identifier});
    }

    pub fn contentImage(self: *@This()) ?*Image {
        return objc.msgSend(self, "contentImage", ?*Image, .{});
    }

    pub fn setContentImage(self: *@This(), contentImage: ?*Image) void {
        return objc.msgSend(self, "setContentImage:", void, .{contentImage});
    }

    pub fn hasReplyButton(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasReplyButton", objc.BOOL, .{});
    }

    pub fn setHasReplyButton(self: *@This(), hasReplyButton: objc.BOOL) void {
        return objc.msgSend(self, "setHasReplyButton:", void, .{hasReplyButton});
    }

    pub fn responsePlaceholder(self: *@This()) ?*String {
        return objc.msgSend(self, "responsePlaceholder", ?*String, .{});
    }

    pub fn setResponsePlaceholder(self: *@This(), responsePlaceholder: ?*String) void {
        return objc.msgSend(self, "setResponsePlaceholder:", void, .{responsePlaceholder});
    }

    pub fn response(self: *@This()) ?*AttributedString {
        return objc.msgSend(self, "response", ?*AttributedString, .{});
    }

    pub fn additionalActions(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "additionalActions", ?*anyopaque, .{});
    }

    pub fn setAdditionalActions(self: *@This(), additionalActions: ?*anyopaque) void {
        return objc.msgSend(self, "setAdditionalActions:", void, .{additionalActions});
    }

    pub fn additionalActivationAction(self: *@This()) ?*UserNotificationAction {
        return objc.msgSend(self, "additionalActivationAction", ?*UserNotificationAction, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUserNotificationAction?language=objc
pub const UserNotificationAction = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUserNotificationAction", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn actionWithIdentifierTitle(self: *@This(), identifier: ?*String, title: ?*String) *@This() {
        return objc.msgSend(self, "actionWithIdentifier:title:", *@This(), .{identifier, title});
    }

    pub fn identifier(self: *@This()) ?*String {
        return objc.msgSend(self, "identifier", ?*String, .{});
    }

    pub fn title(self: *@This()) ?*String {
        return objc.msgSend(self, "title", ?*String, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUserNotificationCenter?language=objc
pub const UserNotificationCenter = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUserNotificationCenter", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn scheduleNotification(self: *@This(), notification: ?*UserNotification) void {
        return objc.msgSend(self, "scheduleNotification:", void, .{notification});
    }

    pub fn removeScheduledNotification(self: *@This(), notification: ?*UserNotification) void {
        return objc.msgSend(self, "removeScheduledNotification:", void, .{notification});
    }

    pub fn deliverNotification(self: *@This(), notification: ?*UserNotification) void {
        return objc.msgSend(self, "deliverNotification:", void, .{notification});
    }

    pub fn removeDeliveredNotification(self: *@This(), notification: ?*UserNotification) void {
        return objc.msgSend(self, "removeDeliveredNotification:", void, .{notification});
    }

    pub fn removeAllDeliveredNotifications(self: *@This()) void {
        return objc.msgSend(self, "removeAllDeliveredNotifications", void, .{});
    }

    pub fn defaultUserNotificationCenter(self: *@This()) ?*UserNotificationCenter {
        return objc.msgSend(self, "defaultUserNotificationCenter", ?*UserNotificationCenter, .{});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn scheduledNotifications(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "scheduledNotifications", ?*anyopaque, .{});
    }

    pub fn setScheduledNotifications(self: *@This(), scheduledNotifications: ?*anyopaque) void {
        return objc.msgSend(self, "setScheduledNotifications:", void, .{scheduledNotifications});
    }

    pub fn deliveredNotifications(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "deliveredNotifications", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUserNotificationCenterDelegate?language=objc
pub const UserNotificationCenterDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn userNotificationCenterDidDeliverNotification(self: *@This(), center: ?*UserNotificationCenter, notification: ?*UserNotification) void {
        return objc.msgSend(self, "userNotificationCenter:didDeliverNotification:", void, .{center, notification});
    }

    pub fn userNotificationCenterDidActivateNotification(self: *@This(), center: ?*UserNotificationCenter, notification: ?*UserNotification) void {
        return objc.msgSend(self, "userNotificationCenter:didActivateNotification:", void, .{center, notification});
    }

    pub fn userNotificationCenterShouldPresentNotification(self: *@This(), center: ?*UserNotificationCenter, notification: ?*UserNotification) objc.BOOL {
        return objc.msgSend(self, "userNotificationCenter:shouldPresentNotification:", objc.BOOL, .{center, notification});
    }

};

/// https://developer.apple.com/documentation/Foundation/NSUserScriptTask?language=objc
pub const UserScriptTask = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUserScriptTask", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithURLError(self: *@This(), url: ?*URL, @"error": ?*?*Error) *@This() {
        return objc.msgSend(self, "initWithURL:error:", *@This(), .{url, @"error"});
    }

    pub fn scriptURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "scriptURL", ?*URL, .{});
    }

    pub fn executeWithCompletionHandler(self: *@This(), handler: UserScriptTaskCompletionHandler) void {
        return objc.msgSend(self, "executeWithCompletionHandler:", void, .{handler});
    }

};

pub const UserScriptTaskCompletionHandler = *const fn(?*Error) callconv(.C) void;

/// https://developer.apple.com/documentation/Foundation/NSUserUnixTask?language=objc
pub const UserUnixTask = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUserUnixTask", @This(), UserScriptTask, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn standardInput(self: *@This()) ?*FileHandle {
        return objc.msgSend(self, "standardInput", ?*FileHandle, .{});
    }

    pub fn setStandardInput(self: *@This(), standardInput: ?*FileHandle) void {
        return objc.msgSend(self, "setStandardInput:", void, .{standardInput});
    }

    pub fn standardOutput(self: *@This()) ?*FileHandle {
        return objc.msgSend(self, "standardOutput", ?*FileHandle, .{});
    }

    pub fn setStandardOutput(self: *@This(), standardOutput: ?*FileHandle) void {
        return objc.msgSend(self, "setStandardOutput:", void, .{standardOutput});
    }

    pub fn standardError(self: *@This()) ?*FileHandle {
        return objc.msgSend(self, "standardError", ?*FileHandle, .{});
    }

    pub fn setStandardError(self: *@This(), standardError: ?*FileHandle) void {
        return objc.msgSend(self, "setStandardError:", void, .{standardError});
    }

    pub fn executeWithArgumentsCompletionHandler(self: *@This(), arguments: ?*anyopaque, handler: UserUnixTaskCompletionHandler) void {
        return objc.msgSend(self, "executeWithArguments:completionHandler:", void, .{arguments, handler});
    }

};

pub const UserUnixTaskCompletionHandler = *const fn(?*Error) callconv(.C) void;

/// https://developer.apple.com/documentation/Foundation/NSUserAppleScriptTask?language=objc
pub const UserAppleScriptTask = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUserAppleScriptTask", @This(), UserScriptTask, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn executeWithAppleEventCompletionHandler(self: *@This(), event: ?*AppleEventDescriptor, handler: UserAppleScriptTaskCompletionHandler) void {
        return objc.msgSend(self, "executeWithAppleEvent:completionHandler:", void, .{event, handler});
    }

};

pub const UserAppleScriptTaskCompletionHandler = *const fn(?*AppleEventDescriptor, ?*Error) callconv(.C) void;

/// https://developer.apple.com/documentation/Foundation/NSUserAutomatorTask?language=objc
pub const UserAutomatorTask = opaque {
    pub const InternalInfo = objc.ExternalClass("NSUserAutomatorTask", @This(), UserScriptTask, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn variables(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "variables", ?*anyopaque, .{});
    }

    pub fn setVariables(self: *@This(), variables: ?*anyopaque) void {
        return objc.msgSend(self, "setVariables:", void, .{variables});
    }

    pub fn executeWithInputCompletionHandler(self: *@This(), input: ?*anyopaque, handler: UserAutomatorTaskCompletionHandler) void {
        return objc.msgSend(self, "executeWithInput:completionHandler:", void, .{input, handler});
    }

};

pub const UserAutomatorTaskCompletionHandler = *const fn(*objc.Id, ?*Error) callconv(.C) void;

