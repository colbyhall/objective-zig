// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const foundation = @import("foundation.zig"); // Framework dependency Foundation.
const intents = @import("intents.zig"); // Framework dependency Intents.
const core_location = @import("core_location.zig"); // Framework dependency CoreLocation.

pub const ErrorCode = objc.NSInteger;
pub const ErrorCode_NotificationsNotAllowed: objc.NSInteger = 1;
pub const ErrorCode_AttachmentInvalidURL: objc.NSInteger = 100;
pub const ErrorCode_AttachmentUnrecognizedType: objc.NSInteger = 101;
pub const ErrorCode_AttachmentInvalidFileSize: objc.NSInteger = 102;
pub const ErrorCode_AttachmentNotInDataStore: objc.NSInteger = 103;
pub const ErrorCode_AttachmentMoveIntoDataStoreFailed: objc.NSInteger = 104;
pub const ErrorCode_AttachmentCorrupt: objc.NSInteger = 105;
pub const ErrorCode_NotificationInvalidNoDate: objc.NSInteger = 1400;
pub const ErrorCode_NotificationInvalidNoContent: objc.NSInteger = 1401;
pub const ErrorCode_ContentProvidingObjectNotAllowed: objc.NSInteger = 1500;
pub const ErrorCode_ContentProvidingInvalid: objc.NSInteger = 1501;
pub const ErrorCode_BadgeInputInvalid: objc.NSInteger = 1600;

/// https://developer.apple.com/documentation/UserNotifications/UNNotification?language=objc
pub const Notification = opaque {
    pub const Internal = objc.ExternClass("UNNotification", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn date(_self: *@This()) ?*foundation.Date {
        return objc.msgSend(_self, "date", ?*foundation.Date, .{});
    }

    pub fn request(_self: *@This()) ?*NotificationRequest {
        return objc.msgSend(_self, "request", ?*NotificationRequest, .{});
    }
};

pub const NotificationActionOptions = objc.NSUInteger;
pub const NotificationActionOptions_AuthenticationRequired: objc.NSUInteger = 1;
pub const NotificationActionOptions_Destructive: objc.NSUInteger = 2;
pub const NotificationActionOptions_Foreground: objc.NSUInteger = 4;

/// https://developer.apple.com/documentation/UserNotifications/UNNotificationAction?language=objc
pub const NotificationAction = opaque {
    pub const Internal = objc.ExternClass("UNNotificationAction", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn actionWithIdentifierTitleOptions(_identifier: ?*foundation.String, _title: ?*foundation.String, _options: NotificationActionOptions) *@This() {
        return objc.msgSend(Internal.class(), "actionWithIdentifier:title:options:", *@This(), .{ _identifier, _title, _options });
    }

    pub fn actionWithIdentifierTitleOptionsIcon(
        _identifier: ?*foundation.String,
        _title: ?*foundation.String,
        _options: NotificationActionOptions,
        _icon: ?*NotificationActionIcon,
    ) *@This() {
        return objc.msgSend(Internal.class(), "actionWithIdentifier:title:options:icon:", *@This(), .{
            _identifier,
            _title,
            _options,
            _icon,
        });
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn identifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "identifier", ?*foundation.String, .{});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn options(_self: *@This()) NotificationActionOptions {
        return objc.msgSend(_self, "options", NotificationActionOptions, .{});
    }

    pub fn icon(_self: *@This()) ?*NotificationActionIcon {
        return objc.msgSend(_self, "icon", ?*NotificationActionIcon, .{});
    }
};

/// https://developer.apple.com/documentation/UserNotifications/UNTextInputNotificationAction?language=objc
pub const TextInputNotificationAction = opaque {
    pub const Internal = objc.ExternClass("UNTextInputNotificationAction", @This(), NotificationAction, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn actionWithIdentifierTitleOptionsTextInputButtonTitleTextInputPlaceholder(
        _identifier: ?*foundation.String,
        _title: ?*foundation.String,
        _options: NotificationActionOptions,
        _textInputButtonTitle: ?*foundation.String,
        _textInputPlaceholder: ?*foundation.String,
    ) *@This() {
        return objc.msgSend(Internal.class(), "actionWithIdentifier:title:options:textInputButtonTitle:textInputPlaceholder:", *@This(), .{
            _identifier,
            _title,
            _options,
            _textInputButtonTitle,
            _textInputPlaceholder,
        });
    }

    pub fn actionWithIdentifierTitleOptionsIconTextInputButtonTitleTextInputPlaceholder(
        _identifier: ?*foundation.String,
        _title: ?*foundation.String,
        _options: NotificationActionOptions,
        _icon: ?*NotificationActionIcon,
        _textInputButtonTitle: ?*foundation.String,
        _textInputPlaceholder: ?*foundation.String,
    ) *@This() {
        return objc.msgSend(Internal.class(), "actionWithIdentifier:title:options:icon:textInputButtonTitle:textInputPlaceholder:", *@This(), .{
            _identifier,
            _title,
            _options,
            _icon,
            _textInputButtonTitle,
            _textInputPlaceholder,
        });
    }

    pub fn textInputButtonTitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "textInputButtonTitle", ?*foundation.String, .{});
    }

    pub fn textInputPlaceholder(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "textInputPlaceholder", ?*foundation.String, .{});
    }
};

/// https://developer.apple.com/documentation/UserNotifications/UNNotificationActionIcon?language=objc
pub const NotificationActionIcon = opaque {
    pub const Internal = objc.ExternClass("UNNotificationActionIcon", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn iconWithTemplateImageName(_templateImageName: ?*foundation.String) *@This() {
        return objc.msgSend(Internal.class(), "iconWithTemplateImageName:", *@This(), .{_templateImageName});
    }

    pub fn iconWithSystemImageName(_systemImageName: ?*foundation.String) *@This() {
        return objc.msgSend(Internal.class(), "iconWithSystemImageName:", *@This(), .{_systemImageName});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }
};

/// https://developer.apple.com/documentation/UserNotifications/UNNotificationAttachment?language=objc
pub const NotificationAttachment = opaque {
    pub const Internal = objc.ExternClass("UNNotificationAttachment", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn attachmentWithIdentifierURLOptionsError(
        _identifier: ?*foundation.String,
        _URL: ?*foundation.URL,
        _options: ?*foundation.Dictionary,
        _error: ?*?*foundation.Error,
    ) *@This() {
        return objc.msgSend(Internal.class(), "attachmentWithIdentifier:URL:options:error:", *@This(), .{
            _identifier,
            _URL,
            _options,
            _error,
        });
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn identifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "identifier", ?*foundation.String, .{});
    }

    pub fn url(_self: *@This()) ?*foundation.URL {
        return objc.msgSend(_self, "URL", ?*foundation.URL, .{});
    }

    pub fn @"type"(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "type", ?*foundation.String, .{});
    }
};

/// https://developer.apple.com/documentation/UserNotifications/UNNotificationContentProviding?language=objc
pub const NotificationContentProviding = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }
};

pub const NotificationInterruptionLevel = objc.NSUInteger;
pub const NotificationInterruptionLevel_Passive: objc.NSUInteger = 0;
pub const NotificationInterruptionLevel_Active: objc.NSUInteger = 1;
pub const NotificationInterruptionLevel_TimeSensitive: objc.NSUInteger = 2;
pub const NotificationInterruptionLevel_Critical: objc.NSUInteger = 3;

/// https://developer.apple.com/documentation/UserNotifications/UNNotificationContent?language=objc
pub const NotificationContent = opaque {
    pub const Internal = objc.ExternClass("UNNotificationContent", @This(), objc.NSObject, &.{ foundation.Copying, foundation.MutableCopying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn contentByUpdatingWithProviderError(_self: *@This(), _provider: ?*objc.id, _outError: ?*?*foundation.Error) ?*NotificationContent {
        return objc.msgSend(_self, "contentByUpdatingWithProvider:error:", ?*NotificationContent, .{ _provider, _outError });
    }

    pub fn attachments(_self: *@This()) ?*foundation.Array(?*NotificationAttachment) {
        return objc.msgSend(_self, "attachments", ?*foundation.Array(?*NotificationAttachment), .{});
    }

    pub fn badge(_self: *@This()) ?*foundation.Number {
        return objc.msgSend(_self, "badge", ?*foundation.Number, .{});
    }

    pub fn body(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "body", ?*foundation.String, .{});
    }

    pub fn categoryIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "categoryIdentifier", ?*foundation.String, .{});
    }

    pub fn launchImageName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "launchImageName", ?*foundation.String, .{});
    }

    pub fn sound(_self: *@This()) ?*NotificationSound {
        return objc.msgSend(_self, "sound", ?*NotificationSound, .{});
    }

    pub fn subtitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subtitle", ?*foundation.String, .{});
    }

    pub fn threadIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "threadIdentifier", ?*foundation.String, .{});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn userInfo(_self: *@This()) ?*foundation.Dictionary {
        return objc.msgSend(_self, "userInfo", ?*foundation.Dictionary, .{});
    }

    pub fn summaryArgument(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "summaryArgument", ?*foundation.String, .{});
    }

    pub fn summaryArgumentCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "summaryArgumentCount", objc.NSUInteger, .{});
    }

    pub fn targetContentIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "targetContentIdentifier", ?*foundation.String, .{});
    }

    pub fn interruptionLevel(_self: *@This()) NotificationInterruptionLevel {
        return objc.msgSend(_self, "interruptionLevel", NotificationInterruptionLevel, .{});
    }

    pub fn relevanceScore(_self: *@This()) f64 {
        return objc.msgSend(_self, "relevanceScore", f64, .{});
    }

    pub fn filterCriteria(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "filterCriteria", ?*foundation.String, .{});
    }
};

/// https://developer.apple.com/documentation/UserNotifications/UNMutableNotificationContent?language=objc
pub const MutableNotificationContent = opaque {
    pub const Internal = objc.ExternClass("UNMutableNotificationContent", @This(), NotificationContent, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn attachments(_self: *@This()) ?*foundation.Array(?*NotificationAttachment) {
        return objc.msgSend(_self, "attachments", ?*foundation.Array(?*NotificationAttachment), .{});
    }

    pub fn setAttachments(_self: *@This(), _attachments: ?*foundation.Array(?*NotificationAttachment)) void {
        return objc.msgSend(_self, "setAttachments:", void, .{_attachments});
    }

    pub fn badge(_self: *@This()) ?*foundation.Number {
        return objc.msgSend(_self, "badge", ?*foundation.Number, .{});
    }

    pub fn setBadge(_self: *@This(), _badge: ?*foundation.Number) void {
        return objc.msgSend(_self, "setBadge:", void, .{_badge});
    }

    pub fn body(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "body", ?*foundation.String, .{});
    }

    pub fn setBody(_self: *@This(), _body: ?*foundation.String) void {
        return objc.msgSend(_self, "setBody:", void, .{_body});
    }

    pub fn categoryIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "categoryIdentifier", ?*foundation.String, .{});
    }

    pub fn setCategoryIdentifier(_self: *@This(), _categoryIdentifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setCategoryIdentifier:", void, .{_categoryIdentifier});
    }

    pub fn launchImageName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "launchImageName", ?*foundation.String, .{});
    }

    pub fn setLaunchImageName(_self: *@This(), _launchImageName: ?*foundation.String) void {
        return objc.msgSend(_self, "setLaunchImageName:", void, .{_launchImageName});
    }

    pub fn sound(_self: *@This()) ?*NotificationSound {
        return objc.msgSend(_self, "sound", ?*NotificationSound, .{});
    }

    pub fn setSound(_self: *@This(), _sound: ?*NotificationSound) void {
        return objc.msgSend(_self, "setSound:", void, .{_sound});
    }

    pub fn subtitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subtitle", ?*foundation.String, .{});
    }

    pub fn setSubtitle(_self: *@This(), _subtitle: ?*foundation.String) void {
        return objc.msgSend(_self, "setSubtitle:", void, .{_subtitle});
    }

    pub fn threadIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "threadIdentifier", ?*foundation.String, .{});
    }

    pub fn setThreadIdentifier(_self: *@This(), _threadIdentifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setThreadIdentifier:", void, .{_threadIdentifier});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn setTitle(_self: *@This(), _title: ?*foundation.String) void {
        return objc.msgSend(_self, "setTitle:", void, .{_title});
    }

    pub fn userInfo(_self: *@This()) ?*foundation.Dictionary {
        return objc.msgSend(_self, "userInfo", ?*foundation.Dictionary, .{});
    }

    pub fn setUserInfo(_self: *@This(), _userInfo: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "setUserInfo:", void, .{_userInfo});
    }

    pub fn summaryArgument(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "summaryArgument", ?*foundation.String, .{});
    }

    pub fn setSummaryArgument(_self: *@This(), _summaryArgument: ?*foundation.String) void {
        return objc.msgSend(_self, "setSummaryArgument:", void, .{_summaryArgument});
    }

    pub fn summaryArgumentCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "summaryArgumentCount", objc.NSUInteger, .{});
    }

    pub fn setSummaryArgumentCount(_self: *@This(), _summaryArgumentCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setSummaryArgumentCount:", void, .{_summaryArgumentCount});
    }

    pub fn targetContentIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "targetContentIdentifier", ?*foundation.String, .{});
    }

    pub fn setTargetContentIdentifier(_self: *@This(), _targetContentIdentifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setTargetContentIdentifier:", void, .{_targetContentIdentifier});
    }

    pub fn interruptionLevel(_self: *@This()) NotificationInterruptionLevel {
        return objc.msgSend(_self, "interruptionLevel", NotificationInterruptionLevel, .{});
    }

    pub fn setInterruptionLevel(_self: *@This(), _interruptionLevel: NotificationInterruptionLevel) void {
        return objc.msgSend(_self, "setInterruptionLevel:", void, .{_interruptionLevel});
    }

    pub fn relevanceScore(_self: *@This()) f64 {
        return objc.msgSend(_self, "relevanceScore", f64, .{});
    }

    pub fn setRelevanceScore(_self: *@This(), _relevanceScore: f64) void {
        return objc.msgSend(_self, "setRelevanceScore:", void, .{_relevanceScore});
    }

    pub fn filterCriteria(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "filterCriteria", ?*foundation.String, .{});
    }

    pub fn setFilterCriteria(_self: *@This(), _filterCriteria: ?*foundation.String) void {
        return objc.msgSend(_self, "setFilterCriteria:", void, .{_filterCriteria});
    }
};

/// https://developer.apple.com/documentation/UserNotifications/UNNotificationAttributedMessageContext?language=objc
pub const NotificationAttributedMessageContext = opaque {
    pub const Internal = objc.ExternClass("UNNotificationAttributedMessageContext", @This(), objc.NSObject, &.{NotificationContentProviding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn contextWithSendMessageIntentAttributedContent(_sendMessageIntent: ?*intents.SendMessageIntent, _attributedContent: ?*foundation.AttributedString) *@This() {
        return objc.msgSend(Internal.class(), "contextWithSendMessageIntent:attributedContent:", *@This(), .{ _sendMessageIntent, _attributedContent });
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }
};

pub const NotificationCategoryOptions = objc.NSUInteger;
pub const NotificationCategoryOptions_CustomDismissAction: objc.NSUInteger = 1;
pub const NotificationCategoryOptions_AllowInCarPlay: objc.NSUInteger = 2;
pub const NotificationCategoryOptions_HiddenPreviewsShowTitle: objc.NSUInteger = 4;
pub const NotificationCategoryOptions_HiddenPreviewsShowSubtitle: objc.NSUInteger = 8;
pub const NotificationCategoryOptions_AllowAnnouncement: objc.NSUInteger = 16;

/// https://developer.apple.com/documentation/UserNotifications/UNNotificationCategory?language=objc
pub const NotificationCategory = opaque {
    pub const Internal = objc.ExternClass("UNNotificationCategory", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn categoryWithIdentifierActionsIntentIdentifiersOptions(
        _identifier: ?*foundation.String,
        _actions: ?*foundation.Array(?*NotificationAction),
        _intentIdentifiers: ?*foundation.Array(?*foundation.String),
        _options: NotificationCategoryOptions,
    ) *@This() {
        return objc.msgSend(Internal.class(), "categoryWithIdentifier:actions:intentIdentifiers:options:", *@This(), .{
            _identifier,
            _actions,
            _intentIdentifiers,
            _options,
        });
    }

    pub fn categoryWithIdentifierActionsIntentIdentifiersHiddenPreviewsBodyPlaceholderOptions(
        _identifier: ?*foundation.String,
        _actions: ?*foundation.Array(?*NotificationAction),
        _intentIdentifiers: ?*foundation.Array(?*foundation.String),
        _hiddenPreviewsBodyPlaceholder: ?*foundation.String,
        _options: NotificationCategoryOptions,
    ) *@This() {
        return objc.msgSend(Internal.class(), "categoryWithIdentifier:actions:intentIdentifiers:hiddenPreviewsBodyPlaceholder:options:", *@This(), .{
            _identifier,
            _actions,
            _intentIdentifiers,
            _hiddenPreviewsBodyPlaceholder,
            _options,
        });
    }

    pub fn categoryWithIdentifierActionsIntentIdentifiersHiddenPreviewsBodyPlaceholderCategorySummaryFormatOptions(
        _identifier: ?*foundation.String,
        _actions: ?*foundation.Array(?*NotificationAction),
        _intentIdentifiers: ?*foundation.Array(?*foundation.String),
        _hiddenPreviewsBodyPlaceholder: ?*foundation.String,
        _categorySummaryFormat: ?*foundation.String,
        _options: NotificationCategoryOptions,
    ) *@This() {
        return objc.msgSend(Internal.class(), "categoryWithIdentifier:actions:intentIdentifiers:hiddenPreviewsBodyPlaceholder:categorySummaryFormat:options:", *@This(), .{
            _identifier,
            _actions,
            _intentIdentifiers,
            _hiddenPreviewsBodyPlaceholder,
            _categorySummaryFormat,
            _options,
        });
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn identifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "identifier", ?*foundation.String, .{});
    }

    pub fn actions(_self: *@This()) ?*foundation.Array(?*NotificationAction) {
        return objc.msgSend(_self, "actions", ?*foundation.Array(?*NotificationAction), .{});
    }

    pub fn intentIdentifiers(_self: *@This()) ?*foundation.Array(?*foundation.String) {
        return objc.msgSend(_self, "intentIdentifiers", ?*foundation.Array(?*foundation.String), .{});
    }

    pub fn options(_self: *@This()) NotificationCategoryOptions {
        return objc.msgSend(_self, "options", NotificationCategoryOptions, .{});
    }

    pub fn hiddenPreviewsBodyPlaceholder(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "hiddenPreviewsBodyPlaceholder", ?*foundation.String, .{});
    }

    pub fn categorySummaryFormat(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "categorySummaryFormat", ?*foundation.String, .{});
    }
};

/// https://developer.apple.com/documentation/UserNotifications/UNNotificationRequest?language=objc
pub const NotificationRequest = opaque {
    pub const Internal = objc.ExternClass("UNNotificationRequest", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn requestWithIdentifierContentTrigger(_identifier: ?*foundation.String, _content: ?*NotificationContent, _trigger: ?*NotificationTrigger) *@This() {
        return objc.msgSend(Internal.class(), "requestWithIdentifier:content:trigger:", *@This(), .{ _identifier, _content, _trigger });
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn identifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "identifier", ?*foundation.String, .{});
    }

    pub fn content(_self: *@This()) ?*NotificationContent {
        return objc.msgSend(_self, "content", ?*NotificationContent, .{});
    }

    pub fn trigger(_self: *@This()) ?*NotificationTrigger {
        return objc.msgSend(_self, "trigger", ?*NotificationTrigger, .{});
    }
};

/// https://developer.apple.com/documentation/UserNotifications/UNNotificationResponse?language=objc
pub const NotificationResponse = opaque {
    pub const Internal = objc.ExternClass("UNNotificationResponse", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn notification(_self: *@This()) ?*Notification {
        return objc.msgSend(_self, "notification", ?*Notification, .{});
    }

    pub fn actionIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "actionIdentifier", ?*foundation.String, .{});
    }
};

/// https://developer.apple.com/documentation/UserNotifications/UNTextInputNotificationResponse?language=objc
pub const TextInputNotificationResponse = opaque {
    pub const Internal = objc.ExternClass("UNTextInputNotificationResponse", @This(), NotificationResponse, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn userText(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "userText", ?*foundation.String, .{});
    }
};

/// https://developer.apple.com/documentation/UserNotifications/UNNotificationServiceExtension?language=objc
pub const NotificationServiceExtension = opaque {
    pub const Internal = objc.ExternClass("UNNotificationServiceExtension", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn didReceiveNotificationRequestWithContentHandler(_self: *@This(), _request: ?*NotificationRequest, _contentHandler: *const fn (?*NotificationContent) callconv(.C) void) void {
        return objc.msgSend(_self, "didReceiveNotificationRequest:withContentHandler:", void, .{ _request, _contentHandler });
    }

    pub fn serviceExtensionTimeWillExpire(_self: *@This()) void {
        return objc.msgSend(_self, "serviceExtensionTimeWillExpire", void, .{});
    }
};

pub const AuthorizationStatus = objc.NSInteger;
pub const AuthorizationStatus_NotDetermined: objc.NSInteger = 0;
pub const AuthorizationStatus_Denied: objc.NSInteger = 1;
pub const AuthorizationStatus_Authorized: objc.NSInteger = 2;
pub const AuthorizationStatus_Provisional: objc.NSInteger = 3;
pub const AuthorizationStatus_Ephemeral: objc.NSInteger = 4;

pub const ShowPreviewsSetting = objc.NSInteger;
pub const ShowPreviewsSetting_Always: objc.NSInteger = 0;
pub const ShowPreviewsSetting_WhenAuthenticated: objc.NSInteger = 1;
pub const ShowPreviewsSetting_Never: objc.NSInteger = 2;

pub const NotificationSetting = objc.NSInteger;
pub const NotificationSetting_NotSupported: objc.NSInteger = 0;
pub const NotificationSetting_Disabled: objc.NSInteger = 1;
pub const NotificationSetting_Enabled: objc.NSInteger = 2;

pub const AlertStyle = objc.NSInteger;
pub const AlertStyle_None: objc.NSInteger = 0;
pub const AlertStyle_Banner: objc.NSInteger = 1;
pub const AlertStyle_Alert: objc.NSInteger = 2;

/// https://developer.apple.com/documentation/UserNotifications/UNNotificationSettings?language=objc
pub const NotificationSettings = opaque {
    pub const Internal = objc.ExternClass("UNNotificationSettings", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn authorizationStatus(_self: *@This()) AuthorizationStatus {
        return objc.msgSend(_self, "authorizationStatus", AuthorizationStatus, .{});
    }

    pub fn soundSetting(_self: *@This()) NotificationSetting {
        return objc.msgSend(_self, "soundSetting", NotificationSetting, .{});
    }

    pub fn badgeSetting(_self: *@This()) NotificationSetting {
        return objc.msgSend(_self, "badgeSetting", NotificationSetting, .{});
    }

    pub fn alertSetting(_self: *@This()) NotificationSetting {
        return objc.msgSend(_self, "alertSetting", NotificationSetting, .{});
    }

    pub fn notificationCenterSetting(_self: *@This()) NotificationSetting {
        return objc.msgSend(_self, "notificationCenterSetting", NotificationSetting, .{});
    }

    pub fn lockScreenSetting(_self: *@This()) NotificationSetting {
        return objc.msgSend(_self, "lockScreenSetting", NotificationSetting, .{});
    }

    pub fn carPlaySetting(_self: *@This()) NotificationSetting {
        return objc.msgSend(_self, "carPlaySetting", NotificationSetting, .{});
    }

    pub fn alertStyle(_self: *@This()) AlertStyle {
        return objc.msgSend(_self, "alertStyle", AlertStyle, .{});
    }

    pub fn showPreviewsSetting(_self: *@This()) ShowPreviewsSetting {
        return objc.msgSend(_self, "showPreviewsSetting", ShowPreviewsSetting, .{});
    }

    pub fn criticalAlertSetting(_self: *@This()) NotificationSetting {
        return objc.msgSend(_self, "criticalAlertSetting", NotificationSetting, .{});
    }

    pub fn providesAppNotificationSettings(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "providesAppNotificationSettings", objc.BOOL, .{});
    }

    pub fn announcementSetting(_self: *@This()) NotificationSetting {
        return objc.msgSend(_self, "announcementSetting", NotificationSetting, .{});
    }

    pub fn timeSensitiveSetting(_self: *@This()) NotificationSetting {
        return objc.msgSend(_self, "timeSensitiveSetting", NotificationSetting, .{});
    }

    pub fn scheduledDeliverySetting(_self: *@This()) NotificationSetting {
        return objc.msgSend(_self, "scheduledDeliverySetting", NotificationSetting, .{});
    }

    pub fn directMessagesSetting(_self: *@This()) NotificationSetting {
        return objc.msgSend(_self, "directMessagesSetting", NotificationSetting, .{});
    }
};

pub const NotificationSoundName = ?*foundation.String;

/// https://developer.apple.com/documentation/UserNotifications/UNNotificationSound?language=objc
pub const NotificationSound = opaque {
    pub const Internal = objc.ExternClass("UNNotificationSound", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn defaultCriticalSoundWithAudioVolume(_volume: f32) *@This() {
        return objc.msgSend(Internal.class(), "defaultCriticalSoundWithAudioVolume:", *@This(), .{_volume});
    }

    pub fn soundNamed(_name: NotificationSoundName) *@This() {
        return objc.msgSend(Internal.class(), "soundNamed:", *@This(), .{_name});
    }

    pub fn ringtoneSoundNamed(_name: NotificationSoundName) *@This() {
        return objc.msgSend(Internal.class(), "ringtoneSoundNamed:", *@This(), .{_name});
    }

    pub fn criticalSoundNamed(_name: NotificationSoundName) *@This() {
        return objc.msgSend(Internal.class(), "criticalSoundNamed:", *@This(), .{_name});
    }

    pub fn criticalSoundNamedWithAudioVolume(_name: NotificationSoundName, _volume: f32) *@This() {
        return objc.msgSend(Internal.class(), "criticalSoundNamed:withAudioVolume:", *@This(), .{ _name, _volume });
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn defaultSound() ?*NotificationSound {
        return objc.msgSend(Internal.class(), "defaultSound", ?*NotificationSound, .{});
    }

    pub fn defaultRingtoneSound() ?*NotificationSound {
        return objc.msgSend(Internal.class(), "defaultRingtoneSound", ?*NotificationSound, .{});
    }

    pub fn defaultCriticalSound() ?*NotificationSound {
        return objc.msgSend(Internal.class(), "defaultCriticalSound", ?*NotificationSound, .{});
    }
};

/// https://developer.apple.com/documentation/UserNotifications/UNNotificationTrigger?language=objc
pub const NotificationTrigger = opaque {
    pub const Internal = objc.ExternClass("UNNotificationTrigger", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn repeats(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "repeats", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/UserNotifications/UNPushNotificationTrigger?language=objc
pub const PushNotificationTrigger = opaque {
    pub const Internal = objc.ExternClass("UNPushNotificationTrigger", @This(), NotificationTrigger, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;
};

/// https://developer.apple.com/documentation/UserNotifications/UNTimeIntervalNotificationTrigger?language=objc
pub const TimeIntervalNotificationTrigger = opaque {
    pub const Internal = objc.ExternClass("UNTimeIntervalNotificationTrigger", @This(), NotificationTrigger, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn triggerWithTimeIntervalRepeats(_timeInterval: foundation.TimeInterval, _repeats: objc.BOOL) *@This() {
        return objc.msgSend(Internal.class(), "triggerWithTimeInterval:repeats:", *@This(), .{ _timeInterval, _repeats });
    }

    pub fn nextTriggerDate(_self: *@This()) ?*foundation.Date {
        return objc.msgSend(_self, "nextTriggerDate", ?*foundation.Date, .{});
    }

    pub fn timeInterval(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "timeInterval", foundation.TimeInterval, .{});
    }
};

/// https://developer.apple.com/documentation/UserNotifications/UNCalendarNotificationTrigger?language=objc
pub const CalendarNotificationTrigger = opaque {
    pub const Internal = objc.ExternClass("UNCalendarNotificationTrigger", @This(), NotificationTrigger, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn triggerWithDateMatchingComponentsRepeats(_dateComponents: ?*foundation.DateComponents, _repeats: objc.BOOL) *@This() {
        return objc.msgSend(Internal.class(), "triggerWithDateMatchingComponents:repeats:", *@This(), .{ _dateComponents, _repeats });
    }

    pub fn nextTriggerDate(_self: *@This()) ?*foundation.Date {
        return objc.msgSend(_self, "nextTriggerDate", ?*foundation.Date, .{});
    }

    pub fn dateComponents(_self: *@This()) ?*foundation.DateComponents {
        return objc.msgSend(_self, "dateComponents", ?*foundation.DateComponents, .{});
    }
};

/// https://developer.apple.com/documentation/UserNotifications/UNLocationNotificationTrigger?language=objc
pub const LocationNotificationTrigger = opaque {
    pub const Internal = objc.ExternClass("UNLocationNotificationTrigger", @This(), NotificationTrigger, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn triggerWithRegionRepeats(_region: ?*core_location.Region, _repeats: objc.BOOL) *@This() {
        return objc.msgSend(Internal.class(), "triggerWithRegion:repeats:", *@This(), .{ _region, _repeats });
    }

    pub fn region(_self: *@This()) ?*core_location.Region {
        return objc.msgSend(_self, "region", ?*core_location.Region, .{});
    }
};

pub const AuthorizationOptions = objc.NSUInteger;
pub const AuthorizationOptions_Badge: objc.NSUInteger = 1;
pub const AuthorizationOptions_Sound: objc.NSUInteger = 2;
pub const AuthorizationOptions_Alert: objc.NSUInteger = 4;
pub const AuthorizationOptions_CarPlay: objc.NSUInteger = 8;
pub const AuthorizationOptions_CriticalAlert: objc.NSUInteger = 16;
pub const AuthorizationOptions_ProvidesAppNotificationSettings: objc.NSUInteger = 32;
pub const AuthorizationOptions_Provisional: objc.NSUInteger = 64;
pub const AuthorizationOptions_Announcement: objc.NSUInteger = 128;
pub const AuthorizationOptions_TimeSensitive: objc.NSUInteger = 256;

/// https://developer.apple.com/documentation/UserNotifications/UNUserNotificationCenter?language=objc
pub const UserNotificationCenter = opaque {
    pub const Internal = objc.ExternClass("UNUserNotificationCenter", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn currentNotificationCenter() ?*UserNotificationCenter {
        return objc.msgSend(Internal.class(), "currentNotificationCenter", ?*UserNotificationCenter, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn requestAuthorizationWithOptionsCompletionHandler(_self: *@This(), _options: AuthorizationOptions, _completionHandler: *const fn (objc.BOOL, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(_self, "requestAuthorizationWithOptions:completionHandler:", void, .{ _options, _completionHandler });
    }

    pub fn setNotificationCategories(_self: *@This(), _categories: ?*foundation.Set(?*NotificationCategory)) void {
        return objc.msgSend(_self, "setNotificationCategories:", void, .{_categories});
    }

    pub fn getNotificationCategoriesWithCompletionHandler(_self: *@This(), _completionHandler: *const fn (?*foundation.Set(?*NotificationCategory)) callconv(.C) void) void {
        return objc.msgSend(_self, "getNotificationCategoriesWithCompletionHandler:", void, .{_completionHandler});
    }

    pub fn getNotificationSettingsWithCompletionHandler(_self: *@This(), _completionHandler: *const fn (?*NotificationSettings) callconv(.C) void) void {
        return objc.msgSend(_self, "getNotificationSettingsWithCompletionHandler:", void, .{_completionHandler});
    }

    pub fn addNotificationRequestWithCompletionHandler(_self: *@This(), _request: ?*NotificationRequest, _completionHandler: *const fn (?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(_self, "addNotificationRequest:withCompletionHandler:", void, .{ _request, _completionHandler });
    }

    pub fn getPendingNotificationRequestsWithCompletionHandler(_self: *@This(), _completionHandler: *const fn (?*foundation.Array(?*NotificationRequest)) callconv(.C) void) void {
        return objc.msgSend(_self, "getPendingNotificationRequestsWithCompletionHandler:", void, .{_completionHandler});
    }

    pub fn removePendingNotificationRequestsWithIdentifiers(_self: *@This(), _identifiers: ?*foundation.Array(?*foundation.String)) void {
        return objc.msgSend(_self, "removePendingNotificationRequestsWithIdentifiers:", void, .{_identifiers});
    }

    pub fn removeAllPendingNotificationRequests(_self: *@This()) void {
        return objc.msgSend(_self, "removeAllPendingNotificationRequests", void, .{});
    }

    pub fn getDeliveredNotificationsWithCompletionHandler(_self: *@This(), _completionHandler: *const fn (?*foundation.Array(?*Notification)) callconv(.C) void) void {
        return objc.msgSend(_self, "getDeliveredNotificationsWithCompletionHandler:", void, .{_completionHandler});
    }

    pub fn removeDeliveredNotificationsWithIdentifiers(_self: *@This(), _identifiers: ?*foundation.Array(?*foundation.String)) void {
        return objc.msgSend(_self, "removeDeliveredNotificationsWithIdentifiers:", void, .{_identifiers});
    }

    pub fn removeAllDeliveredNotifications(_self: *@This()) void {
        return objc.msgSend(_self, "removeAllDeliveredNotifications", void, .{});
    }

    pub fn setBadgeCountWithCompletionHandler(_self: *@This(), _newBadgeCount: objc.NSInteger, _completionHandler: *const fn (?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(_self, "setBadgeCount:withCompletionHandler:", void, .{ _newBadgeCount, _completionHandler });
    }

    pub fn delegate(_self: *@This()) ?*objc.id {
        return objc.msgSend(_self, "delegate", ?*objc.id, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*objc.id) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn supportsContentExtensions(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsContentExtensions", objc.BOOL, .{});
    }
};

pub const NotificationPresentationOptions = objc.NSUInteger;
pub const NotificationPresentationOptions_Badge: objc.NSUInteger = 1;
pub const NotificationPresentationOptions_Sound: objc.NSUInteger = 2;
pub const NotificationPresentationOptions_Alert: objc.NSUInteger = 4;
pub const NotificationPresentationOptions_List: objc.NSUInteger = 8;
pub const NotificationPresentationOptions_Banner: objc.NSUInteger = 16;

/// https://developer.apple.com/documentation/UserNotifications/UNUserNotificationCenterDelegate?language=objc
pub const UserNotificationCenterDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn userNotificationCenterWillPresentNotificationWithCompletionHandler(_self: *@This(), _center: ?*UserNotificationCenter, _notification: ?*Notification, _completionHandler: *const fn (NotificationPresentationOptions) callconv(.C) void) void {
        return objc.msgSend(_self, "userNotificationCenter:willPresentNotification:withCompletionHandler:", void, .{ _center, _notification, _completionHandler });
    }

    pub fn userNotificationCenterDidReceiveNotificationResponseWithCompletionHandler(_self: *@This(), _center: ?*UserNotificationCenter, _response: ?*NotificationResponse, _completionHandler: *const fn () callconv(.C) void) void {
        return objc.msgSend(_self, "userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:", void, .{ _center, _response, _completionHandler });
    }

    pub fn userNotificationCenterOpenSettingsForNotification(_self: *@This(), _center: ?*UserNotificationCenter, _notification: ?*Notification) void {
        return objc.msgSend(_self, "userNotificationCenter:openSettingsForNotification:", void, .{ _center, _notification });
    }
};
