// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const foundation = @import("foundation.zig"); // Framework dependency Foundation.

pub const Error = objc.NSInteger;
pub const Error_LocationUnknown: objc.NSInteger = 0;
pub const Error_Denied: objc.NSInteger = 1;
pub const Error_Network: objc.NSInteger = 2;
pub const Error_HeadingFailure: objc.NSInteger = 3;
pub const Error_RegionMonitoringDenied: objc.NSInteger = 4;
pub const Error_RegionMonitoringFailure: objc.NSInteger = 5;
pub const Error_RegionMonitoringSetupDelayed: objc.NSInteger = 6;
pub const Error_RegionMonitoringResponseDelayed: objc.NSInteger = 7;
pub const Error_GeocodeFoundNoResult: objc.NSInteger = 8;
pub const Error_GeocodeFoundPartialResult: objc.NSInteger = 9;
pub const Error_GeocodeCanceled: objc.NSInteger = 10;
pub const Error_DeferredFailed: objc.NSInteger = 11;
pub const Error_DeferredNotUpdatingLocation: objc.NSInteger = 12;
pub const Error_DeferredAccuracyTooLow: objc.NSInteger = 13;
pub const Error_DeferredDistanceFiltered: objc.NSInteger = 14;
pub const Error_DeferredCanceled: objc.NSInteger = 15;
pub const Error_RangingUnavailable: objc.NSInteger = 16;
pub const Error_RangingFailure: objc.NSInteger = 17;
pub const Error_PromptDeclined: objc.NSInteger = 18;
pub const Error_HistoricalLocationError: objc.NSInteger = 19;

pub const LocationDegrees = f64;

pub const LocationAccuracy = f64;

pub const LocationSpeed = f64;

pub const LocationSpeedAccuracy = f64;

pub const LocationDirection = f64;

pub const LocationDirectionAccuracy = f64;

pub const LocationCoordinate2D = extern struct {
    latitude: LocationDegrees,
    longitude: LocationDegrees,
};

pub const LocationDistance = f64;

extern "CoreLocation" fn CLLocationCoordinate2DIsValid(coord: LocationCoordinate2D) callconv(.C) objc.BOOL;
pub const locationCoordinate2DIsValid = CLLocationCoordinate2DIsValid;

extern "CoreLocation" fn CLLocationCoordinate2DMake(latitude: LocationDegrees, longitude: LocationDegrees) callconv(.C) LocationCoordinate2D;
pub const locationCoordinate2DMake = CLLocationCoordinate2DMake;

/// https://developer.apple.com/documentation/CoreLocation/CLFloor?language=objc
pub const Floor = opaque {
    pub const Internal = objc.ExternClass("CLFloor", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn level(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "level", objc.NSInteger, .{});
    }
};

/// https://developer.apple.com/documentation/CoreLocation/CLLocationSourceInformation?language=objc
pub const LocationSourceInformation = opaque {
    pub const Internal = objc.ExternClass("CLLocationSourceInformation", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithSoftwareSimulationStateAndExternalAccessoryState(_self: *@This(), _isSoftware: objc.BOOL, _isAccessory: objc.BOOL) *@This() {
        return objc.msgSend(_self, "initWithSoftwareSimulationState:andExternalAccessoryState:", *@This(), .{ _isSoftware, _isAccessory });
    }

    pub fn isSimulatedBySoftware(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isSimulatedBySoftware", objc.BOOL, .{});
    }

    pub fn isProducedByAccessory(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProducedByAccessory", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/CoreLocation/CLLocation?language=objc
pub const Location = opaque {
    pub const Internal = objc.ExternClass("CLLocation", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithLatitudeLongitude(_self: *@This(), _latitude: LocationDegrees, _longitude: LocationDegrees) *@This() {
        return objc.msgSend(_self, "initWithLatitude:longitude:", *@This(), .{ _latitude, _longitude });
    }

    pub fn initWithCoordinateAltitudeHorizontalAccuracyVerticalAccuracyTimestamp(
        _self: *@This(),
        _coordinate: LocationCoordinate2D,
        _altitude: LocationDistance,
        _hAccuracy: LocationAccuracy,
        _vAccuracy: LocationAccuracy,
        _timestamp: ?*foundation.Date,
    ) *@This() {
        return objc.msgSend(_self, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:", *@This(), .{
            _coordinate,
            _altitude,
            _hAccuracy,
            _vAccuracy,
            _timestamp,
        });
    }

    pub fn initWithCoordinateAltitudeHorizontalAccuracyVerticalAccuracyCourseSpeedTimestamp(
        _self: *@This(),
        _coordinate: LocationCoordinate2D,
        _altitude: LocationDistance,
        _hAccuracy: LocationAccuracy,
        _vAccuracy: LocationAccuracy,
        _course: LocationDirection,
        _speed: LocationSpeed,
        _timestamp: ?*foundation.Date,
    ) *@This() {
        return objc.msgSend(_self, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:speed:timestamp:", *@This(), .{
            _coordinate,
            _altitude,
            _hAccuracy,
            _vAccuracy,
            _course,
            _speed,
            _timestamp,
        });
    }

    pub fn initWithCoordinateAltitudeHorizontalAccuracyVerticalAccuracyCourseCourseAccuracySpeedSpeedAccuracyTimestamp(
        _self: *@This(),
        _coordinate: LocationCoordinate2D,
        _altitude: LocationDistance,
        _hAccuracy: LocationAccuracy,
        _vAccuracy: LocationAccuracy,
        _course: LocationDirection,
        _courseAccuracy: LocationDirectionAccuracy,
        _speed: LocationSpeed,
        _speedAccuracy: LocationSpeedAccuracy,
        _timestamp: ?*foundation.Date,
    ) *@This() {
        return objc.msgSend(_self, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:courseAccuracy:speed:speedAccuracy:timestamp:", *@This(), .{
            _coordinate,
            _altitude,
            _hAccuracy,
            _vAccuracy,
            _course,
            _courseAccuracy,
            _speed,
            _speedAccuracy,
            _timestamp,
        });
    }

    pub fn initWithCoordinateAltitudeHorizontalAccuracyVerticalAccuracyCourseCourseAccuracySpeedSpeedAccuracyTimestampSourceInfo(
        _self: *@This(),
        _coordinate: LocationCoordinate2D,
        _altitude: LocationDistance,
        _hAccuracy: LocationAccuracy,
        _vAccuracy: LocationAccuracy,
        _course: LocationDirection,
        _courseAccuracy: LocationDirectionAccuracy,
        _speed: LocationSpeed,
        _speedAccuracy: LocationSpeedAccuracy,
        _timestamp: ?*foundation.Date,
        _sourceInfo: ?*LocationSourceInformation,
    ) *@This() {
        return objc.msgSend(_self, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:courseAccuracy:speed:speedAccuracy:timestamp:sourceInfo:", *@This(), .{
            _coordinate,
            _altitude,
            _hAccuracy,
            _vAccuracy,
            _course,
            _courseAccuracy,
            _speed,
            _speedAccuracy,
            _timestamp,
            _sourceInfo,
        });
    }

    pub fn getDistanceFrom(_self: *@This(), _location: ?*Location) LocationDistance {
        return objc.msgSend(_self, "getDistanceFrom:", LocationDistance, .{_location});
    }

    pub fn distanceFromLocation(_self: *@This(), _location: ?*Location) LocationDistance {
        return objc.msgSend(_self, "distanceFromLocation:", LocationDistance, .{_location});
    }

    pub fn coordinate(_self: *@This()) LocationCoordinate2D {
        return objc.msgSend(_self, "coordinate", LocationCoordinate2D, .{});
    }

    pub fn altitude(_self: *@This()) LocationDistance {
        return objc.msgSend(_self, "altitude", LocationDistance, .{});
    }

    pub fn ellipsoidalAltitude(_self: *@This()) LocationDistance {
        return objc.msgSend(_self, "ellipsoidalAltitude", LocationDistance, .{});
    }

    pub fn horizontalAccuracy(_self: *@This()) LocationAccuracy {
        return objc.msgSend(_self, "horizontalAccuracy", LocationAccuracy, .{});
    }

    pub fn verticalAccuracy(_self: *@This()) LocationAccuracy {
        return objc.msgSend(_self, "verticalAccuracy", LocationAccuracy, .{});
    }

    pub fn course(_self: *@This()) LocationDirection {
        return objc.msgSend(_self, "course", LocationDirection, .{});
    }

    pub fn courseAccuracy(_self: *@This()) LocationDirectionAccuracy {
        return objc.msgSend(_self, "courseAccuracy", LocationDirectionAccuracy, .{});
    }

    pub fn speed(_self: *@This()) LocationSpeed {
        return objc.msgSend(_self, "speed", LocationSpeed, .{});
    }

    pub fn speedAccuracy(_self: *@This()) LocationSpeedAccuracy {
        return objc.msgSend(_self, "speedAccuracy", LocationSpeedAccuracy, .{});
    }

    pub fn timestamp(_self: *@This()) ?*foundation.Date {
        return objc.msgSend(_self, "timestamp", ?*foundation.Date, .{});
    }

    pub fn floor(_self: *@This()) ?*Floor {
        return objc.msgSend(_self, "floor", ?*Floor, .{});
    }

    pub fn sourceInformation(_self: *@This()) ?*LocationSourceInformation {
        return objc.msgSend(_self, "sourceInformation", ?*LocationSourceInformation, .{});
    }
};

pub const RegionState = objc.NSInteger;
pub const RegionState_Unknown: objc.NSInteger = 0;
pub const RegionState_Inside: objc.NSInteger = 1;
pub const RegionState_Outside: objc.NSInteger = 2;

pub const Proximity = objc.NSInteger;
pub const Proximity_Unknown: objc.NSInteger = 0;
pub const Proximity_Immediate: objc.NSInteger = 1;
pub const Proximity_Near: objc.NSInteger = 2;
pub const Proximity_Far: objc.NSInteger = 3;

/// https://developer.apple.com/documentation/CoreLocation/CLRegion?language=objc
pub const Region = opaque {
    pub const Internal = objc.ExternClass("CLRegion", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initCircularRegionWithCenterRadiusIdentifier(_self: *@This(), _center: LocationCoordinate2D, _radius: LocationDistance, _identifier: ?*foundation.String) *@This() {
        return objc.msgSend(_self, "initCircularRegionWithCenter:radius:identifier:", *@This(), .{ _center, _radius, _identifier });
    }

    pub fn containsCoordinate(_self: *@This(), _coordinate: LocationCoordinate2D) objc.BOOL {
        return objc.msgSend(_self, "containsCoordinate:", objc.BOOL, .{_coordinate});
    }

    pub fn center(_self: *@This()) LocationCoordinate2D {
        return objc.msgSend(_self, "center", LocationCoordinate2D, .{});
    }

    pub fn radius(_self: *@This()) LocationDistance {
        return objc.msgSend(_self, "radius", LocationDistance, .{});
    }

    pub fn identifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "identifier", ?*foundation.String, .{});
    }

    pub fn notifyOnEntry(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "notifyOnEntry", objc.BOOL, .{});
    }

    pub fn setNotifyOnEntry(_self: *@This(), _notifyOnEntry: objc.BOOL) void {
        return objc.msgSend(_self, "setNotifyOnEntry:", void, .{_notifyOnEntry});
    }

    pub fn notifyOnExit(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "notifyOnExit", objc.BOOL, .{});
    }

    pub fn setNotifyOnExit(_self: *@This(), _notifyOnExit: objc.BOOL) void {
        return objc.msgSend(_self, "setNotifyOnExit:", void, .{_notifyOnExit});
    }
};

/// https://developer.apple.com/documentation/CoreLocation/CLCondition?language=objc
pub const Condition = opaque {
    pub const Internal = objc.ExternClass("CLCondition", @This(), objc.NSObject, &.{ foundation.SecureCoding, foundation.Copying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/CoreLocation/CLCircularRegion?language=objc
pub const CircularRegion = opaque {
    pub const Internal = objc.ExternClass("CLCircularRegion", @This(), Region, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initCircularRegionWithCenterRadiusIdentifier(_self: *@This(), _center: LocationCoordinate2D, _radius: LocationDistance, _identifier: ?*foundation.String) *@This() {
        return objc.msgSend(_self, "initCircularRegionWithCenter:radius:identifier:", *@This(), .{ _center, _radius, _identifier });
    }

    pub fn containsCoordinate(_self: *@This(), _coordinate: LocationCoordinate2D) objc.BOOL {
        return objc.msgSend(_self, "containsCoordinate:", objc.BOOL, .{_coordinate});
    }

    pub fn center(_self: *@This()) LocationCoordinate2D {
        return objc.msgSend(_self, "center", LocationCoordinate2D, .{});
    }

    pub fn radius(_self: *@This()) LocationDistance {
        return objc.msgSend(_self, "radius", LocationDistance, .{});
    }

    pub fn identifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "identifier", ?*foundation.String, .{});
    }

    pub fn notifyOnEntry(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "notifyOnEntry", objc.BOOL, .{});
    }

    pub fn setNotifyOnEntry(_self: *@This(), _notifyOnEntry: objc.BOOL) void {
        return objc.msgSend(_self, "setNotifyOnEntry:", void, .{_notifyOnEntry});
    }

    pub fn notifyOnExit(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "notifyOnExit", objc.BOOL, .{});
    }

    pub fn setNotifyOnExit(_self: *@This(), _notifyOnExit: objc.BOOL) void {
        return objc.msgSend(_self, "setNotifyOnExit:", void, .{_notifyOnExit});
    }

    pub fn initWithCenterRadiusIdentifier(_self: *@This(), _center: LocationCoordinate2D, _radius: LocationDistance, _identifier: ?*foundation.String) *@This() {
        return objc.msgSend(_self, "initWithCenter:radius:identifier:", *@This(), .{ _center, _radius, _identifier });
    }
};

/// https://developer.apple.com/documentation/CoreLocation/CLCircularGeographicCondition?language=objc
pub const CircularGeographicCondition = opaque {
    pub const Internal = objc.ExternClass("CLCircularGeographicCondition", @This(), Condition, &.{foundation.SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithCenterRadius(_self: *@This(), _center: LocationCoordinate2D, _radius: LocationDistance) *@This() {
        return objc.msgSend(_self, "initWithCenter:radius:", *@This(), .{ _center, _radius });
    }

    pub fn center(_self: *@This()) LocationCoordinate2D {
        return objc.msgSend(_self, "center", LocationCoordinate2D, .{});
    }

    pub fn radius(_self: *@This()) LocationDistance {
        return objc.msgSend(_self, "radius", LocationDistance, .{});
    }
};

pub const BeaconMajorValue = objc.uint16_t;

pub const BeaconMinorValue = objc.uint16_t;

/// https://developer.apple.com/documentation/CoreLocation/CLBeaconIdentityCondition?language=objc
pub const BeaconIdentityCondition = opaque {
    pub const Internal = objc.ExternClass("CLBeaconIdentityCondition", @This(), Condition, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithUUID(_self: *@This(), _uuid: ?*foundation.UUID) *@This() {
        return objc.msgSend(_self, "initWithUUID:", *@This(), .{_uuid});
    }

    pub fn initWithUUIDMajor(_self: *@This(), _uuid: ?*foundation.UUID, _major: BeaconMajorValue) *@This() {
        return objc.msgSend(_self, "initWithUUID:major:", *@This(), .{ _uuid, _major });
    }

    pub fn initWithUUIDMajorMinor(_self: *@This(), _uuid: ?*foundation.UUID, _major: BeaconMajorValue, _minor: BeaconMinorValue) *@This() {
        return objc.msgSend(_self, "initWithUUID:major:minor:", *@This(), .{ _uuid, _major, _minor });
    }

    pub fn uuid(_self: *@This()) ?*foundation.UUID {
        return objc.msgSend(_self, "UUID", ?*foundation.UUID, .{});
    }

    pub fn major(_self: *@This()) ?*foundation.Number {
        return objc.msgSend(_self, "major", ?*foundation.Number, .{});
    }

    pub fn minor(_self: *@This()) ?*foundation.Number {
        return objc.msgSend(_self, "minor", ?*foundation.Number, .{});
    }
};

/// https://developer.apple.com/documentation/CoreLocation/CLBeaconIdentityConstraint?language=objc
pub const BeaconIdentityConstraint = opaque {
    pub const Internal = objc.ExternClass("CLBeaconIdentityConstraint", @This(), BeaconIdentityCondition, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithUUID(_self: *@This(), _uuid: ?*foundation.UUID) *@This() {
        return objc.msgSend(_self, "initWithUUID:", *@This(), .{_uuid});
    }

    pub fn initWithUUIDMajor(_self: *@This(), _uuid: ?*foundation.UUID, _major: BeaconMajorValue) *@This() {
        return objc.msgSend(_self, "initWithUUID:major:", *@This(), .{ _uuid, _major });
    }

    pub fn initWithUUIDMajorMinor(_self: *@This(), _uuid: ?*foundation.UUID, _major: BeaconMajorValue, _minor: BeaconMinorValue) *@This() {
        return objc.msgSend(_self, "initWithUUID:major:minor:", *@This(), .{ _uuid, _major, _minor });
    }

    pub fn uuid(_self: *@This()) ?*foundation.UUID {
        return objc.msgSend(_self, "UUID", ?*foundation.UUID, .{});
    }

    pub fn major(_self: *@This()) ?*foundation.Number {
        return objc.msgSend(_self, "major", ?*foundation.Number, .{});
    }

    pub fn minor(_self: *@This()) ?*foundation.Number {
        return objc.msgSend(_self, "minor", ?*foundation.Number, .{});
    }
};

/// https://developer.apple.com/documentation/CoreLocation/CLBeaconRegion?language=objc
pub const BeaconRegion = opaque {
    pub const Internal = objc.ExternClass("CLBeaconRegion", @This(), Region, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initCircularRegionWithCenterRadiusIdentifier(_self: *@This(), _center: LocationCoordinate2D, _radius: LocationDistance, _identifier: ?*foundation.String) *@This() {
        return objc.msgSend(_self, "initCircularRegionWithCenter:radius:identifier:", *@This(), .{ _center, _radius, _identifier });
    }

    pub fn containsCoordinate(_self: *@This(), _coordinate: LocationCoordinate2D) objc.BOOL {
        return objc.msgSend(_self, "containsCoordinate:", objc.BOOL, .{_coordinate});
    }

    pub fn center(_self: *@This()) LocationCoordinate2D {
        return objc.msgSend(_self, "center", LocationCoordinate2D, .{});
    }

    pub fn radius(_self: *@This()) LocationDistance {
        return objc.msgSend(_self, "radius", LocationDistance, .{});
    }

    pub fn identifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "identifier", ?*foundation.String, .{});
    }

    pub fn notifyOnEntry(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "notifyOnEntry", objc.BOOL, .{});
    }

    pub fn setNotifyOnEntry(_self: *@This(), _notifyOnEntry: objc.BOOL) void {
        return objc.msgSend(_self, "setNotifyOnEntry:", void, .{_notifyOnEntry});
    }

    pub fn notifyOnExit(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "notifyOnExit", objc.BOOL, .{});
    }

    pub fn setNotifyOnExit(_self: *@This(), _notifyOnExit: objc.BOOL) void {
        return objc.msgSend(_self, "setNotifyOnExit:", void, .{_notifyOnExit});
    }

    pub fn initWithUUIDIdentifier(_self: *@This(), _uuid: ?*foundation.UUID, _identifier: ?*foundation.String) *@This() {
        return objc.msgSend(_self, "initWithUUID:identifier:", *@This(), .{ _uuid, _identifier });
    }

    pub fn initWithProximityUUIDIdentifier(_self: *@This(), _proximityUUID: ?*foundation.UUID, _identifier: ?*foundation.String) *@This() {
        return objc.msgSend(_self, "initWithProximityUUID:identifier:", *@This(), .{ _proximityUUID, _identifier });
    }

    pub fn initWithUUIDMajorIdentifier(_self: *@This(), _uuid: ?*foundation.UUID, _major: BeaconMajorValue, _identifier: ?*foundation.String) *@This() {
        return objc.msgSend(_self, "initWithUUID:major:identifier:", *@This(), .{ _uuid, _major, _identifier });
    }

    pub fn initWithProximityUUIDMajorIdentifier(_self: *@This(), _proximityUUID: ?*foundation.UUID, _major: BeaconMajorValue, _identifier: ?*foundation.String) *@This() {
        return objc.msgSend(_self, "initWithProximityUUID:major:identifier:", *@This(), .{ _proximityUUID, _major, _identifier });
    }

    pub fn initWithUUIDMajorMinorIdentifier(
        _self: *@This(),
        _uuid: ?*foundation.UUID,
        _major: BeaconMajorValue,
        _minor: BeaconMinorValue,
        _identifier: ?*foundation.String,
    ) *@This() {
        return objc.msgSend(_self, "initWithUUID:major:minor:identifier:", *@This(), .{
            _uuid,
            _major,
            _minor,
            _identifier,
        });
    }

    pub fn initWithProximityUUIDMajorMinorIdentifier(
        _self: *@This(),
        _proximityUUID: ?*foundation.UUID,
        _major: BeaconMajorValue,
        _minor: BeaconMinorValue,
        _identifier: ?*foundation.String,
    ) *@This() {
        return objc.msgSend(_self, "initWithProximityUUID:major:minor:identifier:", *@This(), .{
            _proximityUUID,
            _major,
            _minor,
            _identifier,
        });
    }

    pub fn initWithBeaconIdentityConstraintIdentifier(_self: *@This(), _beaconIdentityConstraint: ?*BeaconIdentityConstraint, _identifier: ?*foundation.String) *@This() {
        return objc.msgSend(_self, "initWithBeaconIdentityConstraint:identifier:", *@This(), .{ _beaconIdentityConstraint, _identifier });
    }

    pub fn peripheralDataWithMeasuredPower(_self: *@This(), _measuredPower: ?*foundation.Number) ?*anyopaque {
        return objc.msgSend(_self, "peripheralDataWithMeasuredPower:", ?*anyopaque, .{_measuredPower});
    }

    pub fn beaconIdentityConstraint(_self: *@This()) ?*BeaconIdentityConstraint {
        return objc.msgSend(_self, "beaconIdentityConstraint", ?*BeaconIdentityConstraint, .{});
    }

    pub fn uuid(_self: *@This()) ?*foundation.UUID {
        return objc.msgSend(_self, "UUID", ?*foundation.UUID, .{});
    }

    pub fn proximityUUID(_self: *@This()) ?*foundation.UUID {
        return objc.msgSend(_self, "proximityUUID", ?*foundation.UUID, .{});
    }

    pub fn major(_self: *@This()) ?*foundation.Number {
        return objc.msgSend(_self, "major", ?*foundation.Number, .{});
    }

    pub fn minor(_self: *@This()) ?*foundation.Number {
        return objc.msgSend(_self, "minor", ?*foundation.Number, .{});
    }

    pub fn notifyEntryStateOnDisplay(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "notifyEntryStateOnDisplay", objc.BOOL, .{});
    }

    pub fn setNotifyEntryStateOnDisplay(_self: *@This(), _notifyEntryStateOnDisplay: objc.BOOL) void {
        return objc.msgSend(_self, "setNotifyEntryStateOnDisplay:", void, .{_notifyEntryStateOnDisplay});
    }
};

/// https://developer.apple.com/documentation/CoreLocation/CLBeacon?language=objc
pub const Beacon = opaque {
    pub const Internal = objc.ExternClass("CLBeacon", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn timestamp(_self: *@This()) ?*foundation.Date {
        return objc.msgSend(_self, "timestamp", ?*foundation.Date, .{});
    }

    pub fn uuid(_self: *@This()) ?*foundation.UUID {
        return objc.msgSend(_self, "UUID", ?*foundation.UUID, .{});
    }

    pub fn proximityUUID(_self: *@This()) ?*foundation.UUID {
        return objc.msgSend(_self, "proximityUUID", ?*foundation.UUID, .{});
    }

    pub fn major(_self: *@This()) ?*foundation.Number {
        return objc.msgSend(_self, "major", ?*foundation.Number, .{});
    }

    pub fn minor(_self: *@This()) ?*foundation.Number {
        return objc.msgSend(_self, "minor", ?*foundation.Number, .{});
    }

    pub fn proximity(_self: *@This()) Proximity {
        return objc.msgSend(_self, "proximity", Proximity, .{});
    }

    pub fn accuracy(_self: *@This()) LocationAccuracy {
        return objc.msgSend(_self, "accuracy", LocationAccuracy, .{});
    }

    pub fn rssi(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "rssi", objc.NSInteger, .{});
    }
};

pub const HeadingComponentValue = f64;

/// https://developer.apple.com/documentation/CoreLocation/CLHeading?language=objc
pub const Heading = opaque {
    pub const Internal = objc.ExternClass("CLHeading", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn magneticHeading(_self: *@This()) LocationDirection {
        return objc.msgSend(_self, "magneticHeading", LocationDirection, .{});
    }

    pub fn trueHeading(_self: *@This()) LocationDirection {
        return objc.msgSend(_self, "trueHeading", LocationDirection, .{});
    }

    pub fn headingAccuracy(_self: *@This()) LocationDirection {
        return objc.msgSend(_self, "headingAccuracy", LocationDirection, .{});
    }

    pub fn x(_self: *@This()) HeadingComponentValue {
        return objc.msgSend(_self, "x", HeadingComponentValue, .{});
    }

    pub fn y(_self: *@This()) HeadingComponentValue {
        return objc.msgSend(_self, "y", HeadingComponentValue, .{});
    }

    pub fn z(_self: *@This()) HeadingComponentValue {
        return objc.msgSend(_self, "z", HeadingComponentValue, .{});
    }

    pub fn timestamp(_self: *@This()) ?*foundation.Date {
        return objc.msgSend(_self, "timestamp", ?*foundation.Date, .{});
    }
};

pub const LiveUpdateConfiguration = objc.NSInteger;
pub const LiveUpdateConfiguration_Default: objc.NSInteger = 0;
pub const LiveUpdateConfiguration_AutomotiveNavigation: objc.NSInteger = 1;
pub const LiveUpdateConfiguration_OtherNavigation: objc.NSInteger = 2;
pub const LiveUpdateConfiguration_Fitness: objc.NSInteger = 3;
pub const LiveUpdateConfiguration_Airborne: objc.NSInteger = 4;

/// https://developer.apple.com/documentation/CoreLocation/CLUpdate?language=objc
pub const Update = opaque {
    pub const Internal = objc.ExternClass("CLUpdate", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn authorizationDenied(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "authorizationDenied", objc.BOOL, .{});
    }

    pub fn authorizationDeniedGlobally(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "authorizationDeniedGlobally", objc.BOOL, .{});
    }

    pub fn authorizationRestricted(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "authorizationRestricted", objc.BOOL, .{});
    }

    pub fn isStationary(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isStationary", objc.BOOL, .{});
    }

    pub fn stationary(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "stationary", objc.BOOL, .{});
    }

    pub fn insufficientlyInUse(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "insufficientlyInUse", objc.BOOL, .{});
    }

    pub fn locationUnavailable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "locationUnavailable", objc.BOOL, .{});
    }

    pub fn accuracyLimited(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accuracyLimited", objc.BOOL, .{});
    }

    pub fn serviceSessionRequired(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "serviceSessionRequired", objc.BOOL, .{});
    }

    pub fn authorizationRequestInProgress(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "authorizationRequestInProgress", objc.BOOL, .{});
    }

    pub fn location(_self: *@This()) ?*Location {
        return objc.msgSend(_self, "location", ?*Location, .{});
    }
};

/// https://developer.apple.com/documentation/CoreLocation/CLLocationUpdater?language=objc
pub const LocationUpdater = opaque {
    pub const Internal = objc.ExternClass("CLLocationUpdater", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn liveUpdaterWithQueueHandler(_queue: objc.dispatch_queue_t, _handler: *const fn (?*Update) callconv(.C) void) *@This() {
        return objc.msgSend(Internal.class(), "liveUpdaterWithQueue:handler:", *@This(), .{ _queue, _handler });
    }

    pub fn liveUpdaterWithConfigurationQueueHandler(_configuration: LiveUpdateConfiguration, _queue: objc.dispatch_queue_t, _handler: *const fn (?*Update) callconv(.C) void) *@This() {
        return objc.msgSend(Internal.class(), "liveUpdaterWithConfiguration:queue:handler:", *@This(), .{ _configuration, _queue, _handler });
    }

    pub fn @"resume"(_self: *@This()) void {
        return objc.msgSend(_self, "resume", void, .{});
    }

    pub fn pause(_self: *@This()) void {
        return objc.msgSend(_self, "pause", void, .{});
    }

    pub fn invalidate(_self: *@This()) void {
        return objc.msgSend(_self, "invalidate", void, .{});
    }
};

pub const MonitoringState = objc.NSUInteger;
pub const MonitoringState_Unknown: objc.NSUInteger = 0;
pub const MonitoringState_Satisfied: objc.NSUInteger = 1;
pub const MonitoringState_Unsatisfied: objc.NSUInteger = 2;
pub const MonitoringState_Unmonitored: objc.NSUInteger = 3;

/// https://developer.apple.com/documentation/CoreLocation/CLMonitoringEvent?language=objc
pub const MonitoringEvent = opaque {
    pub const Internal = objc.ExternClass("CLMonitoringEvent", @This(), objc.NSObject, &.{foundation.SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn identifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "identifier", ?*foundation.String, .{});
    }

    pub fn refinement(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "refinement", ?*anyopaque, .{});
    }

    pub fn state(_self: *@This()) MonitoringState {
        return objc.msgSend(_self, "state", MonitoringState, .{});
    }

    pub fn date(_self: *@This()) ?*foundation.Date {
        return objc.msgSend(_self, "date", ?*foundation.Date, .{});
    }

    pub fn authorizationDenied(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "authorizationDenied", objc.BOOL, .{});
    }

    pub fn authorizationDeniedGlobally(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "authorizationDeniedGlobally", objc.BOOL, .{});
    }

    pub fn authorizationRestricted(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "authorizationRestricted", objc.BOOL, .{});
    }

    pub fn insufficientlyInUse(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "insufficientlyInUse", objc.BOOL, .{});
    }

    pub fn accuracyLimited(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accuracyLimited", objc.BOOL, .{});
    }

    pub fn conditionUnsupported(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "conditionUnsupported", objc.BOOL, .{});
    }

    pub fn conditionLimitExceeded(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "conditionLimitExceeded", objc.BOOL, .{});
    }

    pub fn persistenceUnavailable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "persistenceUnavailable", objc.BOOL, .{});
    }

    pub fn serviceSessionRequired(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "serviceSessionRequired", objc.BOOL, .{});
    }

    pub fn authorizationRequestInProgress(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "authorizationRequestInProgress", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/CoreLocation/CLMonitoringRecord?language=objc
pub const MonitoringRecord = opaque {
    pub const Internal = objc.ExternClass("CLMonitoringRecord", @This(), objc.NSObject, &.{foundation.SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn condition(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "condition", ?*anyopaque, .{});
    }

    pub fn lastEvent(_self: *@This()) ?*MonitoringEvent {
        return objc.msgSend(_self, "lastEvent", ?*MonitoringEvent, .{});
    }
};

/// https://developer.apple.com/documentation/CoreLocation/CLMonitorConfiguration?language=objc
pub const MonitorConfiguration = opaque {
    pub const Internal = objc.ExternClass("CLMonitorConfiguration", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn configWithMonitorNameQueueEventHandler(_name: ?*foundation.String, _queue: objc.dispatch_queue_t, _eventHandler: *const fn (?*Monitor, ?*MonitoringEvent) callconv(.C) void) ?*MonitorConfiguration {
        return objc.msgSend(Internal.class(), "configWithMonitorName:queue:eventHandler:", ?*MonitorConfiguration, .{ _name, _queue, _eventHandler });
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn queue(_self: *@This()) objc.dispatch_queue_t {
        return objc.msgSend(_self, "queue", objc.dispatch_queue_t, .{});
    }

    pub fn eventHandler(_self: *@This()) *const fn (?*Monitor, ?*MonitoringEvent) callconv(.C) void {
        return objc.msgSend(_self, "eventHandler", *const fn (?*Monitor, ?*MonitoringEvent) callconv(.C) void, .{});
    }
};

/// https://developer.apple.com/documentation/CoreLocation/CLMonitor?language=objc
pub const Monitor = opaque {
    pub const Internal = objc.ExternClass("CLMonitor", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn requestMonitorWithConfigurationCompletion(_config: ?*MonitorConfiguration, _completionHandler: *const fn (?*Monitor) callconv(.C) void) void {
        return objc.msgSend(Internal.class(), "requestMonitorWithConfiguration:completion:", void, .{ _config, _completionHandler });
    }

    pub fn addConditionForMonitoringIdentifier(_self: *@This(), _condition: ?*Condition, _identifier: ?*foundation.String) void {
        return objc.msgSend(_self, "addConditionForMonitoring:identifier:", void, .{ _condition, _identifier });
    }

    pub fn addConditionForMonitoringIdentifierAssumedState(_self: *@This(), _condition: ?*Condition, _identifier: ?*foundation.String, _state: MonitoringState) void {
        return objc.msgSend(_self, "addConditionForMonitoring:identifier:assumedState:", void, .{ _condition, _identifier, _state });
    }

    pub fn removeConditionFromMonitoringWithIdentifier(_self: *@This(), _identifier: ?*foundation.String) void {
        return objc.msgSend(_self, "removeConditionFromMonitoringWithIdentifier:", void, .{_identifier});
    }

    pub fn monitoringRecordForIdentifier(_self: *@This(), _identifier: ?*foundation.String) ?*MonitoringRecord {
        return objc.msgSend(_self, "monitoringRecordForIdentifier:", ?*MonitoringRecord, .{_identifier});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn monitoredIdentifiers(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "monitoredIdentifiers", ?*anyopaque, .{});
    }
};

pub const DeviceOrientation = i32;
pub const DeviceOrientation_Unknown: i32 = 0;
pub const DeviceOrientation_Portrait: i32 = 1;
pub const DeviceOrientation_PortraitUpsideDown: i32 = 2;
pub const DeviceOrientation_LandscapeLeft: i32 = 3;
pub const DeviceOrientation_LandscapeRight: i32 = 4;
pub const DeviceOrientation_FaceUp: i32 = 5;
pub const DeviceOrientation_FaceDown: i32 = 6;

pub const AuthorizationStatus = i32;
pub const AuthorizationStatus_NotDetermined: i32 = 0;
pub const AuthorizationStatus_Restricted: i32 = 1;
pub const AuthorizationStatus_Denied: i32 = 2;
pub const AuthorizationStatus_AuthorizedAlways: i32 = 3;
pub const AuthorizationStatus_AuthorizedWhenInUse: i32 = 4;
pub const AuthorizationStatus_Authorized: i32 = 3;

pub const AccuracyAuthorization = objc.NSInteger;
pub const AccuracyAuthorization_FullAccuracy: objc.NSInteger = 0;
pub const AccuracyAuthorization_ReducedAccuracy: objc.NSInteger = 1;

pub const ActivityType = objc.NSInteger;
pub const ActivityType_Other: objc.NSInteger = 1;
pub const ActivityType_AutomotiveNavigation: objc.NSInteger = 2;
pub const ActivityType_Fitness: objc.NSInteger = 3;
pub const ActivityType_OtherNavigation: objc.NSInteger = 4;
pub const ActivityType_Airborne: objc.NSInteger = 5;

/// https://developer.apple.com/documentation/CoreLocation/CLLocationManager?language=objc
pub const LocationManager = opaque {
    pub const Internal = objc.ExternClass("CLLocationManager", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn locationServicesEnabled() objc.BOOL {
        return objc.msgSend(Internal.class(), "locationServicesEnabled", objc.BOOL, .{});
    }

    pub fn headingAvailable() objc.BOOL {
        return objc.msgSend(Internal.class(), "headingAvailable", objc.BOOL, .{});
    }

    pub fn significantLocationChangeMonitoringAvailable() objc.BOOL {
        return objc.msgSend(Internal.class(), "significantLocationChangeMonitoringAvailable", objc.BOOL, .{});
    }

    pub fn isMonitoringAvailableForClass(_regionClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isMonitoringAvailableForClass:", objc.BOOL, .{_regionClass});
    }

    pub fn regionMonitoringAvailable() objc.BOOL {
        return objc.msgSend(Internal.class(), "regionMonitoringAvailable", objc.BOOL, .{});
    }

    pub fn regionMonitoringEnabled() objc.BOOL {
        return objc.msgSend(Internal.class(), "regionMonitoringEnabled", objc.BOOL, .{});
    }

    pub fn isRangingAvailable() objc.BOOL {
        return objc.msgSend(Internal.class(), "isRangingAvailable", objc.BOOL, .{});
    }

    pub fn authorizationStatus() AuthorizationStatus {
        return objc.msgSend(Internal.class(), "authorizationStatus", AuthorizationStatus, .{});
    }

    pub fn requestWhenInUseAuthorization(_self: *@This()) void {
        return objc.msgSend(_self, "requestWhenInUseAuthorization", void, .{});
    }

    pub fn requestAlwaysAuthorization(_self: *@This()) void {
        return objc.msgSend(_self, "requestAlwaysAuthorization", void, .{});
    }

    pub fn requestTemporaryFullAccuracyAuthorizationWithPurposeKeyCompletion(_self: *@This(), _purposeKey: ?*foundation.String, _completion: *const fn (?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(_self, "requestTemporaryFullAccuracyAuthorizationWithPurposeKey:completion:", void, .{ _purposeKey, _completion });
    }

    pub fn requestTemporaryFullAccuracyAuthorizationWithPurposeKey(_self: *@This(), _purposeKey: ?*foundation.String) void {
        return objc.msgSend(_self, "requestTemporaryFullAccuracyAuthorizationWithPurposeKey:", void, .{_purposeKey});
    }

    pub fn startUpdatingLocation(_self: *@This()) void {
        return objc.msgSend(_self, "startUpdatingLocation", void, .{});
    }

    pub fn stopUpdatingLocation(_self: *@This()) void {
        return objc.msgSend(_self, "stopUpdatingLocation", void, .{});
    }

    pub fn requestLocation(_self: *@This()) void {
        return objc.msgSend(_self, "requestLocation", void, .{});
    }

    pub fn startUpdatingHeading(_self: *@This()) void {
        return objc.msgSend(_self, "startUpdatingHeading", void, .{});
    }

    pub fn stopUpdatingHeading(_self: *@This()) void {
        return objc.msgSend(_self, "stopUpdatingHeading", void, .{});
    }

    pub fn dismissHeadingCalibrationDisplay(_self: *@This()) void {
        return objc.msgSend(_self, "dismissHeadingCalibrationDisplay", void, .{});
    }

    pub fn startMonitoringSignificantLocationChanges(_self: *@This()) void {
        return objc.msgSend(_self, "startMonitoringSignificantLocationChanges", void, .{});
    }

    pub fn stopMonitoringSignificantLocationChanges(_self: *@This()) void {
        return objc.msgSend(_self, "stopMonitoringSignificantLocationChanges", void, .{});
    }

    pub fn startMonitoringLocationPushesWithCompletion(_self: *@This(), _completion: *const fn (?*foundation.Data, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(_self, "startMonitoringLocationPushesWithCompletion:", void, .{_completion});
    }

    pub fn stopMonitoringLocationPushes(_self: *@This()) void {
        return objc.msgSend(_self, "stopMonitoringLocationPushes", void, .{});
    }

    pub fn startMonitoringForRegionDesiredAccuracy(_self: *@This(), _region: ?*Region, _accuracy: LocationAccuracy) void {
        return objc.msgSend(_self, "startMonitoringForRegion:desiredAccuracy:", void, .{ _region, _accuracy });
    }

    pub fn stopMonitoringForRegion(_self: *@This(), _region: ?*Region) void {
        return objc.msgSend(_self, "stopMonitoringForRegion:", void, .{_region});
    }

    pub fn startMonitoringForRegion(_self: *@This(), _region: ?*Region) void {
        return objc.msgSend(_self, "startMonitoringForRegion:", void, .{_region});
    }

    pub fn requestStateForRegion(_self: *@This(), _region: ?*Region) void {
        return objc.msgSend(_self, "requestStateForRegion:", void, .{_region});
    }

    pub fn startRangingBeaconsInRegion(_self: *@This(), _region: ?*BeaconRegion) void {
        return objc.msgSend(_self, "startRangingBeaconsInRegion:", void, .{_region});
    }

    pub fn stopRangingBeaconsInRegion(_self: *@This(), _region: ?*BeaconRegion) void {
        return objc.msgSend(_self, "stopRangingBeaconsInRegion:", void, .{_region});
    }

    pub fn startRangingBeaconsSatisfyingConstraint(_self: *@This(), _constraint: ?*BeaconIdentityConstraint) void {
        return objc.msgSend(_self, "startRangingBeaconsSatisfyingConstraint:", void, .{_constraint});
    }

    pub fn stopRangingBeaconsSatisfyingConstraint(_self: *@This(), _constraint: ?*BeaconIdentityConstraint) void {
        return objc.msgSend(_self, "stopRangingBeaconsSatisfyingConstraint:", void, .{_constraint});
    }

    pub fn allowDeferredLocationUpdatesUntilTraveledTimeout(_self: *@This(), _distance: LocationDistance, _timeout: foundation.TimeInterval) void {
        return objc.msgSend(_self, "allowDeferredLocationUpdatesUntilTraveled:timeout:", void, .{ _distance, _timeout });
    }

    pub fn disallowDeferredLocationUpdates(_self: *@This()) void {
        return objc.msgSend(_self, "disallowDeferredLocationUpdates", void, .{});
    }

    pub fn deferredLocationUpdatesAvailable() objc.BOOL {
        return objc.msgSend(Internal.class(), "deferredLocationUpdatesAvailable", objc.BOOL, .{});
    }

    pub fn requestHistoricalLocationsWithPurposeKeySampleCountCompletionHandler(_self: *@This(), _purposeKey: ?*foundation.String, _sampleCount: objc.NSInteger, _handler: *const fn (?*anyopaque, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(_self, "requestHistoricalLocationsWithPurposeKey:sampleCount:completionHandler:", void, .{ _purposeKey, _sampleCount, _handler });
    }

    pub fn accuracyAuthorization(_self: *@This()) AccuracyAuthorization {
        return objc.msgSend(_self, "accuracyAuthorization", AccuracyAuthorization, .{});
    }

    pub fn isAuthorizedForWidgetUpdates(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAuthorizedForWidgetUpdates", objc.BOOL, .{});
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn purpose(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "purpose", ?*foundation.String, .{});
    }

    pub fn setPurpose(_self: *@This(), _purpose: ?*foundation.String) void {
        return objc.msgSend(_self, "setPurpose:", void, .{_purpose});
    }

    pub fn activityType(_self: *@This()) ActivityType {
        return objc.msgSend(_self, "activityType", ActivityType, .{});
    }

    pub fn setActivityType(_self: *@This(), _activityType: ActivityType) void {
        return objc.msgSend(_self, "setActivityType:", void, .{_activityType});
    }

    pub fn distanceFilter(_self: *@This()) LocationDistance {
        return objc.msgSend(_self, "distanceFilter", LocationDistance, .{});
    }

    pub fn setDistanceFilter(_self: *@This(), _distanceFilter: LocationDistance) void {
        return objc.msgSend(_self, "setDistanceFilter:", void, .{_distanceFilter});
    }

    pub fn desiredAccuracy(_self: *@This()) LocationAccuracy {
        return objc.msgSend(_self, "desiredAccuracy", LocationAccuracy, .{});
    }

    pub fn setDesiredAccuracy(_self: *@This(), _desiredAccuracy: LocationAccuracy) void {
        return objc.msgSend(_self, "setDesiredAccuracy:", void, .{_desiredAccuracy});
    }

    pub fn pausesLocationUpdatesAutomatically(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "pausesLocationUpdatesAutomatically", objc.BOOL, .{});
    }

    pub fn setPausesLocationUpdatesAutomatically(_self: *@This(), _pausesLocationUpdatesAutomatically: objc.BOOL) void {
        return objc.msgSend(_self, "setPausesLocationUpdatesAutomatically:", void, .{_pausesLocationUpdatesAutomatically});
    }

    pub fn allowsBackgroundLocationUpdates(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsBackgroundLocationUpdates", objc.BOOL, .{});
    }

    pub fn setAllowsBackgroundLocationUpdates(_self: *@This(), _allowsBackgroundLocationUpdates: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowsBackgroundLocationUpdates:", void, .{_allowsBackgroundLocationUpdates});
    }

    pub fn showsBackgroundLocationIndicator(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "showsBackgroundLocationIndicator", objc.BOOL, .{});
    }

    pub fn setShowsBackgroundLocationIndicator(_self: *@This(), _showsBackgroundLocationIndicator: objc.BOOL) void {
        return objc.msgSend(_self, "setShowsBackgroundLocationIndicator:", void, .{_showsBackgroundLocationIndicator});
    }

    pub fn location(_self: *@This()) ?*Location {
        return objc.msgSend(_self, "location", ?*Location, .{});
    }

    pub fn headingFilter(_self: *@This()) LocationDegrees {
        return objc.msgSend(_self, "headingFilter", LocationDegrees, .{});
    }

    pub fn setHeadingFilter(_self: *@This(), _headingFilter: LocationDegrees) void {
        return objc.msgSend(_self, "setHeadingFilter:", void, .{_headingFilter});
    }

    pub fn headingOrientation(_self: *@This()) DeviceOrientation {
        return objc.msgSend(_self, "headingOrientation", DeviceOrientation, .{});
    }

    pub fn setHeadingOrientation(_self: *@This(), _headingOrientation: DeviceOrientation) void {
        return objc.msgSend(_self, "setHeadingOrientation:", void, .{_headingOrientation});
    }

    pub fn heading(_self: *@This()) ?*Heading {
        return objc.msgSend(_self, "heading", ?*Heading, .{});
    }

    pub fn maximumRegionMonitoringDistance(_self: *@This()) LocationDistance {
        return objc.msgSend(_self, "maximumRegionMonitoringDistance", LocationDistance, .{});
    }

    pub fn monitoredRegions(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "monitoredRegions", ?*anyopaque, .{});
    }

    pub fn rangedRegions(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "rangedRegions", ?*anyopaque, .{});
    }

    pub fn rangedBeaconConstraints(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "rangedBeaconConstraints", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/CoreLocation/CLVisit?language=objc
pub const Visit = opaque {
    pub const Internal = objc.ExternClass("CLVisit", @This(), objc.NSObject, &.{ foundation.SecureCoding, foundation.Copying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn arrivalDate(_self: *@This()) ?*foundation.Date {
        return objc.msgSend(_self, "arrivalDate", ?*foundation.Date, .{});
    }

    pub fn departureDate(_self: *@This()) ?*foundation.Date {
        return objc.msgSend(_self, "departureDate", ?*foundation.Date, .{});
    }

    pub fn coordinate(_self: *@This()) LocationCoordinate2D {
        return objc.msgSend(_self, "coordinate", LocationCoordinate2D, .{});
    }

    pub fn horizontalAccuracy(_self: *@This()) LocationAccuracy {
        return objc.msgSend(_self, "horizontalAccuracy", LocationAccuracy, .{});
    }
};

/// https://developer.apple.com/documentation/CoreLocation/CLLocationManagerDelegate?language=objc
pub const LocationManagerDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn locationManagerDidUpdateToLocationFromLocation(_self: *@This(), _manager: ?*LocationManager, _newLocation: ?*Location, _oldLocation: ?*Location) void {
        return objc.msgSend(_self, "locationManager:didUpdateToLocation:fromLocation:", void, .{ _manager, _newLocation, _oldLocation });
    }

    pub fn locationManagerDidUpdateLocations(_self: *@This(), _manager: ?*LocationManager, _locations: ?*anyopaque) void {
        return objc.msgSend(_self, "locationManager:didUpdateLocations:", void, .{ _manager, _locations });
    }

    pub fn locationManagerDidUpdateHeading(_self: *@This(), _manager: ?*LocationManager, _newHeading: ?*Heading) void {
        return objc.msgSend(_self, "locationManager:didUpdateHeading:", void, .{ _manager, _newHeading });
    }

    pub fn locationManagerShouldDisplayHeadingCalibration(_self: *@This(), _manager: ?*LocationManager) objc.BOOL {
        return objc.msgSend(_self, "locationManagerShouldDisplayHeadingCalibration:", objc.BOOL, .{_manager});
    }

    pub fn locationManagerDidDetermineStateForRegion(_self: *@This(), _manager: ?*LocationManager, _state: RegionState, _region: ?*Region) void {
        return objc.msgSend(_self, "locationManager:didDetermineState:forRegion:", void, .{ _manager, _state, _region });
    }

    pub fn locationManagerDidRangeBeaconsInRegion(_self: *@This(), _manager: ?*LocationManager, _beacons: ?*anyopaque, _region: ?*BeaconRegion) void {
        return objc.msgSend(_self, "locationManager:didRangeBeacons:inRegion:", void, .{ _manager, _beacons, _region });
    }

    pub fn locationManagerRangingBeaconsDidFailForRegionWithError(_self: *@This(), _manager: ?*LocationManager, _region: ?*BeaconRegion, _error: ?*foundation.Error) void {
        return objc.msgSend(_self, "locationManager:rangingBeaconsDidFailForRegion:withError:", void, .{ _manager, _region, _error });
    }

    pub fn locationManagerDidRangeBeaconsSatisfyingConstraint(_self: *@This(), _manager: ?*LocationManager, _beacons: ?*anyopaque, _beaconConstraint: ?*BeaconIdentityConstraint) void {
        return objc.msgSend(_self, "locationManager:didRangeBeacons:satisfyingConstraint:", void, .{ _manager, _beacons, _beaconConstraint });
    }

    pub fn locationManagerDidFailRangingBeaconsForConstraintError(_self: *@This(), _manager: ?*LocationManager, _beaconConstraint: ?*BeaconIdentityConstraint, _error: ?*foundation.Error) void {
        return objc.msgSend(_self, "locationManager:didFailRangingBeaconsForConstraint:error:", void, .{ _manager, _beaconConstraint, _error });
    }

    pub fn locationManagerDidEnterRegion(_self: *@This(), _manager: ?*LocationManager, _region: ?*Region) void {
        return objc.msgSend(_self, "locationManager:didEnterRegion:", void, .{ _manager, _region });
    }

    pub fn locationManagerDidExitRegion(_self: *@This(), _manager: ?*LocationManager, _region: ?*Region) void {
        return objc.msgSend(_self, "locationManager:didExitRegion:", void, .{ _manager, _region });
    }

    pub fn locationManagerDidFailWithError(_self: *@This(), _manager: ?*LocationManager, _error: ?*foundation.Error) void {
        return objc.msgSend(_self, "locationManager:didFailWithError:", void, .{ _manager, _error });
    }

    pub fn locationManagerMonitoringDidFailForRegionWithError(_self: *@This(), _manager: ?*LocationManager, _region: ?*Region, _error: ?*foundation.Error) void {
        return objc.msgSend(_self, "locationManager:monitoringDidFailForRegion:withError:", void, .{ _manager, _region, _error });
    }

    pub fn locationManagerDidChangeAuthorizationStatus(_self: *@This(), _manager: ?*LocationManager, _status: AuthorizationStatus) void {
        return objc.msgSend(_self, "locationManager:didChangeAuthorizationStatus:", void, .{ _manager, _status });
    }

    pub fn locationManagerDidChangeAuthorization(_self: *@This(), _manager: ?*LocationManager) void {
        return objc.msgSend(_self, "locationManagerDidChangeAuthorization:", void, .{_manager});
    }

    pub fn locationManagerDidStartMonitoringForRegion(_self: *@This(), _manager: ?*LocationManager, _region: ?*Region) void {
        return objc.msgSend(_self, "locationManager:didStartMonitoringForRegion:", void, .{ _manager, _region });
    }

    pub fn locationManagerDidPauseLocationUpdates(_self: *@This(), _manager: ?*LocationManager) void {
        return objc.msgSend(_self, "locationManagerDidPauseLocationUpdates:", void, .{_manager});
    }

    pub fn locationManagerDidResumeLocationUpdates(_self: *@This(), _manager: ?*LocationManager) void {
        return objc.msgSend(_self, "locationManagerDidResumeLocationUpdates:", void, .{_manager});
    }

    pub fn locationManagerDidFinishDeferredUpdatesWithError(_self: *@This(), _manager: ?*LocationManager, _error: ?*foundation.Error) void {
        return objc.msgSend(_self, "locationManager:didFinishDeferredUpdatesWithError:", void, .{ _manager, _error });
    }

    pub fn locationManagerDidVisit(_self: *@This(), _manager: ?*LocationManager, _visit: ?*Visit) void {
        return objc.msgSend(_self, "locationManager:didVisit:", void, .{ _manager, _visit });
    }
};

/// https://developer.apple.com/documentation/CoreLocation/CLPlacemark?language=objc
pub const Placemark = opaque {
    pub const Internal = objc.ExternClass("CLPlacemark", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithPlacemark(_self: *@This(), _placemark: ?*Placemark) *@This() {
        return objc.msgSend(_self, "initWithPlacemark:", *@This(), .{_placemark});
    }

    pub fn location(_self: *@This()) ?*Location {
        return objc.msgSend(_self, "location", ?*Location, .{});
    }

    pub fn region(_self: *@This()) ?*Region {
        return objc.msgSend(_self, "region", ?*Region, .{});
    }

    pub fn timeZone(_self: *@This()) ?*foundation.TimeZone {
        return objc.msgSend(_self, "timeZone", ?*foundation.TimeZone, .{});
    }

    pub fn addressDictionary(_self: *@This()) ?*foundation.Dictionary {
        return objc.msgSend(_self, "addressDictionary", ?*foundation.Dictionary, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn thoroughfare(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "thoroughfare", ?*foundation.String, .{});
    }

    pub fn subThoroughfare(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subThoroughfare", ?*foundation.String, .{});
    }

    pub fn locality(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "locality", ?*foundation.String, .{});
    }

    pub fn subLocality(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subLocality", ?*foundation.String, .{});
    }

    pub fn administrativeArea(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "administrativeArea", ?*foundation.String, .{});
    }

    pub fn subAdministrativeArea(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "subAdministrativeArea", ?*foundation.String, .{});
    }

    pub fn postalCode(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "postalCode", ?*foundation.String, .{});
    }

    pub fn isOcountryCode(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "ISOcountryCode", ?*foundation.String, .{});
    }

    pub fn country(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "country", ?*foundation.String, .{});
    }

    pub fn inlandWater(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "inlandWater", ?*foundation.String, .{});
    }

    pub fn ocean(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "ocean", ?*foundation.String, .{});
    }

    pub fn areasOfInterest(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "areasOfInterest", ?*anyopaque, .{});
    }
};

pub const GeocodeCompletionHandler = *const fn (?*anyopaque, ?*foundation.Error) callconv(.C) void;

/// https://developer.apple.com/documentation/CoreLocation/CLGeocoder?language=objc
pub const Geocoder = opaque {
    pub const Internal = objc.ExternClass("CLGeocoder", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn reverseGeocodeLocationCompletionHandler(_self: *@This(), _location: ?*Location, _completionHandler: GeocodeCompletionHandler) void {
        return objc.msgSend(_self, "reverseGeocodeLocation:completionHandler:", void, .{ _location, _completionHandler });
    }

    pub fn reverseGeocodeLocationPreferredLocaleCompletionHandler(_self: *@This(), _location: ?*Location, _locale: ?*foundation.Locale, _completionHandler: GeocodeCompletionHandler) void {
        return objc.msgSend(_self, "reverseGeocodeLocation:preferredLocale:completionHandler:", void, .{ _location, _locale, _completionHandler });
    }

    pub fn geocodeAddressDictionaryCompletionHandler(_self: *@This(), _addressDictionary: ?*foundation.Dictionary, _completionHandler: GeocodeCompletionHandler) void {
        return objc.msgSend(_self, "geocodeAddressDictionary:completionHandler:", void, .{ _addressDictionary, _completionHandler });
    }

    pub fn geocodeAddressStringInRegionCompletionHandler(_self: *@This(), _addressString: ?*foundation.String, _region: ?*Region, _completionHandler: GeocodeCompletionHandler) void {
        return objc.msgSend(_self, "geocodeAddressString:inRegion:completionHandler:", void, .{ _addressString, _region, _completionHandler });
    }

    pub fn geocodeAddressStringInRegionPreferredLocaleCompletionHandler(
        _self: *@This(),
        _addressString: ?*foundation.String,
        _region: ?*Region,
        _locale: ?*foundation.Locale,
        _completionHandler: GeocodeCompletionHandler,
    ) void {
        return objc.msgSend(_self, "geocodeAddressString:inRegion:preferredLocale:completionHandler:", void, .{
            _addressString,
            _region,
            _locale,
            _completionHandler,
        });
    }

    pub fn geocodeAddressStringCompletionHandler(_self: *@This(), _addressString: ?*foundation.String, _completionHandler: GeocodeCompletionHandler) void {
        return objc.msgSend(_self, "geocodeAddressString:completionHandler:", void, .{ _addressString, _completionHandler });
    }

    pub fn cancelGeocode(_self: *@This()) void {
        return objc.msgSend(_self, "cancelGeocode", void, .{});
    }

    pub fn isGeocoding(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isGeocoding", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/CoreLocation/CLLocationPushServiceExtension?language=objc
pub const LocationPushServiceExtension = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn didReceiveLocationPushPayloadCompletion(_self: *@This(), _payload: ?*anyopaque, _completion: *const fn () callconv(.C) void) void {
        return objc.msgSend(_self, "didReceiveLocationPushPayload:completion:", void, .{ _payload, _completion });
    }

    pub fn serviceExtensionWillTerminate(_self: *@This()) void {
        return objc.msgSend(_self, "serviceExtensionWillTerminate", void, .{});
    }
};

pub const LocationPushServiceError = objc.NSInteger;
pub const LocationPushServiceError_Unknown: objc.NSInteger = 0;
pub const LocationPushServiceError_MissingPushExtension: objc.NSInteger = 1;
pub const LocationPushServiceError_MissingPushServerEnvironment: objc.NSInteger = 2;
pub const LocationPushServiceError_MissingEntitlement: objc.NSInteger = 3;
pub const LocationPushServiceError_UnsupportedPlatform: objc.NSInteger = 4;

/// https://developer.apple.com/documentation/CoreLocation/CLBackgroundActivitySessionDiagnostic?language=objc
pub const BackgroundActivitySessionDiagnostic = opaque {
    pub const Internal = objc.ExternClass("CLBackgroundActivitySessionDiagnostic", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn authorizationDenied(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "authorizationDenied", objc.BOOL, .{});
    }

    pub fn authorizationDeniedGlobally(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "authorizationDeniedGlobally", objc.BOOL, .{});
    }

    pub fn authorizationRestricted(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "authorizationRestricted", objc.BOOL, .{});
    }

    pub fn insufficientlyInUse(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "insufficientlyInUse", objc.BOOL, .{});
    }

    pub fn serviceSessionRequired(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "serviceSessionRequired", objc.BOOL, .{});
    }

    pub fn authorizationRequestInProgress(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "authorizationRequestInProgress", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/CoreLocation/CLBackgroundActivitySession?language=objc
pub const BackgroundActivitySession = opaque {
    pub const Internal = objc.ExternClass("CLBackgroundActivitySession", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn invalidate(_self: *@This()) void {
        return objc.msgSend(_self, "invalidate", void, .{});
    }

    pub fn backgroundActivitySession() *@This() {
        return objc.msgSend(Internal.class(), "backgroundActivitySession", *@This(), .{});
    }

    pub fn backgroundActivitySessionWithQueueHandler(_queue: objc.dispatch_queue_t, _handler: *const fn (?*BackgroundActivitySessionDiagnostic) callconv(.C) void) *@This() {
        return objc.msgSend(Internal.class(), "backgroundActivitySessionWithQueue:handler:", *@This(), .{ _queue, _handler });
    }
};

pub const ServiceSessionAuthorizationRequirement = objc.NSInteger;
pub const ServiceSessionAuthorizationRequirement_None: objc.NSInteger = 0;
pub const ServiceSessionAuthorizationRequirement_WhenInUse: objc.NSInteger = 1;

/// https://developer.apple.com/documentation/CoreLocation/CLServiceSessionDiagnostic?language=objc
pub const ServiceSessionDiagnostic = opaque {
    pub const Internal = objc.ExternClass("CLServiceSessionDiagnostic", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn authorizationDenied(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "authorizationDenied", objc.BOOL, .{});
    }

    pub fn authorizationDeniedGlobally(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "authorizationDeniedGlobally", objc.BOOL, .{});
    }

    pub fn authorizationRestricted(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "authorizationRestricted", objc.BOOL, .{});
    }

    pub fn insufficientlyInUse(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "insufficientlyInUse", objc.BOOL, .{});
    }

    pub fn serviceSessionRequired(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "serviceSessionRequired", objc.BOOL, .{});
    }

    pub fn fullAccuracyDenied(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "fullAccuracyDenied", objc.BOOL, .{});
    }

    pub fn alwaysAuthorizationDenied(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "alwaysAuthorizationDenied", objc.BOOL, .{});
    }

    pub fn authorizationRequestInProgress(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "authorizationRequestInProgress", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/CoreLocation/CLServiceSession?language=objc
pub const ServiceSession = opaque {
    pub const Internal = objc.ExternClass("CLServiceSession", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load() void {
        return objc.msgSend(Internal.class(), "load", void, .{});
    }

    pub fn initialize() void {
        return objc.msgSend(Internal.class(), "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(Internal.class(), "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "copy", ?objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "mutableCopy", ?objc.Id, .{});
    }

    pub fn copyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_zone: ?*objc._NSZone) ?objc.Id {
        return objc.msgSend(Internal.class(), "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_aSelector: objc.Selector) objc.IMP {
        return objc.msgSend(Internal.class(), "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: objc.Selector) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_aSelector: objc.Selector) ?*foundation.MethodSignature {
        return objc.msgSend(Internal.class(), "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_aClass: objc.Class) objc.BOOL {
        return objc.msgSend(Internal.class(), "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_sel: objc.Selector) objc.BOOL {
        return objc.msgSend(Internal.class(), "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn sessionRequiringAuthorization(_authorizationRequirement: ServiceSessionAuthorizationRequirement) ?*ServiceSession {
        return objc.msgSend(Internal.class(), "sessionRequiringAuthorization:", ?*ServiceSession, .{_authorizationRequirement});
    }

    pub fn sessionRequiringAuthorizationQueueHandler(_authorizationRequirement: ServiceSessionAuthorizationRequirement, _queue: objc.dispatch_queue_t, _handler: *const fn (?*ServiceSessionDiagnostic) callconv(.C) void) ?*ServiceSession {
        return objc.msgSend(Internal.class(), "sessionRequiringAuthorization:queue:handler:", ?*ServiceSession, .{ _authorizationRequirement, _queue, _handler });
    }

    pub fn sessionRequiringAuthorizationFullAccuracyPurposeKey(_authorizationRequirement: ServiceSessionAuthorizationRequirement, _purposeKey: ?*foundation.String) ?*ServiceSession {
        return objc.msgSend(Internal.class(), "sessionRequiringAuthorization:fullAccuracyPurposeKey:", ?*ServiceSession, .{ _authorizationRequirement, _purposeKey });
    }

    pub fn sessionRequiringAuthorizationFullAccuracyPurposeKeyQueueHandler(
        _authorizationRequirement: ServiceSessionAuthorizationRequirement,
        _purposeKey: ?*foundation.String,
        _queue: objc.dispatch_queue_t,
        _handler: *const fn (?*ServiceSessionDiagnostic) callconv(.C) void,
    ) ?*ServiceSession {
        return objc.msgSend(Internal.class(), "sessionRequiringAuthorization:fullAccuracyPurposeKey:queue:handler:", ?*ServiceSession, .{
            _authorizationRequirement,
            _purposeKey,
            _queue,
            _handler,
        });
    }

    pub fn invalidate(_self: *@This()) void {
        return objc.msgSend(_self, "invalidate", void, .{});
    }
};
