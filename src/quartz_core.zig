// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const core_graphics = @import("core_graphics.zig"); // Framework dependency CoreGraphics.
const core_image = @import("core_image.zig"); // Framework dependency CoreImage.
const foundation = @import("foundation.zig"); // Framework dependency Foundation.
const metal = @import("metal.zig"); // Framework dependency Metal.
const opengl = @import("opengl.zig"); // Framework dependency OpenGL.
const core_video = @import("core_video.zig"); // Framework dependency CoreVideo.

pub extern "QuartzCore" fn CurrentMediaTime() callconv(.C) core_foundation.TimeInterval;

pub const Transform3D = extern struct {};

pub extern "QuartzCore" fn Transform3DIsIdentity() callconv(.C) i32;

pub extern "QuartzCore" fn Transform3DEqualToTransform() callconv(.C) i32;

pub extern "QuartzCore" fn Transform3DMakeTranslation(tx: core_foundation.CGFloat, ty: core_foundation.CGFloat, tz: core_foundation.CGFloat) callconv(.C) Transform3D;

pub extern "QuartzCore" fn Transform3DMakeScale(sx: core_foundation.CGFloat, sy: core_foundation.CGFloat, sz: core_foundation.CGFloat) callconv(.C) Transform3D;

pub extern "QuartzCore" fn Transform3DMakeRotation(angle: core_foundation.CGFloat, x: core_foundation.CGFloat, y: core_foundation.CGFloat, z: core_foundation.CGFloat, ) callconv(.C) Transform3D;

pub extern "QuartzCore" fn Transform3DTranslate(t: Transform3D, tx: core_foundation.CGFloat, ty: core_foundation.CGFloat, tz: core_foundation.CGFloat, ) callconv(.C) Transform3D;

pub extern "QuartzCore" fn Transform3DScale(t: Transform3D, sx: core_foundation.CGFloat, sy: core_foundation.CGFloat, sz: core_foundation.CGFloat, ) callconv(.C) Transform3D;

pub extern "QuartzCore" fn Transform3DRotate(t: Transform3D, angle: core_foundation.CGFloat, x: core_foundation.CGFloat, y: core_foundation.CGFloat, z: core_foundation.CGFloat, ) callconv(.C) Transform3D;

pub extern "QuartzCore" fn Transform3DConcat(a: Transform3D, b: Transform3D) callconv(.C) Transform3D;

pub extern "QuartzCore" fn Transform3DInvert(t: Transform3D) callconv(.C) Transform3D;

pub extern "QuartzCore" fn Transform3DMakeAffineTransform(m: core_foundation.CGAffineTransform) callconv(.C) Transform3D;

pub extern "QuartzCore" fn Transform3DIsAffine() callconv(.C) i32;

pub extern "QuartzCore" fn Transform3DGetAffineTransform(t: Transform3D) callconv(.C) core_foundation.CGAffineTransform;

pub const MediaTimingFillMode = ?*NSString;

/// https://developer.apple.com/documentation/QuartzCore/CAMediaTiming?language=objc
pub const MediaTiming = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn beginTime(self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(self, "beginTime", core_foundation.TimeInterval, .{});
    }

    pub fn setBeginTime(self: *@This(), beginTime: core_foundation.TimeInterval) void {
        return objc.msgSend(self, "setBeginTime:", void, .{beginTime});
    }

    pub fn duration(self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(self, "duration", core_foundation.TimeInterval, .{});
    }

    pub fn setDuration(self: *@This(), duration: core_foundation.TimeInterval) void {
        return objc.msgSend(self, "setDuration:", void, .{duration});
    }

    pub fn speed(self: *@This()) f32 {
        return objc.msgSend(self, "speed", f32, .{});
    }

    pub fn setSpeed(self: *@This(), speed: f32) void {
        return objc.msgSend(self, "setSpeed:", void, .{speed});
    }

    pub fn timeOffset(self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(self, "timeOffset", core_foundation.TimeInterval, .{});
    }

    pub fn setTimeOffset(self: *@This(), timeOffset: core_foundation.TimeInterval) void {
        return objc.msgSend(self, "setTimeOffset:", void, .{timeOffset});
    }

    pub fn repeatCount(self: *@This()) f32 {
        return objc.msgSend(self, "repeatCount", f32, .{});
    }

    pub fn setRepeatCount(self: *@This(), repeatCount: f32) void {
        return objc.msgSend(self, "setRepeatCount:", void, .{repeatCount});
    }

    pub fn repeatDuration(self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(self, "repeatDuration", core_foundation.TimeInterval, .{});
    }

    pub fn setRepeatDuration(self: *@This(), repeatDuration: core_foundation.TimeInterval) void {
        return objc.msgSend(self, "setRepeatDuration:", void, .{repeatDuration});
    }

    pub fn autoreverses(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "autoreverses", objc.BOOL, .{});
    }

    pub fn setAutoreverses(self: *@This(), autoreverses: objc.BOOL) void {
        return objc.msgSend(self, "setAutoreverses:", void, .{autoreverses});
    }

    pub fn fillMode(self: *@This()) MediaTimingFillMode {
        return objc.msgSend(self, "fillMode", MediaTimingFillMode, .{});
    }

    pub fn setFillMode(self: *@This(), fillMode: MediaTimingFillMode) void {
        return objc.msgSend(self, "setFillMode:", void, .{fillMode});
    }

};

pub const LayerContentsGravity = ?*NSString;

pub const LayerContentsFormat = ?*NSString;

pub const LayerContentsFilter = ?*NSString;

pub const LayerCornerCurve = ?*NSString;

pub const AutoresizingMask = enum(u32) {
    kCALayerNotSizable = 0,
    kCALayerMinXMargin = 1,
    kCALayerWidthSizable = 2,
    kCALayerMaxXMargin = 4,
    kCALayerMinYMargin = 8,
    kCALayerHeightSizable = 16,
    kCALayerMaxYMargin = 32,
};

pub const ToneMapMode = ?*NSString;

pub const EdgeAntialiasingMask = enum(u32) {
    kCALayerLeftEdge = 1,
    kCALayerRightEdge = 2,
    kCALayerBottomEdge = 4,
    kCALayerTopEdge = 8,
};

pub const CornerMask = enum(objc.NSUInteger) {
    kCALayerMinXMinYCorner = 1,
    kCALayerMaxXMinYCorner = 2,
    kCALayerMinXMaxYCorner = 4,
    kCALayerMaxXMaxYCorner = 8,
};

/// https://developer.apple.com/documentation/QuartzCore/CALayer?language=objc
pub const Layer = opaque {
    pub const InternalInfo = objc.ExternalClass("CALayer", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn layer(self: *@This()) *@This() {
        return objc.msgSend(self, "layer", *@This(), .{});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithLayer(self: *@This(), layer: *objc.Id) *@This() {
        return objc.msgSend(self, "initWithLayer:", *@This(), .{layer});
    }

    pub fn presentationLayer(self: *@This()) *@This() {
        return objc.msgSend(self, "presentationLayer", *@This(), .{});
    }

    pub fn modelLayer(self: *@This()) *@This() {
        return objc.msgSend(self, "modelLayer", *@This(), .{});
    }

    pub fn defaultValueForKey(self: *@This(), key: ?*NSString) *objc.Id {
        return objc.msgSend(self, "defaultValueForKey:", *objc.Id, .{key});
    }

    pub fn affineTransform(self: *@This()) core_foundation.CGAffineTransform {
        return objc.msgSend(self, "affineTransform", core_foundation.CGAffineTransform, .{});
    }

    pub fn setAffineTransform(self: *@This(), m: core_foundation.CGAffineTransform) void {
        return objc.msgSend(self, "setAffineTransform:", void, .{m});
    }

    pub fn removeFromSuperlayer(self: *@This()) void {
        return objc.msgSend(self, "removeFromSuperlayer", void, .{});
    }

    pub fn addSublayer(self: *@This(), layer: ?*Layer) void {
        return objc.msgSend(self, "addSublayer:", void, .{layer});
    }

    pub fn insertSublayerAtIndex(self: *@This(), layer: ?*Layer, idx: u32) void {
        return objc.msgSend(self, "insertSublayer:atIndex:", void, .{layer, idx});
    }

    pub fn insertSublayerBelow(self: *@This(), layer: ?*Layer, sibling: ?*Layer) void {
        return objc.msgSend(self, "insertSublayer:below:", void, .{layer, sibling});
    }

    pub fn insertSublayerAbove(self: *@This(), layer: ?*Layer, sibling: ?*Layer) void {
        return objc.msgSend(self, "insertSublayer:above:", void, .{layer, sibling});
    }

    pub fn replaceSublayerWith(self: *@This(), oldLayer: ?*Layer, newLayer: ?*Layer) void {
        return objc.msgSend(self, "replaceSublayer:with:", void, .{oldLayer, newLayer});
    }

    pub fn convertPointFromLayer(self: *@This(), p: core_foundation.CGPoint, l: ?*Layer) core_foundation.CGPoint {
        return objc.msgSend(self, "convertPoint:fromLayer:", core_foundation.CGPoint, .{p, l});
    }

    pub fn convertPointToLayer(self: *@This(), p: core_foundation.CGPoint, l: ?*Layer) core_foundation.CGPoint {
        return objc.msgSend(self, "convertPoint:toLayer:", core_foundation.CGPoint, .{p, l});
    }

    pub fn convertRectFromLayer(self: *@This(), r: core_foundation.CGRect, l: ?*Layer) core_foundation.CGRect {
        return objc.msgSend(self, "convertRect:fromLayer:", core_foundation.CGRect, .{r, l});
    }

    pub fn convertRectToLayer(self: *@This(), r: core_foundation.CGRect, l: ?*Layer) core_foundation.CGRect {
        return objc.msgSend(self, "convertRect:toLayer:", core_foundation.CGRect, .{r, l});
    }

    pub fn convertTimeFromLayer(self: *@This(), t: core_foundation.TimeInterval, l: ?*Layer) core_foundation.TimeInterval {
        return objc.msgSend(self, "convertTime:fromLayer:", core_foundation.TimeInterval, .{t, l});
    }

    pub fn convertTimeToLayer(self: *@This(), t: core_foundation.TimeInterval, l: ?*Layer) core_foundation.TimeInterval {
        return objc.msgSend(self, "convertTime:toLayer:", core_foundation.TimeInterval, .{t, l});
    }

    pub fn hitTest(self: *@This(), p: core_foundation.CGPoint) ?*anyopaque {
        return objc.msgSend(self, "hitTest:", ?*anyopaque, .{p});
    }

    pub fn display(self: *@This()) void {
        return objc.msgSend(self, "display", void, .{});
    }

    pub fn setNeedsDisplay(self: *@This()) void {
        return objc.msgSend(self, "setNeedsDisplay", void, .{});
    }

    pub fn setNeedsDisplayInRect(self: *@This(), r: core_foundation.CGRect) void {
        return objc.msgSend(self, "setNeedsDisplayInRect:", void, .{r});
    }

    pub fn displayIfNeeded(self: *@This()) void {
        return objc.msgSend(self, "displayIfNeeded", void, .{});
    }

    pub fn drawInContext(self: *@This(), ctx: core_graphics.ContextRef) void {
        return objc.msgSend(self, "drawInContext:", void, .{ctx});
    }

    pub fn renderInContext(self: *@This(), ctx: core_graphics.ContextRef) void {
        return objc.msgSend(self, "renderInContext:", void, .{ctx});
    }

    pub fn cornerCurveExpansionFactor(self: *@This(), curve: LayerCornerCurve) core_foundation.CGFloat {
        return objc.msgSend(self, "cornerCurveExpansionFactor:", core_foundation.CGFloat, .{curve});
    }

    pub fn preferredFrameSize(self: *@This()) core_foundation.CGSize {
        return objc.msgSend(self, "preferredFrameSize", core_foundation.CGSize, .{});
    }

    pub fn setNeedsLayout(self: *@This()) void {
        return objc.msgSend(self, "setNeedsLayout", void, .{});
    }

    pub fn layoutIfNeeded(self: *@This()) void {
        return objc.msgSend(self, "layoutIfNeeded", void, .{});
    }

    pub fn layoutSublayers(self: *@This()) void {
        return objc.msgSend(self, "layoutSublayers", void, .{});
    }

    pub fn resizeSublayersWithOldSize(self: *@This(), size: core_foundation.CGSize) void {
        return objc.msgSend(self, "resizeSublayersWithOldSize:", void, .{size});
    }

    pub fn resizeWithOldSuperlayerSize(self: *@This(), size: core_foundation.CGSize) void {
        return objc.msgSend(self, "resizeWithOldSuperlayerSize:", void, .{size});
    }

    pub fn defaultActionForKey(self: *@This(), event: ?*NSString) ?*anyopaque {
        return objc.msgSend(self, "defaultActionForKey:", ?*anyopaque, .{event});
    }

    pub fn actionForKey(self: *@This(), event: ?*NSString) ?*anyopaque {
        return objc.msgSend(self, "actionForKey:", ?*anyopaque, .{event});
    }

    pub fn addAnimationForKey(self: *@This(), anim: ?*Animation, key: ?*NSString) void {
        return objc.msgSend(self, "addAnimation:forKey:", void, .{anim, key});
    }

    pub fn removeAllAnimations(self: *@This()) void {
        return objc.msgSend(self, "removeAllAnimations", void, .{});
    }

    pub fn removeAnimationForKey(self: *@This(), key: ?*NSString) void {
        return objc.msgSend(self, "removeAnimationForKey:", void, .{key});
    }

    pub fn animationKeys(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "animationKeys", ?*anyopaque, .{});
    }

    pub fn animationForKey(self: *@This(), key: ?*NSString) ?*anyopaque {
        return objc.msgSend(self, "animationForKey:", ?*anyopaque, .{key});
    }

    pub fn bounds(self: *@This()) core_foundation.CGRect {
        return objc.msgSend(self, "bounds", core_foundation.CGRect, .{});
    }

    pub fn setBounds(self: *@This(), bounds: core_foundation.CGRect) void {
        return objc.msgSend(self, "setBounds:", void, .{bounds});
    }

    pub fn position(self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(self, "position", core_foundation.CGPoint, .{});
    }

    pub fn setPosition(self: *@This(), position: core_foundation.CGPoint) void {
        return objc.msgSend(self, "setPosition:", void, .{position});
    }

    pub fn zPosition(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "zPosition", core_foundation.CGFloat, .{});
    }

    pub fn setZPosition(self: *@This(), zPosition: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setZPosition:", void, .{zPosition});
    }

    pub fn anchorPoint(self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(self, "anchorPoint", core_foundation.CGPoint, .{});
    }

    pub fn setAnchorPoint(self: *@This(), anchorPoint: core_foundation.CGPoint) void {
        return objc.msgSend(self, "setAnchorPoint:", void, .{anchorPoint});
    }

    pub fn anchorPointZ(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "anchorPointZ", core_foundation.CGFloat, .{});
    }

    pub fn setAnchorPointZ(self: *@This(), anchorPointZ: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setAnchorPointZ:", void, .{anchorPointZ});
    }

    pub fn transform(self: *@This()) Transform3D {
        return objc.msgSend(self, "transform", Transform3D, .{});
    }

    pub fn setTransform(self: *@This(), transform: Transform3D) void {
        return objc.msgSend(self, "setTransform:", void, .{transform});
    }

    pub fn frame(self: *@This()) core_foundation.CGRect {
        return objc.msgSend(self, "frame", core_foundation.CGRect, .{});
    }

    pub fn setFrame(self: *@This(), frame: core_foundation.CGRect) void {
        return objc.msgSend(self, "setFrame:", void, .{frame});
    }

    pub fn isHidden(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isHidden", objc.BOOL, .{});
    }

    pub fn setHidden(self: *@This(), hidden: objc.BOOL) void {
        return objc.msgSend(self, "setHidden:", void, .{hidden});
    }

    pub fn isDoubleSided(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isDoubleSided", objc.BOOL, .{});
    }

    pub fn setDoubleSided(self: *@This(), doubleSided: objc.BOOL) void {
        return objc.msgSend(self, "setDoubleSided:", void, .{doubleSided});
    }

    pub fn isGeometryFlipped(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isGeometryFlipped", objc.BOOL, .{});
    }

    pub fn setGeometryFlipped(self: *@This(), geometryFlipped: objc.BOOL) void {
        return objc.msgSend(self, "setGeometryFlipped:", void, .{geometryFlipped});
    }

    pub fn superlayer(self: *@This()) ?*Layer {
        return objc.msgSend(self, "superlayer", ?*Layer, .{});
    }

    pub fn sublayers(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "sublayers", ?*anyopaque, .{});
    }

    pub fn setSublayers(self: *@This(), sublayers: ?*anyopaque) void {
        return objc.msgSend(self, "setSublayers:", void, .{sublayers});
    }

    pub fn sublayerTransform(self: *@This()) Transform3D {
        return objc.msgSend(self, "sublayerTransform", Transform3D, .{});
    }

    pub fn setSublayerTransform(self: *@This(), sublayerTransform: Transform3D) void {
        return objc.msgSend(self, "setSublayerTransform:", void, .{sublayerTransform});
    }

    pub fn mask(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "mask", ?*anyopaque, .{});
    }

    pub fn setMask(self: *@This(), mask: ?*anyopaque) void {
        return objc.msgSend(self, "setMask:", void, .{mask});
    }

    pub fn masksToBounds(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "masksToBounds", objc.BOOL, .{});
    }

    pub fn setMasksToBounds(self: *@This(), masksToBounds: objc.BOOL) void {
        return objc.msgSend(self, "setMasksToBounds:", void, .{masksToBounds});
    }

    pub fn contents(self: *@This()) *objc.Id {
        return objc.msgSend(self, "contents", *objc.Id, .{});
    }

    pub fn setContents(self: *@This(), contents: *objc.Id) void {
        return objc.msgSend(self, "setContents:", void, .{contents});
    }

    pub fn contentsRect(self: *@This()) core_foundation.CGRect {
        return objc.msgSend(self, "contentsRect", core_foundation.CGRect, .{});
    }

    pub fn setContentsRect(self: *@This(), contentsRect: core_foundation.CGRect) void {
        return objc.msgSend(self, "setContentsRect:", void, .{contentsRect});
    }

    pub fn contentsGravity(self: *@This()) LayerContentsGravity {
        return objc.msgSend(self, "contentsGravity", LayerContentsGravity, .{});
    }

    pub fn setContentsGravity(self: *@This(), contentsGravity: LayerContentsGravity) void {
        return objc.msgSend(self, "setContentsGravity:", void, .{contentsGravity});
    }

    pub fn contentsScale(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "contentsScale", core_foundation.CGFloat, .{});
    }

    pub fn setContentsScale(self: *@This(), contentsScale: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setContentsScale:", void, .{contentsScale});
    }

    pub fn contentsCenter(self: *@This()) core_foundation.CGRect {
        return objc.msgSend(self, "contentsCenter", core_foundation.CGRect, .{});
    }

    pub fn setContentsCenter(self: *@This(), contentsCenter: core_foundation.CGRect) void {
        return objc.msgSend(self, "setContentsCenter:", void, .{contentsCenter});
    }

    pub fn contentsFormat(self: *@This()) LayerContentsFormat {
        return objc.msgSend(self, "contentsFormat", LayerContentsFormat, .{});
    }

    pub fn setContentsFormat(self: *@This(), contentsFormat: LayerContentsFormat) void {
        return objc.msgSend(self, "setContentsFormat:", void, .{contentsFormat});
    }

    pub fn wantsExtendedDynamicRangeContent(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "wantsExtendedDynamicRangeContent", objc.BOOL, .{});
    }

    pub fn setWantsExtendedDynamicRangeContent(self: *@This(), wantsExtendedDynamicRangeContent: objc.BOOL) void {
        return objc.msgSend(self, "setWantsExtendedDynamicRangeContent:", void, .{wantsExtendedDynamicRangeContent});
    }

    pub fn toneMapMode(self: *@This()) ToneMapMode {
        return objc.msgSend(self, "toneMapMode", ToneMapMode, .{});
    }

    pub fn setToneMapMode(self: *@This(), toneMapMode: ToneMapMode) void {
        return objc.msgSend(self, "setToneMapMode:", void, .{toneMapMode});
    }

    pub fn wantsDynamicContentScaling(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "wantsDynamicContentScaling", objc.BOOL, .{});
    }

    pub fn setWantsDynamicContentScaling(self: *@This(), wantsDynamicContentScaling: objc.BOOL) void {
        return objc.msgSend(self, "setWantsDynamicContentScaling:", void, .{wantsDynamicContentScaling});
    }

    pub fn minificationFilter(self: *@This()) LayerContentsFilter {
        return objc.msgSend(self, "minificationFilter", LayerContentsFilter, .{});
    }

    pub fn setMinificationFilter(self: *@This(), minificationFilter: LayerContentsFilter) void {
        return objc.msgSend(self, "setMinificationFilter:", void, .{minificationFilter});
    }

    pub fn magnificationFilter(self: *@This()) LayerContentsFilter {
        return objc.msgSend(self, "magnificationFilter", LayerContentsFilter, .{});
    }

    pub fn setMagnificationFilter(self: *@This(), magnificationFilter: LayerContentsFilter) void {
        return objc.msgSend(self, "setMagnificationFilter:", void, .{magnificationFilter});
    }

    pub fn minificationFilterBias(self: *@This()) f32 {
        return objc.msgSend(self, "minificationFilterBias", f32, .{});
    }

    pub fn setMinificationFilterBias(self: *@This(), minificationFilterBias: f32) void {
        return objc.msgSend(self, "setMinificationFilterBias:", void, .{minificationFilterBias});
    }

    pub fn isOpaque(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isOpaque", objc.BOOL, .{});
    }

    pub fn setOpaque(self: *@This(), opaque: objc.BOOL) void {
        return objc.msgSend(self, "setOpaque:", void, .{opaque});
    }

    pub fn needsDisplayOnBoundsChange(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "needsDisplayOnBoundsChange", objc.BOOL, .{});
    }

    pub fn setNeedsDisplayOnBoundsChange(self: *@This(), needsDisplayOnBoundsChange: objc.BOOL) void {
        return objc.msgSend(self, "setNeedsDisplayOnBoundsChange:", void, .{needsDisplayOnBoundsChange});
    }

    pub fn drawsAsynchronously(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "drawsAsynchronously", objc.BOOL, .{});
    }

    pub fn setDrawsAsynchronously(self: *@This(), drawsAsynchronously: objc.BOOL) void {
        return objc.msgSend(self, "setDrawsAsynchronously:", void, .{drawsAsynchronously});
    }

    pub fn edgeAntialiasingMask(self: *@This()) EdgeAntialiasingMask {
        return objc.msgSend(self, "edgeAntialiasingMask", EdgeAntialiasingMask, .{});
    }

    pub fn setEdgeAntialiasingMask(self: *@This(), edgeAntialiasingMask: EdgeAntialiasingMask) void {
        return objc.msgSend(self, "setEdgeAntialiasingMask:", void, .{edgeAntialiasingMask});
    }

    pub fn allowsEdgeAntialiasing(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsEdgeAntialiasing", objc.BOOL, .{});
    }

    pub fn setAllowsEdgeAntialiasing(self: *@This(), allowsEdgeAntialiasing: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsEdgeAntialiasing:", void, .{allowsEdgeAntialiasing});
    }

    pub fn backgroundColor(self: *@This()) core_graphics.ColorRef {
        return objc.msgSend(self, "backgroundColor", core_graphics.ColorRef, .{});
    }

    pub fn setBackgroundColor(self: *@This(), backgroundColor: core_graphics.ColorRef) void {
        return objc.msgSend(self, "setBackgroundColor:", void, .{backgroundColor});
    }

    pub fn cornerRadius(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "cornerRadius", core_foundation.CGFloat, .{});
    }

    pub fn setCornerRadius(self: *@This(), cornerRadius: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setCornerRadius:", void, .{cornerRadius});
    }

    pub fn maskedCorners(self: *@This()) CornerMask {
        return objc.msgSend(self, "maskedCorners", CornerMask, .{});
    }

    pub fn setMaskedCorners(self: *@This(), maskedCorners: CornerMask) void {
        return objc.msgSend(self, "setMaskedCorners:", void, .{maskedCorners});
    }

    pub fn cornerCurve(self: *@This()) LayerCornerCurve {
        return objc.msgSend(self, "cornerCurve", LayerCornerCurve, .{});
    }

    pub fn setCornerCurve(self: *@This(), cornerCurve: LayerCornerCurve) void {
        return objc.msgSend(self, "setCornerCurve:", void, .{cornerCurve});
    }

    pub fn borderWidth(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "borderWidth", core_foundation.CGFloat, .{});
    }

    pub fn setBorderWidth(self: *@This(), borderWidth: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setBorderWidth:", void, .{borderWidth});
    }

    pub fn borderColor(self: *@This()) core_graphics.ColorRef {
        return objc.msgSend(self, "borderColor", core_graphics.ColorRef, .{});
    }

    pub fn setBorderColor(self: *@This(), borderColor: core_graphics.ColorRef) void {
        return objc.msgSend(self, "setBorderColor:", void, .{borderColor});
    }

    pub fn opacity(self: *@This()) f32 {
        return objc.msgSend(self, "opacity", f32, .{});
    }

    pub fn setOpacity(self: *@This(), opacity: f32) void {
        return objc.msgSend(self, "setOpacity:", void, .{opacity});
    }

    pub fn allowsGroupOpacity(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsGroupOpacity", objc.BOOL, .{});
    }

    pub fn setAllowsGroupOpacity(self: *@This(), allowsGroupOpacity: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsGroupOpacity:", void, .{allowsGroupOpacity});
    }

    pub fn compositingFilter(self: *@This()) *objc.Id {
        return objc.msgSend(self, "compositingFilter", *objc.Id, .{});
    }

    pub fn setCompositingFilter(self: *@This(), compositingFilter: *objc.Id) void {
        return objc.msgSend(self, "setCompositingFilter:", void, .{compositingFilter});
    }

    pub fn filters(self: *@This()) ?*NSArray {
        return objc.msgSend(self, "filters", ?*NSArray, .{});
    }

    pub fn setFilters(self: *@This(), filters: ?*NSArray) void {
        return objc.msgSend(self, "setFilters:", void, .{filters});
    }

    pub fn backgroundFilters(self: *@This()) ?*NSArray {
        return objc.msgSend(self, "backgroundFilters", ?*NSArray, .{});
    }

    pub fn setBackgroundFilters(self: *@This(), backgroundFilters: ?*NSArray) void {
        return objc.msgSend(self, "setBackgroundFilters:", void, .{backgroundFilters});
    }

    pub fn shouldRasterize(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "shouldRasterize", objc.BOOL, .{});
    }

    pub fn setShouldRasterize(self: *@This(), shouldRasterize: objc.BOOL) void {
        return objc.msgSend(self, "setShouldRasterize:", void, .{shouldRasterize});
    }

    pub fn rasterizationScale(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "rasterizationScale", core_foundation.CGFloat, .{});
    }

    pub fn setRasterizationScale(self: *@This(), rasterizationScale: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setRasterizationScale:", void, .{rasterizationScale});
    }

    pub fn shadowColor(self: *@This()) core_graphics.ColorRef {
        return objc.msgSend(self, "shadowColor", core_graphics.ColorRef, .{});
    }

    pub fn setShadowColor(self: *@This(), shadowColor: core_graphics.ColorRef) void {
        return objc.msgSend(self, "setShadowColor:", void, .{shadowColor});
    }

    pub fn shadowOpacity(self: *@This()) f32 {
        return objc.msgSend(self, "shadowOpacity", f32, .{});
    }

    pub fn setShadowOpacity(self: *@This(), shadowOpacity: f32) void {
        return objc.msgSend(self, "setShadowOpacity:", void, .{shadowOpacity});
    }

    pub fn shadowOffset(self: *@This()) core_foundation.CGSize {
        return objc.msgSend(self, "shadowOffset", core_foundation.CGSize, .{});
    }

    pub fn setShadowOffset(self: *@This(), shadowOffset: core_foundation.CGSize) void {
        return objc.msgSend(self, "setShadowOffset:", void, .{shadowOffset});
    }

    pub fn shadowRadius(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "shadowRadius", core_foundation.CGFloat, .{});
    }

    pub fn setShadowRadius(self: *@This(), shadowRadius: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setShadowRadius:", void, .{shadowRadius});
    }

    pub fn shadowPath(self: *@This()) core_graphics.PathRef {
        return objc.msgSend(self, "shadowPath", core_graphics.PathRef, .{});
    }

    pub fn setShadowPath(self: *@This(), shadowPath: core_graphics.PathRef) void {
        return objc.msgSend(self, "setShadowPath:", void, .{shadowPath});
    }

    pub fn autoresizingMask(self: *@This()) AutoresizingMask {
        return objc.msgSend(self, "autoresizingMask", AutoresizingMask, .{});
    }

    pub fn setAutoresizingMask(self: *@This(), autoresizingMask: AutoresizingMask) void {
        return objc.msgSend(self, "setAutoresizingMask:", void, .{autoresizingMask});
    }

    pub fn layoutManager(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "layoutManager", ?*anyopaque, .{});
    }

    pub fn setLayoutManager(self: *@This(), layoutManager: ?*anyopaque) void {
        return objc.msgSend(self, "setLayoutManager:", void, .{layoutManager});
    }

    pub fn actions(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "actions", ?*anyopaque, .{});
    }

    pub fn setActions(self: *@This(), actions: ?*anyopaque) void {
        return objc.msgSend(self, "setActions:", void, .{actions});
    }

    pub fn name(self: *@This()) ?*NSString {
        return objc.msgSend(self, "name", ?*NSString, .{});
    }

    pub fn setName(self: *@This(), name: ?*NSString) void {
        return objc.msgSend(self, "setName:", void, .{name});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn style(self: *@This()) ?*core_image.NSDictionary {
        return objc.msgSend(self, "style", ?*core_image.NSDictionary, .{});
    }

    pub fn setStyle(self: *@This(), style: ?*core_image.NSDictionary) void {
        return objc.msgSend(self, "setStyle:", void, .{style});
    }

};

/// https://developer.apple.com/documentation/QuartzCore/CALayoutManager?language=objc
pub const LayoutManager = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn preferredSizeOfLayer(self: *@This(), layer: ?*Layer) core_foundation.CGSize {
        return objc.msgSend(self, "preferredSizeOfLayer:", core_foundation.CGSize, .{layer});
    }

    pub fn invalidateLayoutOfLayer(self: *@This(), layer: ?*Layer) void {
        return objc.msgSend(self, "invalidateLayoutOfLayer:", void, .{layer});
    }

    pub fn layoutSublayersOfLayer(self: *@This(), layer: ?*Layer) void {
        return objc.msgSend(self, "layoutSublayersOfLayer:", void, .{layer});
    }

};

/// https://developer.apple.com/documentation/QuartzCore/CAAction?language=objc
pub const Action = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn runActionForKeyObjectArguments(self: *@This(), event: ?*NSString, anObject: *objc.Id, dict: ?*core_image.NSDictionary) void {
        return objc.msgSend(self, "runActionForKey:object:arguments:", void, .{event, anObject, dict});
    }

};

/// https://developer.apple.com/documentation/QuartzCore/CALayerDelegate?language=objc
pub const LayerDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn displayLayer(self: *@This(), layer: ?*Layer) void {
        return objc.msgSend(self, "displayLayer:", void, .{layer});
    }

    pub fn drawLayerInContext(self: *@This(), layer: ?*Layer, ctx: core_graphics.ContextRef) void {
        return objc.msgSend(self, "drawLayer:inContext:", void, .{layer, ctx});
    }

    pub fn layerWillDraw(self: *@This(), layer: ?*Layer) void {
        return objc.msgSend(self, "layerWillDraw:", void, .{layer});
    }

    pub fn layoutSublayersOfLayer(self: *@This(), layer: ?*Layer) void {
        return objc.msgSend(self, "layoutSublayersOfLayer:", void, .{layer});
    }

    pub fn actionForLayerForKey(self: *@This(), layer: ?*Layer, event: ?*NSString) ?*anyopaque {
        return objc.msgSend(self, "actionForLayer:forKey:", ?*anyopaque, .{layer, event});
    }

};

pub const FrameRateRange = extern struct {
    minimum: f32,
    maximum: f32,
    preferred: f32,
};

pub extern "QuartzCore" fn FrameRateRangeMake(minimum: f32, maximum: f32, preferred: f32) callconv(.C) FrameRateRange;

pub extern "QuartzCore" fn FrameRateRangeIsEqualToRange() callconv(.C) i32;

pub const AnimationCalculationMode = ?*NSString;

pub const AnimationRotationMode = ?*NSString;

pub const TransitionType = ?*NSString;

pub const TransitionSubtype = ?*NSString;

/// https://developer.apple.com/documentation/QuartzCore/CAAnimation?language=objc
pub const Animation = opaque {
    pub const InternalInfo = objc.ExternalClass("CAAnimation", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn animation(self: *@This()) *@This() {
        return objc.msgSend(self, "animation", *@This(), .{});
    }

    pub fn defaultValueForKey(self: *@This(), key: ?*NSString) *objc.Id {
        return objc.msgSend(self, "defaultValueForKey:", *objc.Id, .{key});
    }

    pub fn timingFunction(self: *@This()) ?*MediaTimingFunction {
        return objc.msgSend(self, "timingFunction", ?*MediaTimingFunction, .{});
    }

    pub fn setTimingFunction(self: *@This(), timingFunction: ?*MediaTimingFunction) void {
        return objc.msgSend(self, "setTimingFunction:", void, .{timingFunction});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn isRemovedOnCompletion(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isRemovedOnCompletion", objc.BOOL, .{});
    }

    pub fn setRemovedOnCompletion(self: *@This(), removedOnCompletion: objc.BOOL) void {
        return objc.msgSend(self, "setRemovedOnCompletion:", void, .{removedOnCompletion});
    }

    pub fn preferredFrameRateRange(self: *@This()) FrameRateRange {
        return objc.msgSend(self, "preferredFrameRateRange", FrameRateRange, .{});
    }

    pub fn setPreferredFrameRateRange(self: *@This(), preferredFrameRateRange: FrameRateRange) void {
        return objc.msgSend(self, "setPreferredFrameRateRange:", void, .{preferredFrameRateRange});
    }

};

/// https://developer.apple.com/documentation/QuartzCore/CAAnimationDelegate?language=objc
pub const AnimationDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn animationDidStart(self: *@This(), anim: ?*Animation) void {
        return objc.msgSend(self, "animationDidStart:", void, .{anim});
    }

    pub fn animationDidStopFinished(self: *@This(), anim: ?*Animation, flag: objc.BOOL) void {
        return objc.msgSend(self, "animationDidStop:finished:", void, .{anim, flag});
    }

};

/// https://developer.apple.com/documentation/QuartzCore/CAPropertyAnimation?language=objc
pub const PropertyAnimation = opaque {
    pub const InternalInfo = objc.ExternalClass("CAPropertyAnimation", @This(), Animation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn animationWithKeyPath(self: *@This(), path: ?*NSString) *@This() {
        return objc.msgSend(self, "animationWithKeyPath:", *@This(), .{path});
    }

    pub fn keyPath(self: *@This()) ?*NSString {
        return objc.msgSend(self, "keyPath", ?*NSString, .{});
    }

    pub fn setKeyPath(self: *@This(), keyPath: ?*NSString) void {
        return objc.msgSend(self, "setKeyPath:", void, .{keyPath});
    }

    pub fn isAdditive(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAdditive", objc.BOOL, .{});
    }

    pub fn setAdditive(self: *@This(), additive: objc.BOOL) void {
        return objc.msgSend(self, "setAdditive:", void, .{additive});
    }

    pub fn isCumulative(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isCumulative", objc.BOOL, .{});
    }

    pub fn setCumulative(self: *@This(), cumulative: objc.BOOL) void {
        return objc.msgSend(self, "setCumulative:", void, .{cumulative});
    }

    pub fn valueFunction(self: *@This()) ?*ValueFunction {
        return objc.msgSend(self, "valueFunction", ?*ValueFunction, .{});
    }

    pub fn setValueFunction(self: *@This(), valueFunction: ?*ValueFunction) void {
        return objc.msgSend(self, "setValueFunction:", void, .{valueFunction});
    }

};

/// https://developer.apple.com/documentation/QuartzCore/CABasicAnimation?language=objc
pub const BasicAnimation = opaque {
    pub const InternalInfo = objc.ExternalClass("CABasicAnimation", @This(), PropertyAnimation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn fromValue(self: *@This()) *objc.Id {
        return objc.msgSend(self, "fromValue", *objc.Id, .{});
    }

    pub fn setFromValue(self: *@This(), fromValue: *objc.Id) void {
        return objc.msgSend(self, "setFromValue:", void, .{fromValue});
    }

    pub fn toValue(self: *@This()) *objc.Id {
        return objc.msgSend(self, "toValue", *objc.Id, .{});
    }

    pub fn setToValue(self: *@This(), toValue: *objc.Id) void {
        return objc.msgSend(self, "setToValue:", void, .{toValue});
    }

    pub fn byValue(self: *@This()) *objc.Id {
        return objc.msgSend(self, "byValue", *objc.Id, .{});
    }

    pub fn setByValue(self: *@This(), byValue: *objc.Id) void {
        return objc.msgSend(self, "setByValue:", void, .{byValue});
    }

};

/// https://developer.apple.com/documentation/QuartzCore/CAKeyframeAnimation?language=objc
pub const KeyframeAnimation = opaque {
    pub const InternalInfo = objc.ExternalClass("CAKeyframeAnimation", @This(), PropertyAnimation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn values(self: *@This()) ?*NSArray {
        return objc.msgSend(self, "values", ?*NSArray, .{});
    }

    pub fn setValues(self: *@This(), values: ?*NSArray) void {
        return objc.msgSend(self, "setValues:", void, .{values});
    }

    pub fn path(self: *@This()) core_graphics.PathRef {
        return objc.msgSend(self, "path", core_graphics.PathRef, .{});
    }

    pub fn setPath(self: *@This(), path: core_graphics.PathRef) void {
        return objc.msgSend(self, "setPath:", void, .{path});
    }

    pub fn keyTimes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "keyTimes", ?*anyopaque, .{});
    }

    pub fn setKeyTimes(self: *@This(), keyTimes: ?*anyopaque) void {
        return objc.msgSend(self, "setKeyTimes:", void, .{keyTimes});
    }

    pub fn timingFunctions(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "timingFunctions", ?*anyopaque, .{});
    }

    pub fn setTimingFunctions(self: *@This(), timingFunctions: ?*anyopaque) void {
        return objc.msgSend(self, "setTimingFunctions:", void, .{timingFunctions});
    }

    pub fn calculationMode(self: *@This()) AnimationCalculationMode {
        return objc.msgSend(self, "calculationMode", AnimationCalculationMode, .{});
    }

    pub fn setCalculationMode(self: *@This(), calculationMode: AnimationCalculationMode) void {
        return objc.msgSend(self, "setCalculationMode:", void, .{calculationMode});
    }

    pub fn tensionValues(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "tensionValues", ?*anyopaque, .{});
    }

    pub fn setTensionValues(self: *@This(), tensionValues: ?*anyopaque) void {
        return objc.msgSend(self, "setTensionValues:", void, .{tensionValues});
    }

    pub fn continuityValues(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "continuityValues", ?*anyopaque, .{});
    }

    pub fn setContinuityValues(self: *@This(), continuityValues: ?*anyopaque) void {
        return objc.msgSend(self, "setContinuityValues:", void, .{continuityValues});
    }

    pub fn biasValues(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "biasValues", ?*anyopaque, .{});
    }

    pub fn setBiasValues(self: *@This(), biasValues: ?*anyopaque) void {
        return objc.msgSend(self, "setBiasValues:", void, .{biasValues});
    }

    pub fn rotationMode(self: *@This()) AnimationRotationMode {
        return objc.msgSend(self, "rotationMode", AnimationRotationMode, .{});
    }

    pub fn setRotationMode(self: *@This(), rotationMode: AnimationRotationMode) void {
        return objc.msgSend(self, "setRotationMode:", void, .{rotationMode});
    }

};

/// https://developer.apple.com/documentation/QuartzCore/CASpringAnimation?language=objc
pub const SpringAnimation = opaque {
    pub const InternalInfo = objc.ExternalClass("CASpringAnimation", @This(), BasicAnimation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithPerceptualDurationBounce(self: *@This(), perceptualDuration: core_foundation.TimeInterval, bounce: core_foundation.CGFloat) *@This() {
        return objc.msgSend(self, "initWithPerceptualDuration:bounce:", *@This(), .{perceptualDuration, bounce});
    }

    pub fn mass(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "mass", core_foundation.CGFloat, .{});
    }

    pub fn setMass(self: *@This(), mass: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setMass:", void, .{mass});
    }

    pub fn stiffness(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "stiffness", core_foundation.CGFloat, .{});
    }

    pub fn setStiffness(self: *@This(), stiffness: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setStiffness:", void, .{stiffness});
    }

    pub fn damping(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "damping", core_foundation.CGFloat, .{});
    }

    pub fn setDamping(self: *@This(), damping: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setDamping:", void, .{damping});
    }

    pub fn initialVelocity(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "initialVelocity", core_foundation.CGFloat, .{});
    }

    pub fn setInitialVelocity(self: *@This(), initialVelocity: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setInitialVelocity:", void, .{initialVelocity});
    }

    pub fn allowsOverdamping(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsOverdamping", objc.BOOL, .{});
    }

    pub fn setAllowsOverdamping(self: *@This(), allowsOverdamping: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsOverdamping:", void, .{allowsOverdamping});
    }

    pub fn settlingDuration(self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(self, "settlingDuration", core_foundation.TimeInterval, .{});
    }

    pub fn perceptualDuration(self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(self, "perceptualDuration", core_foundation.TimeInterval, .{});
    }

    pub fn bounce(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "bounce", core_foundation.CGFloat, .{});
    }

};

/// https://developer.apple.com/documentation/QuartzCore/CATransition?language=objc
pub const Transition = opaque {
    pub const InternalInfo = objc.ExternalClass("CATransition", @This(), Animation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn @"type"(self: *@This()) TransitionType {
        return objc.msgSend(self, "type", TransitionType, .{});
    }

    pub fn setType(self: *@This(), @"type": TransitionType) void {
        return objc.msgSend(self, "setType:", void, .{@"type"});
    }

    pub fn subtype(self: *@This()) TransitionSubtype {
        return objc.msgSend(self, "subtype", TransitionSubtype, .{});
    }

    pub fn setSubtype(self: *@This(), subtype: TransitionSubtype) void {
        return objc.msgSend(self, "setSubtype:", void, .{subtype});
    }

    pub fn startProgress(self: *@This()) f32 {
        return objc.msgSend(self, "startProgress", f32, .{});
    }

    pub fn setStartProgress(self: *@This(), startProgress: f32) void {
        return objc.msgSend(self, "setStartProgress:", void, .{startProgress});
    }

    pub fn endProgress(self: *@This()) f32 {
        return objc.msgSend(self, "endProgress", f32, .{});
    }

    pub fn setEndProgress(self: *@This(), endProgress: f32) void {
        return objc.msgSend(self, "setEndProgress:", void, .{endProgress});
    }

    pub fn filter(self: *@This()) *objc.Id {
        return objc.msgSend(self, "filter", *objc.Id, .{});
    }

    pub fn setFilter(self: *@This(), filter: *objc.Id) void {
        return objc.msgSend(self, "setFilter:", void, .{filter});
    }

};

/// https://developer.apple.com/documentation/QuartzCore/CAAnimationGroup?language=objc
pub const AnimationGroup = opaque {
    pub const InternalInfo = objc.ExternalClass("CAAnimationGroup", @This(), Animation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn animations(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "animations", ?*anyopaque, .{});
    }

    pub fn setAnimations(self: *@This(), animations: ?*anyopaque) void {
        return objc.msgSend(self, "setAnimations:", void, .{animations});
    }

};

pub const ConstraintAttribute = enum(i32) {
    kCAConstraintMinX = 0,
    kCAConstraintMidX = 1,
    kCAConstraintMaxX = 2,
    kCAConstraintWidth = 3,
    kCAConstraintMinY = 4,
    kCAConstraintMidY = 5,
    kCAConstraintMaxY = 6,
    kCAConstraintHeight = 7,
};

/// https://developer.apple.com/documentation/QuartzCore/CAConstraintLayoutManager?language=objc
pub const ConstraintLayoutManager = opaque {
    pub const InternalInfo = objc.ExternalClass("CAConstraintLayoutManager", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn layoutManager(self: *@This()) *@This() {
        return objc.msgSend(self, "layoutManager", *@This(), .{});
    }

};

/// https://developer.apple.com/documentation/QuartzCore/CAConstraint?language=objc
pub const Constraint = opaque {
    pub const InternalInfo = objc.ExternalClass("CAConstraint", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn constraintWithAttributeRelativeToAttributeScaleOffset(self: *@This(), attr: ConstraintAttribute, srcId: ?*NSString, srcAttr: ConstraintAttribute, m: core_foundation.CGFloat, c: core_foundation.CGFloat, ) *@This() {
        return objc.msgSend(self, "constraintWithAttribute:relativeTo:attribute:scale:offset:", *@This(), .{attr, srcId, srcAttr, m, c, });
    }

    pub fn constraintWithAttributeRelativeToAttributeOffset(self: *@This(), attr: ConstraintAttribute, srcId: ?*NSString, srcAttr: ConstraintAttribute, c: core_foundation.CGFloat, ) *@This() {
        return objc.msgSend(self, "constraintWithAttribute:relativeTo:attribute:offset:", *@This(), .{attr, srcId, srcAttr, c, });
    }

    pub fn constraintWithAttributeRelativeToAttribute(self: *@This(), attr: ConstraintAttribute, srcId: ?*NSString, srcAttr: ConstraintAttribute) *@This() {
        return objc.msgSend(self, "constraintWithAttribute:relativeTo:attribute:", *@This(), .{attr, srcId, srcAttr});
    }

    pub fn initWithAttributeRelativeToAttributeScaleOffset(self: *@This(), attr: ConstraintAttribute, srcId: ?*NSString, srcAttr: ConstraintAttribute, m: core_foundation.CGFloat, c: core_foundation.CGFloat, ) *@This() {
        return objc.msgSend(self, "initWithAttribute:relativeTo:attribute:scale:offset:", *@This(), .{attr, srcId, srcAttr, m, c, });
    }

    pub fn attribute(self: *@This()) ConstraintAttribute {
        return objc.msgSend(self, "attribute", ConstraintAttribute, .{});
    }

    pub fn sourceName(self: *@This()) ?*NSString {
        return objc.msgSend(self, "sourceName", ?*NSString, .{});
    }

    pub fn sourceAttribute(self: *@This()) ConstraintAttribute {
        return objc.msgSend(self, "sourceAttribute", ConstraintAttribute, .{});
    }

    pub fn scale(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "scale", core_foundation.CGFloat, .{});
    }

    pub fn offset(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "offset", core_foundation.CGFloat, .{});
    }

};

/// https://developer.apple.com/documentation/QuartzCore/CADisplayLink?language=objc
pub const DisplayLink = opaque {
    pub const InternalInfo = objc.ExternalClass("CADisplayLink", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn displayLinkWithTargetSelector(self: *@This(), target: *objc.Id, sel: *objc.SEL) ?*DisplayLink {
        return objc.msgSend(self, "displayLinkWithTarget:selector:", ?*DisplayLink, .{target, sel});
    }

    pub fn addToRunLoopForMode(self: *@This(), runloop: ?*NSRunLoop, mode: foundation.RunLoopMode) void {
        return objc.msgSend(self, "addToRunLoop:forMode:", void, .{runloop, mode});
    }

    pub fn removeFromRunLoopForMode(self: *@This(), runloop: ?*NSRunLoop, mode: foundation.RunLoopMode) void {
        return objc.msgSend(self, "removeFromRunLoop:forMode:", void, .{runloop, mode});
    }

    pub fn invalidate(self: *@This()) void {
        return objc.msgSend(self, "invalidate", void, .{});
    }

    pub fn timestamp(self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(self, "timestamp", core_foundation.TimeInterval, .{});
    }

    pub fn duration(self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(self, "duration", core_foundation.TimeInterval, .{});
    }

    pub fn targetTimestamp(self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(self, "targetTimestamp", core_foundation.TimeInterval, .{});
    }

    pub fn isPaused(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isPaused", objc.BOOL, .{});
    }

    pub fn setPaused(self: *@This(), paused: objc.BOOL) void {
        return objc.msgSend(self, "setPaused:", void, .{paused});
    }

    pub fn frameInterval(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "frameInterval", objc.NSInteger, .{});
    }

    pub fn setFrameInterval(self: *@This(), frameInterval: objc.NSInteger) void {
        return objc.msgSend(self, "setFrameInterval:", void, .{frameInterval});
    }

    pub fn preferredFramesPerSecond(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "preferredFramesPerSecond", objc.NSInteger, .{});
    }

    pub fn setPreferredFramesPerSecond(self: *@This(), preferredFramesPerSecond: objc.NSInteger) void {
        return objc.msgSend(self, "setPreferredFramesPerSecond:", void, .{preferredFramesPerSecond});
    }

    pub fn preferredFrameRateRange(self: *@This()) FrameRateRange {
        return objc.msgSend(self, "preferredFrameRateRange", FrameRateRange, .{});
    }

    pub fn setPreferredFrameRateRange(self: *@This(), preferredFrameRateRange: FrameRateRange) void {
        return objc.msgSend(self, "setPreferredFrameRateRange:", void, .{preferredFrameRateRange});
    }

};

/// https://developer.apple.com/documentation/QuartzCore/CAEDRMetadata?language=objc
pub const EDRMetadata = opaque {
    pub const InternalInfo = objc.ExternalClass("CAEDRMetadata", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn HDR10MetadataWithDisplayInfoContentInfoOpticalOutputScale(self: *@This(), displayData: ?*core_image.NSData, contentData: ?*core_image.NSData, scale: f32) ?*EDRMetadata {
        return objc.msgSend(self, "HDR10MetadataWithDisplayInfo:contentInfo:opticalOutputScale:", ?*EDRMetadata, .{displayData, contentData, scale});
    }

    pub fn HDR10MetadataWithMinLuminanceMaxLuminanceOpticalOutputScale(self: *@This(), minNits: f32, maxNits: f32, scale: f32) ?*EDRMetadata {
        return objc.msgSend(self, "HDR10MetadataWithMinLuminance:maxLuminance:opticalOutputScale:", ?*EDRMetadata, .{minNits, maxNits, scale});
    }

    pub fn HLGMetadataWithAmbientViewingEnvironment(self: *@This(), data: ?*core_image.NSData) ?*EDRMetadata {
        return objc.msgSend(self, "HLGMetadataWithAmbientViewingEnvironment:", ?*EDRMetadata, .{data});
    }

    pub fn HLGMetadata(self: *@This()) ?*EDRMetadata {
        return objc.msgSend(self, "HLGMetadata", ?*EDRMetadata, .{});
    }

    pub fn isAvailable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAvailable", objc.BOOL, .{});
    }

};

pub const _CAEDRMetadataPrivate = extern struct {};

/// https://developer.apple.com/documentation/QuartzCore/CAMetalDrawable?language=objc
pub const MetalDrawable = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{metal.Drawable, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn texture(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "texture", ?*anyopaque, .{});
    }

    pub fn layer(self: *@This()) ?*MetalLayer {
        return objc.msgSend(self, "layer", ?*MetalLayer, .{});
    }

};

/// https://developer.apple.com/documentation/QuartzCore/CAMetalLayer?language=objc
pub const MetalLayer = opaque {
    pub const InternalInfo = objc.ExternalClass("CAMetalLayer", @This(), Layer, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn nextDrawable(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "nextDrawable", ?*anyopaque, .{});
    }

    pub fn device(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "device", ?*anyopaque, .{});
    }

    pub fn setDevice(self: *@This(), device: ?*anyopaque) void {
        return objc.msgSend(self, "setDevice:", void, .{device});
    }

    pub fn preferredDevice(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "preferredDevice", ?*anyopaque, .{});
    }

    pub fn pixelFormat(self: *@This()) metal.PixelFormat {
        return objc.msgSend(self, "pixelFormat", metal.PixelFormat, .{});
    }

    pub fn setPixelFormat(self: *@This(), pixelFormat: metal.PixelFormat) void {
        return objc.msgSend(self, "setPixelFormat:", void, .{pixelFormat});
    }

    pub fn framebufferOnly(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "framebufferOnly", objc.BOOL, .{});
    }

    pub fn setFramebufferOnly(self: *@This(), framebufferOnly: objc.BOOL) void {
        return objc.msgSend(self, "setFramebufferOnly:", void, .{framebufferOnly});
    }

    pub fn drawableSize(self: *@This()) core_foundation.CGSize {
        return objc.msgSend(self, "drawableSize", core_foundation.CGSize, .{});
    }

    pub fn setDrawableSize(self: *@This(), drawableSize: core_foundation.CGSize) void {
        return objc.msgSend(self, "setDrawableSize:", void, .{drawableSize});
    }

    pub fn maximumDrawableCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maximumDrawableCount", objc.NSUInteger, .{});
    }

    pub fn setMaximumDrawableCount(self: *@This(), maximumDrawableCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaximumDrawableCount:", void, .{maximumDrawableCount});
    }

    pub fn presentsWithTransaction(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "presentsWithTransaction", objc.BOOL, .{});
    }

    pub fn setPresentsWithTransaction(self: *@This(), presentsWithTransaction: objc.BOOL) void {
        return objc.msgSend(self, "setPresentsWithTransaction:", void, .{presentsWithTransaction});
    }

    pub fn colorspace(self: *@This()) core_graphics.ColorSpaceRef {
        return objc.msgSend(self, "colorspace", core_graphics.ColorSpaceRef, .{});
    }

    pub fn setColorspace(self: *@This(), colorspace: core_graphics.ColorSpaceRef) void {
        return objc.msgSend(self, "setColorspace:", void, .{colorspace});
    }

    pub fn wantsExtendedDynamicRangeContent(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "wantsExtendedDynamicRangeContent", objc.BOOL, .{});
    }

    pub fn setWantsExtendedDynamicRangeContent(self: *@This(), wantsExtendedDynamicRangeContent: objc.BOOL) void {
        return objc.msgSend(self, "setWantsExtendedDynamicRangeContent:", void, .{wantsExtendedDynamicRangeContent});
    }

    pub fn EDRMetadata(self: *@This()) ?*EDRMetadata {
        return objc.msgSend(self, "EDRMetadata", ?*EDRMetadata, .{});
    }

    pub fn setEDRMetadata(self: *@This(), EDRMetadata: ?*EDRMetadata) void {
        return objc.msgSend(self, "setEDRMetadata:", void, .{EDRMetadata});
    }

    pub fn displaySyncEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "displaySyncEnabled", objc.BOOL, .{});
    }

    pub fn setDisplaySyncEnabled(self: *@This(), displaySyncEnabled: objc.BOOL) void {
        return objc.msgSend(self, "setDisplaySyncEnabled:", void, .{displaySyncEnabled});
    }

    pub fn allowsNextDrawableTimeout(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsNextDrawableTimeout", objc.BOOL, .{});
    }

    pub fn setAllowsNextDrawableTimeout(self: *@This(), allowsNextDrawableTimeout: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsNextDrawableTimeout:", void, .{allowsNextDrawableTimeout});
    }

    pub fn developerHUDProperties(self: *@This()) ?*NSDictionary {
        return objc.msgSend(self, "developerHUDProperties", ?*NSDictionary, .{});
    }

    pub fn setDeveloperHUDProperties(self: *@This(), developerHUDProperties: ?*NSDictionary) void {
        return objc.msgSend(self, "setDeveloperHUDProperties:", void, .{developerHUDProperties});
    }

};

pub const _CAMetalLayerPrivate = extern struct {};

/// https://developer.apple.com/documentation/QuartzCore/CAMetalDisplayLinkUpdate?language=objc
pub const MetalDisplayLinkUpdate = opaque {
    pub const InternalInfo = objc.ExternalClass("CAMetalDisplayLinkUpdate", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn drawable(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "drawable", ?*anyopaque, .{});
    }

    pub fn targetTimestamp(self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(self, "targetTimestamp", core_foundation.TimeInterval, .{});
    }

    pub fn targetPresentationTimestamp(self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(self, "targetPresentationTimestamp", core_foundation.TimeInterval, .{});
    }

};

/// https://developer.apple.com/documentation/QuartzCore/CAMetalDisplayLinkDelegate?language=objc
pub const MetalDisplayLinkDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn metalDisplayLinkNeedsUpdate(self: *@This(), link: ?*MetalDisplayLink, update: ?*MetalDisplayLinkUpdate) void {
        return objc.msgSend(self, "metalDisplayLink:needsUpdate:", void, .{link, update});
    }

};

/// https://developer.apple.com/documentation/QuartzCore/CAMetalDisplayLink?language=objc
pub const MetalDisplayLink = opaque {
    pub const InternalInfo = objc.ExternalClass("CAMetalDisplayLink", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithMetalLayer(self: *@This(), layer: ?*MetalLayer) *@This() {
        return objc.msgSend(self, "initWithMetalLayer:", *@This(), .{layer});
    }

    pub fn addToRunLoopForMode(self: *@This(), runloop: ?*NSRunLoop, mode: foundation.RunLoopMode) void {
        return objc.msgSend(self, "addToRunLoop:forMode:", void, .{runloop, mode});
    }

    pub fn removeFromRunLoopForMode(self: *@This(), runloop: ?*NSRunLoop, mode: foundation.RunLoopMode) void {
        return objc.msgSend(self, "removeFromRunLoop:forMode:", void, .{runloop, mode});
    }

    pub fn invalidate(self: *@This()) void {
        return objc.msgSend(self, "invalidate", void, .{});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn preferredFrameLatency(self: *@This()) f32 {
        return objc.msgSend(self, "preferredFrameLatency", f32, .{});
    }

    pub fn setPreferredFrameLatency(self: *@This(), preferredFrameLatency: f32) void {
        return objc.msgSend(self, "setPreferredFrameLatency:", void, .{preferredFrameLatency});
    }

    pub fn preferredFrameRateRange(self: *@This()) FrameRateRange {
        return objc.msgSend(self, "preferredFrameRateRange", FrameRateRange, .{});
    }

    pub fn setPreferredFrameRateRange(self: *@This(), preferredFrameRateRange: FrameRateRange) void {
        return objc.msgSend(self, "setPreferredFrameRateRange:", void, .{preferredFrameRateRange});
    }

    pub fn isPaused(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isPaused", objc.BOOL, .{});
    }

    pub fn setPaused(self: *@This(), paused: objc.BOOL) void {
        return objc.msgSend(self, "setPaused:", void, .{paused});
    }

};

/// https://developer.apple.com/documentation/QuartzCore/CAEmitterCell?language=objc
pub const EmitterCell = opaque {
    pub const InternalInfo = objc.ExternalClass("CAEmitterCell", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn emitterCell(self: *@This()) *@This() {
        return objc.msgSend(self, "emitterCell", *@This(), .{});
    }

    pub fn defaultValueForKey(self: *@This(), key: ?*NSString) *objc.Id {
        return objc.msgSend(self, "defaultValueForKey:", *objc.Id, .{key});
    }

    pub fn name(self: *@This()) ?*NSString {
        return objc.msgSend(self, "name", ?*NSString, .{});
    }

    pub fn setName(self: *@This(), name: ?*NSString) void {
        return objc.msgSend(self, "setName:", void, .{name});
    }

    pub fn isEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isEnabled", objc.BOOL, .{});
    }

    pub fn setEnabled(self: *@This(), enabled: objc.BOOL) void {
        return objc.msgSend(self, "setEnabled:", void, .{enabled});
    }

    pub fn birthRate(self: *@This()) f32 {
        return objc.msgSend(self, "birthRate", f32, .{});
    }

    pub fn setBirthRate(self: *@This(), birthRate: f32) void {
        return objc.msgSend(self, "setBirthRate:", void, .{birthRate});
    }

    pub fn lifetime(self: *@This()) f32 {
        return objc.msgSend(self, "lifetime", f32, .{});
    }

    pub fn setLifetime(self: *@This(), lifetime: f32) void {
        return objc.msgSend(self, "setLifetime:", void, .{lifetime});
    }

    pub fn lifetimeRange(self: *@This()) f32 {
        return objc.msgSend(self, "lifetimeRange", f32, .{});
    }

    pub fn setLifetimeRange(self: *@This(), lifetimeRange: f32) void {
        return objc.msgSend(self, "setLifetimeRange:", void, .{lifetimeRange});
    }

    pub fn emissionLatitude(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "emissionLatitude", core_foundation.CGFloat, .{});
    }

    pub fn setEmissionLatitude(self: *@This(), emissionLatitude: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setEmissionLatitude:", void, .{emissionLatitude});
    }

    pub fn emissionLongitude(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "emissionLongitude", core_foundation.CGFloat, .{});
    }

    pub fn setEmissionLongitude(self: *@This(), emissionLongitude: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setEmissionLongitude:", void, .{emissionLongitude});
    }

    pub fn emissionRange(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "emissionRange", core_foundation.CGFloat, .{});
    }

    pub fn setEmissionRange(self: *@This(), emissionRange: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setEmissionRange:", void, .{emissionRange});
    }

    pub fn velocity(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "velocity", core_foundation.CGFloat, .{});
    }

    pub fn setVelocity(self: *@This(), velocity: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setVelocity:", void, .{velocity});
    }

    pub fn velocityRange(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "velocityRange", core_foundation.CGFloat, .{});
    }

    pub fn setVelocityRange(self: *@This(), velocityRange: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setVelocityRange:", void, .{velocityRange});
    }

    pub fn xAcceleration(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "xAcceleration", core_foundation.CGFloat, .{});
    }

    pub fn setXAcceleration(self: *@This(), xAcceleration: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setXAcceleration:", void, .{xAcceleration});
    }

    pub fn yAcceleration(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "yAcceleration", core_foundation.CGFloat, .{});
    }

    pub fn setYAcceleration(self: *@This(), yAcceleration: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setYAcceleration:", void, .{yAcceleration});
    }

    pub fn zAcceleration(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "zAcceleration", core_foundation.CGFloat, .{});
    }

    pub fn setZAcceleration(self: *@This(), zAcceleration: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setZAcceleration:", void, .{zAcceleration});
    }

    pub fn scale(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "scale", core_foundation.CGFloat, .{});
    }

    pub fn setScale(self: *@This(), scale: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setScale:", void, .{scale});
    }

    pub fn scaleRange(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "scaleRange", core_foundation.CGFloat, .{});
    }

    pub fn setScaleRange(self: *@This(), scaleRange: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setScaleRange:", void, .{scaleRange});
    }

    pub fn scaleSpeed(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "scaleSpeed", core_foundation.CGFloat, .{});
    }

    pub fn setScaleSpeed(self: *@This(), scaleSpeed: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setScaleSpeed:", void, .{scaleSpeed});
    }

    pub fn spin(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "spin", core_foundation.CGFloat, .{});
    }

    pub fn setSpin(self: *@This(), spin: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setSpin:", void, .{spin});
    }

    pub fn spinRange(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "spinRange", core_foundation.CGFloat, .{});
    }

    pub fn setSpinRange(self: *@This(), spinRange: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setSpinRange:", void, .{spinRange});
    }

    pub fn color(self: *@This()) core_graphics.ColorRef {
        return objc.msgSend(self, "color", core_graphics.ColorRef, .{});
    }

    pub fn setColor(self: *@This(), color: core_graphics.ColorRef) void {
        return objc.msgSend(self, "setColor:", void, .{color});
    }

    pub fn redRange(self: *@This()) f32 {
        return objc.msgSend(self, "redRange", f32, .{});
    }

    pub fn setRedRange(self: *@This(), redRange: f32) void {
        return objc.msgSend(self, "setRedRange:", void, .{redRange});
    }

    pub fn greenRange(self: *@This()) f32 {
        return objc.msgSend(self, "greenRange", f32, .{});
    }

    pub fn setGreenRange(self: *@This(), greenRange: f32) void {
        return objc.msgSend(self, "setGreenRange:", void, .{greenRange});
    }

    pub fn blueRange(self: *@This()) f32 {
        return objc.msgSend(self, "blueRange", f32, .{});
    }

    pub fn setBlueRange(self: *@This(), blueRange: f32) void {
        return objc.msgSend(self, "setBlueRange:", void, .{blueRange});
    }

    pub fn alphaRange(self: *@This()) f32 {
        return objc.msgSend(self, "alphaRange", f32, .{});
    }

    pub fn setAlphaRange(self: *@This(), alphaRange: f32) void {
        return objc.msgSend(self, "setAlphaRange:", void, .{alphaRange});
    }

    pub fn redSpeed(self: *@This()) f32 {
        return objc.msgSend(self, "redSpeed", f32, .{});
    }

    pub fn setRedSpeed(self: *@This(), redSpeed: f32) void {
        return objc.msgSend(self, "setRedSpeed:", void, .{redSpeed});
    }

    pub fn greenSpeed(self: *@This()) f32 {
        return objc.msgSend(self, "greenSpeed", f32, .{});
    }

    pub fn setGreenSpeed(self: *@This(), greenSpeed: f32) void {
        return objc.msgSend(self, "setGreenSpeed:", void, .{greenSpeed});
    }

    pub fn blueSpeed(self: *@This()) f32 {
        return objc.msgSend(self, "blueSpeed", f32, .{});
    }

    pub fn setBlueSpeed(self: *@This(), blueSpeed: f32) void {
        return objc.msgSend(self, "setBlueSpeed:", void, .{blueSpeed});
    }

    pub fn alphaSpeed(self: *@This()) f32 {
        return objc.msgSend(self, "alphaSpeed", f32, .{});
    }

    pub fn setAlphaSpeed(self: *@This(), alphaSpeed: f32) void {
        return objc.msgSend(self, "setAlphaSpeed:", void, .{alphaSpeed});
    }

    pub fn contents(self: *@This()) *objc.Id {
        return objc.msgSend(self, "contents", *objc.Id, .{});
    }

    pub fn setContents(self: *@This(), contents: *objc.Id) void {
        return objc.msgSend(self, "setContents:", void, .{contents});
    }

    pub fn contentsRect(self: *@This()) core_foundation.CGRect {
        return objc.msgSend(self, "contentsRect", core_foundation.CGRect, .{});
    }

    pub fn setContentsRect(self: *@This(), contentsRect: core_foundation.CGRect) void {
        return objc.msgSend(self, "setContentsRect:", void, .{contentsRect});
    }

    pub fn contentsScale(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "contentsScale", core_foundation.CGFloat, .{});
    }

    pub fn setContentsScale(self: *@This(), contentsScale: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setContentsScale:", void, .{contentsScale});
    }

    pub fn minificationFilter(self: *@This()) ?*NSString {
        return objc.msgSend(self, "minificationFilter", ?*NSString, .{});
    }

    pub fn setMinificationFilter(self: *@This(), minificationFilter: ?*NSString) void {
        return objc.msgSend(self, "setMinificationFilter:", void, .{minificationFilter});
    }

    pub fn magnificationFilter(self: *@This()) ?*NSString {
        return objc.msgSend(self, "magnificationFilter", ?*NSString, .{});
    }

    pub fn setMagnificationFilter(self: *@This(), magnificationFilter: ?*NSString) void {
        return objc.msgSend(self, "setMagnificationFilter:", void, .{magnificationFilter});
    }

    pub fn minificationFilterBias(self: *@This()) f32 {
        return objc.msgSend(self, "minificationFilterBias", f32, .{});
    }

    pub fn setMinificationFilterBias(self: *@This(), minificationFilterBias: f32) void {
        return objc.msgSend(self, "setMinificationFilterBias:", void, .{minificationFilterBias});
    }

    pub fn emitterCells(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "emitterCells", ?*anyopaque, .{});
    }

    pub fn setEmitterCells(self: *@This(), emitterCells: ?*anyopaque) void {
        return objc.msgSend(self, "setEmitterCells:", void, .{emitterCells});
    }

    pub fn style(self: *@This()) ?*NSDictionary {
        return objc.msgSend(self, "style", ?*NSDictionary, .{});
    }

    pub fn setStyle(self: *@This(), style: ?*NSDictionary) void {
        return objc.msgSend(self, "setStyle:", void, .{style});
    }

};

pub const EmitterLayerEmitterShape = ?*NSString;

pub const EmitterLayerEmitterMode = ?*NSString;

pub const EmitterLayerRenderMode = ?*NSString;

/// https://developer.apple.com/documentation/QuartzCore/CAEmitterLayer?language=objc
pub const EmitterLayer = opaque {
    pub const InternalInfo = objc.ExternalClass("CAEmitterLayer", @This(), Layer, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn emitterCells(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "emitterCells", ?*anyopaque, .{});
    }

    pub fn setEmitterCells(self: *@This(), emitterCells: ?*anyopaque) void {
        return objc.msgSend(self, "setEmitterCells:", void, .{emitterCells});
    }

    pub fn birthRate(self: *@This()) f32 {
        return objc.msgSend(self, "birthRate", f32, .{});
    }

    pub fn setBirthRate(self: *@This(), birthRate: f32) void {
        return objc.msgSend(self, "setBirthRate:", void, .{birthRate});
    }

    pub fn lifetime(self: *@This()) f32 {
        return objc.msgSend(self, "lifetime", f32, .{});
    }

    pub fn setLifetime(self: *@This(), lifetime: f32) void {
        return objc.msgSend(self, "setLifetime:", void, .{lifetime});
    }

    pub fn emitterPosition(self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(self, "emitterPosition", core_foundation.CGPoint, .{});
    }

    pub fn setEmitterPosition(self: *@This(), emitterPosition: core_foundation.CGPoint) void {
        return objc.msgSend(self, "setEmitterPosition:", void, .{emitterPosition});
    }

    pub fn emitterZPosition(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "emitterZPosition", core_foundation.CGFloat, .{});
    }

    pub fn setEmitterZPosition(self: *@This(), emitterZPosition: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setEmitterZPosition:", void, .{emitterZPosition});
    }

    pub fn emitterSize(self: *@This()) core_foundation.CGSize {
        return objc.msgSend(self, "emitterSize", core_foundation.CGSize, .{});
    }

    pub fn setEmitterSize(self: *@This(), emitterSize: core_foundation.CGSize) void {
        return objc.msgSend(self, "setEmitterSize:", void, .{emitterSize});
    }

    pub fn emitterDepth(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "emitterDepth", core_foundation.CGFloat, .{});
    }

    pub fn setEmitterDepth(self: *@This(), emitterDepth: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setEmitterDepth:", void, .{emitterDepth});
    }

    pub fn emitterShape(self: *@This()) EmitterLayerEmitterShape {
        return objc.msgSend(self, "emitterShape", EmitterLayerEmitterShape, .{});
    }

    pub fn setEmitterShape(self: *@This(), emitterShape: EmitterLayerEmitterShape) void {
        return objc.msgSend(self, "setEmitterShape:", void, .{emitterShape});
    }

    pub fn emitterMode(self: *@This()) EmitterLayerEmitterMode {
        return objc.msgSend(self, "emitterMode", EmitterLayerEmitterMode, .{});
    }

    pub fn setEmitterMode(self: *@This(), emitterMode: EmitterLayerEmitterMode) void {
        return objc.msgSend(self, "setEmitterMode:", void, .{emitterMode});
    }

    pub fn renderMode(self: *@This()) EmitterLayerRenderMode {
        return objc.msgSend(self, "renderMode", EmitterLayerRenderMode, .{});
    }

    pub fn setRenderMode(self: *@This(), renderMode: EmitterLayerRenderMode) void {
        return objc.msgSend(self, "setRenderMode:", void, .{renderMode});
    }

    pub fn preservesDepth(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "preservesDepth", objc.BOOL, .{});
    }

    pub fn setPreservesDepth(self: *@This(), preservesDepth: objc.BOOL) void {
        return objc.msgSend(self, "setPreservesDepth:", void, .{preservesDepth});
    }

    pub fn velocity(self: *@This()) f32 {
        return objc.msgSend(self, "velocity", f32, .{});
    }

    pub fn setVelocity(self: *@This(), velocity: f32) void {
        return objc.msgSend(self, "setVelocity:", void, .{velocity});
    }

    pub fn scale(self: *@This()) f32 {
        return objc.msgSend(self, "scale", f32, .{});
    }

    pub fn setScale(self: *@This(), scale: f32) void {
        return objc.msgSend(self, "setScale:", void, .{scale});
    }

    pub fn spin(self: *@This()) f32 {
        return objc.msgSend(self, "spin", f32, .{});
    }

    pub fn setSpin(self: *@This(), spin: f32) void {
        return objc.msgSend(self, "setSpin:", void, .{spin});
    }

    pub fn seed(self: *@This()) u32 {
        return objc.msgSend(self, "seed", u32, .{});
    }

    pub fn setSeed(self: *@This(), seed: u32) void {
        return objc.msgSend(self, "setSeed:", void, .{seed});
    }

};

pub const MediaTimingFunctionName = ?*NSString;

/// https://developer.apple.com/documentation/QuartzCore/CAMediaTimingFunction?language=objc
pub const MediaTimingFunction = opaque {
    pub const InternalInfo = objc.ExternalClass("CAMediaTimingFunction", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn functionWithName(self: *@This(), name: MediaTimingFunctionName) *@This() {
        return objc.msgSend(self, "functionWithName:", *@This(), .{name});
    }

    pub fn functionWithControlPoints(self: *@This(), c1x: f32, c1y: f32, c2x: f32, c2y: f32, ) *@This() {
        return objc.msgSend(self, "functionWithControlPoints::::", *@This(), .{c1x, c1y, c2x, c2y, });
    }

    pub fn initWithControlPoints(self: *@This(), c1x: f32, c1y: f32, c2x: f32, c2y: f32, ) *@This() {
        return objc.msgSend(self, "initWithControlPoints::::", *@This(), .{c1x, c1y, c2x, c2y, });
    }

    pub fn getControlPointAtIndexValues(self: *@This(), idx: objc.size_t, ptr: ?*f32) void {
        return objc.msgSend(self, "getControlPointAtIndex:values:", void, .{idx, ptr});
    }

};

pub const MediaTimingFunctionPrivate = extern struct {};

pub const GradientLayerType = ?*NSString;

/// https://developer.apple.com/documentation/QuartzCore/CAGradientLayer?language=objc
pub const GradientLayer = opaque {
    pub const InternalInfo = objc.ExternalClass("CAGradientLayer", @This(), Layer, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn colors(self: *@This()) ?*NSArray {
        return objc.msgSend(self, "colors", ?*NSArray, .{});
    }

    pub fn setColors(self: *@This(), colors: ?*NSArray) void {
        return objc.msgSend(self, "setColors:", void, .{colors});
    }

    pub fn locations(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "locations", ?*anyopaque, .{});
    }

    pub fn setLocations(self: *@This(), locations: ?*anyopaque) void {
        return objc.msgSend(self, "setLocations:", void, .{locations});
    }

    pub fn startPoint(self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(self, "startPoint", core_foundation.CGPoint, .{});
    }

    pub fn setStartPoint(self: *@This(), startPoint: core_foundation.CGPoint) void {
        return objc.msgSend(self, "setStartPoint:", void, .{startPoint});
    }

    pub fn endPoint(self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(self, "endPoint", core_foundation.CGPoint, .{});
    }

    pub fn setEndPoint(self: *@This(), endPoint: core_foundation.CGPoint) void {
        return objc.msgSend(self, "setEndPoint:", void, .{endPoint});
    }

    pub fn @"type"(self: *@This()) GradientLayerType {
        return objc.msgSend(self, "type", GradientLayerType, .{});
    }

    pub fn setType(self: *@This(), @"type": GradientLayerType) void {
        return objc.msgSend(self, "setType:", void, .{@"type"});
    }

};

/// https://developer.apple.com/documentation/QuartzCore/CAOpenGLLayer?language=objc
pub const OpenGLLayer = opaque {
    pub const InternalInfo = objc.ExternalClass("CAOpenGLLayer", @This(), Layer, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn drawInCGLContextPixelFormatForLayerTimeDisplayTime(self: *@This(), ctx: opengl.ContextObj, pf: opengl.PixelFormatObj, t: core_foundation.TimeInterval, ts: ?*core_video.TimeStamp, ) void {
        return objc.msgSend(self, "drawInCGLContext:pixelFormat:forLayerTime:displayTime:", void, .{ctx, pf, t, ts, });
    }

    pub fn copyCGLPixelFormatForDisplayMask(self: *@This(), mask: objc.uint32_t) opengl.PixelFormatObj {
        return objc.msgSend(self, "copyCGLPixelFormatForDisplayMask:", opengl.PixelFormatObj, .{mask});
    }

    pub fn releaseCGLPixelFormat(self: *@This(), pf: opengl.PixelFormatObj) void {
        return objc.msgSend(self, "releaseCGLPixelFormat:", void, .{pf});
    }

    pub fn copyCGLContextForPixelFormat(self: *@This(), pf: opengl.PixelFormatObj) opengl.ContextObj {
        return objc.msgSend(self, "copyCGLContextForPixelFormat:", opengl.ContextObj, .{pf});
    }

    pub fn releaseCGLContext(self: *@This(), ctx: opengl.ContextObj) void {
        return objc.msgSend(self, "releaseCGLContext:", void, .{ctx});
    }

    pub fn isAsynchronous(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAsynchronous", objc.BOOL, .{});
    }

    pub fn setAsynchronous(self: *@This(), asynchronous: objc.BOOL) void {
        return objc.msgSend(self, "setAsynchronous:", void, .{asynchronous});
    }

    pub fn colorspace(self: *@This()) core_graphics.ColorSpaceRef {
        return objc.msgSend(self, "colorspace", core_graphics.ColorSpaceRef, .{});
    }

    pub fn setColorspace(self: *@This(), colorspace: core_graphics.ColorSpaceRef) void {
        return objc.msgSend(self, "setColorspace:", void, .{colorspace});
    }

    pub fn wantsExtendedDynamicRangeContent(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "wantsExtendedDynamicRangeContent", objc.BOOL, .{});
    }

    pub fn setWantsExtendedDynamicRangeContent(self: *@This(), wantsExtendedDynamicRangeContent: objc.BOOL) void {
        return objc.msgSend(self, "setWantsExtendedDynamicRangeContent:", void, .{wantsExtendedDynamicRangeContent});
    }

};

pub const OpenGLLayerPrivate = extern struct {};

/// https://developer.apple.com/documentation/QuartzCore/CARemoteLayerClient?language=objc
pub const RemoteLayerClient = opaque {
    pub const InternalInfo = objc.ExternalClass("CARemoteLayerClient", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithServerPort(self: *@This(), port: objc.mach_port_t) *@This() {
        return objc.msgSend(self, "initWithServerPort:", *@This(), .{port});
    }

    pub fn invalidate(self: *@This()) void {
        return objc.msgSend(self, "invalidate", void, .{});
    }

    pub fn clientId(self: *@This()) objc.uint32_t {
        return objc.msgSend(self, "clientId", objc.uint32_t, .{});
    }

    pub fn layer(self: *@This()) ?*Layer {
        return objc.msgSend(self, "layer", ?*Layer, .{});
    }

    pub fn setLayer(self: *@This(), layer: ?*Layer) void {
        return objc.msgSend(self, "setLayer:", void, .{layer});
    }

};

/// https://developer.apple.com/documentation/QuartzCore/CARemoteLayerServer?language=objc
pub const RemoteLayerServer = opaque {
    pub const InternalInfo = objc.ExternalClass("CARemoteLayerServer", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn sharedServer(self: *@This()) ?*RemoteLayerServer {
        return objc.msgSend(self, "sharedServer", ?*RemoteLayerServer, .{});
    }

    pub fn serverPort(self: *@This()) objc.mach_port_t {
        return objc.msgSend(self, "serverPort", objc.mach_port_t, .{});
    }

};

/// https://developer.apple.com/documentation/QuartzCore/CARenderer?language=objc
pub const Renderer = opaque {
    pub const InternalInfo = objc.ExternalClass("CARenderer", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn rendererWithCGLContextOptions(self: *@This(), ctx: ?*anyopaque, dict: ?*NSDictionary) ?*Renderer {
        return objc.msgSend(self, "rendererWithCGLContext:options:", ?*Renderer, .{ctx, dict});
    }

    pub fn rendererWithMTLTextureOptions(self: *@This(), tex: ?*anyopaque, dict: ?*NSDictionary) ?*Renderer {
        return objc.msgSend(self, "rendererWithMTLTexture:options:", ?*Renderer, .{tex, dict});
    }

    pub fn beginFrameAtTimeTimeStamp(self: *@This(), t: core_foundation.TimeInterval, ts: ?*core_video.TimeStamp) void {
        return objc.msgSend(self, "beginFrameAtTime:timeStamp:", void, .{t, ts});
    }

    pub fn updateBounds(self: *@This()) core_foundation.CGRect {
        return objc.msgSend(self, "updateBounds", core_foundation.CGRect, .{});
    }

    pub fn addUpdateRect(self: *@This(), r: core_foundation.CGRect) void {
        return objc.msgSend(self, "addUpdateRect:", void, .{r});
    }

    pub fn render(self: *@This()) void {
        return objc.msgSend(self, "render", void, .{});
    }

    pub fn nextFrameTime(self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(self, "nextFrameTime", core_foundation.TimeInterval, .{});
    }

    pub fn endFrame(self: *@This()) void {
        return objc.msgSend(self, "endFrame", void, .{});
    }

    pub fn setDestination(self: *@This(), tex: ?*anyopaque) void {
        return objc.msgSend(self, "setDestination:", void, .{tex});
    }

    pub fn layer(self: *@This()) ?*Layer {
        return objc.msgSend(self, "layer", ?*Layer, .{});
    }

    pub fn setLayer(self: *@This(), layer: ?*Layer) void {
        return objc.msgSend(self, "setLayer:", void, .{layer});
    }

    pub fn bounds(self: *@This()) core_foundation.CGRect {
        return objc.msgSend(self, "bounds", core_foundation.CGRect, .{});
    }

    pub fn setBounds(self: *@This(), bounds: core_foundation.CGRect) void {
        return objc.msgSend(self, "setBounds:", void, .{bounds});
    }

};

pub const RendererPriv = extern struct {};

/// https://developer.apple.com/documentation/QuartzCore/CAReplicatorLayer?language=objc
pub const ReplicatorLayer = opaque {
    pub const InternalInfo = objc.ExternalClass("CAReplicatorLayer", @This(), Layer, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn instanceCount(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "instanceCount", objc.NSInteger, .{});
    }

    pub fn setInstanceCount(self: *@This(), instanceCount: objc.NSInteger) void {
        return objc.msgSend(self, "setInstanceCount:", void, .{instanceCount});
    }

    pub fn preservesDepth(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "preservesDepth", objc.BOOL, .{});
    }

    pub fn setPreservesDepth(self: *@This(), preservesDepth: objc.BOOL) void {
        return objc.msgSend(self, "setPreservesDepth:", void, .{preservesDepth});
    }

    pub fn instanceDelay(self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(self, "instanceDelay", core_foundation.TimeInterval, .{});
    }

    pub fn setInstanceDelay(self: *@This(), instanceDelay: core_foundation.TimeInterval) void {
        return objc.msgSend(self, "setInstanceDelay:", void, .{instanceDelay});
    }

    pub fn instanceTransform(self: *@This()) Transform3D {
        return objc.msgSend(self, "instanceTransform", Transform3D, .{});
    }

    pub fn setInstanceTransform(self: *@This(), instanceTransform: Transform3D) void {
        return objc.msgSend(self, "setInstanceTransform:", void, .{instanceTransform});
    }

    pub fn instanceColor(self: *@This()) core_graphics.ColorRef {
        return objc.msgSend(self, "instanceColor", core_graphics.ColorRef, .{});
    }

    pub fn setInstanceColor(self: *@This(), instanceColor: core_graphics.ColorRef) void {
        return objc.msgSend(self, "setInstanceColor:", void, .{instanceColor});
    }

    pub fn instanceRedOffset(self: *@This()) f32 {
        return objc.msgSend(self, "instanceRedOffset", f32, .{});
    }

    pub fn setInstanceRedOffset(self: *@This(), instanceRedOffset: f32) void {
        return objc.msgSend(self, "setInstanceRedOffset:", void, .{instanceRedOffset});
    }

    pub fn instanceGreenOffset(self: *@This()) f32 {
        return objc.msgSend(self, "instanceGreenOffset", f32, .{});
    }

    pub fn setInstanceGreenOffset(self: *@This(), instanceGreenOffset: f32) void {
        return objc.msgSend(self, "setInstanceGreenOffset:", void, .{instanceGreenOffset});
    }

    pub fn instanceBlueOffset(self: *@This()) f32 {
        return objc.msgSend(self, "instanceBlueOffset", f32, .{});
    }

    pub fn setInstanceBlueOffset(self: *@This(), instanceBlueOffset: f32) void {
        return objc.msgSend(self, "setInstanceBlueOffset:", void, .{instanceBlueOffset});
    }

    pub fn instanceAlphaOffset(self: *@This()) f32 {
        return objc.msgSend(self, "instanceAlphaOffset", f32, .{});
    }

    pub fn setInstanceAlphaOffset(self: *@This(), instanceAlphaOffset: f32) void {
        return objc.msgSend(self, "setInstanceAlphaOffset:", void, .{instanceAlphaOffset});
    }

};

pub const ScrollLayerScrollMode = ?*NSString;

/// https://developer.apple.com/documentation/QuartzCore/CAScrollLayer?language=objc
pub const ScrollLayer = opaque {
    pub const InternalInfo = objc.ExternalClass("CAScrollLayer", @This(), Layer, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn scrollToPoint(self: *@This(), p: core_foundation.CGPoint) void {
        return objc.msgSend(self, "scrollToPoint:", void, .{p});
    }

    pub fn scrollToRect(self: *@This(), r: core_foundation.CGRect) void {
        return objc.msgSend(self, "scrollToRect:", void, .{r});
    }

    pub fn scrollMode(self: *@This()) ScrollLayerScrollMode {
        return objc.msgSend(self, "scrollMode", ScrollLayerScrollMode, .{});
    }

    pub fn setScrollMode(self: *@This(), scrollMode: ScrollLayerScrollMode) void {
        return objc.msgSend(self, "setScrollMode:", void, .{scrollMode});
    }

};

pub const ShapeLayerFillRule = ?*NSString;

pub const ShapeLayerLineJoin = ?*NSString;

pub const ShapeLayerLineCap = ?*NSString;

/// https://developer.apple.com/documentation/QuartzCore/CAShapeLayer?language=objc
pub const ShapeLayer = opaque {
    pub const InternalInfo = objc.ExternalClass("CAShapeLayer", @This(), Layer, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn path(self: *@This()) core_graphics.PathRef {
        return objc.msgSend(self, "path", core_graphics.PathRef, .{});
    }

    pub fn setPath(self: *@This(), path: core_graphics.PathRef) void {
        return objc.msgSend(self, "setPath:", void, .{path});
    }

    pub fn fillColor(self: *@This()) core_graphics.ColorRef {
        return objc.msgSend(self, "fillColor", core_graphics.ColorRef, .{});
    }

    pub fn setFillColor(self: *@This(), fillColor: core_graphics.ColorRef) void {
        return objc.msgSend(self, "setFillColor:", void, .{fillColor});
    }

    pub fn fillRule(self: *@This()) ShapeLayerFillRule {
        return objc.msgSend(self, "fillRule", ShapeLayerFillRule, .{});
    }

    pub fn setFillRule(self: *@This(), fillRule: ShapeLayerFillRule) void {
        return objc.msgSend(self, "setFillRule:", void, .{fillRule});
    }

    pub fn strokeColor(self: *@This()) core_graphics.ColorRef {
        return objc.msgSend(self, "strokeColor", core_graphics.ColorRef, .{});
    }

    pub fn setStrokeColor(self: *@This(), strokeColor: core_graphics.ColorRef) void {
        return objc.msgSend(self, "setStrokeColor:", void, .{strokeColor});
    }

    pub fn strokeStart(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "strokeStart", core_foundation.CGFloat, .{});
    }

    pub fn setStrokeStart(self: *@This(), strokeStart: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setStrokeStart:", void, .{strokeStart});
    }

    pub fn strokeEnd(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "strokeEnd", core_foundation.CGFloat, .{});
    }

    pub fn setStrokeEnd(self: *@This(), strokeEnd: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setStrokeEnd:", void, .{strokeEnd});
    }

    pub fn lineWidth(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "lineWidth", core_foundation.CGFloat, .{});
    }

    pub fn setLineWidth(self: *@This(), lineWidth: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setLineWidth:", void, .{lineWidth});
    }

    pub fn miterLimit(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "miterLimit", core_foundation.CGFloat, .{});
    }

    pub fn setMiterLimit(self: *@This(), miterLimit: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setMiterLimit:", void, .{miterLimit});
    }

    pub fn lineCap(self: *@This()) ShapeLayerLineCap {
        return objc.msgSend(self, "lineCap", ShapeLayerLineCap, .{});
    }

    pub fn setLineCap(self: *@This(), lineCap: ShapeLayerLineCap) void {
        return objc.msgSend(self, "setLineCap:", void, .{lineCap});
    }

    pub fn lineJoin(self: *@This()) ShapeLayerLineJoin {
        return objc.msgSend(self, "lineJoin", ShapeLayerLineJoin, .{});
    }

    pub fn setLineJoin(self: *@This(), lineJoin: ShapeLayerLineJoin) void {
        return objc.msgSend(self, "setLineJoin:", void, .{lineJoin});
    }

    pub fn lineDashPhase(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "lineDashPhase", core_foundation.CGFloat, .{});
    }

    pub fn setLineDashPhase(self: *@This(), lineDashPhase: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setLineDashPhase:", void, .{lineDashPhase});
    }

    pub fn lineDashPattern(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "lineDashPattern", ?*anyopaque, .{});
    }

    pub fn setLineDashPattern(self: *@This(), lineDashPattern: ?*anyopaque) void {
        return objc.msgSend(self, "setLineDashPattern:", void, .{lineDashPattern});
    }

};

pub const TextLayerTruncationMode = ?*NSString;

pub const TextLayerAlignmentMode = ?*NSString;

/// https://developer.apple.com/documentation/QuartzCore/CATextLayer?language=objc
pub const TextLayer = opaque {
    pub const InternalInfo = objc.ExternalClass("CATextLayer", @This(), Layer, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn string(self: *@This()) *objc.Id {
        return objc.msgSend(self, "string", *objc.Id, .{});
    }

    pub fn setString(self: *@This(), string: *objc.Id) void {
        return objc.msgSend(self, "setString:", void, .{string});
    }

    pub fn font(self: *@This()) core_foundation.TypeRef {
        return objc.msgSend(self, "font", core_foundation.TypeRef, .{});
    }

    pub fn setFont(self: *@This(), font: core_foundation.TypeRef) void {
        return objc.msgSend(self, "setFont:", void, .{font});
    }

    pub fn fontSize(self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(self, "fontSize", core_foundation.CGFloat, .{});
    }

    pub fn setFontSize(self: *@This(), fontSize: core_foundation.CGFloat) void {
        return objc.msgSend(self, "setFontSize:", void, .{fontSize});
    }

    pub fn foregroundColor(self: *@This()) core_graphics.ColorRef {
        return objc.msgSend(self, "foregroundColor", core_graphics.ColorRef, .{});
    }

    pub fn setForegroundColor(self: *@This(), foregroundColor: core_graphics.ColorRef) void {
        return objc.msgSend(self, "setForegroundColor:", void, .{foregroundColor});
    }

    pub fn isWrapped(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isWrapped", objc.BOOL, .{});
    }

    pub fn setWrapped(self: *@This(), wrapped: objc.BOOL) void {
        return objc.msgSend(self, "setWrapped:", void, .{wrapped});
    }

    pub fn truncationMode(self: *@This()) TextLayerTruncationMode {
        return objc.msgSend(self, "truncationMode", TextLayerTruncationMode, .{});
    }

    pub fn setTruncationMode(self: *@This(), truncationMode: TextLayerTruncationMode) void {
        return objc.msgSend(self, "setTruncationMode:", void, .{truncationMode});
    }

    pub fn alignmentMode(self: *@This()) TextLayerAlignmentMode {
        return objc.msgSend(self, "alignmentMode", TextLayerAlignmentMode, .{});
    }

    pub fn setAlignmentMode(self: *@This(), alignmentMode: TextLayerAlignmentMode) void {
        return objc.msgSend(self, "setAlignmentMode:", void, .{alignmentMode});
    }

    pub fn allowsFontSubpixelQuantization(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsFontSubpixelQuantization", objc.BOOL, .{});
    }

    pub fn setAllowsFontSubpixelQuantization(self: *@This(), allowsFontSubpixelQuantization: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsFontSubpixelQuantization:", void, .{allowsFontSubpixelQuantization});
    }

};

pub const TextLayerPrivate = extern struct {};

/// https://developer.apple.com/documentation/QuartzCore/CATiledLayer?language=objc
pub const TiledLayer = opaque {
    pub const InternalInfo = objc.ExternalClass("CATiledLayer", @This(), Layer, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn fadeDuration(self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(self, "fadeDuration", core_foundation.TimeInterval, .{});
    }

    pub fn levelsOfDetail(self: *@This()) objc.size_t {
        return objc.msgSend(self, "levelsOfDetail", objc.size_t, .{});
    }

    pub fn setLevelsOfDetail(self: *@This(), levelsOfDetail: objc.size_t) void {
        return objc.msgSend(self, "setLevelsOfDetail:", void, .{levelsOfDetail});
    }

    pub fn levelsOfDetailBias(self: *@This()) objc.size_t {
        return objc.msgSend(self, "levelsOfDetailBias", objc.size_t, .{});
    }

    pub fn setLevelsOfDetailBias(self: *@This(), levelsOfDetailBias: objc.size_t) void {
        return objc.msgSend(self, "setLevelsOfDetailBias:", void, .{levelsOfDetailBias});
    }

    pub fn tileSize(self: *@This()) core_foundation.CGSize {
        return objc.msgSend(self, "tileSize", core_foundation.CGSize, .{});
    }

    pub fn setTileSize(self: *@This(), tileSize: core_foundation.CGSize) void {
        return objc.msgSend(self, "setTileSize:", void, .{tileSize});
    }

};

/// https://developer.apple.com/documentation/QuartzCore/CATransaction?language=objc
pub const Transaction = opaque {
    pub const InternalInfo = objc.ExternalClass("CATransaction", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn begin(self: *@This()) void {
        return objc.msgSend(self, "begin", void, .{});
    }

    pub fn commit(self: *@This()) void {
        return objc.msgSend(self, "commit", void, .{});
    }

    pub fn flush(self: *@This()) void {
        return objc.msgSend(self, "flush", void, .{});
    }

    pub fn lock(self: *@This()) void {
        return objc.msgSend(self, "lock", void, .{});
    }

    pub fn unlock(self: *@This()) void {
        return objc.msgSend(self, "unlock", void, .{});
    }

    pub fn animationDuration(self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(self, "animationDuration", core_foundation.TimeInterval, .{});
    }

    pub fn setAnimationDuration(self: *@This(), dur: core_foundation.TimeInterval) void {
        return objc.msgSend(self, "setAnimationDuration:", void, .{dur});
    }

    pub fn animationTimingFunction(self: *@This()) ?*MediaTimingFunction {
        return objc.msgSend(self, "animationTimingFunction", ?*MediaTimingFunction, .{});
    }

    pub fn setAnimationTimingFunction(self: *@This(), function: ?*MediaTimingFunction) void {
        return objc.msgSend(self, "setAnimationTimingFunction:", void, .{function});
    }

    pub fn setDisableActions(self: *@This(), flag: objc.BOOL) void {
        return objc.msgSend(self, "setDisableActions:", void, .{flag});
    }

    pub fn completionBlock(self: *@This()) *const fn() callconv(.C) void {
        return objc.msgSend(self, "completionBlock", *const fn() callconv(.C) void, .{});
    }

    pub fn setCompletionBlock(self: *@This(), block: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "setCompletionBlock:", void, .{block});
    }

    pub fn valueForKey(self: *@This(), key: ?*NSString) *objc.Id {
        return objc.msgSend(self, "valueForKey:", *objc.Id, .{key});
    }

    pub fn setValueForKey(self: *@This(), anObject: *objc.Id, key: ?*NSString) void {
        return objc.msgSend(self, "setValue:forKey:", void, .{anObject, key});
    }

};

/// https://developer.apple.com/documentation/QuartzCore/CATransformLayer?language=objc
pub const TransformLayer = opaque {
    pub const InternalInfo = objc.ExternalClass("CATransformLayer", @This(), Layer, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;
};

pub const ValueFunctionName = ?*NSString;

/// https://developer.apple.com/documentation/QuartzCore/CAValueFunction?language=objc
pub const ValueFunction = opaque {
    pub const InternalInfo = objc.ExternalClass("CAValueFunction", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn functionWithName(self: *@This(), name: ValueFunctionName) *@This() {
        return objc.msgSend(self, "functionWithName:", *@This(), .{name});
    }

    pub fn name(self: *@This()) ValueFunctionName {
        return objc.msgSend(self, "name", ValueFunctionName, .{});
    }

};

