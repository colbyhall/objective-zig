// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const core_graphics = @import("core_graphics.zig"); // Framework dependency CoreGraphics.
const core_image = @import("core_image.zig"); // Framework dependency CoreImage.
const foundation = @import("foundation.zig"); // Framework dependency Foundation.
const metal = @import("metal.zig"); // Framework dependency Metal.
const opengl = @import("opengl.zig"); // Framework dependency OpenGL.
const core_video = @import("core_video.zig"); // Framework dependency CoreVideo.

extern "QuartzCore" fn CACurrentMediaTime() callconv(.C) core_foundation.TimeInterval;
pub const currentMediaTime = CACurrentMediaTime;

pub const Transform3D = extern struct {
    m11: core_foundation.CGFloat,
    m12: core_foundation.CGFloat,
    m13: core_foundation.CGFloat,
    m14: core_foundation.CGFloat,
    m21: core_foundation.CGFloat,
    m22: core_foundation.CGFloat,
    m23: core_foundation.CGFloat,
    m24: core_foundation.CGFloat,
    m31: core_foundation.CGFloat,
    m32: core_foundation.CGFloat,
    m33: core_foundation.CGFloat,
    m34: core_foundation.CGFloat,
    m41: core_foundation.CGFloat,
    m42: core_foundation.CGFloat,
    m43: core_foundation.CGFloat,
    m44: core_foundation.CGFloat,
};

extern "QuartzCore" fn CATransform3DIsIdentity() callconv(.C) i32;
pub const transform3DIsIdentity = CATransform3DIsIdentity;

extern "QuartzCore" fn CATransform3DEqualToTransform() callconv(.C) i32;
pub const transform3DEqualToTransform = CATransform3DEqualToTransform;

extern "QuartzCore" fn CATransform3DMakeTranslation(tx: core_foundation.CGFloat, ty: core_foundation.CGFloat, tz: core_foundation.CGFloat) callconv(.C) Transform3D;
pub const transform3DMakeTranslation = CATransform3DMakeTranslation;

extern "QuartzCore" fn CATransform3DMakeScale(sx: core_foundation.CGFloat, sy: core_foundation.CGFloat, sz: core_foundation.CGFloat) callconv(.C) Transform3D;
pub const transform3DMakeScale = CATransform3DMakeScale;

extern "QuartzCore" fn CATransform3DMakeRotation(
    angle: core_foundation.CGFloat,
    x: core_foundation.CGFloat,
    y: core_foundation.CGFloat,
    z: core_foundation.CGFloat,
) callconv(.C) Transform3D;
pub const transform3DMakeRotation = CATransform3DMakeRotation;

extern "QuartzCore" fn CATransform3DTranslate(
    t: Transform3D,
    tx: core_foundation.CGFloat,
    ty: core_foundation.CGFloat,
    tz: core_foundation.CGFloat,
) callconv(.C) Transform3D;
pub const transform3DTranslate = CATransform3DTranslate;

extern "QuartzCore" fn CATransform3DScale(
    t: Transform3D,
    sx: core_foundation.CGFloat,
    sy: core_foundation.CGFloat,
    sz: core_foundation.CGFloat,
) callconv(.C) Transform3D;
pub const transform3DScale = CATransform3DScale;

extern "QuartzCore" fn CATransform3DRotate(
    t: Transform3D,
    angle: core_foundation.CGFloat,
    x: core_foundation.CGFloat,
    y: core_foundation.CGFloat,
    z: core_foundation.CGFloat,
) callconv(.C) Transform3D;
pub const transform3DRotate = CATransform3DRotate;

extern "QuartzCore" fn CATransform3DConcat(a: Transform3D, b: Transform3D) callconv(.C) Transform3D;
pub const transform3DConcat = CATransform3DConcat;

extern "QuartzCore" fn CATransform3DInvert(t: Transform3D) callconv(.C) Transform3D;
pub const transform3DInvert = CATransform3DInvert;

extern "QuartzCore" fn CATransform3DMakeAffineTransform(m: core_foundation.CGAffineTransform) callconv(.C) Transform3D;
pub const transform3DMakeAffineTransform = CATransform3DMakeAffineTransform;

extern "QuartzCore" fn CATransform3DIsAffine() callconv(.C) i32;
pub const transform3DIsAffine = CATransform3DIsAffine;

extern "QuartzCore" fn CATransform3DGetAffineTransform(t: Transform3D) callconv(.C) core_foundation.CGAffineTransform;
pub const transform3DGetAffineTransform = CATransform3DGetAffineTransform;

pub const MediaTimingFillMode = ?*foundation.String;

/// https://developer.apple.com/documentation/QuartzCore/CAMediaTiming?language=objc
pub const MediaTiming = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn beginTime(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "beginTime", core_foundation.TimeInterval, .{});
    }

    pub fn setBeginTime(_self: *@This(), _beginTime: core_foundation.TimeInterval) void {
        return objc.msgSend(_self, "setBeginTime:", void, .{_beginTime});
    }

    pub fn duration(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "duration", core_foundation.TimeInterval, .{});
    }

    pub fn setDuration(_self: *@This(), _duration: core_foundation.TimeInterval) void {
        return objc.msgSend(_self, "setDuration:", void, .{_duration});
    }

    pub fn speed(_self: *@This()) f32 {
        return objc.msgSend(_self, "speed", f32, .{});
    }

    pub fn setSpeed(_self: *@This(), _speed: f32) void {
        return objc.msgSend(_self, "setSpeed:", void, .{_speed});
    }

    pub fn timeOffset(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "timeOffset", core_foundation.TimeInterval, .{});
    }

    pub fn setTimeOffset(_self: *@This(), _timeOffset: core_foundation.TimeInterval) void {
        return objc.msgSend(_self, "setTimeOffset:", void, .{_timeOffset});
    }

    pub fn repeatCount(_self: *@This()) f32 {
        return objc.msgSend(_self, "repeatCount", f32, .{});
    }

    pub fn setRepeatCount(_self: *@This(), _repeatCount: f32) void {
        return objc.msgSend(_self, "setRepeatCount:", void, .{_repeatCount});
    }

    pub fn repeatDuration(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "repeatDuration", core_foundation.TimeInterval, .{});
    }

    pub fn setRepeatDuration(_self: *@This(), _repeatDuration: core_foundation.TimeInterval) void {
        return objc.msgSend(_self, "setRepeatDuration:", void, .{_repeatDuration});
    }

    pub fn autoreverses(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "autoreverses", objc.BOOL, .{});
    }

    pub fn setAutoreverses(_self: *@This(), _autoreverses: objc.BOOL) void {
        return objc.msgSend(_self, "setAutoreverses:", void, .{_autoreverses});
    }

    pub fn fillMode(_self: *@This()) MediaTimingFillMode {
        return objc.msgSend(_self, "fillMode", MediaTimingFillMode, .{});
    }

    pub fn setFillMode(_self: *@This(), _fillMode: MediaTimingFillMode) void {
        return objc.msgSend(_self, "setFillMode:", void, .{_fillMode});
    }
};

pub const LayerContentsGravity = ?*foundation.String;

pub const LayerContentsFormat = ?*foundation.String;

pub const LayerContentsFilter = ?*foundation.String;

pub const LayerCornerCurve = ?*foundation.String;

pub const AutoresizingMask = u32;
pub const AutoresizingMask_LayerNotSizable: u32 = 0;
pub const AutoresizingMask_LayerMinXMargin: u32 = 1;
pub const AutoresizingMask_LayerWidthSizable: u32 = 2;
pub const AutoresizingMask_LayerMaxXMargin: u32 = 4;
pub const AutoresizingMask_LayerMinYMargin: u32 = 8;
pub const AutoresizingMask_LayerHeightSizable: u32 = 16;
pub const AutoresizingMask_LayerMaxYMargin: u32 = 32;

pub const ToneMapMode = ?*foundation.String;

pub const EdgeAntialiasingMask = u32;
pub const EdgeAntialiasingMask_LayerLeftEdge: u32 = 1;
pub const EdgeAntialiasingMask_LayerRightEdge: u32 = 2;
pub const EdgeAntialiasingMask_LayerBottomEdge: u32 = 4;
pub const EdgeAntialiasingMask_LayerTopEdge: u32 = 8;

pub const CornerMask = objc.NSUInteger;
pub const CornerMask_LayerMinXMinYCorner: objc.NSUInteger = 1;
pub const CornerMask_LayerMaxXMinYCorner: objc.NSUInteger = 2;
pub const CornerMask_LayerMinXMaxYCorner: objc.NSUInteger = 4;
pub const CornerMask_LayerMaxXMaxYCorner: objc.NSUInteger = 8;

/// https://developer.apple.com/documentation/QuartzCore/CALayer?language=objc
pub const Layer = opaque {
    pub const Internal = objc.ExternClass("CALayer", @This(), objc.NSObject, &.{ foundation.SecureCoding, MediaTiming });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn beginTime(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "beginTime", core_foundation.TimeInterval, .{});
    }

    pub fn setBeginTime(_self: *@This(), _beginTime: core_foundation.TimeInterval) void {
        return objc.msgSend(_self, "setBeginTime:", void, .{_beginTime});
    }

    pub fn duration(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "duration", core_foundation.TimeInterval, .{});
    }

    pub fn setDuration(_self: *@This(), _duration: core_foundation.TimeInterval) void {
        return objc.msgSend(_self, "setDuration:", void, .{_duration});
    }

    pub fn speed(_self: *@This()) f32 {
        return objc.msgSend(_self, "speed", f32, .{});
    }

    pub fn setSpeed(_self: *@This(), _speed: f32) void {
        return objc.msgSend(_self, "setSpeed:", void, .{_speed});
    }

    pub fn timeOffset(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "timeOffset", core_foundation.TimeInterval, .{});
    }

    pub fn setTimeOffset(_self: *@This(), _timeOffset: core_foundation.TimeInterval) void {
        return objc.msgSend(_self, "setTimeOffset:", void, .{_timeOffset});
    }

    pub fn repeatCount(_self: *@This()) f32 {
        return objc.msgSend(_self, "repeatCount", f32, .{});
    }

    pub fn setRepeatCount(_self: *@This(), _repeatCount: f32) void {
        return objc.msgSend(_self, "setRepeatCount:", void, .{_repeatCount});
    }

    pub fn repeatDuration(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "repeatDuration", core_foundation.TimeInterval, .{});
    }

    pub fn setRepeatDuration(_self: *@This(), _repeatDuration: core_foundation.TimeInterval) void {
        return objc.msgSend(_self, "setRepeatDuration:", void, .{_repeatDuration});
    }

    pub fn autoreverses(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "autoreverses", objc.BOOL, .{});
    }

    pub fn setAutoreverses(_self: *@This(), _autoreverses: objc.BOOL) void {
        return objc.msgSend(_self, "setAutoreverses:", void, .{_autoreverses});
    }

    pub fn fillMode(_self: *@This()) MediaTimingFillMode {
        return objc.msgSend(_self, "fillMode", MediaTimingFillMode, .{});
    }

    pub fn setFillMode(_self: *@This(), _fillMode: MediaTimingFillMode) void {
        return objc.msgSend(_self, "setFillMode:", void, .{_fillMode});
    }

    pub fn layer() *@This() {
        return objc.msgSend(Internal.class(), "layer", *@This(), .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn initWithLayer(_self: *@This(), _layer: ?objc.Id) *@This() {
        return objc.msgSend(_self, "initWithLayer:", *@This(), .{_layer});
    }

    pub fn presentationLayer(_self: *@This()) *@This() {
        return objc.msgSend(_self, "presentationLayer", *@This(), .{});
    }

    pub fn modelLayer(_self: *@This()) *@This() {
        return objc.msgSend(_self, "modelLayer", *@This(), .{});
    }

    pub fn defaultValueForKey(_key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(Internal.class(), "defaultValueForKey:", ?objc.Id, .{_key});
    }

    pub fn affineTransform(_self: *@This()) core_foundation.CGAffineTransform {
        return objc.msgSend(_self, "affineTransform", core_foundation.CGAffineTransform, .{});
    }

    pub fn setAffineTransform(_self: *@This(), _m: core_foundation.CGAffineTransform) void {
        return objc.msgSend(_self, "setAffineTransform:", void, .{_m});
    }

    pub fn removeFromSuperlayer(_self: *@This()) void {
        return objc.msgSend(_self, "removeFromSuperlayer", void, .{});
    }

    pub fn addSublayer(_self: *@This(), _layer: ?*Layer) void {
        return objc.msgSend(_self, "addSublayer:", void, .{_layer});
    }

    pub fn insertSublayerAtIndex(_self: *@This(), _layer: ?*Layer, _idx: u32) void {
        return objc.msgSend(_self, "insertSublayer:atIndex:", void, .{ _layer, _idx });
    }

    pub fn insertSublayerBelow(_self: *@This(), _layer: ?*Layer, _sibling: ?*Layer) void {
        return objc.msgSend(_self, "insertSublayer:below:", void, .{ _layer, _sibling });
    }

    pub fn insertSublayerAbove(_self: *@This(), _layer: ?*Layer, _sibling: ?*Layer) void {
        return objc.msgSend(_self, "insertSublayer:above:", void, .{ _layer, _sibling });
    }

    pub fn replaceSublayerWith(_self: *@This(), _oldLayer: ?*Layer, _newLayer: ?*Layer) void {
        return objc.msgSend(_self, "replaceSublayer:with:", void, .{ _oldLayer, _newLayer });
    }

    pub fn convertPointFromLayer(_self: *@This(), _p: core_foundation.CGPoint, _l: ?*Layer) core_foundation.CGPoint {
        return objc.msgSend(_self, "convertPoint:fromLayer:", core_foundation.CGPoint, .{ _p, _l });
    }

    pub fn convertPointToLayer(_self: *@This(), _p: core_foundation.CGPoint, _l: ?*Layer) core_foundation.CGPoint {
        return objc.msgSend(_self, "convertPoint:toLayer:", core_foundation.CGPoint, .{ _p, _l });
    }

    pub fn convertRectFromLayer(_self: *@This(), _r: core_foundation.CGRect, _l: ?*Layer) core_foundation.CGRect {
        return objc.msgSend(_self, "convertRect:fromLayer:", core_foundation.CGRect, .{ _r, _l });
    }

    pub fn convertRectToLayer(_self: *@This(), _r: core_foundation.CGRect, _l: ?*Layer) core_foundation.CGRect {
        return objc.msgSend(_self, "convertRect:toLayer:", core_foundation.CGRect, .{ _r, _l });
    }

    pub fn convertTimeFromLayer(_self: *@This(), _t: core_foundation.TimeInterval, _l: ?*Layer) core_foundation.TimeInterval {
        return objc.msgSend(_self, "convertTime:fromLayer:", core_foundation.TimeInterval, .{ _t, _l });
    }

    pub fn convertTimeToLayer(_self: *@This(), _t: core_foundation.TimeInterval, _l: ?*Layer) core_foundation.TimeInterval {
        return objc.msgSend(_self, "convertTime:toLayer:", core_foundation.TimeInterval, .{ _t, _l });
    }

    pub fn hitTest(_self: *@This(), _p: core_foundation.CGPoint) ?*Layer {
        return objc.msgSend(_self, "hitTest:", ?*Layer, .{_p});
    }

    pub fn display(_self: *@This()) void {
        return objc.msgSend(_self, "display", void, .{});
    }

    pub fn setNeedsDisplay(_self: *@This()) void {
        return objc.msgSend(_self, "setNeedsDisplay", void, .{});
    }

    pub fn setNeedsDisplayInRect(_self: *@This(), _r: core_foundation.CGRect) void {
        return objc.msgSend(_self, "setNeedsDisplayInRect:", void, .{_r});
    }

    pub fn displayIfNeeded(_self: *@This()) void {
        return objc.msgSend(_self, "displayIfNeeded", void, .{});
    }

    pub fn drawInContext(_self: *@This(), _ctx: core_graphics.ContextRef) void {
        return objc.msgSend(_self, "drawInContext:", void, .{_ctx});
    }

    pub fn renderInContext(_self: *@This(), _ctx: core_graphics.ContextRef) void {
        return objc.msgSend(_self, "renderInContext:", void, .{_ctx});
    }

    pub fn cornerCurveExpansionFactor(_curve: LayerCornerCurve) core_foundation.CGFloat {
        return objc.msgSend(Internal.class(), "cornerCurveExpansionFactor:", core_foundation.CGFloat, .{_curve});
    }

    pub fn preferredFrameSize(_self: *@This()) core_foundation.CGSize {
        return objc.msgSend(_self, "preferredFrameSize", core_foundation.CGSize, .{});
    }

    pub fn setNeedsLayout(_self: *@This()) void {
        return objc.msgSend(_self, "setNeedsLayout", void, .{});
    }

    pub fn layoutIfNeeded(_self: *@This()) void {
        return objc.msgSend(_self, "layoutIfNeeded", void, .{});
    }

    pub fn layoutSublayers(_self: *@This()) void {
        return objc.msgSend(_self, "layoutSublayers", void, .{});
    }

    pub fn resizeSublayersWithOldSize(_self: *@This(), _size: core_foundation.CGSize) void {
        return objc.msgSend(_self, "resizeSublayersWithOldSize:", void, .{_size});
    }

    pub fn resizeWithOldSuperlayerSize(_self: *@This(), _size: core_foundation.CGSize) void {
        return objc.msgSend(_self, "resizeWithOldSuperlayerSize:", void, .{_size});
    }

    pub fn defaultActionForKey(_event: ?*foundation.String) ?*objc.id {
        return objc.msgSend(Internal.class(), "defaultActionForKey:", ?*objc.id, .{_event});
    }

    pub fn actionForKey(_self: *@This(), _event: ?*foundation.String) ?*objc.id {
        return objc.msgSend(_self, "actionForKey:", ?*objc.id, .{_event});
    }

    pub fn addAnimationForKey(_self: *@This(), _anim: ?*Animation, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "addAnimation:forKey:", void, .{ _anim, _key });
    }

    pub fn removeAllAnimations(_self: *@This()) void {
        return objc.msgSend(_self, "removeAllAnimations", void, .{});
    }

    pub fn removeAnimationForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "removeAnimationForKey:", void, .{_key});
    }

    pub fn animationKeys(_self: *@This()) ?*foundation.Array(?*foundation.String) {
        return objc.msgSend(_self, "animationKeys", ?*foundation.Array(?*foundation.String), .{});
    }

    pub fn animationForKey(_self: *@This(), _key: ?*foundation.String) ?*Animation {
        return objc.msgSend(_self, "animationForKey:", ?*Animation, .{_key});
    }

    pub fn bounds(_self: *@This()) core_foundation.CGRect {
        return objc.msgSend(_self, "bounds", core_foundation.CGRect, .{});
    }

    pub fn setBounds(_self: *@This(), _bounds: core_foundation.CGRect) void {
        return objc.msgSend(_self, "setBounds:", void, .{_bounds});
    }

    pub fn position(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "position", core_foundation.CGPoint, .{});
    }

    pub fn setPosition(_self: *@This(), _position: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "setPosition:", void, .{_position});
    }

    pub fn zPosition(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "zPosition", core_foundation.CGFloat, .{});
    }

    pub fn setZPosition(_self: *@This(), _zPosition: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setZPosition:", void, .{_zPosition});
    }

    pub fn anchorPoint(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "anchorPoint", core_foundation.CGPoint, .{});
    }

    pub fn setAnchorPoint(_self: *@This(), _anchorPoint: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "setAnchorPoint:", void, .{_anchorPoint});
    }

    pub fn anchorPointZ(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "anchorPointZ", core_foundation.CGFloat, .{});
    }

    pub fn setAnchorPointZ(_self: *@This(), _anchorPointZ: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setAnchorPointZ:", void, .{_anchorPointZ});
    }

    pub fn transform(_self: *@This()) Transform3D {
        return objc.msgSend(_self, "transform", Transform3D, .{});
    }

    pub fn setTransform(_self: *@This(), _transform: Transform3D) void {
        return objc.msgSend(_self, "setTransform:", void, .{_transform});
    }

    pub fn frame(_self: *@This()) core_foundation.CGRect {
        return objc.msgSend(_self, "frame", core_foundation.CGRect, .{});
    }

    pub fn setFrame(_self: *@This(), _frame: core_foundation.CGRect) void {
        return objc.msgSend(_self, "setFrame:", void, .{_frame});
    }

    pub fn isHidden(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isHidden", objc.BOOL, .{});
    }

    pub fn setHidden(_self: *@This(), _hidden: objc.BOOL) void {
        return objc.msgSend(_self, "setHidden:", void, .{_hidden});
    }

    pub fn isDoubleSided(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isDoubleSided", objc.BOOL, .{});
    }

    pub fn setDoubleSided(_self: *@This(), _doubleSided: objc.BOOL) void {
        return objc.msgSend(_self, "setDoubleSided:", void, .{_doubleSided});
    }

    pub fn isGeometryFlipped(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isGeometryFlipped", objc.BOOL, .{});
    }

    pub fn setGeometryFlipped(_self: *@This(), _geometryFlipped: objc.BOOL) void {
        return objc.msgSend(_self, "setGeometryFlipped:", void, .{_geometryFlipped});
    }

    pub fn superlayer(_self: *@This()) ?*Layer {
        return objc.msgSend(_self, "superlayer", ?*Layer, .{});
    }

    pub fn sublayers(_self: *@This()) ?*foundation.Array(?*Layer) {
        return objc.msgSend(_self, "sublayers", ?*foundation.Array(?*Layer), .{});
    }

    pub fn setSublayers(_self: *@This(), _sublayers: ?*foundation.Array(?*Layer)) void {
        return objc.msgSend(_self, "setSublayers:", void, .{_sublayers});
    }

    pub fn sublayerTransform(_self: *@This()) Transform3D {
        return objc.msgSend(_self, "sublayerTransform", Transform3D, .{});
    }

    pub fn setSublayerTransform(_self: *@This(), _sublayerTransform: Transform3D) void {
        return objc.msgSend(_self, "setSublayerTransform:", void, .{_sublayerTransform});
    }

    pub fn mask(_self: *@This()) ?*Layer {
        return objc.msgSend(_self, "mask", ?*Layer, .{});
    }

    pub fn setMask(_self: *@This(), _mask: ?*Layer) void {
        return objc.msgSend(_self, "setMask:", void, .{_mask});
    }

    pub fn masksToBounds(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "masksToBounds", objc.BOOL, .{});
    }

    pub fn setMasksToBounds(_self: *@This(), _masksToBounds: objc.BOOL) void {
        return objc.msgSend(_self, "setMasksToBounds:", void, .{_masksToBounds});
    }

    pub fn contents(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "contents", ?objc.Id, .{});
    }

    pub fn setContents(_self: *@This(), _contents: ?objc.Id) void {
        return objc.msgSend(_self, "setContents:", void, .{_contents});
    }

    pub fn contentsRect(_self: *@This()) core_foundation.CGRect {
        return objc.msgSend(_self, "contentsRect", core_foundation.CGRect, .{});
    }

    pub fn setContentsRect(_self: *@This(), _contentsRect: core_foundation.CGRect) void {
        return objc.msgSend(_self, "setContentsRect:", void, .{_contentsRect});
    }

    pub fn contentsGravity(_self: *@This()) LayerContentsGravity {
        return objc.msgSend(_self, "contentsGravity", LayerContentsGravity, .{});
    }

    pub fn setContentsGravity(_self: *@This(), _contentsGravity: LayerContentsGravity) void {
        return objc.msgSend(_self, "setContentsGravity:", void, .{_contentsGravity});
    }

    pub fn contentsScale(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "contentsScale", core_foundation.CGFloat, .{});
    }

    pub fn setContentsScale(_self: *@This(), _contentsScale: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setContentsScale:", void, .{_contentsScale});
    }

    pub fn contentsCenter(_self: *@This()) core_foundation.CGRect {
        return objc.msgSend(_self, "contentsCenter", core_foundation.CGRect, .{});
    }

    pub fn setContentsCenter(_self: *@This(), _contentsCenter: core_foundation.CGRect) void {
        return objc.msgSend(_self, "setContentsCenter:", void, .{_contentsCenter});
    }

    pub fn contentsFormat(_self: *@This()) LayerContentsFormat {
        return objc.msgSend(_self, "contentsFormat", LayerContentsFormat, .{});
    }

    pub fn setContentsFormat(_self: *@This(), _contentsFormat: LayerContentsFormat) void {
        return objc.msgSend(_self, "setContentsFormat:", void, .{_contentsFormat});
    }

    pub fn wantsExtendedDynamicRangeContent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsExtendedDynamicRangeContent", objc.BOOL, .{});
    }

    pub fn setWantsExtendedDynamicRangeContent(_self: *@This(), _wantsExtendedDynamicRangeContent: objc.BOOL) void {
        return objc.msgSend(_self, "setWantsExtendedDynamicRangeContent:", void, .{_wantsExtendedDynamicRangeContent});
    }

    pub fn toneMapMode(_self: *@This()) ToneMapMode {
        return objc.msgSend(_self, "toneMapMode", ToneMapMode, .{});
    }

    pub fn setToneMapMode(_self: *@This(), _toneMapMode: ToneMapMode) void {
        return objc.msgSend(_self, "setToneMapMode:", void, .{_toneMapMode});
    }

    pub fn wantsDynamicContentScaling(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsDynamicContentScaling", objc.BOOL, .{});
    }

    pub fn setWantsDynamicContentScaling(_self: *@This(), _wantsDynamicContentScaling: objc.BOOL) void {
        return objc.msgSend(_self, "setWantsDynamicContentScaling:", void, .{_wantsDynamicContentScaling});
    }

    pub fn minificationFilter(_self: *@This()) LayerContentsFilter {
        return objc.msgSend(_self, "minificationFilter", LayerContentsFilter, .{});
    }

    pub fn setMinificationFilter(_self: *@This(), _minificationFilter: LayerContentsFilter) void {
        return objc.msgSend(_self, "setMinificationFilter:", void, .{_minificationFilter});
    }

    pub fn magnificationFilter(_self: *@This()) LayerContentsFilter {
        return objc.msgSend(_self, "magnificationFilter", LayerContentsFilter, .{});
    }

    pub fn setMagnificationFilter(_self: *@This(), _magnificationFilter: LayerContentsFilter) void {
        return objc.msgSend(_self, "setMagnificationFilter:", void, .{_magnificationFilter});
    }

    pub fn minificationFilterBias(_self: *@This()) f32 {
        return objc.msgSend(_self, "minificationFilterBias", f32, .{});
    }

    pub fn setMinificationFilterBias(_self: *@This(), _minificationFilterBias: f32) void {
        return objc.msgSend(_self, "setMinificationFilterBias:", void, .{_minificationFilterBias});
    }

    pub fn isOpaque(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isOpaque", objc.BOOL, .{});
    }

    pub fn setOpaque(_self: *@This(), _opaque: objc.BOOL) void {
        return objc.msgSend(_self, "setOpaque:", void, .{_opaque});
    }

    pub fn needsDisplayOnBoundsChange(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsDisplayOnBoundsChange", objc.BOOL, .{});
    }

    pub fn setNeedsDisplayOnBoundsChange(_self: *@This(), _needsDisplayOnBoundsChange: objc.BOOL) void {
        return objc.msgSend(_self, "setNeedsDisplayOnBoundsChange:", void, .{_needsDisplayOnBoundsChange});
    }

    pub fn drawsAsynchronously(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "drawsAsynchronously", objc.BOOL, .{});
    }

    pub fn setDrawsAsynchronously(_self: *@This(), _drawsAsynchronously: objc.BOOL) void {
        return objc.msgSend(_self, "setDrawsAsynchronously:", void, .{_drawsAsynchronously});
    }

    pub fn edgeAntialiasingMask(_self: *@This()) EdgeAntialiasingMask {
        return objc.msgSend(_self, "edgeAntialiasingMask", EdgeAntialiasingMask, .{});
    }

    pub fn setEdgeAntialiasingMask(_self: *@This(), _edgeAntialiasingMask: EdgeAntialiasingMask) void {
        return objc.msgSend(_self, "setEdgeAntialiasingMask:", void, .{_edgeAntialiasingMask});
    }

    pub fn allowsEdgeAntialiasing(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsEdgeAntialiasing", objc.BOOL, .{});
    }

    pub fn setAllowsEdgeAntialiasing(_self: *@This(), _allowsEdgeAntialiasing: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowsEdgeAntialiasing:", void, .{_allowsEdgeAntialiasing});
    }

    pub fn backgroundColor(_self: *@This()) core_graphics.ColorRef {
        return objc.msgSend(_self, "backgroundColor", core_graphics.ColorRef, .{});
    }

    pub fn setBackgroundColor(_self: *@This(), _backgroundColor: core_graphics.ColorRef) void {
        return objc.msgSend(_self, "setBackgroundColor:", void, .{_backgroundColor});
    }

    pub fn cornerRadius(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "cornerRadius", core_foundation.CGFloat, .{});
    }

    pub fn setCornerRadius(_self: *@This(), _cornerRadius: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setCornerRadius:", void, .{_cornerRadius});
    }

    pub fn maskedCorners(_self: *@This()) CornerMask {
        return objc.msgSend(_self, "maskedCorners", CornerMask, .{});
    }

    pub fn setMaskedCorners(_self: *@This(), _maskedCorners: CornerMask) void {
        return objc.msgSend(_self, "setMaskedCorners:", void, .{_maskedCorners});
    }

    pub fn cornerCurve(_self: *@This()) LayerCornerCurve {
        return objc.msgSend(_self, "cornerCurve", LayerCornerCurve, .{});
    }

    pub fn setCornerCurve(_self: *@This(), _cornerCurve: LayerCornerCurve) void {
        return objc.msgSend(_self, "setCornerCurve:", void, .{_cornerCurve});
    }

    pub fn borderWidth(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "borderWidth", core_foundation.CGFloat, .{});
    }

    pub fn setBorderWidth(_self: *@This(), _borderWidth: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setBorderWidth:", void, .{_borderWidth});
    }

    pub fn borderColor(_self: *@This()) core_graphics.ColorRef {
        return objc.msgSend(_self, "borderColor", core_graphics.ColorRef, .{});
    }

    pub fn setBorderColor(_self: *@This(), _borderColor: core_graphics.ColorRef) void {
        return objc.msgSend(_self, "setBorderColor:", void, .{_borderColor});
    }

    pub fn opacity(_self: *@This()) f32 {
        return objc.msgSend(_self, "opacity", f32, .{});
    }

    pub fn setOpacity(_self: *@This(), _opacity: f32) void {
        return objc.msgSend(_self, "setOpacity:", void, .{_opacity});
    }

    pub fn allowsGroupOpacity(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsGroupOpacity", objc.BOOL, .{});
    }

    pub fn setAllowsGroupOpacity(_self: *@This(), _allowsGroupOpacity: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowsGroupOpacity:", void, .{_allowsGroupOpacity});
    }

    pub fn compositingFilter(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "compositingFilter", ?objc.Id, .{});
    }

    pub fn setCompositingFilter(_self: *@This(), _compositingFilter: ?objc.Id) void {
        return objc.msgSend(_self, "setCompositingFilter:", void, .{_compositingFilter});
    }

    pub fn filters(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "filters", ?*foundation.Array, .{});
    }

    pub fn setFilters(_self: *@This(), _filters: ?*foundation.Array) void {
        return objc.msgSend(_self, "setFilters:", void, .{_filters});
    }

    pub fn backgroundFilters(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "backgroundFilters", ?*foundation.Array, .{});
    }

    pub fn setBackgroundFilters(_self: *@This(), _backgroundFilters: ?*foundation.Array) void {
        return objc.msgSend(_self, "setBackgroundFilters:", void, .{_backgroundFilters});
    }

    pub fn shouldRasterize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldRasterize", objc.BOOL, .{});
    }

    pub fn setShouldRasterize(_self: *@This(), _shouldRasterize: objc.BOOL) void {
        return objc.msgSend(_self, "setShouldRasterize:", void, .{_shouldRasterize});
    }

    pub fn rasterizationScale(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "rasterizationScale", core_foundation.CGFloat, .{});
    }

    pub fn setRasterizationScale(_self: *@This(), _rasterizationScale: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setRasterizationScale:", void, .{_rasterizationScale});
    }

    pub fn shadowColor(_self: *@This()) core_graphics.ColorRef {
        return objc.msgSend(_self, "shadowColor", core_graphics.ColorRef, .{});
    }

    pub fn setShadowColor(_self: *@This(), _shadowColor: core_graphics.ColorRef) void {
        return objc.msgSend(_self, "setShadowColor:", void, .{_shadowColor});
    }

    pub fn shadowOpacity(_self: *@This()) f32 {
        return objc.msgSend(_self, "shadowOpacity", f32, .{});
    }

    pub fn setShadowOpacity(_self: *@This(), _shadowOpacity: f32) void {
        return objc.msgSend(_self, "setShadowOpacity:", void, .{_shadowOpacity});
    }

    pub fn shadowOffset(_self: *@This()) core_foundation.CGSize {
        return objc.msgSend(_self, "shadowOffset", core_foundation.CGSize, .{});
    }

    pub fn setShadowOffset(_self: *@This(), _shadowOffset: core_foundation.CGSize) void {
        return objc.msgSend(_self, "setShadowOffset:", void, .{_shadowOffset});
    }

    pub fn shadowRadius(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "shadowRadius", core_foundation.CGFloat, .{});
    }

    pub fn setShadowRadius(_self: *@This(), _shadowRadius: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setShadowRadius:", void, .{_shadowRadius});
    }

    pub fn shadowPath(_self: *@This()) core_graphics.PathRef {
        return objc.msgSend(_self, "shadowPath", core_graphics.PathRef, .{});
    }

    pub fn setShadowPath(_self: *@This(), _shadowPath: core_graphics.PathRef) void {
        return objc.msgSend(_self, "setShadowPath:", void, .{_shadowPath});
    }

    pub fn autoresizingMask(_self: *@This()) AutoresizingMask {
        return objc.msgSend(_self, "autoresizingMask", AutoresizingMask, .{});
    }

    pub fn setAutoresizingMask(_self: *@This(), _autoresizingMask: AutoresizingMask) void {
        return objc.msgSend(_self, "setAutoresizingMask:", void, .{_autoresizingMask});
    }

    pub fn layoutManager(_self: *@This()) ?*objc.id {
        return objc.msgSend(_self, "layoutManager", ?*objc.id, .{});
    }

    pub fn setLayoutManager(_self: *@This(), _layoutManager: ?*objc.id) void {
        return objc.msgSend(_self, "setLayoutManager:", void, .{_layoutManager});
    }

    pub fn actions(_self: *@This()) ?*foundation.Dictionary(?*foundation.String, ?*objc.id) {
        return objc.msgSend(_self, "actions", ?*foundation.Dictionary(?*foundation.String, ?*objc.id), .{});
    }

    pub fn setActions(_self: *@This(), _actions: ?*foundation.Dictionary(?*foundation.String, ?*objc.id)) void {
        return objc.msgSend(_self, "setActions:", void, .{_actions});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*foundation.String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn delegate(_self: *@This()) ?*objc.id {
        return objc.msgSend(_self, "delegate", ?*objc.id, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*objc.id) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn style(_self: *@This()) ?*foundation.Dictionary {
        return objc.msgSend(_self, "style", ?*foundation.Dictionary, .{});
    }

    pub fn setStyle(_self: *@This(), _style: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "setStyle:", void, .{_style});
    }

    pub fn addConstraint(_self: *@This(), _c: ?*Constraint) void {
        return objc.msgSend(_self, "addConstraint:", void, .{_c});
    }

    pub fn constraints(_self: *@This()) ?*foundation.Array(?*Constraint) {
        return objc.msgSend(_self, "constraints", ?*foundation.Array(?*Constraint), .{});
    }

    pub fn setConstraints(_self: *@This(), _constraints: ?*foundation.Array(?*Constraint)) void {
        return objc.msgSend(_self, "setConstraints:", void, .{_constraints});
    }

    pub fn layerWithRemoteClientId(_client_id: objc.uint32_t) ?*Layer {
        return objc.msgSend(Internal.class(), "layerWithRemoteClientId:", ?*Layer, .{_client_id});
    }

    pub fn scrollPoint(_self: *@This(), _p: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "scrollPoint:", void, .{_p});
    }

    pub fn scrollRectToVisible(_self: *@This(), _r: core_foundation.CGRect) void {
        return objc.msgSend(_self, "scrollRectToVisible:", void, .{_r});
    }

    pub fn visibleRect(_self: *@This()) core_foundation.CGRect {
        return objc.msgSend(_self, "visibleRect", core_foundation.CGRect, .{});
    }
};

/// https://developer.apple.com/documentation/QuartzCore/CALayoutManager?language=objc
pub const LayoutManager = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn preferredSizeOfLayer(_self: *@This(), _layer: ?*Layer) core_foundation.CGSize {
        return objc.msgSend(_self, "preferredSizeOfLayer:", core_foundation.CGSize, .{_layer});
    }

    pub fn invalidateLayoutOfLayer(_self: *@This(), _layer: ?*Layer) void {
        return objc.msgSend(_self, "invalidateLayoutOfLayer:", void, .{_layer});
    }

    pub fn layoutSublayersOfLayer(_self: *@This(), _layer: ?*Layer) void {
        return objc.msgSend(_self, "layoutSublayersOfLayer:", void, .{_layer});
    }
};

/// https://developer.apple.com/documentation/QuartzCore/CAAction?language=objc
pub const Action = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn runActionForKeyObjectArguments(_self: *@This(), _event: ?*foundation.String, _anObject: ?objc.Id, _dict: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "runActionForKey:object:arguments:", void, .{ _event, _anObject, _dict });
    }
};

/// https://developer.apple.com/documentation/QuartzCore/CALayerDelegate?language=objc
pub const LayerDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn displayLayer(_self: *@This(), _layer: ?*Layer) void {
        return objc.msgSend(_self, "displayLayer:", void, .{_layer});
    }

    pub fn drawLayerInContext(_self: *@This(), _layer: ?*Layer, _ctx: core_graphics.ContextRef) void {
        return objc.msgSend(_self, "drawLayer:inContext:", void, .{ _layer, _ctx });
    }

    pub fn layerWillDraw(_self: *@This(), _layer: ?*Layer) void {
        return objc.msgSend(_self, "layerWillDraw:", void, .{_layer});
    }

    pub fn layoutSublayersOfLayer(_self: *@This(), _layer: ?*Layer) void {
        return objc.msgSend(_self, "layoutSublayersOfLayer:", void, .{_layer});
    }

    pub fn actionForLayerForKey(_self: *@This(), _layer: ?*Layer, _event: ?*foundation.String) ?*objc.id {
        return objc.msgSend(_self, "actionForLayer:forKey:", ?*objc.id, .{ _layer, _event });
    }
};

pub const FrameRateRange = extern struct {
    minimum: f32,
    maximum: f32,
    preferred: f32,
};

extern "QuartzCore" fn CAFrameRateRangeMake(minimum: f32, maximum: f32, preferred: f32) callconv(.C) FrameRateRange;
pub const frameRateRangeMake = CAFrameRateRangeMake;

extern "QuartzCore" fn CAFrameRateRangeIsEqualToRange() callconv(.C) i32;
pub const frameRateRangeIsEqualToRange = CAFrameRateRangeIsEqualToRange;

pub const AnimationCalculationMode = ?*foundation.String;

pub const AnimationRotationMode = ?*foundation.String;

pub const TransitionType = ?*foundation.String;

pub const TransitionSubtype = ?*foundation.String;

/// https://developer.apple.com/documentation/QuartzCore/CAAnimation?language=objc
pub const Animation = opaque {
    pub const Internal = objc.ExternClass("CAAnimation", @This(), objc.NSObject, &.{ foundation.SecureCoding, foundation.Copying, MediaTiming, Action });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn beginTime(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "beginTime", core_foundation.TimeInterval, .{});
    }

    pub fn setBeginTime(_self: *@This(), _beginTime: core_foundation.TimeInterval) void {
        return objc.msgSend(_self, "setBeginTime:", void, .{_beginTime});
    }

    pub fn duration(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "duration", core_foundation.TimeInterval, .{});
    }

    pub fn setDuration(_self: *@This(), _duration: core_foundation.TimeInterval) void {
        return objc.msgSend(_self, "setDuration:", void, .{_duration});
    }

    pub fn speed(_self: *@This()) f32 {
        return objc.msgSend(_self, "speed", f32, .{});
    }

    pub fn setSpeed(_self: *@This(), _speed: f32) void {
        return objc.msgSend(_self, "setSpeed:", void, .{_speed});
    }

    pub fn timeOffset(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "timeOffset", core_foundation.TimeInterval, .{});
    }

    pub fn setTimeOffset(_self: *@This(), _timeOffset: core_foundation.TimeInterval) void {
        return objc.msgSend(_self, "setTimeOffset:", void, .{_timeOffset});
    }

    pub fn repeatCount(_self: *@This()) f32 {
        return objc.msgSend(_self, "repeatCount", f32, .{});
    }

    pub fn setRepeatCount(_self: *@This(), _repeatCount: f32) void {
        return objc.msgSend(_self, "setRepeatCount:", void, .{_repeatCount});
    }

    pub fn repeatDuration(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "repeatDuration", core_foundation.TimeInterval, .{});
    }

    pub fn setRepeatDuration(_self: *@This(), _repeatDuration: core_foundation.TimeInterval) void {
        return objc.msgSend(_self, "setRepeatDuration:", void, .{_repeatDuration});
    }

    pub fn autoreverses(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "autoreverses", objc.BOOL, .{});
    }

    pub fn setAutoreverses(_self: *@This(), _autoreverses: objc.BOOL) void {
        return objc.msgSend(_self, "setAutoreverses:", void, .{_autoreverses});
    }

    pub fn fillMode(_self: *@This()) MediaTimingFillMode {
        return objc.msgSend(_self, "fillMode", MediaTimingFillMode, .{});
    }

    pub fn setFillMode(_self: *@This(), _fillMode: MediaTimingFillMode) void {
        return objc.msgSend(_self, "setFillMode:", void, .{_fillMode});
    }

    pub fn runActionForKeyObjectArguments(_self: *@This(), _event: ?*foundation.String, _anObject: ?objc.Id, _dict: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "runActionForKey:object:arguments:", void, .{ _event, _anObject, _dict });
    }

    pub fn animation() *@This() {
        return objc.msgSend(Internal.class(), "animation", *@This(), .{});
    }

    pub fn defaultValueForKey(_key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(Internal.class(), "defaultValueForKey:", ?objc.Id, .{_key});
    }

    pub fn timingFunction(_self: *@This()) ?*MediaTimingFunction {
        return objc.msgSend(_self, "timingFunction", ?*MediaTimingFunction, .{});
    }

    pub fn setTimingFunction(_self: *@This(), _timingFunction: ?*MediaTimingFunction) void {
        return objc.msgSend(_self, "setTimingFunction:", void, .{_timingFunction});
    }

    pub fn delegate(_self: *@This()) ?*objc.id {
        return objc.msgSend(_self, "delegate", ?*objc.id, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*objc.id) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn isRemovedOnCompletion(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRemovedOnCompletion", objc.BOOL, .{});
    }

    pub fn setRemovedOnCompletion(_self: *@This(), _removedOnCompletion: objc.BOOL) void {
        return objc.msgSend(_self, "setRemovedOnCompletion:", void, .{_removedOnCompletion});
    }

    pub fn preferredFrameRateRange(_self: *@This()) FrameRateRange {
        return objc.msgSend(_self, "preferredFrameRateRange", FrameRateRange, .{});
    }

    pub fn setPreferredFrameRateRange(_self: *@This(), _preferredFrameRateRange: FrameRateRange) void {
        return objc.msgSend(_self, "setPreferredFrameRateRange:", void, .{_preferredFrameRateRange});
    }
};

/// https://developer.apple.com/documentation/QuartzCore/CAAnimationDelegate?language=objc
pub const AnimationDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn animationDidStart(_self: *@This(), _anim: ?*Animation) void {
        return objc.msgSend(_self, "animationDidStart:", void, .{_anim});
    }

    pub fn animationDidStopFinished(_self: *@This(), _anim: ?*Animation, _flag: objc.BOOL) void {
        return objc.msgSend(_self, "animationDidStop:finished:", void, .{ _anim, _flag });
    }
};

/// https://developer.apple.com/documentation/QuartzCore/CAPropertyAnimation?language=objc
pub const PropertyAnimation = opaque {
    pub const Internal = objc.ExternClass("CAPropertyAnimation", @This(), Animation, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn animationWithKeyPath(_path: ?*foundation.String) *@This() {
        return objc.msgSend(Internal.class(), "animationWithKeyPath:", *@This(), .{_path});
    }

    pub fn keyPath(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "keyPath", ?*foundation.String, .{});
    }

    pub fn setKeyPath(_self: *@This(), _keyPath: ?*foundation.String) void {
        return objc.msgSend(_self, "setKeyPath:", void, .{_keyPath});
    }

    pub fn isAdditive(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAdditive", objc.BOOL, .{});
    }

    pub fn setAdditive(_self: *@This(), _additive: objc.BOOL) void {
        return objc.msgSend(_self, "setAdditive:", void, .{_additive});
    }

    pub fn isCumulative(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isCumulative", objc.BOOL, .{});
    }

    pub fn setCumulative(_self: *@This(), _cumulative: objc.BOOL) void {
        return objc.msgSend(_self, "setCumulative:", void, .{_cumulative});
    }

    pub fn valueFunction(_self: *@This()) ?*ValueFunction {
        return objc.msgSend(_self, "valueFunction", ?*ValueFunction, .{});
    }

    pub fn setValueFunction(_self: *@This(), _valueFunction: ?*ValueFunction) void {
        return objc.msgSend(_self, "setValueFunction:", void, .{_valueFunction});
    }
};

/// https://developer.apple.com/documentation/QuartzCore/CABasicAnimation?language=objc
pub const BasicAnimation = opaque {
    pub const Internal = objc.ExternClass("CABasicAnimation", @This(), PropertyAnimation, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn fromValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "fromValue", ?objc.Id, .{});
    }

    pub fn setFromValue(_self: *@This(), _fromValue: ?objc.Id) void {
        return objc.msgSend(_self, "setFromValue:", void, .{_fromValue});
    }

    pub fn toValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "toValue", ?objc.Id, .{});
    }

    pub fn setToValue(_self: *@This(), _toValue: ?objc.Id) void {
        return objc.msgSend(_self, "setToValue:", void, .{_toValue});
    }

    pub fn byValue(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "byValue", ?objc.Id, .{});
    }

    pub fn setByValue(_self: *@This(), _byValue: ?objc.Id) void {
        return objc.msgSend(_self, "setByValue:", void, .{_byValue});
    }
};

/// https://developer.apple.com/documentation/QuartzCore/CAKeyframeAnimation?language=objc
pub const KeyframeAnimation = opaque {
    pub const Internal = objc.ExternClass("CAKeyframeAnimation", @This(), PropertyAnimation, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn values(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "values", ?*foundation.Array, .{});
    }

    pub fn setValues(_self: *@This(), _values: ?*foundation.Array) void {
        return objc.msgSend(_self, "setValues:", void, .{_values});
    }

    pub fn path(_self: *@This()) core_graphics.PathRef {
        return objc.msgSend(_self, "path", core_graphics.PathRef, .{});
    }

    pub fn setPath(_self: *@This(), _path: core_graphics.PathRef) void {
        return objc.msgSend(_self, "setPath:", void, .{_path});
    }

    pub fn keyTimes(_self: *@This()) ?*foundation.Array(?*foundation.Number) {
        return objc.msgSend(_self, "keyTimes", ?*foundation.Array(?*foundation.Number), .{});
    }

    pub fn setKeyTimes(_self: *@This(), _keyTimes: ?*foundation.Array(?*foundation.Number)) void {
        return objc.msgSend(_self, "setKeyTimes:", void, .{_keyTimes});
    }

    pub fn timingFunctions(_self: *@This()) ?*foundation.Array(?*MediaTimingFunction) {
        return objc.msgSend(_self, "timingFunctions", ?*foundation.Array(?*MediaTimingFunction), .{});
    }

    pub fn setTimingFunctions(_self: *@This(), _timingFunctions: ?*foundation.Array(?*MediaTimingFunction)) void {
        return objc.msgSend(_self, "setTimingFunctions:", void, .{_timingFunctions});
    }

    pub fn calculationMode(_self: *@This()) AnimationCalculationMode {
        return objc.msgSend(_self, "calculationMode", AnimationCalculationMode, .{});
    }

    pub fn setCalculationMode(_self: *@This(), _calculationMode: AnimationCalculationMode) void {
        return objc.msgSend(_self, "setCalculationMode:", void, .{_calculationMode});
    }

    pub fn tensionValues(_self: *@This()) ?*foundation.Array(?*foundation.Number) {
        return objc.msgSend(_self, "tensionValues", ?*foundation.Array(?*foundation.Number), .{});
    }

    pub fn setTensionValues(_self: *@This(), _tensionValues: ?*foundation.Array(?*foundation.Number)) void {
        return objc.msgSend(_self, "setTensionValues:", void, .{_tensionValues});
    }

    pub fn continuityValues(_self: *@This()) ?*foundation.Array(?*foundation.Number) {
        return objc.msgSend(_self, "continuityValues", ?*foundation.Array(?*foundation.Number), .{});
    }

    pub fn setContinuityValues(_self: *@This(), _continuityValues: ?*foundation.Array(?*foundation.Number)) void {
        return objc.msgSend(_self, "setContinuityValues:", void, .{_continuityValues});
    }

    pub fn biasValues(_self: *@This()) ?*foundation.Array(?*foundation.Number) {
        return objc.msgSend(_self, "biasValues", ?*foundation.Array(?*foundation.Number), .{});
    }

    pub fn setBiasValues(_self: *@This(), _biasValues: ?*foundation.Array(?*foundation.Number)) void {
        return objc.msgSend(_self, "setBiasValues:", void, .{_biasValues});
    }

    pub fn rotationMode(_self: *@This()) AnimationRotationMode {
        return objc.msgSend(_self, "rotationMode", AnimationRotationMode, .{});
    }

    pub fn setRotationMode(_self: *@This(), _rotationMode: AnimationRotationMode) void {
        return objc.msgSend(_self, "setRotationMode:", void, .{_rotationMode});
    }
};

/// https://developer.apple.com/documentation/QuartzCore/CASpringAnimation?language=objc
pub const SpringAnimation = opaque {
    pub const Internal = objc.ExternClass("CASpringAnimation", @This(), BasicAnimation, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithPerceptualDurationBounce(_self: *@This(), _perceptualDuration: core_foundation.TimeInterval, _bounce: core_foundation.CGFloat) *@This() {
        return objc.msgSend(_self, "initWithPerceptualDuration:bounce:", *@This(), .{ _perceptualDuration, _bounce });
    }

    pub fn mass(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "mass", core_foundation.CGFloat, .{});
    }

    pub fn setMass(_self: *@This(), _mass: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setMass:", void, .{_mass});
    }

    pub fn stiffness(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "stiffness", core_foundation.CGFloat, .{});
    }

    pub fn setStiffness(_self: *@This(), _stiffness: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setStiffness:", void, .{_stiffness});
    }

    pub fn damping(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "damping", core_foundation.CGFloat, .{});
    }

    pub fn setDamping(_self: *@This(), _damping: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setDamping:", void, .{_damping});
    }

    pub fn initialVelocity(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "initialVelocity", core_foundation.CGFloat, .{});
    }

    pub fn setInitialVelocity(_self: *@This(), _initialVelocity: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setInitialVelocity:", void, .{_initialVelocity});
    }

    pub fn allowsOverdamping(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsOverdamping", objc.BOOL, .{});
    }

    pub fn setAllowsOverdamping(_self: *@This(), _allowsOverdamping: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowsOverdamping:", void, .{_allowsOverdamping});
    }

    pub fn settlingDuration(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "settlingDuration", core_foundation.TimeInterval, .{});
    }

    pub fn perceptualDuration(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "perceptualDuration", core_foundation.TimeInterval, .{});
    }

    pub fn bounce(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "bounce", core_foundation.CGFloat, .{});
    }
};

/// https://developer.apple.com/documentation/QuartzCore/CATransition?language=objc
pub const Transition = opaque {
    pub const Internal = objc.ExternClass("CATransition", @This(), Animation, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn @"type"(_self: *@This()) TransitionType {
        return objc.msgSend(_self, "type", TransitionType, .{});
    }

    pub fn setType(_self: *@This(), _type: TransitionType) void {
        return objc.msgSend(_self, "setType:", void, .{_type});
    }

    pub fn subtype(_self: *@This()) TransitionSubtype {
        return objc.msgSend(_self, "subtype", TransitionSubtype, .{});
    }

    pub fn setSubtype(_self: *@This(), _subtype: TransitionSubtype) void {
        return objc.msgSend(_self, "setSubtype:", void, .{_subtype});
    }

    pub fn startProgress(_self: *@This()) f32 {
        return objc.msgSend(_self, "startProgress", f32, .{});
    }

    pub fn setStartProgress(_self: *@This(), _startProgress: f32) void {
        return objc.msgSend(_self, "setStartProgress:", void, .{_startProgress});
    }

    pub fn endProgress(_self: *@This()) f32 {
        return objc.msgSend(_self, "endProgress", f32, .{});
    }

    pub fn setEndProgress(_self: *@This(), _endProgress: f32) void {
        return objc.msgSend(_self, "setEndProgress:", void, .{_endProgress});
    }

    pub fn filter(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "filter", ?objc.Id, .{});
    }

    pub fn setFilter(_self: *@This(), _filter: ?objc.Id) void {
        return objc.msgSend(_self, "setFilter:", void, .{_filter});
    }
};

/// https://developer.apple.com/documentation/QuartzCore/CAAnimationGroup?language=objc
pub const AnimationGroup = opaque {
    pub const Internal = objc.ExternClass("CAAnimationGroup", @This(), Animation, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn animations(_self: *@This()) ?*foundation.Array(?*Animation) {
        return objc.msgSend(_self, "animations", ?*foundation.Array(?*Animation), .{});
    }

    pub fn setAnimations(_self: *@This(), _animations: ?*foundation.Array(?*Animation)) void {
        return objc.msgSend(_self, "setAnimations:", void, .{_animations});
    }
};

pub const ConstraintAttribute = i32;
pub const ConstraintAttribute_MinX: i32 = 0;
pub const ConstraintAttribute_MidX: i32 = 1;
pub const ConstraintAttribute_MaxX: i32 = 2;
pub const ConstraintAttribute_Width: i32 = 3;
pub const ConstraintAttribute_MinY: i32 = 4;
pub const ConstraintAttribute_MidY: i32 = 5;
pub const ConstraintAttribute_MaxY: i32 = 6;
pub const ConstraintAttribute_Height: i32 = 7;

/// https://developer.apple.com/documentation/QuartzCore/CAConstraintLayoutManager?language=objc
pub const ConstraintLayoutManager = opaque {
    pub const Internal = objc.ExternClass("CAConstraintLayoutManager", @This(), objc.NSObject, &.{LayoutManager});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn preferredSizeOfLayer(_self: *@This(), _layer: ?*Layer) core_foundation.CGSize {
        return objc.msgSend(_self, "preferredSizeOfLayer:", core_foundation.CGSize, .{_layer});
    }

    pub fn invalidateLayoutOfLayer(_self: *@This(), _layer: ?*Layer) void {
        return objc.msgSend(_self, "invalidateLayoutOfLayer:", void, .{_layer});
    }

    pub fn layoutSublayersOfLayer(_self: *@This(), _layer: ?*Layer) void {
        return objc.msgSend(_self, "layoutSublayersOfLayer:", void, .{_layer});
    }

    pub fn layoutManager() *@This() {
        return objc.msgSend(Internal.class(), "layoutManager", *@This(), .{});
    }
};

/// https://developer.apple.com/documentation/QuartzCore/CAConstraint?language=objc
pub const Constraint = opaque {
    pub const Internal = objc.ExternClass("CAConstraint", @This(), objc.NSObject, &.{foundation.SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn constraintWithAttributeRelativeToAttributeScaleOffset(
        _attr: ConstraintAttribute,
        _srcId: ?*foundation.String,
        _srcAttr: ConstraintAttribute,
        _m: core_foundation.CGFloat,
        _c: core_foundation.CGFloat,
    ) *@This() {
        return objc.msgSend(Internal.class(), "constraintWithAttribute:relativeTo:attribute:scale:offset:", *@This(), .{
            _attr,
            _srcId,
            _srcAttr,
            _m,
            _c,
        });
    }

    pub fn constraintWithAttributeRelativeToAttributeOffset(
        _attr: ConstraintAttribute,
        _srcId: ?*foundation.String,
        _srcAttr: ConstraintAttribute,
        _c: core_foundation.CGFloat,
    ) *@This() {
        return objc.msgSend(Internal.class(), "constraintWithAttribute:relativeTo:attribute:offset:", *@This(), .{
            _attr,
            _srcId,
            _srcAttr,
            _c,
        });
    }

    pub fn constraintWithAttributeRelativeToAttribute(_attr: ConstraintAttribute, _srcId: ?*foundation.String, _srcAttr: ConstraintAttribute) *@This() {
        return objc.msgSend(Internal.class(), "constraintWithAttribute:relativeTo:attribute:", *@This(), .{ _attr, _srcId, _srcAttr });
    }

    pub fn initWithAttributeRelativeToAttributeScaleOffset(
        _self: *@This(),
        _attr: ConstraintAttribute,
        _srcId: ?*foundation.String,
        _srcAttr: ConstraintAttribute,
        _m: core_foundation.CGFloat,
        _c: core_foundation.CGFloat,
    ) *@This() {
        return objc.msgSend(_self, "initWithAttribute:relativeTo:attribute:scale:offset:", *@This(), .{
            _attr,
            _srcId,
            _srcAttr,
            _m,
            _c,
        });
    }

    pub fn attribute(_self: *@This()) ConstraintAttribute {
        return objc.msgSend(_self, "attribute", ConstraintAttribute, .{});
    }

    pub fn sourceName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "sourceName", ?*foundation.String, .{});
    }

    pub fn sourceAttribute(_self: *@This()) ConstraintAttribute {
        return objc.msgSend(_self, "sourceAttribute", ConstraintAttribute, .{});
    }

    pub fn scale(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "scale", core_foundation.CGFloat, .{});
    }

    pub fn offset(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "offset", core_foundation.CGFloat, .{});
    }
};

/// https://developer.apple.com/documentation/QuartzCore/CADisplayLink?language=objc
pub const DisplayLink = opaque {
    pub const Internal = objc.ExternClass("CADisplayLink", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn displayLinkWithTargetSelector(_target: ?objc.Id, _sel: objc.Selector) ?*DisplayLink {
        return objc.msgSend(Internal.class(), "displayLinkWithTarget:selector:", ?*DisplayLink, .{ _target, _sel });
    }

    pub fn addToRunLoopForMode(_self: *@This(), _runloop: ?*foundation.RunLoop, _mode: foundation.RunLoopMode) void {
        return objc.msgSend(_self, "addToRunLoop:forMode:", void, .{ _runloop, _mode });
    }

    pub fn removeFromRunLoopForMode(_self: *@This(), _runloop: ?*foundation.RunLoop, _mode: foundation.RunLoopMode) void {
        return objc.msgSend(_self, "removeFromRunLoop:forMode:", void, .{ _runloop, _mode });
    }

    pub fn invalidate(_self: *@This()) void {
        return objc.msgSend(_self, "invalidate", void, .{});
    }

    pub fn timestamp(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "timestamp", core_foundation.TimeInterval, .{});
    }

    pub fn duration(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "duration", core_foundation.TimeInterval, .{});
    }

    pub fn targetTimestamp(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "targetTimestamp", core_foundation.TimeInterval, .{});
    }

    pub fn isPaused(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isPaused", objc.BOOL, .{});
    }

    pub fn setPaused(_self: *@This(), _paused: objc.BOOL) void {
        return objc.msgSend(_self, "setPaused:", void, .{_paused});
    }

    pub fn frameInterval(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "frameInterval", objc.NSInteger, .{});
    }

    pub fn setFrameInterval(_self: *@This(), _frameInterval: objc.NSInteger) void {
        return objc.msgSend(_self, "setFrameInterval:", void, .{_frameInterval});
    }

    pub fn preferredFramesPerSecond(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "preferredFramesPerSecond", objc.NSInteger, .{});
    }

    pub fn setPreferredFramesPerSecond(_self: *@This(), _preferredFramesPerSecond: objc.NSInteger) void {
        return objc.msgSend(_self, "setPreferredFramesPerSecond:", void, .{_preferredFramesPerSecond});
    }

    pub fn preferredFrameRateRange(_self: *@This()) FrameRateRange {
        return objc.msgSend(_self, "preferredFrameRateRange", FrameRateRange, .{});
    }

    pub fn setPreferredFrameRateRange(_self: *@This(), _preferredFrameRateRange: FrameRateRange) void {
        return objc.msgSend(_self, "setPreferredFrameRateRange:", void, .{_preferredFrameRateRange});
    }
};

/// https://developer.apple.com/documentation/QuartzCore/CAEDRMetadata?language=objc
pub const EDRMetadata = opaque {
    pub const _CAEDRMetadataPrivate = extern struct {};

    pub const Internal = objc.ExternClass("CAEDRMetadata", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn hdr10MetadataWithDisplayInfoContentInfoOpticalOutputScale(_displayData: ?*foundation.Data, _contentData: ?*foundation.Data, _scale: f32) ?*EDRMetadata {
        return objc.msgSend(Internal.class(), "HDR10MetadataWithDisplayInfo:contentInfo:opticalOutputScale:", ?*EDRMetadata, .{ _displayData, _contentData, _scale });
    }

    pub fn hdr10MetadataWithMinLuminanceMaxLuminanceOpticalOutputScale(_minNits: f32, _maxNits: f32, _scale: f32) ?*EDRMetadata {
        return objc.msgSend(Internal.class(), "HDR10MetadataWithMinLuminance:maxLuminance:opticalOutputScale:", ?*EDRMetadata, .{ _minNits, _maxNits, _scale });
    }

    pub fn hlgMetadataWithAmbientViewingEnvironment(_data: ?*foundation.Data) ?*EDRMetadata {
        return objc.msgSend(Internal.class(), "HLGMetadataWithAmbientViewingEnvironment:", ?*EDRMetadata, .{_data});
    }

    pub fn hlgMetadata() ?*EDRMetadata {
        return objc.msgSend(Internal.class(), "HLGMetadata", ?*EDRMetadata, .{});
    }

    pub fn isAvailable() objc.BOOL {
        return objc.msgSend(Internal.class(), "isAvailable", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/QuartzCore/CAMetalDrawable?language=objc
pub const MetalDrawable = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{metal.Drawable});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn present(_self: *@This()) void {
        return objc.msgSend(_self, "present", void, .{});
    }

    pub fn presentAtTime(_self: *@This(), _presentationTime: core_foundation.TimeInterval) void {
        return objc.msgSend(_self, "presentAtTime:", void, .{_presentationTime});
    }

    pub fn presentAfterMinimumDuration(_self: *@This(), _duration: core_foundation.TimeInterval) void {
        return objc.msgSend(_self, "presentAfterMinimumDuration:", void, .{_duration});
    }

    pub fn addPresentedHandler(_self: *@This(), _block: metal.DrawablePresentedHandler) void {
        return objc.msgSend(_self, "addPresentedHandler:", void, .{_block});
    }

    pub fn presentedTime(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "presentedTime", core_foundation.TimeInterval, .{});
    }

    pub fn drawableID(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "drawableID", objc.NSUInteger, .{});
    }

    pub fn texture(_self: *@This()) ?*objc.id {
        return objc.msgSend(_self, "texture", ?*objc.id, .{});
    }

    pub fn layer(_self: *@This()) ?*MetalLayer {
        return objc.msgSend(_self, "layer", ?*MetalLayer, .{});
    }
};

/// https://developer.apple.com/documentation/QuartzCore/CAMetalLayer?language=objc
pub const MetalLayer = opaque {
    pub const _CAMetalLayerPrivate = extern struct {};

    pub const Internal = objc.ExternClass("CAMetalLayer", @This(), Layer, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn nextDrawable(_self: *@This()) ?*objc.id {
        return objc.msgSend(_self, "nextDrawable", ?*objc.id, .{});
    }

    pub fn device(_self: *@This()) ?*objc.id {
        return objc.msgSend(_self, "device", ?*objc.id, .{});
    }

    pub fn setDevice(_self: *@This(), _device: ?*objc.id) void {
        return objc.msgSend(_self, "setDevice:", void, .{_device});
    }

    pub fn preferredDevice(_self: *@This()) ?*objc.id {
        return objc.msgSend(_self, "preferredDevice", ?*objc.id, .{});
    }

    pub fn pixelFormat(_self: *@This()) metal.PixelFormat {
        return objc.msgSend(_self, "pixelFormat", metal.PixelFormat, .{});
    }

    pub fn setPixelFormat(_self: *@This(), _pixelFormat: metal.PixelFormat) void {
        return objc.msgSend(_self, "setPixelFormat:", void, .{_pixelFormat});
    }

    pub fn framebufferOnly(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "framebufferOnly", objc.BOOL, .{});
    }

    pub fn setFramebufferOnly(_self: *@This(), _framebufferOnly: objc.BOOL) void {
        return objc.msgSend(_self, "setFramebufferOnly:", void, .{_framebufferOnly});
    }

    pub fn drawableSize(_self: *@This()) core_foundation.CGSize {
        return objc.msgSend(_self, "drawableSize", core_foundation.CGSize, .{});
    }

    pub fn setDrawableSize(_self: *@This(), _drawableSize: core_foundation.CGSize) void {
        return objc.msgSend(_self, "setDrawableSize:", void, .{_drawableSize});
    }

    pub fn maximumDrawableCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maximumDrawableCount", objc.NSUInteger, .{});
    }

    pub fn setMaximumDrawableCount(_self: *@This(), _maximumDrawableCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaximumDrawableCount:", void, .{_maximumDrawableCount});
    }

    pub fn presentsWithTransaction(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "presentsWithTransaction", objc.BOOL, .{});
    }

    pub fn setPresentsWithTransaction(_self: *@This(), _presentsWithTransaction: objc.BOOL) void {
        return objc.msgSend(_self, "setPresentsWithTransaction:", void, .{_presentsWithTransaction});
    }

    pub fn colorspace(_self: *@This()) core_graphics.ColorSpaceRef {
        return objc.msgSend(_self, "colorspace", core_graphics.ColorSpaceRef, .{});
    }

    pub fn setColorspace(_self: *@This(), _colorspace: core_graphics.ColorSpaceRef) void {
        return objc.msgSend(_self, "setColorspace:", void, .{_colorspace});
    }

    pub fn wantsExtendedDynamicRangeContent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsExtendedDynamicRangeContent", objc.BOOL, .{});
    }

    pub fn setWantsExtendedDynamicRangeContent(_self: *@This(), _wantsExtendedDynamicRangeContent: objc.BOOL) void {
        return objc.msgSend(_self, "setWantsExtendedDynamicRangeContent:", void, .{_wantsExtendedDynamicRangeContent});
    }

    pub fn edrMetadata(_self: *@This()) ?*EDRMetadata {
        return objc.msgSend(_self, "EDRMetadata", ?*EDRMetadata, .{});
    }

    pub fn setEDRMetadata(_self: *@This(), _EDRMetadata: ?*EDRMetadata) void {
        return objc.msgSend(_self, "setEDRMetadata:", void, .{_EDRMetadata});
    }

    pub fn displaySyncEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "displaySyncEnabled", objc.BOOL, .{});
    }

    pub fn setDisplaySyncEnabled(_self: *@This(), _displaySyncEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setDisplaySyncEnabled:", void, .{_displaySyncEnabled});
    }

    pub fn allowsNextDrawableTimeout(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsNextDrawableTimeout", objc.BOOL, .{});
    }

    pub fn setAllowsNextDrawableTimeout(_self: *@This(), _allowsNextDrawableTimeout: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowsNextDrawableTimeout:", void, .{_allowsNextDrawableTimeout});
    }

    pub fn developerHUDProperties(_self: *@This()) ?*foundation.Dictionary {
        return objc.msgSend(_self, "developerHUDProperties", ?*foundation.Dictionary, .{});
    }

    pub fn setDeveloperHUDProperties(_self: *@This(), _developerHUDProperties: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "setDeveloperHUDProperties:", void, .{_developerHUDProperties});
    }
};

/// https://developer.apple.com/documentation/QuartzCore/CAMetalDisplayLinkUpdate?language=objc
pub const MetalDisplayLinkUpdate = opaque {
    pub const Internal = objc.ExternClass("CAMetalDisplayLinkUpdate", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn drawable(_self: *@This()) ?*objc.id {
        return objc.msgSend(_self, "drawable", ?*objc.id, .{});
    }

    pub fn targetTimestamp(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "targetTimestamp", core_foundation.TimeInterval, .{});
    }

    pub fn targetPresentationTimestamp(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "targetPresentationTimestamp", core_foundation.TimeInterval, .{});
    }
};

/// https://developer.apple.com/documentation/QuartzCore/CAMetalDisplayLinkDelegate?language=objc
pub const MetalDisplayLinkDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn metalDisplayLinkNeedsUpdate(_self: *@This(), _link: ?*MetalDisplayLink, _update: ?*MetalDisplayLinkUpdate) void {
        return objc.msgSend(_self, "metalDisplayLink:needsUpdate:", void, .{ _link, _update });
    }
};

/// https://developer.apple.com/documentation/QuartzCore/CAMetalDisplayLink?language=objc
pub const MetalDisplayLink = opaque {
    pub const Internal = objc.ExternClass("CAMetalDisplayLink", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithMetalLayer(_self: *@This(), _layer: ?*MetalLayer) *@This() {
        return objc.msgSend(_self, "initWithMetalLayer:", *@This(), .{_layer});
    }

    pub fn addToRunLoopForMode(_self: *@This(), _runloop: ?*foundation.RunLoop, _mode: foundation.RunLoopMode) void {
        return objc.msgSend(_self, "addToRunLoop:forMode:", void, .{ _runloop, _mode });
    }

    pub fn removeFromRunLoopForMode(_self: *@This(), _runloop: ?*foundation.RunLoop, _mode: foundation.RunLoopMode) void {
        return objc.msgSend(_self, "removeFromRunLoop:forMode:", void, .{ _runloop, _mode });
    }

    pub fn invalidate(_self: *@This()) void {
        return objc.msgSend(_self, "invalidate", void, .{});
    }

    pub fn delegate(_self: *@This()) ?*objc.id {
        return objc.msgSend(_self, "delegate", ?*objc.id, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*objc.id) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn preferredFrameLatency(_self: *@This()) f32 {
        return objc.msgSend(_self, "preferredFrameLatency", f32, .{});
    }

    pub fn setPreferredFrameLatency(_self: *@This(), _preferredFrameLatency: f32) void {
        return objc.msgSend(_self, "setPreferredFrameLatency:", void, .{_preferredFrameLatency});
    }

    pub fn preferredFrameRateRange(_self: *@This()) FrameRateRange {
        return objc.msgSend(_self, "preferredFrameRateRange", FrameRateRange, .{});
    }

    pub fn setPreferredFrameRateRange(_self: *@This(), _preferredFrameRateRange: FrameRateRange) void {
        return objc.msgSend(_self, "setPreferredFrameRateRange:", void, .{_preferredFrameRateRange});
    }

    pub fn isPaused(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isPaused", objc.BOOL, .{});
    }

    pub fn setPaused(_self: *@This(), _paused: objc.BOOL) void {
        return objc.msgSend(_self, "setPaused:", void, .{_paused});
    }
};

/// https://developer.apple.com/documentation/QuartzCore/CAEmitterCell?language=objc
pub const EmitterCell = opaque {
    pub const Internal = objc.ExternClass("CAEmitterCell", @This(), objc.NSObject, &.{ foundation.SecureCoding, MediaTiming });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn beginTime(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "beginTime", core_foundation.TimeInterval, .{});
    }

    pub fn setBeginTime(_self: *@This(), _beginTime: core_foundation.TimeInterval) void {
        return objc.msgSend(_self, "setBeginTime:", void, .{_beginTime});
    }

    pub fn duration(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "duration", core_foundation.TimeInterval, .{});
    }

    pub fn setDuration(_self: *@This(), _duration: core_foundation.TimeInterval) void {
        return objc.msgSend(_self, "setDuration:", void, .{_duration});
    }

    pub fn speed(_self: *@This()) f32 {
        return objc.msgSend(_self, "speed", f32, .{});
    }

    pub fn setSpeed(_self: *@This(), _speed: f32) void {
        return objc.msgSend(_self, "setSpeed:", void, .{_speed});
    }

    pub fn timeOffset(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "timeOffset", core_foundation.TimeInterval, .{});
    }

    pub fn setTimeOffset(_self: *@This(), _timeOffset: core_foundation.TimeInterval) void {
        return objc.msgSend(_self, "setTimeOffset:", void, .{_timeOffset});
    }

    pub fn repeatCount(_self: *@This()) f32 {
        return objc.msgSend(_self, "repeatCount", f32, .{});
    }

    pub fn setRepeatCount(_self: *@This(), _repeatCount: f32) void {
        return objc.msgSend(_self, "setRepeatCount:", void, .{_repeatCount});
    }

    pub fn repeatDuration(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "repeatDuration", core_foundation.TimeInterval, .{});
    }

    pub fn setRepeatDuration(_self: *@This(), _repeatDuration: core_foundation.TimeInterval) void {
        return objc.msgSend(_self, "setRepeatDuration:", void, .{_repeatDuration});
    }

    pub fn autoreverses(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "autoreverses", objc.BOOL, .{});
    }

    pub fn setAutoreverses(_self: *@This(), _autoreverses: objc.BOOL) void {
        return objc.msgSend(_self, "setAutoreverses:", void, .{_autoreverses});
    }

    pub fn fillMode(_self: *@This()) MediaTimingFillMode {
        return objc.msgSend(_self, "fillMode", MediaTimingFillMode, .{});
    }

    pub fn setFillMode(_self: *@This(), _fillMode: MediaTimingFillMode) void {
        return objc.msgSend(_self, "setFillMode:", void, .{_fillMode});
    }

    pub fn emitterCell() *@This() {
        return objc.msgSend(Internal.class(), "emitterCell", *@This(), .{});
    }

    pub fn defaultValueForKey(_key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(Internal.class(), "defaultValueForKey:", ?objc.Id, .{_key});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*foundation.String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn isEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isEnabled", objc.BOOL, .{});
    }

    pub fn setEnabled(_self: *@This(), _enabled: objc.BOOL) void {
        return objc.msgSend(_self, "setEnabled:", void, .{_enabled});
    }

    pub fn birthRate(_self: *@This()) f32 {
        return objc.msgSend(_self, "birthRate", f32, .{});
    }

    pub fn setBirthRate(_self: *@This(), _birthRate: f32) void {
        return objc.msgSend(_self, "setBirthRate:", void, .{_birthRate});
    }

    pub fn lifetime(_self: *@This()) f32 {
        return objc.msgSend(_self, "lifetime", f32, .{});
    }

    pub fn setLifetime(_self: *@This(), _lifetime: f32) void {
        return objc.msgSend(_self, "setLifetime:", void, .{_lifetime});
    }

    pub fn lifetimeRange(_self: *@This()) f32 {
        return objc.msgSend(_self, "lifetimeRange", f32, .{});
    }

    pub fn setLifetimeRange(_self: *@This(), _lifetimeRange: f32) void {
        return objc.msgSend(_self, "setLifetimeRange:", void, .{_lifetimeRange});
    }

    pub fn emissionLatitude(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "emissionLatitude", core_foundation.CGFloat, .{});
    }

    pub fn setEmissionLatitude(_self: *@This(), _emissionLatitude: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setEmissionLatitude:", void, .{_emissionLatitude});
    }

    pub fn emissionLongitude(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "emissionLongitude", core_foundation.CGFloat, .{});
    }

    pub fn setEmissionLongitude(_self: *@This(), _emissionLongitude: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setEmissionLongitude:", void, .{_emissionLongitude});
    }

    pub fn emissionRange(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "emissionRange", core_foundation.CGFloat, .{});
    }

    pub fn setEmissionRange(_self: *@This(), _emissionRange: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setEmissionRange:", void, .{_emissionRange});
    }

    pub fn velocity(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "velocity", core_foundation.CGFloat, .{});
    }

    pub fn setVelocity(_self: *@This(), _velocity: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setVelocity:", void, .{_velocity});
    }

    pub fn velocityRange(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "velocityRange", core_foundation.CGFloat, .{});
    }

    pub fn setVelocityRange(_self: *@This(), _velocityRange: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setVelocityRange:", void, .{_velocityRange});
    }

    pub fn xAcceleration(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "xAcceleration", core_foundation.CGFloat, .{});
    }

    pub fn setXAcceleration(_self: *@This(), _xAcceleration: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setXAcceleration:", void, .{_xAcceleration});
    }

    pub fn yAcceleration(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "yAcceleration", core_foundation.CGFloat, .{});
    }

    pub fn setYAcceleration(_self: *@This(), _yAcceleration: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setYAcceleration:", void, .{_yAcceleration});
    }

    pub fn zAcceleration(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "zAcceleration", core_foundation.CGFloat, .{});
    }

    pub fn setZAcceleration(_self: *@This(), _zAcceleration: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setZAcceleration:", void, .{_zAcceleration});
    }

    pub fn scale(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "scale", core_foundation.CGFloat, .{});
    }

    pub fn setScale(_self: *@This(), _scale: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setScale:", void, .{_scale});
    }

    pub fn scaleRange(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "scaleRange", core_foundation.CGFloat, .{});
    }

    pub fn setScaleRange(_self: *@This(), _scaleRange: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setScaleRange:", void, .{_scaleRange});
    }

    pub fn scaleSpeed(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "scaleSpeed", core_foundation.CGFloat, .{});
    }

    pub fn setScaleSpeed(_self: *@This(), _scaleSpeed: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setScaleSpeed:", void, .{_scaleSpeed});
    }

    pub fn spin(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "spin", core_foundation.CGFloat, .{});
    }

    pub fn setSpin(_self: *@This(), _spin: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setSpin:", void, .{_spin});
    }

    pub fn spinRange(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "spinRange", core_foundation.CGFloat, .{});
    }

    pub fn setSpinRange(_self: *@This(), _spinRange: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setSpinRange:", void, .{_spinRange});
    }

    pub fn color(_self: *@This()) core_graphics.ColorRef {
        return objc.msgSend(_self, "color", core_graphics.ColorRef, .{});
    }

    pub fn setColor(_self: *@This(), _color: core_graphics.ColorRef) void {
        return objc.msgSend(_self, "setColor:", void, .{_color});
    }

    pub fn redRange(_self: *@This()) f32 {
        return objc.msgSend(_self, "redRange", f32, .{});
    }

    pub fn setRedRange(_self: *@This(), _redRange: f32) void {
        return objc.msgSend(_self, "setRedRange:", void, .{_redRange});
    }

    pub fn greenRange(_self: *@This()) f32 {
        return objc.msgSend(_self, "greenRange", f32, .{});
    }

    pub fn setGreenRange(_self: *@This(), _greenRange: f32) void {
        return objc.msgSend(_self, "setGreenRange:", void, .{_greenRange});
    }

    pub fn blueRange(_self: *@This()) f32 {
        return objc.msgSend(_self, "blueRange", f32, .{});
    }

    pub fn setBlueRange(_self: *@This(), _blueRange: f32) void {
        return objc.msgSend(_self, "setBlueRange:", void, .{_blueRange});
    }

    pub fn alphaRange(_self: *@This()) f32 {
        return objc.msgSend(_self, "alphaRange", f32, .{});
    }

    pub fn setAlphaRange(_self: *@This(), _alphaRange: f32) void {
        return objc.msgSend(_self, "setAlphaRange:", void, .{_alphaRange});
    }

    pub fn redSpeed(_self: *@This()) f32 {
        return objc.msgSend(_self, "redSpeed", f32, .{});
    }

    pub fn setRedSpeed(_self: *@This(), _redSpeed: f32) void {
        return objc.msgSend(_self, "setRedSpeed:", void, .{_redSpeed});
    }

    pub fn greenSpeed(_self: *@This()) f32 {
        return objc.msgSend(_self, "greenSpeed", f32, .{});
    }

    pub fn setGreenSpeed(_self: *@This(), _greenSpeed: f32) void {
        return objc.msgSend(_self, "setGreenSpeed:", void, .{_greenSpeed});
    }

    pub fn blueSpeed(_self: *@This()) f32 {
        return objc.msgSend(_self, "blueSpeed", f32, .{});
    }

    pub fn setBlueSpeed(_self: *@This(), _blueSpeed: f32) void {
        return objc.msgSend(_self, "setBlueSpeed:", void, .{_blueSpeed});
    }

    pub fn alphaSpeed(_self: *@This()) f32 {
        return objc.msgSend(_self, "alphaSpeed", f32, .{});
    }

    pub fn setAlphaSpeed(_self: *@This(), _alphaSpeed: f32) void {
        return objc.msgSend(_self, "setAlphaSpeed:", void, .{_alphaSpeed});
    }

    pub fn contents(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "contents", ?objc.Id, .{});
    }

    pub fn setContents(_self: *@This(), _contents: ?objc.Id) void {
        return objc.msgSend(_self, "setContents:", void, .{_contents});
    }

    pub fn contentsRect(_self: *@This()) core_foundation.CGRect {
        return objc.msgSend(_self, "contentsRect", core_foundation.CGRect, .{});
    }

    pub fn setContentsRect(_self: *@This(), _contentsRect: core_foundation.CGRect) void {
        return objc.msgSend(_self, "setContentsRect:", void, .{_contentsRect});
    }

    pub fn contentsScale(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "contentsScale", core_foundation.CGFloat, .{});
    }

    pub fn setContentsScale(_self: *@This(), _contentsScale: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setContentsScale:", void, .{_contentsScale});
    }

    pub fn minificationFilter(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "minificationFilter", ?*foundation.String, .{});
    }

    pub fn setMinificationFilter(_self: *@This(), _minificationFilter: ?*foundation.String) void {
        return objc.msgSend(_self, "setMinificationFilter:", void, .{_minificationFilter});
    }

    pub fn magnificationFilter(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "magnificationFilter", ?*foundation.String, .{});
    }

    pub fn setMagnificationFilter(_self: *@This(), _magnificationFilter: ?*foundation.String) void {
        return objc.msgSend(_self, "setMagnificationFilter:", void, .{_magnificationFilter});
    }

    pub fn minificationFilterBias(_self: *@This()) f32 {
        return objc.msgSend(_self, "minificationFilterBias", f32, .{});
    }

    pub fn setMinificationFilterBias(_self: *@This(), _minificationFilterBias: f32) void {
        return objc.msgSend(_self, "setMinificationFilterBias:", void, .{_minificationFilterBias});
    }

    pub fn emitterCells(_self: *@This()) ?*foundation.Array(?*EmitterCell) {
        return objc.msgSend(_self, "emitterCells", ?*foundation.Array(?*EmitterCell), .{});
    }

    pub fn setEmitterCells(_self: *@This(), _emitterCells: ?*foundation.Array(?*EmitterCell)) void {
        return objc.msgSend(_self, "setEmitterCells:", void, .{_emitterCells});
    }

    pub fn style(_self: *@This()) ?*foundation.Dictionary {
        return objc.msgSend(_self, "style", ?*foundation.Dictionary, .{});
    }

    pub fn setStyle(_self: *@This(), _style: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "setStyle:", void, .{_style});
    }
};

pub const EmitterLayerEmitterShape = ?*foundation.String;

pub const EmitterLayerEmitterMode = ?*foundation.String;

pub const EmitterLayerRenderMode = ?*foundation.String;

/// https://developer.apple.com/documentation/QuartzCore/CAEmitterLayer?language=objc
pub const EmitterLayer = opaque {
    pub const Internal = objc.ExternClass("CAEmitterLayer", @This(), Layer, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn emitterCells(_self: *@This()) ?*foundation.Array(?*EmitterCell) {
        return objc.msgSend(_self, "emitterCells", ?*foundation.Array(?*EmitterCell), .{});
    }

    pub fn setEmitterCells(_self: *@This(), _emitterCells: ?*foundation.Array(?*EmitterCell)) void {
        return objc.msgSend(_self, "setEmitterCells:", void, .{_emitterCells});
    }

    pub fn birthRate(_self: *@This()) f32 {
        return objc.msgSend(_self, "birthRate", f32, .{});
    }

    pub fn setBirthRate(_self: *@This(), _birthRate: f32) void {
        return objc.msgSend(_self, "setBirthRate:", void, .{_birthRate});
    }

    pub fn lifetime(_self: *@This()) f32 {
        return objc.msgSend(_self, "lifetime", f32, .{});
    }

    pub fn setLifetime(_self: *@This(), _lifetime: f32) void {
        return objc.msgSend(_self, "setLifetime:", void, .{_lifetime});
    }

    pub fn emitterPosition(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "emitterPosition", core_foundation.CGPoint, .{});
    }

    pub fn setEmitterPosition(_self: *@This(), _emitterPosition: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "setEmitterPosition:", void, .{_emitterPosition});
    }

    pub fn emitterZPosition(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "emitterZPosition", core_foundation.CGFloat, .{});
    }

    pub fn setEmitterZPosition(_self: *@This(), _emitterZPosition: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setEmitterZPosition:", void, .{_emitterZPosition});
    }

    pub fn emitterSize(_self: *@This()) core_foundation.CGSize {
        return objc.msgSend(_self, "emitterSize", core_foundation.CGSize, .{});
    }

    pub fn setEmitterSize(_self: *@This(), _emitterSize: core_foundation.CGSize) void {
        return objc.msgSend(_self, "setEmitterSize:", void, .{_emitterSize});
    }

    pub fn emitterDepth(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "emitterDepth", core_foundation.CGFloat, .{});
    }

    pub fn setEmitterDepth(_self: *@This(), _emitterDepth: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setEmitterDepth:", void, .{_emitterDepth});
    }

    pub fn emitterShape(_self: *@This()) EmitterLayerEmitterShape {
        return objc.msgSend(_self, "emitterShape", EmitterLayerEmitterShape, .{});
    }

    pub fn setEmitterShape(_self: *@This(), _emitterShape: EmitterLayerEmitterShape) void {
        return objc.msgSend(_self, "setEmitterShape:", void, .{_emitterShape});
    }

    pub fn emitterMode(_self: *@This()) EmitterLayerEmitterMode {
        return objc.msgSend(_self, "emitterMode", EmitterLayerEmitterMode, .{});
    }

    pub fn setEmitterMode(_self: *@This(), _emitterMode: EmitterLayerEmitterMode) void {
        return objc.msgSend(_self, "setEmitterMode:", void, .{_emitterMode});
    }

    pub fn renderMode(_self: *@This()) EmitterLayerRenderMode {
        return objc.msgSend(_self, "renderMode", EmitterLayerRenderMode, .{});
    }

    pub fn setRenderMode(_self: *@This(), _renderMode: EmitterLayerRenderMode) void {
        return objc.msgSend(_self, "setRenderMode:", void, .{_renderMode});
    }

    pub fn preservesDepth(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "preservesDepth", objc.BOOL, .{});
    }

    pub fn setPreservesDepth(_self: *@This(), _preservesDepth: objc.BOOL) void {
        return objc.msgSend(_self, "setPreservesDepth:", void, .{_preservesDepth});
    }

    pub fn velocity(_self: *@This()) f32 {
        return objc.msgSend(_self, "velocity", f32, .{});
    }

    pub fn setVelocity(_self: *@This(), _velocity: f32) void {
        return objc.msgSend(_self, "setVelocity:", void, .{_velocity});
    }

    pub fn scale(_self: *@This()) f32 {
        return objc.msgSend(_self, "scale", f32, .{});
    }

    pub fn setScale(_self: *@This(), _scale: f32) void {
        return objc.msgSend(_self, "setScale:", void, .{_scale});
    }

    pub fn spin(_self: *@This()) f32 {
        return objc.msgSend(_self, "spin", f32, .{});
    }

    pub fn setSpin(_self: *@This(), _spin: f32) void {
        return objc.msgSend(_self, "setSpin:", void, .{_spin});
    }

    pub fn seed(_self: *@This()) u32 {
        return objc.msgSend(_self, "seed", u32, .{});
    }

    pub fn setSeed(_self: *@This(), _seed: u32) void {
        return objc.msgSend(_self, "setSeed:", void, .{_seed});
    }
};

pub const MediaTimingFunctionName = ?*foundation.String;

/// https://developer.apple.com/documentation/QuartzCore/CAMediaTimingFunction?language=objc
pub const MediaTimingFunction = opaque {
    pub const Private = extern struct {};

    pub const Internal = objc.ExternClass("CAMediaTimingFunction", @This(), objc.NSObject, &.{foundation.SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn functionWithName(_name: MediaTimingFunctionName) *@This() {
        return objc.msgSend(Internal.class(), "functionWithName:", *@This(), .{_name});
    }

    pub fn functionWithControlPoints(
        _c1x: f32,
        _c1y: f32,
        _c2x: f32,
        _c2y: f32,
    ) *@This() {
        return objc.msgSend(Internal.class(), "functionWithControlPoints::::", *@This(), .{
            _c1x,
            _c1y,
            _c2x,
            _c2y,
        });
    }

    pub fn initWithControlPoints(
        _self: *@This(),
        _c1x: f32,
        _c1y: f32,
        _c2x: f32,
        _c2y: f32,
    ) *@This() {
        return objc.msgSend(_self, "initWithControlPoints::::", *@This(), .{
            _c1x,
            _c1y,
            _c2x,
            _c2y,
        });
    }

    pub fn getControlPointAtIndexValues(_self: *@This(), _idx: objc.size_t, _ptr: ?*f32) void {
        return objc.msgSend(_self, "getControlPointAtIndex:values:", void, .{ _idx, _ptr });
    }
};

pub const GradientLayerType = ?*foundation.String;

/// https://developer.apple.com/documentation/QuartzCore/CAGradientLayer?language=objc
pub const GradientLayer = opaque {
    pub const Internal = objc.ExternClass("CAGradientLayer", @This(), Layer, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn colors(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "colors", ?*foundation.Array, .{});
    }

    pub fn setColors(_self: *@This(), _colors: ?*foundation.Array) void {
        return objc.msgSend(_self, "setColors:", void, .{_colors});
    }

    pub fn locations(_self: *@This()) ?*foundation.Array(?*foundation.Number) {
        return objc.msgSend(_self, "locations", ?*foundation.Array(?*foundation.Number), .{});
    }

    pub fn setLocations(_self: *@This(), _locations: ?*foundation.Array(?*foundation.Number)) void {
        return objc.msgSend(_self, "setLocations:", void, .{_locations});
    }

    pub fn startPoint(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "startPoint", core_foundation.CGPoint, .{});
    }

    pub fn setStartPoint(_self: *@This(), _startPoint: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "setStartPoint:", void, .{_startPoint});
    }

    pub fn endPoint(_self: *@This()) core_foundation.CGPoint {
        return objc.msgSend(_self, "endPoint", core_foundation.CGPoint, .{});
    }

    pub fn setEndPoint(_self: *@This(), _endPoint: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "setEndPoint:", void, .{_endPoint});
    }

    pub fn @"type"(_self: *@This()) GradientLayerType {
        return objc.msgSend(_self, "type", GradientLayerType, .{});
    }

    pub fn setType(_self: *@This(), _type: GradientLayerType) void {
        return objc.msgSend(_self, "setType:", void, .{_type});
    }
};

/// https://developer.apple.com/documentation/QuartzCore/CAOpenGLLayer?language=objc
pub const OpenGLLayer = opaque {
    pub const Private = extern struct {};

    pub const Internal = objc.ExternClass("CAOpenGLLayer", @This(), Layer, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn drawInCGLContextPixelFormatForLayerTimeDisplayTime(
        _self: *@This(),
        _ctx: opengl.ContextObj,
        _pf: opengl.PixelFormatObj,
        _t: core_foundation.TimeInterval,
        _ts: ?*const core_video.TimeStamp,
    ) void {
        return objc.msgSend(_self, "drawInCGLContext:pixelFormat:forLayerTime:displayTime:", void, .{
            _ctx,
            _pf,
            _t,
            _ts,
        });
    }

    pub fn copyCGLPixelFormatForDisplayMask(_self: *@This(), _mask: objc.uint32_t) opengl.PixelFormatObj {
        return objc.msgSend(_self, "copyCGLPixelFormatForDisplayMask:", opengl.PixelFormatObj, .{_mask});
    }

    pub fn releaseCGLPixelFormat(_self: *@This(), _pf: opengl.PixelFormatObj) void {
        return objc.msgSend(_self, "releaseCGLPixelFormat:", void, .{_pf});
    }

    pub fn copyCGLContextForPixelFormat(_self: *@This(), _pf: opengl.PixelFormatObj) opengl.ContextObj {
        return objc.msgSend(_self, "copyCGLContextForPixelFormat:", opengl.ContextObj, .{_pf});
    }

    pub fn releaseCGLContext(_self: *@This(), _ctx: opengl.ContextObj) void {
        return objc.msgSend(_self, "releaseCGLContext:", void, .{_ctx});
    }

    pub fn isAsynchronous(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAsynchronous", objc.BOOL, .{});
    }

    pub fn setAsynchronous(_self: *@This(), _asynchronous: objc.BOOL) void {
        return objc.msgSend(_self, "setAsynchronous:", void, .{_asynchronous});
    }

    pub fn colorspace(_self: *@This()) core_graphics.ColorSpaceRef {
        return objc.msgSend(_self, "colorspace", core_graphics.ColorSpaceRef, .{});
    }

    pub fn setColorspace(_self: *@This(), _colorspace: core_graphics.ColorSpaceRef) void {
        return objc.msgSend(_self, "setColorspace:", void, .{_colorspace});
    }

    pub fn wantsExtendedDynamicRangeContent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsExtendedDynamicRangeContent", objc.BOOL, .{});
    }

    pub fn setWantsExtendedDynamicRangeContent(_self: *@This(), _wantsExtendedDynamicRangeContent: objc.BOOL) void {
        return objc.msgSend(_self, "setWantsExtendedDynamicRangeContent:", void, .{_wantsExtendedDynamicRangeContent});
    }
};

/// https://developer.apple.com/documentation/QuartzCore/CARemoteLayerClient?language=objc
pub const RemoteLayerClient = opaque {
    pub const Internal = objc.ExternClass("CARemoteLayerClient", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithServerPort(_self: *@This(), _port: objc.mach_port_t) *@This() {
        return objc.msgSend(_self, "initWithServerPort:", *@This(), .{_port});
    }

    pub fn invalidate(_self: *@This()) void {
        return objc.msgSend(_self, "invalidate", void, .{});
    }

    pub fn clientId(_self: *@This()) objc.uint32_t {
        return objc.msgSend(_self, "clientId", objc.uint32_t, .{});
    }

    pub fn layer(_self: *@This()) ?*Layer {
        return objc.msgSend(_self, "layer", ?*Layer, .{});
    }

    pub fn setLayer(_self: *@This(), _layer: ?*Layer) void {
        return objc.msgSend(_self, "setLayer:", void, .{_layer});
    }
};

/// https://developer.apple.com/documentation/QuartzCore/CARemoteLayerServer?language=objc
pub const RemoteLayerServer = opaque {
    pub const Internal = objc.ExternClass("CARemoteLayerServer", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn sharedServer() ?*RemoteLayerServer {
        return objc.msgSend(Internal.class(), "sharedServer", ?*RemoteLayerServer, .{});
    }

    pub fn serverPort(_self: *@This()) objc.mach_port_t {
        return objc.msgSend(_self, "serverPort", objc.mach_port_t, .{});
    }
};

/// https://developer.apple.com/documentation/QuartzCore/CARenderer?language=objc
pub const Renderer = opaque {
    pub const Priv = extern struct {};

    pub const Internal = objc.ExternClass("CARenderer", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn rendererWithCGLContextOptions(_ctx: ?*anyopaque, _dict: ?*foundation.Dictionary) ?*Renderer {
        return objc.msgSend(Internal.class(), "rendererWithCGLContext:options:", ?*Renderer, .{ _ctx, _dict });
    }

    pub fn rendererWithMTLTextureOptions(_tex: ?*objc.id, _dict: ?*foundation.Dictionary) ?*Renderer {
        return objc.msgSend(Internal.class(), "rendererWithMTLTexture:options:", ?*Renderer, .{ _tex, _dict });
    }

    pub fn beginFrameAtTimeTimeStamp(_self: *@This(), _t: core_foundation.TimeInterval, _ts: ?*core_video.TimeStamp) void {
        return objc.msgSend(_self, "beginFrameAtTime:timeStamp:", void, .{ _t, _ts });
    }

    pub fn updateBounds(_self: *@This()) core_foundation.CGRect {
        return objc.msgSend(_self, "updateBounds", core_foundation.CGRect, .{});
    }

    pub fn addUpdateRect(_self: *@This(), _r: core_foundation.CGRect) void {
        return objc.msgSend(_self, "addUpdateRect:", void, .{_r});
    }

    pub fn render(_self: *@This()) void {
        return objc.msgSend(_self, "render", void, .{});
    }

    pub fn nextFrameTime(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "nextFrameTime", core_foundation.TimeInterval, .{});
    }

    pub fn endFrame(_self: *@This()) void {
        return objc.msgSend(_self, "endFrame", void, .{});
    }

    pub fn setDestination(_self: *@This(), _tex: ?*objc.id) void {
        return objc.msgSend(_self, "setDestination:", void, .{_tex});
    }

    pub fn layer(_self: *@This()) ?*Layer {
        return objc.msgSend(_self, "layer", ?*Layer, .{});
    }

    pub fn setLayer(_self: *@This(), _layer: ?*Layer) void {
        return objc.msgSend(_self, "setLayer:", void, .{_layer});
    }

    pub fn bounds(_self: *@This()) core_foundation.CGRect {
        return objc.msgSend(_self, "bounds", core_foundation.CGRect, .{});
    }

    pub fn setBounds(_self: *@This(), _bounds: core_foundation.CGRect) void {
        return objc.msgSend(_self, "setBounds:", void, .{_bounds});
    }
};

/// https://developer.apple.com/documentation/QuartzCore/CAReplicatorLayer?language=objc
pub const ReplicatorLayer = opaque {
    pub const Internal = objc.ExternClass("CAReplicatorLayer", @This(), Layer, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn instanceCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "instanceCount", objc.NSInteger, .{});
    }

    pub fn setInstanceCount(_self: *@This(), _instanceCount: objc.NSInteger) void {
        return objc.msgSend(_self, "setInstanceCount:", void, .{_instanceCount});
    }

    pub fn preservesDepth(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "preservesDepth", objc.BOOL, .{});
    }

    pub fn setPreservesDepth(_self: *@This(), _preservesDepth: objc.BOOL) void {
        return objc.msgSend(_self, "setPreservesDepth:", void, .{_preservesDepth});
    }

    pub fn instanceDelay(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "instanceDelay", core_foundation.TimeInterval, .{});
    }

    pub fn setInstanceDelay(_self: *@This(), _instanceDelay: core_foundation.TimeInterval) void {
        return objc.msgSend(_self, "setInstanceDelay:", void, .{_instanceDelay});
    }

    pub fn instanceTransform(_self: *@This()) Transform3D {
        return objc.msgSend(_self, "instanceTransform", Transform3D, .{});
    }

    pub fn setInstanceTransform(_self: *@This(), _instanceTransform: Transform3D) void {
        return objc.msgSend(_self, "setInstanceTransform:", void, .{_instanceTransform});
    }

    pub fn instanceColor(_self: *@This()) core_graphics.ColorRef {
        return objc.msgSend(_self, "instanceColor", core_graphics.ColorRef, .{});
    }

    pub fn setInstanceColor(_self: *@This(), _instanceColor: core_graphics.ColorRef) void {
        return objc.msgSend(_self, "setInstanceColor:", void, .{_instanceColor});
    }

    pub fn instanceRedOffset(_self: *@This()) f32 {
        return objc.msgSend(_self, "instanceRedOffset", f32, .{});
    }

    pub fn setInstanceRedOffset(_self: *@This(), _instanceRedOffset: f32) void {
        return objc.msgSend(_self, "setInstanceRedOffset:", void, .{_instanceRedOffset});
    }

    pub fn instanceGreenOffset(_self: *@This()) f32 {
        return objc.msgSend(_self, "instanceGreenOffset", f32, .{});
    }

    pub fn setInstanceGreenOffset(_self: *@This(), _instanceGreenOffset: f32) void {
        return objc.msgSend(_self, "setInstanceGreenOffset:", void, .{_instanceGreenOffset});
    }

    pub fn instanceBlueOffset(_self: *@This()) f32 {
        return objc.msgSend(_self, "instanceBlueOffset", f32, .{});
    }

    pub fn setInstanceBlueOffset(_self: *@This(), _instanceBlueOffset: f32) void {
        return objc.msgSend(_self, "setInstanceBlueOffset:", void, .{_instanceBlueOffset});
    }

    pub fn instanceAlphaOffset(_self: *@This()) f32 {
        return objc.msgSend(_self, "instanceAlphaOffset", f32, .{});
    }

    pub fn setInstanceAlphaOffset(_self: *@This(), _instanceAlphaOffset: f32) void {
        return objc.msgSend(_self, "setInstanceAlphaOffset:", void, .{_instanceAlphaOffset});
    }
};

pub const ScrollLayerScrollMode = ?*foundation.String;

/// https://developer.apple.com/documentation/QuartzCore/CAScrollLayer?language=objc
pub const ScrollLayer = opaque {
    pub const Internal = objc.ExternClass("CAScrollLayer", @This(), Layer, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn scrollToPoint(_self: *@This(), _p: core_foundation.CGPoint) void {
        return objc.msgSend(_self, "scrollToPoint:", void, .{_p});
    }

    pub fn scrollToRect(_self: *@This(), _r: core_foundation.CGRect) void {
        return objc.msgSend(_self, "scrollToRect:", void, .{_r});
    }

    pub fn scrollMode(_self: *@This()) ScrollLayerScrollMode {
        return objc.msgSend(_self, "scrollMode", ScrollLayerScrollMode, .{});
    }

    pub fn setScrollMode(_self: *@This(), _scrollMode: ScrollLayerScrollMode) void {
        return objc.msgSend(_self, "setScrollMode:", void, .{_scrollMode});
    }
};

pub const ShapeLayerFillRule = ?*foundation.String;

pub const ShapeLayerLineJoin = ?*foundation.String;

pub const ShapeLayerLineCap = ?*foundation.String;

/// https://developer.apple.com/documentation/QuartzCore/CAShapeLayer?language=objc
pub const ShapeLayer = opaque {
    pub const Internal = objc.ExternClass("CAShapeLayer", @This(), Layer, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn path(_self: *@This()) core_graphics.PathRef {
        return objc.msgSend(_self, "path", core_graphics.PathRef, .{});
    }

    pub fn setPath(_self: *@This(), _path: core_graphics.PathRef) void {
        return objc.msgSend(_self, "setPath:", void, .{_path});
    }

    pub fn fillColor(_self: *@This()) core_graphics.ColorRef {
        return objc.msgSend(_self, "fillColor", core_graphics.ColorRef, .{});
    }

    pub fn setFillColor(_self: *@This(), _fillColor: core_graphics.ColorRef) void {
        return objc.msgSend(_self, "setFillColor:", void, .{_fillColor});
    }

    pub fn fillRule(_self: *@This()) ShapeLayerFillRule {
        return objc.msgSend(_self, "fillRule", ShapeLayerFillRule, .{});
    }

    pub fn setFillRule(_self: *@This(), _fillRule: ShapeLayerFillRule) void {
        return objc.msgSend(_self, "setFillRule:", void, .{_fillRule});
    }

    pub fn strokeColor(_self: *@This()) core_graphics.ColorRef {
        return objc.msgSend(_self, "strokeColor", core_graphics.ColorRef, .{});
    }

    pub fn setStrokeColor(_self: *@This(), _strokeColor: core_graphics.ColorRef) void {
        return objc.msgSend(_self, "setStrokeColor:", void, .{_strokeColor});
    }

    pub fn strokeStart(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "strokeStart", core_foundation.CGFloat, .{});
    }

    pub fn setStrokeStart(_self: *@This(), _strokeStart: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setStrokeStart:", void, .{_strokeStart});
    }

    pub fn strokeEnd(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "strokeEnd", core_foundation.CGFloat, .{});
    }

    pub fn setStrokeEnd(_self: *@This(), _strokeEnd: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setStrokeEnd:", void, .{_strokeEnd});
    }

    pub fn lineWidth(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "lineWidth", core_foundation.CGFloat, .{});
    }

    pub fn setLineWidth(_self: *@This(), _lineWidth: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setLineWidth:", void, .{_lineWidth});
    }

    pub fn miterLimit(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "miterLimit", core_foundation.CGFloat, .{});
    }

    pub fn setMiterLimit(_self: *@This(), _miterLimit: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setMiterLimit:", void, .{_miterLimit});
    }

    pub fn lineCap(_self: *@This()) ShapeLayerLineCap {
        return objc.msgSend(_self, "lineCap", ShapeLayerLineCap, .{});
    }

    pub fn setLineCap(_self: *@This(), _lineCap: ShapeLayerLineCap) void {
        return objc.msgSend(_self, "setLineCap:", void, .{_lineCap});
    }

    pub fn lineJoin(_self: *@This()) ShapeLayerLineJoin {
        return objc.msgSend(_self, "lineJoin", ShapeLayerLineJoin, .{});
    }

    pub fn setLineJoin(_self: *@This(), _lineJoin: ShapeLayerLineJoin) void {
        return objc.msgSend(_self, "setLineJoin:", void, .{_lineJoin});
    }

    pub fn lineDashPhase(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "lineDashPhase", core_foundation.CGFloat, .{});
    }

    pub fn setLineDashPhase(_self: *@This(), _lineDashPhase: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setLineDashPhase:", void, .{_lineDashPhase});
    }

    pub fn lineDashPattern(_self: *@This()) ?*foundation.Array(?*foundation.Number) {
        return objc.msgSend(_self, "lineDashPattern", ?*foundation.Array(?*foundation.Number), .{});
    }

    pub fn setLineDashPattern(_self: *@This(), _lineDashPattern: ?*foundation.Array(?*foundation.Number)) void {
        return objc.msgSend(_self, "setLineDashPattern:", void, .{_lineDashPattern});
    }
};

pub const TextLayerTruncationMode = ?*foundation.String;

pub const TextLayerAlignmentMode = ?*foundation.String;

/// https://developer.apple.com/documentation/QuartzCore/CATextLayer?language=objc
pub const TextLayer = opaque {
    pub const Private = extern struct {};

    pub const Internal = objc.ExternClass("CATextLayer", @This(), Layer, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn string(_self: *@This()) ?objc.Id {
        return objc.msgSend(_self, "string", ?objc.Id, .{});
    }

    pub fn setString(_self: *@This(), _string: ?objc.Id) void {
        return objc.msgSend(_self, "setString:", void, .{_string});
    }

    pub fn font(_self: *@This()) core_foundation.TypeRef {
        return objc.msgSend(_self, "font", core_foundation.TypeRef, .{});
    }

    pub fn setFont(_self: *@This(), _font: core_foundation.TypeRef) void {
        return objc.msgSend(_self, "setFont:", void, .{_font});
    }

    pub fn fontSize(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "fontSize", core_foundation.CGFloat, .{});
    }

    pub fn setFontSize(_self: *@This(), _fontSize: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setFontSize:", void, .{_fontSize});
    }

    pub fn foregroundColor(_self: *@This()) core_graphics.ColorRef {
        return objc.msgSend(_self, "foregroundColor", core_graphics.ColorRef, .{});
    }

    pub fn setForegroundColor(_self: *@This(), _foregroundColor: core_graphics.ColorRef) void {
        return objc.msgSend(_self, "setForegroundColor:", void, .{_foregroundColor});
    }

    pub fn isWrapped(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isWrapped", objc.BOOL, .{});
    }

    pub fn setWrapped(_self: *@This(), _wrapped: objc.BOOL) void {
        return objc.msgSend(_self, "setWrapped:", void, .{_wrapped});
    }

    pub fn truncationMode(_self: *@This()) TextLayerTruncationMode {
        return objc.msgSend(_self, "truncationMode", TextLayerTruncationMode, .{});
    }

    pub fn setTruncationMode(_self: *@This(), _truncationMode: TextLayerTruncationMode) void {
        return objc.msgSend(_self, "setTruncationMode:", void, .{_truncationMode});
    }

    pub fn alignmentMode(_self: *@This()) TextLayerAlignmentMode {
        return objc.msgSend(_self, "alignmentMode", TextLayerAlignmentMode, .{});
    }

    pub fn setAlignmentMode(_self: *@This(), _alignmentMode: TextLayerAlignmentMode) void {
        return objc.msgSend(_self, "setAlignmentMode:", void, .{_alignmentMode});
    }

    pub fn allowsFontSubpixelQuantization(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsFontSubpixelQuantization", objc.BOOL, .{});
    }

    pub fn setAllowsFontSubpixelQuantization(_self: *@This(), _allowsFontSubpixelQuantization: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowsFontSubpixelQuantization:", void, .{_allowsFontSubpixelQuantization});
    }
};

/// https://developer.apple.com/documentation/QuartzCore/CATiledLayer?language=objc
pub const TiledLayer = opaque {
    pub const Internal = objc.ExternClass("CATiledLayer", @This(), Layer, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn fadeDuration() core_foundation.TimeInterval {
        return objc.msgSend(Internal.class(), "fadeDuration", core_foundation.TimeInterval, .{});
    }

    pub fn levelsOfDetail(_self: *@This()) objc.size_t {
        return objc.msgSend(_self, "levelsOfDetail", objc.size_t, .{});
    }

    pub fn setLevelsOfDetail(_self: *@This(), _levelsOfDetail: objc.size_t) void {
        return objc.msgSend(_self, "setLevelsOfDetail:", void, .{_levelsOfDetail});
    }

    pub fn levelsOfDetailBias(_self: *@This()) objc.size_t {
        return objc.msgSend(_self, "levelsOfDetailBias", objc.size_t, .{});
    }

    pub fn setLevelsOfDetailBias(_self: *@This(), _levelsOfDetailBias: objc.size_t) void {
        return objc.msgSend(_self, "setLevelsOfDetailBias:", void, .{_levelsOfDetailBias});
    }

    pub fn tileSize(_self: *@This()) core_foundation.CGSize {
        return objc.msgSend(_self, "tileSize", core_foundation.CGSize, .{});
    }

    pub fn setTileSize(_self: *@This(), _tileSize: core_foundation.CGSize) void {
        return objc.msgSend(_self, "setTileSize:", void, .{_tileSize});
    }
};

/// https://developer.apple.com/documentation/QuartzCore/CATransaction?language=objc
pub const Transaction = opaque {
    pub const Internal = objc.ExternClass("CATransaction", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn begin() void {
        return objc.msgSend(Internal.class(), "begin", void, .{});
    }

    pub fn commit() void {
        return objc.msgSend(Internal.class(), "commit", void, .{});
    }

    pub fn flush() void {
        return objc.msgSend(Internal.class(), "flush", void, .{});
    }

    pub fn lock() void {
        return objc.msgSend(Internal.class(), "lock", void, .{});
    }

    pub fn unlock() void {
        return objc.msgSend(Internal.class(), "unlock", void, .{});
    }

    pub fn animationDuration() core_foundation.TimeInterval {
        return objc.msgSend(Internal.class(), "animationDuration", core_foundation.TimeInterval, .{});
    }

    pub fn setAnimationDuration(_dur: core_foundation.TimeInterval) void {
        return objc.msgSend(Internal.class(), "setAnimationDuration:", void, .{_dur});
    }

    pub fn animationTimingFunction() ?*MediaTimingFunction {
        return objc.msgSend(Internal.class(), "animationTimingFunction", ?*MediaTimingFunction, .{});
    }

    pub fn setAnimationTimingFunction(_function: ?*MediaTimingFunction) void {
        return objc.msgSend(Internal.class(), "setAnimationTimingFunction:", void, .{_function});
    }

    pub fn setDisableActions(_flag: objc.BOOL) void {
        return objc.msgSend(Internal.class(), "setDisableActions:", void, .{_flag});
    }

    pub fn completionBlock() *const fn () callconv(.C) void {
        return objc.msgSend(Internal.class(), "completionBlock", *const fn () callconv(.C) void, .{});
    }

    pub fn setCompletionBlock(_block: *const fn () callconv(.C) void) void {
        return objc.msgSend(Internal.class(), "setCompletionBlock:", void, .{_block});
    }

    pub fn valueForKey(_key: ?*foundation.String) ?objc.Id {
        return objc.msgSend(Internal.class(), "valueForKey:", ?objc.Id, .{_key});
    }

    pub fn setValueForKey(_anObject: ?objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(Internal.class(), "setValue:forKey:", void, .{ _anObject, _key });
    }
};

/// https://developer.apple.com/documentation/QuartzCore/CATransformLayer?language=objc
pub const TransformLayer = opaque {
    pub const Internal = objc.ExternClass("CATransformLayer", @This(), Layer, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;
};

pub const ValueFunctionName = ?*foundation.String;

/// https://developer.apple.com/documentation/QuartzCore/CAValueFunction?language=objc
pub const ValueFunction = opaque {
    pub const Internal = objc.ExternClass("CAValueFunction", @This(), objc.NSObject, &.{foundation.SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn functionWithName(_name: ValueFunctionName) *@This() {
        return objc.msgSend(Internal.class(), "functionWithName:", *@This(), .{_name});
    }

    pub fn name(_self: *@This()) ValueFunctionName {
        return objc.msgSend(_self, "name", ValueFunctionName, .{});
    }
};
