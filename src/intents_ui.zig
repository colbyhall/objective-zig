// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const foundation = @import("foundation.zig"); // Framework dependency Foundation.
const app_kit = @import("app_kit.zig"); // Framework dependency AppKit.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const quartz_core = @import("quartz_core.zig"); // Framework dependency QuartzCore.
const core_image = @import("core_image.zig"); // Framework dependency CoreImage.
const intents = @import("intents.zig"); // Framework dependency Intents.
const core_data = @import("core_data.zig"); // Framework dependency CoreData.

pub const AddVoiceShortcutButtonStyle = objc.NSUInteger;
pub const AddVoiceShortcutButtonStyle_White: objc.NSUInteger = 0;
pub const AddVoiceShortcutButtonStyle_WhiteOutline: objc.NSUInteger = 1;
pub const AddVoiceShortcutButtonStyle_Black: objc.NSUInteger = 2;
pub const AddVoiceShortcutButtonStyle_BlackOutline: objc.NSUInteger = 3;
pub const AddVoiceShortcutButtonStyle_Automatic: objc.NSUInteger = 4;
pub const AddVoiceShortcutButtonStyle_AutomaticOutline: objc.NSUInteger = 5;

/// https://developer.apple.com/documentation/IntentsUI/INUIAddVoiceShortcutButtonDelegate?language=objc
pub const AddVoiceShortcutButtonDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn presentAddVoiceShortcutViewControllerForAddVoiceShortcutButton(_self: *@This(), _addVoiceShortcutViewController: ?*AddVoiceShortcutViewController, _addVoiceShortcutButton: ?*AddVoiceShortcutButton) void {
        return objc.msgSend(_self, "presentAddVoiceShortcutViewController:forAddVoiceShortcutButton:", void, .{ _addVoiceShortcutViewController, _addVoiceShortcutButton });
    }

    pub fn presentEditVoiceShortcutViewControllerForAddVoiceShortcutButton(_self: *@This(), _editVoiceShortcutViewController: ?*EditVoiceShortcutViewController, _addVoiceShortcutButton: ?*AddVoiceShortcutButton) void {
        return objc.msgSend(_self, "presentEditVoiceShortcutViewController:forAddVoiceShortcutButton:", void, .{ _editVoiceShortcutViewController, _addVoiceShortcutButton });
    }
};

/// https://developer.apple.com/documentation/IntentsUI/INUIAddVoiceShortcutButton?language=objc
pub const AddVoiceShortcutButton = opaque {
    pub const Internal = objc.ExternClass("INUIAddVoiceShortcutButton", @This(), app_kit.Button, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithStyle(_self: *@This(), _style: AddVoiceShortcutButtonStyle) *@This() {
        return objc.msgSend(_self, "initWithStyle:", *@This(), .{_style});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn initWithFrame(_self: *@This(), _frame: core_foundation.CGRect) *@This() {
        return objc.msgSend(_self, "initWithFrame:", *@This(), .{_frame});
    }

    pub fn style(_self: *@This()) AddVoiceShortcutButtonStyle {
        return objc.msgSend(_self, "style", AddVoiceShortcutButtonStyle, .{});
    }

    pub fn setStyle(_self: *@This(), _style: AddVoiceShortcutButtonStyle) void {
        return objc.msgSend(_self, "setStyle:", void, .{_style});
    }

    pub fn delegate(_self: *@This()) ?*objc.id {
        return objc.msgSend(_self, "delegate", ?*objc.id, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*objc.id) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn shortcut(_self: *@This()) ?*intents.Shortcut {
        return objc.msgSend(_self, "shortcut", ?*intents.Shortcut, .{});
    }

    pub fn setShortcut(_self: *@This(), _shortcut: ?*intents.Shortcut) void {
        return objc.msgSend(_self, "setShortcut:", void, .{_shortcut});
    }

    pub fn cornerRadius(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "cornerRadius", core_foundation.CGFloat, .{});
    }

    pub fn setCornerRadius(_self: *@This(), _cornerRadius: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setCornerRadius:", void, .{_cornerRadius});
    }
};

/// https://developer.apple.com/documentation/IntentsUI/INUIAddVoiceShortcutViewController?language=objc
pub const AddVoiceShortcutViewController = opaque {
    pub const Internal = objc.ExternClass("INUIAddVoiceShortcutViewController", @This(), app_kit.ViewController, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithShortcut(_self: *@This(), _shortcut: ?*intents.Shortcut) *@This() {
        return objc.msgSend(_self, "initWithShortcut:", *@This(), .{_shortcut});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn initWithNibNameBundle(_self: *@This(), _nibNameOrNil: ?*foundation.String, _nibBundleOrNil: ?*foundation.Bundle) *@This() {
        return objc.msgSend(_self, "initWithNibName:bundle:", *@This(), .{ _nibNameOrNil, _nibBundleOrNil });
    }

    pub fn delegate(_self: *@This()) ?*objc.id {
        return objc.msgSend(_self, "delegate", ?*objc.id, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*objc.id) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }
};

/// https://developer.apple.com/documentation/IntentsUI/INUIAddVoiceShortcutViewControllerDelegate?language=objc
pub const AddVoiceShortcutViewControllerDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn addVoiceShortcutViewControllerDidFinishWithVoiceShortcutError(_self: *@This(), _controller: ?*AddVoiceShortcutViewController, _voiceShortcut: ?*intents.VoiceShortcut, _error: ?*foundation.Error) void {
        return objc.msgSend(_self, "addVoiceShortcutViewController:didFinishWithVoiceShortcut:error:", void, .{ _controller, _voiceShortcut, _error });
    }

    pub fn addVoiceShortcutViewControllerDidCancel(_self: *@This(), _controller: ?*AddVoiceShortcutViewController) void {
        return objc.msgSend(_self, "addVoiceShortcutViewControllerDidCancel:", void, .{_controller});
    }
};

/// https://developer.apple.com/documentation/IntentsUI/INUIEditVoiceShortcutViewController?language=objc
pub const EditVoiceShortcutViewController = opaque {
    pub const Internal = objc.ExternClass("INUIEditVoiceShortcutViewController", @This(), app_kit.ViewController, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithVoiceShortcut(_self: *@This(), _voiceShortcut: ?*intents.VoiceShortcut) *@This() {
        return objc.msgSend(_self, "initWithVoiceShortcut:", *@This(), .{_voiceShortcut});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn initWithNibNameBundle(_self: *@This(), _nibNameOrNil: ?*foundation.String, _nibBundleOrNil: ?*foundation.Bundle) *@This() {
        return objc.msgSend(_self, "initWithNibName:bundle:", *@This(), .{ _nibNameOrNil, _nibBundleOrNil });
    }

    pub fn delegate(_self: *@This()) ?*objc.id {
        return objc.msgSend(_self, "delegate", ?*objc.id, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*objc.id) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }
};

/// https://developer.apple.com/documentation/IntentsUI/INUIEditVoiceShortcutViewControllerDelegate?language=objc
pub const EditVoiceShortcutViewControllerDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn editVoiceShortcutViewControllerDidUpdateVoiceShortcutError(_self: *@This(), _controller: ?*EditVoiceShortcutViewController, _voiceShortcut: ?*intents.VoiceShortcut, _error: ?*foundation.Error) void {
        return objc.msgSend(_self, "editVoiceShortcutViewController:didUpdateVoiceShortcut:error:", void, .{ _controller, _voiceShortcut, _error });
    }

    pub fn editVoiceShortcutViewControllerDidDeleteVoiceShortcutWithIdentifier(_self: *@This(), _controller: ?*EditVoiceShortcutViewController, _deletedVoiceShortcutIdentifier: ?*foundation.UUID) void {
        return objc.msgSend(_self, "editVoiceShortcutViewController:didDeleteVoiceShortcutWithIdentifier:", void, .{ _controller, _deletedVoiceShortcutIdentifier });
    }

    pub fn editVoiceShortcutViewControllerDidCancel(_self: *@This(), _controller: ?*EditVoiceShortcutViewController) void {
        return objc.msgSend(_self, "editVoiceShortcutViewControllerDidCancel:", void, .{_controller});
    }
};
