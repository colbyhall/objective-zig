// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const foundation = @import("foundation.zig"); // Framework dependency Foundation.
const app_kit = @import("app_kit.zig"); // Framework dependency AppKit.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const quartz_core = @import("quartz_core.zig"); // Framework dependency QuartzCore.
const core_image = @import("core_image.zig"); // Framework dependency CoreImage.
const intents = @import("intents.zig"); // Framework dependency Intents.

pub const AddVoiceShortcutButtonStyle = enum(objc.NSUInteger) {
    White = 0,
    WhiteOutline = 1,
    Black = 2,
    BlackOutline = 3,
    Automatic = 4,
    AutomaticOutline = 5,
};

/// https://developer.apple.com/documentation/IntentsUI/INUIAddVoiceShortcutButtonDelegate?language=objc
pub const AddVoiceShortcutButtonDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn presentAddVoiceShortcutViewControllerForAddVoiceShortcutButton(_self: *@This(), _addVoiceShortcutViewController: ?*AddVoiceShortcutViewController, _addVoiceShortcutButton: ?*AddVoiceShortcutButton) void {
        return objc.msgSend(_self, "presentAddVoiceShortcutViewController:forAddVoiceShortcutButton:", void, .{ _addVoiceShortcutViewController, _addVoiceShortcutButton });
    }

    pub fn presentEditVoiceShortcutViewControllerForAddVoiceShortcutButton(_self: *@This(), _editVoiceShortcutViewController: ?*EditVoiceShortcutViewController, _addVoiceShortcutButton: ?*AddVoiceShortcutButton) void {
        return objc.msgSend(_self, "presentEditVoiceShortcutViewController:forAddVoiceShortcutButton:", void, .{ _editVoiceShortcutViewController, _addVoiceShortcutButton });
    }
};

/// https://developer.apple.com/documentation/IntentsUI/INUIAddVoiceShortcutButton?language=objc
pub const AddVoiceShortcutButton = opaque {
    pub const InternalInfo = objc.ExternClass("INUIAddVoiceShortcutButton", @This(), app_kit.Button, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn tryToPerformWith(_self: *@This(), _action: *objc.SEL, _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "tryToPerform:with:", objc.BOOL, .{ _action, _object });
    }

    pub fn performKeyEquivalent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "performKeyEquivalent:", objc.BOOL, .{_event});
    }

    pub fn validRequestorForSendTypeReturnType(_self: *@This(), _sendType: app_kit.PasteboardType, _returnType: app_kit.PasteboardType) *objc.Id {
        return objc.msgSend(_self, "validRequestorForSendType:returnType:", *objc.Id, .{ _sendType, _returnType });
    }

    pub fn mouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseDown:", void, .{_event});
    }

    pub fn rightMouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseDown:", void, .{_event});
    }

    pub fn otherMouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseDown:", void, .{_event});
    }

    pub fn mouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseUp:", void, .{_event});
    }

    pub fn rightMouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseUp:", void, .{_event});
    }

    pub fn otherMouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseUp:", void, .{_event});
    }

    pub fn mouseMoved(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseMoved:", void, .{_event});
    }

    pub fn mouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseDragged:", void, .{_event});
    }

    pub fn scrollWheel(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "scrollWheel:", void, .{_event});
    }

    pub fn rightMouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseDragged:", void, .{_event});
    }

    pub fn otherMouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseDragged:", void, .{_event});
    }

    pub fn mouseEntered(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseEntered:", void, .{_event});
    }

    pub fn mouseExited(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseExited:", void, .{_event});
    }

    pub fn keyDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "keyDown:", void, .{_event});
    }

    pub fn keyUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "keyUp:", void, .{_event});
    }

    pub fn flagsChanged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "flagsChanged:", void, .{_event});
    }

    pub fn tabletPoint(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "tabletPoint:", void, .{_event});
    }

    pub fn tabletProximity(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "tabletProximity:", void, .{_event});
    }

    pub fn cursorUpdate(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "cursorUpdate:", void, .{_event});
    }

    pub fn magnifyWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "magnifyWithEvent:", void, .{_event});
    }

    pub fn rotateWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rotateWithEvent:", void, .{_event});
    }

    pub fn swipeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "swipeWithEvent:", void, .{_event});
    }

    pub fn beginGestureWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "beginGestureWithEvent:", void, .{_event});
    }

    pub fn endGestureWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "endGestureWithEvent:", void, .{_event});
    }

    pub fn smartMagnifyWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "smartMagnifyWithEvent:", void, .{_event});
    }

    pub fn changeModeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "changeModeWithEvent:", void, .{_event});
    }

    pub fn touchesBeganWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesBeganWithEvent:", void, .{_event});
    }

    pub fn touchesMovedWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesMovedWithEvent:", void, .{_event});
    }

    pub fn touchesEndedWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesEndedWithEvent:", void, .{_event});
    }

    pub fn touchesCancelledWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesCancelledWithEvent:", void, .{_event});
    }

    pub fn quickLookWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "quickLookWithEvent:", void, .{_event});
    }

    pub fn pressureChangeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "pressureChangeWithEvent:", void, .{_event});
    }

    pub fn contextMenuKeyDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "contextMenuKeyDown:", void, .{_event});
    }

    pub fn noResponderFor(_self: *@This(), _eventSelector: *objc.SEL) void {
        return objc.msgSend(_self, "noResponderFor:", void, .{_eventSelector});
    }

    pub fn becomeFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "becomeFirstResponder", objc.BOOL, .{});
    }

    pub fn resignFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "resignFirstResponder", objc.BOOL, .{});
    }

    pub fn interpretKeyEvents(_self: *@This(), _eventArray: ?*anyopaque) void {
        return objc.msgSend(_self, "interpretKeyEvents:", void, .{_eventArray});
    }

    pub fn flushBufferedKeyEvents(_self: *@This()) void {
        return objc.msgSend(_self, "flushBufferedKeyEvents", void, .{});
    }

    pub fn showContextHelp(_self: *@This(), _sender: *objc.Id) void {
        return objc.msgSend(_self, "showContextHelp:", void, .{_sender});
    }

    pub fn helpRequested(_self: *@This(), _eventPtr: ?*app_kit.Event) void {
        return objc.msgSend(_self, "helpRequested:", void, .{_eventPtr});
    }

    pub fn shouldBeTreatedAsInkEvent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "shouldBeTreatedAsInkEvent:", objc.BOOL, .{_event});
    }

    pub fn wantsScrollEventsForSwipeTrackingOnAxis(_self: *@This(), _axis: app_kit.EventGestureAxis) objc.BOOL {
        return objc.msgSend(_self, "wantsScrollEventsForSwipeTrackingOnAxis:", objc.BOOL, .{_axis});
    }

    pub fn wantsForwardedScrollEventsForAxis(_self: *@This(), _axis: app_kit.EventGestureAxis) objc.BOOL {
        return objc.msgSend(_self, "wantsForwardedScrollEventsForAxis:", objc.BOOL, .{_axis});
    }

    pub fn supplementalTargetForActionSender(_self: *@This(), _action: *objc.SEL, _sender: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "supplementalTargetForAction:sender:", *objc.Id, .{ _action, _sender });
    }

    pub fn nextResponder(_self: *@This()) ?*app_kit.Responder {
        return objc.msgSend(_self, "nextResponder", ?*app_kit.Responder, .{});
    }

    pub fn setNextResponder(_self: *@This(), _nextResponder: ?*app_kit.Responder) void {
        return objc.msgSend(_self, "setNextResponder:", void, .{_nextResponder});
    }

    pub fn acceptsFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "acceptsFirstResponder", objc.BOOL, .{});
    }

    pub fn menu(_self: *@This()) ?*app_kit.Menu {
        return objc.msgSend(_self, "menu", ?*app_kit.Menu, .{});
    }

    pub fn setMenu(_self: *@This(), _menu: ?*app_kit.Menu) void {
        return objc.msgSend(_self, "setMenu:", void, .{_menu});
    }

    pub fn animator(_self: *@This()) *@This() {
        return objc.msgSend(_self, "animator", *@This(), .{});
    }

    pub fn animationForKey(_self: *@This(), _key: app_kit.AnimatablePropertyKey) *objc.Id {
        return objc.msgSend(_self, "animationForKey:", *objc.Id, .{_key});
    }

    pub fn defaultAnimationForKey(_self: *@This(), _key: app_kit.AnimatablePropertyKey) *objc.Id {
        return objc.msgSend(_self, "defaultAnimationForKey:", *objc.Id, .{_key});
    }

    pub fn animations(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "animations", ?*anyopaque, .{});
    }

    pub fn setAnimations(_self: *@This(), _animations: ?*anyopaque) void {
        return objc.msgSend(_self, "setAnimations:", void, .{_animations});
    }

    pub fn identifier(_self: *@This()) app_kit.UserInterfaceItemIdentifier {
        return objc.msgSend(_self, "identifier", app_kit.UserInterfaceItemIdentifier, .{});
    }

    pub fn setIdentifier(_self: *@This(), _identifier: app_kit.UserInterfaceItemIdentifier) void {
        return objc.msgSend(_self, "setIdentifier:", void, .{_identifier});
    }

    pub fn draggingEntered(_self: *@This(), _sender: ?*anyopaque) app_kit.DragOperation {
        return objc.msgSend(_self, "draggingEntered:", app_kit.DragOperation, .{_sender});
    }

    pub fn draggingUpdated(_self: *@This(), _sender: ?*anyopaque) app_kit.DragOperation {
        return objc.msgSend(_self, "draggingUpdated:", app_kit.DragOperation, .{_sender});
    }

    pub fn draggingExited(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "draggingExited:", void, .{_sender});
    }

    pub fn prepareForDragOperation(_self: *@This(), _sender: ?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "prepareForDragOperation:", objc.BOOL, .{_sender});
    }

    pub fn performDragOperation(_self: *@This(), _sender: ?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "performDragOperation:", objc.BOOL, .{_sender});
    }

    pub fn concludeDragOperation(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "concludeDragOperation:", void, .{_sender});
    }

    pub fn draggingEnded(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "draggingEnded:", void, .{_sender});
    }

    pub fn wantsPeriodicDraggingUpdates(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsPeriodicDraggingUpdates", objc.BOOL, .{});
    }

    pub fn updateDraggingItemsForDrag(_self: *@This(), _sender: ?*anyopaque) void {
        return objc.msgSend(_self, "updateDraggingItemsForDrag:", void, .{_sender});
    }

    pub fn appearance(_self: *@This()) ?*app_kit.Appearance {
        return objc.msgSend(_self, "appearance", ?*app_kit.Appearance, .{});
    }

    pub fn setAppearance(_self: *@This(), _appearance: ?*app_kit.Appearance) void {
        return objc.msgSend(_self, "setAppearance:", void, .{_appearance});
    }

    pub fn effectiveAppearance(_self: *@This()) ?*app_kit.Appearance {
        return objc.msgSend(_self, "effectiveAppearance", ?*app_kit.Appearance, .{});
    }

    pub fn accessibilityFrame(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "accessibilityFrame", foundation.Rect, .{});
    }

    pub fn accessibilityParent(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityParent", *objc.Id, .{});
    }

    pub fn isAccessibilityFocused(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityFocused", objc.BOOL, .{});
    }

    pub fn accessibilityIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityIdentifier", ?*foundation.String, .{});
    }

    pub fn accessibilityLayoutPointForScreenPoint(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "accessibilityLayoutPointForScreenPoint:", foundation.Point, .{_point});
    }

    pub fn accessibilityLayoutSizeForScreenSize(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "accessibilityLayoutSizeForScreenSize:", foundation.Size, .{_size});
    }

    pub fn accessibilityScreenPointForLayoutPoint(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "accessibilityScreenPointForLayoutPoint:", foundation.Point, .{_point});
    }

    pub fn accessibilityScreenSizeForLayoutSize(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "accessibilityScreenSizeForLayoutSize:", foundation.Size, .{_size});
    }

    pub fn accessibilityCellForColumnRow(_self: *@This(), _column: objc.NSInteger, _row: objc.NSInteger) *objc.Id {
        return objc.msgSend(_self, "accessibilityCellForColumn:row:", *objc.Id, .{ _column, _row });
    }

    pub fn accessibilityAttributedStringForRange(_self: *@This(), _range: foundation.Range) ?*foundation.AttributedString {
        return objc.msgSend(_self, "accessibilityAttributedStringForRange:", ?*foundation.AttributedString, .{_range});
    }

    pub fn accessibilityRangeForLine(_self: *@This(), _line: objc.NSInteger) foundation.Range {
        return objc.msgSend(_self, "accessibilityRangeForLine:", foundation.Range, .{_line});
    }

    pub fn accessibilityStringForRange(_self: *@This(), _range: foundation.Range) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityStringForRange:", ?*foundation.String, .{_range});
    }

    pub fn accessibilityRangeForPosition(_self: *@This(), _point: foundation.Point) foundation.Range {
        return objc.msgSend(_self, "accessibilityRangeForPosition:", foundation.Range, .{_point});
    }

    pub fn accessibilityRangeForIndex(_self: *@This(), _index: objc.NSInteger) foundation.Range {
        return objc.msgSend(_self, "accessibilityRangeForIndex:", foundation.Range, .{_index});
    }

    pub fn accessibilityFrameForRange(_self: *@This(), _range: foundation.Range) foundation.Rect {
        return objc.msgSend(_self, "accessibilityFrameForRange:", foundation.Rect, .{_range});
    }

    pub fn accessibilityRTFForRange(_self: *@This(), _range: foundation.Range) ?*foundation.Data {
        return objc.msgSend(_self, "accessibilityRTFForRange:", ?*foundation.Data, .{_range});
    }

    pub fn accessibilityStyleRangeForIndex(_self: *@This(), _index: objc.NSInteger) foundation.Range {
        return objc.msgSend(_self, "accessibilityStyleRangeForIndex:", foundation.Range, .{_index});
    }

    pub fn accessibilityLineForIndex(_self: *@This(), _index: objc.NSInteger) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityLineForIndex:", objc.NSInteger, .{_index});
    }

    pub fn accessibilityPerformCancel(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformCancel", objc.BOOL, .{});
    }

    pub fn accessibilityPerformConfirm(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformConfirm", objc.BOOL, .{});
    }

    pub fn accessibilityPerformDecrement(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformDecrement", objc.BOOL, .{});
    }

    pub fn accessibilityPerformDelete(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformDelete", objc.BOOL, .{});
    }

    pub fn accessibilityPerformIncrement(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformIncrement", objc.BOOL, .{});
    }

    pub fn accessibilityPerformPick(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformPick", objc.BOOL, .{});
    }

    pub fn accessibilityPerformPress(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformPress", objc.BOOL, .{});
    }

    pub fn accessibilityPerformRaise(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformRaise", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowAlternateUI(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformShowAlternateUI", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowDefaultUI(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformShowDefaultUI", objc.BOOL, .{});
    }

    pub fn accessibilityPerformShowMenu(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "accessibilityPerformShowMenu", objc.BOOL, .{});
    }

    pub fn isAccessibilitySelectorAllowed(_self: *@This(), _selector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilitySelectorAllowed:", objc.BOOL, .{_selector});
    }

    pub fn isAccessibilityElement(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityElement", objc.BOOL, .{});
    }

    pub fn setAccessibilityElement(_self: *@This(), _accessibilityElement: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityElement:", void, .{_accessibilityElement});
    }

    pub fn setAccessibilityFrame(_self: *@This(), _accessibilityFrame: foundation.Rect) void {
        return objc.msgSend(_self, "setAccessibilityFrame:", void, .{_accessibilityFrame});
    }

    pub fn setAccessibilityFocused(_self: *@This(), _accessibilityFocused: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityFocused:", void, .{_accessibilityFocused});
    }

    pub fn accessibilityActivationPoint(_self: *@This()) foundation.Point {
        return objc.msgSend(_self, "accessibilityActivationPoint", foundation.Point, .{});
    }

    pub fn setAccessibilityActivationPoint(_self: *@This(), _accessibilityActivationPoint: foundation.Point) void {
        return objc.msgSend(_self, "setAccessibilityActivationPoint:", void, .{_accessibilityActivationPoint});
    }

    pub fn accessibilityTopLevelUIElement(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityTopLevelUIElement", *objc.Id, .{});
    }

    pub fn setAccessibilityTopLevelUIElement(_self: *@This(), _accessibilityTopLevelUIElement: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityTopLevelUIElement:", void, .{_accessibilityTopLevelUIElement});
    }

    pub fn accessibilityURL(_self: *@This()) ?*foundation.URL {
        return objc.msgSend(_self, "accessibilityURL", ?*foundation.URL, .{});
    }

    pub fn setAccessibilityURL(_self: *@This(), _accessibilityURL: ?*foundation.URL) void {
        return objc.msgSend(_self, "setAccessibilityURL:", void, .{_accessibilityURL});
    }

    pub fn accessibilityValue(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityValue", *objc.Id, .{});
    }

    pub fn setAccessibilityValue(_self: *@This(), _accessibilityValue: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityValue:", void, .{_accessibilityValue});
    }

    pub fn accessibilityValueDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityValueDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityValueDescription(_self: *@This(), _accessibilityValueDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityValueDescription:", void, .{_accessibilityValueDescription});
    }

    pub fn accessibilityVisibleChildren(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleChildren", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleChildren(_self: *@This(), _accessibilityVisibleChildren: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleChildren:", void, .{_accessibilityVisibleChildren});
    }

    pub fn accessibilitySubrole(_self: *@This()) app_kit.AccessibilitySubrole {
        return objc.msgSend(_self, "accessibilitySubrole", app_kit.AccessibilitySubrole, .{});
    }

    pub fn setAccessibilitySubrole(_self: *@This(), _accessibilitySubrole: app_kit.AccessibilitySubrole) void {
        return objc.msgSend(_self, "setAccessibilitySubrole:", void, .{_accessibilitySubrole});
    }

    pub fn accessibilityTitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityTitle", ?*foundation.String, .{});
    }

    pub fn setAccessibilityTitle(_self: *@This(), _accessibilityTitle: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityTitle:", void, .{_accessibilityTitle});
    }

    pub fn accessibilityTitleUIElement(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityTitleUIElement", *objc.Id, .{});
    }

    pub fn setAccessibilityTitleUIElement(_self: *@This(), _accessibilityTitleUIElement: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityTitleUIElement:", void, .{_accessibilityTitleUIElement});
    }

    pub fn accessibilityNextContents(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityNextContents", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityNextContents(_self: *@This(), _accessibilityNextContents: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityNextContents:", void, .{_accessibilityNextContents});
    }

    pub fn accessibilityOrientation(_self: *@This()) app_kit.AccessibilityOrientation {
        return objc.msgSend(_self, "accessibilityOrientation", app_kit.AccessibilityOrientation, .{});
    }

    pub fn setAccessibilityOrientation(_self: *@This(), _accessibilityOrientation: app_kit.AccessibilityOrientation) void {
        return objc.msgSend(_self, "setAccessibilityOrientation:", void, .{_accessibilityOrientation});
    }

    pub fn accessibilityOverflowButton(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityOverflowButton", *objc.Id, .{});
    }

    pub fn setAccessibilityOverflowButton(_self: *@This(), _accessibilityOverflowButton: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityOverflowButton:", void, .{_accessibilityOverflowButton});
    }

    pub fn setAccessibilityParent(_self: *@This(), _accessibilityParent: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityParent:", void, .{_accessibilityParent});
    }

    pub fn accessibilityPlaceholderValue(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityPlaceholderValue", ?*foundation.String, .{});
    }

    pub fn setAccessibilityPlaceholderValue(_self: *@This(), _accessibilityPlaceholderValue: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityPlaceholderValue:", void, .{_accessibilityPlaceholderValue});
    }

    pub fn accessibilityPreviousContents(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityPreviousContents", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityPreviousContents(_self: *@This(), _accessibilityPreviousContents: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityPreviousContents:", void, .{_accessibilityPreviousContents});
    }

    pub fn accessibilityRole(_self: *@This()) app_kit.AccessibilityRole {
        return objc.msgSend(_self, "accessibilityRole", app_kit.AccessibilityRole, .{});
    }

    pub fn setAccessibilityRole(_self: *@This(), _accessibilityRole: app_kit.AccessibilityRole) void {
        return objc.msgSend(_self, "setAccessibilityRole:", void, .{_accessibilityRole});
    }

    pub fn accessibilityRoleDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityRoleDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityRoleDescription(_self: *@This(), _accessibilityRoleDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityRoleDescription:", void, .{_accessibilityRoleDescription});
    }

    pub fn accessibilitySearchButton(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilitySearchButton", *objc.Id, .{});
    }

    pub fn setAccessibilitySearchButton(_self: *@This(), _accessibilitySearchButton: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilitySearchButton:", void, .{_accessibilitySearchButton});
    }

    pub fn accessibilitySearchMenu(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilitySearchMenu", *objc.Id, .{});
    }

    pub fn setAccessibilitySearchMenu(_self: *@This(), _accessibilitySearchMenu: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilitySearchMenu:", void, .{_accessibilitySearchMenu});
    }

    pub fn isAccessibilitySelected(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilitySelected", objc.BOOL, .{});
    }

    pub fn setAccessibilitySelected(_self: *@This(), _accessibilitySelected: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilitySelected:", void, .{_accessibilitySelected});
    }

    pub fn accessibilitySelectedChildren(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedChildren", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedChildren(_self: *@This(), _accessibilitySelectedChildren: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedChildren:", void, .{_accessibilitySelectedChildren});
    }

    pub fn accessibilityServesAsTitleForUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityServesAsTitleForUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityServesAsTitleForUIElements(_self: *@This(), _accessibilityServesAsTitleForUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityServesAsTitleForUIElements:", void, .{_accessibilityServesAsTitleForUIElements});
    }

    pub fn accessibilityShownMenu(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityShownMenu", *objc.Id, .{});
    }

    pub fn setAccessibilityShownMenu(_self: *@This(), _accessibilityShownMenu: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityShownMenu:", void, .{_accessibilityShownMenu});
    }

    pub fn accessibilityMinValue(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityMinValue", *objc.Id, .{});
    }

    pub fn setAccessibilityMinValue(_self: *@This(), _accessibilityMinValue: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMinValue:", void, .{_accessibilityMinValue});
    }

    pub fn accessibilityMaxValue(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityMaxValue", *objc.Id, .{});
    }

    pub fn setAccessibilityMaxValue(_self: *@This(), _accessibilityMaxValue: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMaxValue:", void, .{_accessibilityMaxValue});
    }

    pub fn accessibilityLinkedUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityLinkedUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityLinkedUIElements(_self: *@This(), _accessibilityLinkedUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityLinkedUIElements:", void, .{_accessibilityLinkedUIElements});
    }

    pub fn accessibilityWindow(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityWindow", *objc.Id, .{});
    }

    pub fn setAccessibilityWindow(_self: *@This(), _accessibilityWindow: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityWindow:", void, .{_accessibilityWindow});
    }

    pub fn setAccessibilityIdentifier(_self: *@This(), _accessibilityIdentifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityIdentifier:", void, .{_accessibilityIdentifier});
    }

    pub fn accessibilityHelp(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityHelp", ?*foundation.String, .{});
    }

    pub fn setAccessibilityHelp(_self: *@This(), _accessibilityHelp: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityHelp:", void, .{_accessibilityHelp});
    }

    pub fn accessibilityFilename(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityFilename", ?*foundation.String, .{});
    }

    pub fn setAccessibilityFilename(_self: *@This(), _accessibilityFilename: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityFilename:", void, .{_accessibilityFilename});
    }

    pub fn isAccessibilityExpanded(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityExpanded", objc.BOOL, .{});
    }

    pub fn setAccessibilityExpanded(_self: *@This(), _accessibilityExpanded: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityExpanded:", void, .{_accessibilityExpanded});
    }

    pub fn isAccessibilityEdited(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityEdited", objc.BOOL, .{});
    }

    pub fn setAccessibilityEdited(_self: *@This(), _accessibilityEdited: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityEdited:", void, .{_accessibilityEdited});
    }

    pub fn isAccessibilityEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityEnabled", objc.BOOL, .{});
    }

    pub fn setAccessibilityEnabled(_self: *@This(), _accessibilityEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityEnabled:", void, .{_accessibilityEnabled});
    }

    pub fn accessibilityChildren(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityChildren", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityChildren(_self: *@This(), _accessibilityChildren: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityChildren:", void, .{_accessibilityChildren});
    }

    pub fn accessibilityChildrenInNavigationOrder(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityChildrenInNavigationOrder", ?*anyopaque, .{});
    }

    pub fn setAccessibilityChildrenInNavigationOrder(_self: *@This(), _accessibilityChildrenInNavigationOrder: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityChildrenInNavigationOrder:", void, .{_accessibilityChildrenInNavigationOrder});
    }

    pub fn accessibilityClearButton(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityClearButton", *objc.Id, .{});
    }

    pub fn setAccessibilityClearButton(_self: *@This(), _accessibilityClearButton: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityClearButton:", void, .{_accessibilityClearButton});
    }

    pub fn accessibilityCancelButton(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityCancelButton", *objc.Id, .{});
    }

    pub fn setAccessibilityCancelButton(_self: *@This(), _accessibilityCancelButton: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityCancelButton:", void, .{_accessibilityCancelButton});
    }

    pub fn isAccessibilityProtectedContent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityProtectedContent", objc.BOOL, .{});
    }

    pub fn setAccessibilityProtectedContent(_self: *@This(), _accessibilityProtectedContent: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityProtectedContent:", void, .{_accessibilityProtectedContent});
    }

    pub fn accessibilityContents(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityContents", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityContents(_self: *@This(), _accessibilityContents: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityContents:", void, .{_accessibilityContents});
    }

    pub fn accessibilityLabel(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityLabel", ?*foundation.String, .{});
    }

    pub fn setAccessibilityLabel(_self: *@This(), _accessibilityLabel: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityLabel:", void, .{_accessibilityLabel});
    }

    pub fn isAccessibilityAlternateUIVisible(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityAlternateUIVisible", objc.BOOL, .{});
    }

    pub fn setAccessibilityAlternateUIVisible(_self: *@This(), _accessibilityAlternateUIVisible: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityAlternateUIVisible:", void, .{_accessibilityAlternateUIVisible});
    }

    pub fn accessibilitySharedFocusElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySharedFocusElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySharedFocusElements(_self: *@This(), _accessibilitySharedFocusElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySharedFocusElements:", void, .{_accessibilitySharedFocusElements});
    }

    pub fn isAccessibilityRequired(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityRequired", objc.BOOL, .{});
    }

    pub fn setAccessibilityRequired(_self: *@This(), _accessibilityRequired: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityRequired:", void, .{_accessibilityRequired});
    }

    pub fn accessibilityCustomRotors(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityCustomRotors", ?*anyopaque, .{});
    }

    pub fn setAccessibilityCustomRotors(_self: *@This(), _accessibilityCustomRotors: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityCustomRotors:", void, .{_accessibilityCustomRotors});
    }

    pub fn accessibilityUserInputLabels(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityUserInputLabels", ?*anyopaque, .{});
    }

    pub fn setAccessibilityUserInputLabels(_self: *@This(), _accessibilityUserInputLabels: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityUserInputLabels:", void, .{_accessibilityUserInputLabels});
    }

    pub fn accessibilityAttributedUserInputLabels(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityAttributedUserInputLabels", ?*anyopaque, .{});
    }

    pub fn setAccessibilityAttributedUserInputLabels(_self: *@This(), _accessibilityAttributedUserInputLabels: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityAttributedUserInputLabels:", void, .{_accessibilityAttributedUserInputLabels});
    }

    pub fn accessibilityApplicationFocusedUIElement(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityApplicationFocusedUIElement", *objc.Id, .{});
    }

    pub fn setAccessibilityApplicationFocusedUIElement(_self: *@This(), _accessibilityApplicationFocusedUIElement: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityApplicationFocusedUIElement:", void, .{_accessibilityApplicationFocusedUIElement});
    }

    pub fn accessibilityMainWindow(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityMainWindow", *objc.Id, .{});
    }

    pub fn setAccessibilityMainWindow(_self: *@This(), _accessibilityMainWindow: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMainWindow:", void, .{_accessibilityMainWindow});
    }

    pub fn isAccessibilityHidden(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityHidden", objc.BOOL, .{});
    }

    pub fn setAccessibilityHidden(_self: *@This(), _accessibilityHidden: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityHidden:", void, .{_accessibilityHidden});
    }

    pub fn isAccessibilityFrontmost(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityFrontmost", objc.BOOL, .{});
    }

    pub fn setAccessibilityFrontmost(_self: *@This(), _accessibilityFrontmost: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityFrontmost:", void, .{_accessibilityFrontmost});
    }

    pub fn accessibilityFocusedWindow(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityFocusedWindow", *objc.Id, .{});
    }

    pub fn setAccessibilityFocusedWindow(_self: *@This(), _accessibilityFocusedWindow: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityFocusedWindow:", void, .{_accessibilityFocusedWindow});
    }

    pub fn accessibilityWindows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityWindows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityWindows(_self: *@This(), _accessibilityWindows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityWindows:", void, .{_accessibilityWindows});
    }

    pub fn accessibilityExtrasMenuBar(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityExtrasMenuBar", *objc.Id, .{});
    }

    pub fn setAccessibilityExtrasMenuBar(_self: *@This(), _accessibilityExtrasMenuBar: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityExtrasMenuBar:", void, .{_accessibilityExtrasMenuBar});
    }

    pub fn accessibilityMenuBar(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityMenuBar", *objc.Id, .{});
    }

    pub fn setAccessibilityMenuBar(_self: *@This(), _accessibilityMenuBar: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMenuBar:", void, .{_accessibilityMenuBar});
    }

    pub fn accessibilityColumnTitles(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityColumnTitles", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityColumnTitles(_self: *@This(), _accessibilityColumnTitles: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityColumnTitles:", void, .{_accessibilityColumnTitles});
    }

    pub fn isAccessibilityOrderedByRow(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityOrderedByRow", objc.BOOL, .{});
    }

    pub fn setAccessibilityOrderedByRow(_self: *@This(), _accessibilityOrderedByRow: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityOrderedByRow:", void, .{_accessibilityOrderedByRow});
    }

    pub fn accessibilityHorizontalUnits(_self: *@This()) app_kit.AccessibilityUnits {
        return objc.msgSend(_self, "accessibilityHorizontalUnits", app_kit.AccessibilityUnits, .{});
    }

    pub fn setAccessibilityHorizontalUnits(_self: *@This(), _accessibilityHorizontalUnits: app_kit.AccessibilityUnits) void {
        return objc.msgSend(_self, "setAccessibilityHorizontalUnits:", void, .{_accessibilityHorizontalUnits});
    }

    pub fn accessibilityVerticalUnits(_self: *@This()) app_kit.AccessibilityUnits {
        return objc.msgSend(_self, "accessibilityVerticalUnits", app_kit.AccessibilityUnits, .{});
    }

    pub fn setAccessibilityVerticalUnits(_self: *@This(), _accessibilityVerticalUnits: app_kit.AccessibilityUnits) void {
        return objc.msgSend(_self, "setAccessibilityVerticalUnits:", void, .{_accessibilityVerticalUnits});
    }

    pub fn accessibilityHorizontalUnitDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityHorizontalUnitDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityHorizontalUnitDescription(_self: *@This(), _accessibilityHorizontalUnitDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityHorizontalUnitDescription:", void, .{_accessibilityHorizontalUnitDescription});
    }

    pub fn accessibilityVerticalUnitDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityVerticalUnitDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityVerticalUnitDescription(_self: *@This(), _accessibilityVerticalUnitDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityVerticalUnitDescription:", void, .{_accessibilityVerticalUnitDescription});
    }

    pub fn accessibilityHandles(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityHandles", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityHandles(_self: *@This(), _accessibilityHandles: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityHandles:", void, .{_accessibilityHandles});
    }

    pub fn accessibilityWarningValue(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityWarningValue", *objc.Id, .{});
    }

    pub fn setAccessibilityWarningValue(_self: *@This(), _accessibilityWarningValue: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityWarningValue:", void, .{_accessibilityWarningValue});
    }

    pub fn accessibilityCriticalValue(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityCriticalValue", *objc.Id, .{});
    }

    pub fn setAccessibilityCriticalValue(_self: *@This(), _accessibilityCriticalValue: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityCriticalValue:", void, .{_accessibilityCriticalValue});
    }

    pub fn isAccessibilityDisclosed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityDisclosed", objc.BOOL, .{});
    }

    pub fn setAccessibilityDisclosed(_self: *@This(), _accessibilityDisclosed: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityDisclosed:", void, .{_accessibilityDisclosed});
    }

    pub fn accessibilityDisclosedByRow(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityDisclosedByRow", *objc.Id, .{});
    }

    pub fn setAccessibilityDisclosedByRow(_self: *@This(), _accessibilityDisclosedByRow: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDisclosedByRow:", void, .{_accessibilityDisclosedByRow});
    }

    pub fn accessibilityDisclosedRows(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityDisclosedRows", *objc.Id, .{});
    }

    pub fn setAccessibilityDisclosedRows(_self: *@This(), _accessibilityDisclosedRows: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDisclosedRows:", void, .{_accessibilityDisclosedRows});
    }

    pub fn accessibilityDisclosureLevel(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityDisclosureLevel", objc.NSInteger, .{});
    }

    pub fn setAccessibilityDisclosureLevel(_self: *@This(), _accessibilityDisclosureLevel: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityDisclosureLevel:", void, .{_accessibilityDisclosureLevel});
    }

    pub fn accessibilityMarkerUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityMarkerUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityMarkerUIElements(_self: *@This(), _accessibilityMarkerUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityMarkerUIElements:", void, .{_accessibilityMarkerUIElements});
    }

    pub fn accessibilityMarkerValues(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityMarkerValues", *objc.Id, .{});
    }

    pub fn setAccessibilityMarkerValues(_self: *@This(), _accessibilityMarkerValues: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMarkerValues:", void, .{_accessibilityMarkerValues});
    }

    pub fn accessibilityMarkerGroupUIElement(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityMarkerGroupUIElement", *objc.Id, .{});
    }

    pub fn setAccessibilityMarkerGroupUIElement(_self: *@This(), _accessibilityMarkerGroupUIElement: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMarkerGroupUIElement:", void, .{_accessibilityMarkerGroupUIElement});
    }

    pub fn accessibilityUnits(_self: *@This()) app_kit.AccessibilityUnits {
        return objc.msgSend(_self, "accessibilityUnits", app_kit.AccessibilityUnits, .{});
    }

    pub fn setAccessibilityUnits(_self: *@This(), _accessibilityUnits: app_kit.AccessibilityUnits) void {
        return objc.msgSend(_self, "setAccessibilityUnits:", void, .{_accessibilityUnits});
    }

    pub fn accessibilityUnitDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityUnitDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityUnitDescription(_self: *@This(), _accessibilityUnitDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityUnitDescription:", void, .{_accessibilityUnitDescription});
    }

    pub fn accessibilityRulerMarkerType(_self: *@This()) app_kit.AccessibilityRulerMarkerType {
        return objc.msgSend(_self, "accessibilityRulerMarkerType", app_kit.AccessibilityRulerMarkerType, .{});
    }

    pub fn setAccessibilityRulerMarkerType(_self: *@This(), _accessibilityRulerMarkerType: app_kit.AccessibilityRulerMarkerType) void {
        return objc.msgSend(_self, "setAccessibilityRulerMarkerType:", void, .{_accessibilityRulerMarkerType});
    }

    pub fn accessibilityMarkerTypeDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityMarkerTypeDescription", ?*foundation.String, .{});
    }

    pub fn setAccessibilityMarkerTypeDescription(_self: *@This(), _accessibilityMarkerTypeDescription: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityMarkerTypeDescription:", void, .{_accessibilityMarkerTypeDescription});
    }

    pub fn accessibilityHorizontalScrollBar(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityHorizontalScrollBar", *objc.Id, .{});
    }

    pub fn setAccessibilityHorizontalScrollBar(_self: *@This(), _accessibilityHorizontalScrollBar: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityHorizontalScrollBar:", void, .{_accessibilityHorizontalScrollBar});
    }

    pub fn accessibilityVerticalScrollBar(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityVerticalScrollBar", *objc.Id, .{});
    }

    pub fn setAccessibilityVerticalScrollBar(_self: *@This(), _accessibilityVerticalScrollBar: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityVerticalScrollBar:", void, .{_accessibilityVerticalScrollBar});
    }

    pub fn accessibilityAllowedValues(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityAllowedValues", ?*anyopaque, .{});
    }

    pub fn setAccessibilityAllowedValues(_self: *@This(), _accessibilityAllowedValues: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityAllowedValues:", void, .{_accessibilityAllowedValues});
    }

    pub fn accessibilityLabelUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityLabelUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityLabelUIElements(_self: *@This(), _accessibilityLabelUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityLabelUIElements:", void, .{_accessibilityLabelUIElements});
    }

    pub fn accessibilityLabelValue(_self: *@This()) f32 {
        return objc.msgSend(_self, "accessibilityLabelValue", f32, .{});
    }

    pub fn setAccessibilityLabelValue(_self: *@This(), _accessibilityLabelValue: f32) void {
        return objc.msgSend(_self, "setAccessibilityLabelValue:", void, .{_accessibilityLabelValue});
    }

    pub fn accessibilitySplitters(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySplitters", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySplitters(_self: *@This(), _accessibilitySplitters: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySplitters:", void, .{_accessibilitySplitters});
    }

    pub fn accessibilityDecrementButton(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityDecrementButton", *objc.Id, .{});
    }

    pub fn setAccessibilityDecrementButton(_self: *@This(), _accessibilityDecrementButton: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDecrementButton:", void, .{_accessibilityDecrementButton});
    }

    pub fn accessibilityIncrementButton(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityIncrementButton", *objc.Id, .{});
    }

    pub fn setAccessibilityIncrementButton(_self: *@This(), _accessibilityIncrementButton: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityIncrementButton:", void, .{_accessibilityIncrementButton});
    }

    pub fn accessibilityTabs(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityTabs", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityTabs(_self: *@This(), _accessibilityTabs: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityTabs:", void, .{_accessibilityTabs});
    }

    pub fn accessibilityHeader(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityHeader", *objc.Id, .{});
    }

    pub fn setAccessibilityHeader(_self: *@This(), _accessibilityHeader: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityHeader:", void, .{_accessibilityHeader});
    }

    pub fn accessibilityColumnCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityColumnCount", objc.NSInteger, .{});
    }

    pub fn setAccessibilityColumnCount(_self: *@This(), _accessibilityColumnCount: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityColumnCount:", void, .{_accessibilityColumnCount});
    }

    pub fn accessibilityRowCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityRowCount", objc.NSInteger, .{});
    }

    pub fn setAccessibilityRowCount(_self: *@This(), _accessibilityRowCount: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityRowCount:", void, .{_accessibilityRowCount});
    }

    pub fn accessibilityIndex(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityIndex", objc.NSInteger, .{});
    }

    pub fn setAccessibilityIndex(_self: *@This(), _accessibilityIndex: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityIndex:", void, .{_accessibilityIndex});
    }

    pub fn accessibilityColumns(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityColumns", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityColumns(_self: *@This(), _accessibilityColumns: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityColumns:", void, .{_accessibilityColumns});
    }

    pub fn accessibilityRows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityRows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityRows(_self: *@This(), _accessibilityRows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityRows:", void, .{_accessibilityRows});
    }

    pub fn accessibilityVisibleRows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleRows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleRows(_self: *@This(), _accessibilityVisibleRows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleRows:", void, .{_accessibilityVisibleRows});
    }

    pub fn accessibilitySelectedRows(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedRows", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedRows(_self: *@This(), _accessibilitySelectedRows: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedRows:", void, .{_accessibilitySelectedRows});
    }

    pub fn accessibilityVisibleColumns(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleColumns", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleColumns(_self: *@This(), _accessibilityVisibleColumns: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleColumns:", void, .{_accessibilityVisibleColumns});
    }

    pub fn accessibilitySelectedColumns(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedColumns", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedColumns(_self: *@This(), _accessibilitySelectedColumns: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedColumns:", void, .{_accessibilitySelectedColumns});
    }

    pub fn accessibilitySortDirection(_self: *@This()) app_kit.AccessibilitySortDirection {
        return objc.msgSend(_self, "accessibilitySortDirection", app_kit.AccessibilitySortDirection, .{});
    }

    pub fn setAccessibilitySortDirection(_self: *@This(), _accessibilitySortDirection: app_kit.AccessibilitySortDirection) void {
        return objc.msgSend(_self, "setAccessibilitySortDirection:", void, .{_accessibilitySortDirection});
    }

    pub fn accessibilityRowHeaderUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityRowHeaderUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityRowHeaderUIElements(_self: *@This(), _accessibilityRowHeaderUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityRowHeaderUIElements:", void, .{_accessibilityRowHeaderUIElements});
    }

    pub fn accessibilitySelectedCells(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySelectedCells", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySelectedCells(_self: *@This(), _accessibilitySelectedCells: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySelectedCells:", void, .{_accessibilitySelectedCells});
    }

    pub fn accessibilityVisibleCells(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityVisibleCells", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityVisibleCells(_self: *@This(), _accessibilityVisibleCells: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityVisibleCells:", void, .{_accessibilityVisibleCells});
    }

    pub fn accessibilityColumnHeaderUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilityColumnHeaderUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilityColumnHeaderUIElements(_self: *@This(), _accessibilityColumnHeaderUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilityColumnHeaderUIElements:", void, .{_accessibilityColumnHeaderUIElements});
    }

    pub fn accessibilityRowIndexRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilityRowIndexRange", foundation.Range, .{});
    }

    pub fn setAccessibilityRowIndexRange(_self: *@This(), _accessibilityRowIndexRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilityRowIndexRange:", void, .{_accessibilityRowIndexRange});
    }

    pub fn accessibilityColumnIndexRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilityColumnIndexRange", foundation.Range, .{});
    }

    pub fn setAccessibilityColumnIndexRange(_self: *@This(), _accessibilityColumnIndexRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilityColumnIndexRange:", void, .{_accessibilityColumnIndexRange});
    }

    pub fn accessibilityInsertionPointLineNumber(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityInsertionPointLineNumber", objc.NSInteger, .{});
    }

    pub fn setAccessibilityInsertionPointLineNumber(_self: *@This(), _accessibilityInsertionPointLineNumber: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityInsertionPointLineNumber:", void, .{_accessibilityInsertionPointLineNumber});
    }

    pub fn accessibilitySharedCharacterRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilitySharedCharacterRange", foundation.Range, .{});
    }

    pub fn setAccessibilitySharedCharacterRange(_self: *@This(), _accessibilitySharedCharacterRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilitySharedCharacterRange:", void, .{_accessibilitySharedCharacterRange});
    }

    pub fn accessibilitySharedTextUIElements(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "accessibilitySharedTextUIElements", ?*foundation.Array, .{});
    }

    pub fn setAccessibilitySharedTextUIElements(_self: *@This(), _accessibilitySharedTextUIElements: ?*foundation.Array) void {
        return objc.msgSend(_self, "setAccessibilitySharedTextUIElements:", void, .{_accessibilitySharedTextUIElements});
    }

    pub fn accessibilityVisibleCharacterRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilityVisibleCharacterRange", foundation.Range, .{});
    }

    pub fn setAccessibilityVisibleCharacterRange(_self: *@This(), _accessibilityVisibleCharacterRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilityVisibleCharacterRange:", void, .{_accessibilityVisibleCharacterRange});
    }

    pub fn accessibilityNumberOfCharacters(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "accessibilityNumberOfCharacters", objc.NSInteger, .{});
    }

    pub fn setAccessibilityNumberOfCharacters(_self: *@This(), _accessibilityNumberOfCharacters: objc.NSInteger) void {
        return objc.msgSend(_self, "setAccessibilityNumberOfCharacters:", void, .{_accessibilityNumberOfCharacters});
    }

    pub fn accessibilitySelectedText(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilitySelectedText", ?*foundation.String, .{});
    }

    pub fn setAccessibilitySelectedText(_self: *@This(), _accessibilitySelectedText: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilitySelectedText:", void, .{_accessibilitySelectedText});
    }

    pub fn accessibilitySelectedTextRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "accessibilitySelectedTextRange", foundation.Range, .{});
    }

    pub fn setAccessibilitySelectedTextRange(_self: *@This(), _accessibilitySelectedTextRange: foundation.Range) void {
        return objc.msgSend(_self, "setAccessibilitySelectedTextRange:", void, .{_accessibilitySelectedTextRange});
    }

    pub fn accessibilitySelectedTextRanges(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilitySelectedTextRanges", ?*anyopaque, .{});
    }

    pub fn setAccessibilitySelectedTextRanges(_self: *@This(), _accessibilitySelectedTextRanges: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilitySelectedTextRanges:", void, .{_accessibilitySelectedTextRanges});
    }

    pub fn accessibilityToolbarButton(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityToolbarButton", *objc.Id, .{});
    }

    pub fn setAccessibilityToolbarButton(_self: *@This(), _accessibilityToolbarButton: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityToolbarButton:", void, .{_accessibilityToolbarButton});
    }

    pub fn isAccessibilityModal(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityModal", objc.BOOL, .{});
    }

    pub fn setAccessibilityModal(_self: *@This(), _accessibilityModal: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityModal:", void, .{_accessibilityModal});
    }

    pub fn accessibilityProxy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityProxy", *objc.Id, .{});
    }

    pub fn setAccessibilityProxy(_self: *@This(), _accessibilityProxy: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityProxy:", void, .{_accessibilityProxy});
    }

    pub fn isAccessibilityMain(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityMain", objc.BOOL, .{});
    }

    pub fn setAccessibilityMain(_self: *@This(), _accessibilityMain: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityMain:", void, .{_accessibilityMain});
    }

    pub fn accessibilityFullScreenButton(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityFullScreenButton", *objc.Id, .{});
    }

    pub fn setAccessibilityFullScreenButton(_self: *@This(), _accessibilityFullScreenButton: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityFullScreenButton:", void, .{_accessibilityFullScreenButton});
    }

    pub fn accessibilityGrowArea(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityGrowArea", *objc.Id, .{});
    }

    pub fn setAccessibilityGrowArea(_self: *@This(), _accessibilityGrowArea: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityGrowArea:", void, .{_accessibilityGrowArea});
    }

    pub fn accessibilityDocument(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "accessibilityDocument", ?*foundation.String, .{});
    }

    pub fn setAccessibilityDocument(_self: *@This(), _accessibilityDocument: ?*foundation.String) void {
        return objc.msgSend(_self, "setAccessibilityDocument:", void, .{_accessibilityDocument});
    }

    pub fn accessibilityDefaultButton(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityDefaultButton", *objc.Id, .{});
    }

    pub fn setAccessibilityDefaultButton(_self: *@This(), _accessibilityDefaultButton: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityDefaultButton:", void, .{_accessibilityDefaultButton});
    }

    pub fn accessibilityCloseButton(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityCloseButton", *objc.Id, .{});
    }

    pub fn setAccessibilityCloseButton(_self: *@This(), _accessibilityCloseButton: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityCloseButton:", void, .{_accessibilityCloseButton});
    }

    pub fn accessibilityZoomButton(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityZoomButton", *objc.Id, .{});
    }

    pub fn setAccessibilityZoomButton(_self: *@This(), _accessibilityZoomButton: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityZoomButton:", void, .{_accessibilityZoomButton});
    }

    pub fn accessibilityMinimizeButton(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "accessibilityMinimizeButton", *objc.Id, .{});
    }

    pub fn setAccessibilityMinimizeButton(_self: *@This(), _accessibilityMinimizeButton: *objc.Id) void {
        return objc.msgSend(_self, "setAccessibilityMinimizeButton:", void, .{_accessibilityMinimizeButton});
    }

    pub fn isAccessibilityMinimized(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAccessibilityMinimized", objc.BOOL, .{});
    }

    pub fn setAccessibilityMinimized(_self: *@This(), _accessibilityMinimized: objc.BOOL) void {
        return objc.msgSend(_self, "setAccessibilityMinimized:", void, .{_accessibilityMinimized});
    }

    pub fn accessibilityCustomActions(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accessibilityCustomActions", ?*anyopaque, .{});
    }

    pub fn setAccessibilityCustomActions(_self: *@This(), _accessibilityCustomActions: ?*anyopaque) void {
        return objc.msgSend(_self, "setAccessibilityCustomActions:", void, .{_accessibilityCustomActions});
    }

    pub fn initWithFrame(_self: *@This(), _frameRect: foundation.Rect) *@This() {
        return objc.msgSend(_self, "initWithFrame:", *@This(), .{_frameRect});
    }

    pub fn isDescendantOf(_self: *@This(), _view: ?*app_kit.View) objc.BOOL {
        return objc.msgSend(_self, "isDescendantOf:", objc.BOOL, .{_view});
    }

    pub fn ancestorSharedWithView(_self: *@This(), _view: ?*app_kit.View) ?*app_kit.View {
        return objc.msgSend(_self, "ancestorSharedWithView:", ?*app_kit.View, .{_view});
    }

    pub fn getRectsBeingDrawnCount(_self: *@This(), _rects: ?*?*foundation.Rect, _count: ?*objc.NSInteger) void {
        return objc.msgSend(_self, "getRectsBeingDrawn:count:", void, .{ _rects, _count });
    }

    pub fn needsToDrawRect(_self: *@This(), _rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(_self, "needsToDrawRect:", objc.BOOL, .{_rect});
    }

    pub fn viewDidHide(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidHide", void, .{});
    }

    pub fn viewDidUnhide(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidUnhide", void, .{});
    }

    pub fn addSubview(_self: *@This(), _view: ?*app_kit.View) void {
        return objc.msgSend(_self, "addSubview:", void, .{_view});
    }

    pub fn addSubviewPositionedRelativeTo(_self: *@This(), _view: ?*app_kit.View, _place: app_kit.WindowOrderingMode, _otherView: ?*app_kit.View) void {
        return objc.msgSend(_self, "addSubview:positioned:relativeTo:", void, .{ _view, _place, _otherView });
    }

    pub fn sortSubviewsUsingFunctionContext(_self: *@This(), _compare: ?*const fn (?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) foundation.ComparisonResult, _context: ?*anyopaque) void {
        return objc.msgSend(_self, "sortSubviewsUsingFunction:context:", void, .{ _compare, _context });
    }

    pub fn viewWillMoveToWindow(_self: *@This(), _newWindow: ?*app_kit.Window) void {
        return objc.msgSend(_self, "viewWillMoveToWindow:", void, .{_newWindow});
    }

    pub fn viewDidMoveToWindow(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidMoveToWindow", void, .{});
    }

    pub fn viewWillMoveToSuperview(_self: *@This(), _newSuperview: ?*app_kit.View) void {
        return objc.msgSend(_self, "viewWillMoveToSuperview:", void, .{_newSuperview});
    }

    pub fn viewDidMoveToSuperview(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidMoveToSuperview", void, .{});
    }

    pub fn didAddSubview(_self: *@This(), _subview: ?*app_kit.View) void {
        return objc.msgSend(_self, "didAddSubview:", void, .{_subview});
    }

    pub fn willRemoveSubview(_self: *@This(), _subview: ?*app_kit.View) void {
        return objc.msgSend(_self, "willRemoveSubview:", void, .{_subview});
    }

    pub fn removeFromSuperview(_self: *@This()) void {
        return objc.msgSend(_self, "removeFromSuperview", void, .{});
    }

    pub fn replaceSubviewWith(_self: *@This(), _oldView: ?*app_kit.View, _newView: ?*app_kit.View) void {
        return objc.msgSend(_self, "replaceSubview:with:", void, .{ _oldView, _newView });
    }

    pub fn removeFromSuperviewWithoutNeedingDisplay(_self: *@This()) void {
        return objc.msgSend(_self, "removeFromSuperviewWithoutNeedingDisplay", void, .{});
    }

    pub fn viewDidChangeBackingProperties(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidChangeBackingProperties", void, .{});
    }

    pub fn resizeSubviewsWithOldSize(_self: *@This(), _oldSize: foundation.Size) void {
        return objc.msgSend(_self, "resizeSubviewsWithOldSize:", void, .{_oldSize});
    }

    pub fn resizeWithOldSuperviewSize(_self: *@This(), _oldSize: foundation.Size) void {
        return objc.msgSend(_self, "resizeWithOldSuperviewSize:", void, .{_oldSize});
    }

    pub fn setFrameOrigin(_self: *@This(), _newOrigin: foundation.Point) void {
        return objc.msgSend(_self, "setFrameOrigin:", void, .{_newOrigin});
    }

    pub fn setFrameSize(_self: *@This(), _newSize: foundation.Size) void {
        return objc.msgSend(_self, "setFrameSize:", void, .{_newSize});
    }

    pub fn setBoundsOrigin(_self: *@This(), _newOrigin: foundation.Point) void {
        return objc.msgSend(_self, "setBoundsOrigin:", void, .{_newOrigin});
    }

    pub fn setBoundsSize(_self: *@This(), _newSize: foundation.Size) void {
        return objc.msgSend(_self, "setBoundsSize:", void, .{_newSize});
    }

    pub fn translateOriginToPoint(_self: *@This(), _translation: foundation.Point) void {
        return objc.msgSend(_self, "translateOriginToPoint:", void, .{_translation});
    }

    pub fn scaleUnitSquareToSize(_self: *@This(), _newUnitSize: foundation.Size) void {
        return objc.msgSend(_self, "scaleUnitSquareToSize:", void, .{_newUnitSize});
    }

    pub fn rotateByAngle(_self: *@This(), _angle: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "rotateByAngle:", void, .{_angle});
    }

    pub fn convertPointFromView(_self: *@This(), _point: foundation.Point, _view: ?*app_kit.View) foundation.Point {
        return objc.msgSend(_self, "convertPoint:fromView:", foundation.Point, .{ _point, _view });
    }

    pub fn convertPointToView(_self: *@This(), _point: foundation.Point, _view: ?*app_kit.View) foundation.Point {
        return objc.msgSend(_self, "convertPoint:toView:", foundation.Point, .{ _point, _view });
    }

    pub fn convertSizeFromView(_self: *@This(), _size: foundation.Size, _view: ?*app_kit.View) foundation.Size {
        return objc.msgSend(_self, "convertSize:fromView:", foundation.Size, .{ _size, _view });
    }

    pub fn convertSizeToView(_self: *@This(), _size: foundation.Size, _view: ?*app_kit.View) foundation.Size {
        return objc.msgSend(_self, "convertSize:toView:", foundation.Size, .{ _size, _view });
    }

    pub fn convertRectFromView(_self: *@This(), _rect: foundation.Rect, _view: ?*app_kit.View) foundation.Rect {
        return objc.msgSend(_self, "convertRect:fromView:", foundation.Rect, .{ _rect, _view });
    }

    pub fn convertRectToView(_self: *@This(), _rect: foundation.Rect, _view: ?*app_kit.View) foundation.Rect {
        return objc.msgSend(_self, "convertRect:toView:", foundation.Rect, .{ _rect, _view });
    }

    pub fn backingAlignedRectOptions(_self: *@This(), _rect: foundation.Rect, _options: foundation.AlignmentOptions) foundation.Rect {
        return objc.msgSend(_self, "backingAlignedRect:options:", foundation.Rect, .{ _rect, _options });
    }

    pub fn centerScanRect(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "centerScanRect:", foundation.Rect, .{_rect});
    }

    pub fn convertPointToBacking(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointToBacking:", foundation.Point, .{_point});
    }

    pub fn convertPointFromBacking(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointFromBacking:", foundation.Point, .{_point});
    }

    pub fn convertSizeToBacking(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeToBacking:", foundation.Size, .{_size});
    }

    pub fn convertSizeFromBacking(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeFromBacking:", foundation.Size, .{_size});
    }

    pub fn convertRectToBacking(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectToBacking:", foundation.Rect, .{_rect});
    }

    pub fn convertRectFromBacking(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectFromBacking:", foundation.Rect, .{_rect});
    }

    pub fn convertPointToLayer(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointToLayer:", foundation.Point, .{_point});
    }

    pub fn convertPointFromLayer(_self: *@This(), _point: foundation.Point) foundation.Point {
        return objc.msgSend(_self, "convertPointFromLayer:", foundation.Point, .{_point});
    }

    pub fn convertSizeToLayer(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeToLayer:", foundation.Size, .{_size});
    }

    pub fn convertSizeFromLayer(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "convertSizeFromLayer:", foundation.Size, .{_size});
    }

    pub fn convertRectToLayer(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectToLayer:", foundation.Rect, .{_rect});
    }

    pub fn convertRectFromLayer(_self: *@This(), _rect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "convertRectFromLayer:", foundation.Rect, .{_rect});
    }

    pub fn setNeedsDisplayInRect(_self: *@This(), _invalidRect: foundation.Rect) void {
        return objc.msgSend(_self, "setNeedsDisplayInRect:", void, .{_invalidRect});
    }

    pub fn lockFocus(_self: *@This()) void {
        return objc.msgSend(_self, "lockFocus", void, .{});
    }

    pub fn unlockFocus(_self: *@This()) void {
        return objc.msgSend(_self, "unlockFocus", void, .{});
    }

    pub fn lockFocusIfCanDraw(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "lockFocusIfCanDraw", objc.BOOL, .{});
    }

    pub fn lockFocusIfCanDrawInContext(_self: *@This(), _context: ?*app_kit.GraphicsContext) objc.BOOL {
        return objc.msgSend(_self, "lockFocusIfCanDrawInContext:", objc.BOOL, .{_context});
    }

    pub fn display(_self: *@This()) void {
        return objc.msgSend(_self, "display", void, .{});
    }

    pub fn displayIfNeeded(_self: *@This()) void {
        return objc.msgSend(_self, "displayIfNeeded", void, .{});
    }

    pub fn displayIfNeededIgnoringOpacity(_self: *@This()) void {
        return objc.msgSend(_self, "displayIfNeededIgnoringOpacity", void, .{});
    }

    pub fn displayRect(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayRect:", void, .{_rect});
    }

    pub fn displayIfNeededInRect(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayIfNeededInRect:", void, .{_rect});
    }

    pub fn displayRectIgnoringOpacity(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayRectIgnoringOpacity:", void, .{_rect});
    }

    pub fn displayIfNeededInRectIgnoringOpacity(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "displayIfNeededInRectIgnoringOpacity:", void, .{_rect});
    }

    pub fn drawRect(_self: *@This(), _dirtyRect: foundation.Rect) void {
        return objc.msgSend(_self, "drawRect:", void, .{_dirtyRect});
    }

    pub fn displayRectIgnoringOpacityInContext(_self: *@This(), _rect: foundation.Rect, _context: ?*app_kit.GraphicsContext) void {
        return objc.msgSend(_self, "displayRectIgnoringOpacity:inContext:", void, .{ _rect, _context });
    }

    pub fn bitmapImageRepForCachingDisplayInRect(_self: *@This(), _rect: foundation.Rect) ?*app_kit.BitmapImageRep {
        return objc.msgSend(_self, "bitmapImageRepForCachingDisplayInRect:", ?*app_kit.BitmapImageRep, .{_rect});
    }

    pub fn cacheDisplayInRectToBitmapImageRep(_self: *@This(), _rect: foundation.Rect, _bitmapImageRep: ?*app_kit.BitmapImageRep) void {
        return objc.msgSend(_self, "cacheDisplayInRect:toBitmapImageRep:", void, .{ _rect, _bitmapImageRep });
    }

    pub fn viewWillDraw(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillDraw", void, .{});
    }

    pub fn scrollPoint(_self: *@This(), _point: foundation.Point) void {
        return objc.msgSend(_self, "scrollPoint:", void, .{_point});
    }

    pub fn scrollRectToVisible(_self: *@This(), _rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(_self, "scrollRectToVisible:", objc.BOOL, .{_rect});
    }

    pub fn autoscroll(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "autoscroll:", objc.BOOL, .{_event});
    }

    pub fn adjustScroll(_self: *@This(), _newVisible: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "adjustScroll:", foundation.Rect, .{_newVisible});
    }

    pub fn scrollRectBy(_self: *@This(), _rect: foundation.Rect, _delta: foundation.Size) void {
        return objc.msgSend(_self, "scrollRect:by:", void, .{ _rect, _delta });
    }

    pub fn translateRectsNeedingDisplayInRectBy(_self: *@This(), _clipRect: foundation.Rect, _delta: foundation.Size) void {
        return objc.msgSend(_self, "translateRectsNeedingDisplayInRect:by:", void, .{ _clipRect, _delta });
    }

    pub fn hitTest(_self: *@This(), _point: foundation.Point) ?*app_kit.View {
        return objc.msgSend(_self, "hitTest:", ?*app_kit.View, .{_point});
    }

    pub fn mouseInRect(_self: *@This(), _point: foundation.Point, _rect: foundation.Rect) objc.BOOL {
        return objc.msgSend(_self, "mouse:inRect:", objc.BOOL, .{ _point, _rect });
    }

    pub fn viewWithTag(_self: *@This(), _tag: objc.NSInteger) ?*anyopaque {
        return objc.msgSend(_self, "viewWithTag:", ?*anyopaque, .{_tag});
    }

    pub fn acceptsFirstMouse(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "acceptsFirstMouse:", objc.BOOL, .{_event});
    }

    pub fn shouldDelayWindowOrderingForEvent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "shouldDelayWindowOrderingForEvent:", objc.BOOL, .{_event});
    }

    pub fn makeBackingLayer(_self: *@This()) ?*quartz_core.Layer {
        return objc.msgSend(_self, "makeBackingLayer", ?*quartz_core.Layer, .{});
    }

    pub fn updateLayer(_self: *@This()) void {
        return objc.msgSend(_self, "updateLayer", void, .{});
    }

    pub fn layoutSubtreeIfNeeded(_self: *@This()) void {
        return objc.msgSend(_self, "layoutSubtreeIfNeeded", void, .{});
    }

    pub fn layout(_self: *@This()) void {
        return objc.msgSend(_self, "layout", void, .{});
    }

    pub fn menuForEvent(_self: *@This(), _event: ?*app_kit.Event) ?*app_kit.Menu {
        return objc.msgSend(_self, "menuForEvent:", ?*app_kit.Menu, .{_event});
    }

    pub fn willOpenMenuWithEvent(_self: *@This(), _menu: ?*app_kit.Menu, _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "willOpenMenu:withEvent:", void, .{ _menu, _event });
    }

    pub fn didCloseMenuWithEvent(_self: *@This(), _menu: ?*app_kit.Menu, _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "didCloseMenu:withEvent:", void, .{ _menu, _event });
    }

    pub fn addToolTipRectOwnerUserData(_self: *@This(), _rect: foundation.Rect, _owner: *objc.Id, _data: ?*anyopaque) app_kit.ToolTipTag {
        return objc.msgSend(_self, "addToolTipRect:owner:userData:", app_kit.ToolTipTag, .{ _rect, _owner, _data });
    }

    pub fn removeToolTip(_self: *@This(), _tag: app_kit.ToolTipTag) void {
        return objc.msgSend(_self, "removeToolTip:", void, .{_tag});
    }

    pub fn removeAllToolTips(_self: *@This()) void {
        return objc.msgSend(_self, "removeAllToolTips", void, .{});
    }

    pub fn viewWillStartLiveResize(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillStartLiveResize", void, .{});
    }

    pub fn viewDidEndLiveResize(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidEndLiveResize", void, .{});
    }

    pub fn getRectsExposedDuringLiveResizeCount(_self: *@This(), _exposedRects: ?*foundation.Rect, _count: ?*objc.NSInteger) void {
        return objc.msgSend(_self, "getRectsExposedDuringLiveResize:count:", void, .{ _exposedRects, _count });
    }

    pub fn rectForSmartMagnificationAtPointInRect(_self: *@This(), _location: foundation.Point, _visibleRect: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "rectForSmartMagnificationAtPoint:inRect:", foundation.Rect, .{ _location, _visibleRect });
    }

    pub fn prepareForReuse(_self: *@This()) void {
        return objc.msgSend(_self, "prepareForReuse", void, .{});
    }

    pub fn prepareContentInRect(_self: *@This(), _rect: foundation.Rect) void {
        return objc.msgSend(_self, "prepareContentInRect:", void, .{_rect});
    }

    pub fn viewDidChangeEffectiveAppearance(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidChangeEffectiveAppearance", void, .{});
    }

    pub fn window(_self: *@This()) ?*app_kit.Window {
        return objc.msgSend(_self, "window", ?*app_kit.Window, .{});
    }

    pub fn superview(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "superview", ?*app_kit.View, .{});
    }

    pub fn subviews(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "subviews", ?*anyopaque, .{});
    }

    pub fn setSubviews(_self: *@This(), _subviews: ?*anyopaque) void {
        return objc.msgSend(_self, "setSubviews:", void, .{_subviews});
    }

    pub fn opaqueAncestor(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "opaqueAncestor", ?*app_kit.View, .{});
    }

    pub fn isHidden(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isHidden", objc.BOOL, .{});
    }

    pub fn setHidden(_self: *@This(), _hidden: objc.BOOL) void {
        return objc.msgSend(_self, "setHidden:", void, .{_hidden});
    }

    pub fn isHiddenOrHasHiddenAncestor(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isHiddenOrHasHiddenAncestor", objc.BOOL, .{});
    }

    pub fn wantsDefaultClipping(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsDefaultClipping", objc.BOOL, .{});
    }

    pub fn postsFrameChangedNotifications(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "postsFrameChangedNotifications", objc.BOOL, .{});
    }

    pub fn setPostsFrameChangedNotifications(_self: *@This(), _postsFrameChangedNotifications: objc.BOOL) void {
        return objc.msgSend(_self, "setPostsFrameChangedNotifications:", void, .{_postsFrameChangedNotifications});
    }

    pub fn autoresizesSubviews(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "autoresizesSubviews", objc.BOOL, .{});
    }

    pub fn setAutoresizesSubviews(_self: *@This(), _autoresizesSubviews: objc.BOOL) void {
        return objc.msgSend(_self, "setAutoresizesSubviews:", void, .{_autoresizesSubviews});
    }

    pub fn autoresizingMask(_self: *@This()) app_kit.AutoresizingMaskOptions {
        return objc.msgSend(_self, "autoresizingMask", app_kit.AutoresizingMaskOptions, .{});
    }

    pub fn setAutoresizingMask(_self: *@This(), _autoresizingMask: app_kit.AutoresizingMaskOptions) void {
        return objc.msgSend(_self, "setAutoresizingMask:", void, .{_autoresizingMask});
    }

    pub fn frame(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "frame", foundation.Rect, .{});
    }

    pub fn setFrame(_self: *@This(), _frame: foundation.Rect) void {
        return objc.msgSend(_self, "setFrame:", void, .{_frame});
    }

    pub fn frameRotation(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "frameRotation", core_foundation.CGFloat, .{});
    }

    pub fn setFrameRotation(_self: *@This(), _frameRotation: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setFrameRotation:", void, .{_frameRotation});
    }

    pub fn frameCenterRotation(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "frameCenterRotation", core_foundation.CGFloat, .{});
    }

    pub fn setFrameCenterRotation(_self: *@This(), _frameCenterRotation: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setFrameCenterRotation:", void, .{_frameCenterRotation});
    }

    pub fn boundsRotation(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "boundsRotation", core_foundation.CGFloat, .{});
    }

    pub fn setBoundsRotation(_self: *@This(), _boundsRotation: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setBoundsRotation:", void, .{_boundsRotation});
    }

    pub fn bounds(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "bounds", foundation.Rect, .{});
    }

    pub fn setBounds(_self: *@This(), _bounds: foundation.Rect) void {
        return objc.msgSend(_self, "setBounds:", void, .{_bounds});
    }

    pub fn isFlipped(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isFlipped", objc.BOOL, .{});
    }

    pub fn isRotatedFromBase(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRotatedFromBase", objc.BOOL, .{});
    }

    pub fn isRotatedOrScaledFromBase(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRotatedOrScaledFromBase", objc.BOOL, .{});
    }

    pub fn isOpaque(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isOpaque", objc.BOOL, .{});
    }

    pub fn canDrawConcurrently(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canDrawConcurrently", objc.BOOL, .{});
    }

    pub fn setCanDrawConcurrently(_self: *@This(), _canDrawConcurrently: objc.BOOL) void {
        return objc.msgSend(_self, "setCanDrawConcurrently:", void, .{_canDrawConcurrently});
    }

    pub fn canDraw(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canDraw", objc.BOOL, .{});
    }

    pub fn needsDisplay(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsDisplay", objc.BOOL, .{});
    }

    pub fn setNeedsDisplay(_self: *@This(), _needsDisplay: objc.BOOL) void {
        return objc.msgSend(_self, "setNeedsDisplay:", void, .{_needsDisplay});
    }

    pub fn focusView(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "focusView", ?*app_kit.View, .{});
    }

    pub fn visibleRect(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "visibleRect", foundation.Rect, .{});
    }

    pub fn tag(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "tag", objc.NSInteger, .{});
    }

    pub fn needsPanelToBecomeKey(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsPanelToBecomeKey", objc.BOOL, .{});
    }

    pub fn mouseDownCanMoveWindow(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "mouseDownCanMoveWindow", objc.BOOL, .{});
    }

    pub fn acceptsTouchEvents(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "acceptsTouchEvents", objc.BOOL, .{});
    }

    pub fn setAcceptsTouchEvents(_self: *@This(), _acceptsTouchEvents: objc.BOOL) void {
        return objc.msgSend(_self, "setAcceptsTouchEvents:", void, .{_acceptsTouchEvents});
    }

    pub fn wantsRestingTouches(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsRestingTouches", objc.BOOL, .{});
    }

    pub fn setWantsRestingTouches(_self: *@This(), _wantsRestingTouches: objc.BOOL) void {
        return objc.msgSend(_self, "setWantsRestingTouches:", void, .{_wantsRestingTouches});
    }

    pub fn layerContentsRedrawPolicy(_self: *@This()) app_kit.ViewLayerContentsRedrawPolicy {
        return objc.msgSend(_self, "layerContentsRedrawPolicy", app_kit.ViewLayerContentsRedrawPolicy, .{});
    }

    pub fn setLayerContentsRedrawPolicy(_self: *@This(), _layerContentsRedrawPolicy: app_kit.ViewLayerContentsRedrawPolicy) void {
        return objc.msgSend(_self, "setLayerContentsRedrawPolicy:", void, .{_layerContentsRedrawPolicy});
    }

    pub fn layerContentsPlacement(_self: *@This()) app_kit.ViewLayerContentsPlacement {
        return objc.msgSend(_self, "layerContentsPlacement", app_kit.ViewLayerContentsPlacement, .{});
    }

    pub fn setLayerContentsPlacement(_self: *@This(), _layerContentsPlacement: app_kit.ViewLayerContentsPlacement) void {
        return objc.msgSend(_self, "setLayerContentsPlacement:", void, .{_layerContentsPlacement});
    }

    pub fn wantsLayer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsLayer", objc.BOOL, .{});
    }

    pub fn setWantsLayer(_self: *@This(), _wantsLayer: objc.BOOL) void {
        return objc.msgSend(_self, "setWantsLayer:", void, .{_wantsLayer});
    }

    pub fn layer(_self: *@This()) ?*quartz_core.Layer {
        return objc.msgSend(_self, "layer", ?*quartz_core.Layer, .{});
    }

    pub fn setLayer(_self: *@This(), _layer: ?*quartz_core.Layer) void {
        return objc.msgSend(_self, "setLayer:", void, .{_layer});
    }

    pub fn wantsUpdateLayer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "wantsUpdateLayer", objc.BOOL, .{});
    }

    pub fn canDrawSubviewsIntoLayer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "canDrawSubviewsIntoLayer", objc.BOOL, .{});
    }

    pub fn setCanDrawSubviewsIntoLayer(_self: *@This(), _canDrawSubviewsIntoLayer: objc.BOOL) void {
        return objc.msgSend(_self, "setCanDrawSubviewsIntoLayer:", void, .{_canDrawSubviewsIntoLayer});
    }

    pub fn needsLayout(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "needsLayout", objc.BOOL, .{});
    }

    pub fn setNeedsLayout(_self: *@This(), _needsLayout: objc.BOOL) void {
        return objc.msgSend(_self, "setNeedsLayout:", void, .{_needsLayout});
    }

    pub fn alphaValue(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "alphaValue", core_foundation.CGFloat, .{});
    }

    pub fn setAlphaValue(_self: *@This(), _alphaValue: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setAlphaValue:", void, .{_alphaValue});
    }

    pub fn layerUsesCoreImageFilters(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "layerUsesCoreImageFilters", objc.BOOL, .{});
    }

    pub fn setLayerUsesCoreImageFilters(_self: *@This(), _layerUsesCoreImageFilters: objc.BOOL) void {
        return objc.msgSend(_self, "setLayerUsesCoreImageFilters:", void, .{_layerUsesCoreImageFilters});
    }

    pub fn backgroundFilters(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "backgroundFilters", ?*anyopaque, .{});
    }

    pub fn setBackgroundFilters(_self: *@This(), _backgroundFilters: ?*anyopaque) void {
        return objc.msgSend(_self, "setBackgroundFilters:", void, .{_backgroundFilters});
    }

    pub fn compositingFilter(_self: *@This()) ?*core_image.Filter {
        return objc.msgSend(_self, "compositingFilter", ?*core_image.Filter, .{});
    }

    pub fn setCompositingFilter(_self: *@This(), _compositingFilter: ?*core_image.Filter) void {
        return objc.msgSend(_self, "setCompositingFilter:", void, .{_compositingFilter});
    }

    pub fn contentFilters(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "contentFilters", ?*anyopaque, .{});
    }

    pub fn setContentFilters(_self: *@This(), _contentFilters: ?*anyopaque) void {
        return objc.msgSend(_self, "setContentFilters:", void, .{_contentFilters});
    }

    pub fn shadow(_self: *@This()) ?*app_kit.Shadow {
        return objc.msgSend(_self, "shadow", ?*app_kit.Shadow, .{});
    }

    pub fn setShadow(_self: *@This(), _shadow: ?*app_kit.Shadow) void {
        return objc.msgSend(_self, "setShadow:", void, .{_shadow});
    }

    pub fn clipsToBounds(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "clipsToBounds", objc.BOOL, .{});
    }

    pub fn setClipsToBounds(_self: *@This(), _clipsToBounds: objc.BOOL) void {
        return objc.msgSend(_self, "setClipsToBounds:", void, .{_clipsToBounds});
    }

    pub fn postsBoundsChangedNotifications(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "postsBoundsChangedNotifications", objc.BOOL, .{});
    }

    pub fn setPostsBoundsChangedNotifications(_self: *@This(), _postsBoundsChangedNotifications: objc.BOOL) void {
        return objc.msgSend(_self, "setPostsBoundsChangedNotifications:", void, .{_postsBoundsChangedNotifications});
    }

    pub fn enclosingScrollView(_self: *@This()) ?*app_kit.ScrollView {
        return objc.msgSend(_self, "enclosingScrollView", ?*app_kit.ScrollView, .{});
    }

    pub fn defaultMenu(_self: *@This()) ?*app_kit.Menu {
        return objc.msgSend(_self, "defaultMenu", ?*app_kit.Menu, .{});
    }

    pub fn toolTip(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "toolTip", ?*foundation.String, .{});
    }

    pub fn setToolTip(_self: *@This(), _toolTip: ?*foundation.String) void {
        return objc.msgSend(_self, "setToolTip:", void, .{_toolTip});
    }

    pub fn inLiveResize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "inLiveResize", objc.BOOL, .{});
    }

    pub fn preservesContentDuringLiveResize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "preservesContentDuringLiveResize", objc.BOOL, .{});
    }

    pub fn rectPreservedDuringLiveResize(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "rectPreservedDuringLiveResize", foundation.Rect, .{});
    }

    pub fn inputContext(_self: *@This()) ?*app_kit.TextInputContext {
        return objc.msgSend(_self, "inputContext", ?*app_kit.TextInputContext, .{});
    }

    pub fn userInterfaceLayoutDirection(_self: *@This()) app_kit.UserInterfaceLayoutDirection {
        return objc.msgSend(_self, "userInterfaceLayoutDirection", app_kit.UserInterfaceLayoutDirection, .{});
    }

    pub fn setUserInterfaceLayoutDirection(_self: *@This(), _userInterfaceLayoutDirection: app_kit.UserInterfaceLayoutDirection) void {
        return objc.msgSend(_self, "setUserInterfaceLayoutDirection:", void, .{_userInterfaceLayoutDirection});
    }

    pub fn isCompatibleWithResponsiveScrolling(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isCompatibleWithResponsiveScrolling", objc.BOOL, .{});
    }

    pub fn preparedContentRect(_self: *@This()) foundation.Rect {
        return objc.msgSend(_self, "preparedContentRect", foundation.Rect, .{});
    }

    pub fn setPreparedContentRect(_self: *@This(), _preparedContentRect: foundation.Rect) void {
        return objc.msgSend(_self, "setPreparedContentRect:", void, .{_preparedContentRect});
    }

    pub fn allowsVibrancy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsVibrancy", objc.BOOL, .{});
    }

    pub fn sizeThatFits(_self: *@This(), _size: foundation.Size) foundation.Size {
        return objc.msgSend(_self, "sizeThatFits:", foundation.Size, .{_size});
    }

    pub fn sizeToFit(_self: *@This()) void {
        return objc.msgSend(_self, "sizeToFit", void, .{});
    }

    pub fn sendActionOn(_self: *@This(), _mask: app_kit.EventMask) objc.NSInteger {
        return objc.msgSend(_self, "sendActionOn:", objc.NSInteger, .{_mask});
    }

    pub fn sendActionTo(_self: *@This(), _action: *objc.SEL, _target: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "sendAction:to:", objc.BOOL, .{ _action, _target });
    }

    pub fn takeIntValueFrom(_self: *@This(), _sender: *objc.Id) void {
        return objc.msgSend(_self, "takeIntValueFrom:", void, .{_sender});
    }

    pub fn takeFloatValueFrom(_self: *@This(), _sender: *objc.Id) void {
        return objc.msgSend(_self, "takeFloatValueFrom:", void, .{_sender});
    }

    pub fn takeDoubleValueFrom(_self: *@This(), _sender: *objc.Id) void {
        return objc.msgSend(_self, "takeDoubleValueFrom:", void, .{_sender});
    }

    pub fn takeStringValueFrom(_self: *@This(), _sender: *objc.Id) void {
        return objc.msgSend(_self, "takeStringValueFrom:", void, .{_sender});
    }

    pub fn takeObjectValueFrom(_self: *@This(), _sender: *objc.Id) void {
        return objc.msgSend(_self, "takeObjectValueFrom:", void, .{_sender});
    }

    pub fn takeIntegerValueFrom(_self: *@This(), _sender: *objc.Id) void {
        return objc.msgSend(_self, "takeIntegerValueFrom:", void, .{_sender});
    }

    pub fn performClick(_self: *@This(), _sender: *objc.Id) void {
        return objc.msgSend(_self, "performClick:", void, .{_sender});
    }

    pub fn expansionFrameWithFrame(_self: *@This(), _contentFrame: foundation.Rect) foundation.Rect {
        return objc.msgSend(_self, "expansionFrameWithFrame:", foundation.Rect, .{_contentFrame});
    }

    pub fn drawWithExpansionFrameInView(_self: *@This(), _contentFrame: foundation.Rect, _view: ?*app_kit.View) void {
        return objc.msgSend(_self, "drawWithExpansionFrame:inView:", void, .{ _contentFrame, _view });
    }

    pub fn target(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "target", *objc.Id, .{});
    }

    pub fn setTarget(_self: *@This(), _target: *objc.Id) void {
        return objc.msgSend(_self, "setTarget:", void, .{_target});
    }

    pub fn action(_self: *@This()) *objc.SEL {
        return objc.msgSend(_self, "action", *objc.SEL, .{});
    }

    pub fn setAction(_self: *@This(), _action: *objc.SEL) void {
        return objc.msgSend(_self, "setAction:", void, .{_action});
    }

    pub fn setTag(_self: *@This(), _tag: objc.NSInteger) void {
        return objc.msgSend(_self, "setTag:", void, .{_tag});
    }

    pub fn ignoresMultiClick(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "ignoresMultiClick", objc.BOOL, .{});
    }

    pub fn setIgnoresMultiClick(_self: *@This(), _ignoresMultiClick: objc.BOOL) void {
        return objc.msgSend(_self, "setIgnoresMultiClick:", void, .{_ignoresMultiClick});
    }

    pub fn isContinuous(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isContinuous", objc.BOOL, .{});
    }

    pub fn setContinuous(_self: *@This(), _continuous: objc.BOOL) void {
        return objc.msgSend(_self, "setContinuous:", void, .{_continuous});
    }

    pub fn isEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isEnabled", objc.BOOL, .{});
    }

    pub fn setEnabled(_self: *@This(), _enabled: objc.BOOL) void {
        return objc.msgSend(_self, "setEnabled:", void, .{_enabled});
    }

    pub fn refusesFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "refusesFirstResponder", objc.BOOL, .{});
    }

    pub fn setRefusesFirstResponder(_self: *@This(), _refusesFirstResponder: objc.BOOL) void {
        return objc.msgSend(_self, "setRefusesFirstResponder:", void, .{_refusesFirstResponder});
    }

    pub fn isHighlighted(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isHighlighted", objc.BOOL, .{});
    }

    pub fn setHighlighted(_self: *@This(), _highlighted: objc.BOOL) void {
        return objc.msgSend(_self, "setHighlighted:", void, .{_highlighted});
    }

    pub fn controlSize(_self: *@This()) app_kit.ControlSize {
        return objc.msgSend(_self, "controlSize", app_kit.ControlSize, .{});
    }

    pub fn setControlSize(_self: *@This(), _controlSize: app_kit.ControlSize) void {
        return objc.msgSend(_self, "setControlSize:", void, .{_controlSize});
    }

    pub fn formatter(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "formatter", ?*anyopaque, .{});
    }

    pub fn setFormatter(_self: *@This(), _formatter: ?*anyopaque) void {
        return objc.msgSend(_self, "setFormatter:", void, .{_formatter});
    }

    pub fn objectValue(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "objectValue", *objc.Id, .{});
    }

    pub fn setObjectValue(_self: *@This(), _objectValue: *objc.Id) void {
        return objc.msgSend(_self, "setObjectValue:", void, .{_objectValue});
    }

    pub fn stringValue(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "stringValue", ?*foundation.String, .{});
    }

    pub fn setStringValue(_self: *@This(), _stringValue: ?*foundation.String) void {
        return objc.msgSend(_self, "setStringValue:", void, .{_stringValue});
    }

    pub fn attributedStringValue(_self: *@This()) ?*foundation.AttributedString {
        return objc.msgSend(_self, "attributedStringValue", ?*foundation.AttributedString, .{});
    }

    pub fn setAttributedStringValue(_self: *@This(), _attributedStringValue: ?*foundation.AttributedString) void {
        return objc.msgSend(_self, "setAttributedStringValue:", void, .{_attributedStringValue});
    }

    pub fn intValue(_self: *@This()) i32 {
        return objc.msgSend(_self, "intValue", i32, .{});
    }

    pub fn setIntValue(_self: *@This(), _intValue: i32) void {
        return objc.msgSend(_self, "setIntValue:", void, .{_intValue});
    }

    pub fn integerValue(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "integerValue", objc.NSInteger, .{});
    }

    pub fn setIntegerValue(_self: *@This(), _integerValue: objc.NSInteger) void {
        return objc.msgSend(_self, "setIntegerValue:", void, .{_integerValue});
    }

    pub fn floatValue(_self: *@This()) f32 {
        return objc.msgSend(_self, "floatValue", f32, .{});
    }

    pub fn setFloatValue(_self: *@This(), _floatValue: f32) void {
        return objc.msgSend(_self, "setFloatValue:", void, .{_floatValue});
    }

    pub fn doubleValue(_self: *@This()) f64 {
        return objc.msgSend(_self, "doubleValue", f64, .{});
    }

    pub fn setDoubleValue(_self: *@This(), _doubleValue: f64) void {
        return objc.msgSend(_self, "setDoubleValue:", void, .{_doubleValue});
    }

    pub fn font(_self: *@This()) ?*app_kit.Font {
        return objc.msgSend(_self, "font", ?*app_kit.Font, .{});
    }

    pub fn setFont(_self: *@This(), _font: ?*app_kit.Font) void {
        return objc.msgSend(_self, "setFont:", void, .{_font});
    }

    pub fn usesSingleLineMode(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "usesSingleLineMode", objc.BOOL, .{});
    }

    pub fn setUsesSingleLineMode(_self: *@This(), _usesSingleLineMode: objc.BOOL) void {
        return objc.msgSend(_self, "setUsesSingleLineMode:", void, .{_usesSingleLineMode});
    }

    pub fn lineBreakMode(_self: *@This()) app_kit.LineBreakMode {
        return objc.msgSend(_self, "lineBreakMode", app_kit.LineBreakMode, .{});
    }

    pub fn setLineBreakMode(_self: *@This(), _lineBreakMode: app_kit.LineBreakMode) void {
        return objc.msgSend(_self, "setLineBreakMode:", void, .{_lineBreakMode});
    }

    pub fn alignment(_self: *@This()) app_kit.TextAlignment {
        return objc.msgSend(_self, "alignment", app_kit.TextAlignment, .{});
    }

    pub fn setAlignment(_self: *@This(), _alignment: app_kit.TextAlignment) void {
        return objc.msgSend(_self, "setAlignment:", void, .{_alignment});
    }

    pub fn baseWritingDirection(_self: *@This()) app_kit.WritingDirection {
        return objc.msgSend(_self, "baseWritingDirection", app_kit.WritingDirection, .{});
    }

    pub fn setBaseWritingDirection(_self: *@This(), _baseWritingDirection: app_kit.WritingDirection) void {
        return objc.msgSend(_self, "setBaseWritingDirection:", void, .{_baseWritingDirection});
    }

    pub fn allowsExpansionToolTips(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsExpansionToolTips", objc.BOOL, .{});
    }

    pub fn setAllowsExpansionToolTips(_self: *@This(), _allowsExpansionToolTips: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowsExpansionToolTips:", void, .{_allowsExpansionToolTips});
    }

    pub fn validateUserInterfaceItem(_self: *@This(), _item: ?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "validateUserInterfaceItem:", objc.BOOL, .{_item});
    }

    pub fn compressWithPrioritizedCompressionOptions(_self: *@This(), _prioritizedOptions: ?*anyopaque) void {
        return objc.msgSend(_self, "compressWithPrioritizedCompressionOptions:", void, .{_prioritizedOptions});
    }

    pub fn minimumSizeWithPrioritizedCompressionOptions(_self: *@This(), _prioritizedOptions: ?*anyopaque) foundation.Size {
        return objc.msgSend(_self, "minimumSizeWithPrioritizedCompressionOptions:", foundation.Size, .{_prioritizedOptions});
    }

    pub fn activeCompressionOptions(_self: *@This()) ?*app_kit.UserInterfaceCompressionOptions {
        return objc.msgSend(_self, "activeCompressionOptions", ?*app_kit.UserInterfaceCompressionOptions, .{});
    }

    pub fn buttonWithTitleImageTargetAction(
        _self: *@This(),
        _title: ?*foundation.String,
        _image: ?*app_kit.Image,
        _target: *objc.Id,
        _action: *objc.SEL,
    ) *@This() {
        return objc.msgSend(_self, "buttonWithTitle:image:target:action:", *@This(), .{
            _title,
            _image,
            _target,
            _action,
        });
    }

    pub fn buttonWithTitleTargetAction(_self: *@This(), _title: ?*foundation.String, _target: *objc.Id, _action: *objc.SEL) *@This() {
        return objc.msgSend(_self, "buttonWithTitle:target:action:", *@This(), .{ _title, _target, _action });
    }

    pub fn buttonWithImageTargetAction(_self: *@This(), _image: ?*app_kit.Image, _target: *objc.Id, _action: *objc.SEL) *@This() {
        return objc.msgSend(_self, "buttonWithImage:target:action:", *@This(), .{ _image, _target, _action });
    }

    pub fn checkboxWithTitleTargetAction(_self: *@This(), _title: ?*foundation.String, _target: *objc.Id, _action: *objc.SEL) *@This() {
        return objc.msgSend(_self, "checkboxWithTitle:target:action:", *@This(), .{ _title, _target, _action });
    }

    pub fn radioButtonWithTitleTargetAction(_self: *@This(), _title: ?*foundation.String, _target: *objc.Id, _action: *objc.SEL) *@This() {
        return objc.msgSend(_self, "radioButtonWithTitle:target:action:", *@This(), .{ _title, _target, _action });
    }

    pub fn setButtonType(_self: *@This(), _type: app_kit.ButtonType) void {
        return objc.msgSend(_self, "setButtonType:", void, .{_type});
    }

    pub fn setPeriodicDelayInterval(_self: *@This(), _delay: f32, _interval: f32) void {
        return objc.msgSend(_self, "setPeriodicDelay:interval:", void, .{ _delay, _interval });
    }

    pub fn getPeriodicDelayInterval(_self: *@This(), _delay: ?*f32, _interval: ?*f32) void {
        return objc.msgSend(_self, "getPeriodicDelay:interval:", void, .{ _delay, _interval });
    }

    pub fn setNextState(_self: *@This()) void {
        return objc.msgSend(_self, "setNextState", void, .{});
    }

    pub fn highlight(_self: *@This(), _flag: objc.BOOL) void {
        return objc.msgSend(_self, "highlight:", void, .{_flag});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn setTitle(_self: *@This(), _title: ?*foundation.String) void {
        return objc.msgSend(_self, "setTitle:", void, .{_title});
    }

    pub fn attributedTitle(_self: *@This()) ?*foundation.AttributedString {
        return objc.msgSend(_self, "attributedTitle", ?*foundation.AttributedString, .{});
    }

    pub fn setAttributedTitle(_self: *@This(), _attributedTitle: ?*foundation.AttributedString) void {
        return objc.msgSend(_self, "setAttributedTitle:", void, .{_attributedTitle});
    }

    pub fn alternateTitle(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "alternateTitle", ?*foundation.String, .{});
    }

    pub fn setAlternateTitle(_self: *@This(), _alternateTitle: ?*foundation.String) void {
        return objc.msgSend(_self, "setAlternateTitle:", void, .{_alternateTitle});
    }

    pub fn attributedAlternateTitle(_self: *@This()) ?*foundation.AttributedString {
        return objc.msgSend(_self, "attributedAlternateTitle", ?*foundation.AttributedString, .{});
    }

    pub fn setAttributedAlternateTitle(_self: *@This(), _attributedAlternateTitle: ?*foundation.AttributedString) void {
        return objc.msgSend(_self, "setAttributedAlternateTitle:", void, .{_attributedAlternateTitle});
    }

    pub fn hasDestructiveAction(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "hasDestructiveAction", objc.BOOL, .{});
    }

    pub fn setHasDestructiveAction(_self: *@This(), _hasDestructiveAction: objc.BOOL) void {
        return objc.msgSend(_self, "setHasDestructiveAction:", void, .{_hasDestructiveAction});
    }

    pub fn sound(_self: *@This()) ?*app_kit.Sound {
        return objc.msgSend(_self, "sound", ?*app_kit.Sound, .{});
    }

    pub fn setSound(_self: *@This(), _sound: ?*app_kit.Sound) void {
        return objc.msgSend(_self, "setSound:", void, .{_sound});
    }

    pub fn isSpringLoaded(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isSpringLoaded", objc.BOOL, .{});
    }

    pub fn setSpringLoaded(_self: *@This(), _springLoaded: objc.BOOL) void {
        return objc.msgSend(_self, "setSpringLoaded:", void, .{_springLoaded});
    }

    pub fn maxAcceleratorLevel(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "maxAcceleratorLevel", objc.NSInteger, .{});
    }

    pub fn setMaxAcceleratorLevel(_self: *@This(), _maxAcceleratorLevel: objc.NSInteger) void {
        return objc.msgSend(_self, "setMaxAcceleratorLevel:", void, .{_maxAcceleratorLevel});
    }

    pub fn bezelStyle(_self: *@This()) app_kit.BezelStyle {
        return objc.msgSend(_self, "bezelStyle", app_kit.BezelStyle, .{});
    }

    pub fn setBezelStyle(_self: *@This(), _bezelStyle: app_kit.BezelStyle) void {
        return objc.msgSend(_self, "setBezelStyle:", void, .{_bezelStyle});
    }

    pub fn isBordered(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isBordered", objc.BOOL, .{});
    }

    pub fn setBordered(_self: *@This(), _bordered: objc.BOOL) void {
        return objc.msgSend(_self, "setBordered:", void, .{_bordered});
    }

    pub fn isTransparent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isTransparent", objc.BOOL, .{});
    }

    pub fn setTransparent(_self: *@This(), _transparent: objc.BOOL) void {
        return objc.msgSend(_self, "setTransparent:", void, .{_transparent});
    }

    pub fn showsBorderOnlyWhileMouseInside(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "showsBorderOnlyWhileMouseInside", objc.BOOL, .{});
    }

    pub fn setShowsBorderOnlyWhileMouseInside(_self: *@This(), _showsBorderOnlyWhileMouseInside: objc.BOOL) void {
        return objc.msgSend(_self, "setShowsBorderOnlyWhileMouseInside:", void, .{_showsBorderOnlyWhileMouseInside});
    }

    pub fn bezelColor(_self: *@This()) ?*app_kit.Color {
        return objc.msgSend(_self, "bezelColor", ?*app_kit.Color, .{});
    }

    pub fn setBezelColor(_self: *@This(), _bezelColor: ?*app_kit.Color) void {
        return objc.msgSend(_self, "setBezelColor:", void, .{_bezelColor});
    }

    pub fn contentTintColor(_self: *@This()) ?*app_kit.Color {
        return objc.msgSend(_self, "contentTintColor", ?*app_kit.Color, .{});
    }

    pub fn setContentTintColor(_self: *@This(), _contentTintColor: ?*app_kit.Color) void {
        return objc.msgSend(_self, "setContentTintColor:", void, .{_contentTintColor});
    }

    pub fn image(_self: *@This()) ?*app_kit.Image {
        return objc.msgSend(_self, "image", ?*app_kit.Image, .{});
    }

    pub fn setImage(_self: *@This(), _image: ?*app_kit.Image) void {
        return objc.msgSend(_self, "setImage:", void, .{_image});
    }

    pub fn alternateImage(_self: *@This()) ?*app_kit.Image {
        return objc.msgSend(_self, "alternateImage", ?*app_kit.Image, .{});
    }

    pub fn setAlternateImage(_self: *@This(), _alternateImage: ?*app_kit.Image) void {
        return objc.msgSend(_self, "setAlternateImage:", void, .{_alternateImage});
    }

    pub fn imagePosition(_self: *@This()) app_kit.CellImagePosition {
        return objc.msgSend(_self, "imagePosition", app_kit.CellImagePosition, .{});
    }

    pub fn setImagePosition(_self: *@This(), _imagePosition: app_kit.CellImagePosition) void {
        return objc.msgSend(_self, "setImagePosition:", void, .{_imagePosition});
    }

    pub fn imageScaling(_self: *@This()) app_kit.ImageScaling {
        return objc.msgSend(_self, "imageScaling", app_kit.ImageScaling, .{});
    }

    pub fn setImageScaling(_self: *@This(), _imageScaling: app_kit.ImageScaling) void {
        return objc.msgSend(_self, "setImageScaling:", void, .{_imageScaling});
    }

    pub fn imageHugsTitle(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "imageHugsTitle", objc.BOOL, .{});
    }

    pub fn setImageHugsTitle(_self: *@This(), _imageHugsTitle: objc.BOOL) void {
        return objc.msgSend(_self, "setImageHugsTitle:", void, .{_imageHugsTitle});
    }

    pub fn symbolConfiguration(_self: *@This()) ?*app_kit.ImageSymbolConfiguration {
        return objc.msgSend(_self, "symbolConfiguration", ?*app_kit.ImageSymbolConfiguration, .{});
    }

    pub fn setSymbolConfiguration(_self: *@This(), _symbolConfiguration: ?*app_kit.ImageSymbolConfiguration) void {
        return objc.msgSend(_self, "setSymbolConfiguration:", void, .{_symbolConfiguration});
    }

    pub fn state(_self: *@This()) app_kit.ControlStateValue {
        return objc.msgSend(_self, "state", app_kit.ControlStateValue, .{});
    }

    pub fn setState(_self: *@This(), _state: app_kit.ControlStateValue) void {
        return objc.msgSend(_self, "setState:", void, .{_state});
    }

    pub fn allowsMixedState(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsMixedState", objc.BOOL, .{});
    }

    pub fn setAllowsMixedState(_self: *@This(), _allowsMixedState: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowsMixedState:", void, .{_allowsMixedState});
    }

    pub fn keyEquivalent(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "keyEquivalent", ?*foundation.String, .{});
    }

    pub fn setKeyEquivalent(_self: *@This(), _keyEquivalent: ?*foundation.String) void {
        return objc.msgSend(_self, "setKeyEquivalent:", void, .{_keyEquivalent});
    }

    pub fn keyEquivalentModifierMask(_self: *@This()) app_kit.EventModifierFlags {
        return objc.msgSend(_self, "keyEquivalentModifierMask", app_kit.EventModifierFlags, .{});
    }

    pub fn setKeyEquivalentModifierMask(_self: *@This(), _keyEquivalentModifierMask: app_kit.EventModifierFlags) void {
        return objc.msgSend(_self, "setKeyEquivalentModifierMask:", void, .{_keyEquivalentModifierMask});
    }

    pub fn initWithStyle(_self: *@This(), _style: AddVoiceShortcutButtonStyle) *@This() {
        return objc.msgSend(_self, "initWithStyle:", *@This(), .{_style});
    }

    pub fn style(_self: *@This()) AddVoiceShortcutButtonStyle {
        return objc.msgSend(_self, "style", AddVoiceShortcutButtonStyle, .{});
    }

    pub fn setStyle(_self: *@This(), _style: AddVoiceShortcutButtonStyle) void {
        return objc.msgSend(_self, "setStyle:", void, .{_style});
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn shortcut(_self: *@This()) ?*intents.Shortcut {
        return objc.msgSend(_self, "shortcut", ?*intents.Shortcut, .{});
    }

    pub fn setShortcut(_self: *@This(), _shortcut: ?*intents.Shortcut) void {
        return objc.msgSend(_self, "setShortcut:", void, .{_shortcut});
    }

    pub fn cornerRadius(_self: *@This()) core_foundation.CGFloat {
        return objc.msgSend(_self, "cornerRadius", core_foundation.CGFloat, .{});
    }

    pub fn setCornerRadius(_self: *@This(), _cornerRadius: core_foundation.CGFloat) void {
        return objc.msgSend(_self, "setCornerRadius:", void, .{_cornerRadius});
    }
};

/// https://developer.apple.com/documentation/IntentsUI/INUIAddVoiceShortcutViewController?language=objc
pub const AddVoiceShortcutViewController = opaque {
    pub const InternalInfo = objc.ExternClass("INUIAddVoiceShortcutViewController", @This(), app_kit.ViewController, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn tryToPerformWith(_self: *@This(), _action: *objc.SEL, _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "tryToPerform:with:", objc.BOOL, .{ _action, _object });
    }

    pub fn performKeyEquivalent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "performKeyEquivalent:", objc.BOOL, .{_event});
    }

    pub fn validRequestorForSendTypeReturnType(_self: *@This(), _sendType: app_kit.PasteboardType, _returnType: app_kit.PasteboardType) *objc.Id {
        return objc.msgSend(_self, "validRequestorForSendType:returnType:", *objc.Id, .{ _sendType, _returnType });
    }

    pub fn mouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseDown:", void, .{_event});
    }

    pub fn rightMouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseDown:", void, .{_event});
    }

    pub fn otherMouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseDown:", void, .{_event});
    }

    pub fn mouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseUp:", void, .{_event});
    }

    pub fn rightMouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseUp:", void, .{_event});
    }

    pub fn otherMouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseUp:", void, .{_event});
    }

    pub fn mouseMoved(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseMoved:", void, .{_event});
    }

    pub fn mouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseDragged:", void, .{_event});
    }

    pub fn scrollWheel(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "scrollWheel:", void, .{_event});
    }

    pub fn rightMouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseDragged:", void, .{_event});
    }

    pub fn otherMouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseDragged:", void, .{_event});
    }

    pub fn mouseEntered(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseEntered:", void, .{_event});
    }

    pub fn mouseExited(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseExited:", void, .{_event});
    }

    pub fn keyDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "keyDown:", void, .{_event});
    }

    pub fn keyUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "keyUp:", void, .{_event});
    }

    pub fn flagsChanged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "flagsChanged:", void, .{_event});
    }

    pub fn tabletPoint(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "tabletPoint:", void, .{_event});
    }

    pub fn tabletProximity(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "tabletProximity:", void, .{_event});
    }

    pub fn cursorUpdate(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "cursorUpdate:", void, .{_event});
    }

    pub fn magnifyWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "magnifyWithEvent:", void, .{_event});
    }

    pub fn rotateWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rotateWithEvent:", void, .{_event});
    }

    pub fn swipeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "swipeWithEvent:", void, .{_event});
    }

    pub fn beginGestureWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "beginGestureWithEvent:", void, .{_event});
    }

    pub fn endGestureWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "endGestureWithEvent:", void, .{_event});
    }

    pub fn smartMagnifyWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "smartMagnifyWithEvent:", void, .{_event});
    }

    pub fn changeModeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "changeModeWithEvent:", void, .{_event});
    }

    pub fn touchesBeganWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesBeganWithEvent:", void, .{_event});
    }

    pub fn touchesMovedWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesMovedWithEvent:", void, .{_event});
    }

    pub fn touchesEndedWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesEndedWithEvent:", void, .{_event});
    }

    pub fn touchesCancelledWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesCancelledWithEvent:", void, .{_event});
    }

    pub fn quickLookWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "quickLookWithEvent:", void, .{_event});
    }

    pub fn pressureChangeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "pressureChangeWithEvent:", void, .{_event});
    }

    pub fn contextMenuKeyDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "contextMenuKeyDown:", void, .{_event});
    }

    pub fn noResponderFor(_self: *@This(), _eventSelector: *objc.SEL) void {
        return objc.msgSend(_self, "noResponderFor:", void, .{_eventSelector});
    }

    pub fn becomeFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "becomeFirstResponder", objc.BOOL, .{});
    }

    pub fn resignFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "resignFirstResponder", objc.BOOL, .{});
    }

    pub fn interpretKeyEvents(_self: *@This(), _eventArray: ?*anyopaque) void {
        return objc.msgSend(_self, "interpretKeyEvents:", void, .{_eventArray});
    }

    pub fn flushBufferedKeyEvents(_self: *@This()) void {
        return objc.msgSend(_self, "flushBufferedKeyEvents", void, .{});
    }

    pub fn showContextHelp(_self: *@This(), _sender: *objc.Id) void {
        return objc.msgSend(_self, "showContextHelp:", void, .{_sender});
    }

    pub fn helpRequested(_self: *@This(), _eventPtr: ?*app_kit.Event) void {
        return objc.msgSend(_self, "helpRequested:", void, .{_eventPtr});
    }

    pub fn shouldBeTreatedAsInkEvent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "shouldBeTreatedAsInkEvent:", objc.BOOL, .{_event});
    }

    pub fn wantsScrollEventsForSwipeTrackingOnAxis(_self: *@This(), _axis: app_kit.EventGestureAxis) objc.BOOL {
        return objc.msgSend(_self, "wantsScrollEventsForSwipeTrackingOnAxis:", objc.BOOL, .{_axis});
    }

    pub fn wantsForwardedScrollEventsForAxis(_self: *@This(), _axis: app_kit.EventGestureAxis) objc.BOOL {
        return objc.msgSend(_self, "wantsForwardedScrollEventsForAxis:", objc.BOOL, .{_axis});
    }

    pub fn supplementalTargetForActionSender(_self: *@This(), _action: *objc.SEL, _sender: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "supplementalTargetForAction:sender:", *objc.Id, .{ _action, _sender });
    }

    pub fn nextResponder(_self: *@This()) ?*app_kit.Responder {
        return objc.msgSend(_self, "nextResponder", ?*app_kit.Responder, .{});
    }

    pub fn setNextResponder(_self: *@This(), _nextResponder: ?*app_kit.Responder) void {
        return objc.msgSend(_self, "setNextResponder:", void, .{_nextResponder});
    }

    pub fn acceptsFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "acceptsFirstResponder", objc.BOOL, .{});
    }

    pub fn menu(_self: *@This()) ?*app_kit.Menu {
        return objc.msgSend(_self, "menu", ?*app_kit.Menu, .{});
    }

    pub fn setMenu(_self: *@This(), _menu: ?*app_kit.Menu) void {
        return objc.msgSend(_self, "setMenu:", void, .{_menu});
    }

    pub fn discardEditing(_self: *@This()) void {
        return objc.msgSend(_self, "discardEditing", void, .{});
    }

    pub fn commitEditing(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "commitEditing", objc.BOOL, .{});
    }

    pub fn commitEditingWithDelegateDidCommitSelectorContextInfo(_self: *@This(), _delegate: *objc.Id, _didCommitSelector: *objc.SEL, _contextInfo: ?*anyopaque) void {
        return objc.msgSend(_self, "commitEditingWithDelegate:didCommitSelector:contextInfo:", void, .{ _delegate, _didCommitSelector, _contextInfo });
    }

    pub fn commitEditingAndReturnError(_self: *@This(), _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "commitEditingAndReturnError:", objc.BOOL, .{_error});
    }

    pub fn prepareForSegueSender(_self: *@This(), _segue: ?*app_kit.StoryboardSegue, _sender: *objc.Id) void {
        return objc.msgSend(_self, "prepareForSegue:sender:", void, .{ _segue, _sender });
    }

    pub fn performSegueWithIdentifierSender(_self: *@This(), _identifier: app_kit.StoryboardSegueIdentifier, _sender: *objc.Id) void {
        return objc.msgSend(_self, "performSegueWithIdentifier:sender:", void, .{ _identifier, _sender });
    }

    pub fn shouldPerformSegueWithIdentifierSender(_self: *@This(), _identifier: app_kit.StoryboardSegueIdentifier, _sender: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "shouldPerformSegueWithIdentifier:sender:", objc.BOOL, .{ _identifier, _sender });
    }

    pub fn identifier(_self: *@This()) app_kit.UserInterfaceItemIdentifier {
        return objc.msgSend(_self, "identifier", app_kit.UserInterfaceItemIdentifier, .{});
    }

    pub fn setIdentifier(_self: *@This(), _identifier: app_kit.UserInterfaceItemIdentifier) void {
        return objc.msgSend(_self, "setIdentifier:", void, .{_identifier});
    }

    pub fn initWithNibNameBundle(_self: *@This(), _nibNameOrNil: app_kit.NibName, _nibBundleOrNil: ?*foundation.Bundle) *@This() {
        return objc.msgSend(_self, "initWithNibName:bundle:", *@This(), .{ _nibNameOrNil, _nibBundleOrNil });
    }

    pub fn loadView(_self: *@This()) void {
        return objc.msgSend(_self, "loadView", void, .{});
    }

    pub fn loadViewIfNeeded(_self: *@This()) void {
        return objc.msgSend(_self, "loadViewIfNeeded", void, .{});
    }

    pub fn viewDidLoad(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidLoad", void, .{});
    }

    pub fn viewWillAppear(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillAppear", void, .{});
    }

    pub fn viewDidAppear(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidAppear", void, .{});
    }

    pub fn viewWillDisappear(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillDisappear", void, .{});
    }

    pub fn viewDidDisappear(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidDisappear", void, .{});
    }

    pub fn updateViewConstraints(_self: *@This()) void {
        return objc.msgSend(_self, "updateViewConstraints", void, .{});
    }

    pub fn viewWillLayout(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillLayout", void, .{});
    }

    pub fn viewDidLayout(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidLayout", void, .{});
    }

    pub fn nibName(_self: *@This()) app_kit.NibName {
        return objc.msgSend(_self, "nibName", app_kit.NibName, .{});
    }

    pub fn nibBundle(_self: *@This()) ?*foundation.Bundle {
        return objc.msgSend(_self, "nibBundle", ?*foundation.Bundle, .{});
    }

    pub fn representedObject(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "representedObject", *objc.Id, .{});
    }

    pub fn setRepresentedObject(_self: *@This(), _representedObject: *objc.Id) void {
        return objc.msgSend(_self, "setRepresentedObject:", void, .{_representedObject});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn setTitle(_self: *@This(), _title: ?*foundation.String) void {
        return objc.msgSend(_self, "setTitle:", void, .{_title});
    }

    pub fn view(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "view", ?*app_kit.View, .{});
    }

    pub fn setView(_self: *@This(), _view: ?*app_kit.View) void {
        return objc.msgSend(_self, "setView:", void, .{_view});
    }

    pub fn viewIfLoaded(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "viewIfLoaded", ?*app_kit.View, .{});
    }

    pub fn isViewLoaded(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isViewLoaded", objc.BOOL, .{});
    }

    pub fn preferredContentSize(_self: *@This()) foundation.Size {
        return objc.msgSend(_self, "preferredContentSize", foundation.Size, .{});
    }

    pub fn setPreferredContentSize(_self: *@This(), _preferredContentSize: foundation.Size) void {
        return objc.msgSend(_self, "setPreferredContentSize:", void, .{_preferredContentSize});
    }

    pub fn initWithShortcut(_self: *@This(), _shortcut: ?*intents.Shortcut) *@This() {
        return objc.msgSend(_self, "initWithShortcut:", *@This(), .{_shortcut});
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }
};

/// https://developer.apple.com/documentation/IntentsUI/INUIAddVoiceShortcutViewControllerDelegate?language=objc
pub const AddVoiceShortcutViewControllerDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn addVoiceShortcutViewControllerDidFinishWithVoiceShortcutError(_self: *@This(), _controller: ?*AddVoiceShortcutViewController, _voiceShortcut: ?*intents.VoiceShortcut, _error: ?*foundation.Error) void {
        return objc.msgSend(_self, "addVoiceShortcutViewController:didFinishWithVoiceShortcut:error:", void, .{ _controller, _voiceShortcut, _error });
    }

    pub fn addVoiceShortcutViewControllerDidCancel(_self: *@This(), _controller: ?*AddVoiceShortcutViewController) void {
        return objc.msgSend(_self, "addVoiceShortcutViewControllerDidCancel:", void, .{_controller});
    }
};

/// https://developer.apple.com/documentation/IntentsUI/INUIEditVoiceShortcutViewController?language=objc
pub const EditVoiceShortcutViewController = opaque {
    pub const InternalInfo = objc.ExternClass("INUIEditVoiceShortcutViewController", @This(), app_kit.ViewController, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*foundation.Invocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*foundation.MethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*foundation.MethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn tryToPerformWith(_self: *@This(), _action: *objc.SEL, _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "tryToPerform:with:", objc.BOOL, .{ _action, _object });
    }

    pub fn performKeyEquivalent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "performKeyEquivalent:", objc.BOOL, .{_event});
    }

    pub fn validRequestorForSendTypeReturnType(_self: *@This(), _sendType: app_kit.PasteboardType, _returnType: app_kit.PasteboardType) *objc.Id {
        return objc.msgSend(_self, "validRequestorForSendType:returnType:", *objc.Id, .{ _sendType, _returnType });
    }

    pub fn mouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseDown:", void, .{_event});
    }

    pub fn rightMouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseDown:", void, .{_event});
    }

    pub fn otherMouseDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseDown:", void, .{_event});
    }

    pub fn mouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseUp:", void, .{_event});
    }

    pub fn rightMouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseUp:", void, .{_event});
    }

    pub fn otherMouseUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseUp:", void, .{_event});
    }

    pub fn mouseMoved(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseMoved:", void, .{_event});
    }

    pub fn mouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseDragged:", void, .{_event});
    }

    pub fn scrollWheel(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "scrollWheel:", void, .{_event});
    }

    pub fn rightMouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rightMouseDragged:", void, .{_event});
    }

    pub fn otherMouseDragged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "otherMouseDragged:", void, .{_event});
    }

    pub fn mouseEntered(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseEntered:", void, .{_event});
    }

    pub fn mouseExited(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "mouseExited:", void, .{_event});
    }

    pub fn keyDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "keyDown:", void, .{_event});
    }

    pub fn keyUp(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "keyUp:", void, .{_event});
    }

    pub fn flagsChanged(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "flagsChanged:", void, .{_event});
    }

    pub fn tabletPoint(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "tabletPoint:", void, .{_event});
    }

    pub fn tabletProximity(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "tabletProximity:", void, .{_event});
    }

    pub fn cursorUpdate(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "cursorUpdate:", void, .{_event});
    }

    pub fn magnifyWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "magnifyWithEvent:", void, .{_event});
    }

    pub fn rotateWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "rotateWithEvent:", void, .{_event});
    }

    pub fn swipeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "swipeWithEvent:", void, .{_event});
    }

    pub fn beginGestureWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "beginGestureWithEvent:", void, .{_event});
    }

    pub fn endGestureWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "endGestureWithEvent:", void, .{_event});
    }

    pub fn smartMagnifyWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "smartMagnifyWithEvent:", void, .{_event});
    }

    pub fn changeModeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "changeModeWithEvent:", void, .{_event});
    }

    pub fn touchesBeganWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesBeganWithEvent:", void, .{_event});
    }

    pub fn touchesMovedWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesMovedWithEvent:", void, .{_event});
    }

    pub fn touchesEndedWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesEndedWithEvent:", void, .{_event});
    }

    pub fn touchesCancelledWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "touchesCancelledWithEvent:", void, .{_event});
    }

    pub fn quickLookWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "quickLookWithEvent:", void, .{_event});
    }

    pub fn pressureChangeWithEvent(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "pressureChangeWithEvent:", void, .{_event});
    }

    pub fn contextMenuKeyDown(_self: *@This(), _event: ?*app_kit.Event) void {
        return objc.msgSend(_self, "contextMenuKeyDown:", void, .{_event});
    }

    pub fn noResponderFor(_self: *@This(), _eventSelector: *objc.SEL) void {
        return objc.msgSend(_self, "noResponderFor:", void, .{_eventSelector});
    }

    pub fn becomeFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "becomeFirstResponder", objc.BOOL, .{});
    }

    pub fn resignFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "resignFirstResponder", objc.BOOL, .{});
    }

    pub fn interpretKeyEvents(_self: *@This(), _eventArray: ?*anyopaque) void {
        return objc.msgSend(_self, "interpretKeyEvents:", void, .{_eventArray});
    }

    pub fn flushBufferedKeyEvents(_self: *@This()) void {
        return objc.msgSend(_self, "flushBufferedKeyEvents", void, .{});
    }

    pub fn showContextHelp(_self: *@This(), _sender: *objc.Id) void {
        return objc.msgSend(_self, "showContextHelp:", void, .{_sender});
    }

    pub fn helpRequested(_self: *@This(), _eventPtr: ?*app_kit.Event) void {
        return objc.msgSend(_self, "helpRequested:", void, .{_eventPtr});
    }

    pub fn shouldBeTreatedAsInkEvent(_self: *@This(), _event: ?*app_kit.Event) objc.BOOL {
        return objc.msgSend(_self, "shouldBeTreatedAsInkEvent:", objc.BOOL, .{_event});
    }

    pub fn wantsScrollEventsForSwipeTrackingOnAxis(_self: *@This(), _axis: app_kit.EventGestureAxis) objc.BOOL {
        return objc.msgSend(_self, "wantsScrollEventsForSwipeTrackingOnAxis:", objc.BOOL, .{_axis});
    }

    pub fn wantsForwardedScrollEventsForAxis(_self: *@This(), _axis: app_kit.EventGestureAxis) objc.BOOL {
        return objc.msgSend(_self, "wantsForwardedScrollEventsForAxis:", objc.BOOL, .{_axis});
    }

    pub fn supplementalTargetForActionSender(_self: *@This(), _action: *objc.SEL, _sender: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "supplementalTargetForAction:sender:", *objc.Id, .{ _action, _sender });
    }

    pub fn nextResponder(_self: *@This()) ?*app_kit.Responder {
        return objc.msgSend(_self, "nextResponder", ?*app_kit.Responder, .{});
    }

    pub fn setNextResponder(_self: *@This(), _nextResponder: ?*app_kit.Responder) void {
        return objc.msgSend(_self, "setNextResponder:", void, .{_nextResponder});
    }

    pub fn acceptsFirstResponder(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "acceptsFirstResponder", objc.BOOL, .{});
    }

    pub fn menu(_self: *@This()) ?*app_kit.Menu {
        return objc.msgSend(_self, "menu", ?*app_kit.Menu, .{});
    }

    pub fn setMenu(_self: *@This(), _menu: ?*app_kit.Menu) void {
        return objc.msgSend(_self, "setMenu:", void, .{_menu});
    }

    pub fn discardEditing(_self: *@This()) void {
        return objc.msgSend(_self, "discardEditing", void, .{});
    }

    pub fn commitEditing(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "commitEditing", objc.BOOL, .{});
    }

    pub fn commitEditingWithDelegateDidCommitSelectorContextInfo(_self: *@This(), _delegate: *objc.Id, _didCommitSelector: *objc.SEL, _contextInfo: ?*anyopaque) void {
        return objc.msgSend(_self, "commitEditingWithDelegate:didCommitSelector:contextInfo:", void, .{ _delegate, _didCommitSelector, _contextInfo });
    }

    pub fn commitEditingAndReturnError(_self: *@This(), _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "commitEditingAndReturnError:", objc.BOOL, .{_error});
    }

    pub fn prepareForSegueSender(_self: *@This(), _segue: ?*app_kit.StoryboardSegue, _sender: *objc.Id) void {
        return objc.msgSend(_self, "prepareForSegue:sender:", void, .{ _segue, _sender });
    }

    pub fn performSegueWithIdentifierSender(_self: *@This(), _identifier: app_kit.StoryboardSegueIdentifier, _sender: *objc.Id) void {
        return objc.msgSend(_self, "performSegueWithIdentifier:sender:", void, .{ _identifier, _sender });
    }

    pub fn shouldPerformSegueWithIdentifierSender(_self: *@This(), _identifier: app_kit.StoryboardSegueIdentifier, _sender: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "shouldPerformSegueWithIdentifier:sender:", objc.BOOL, .{ _identifier, _sender });
    }

    pub fn identifier(_self: *@This()) app_kit.UserInterfaceItemIdentifier {
        return objc.msgSend(_self, "identifier", app_kit.UserInterfaceItemIdentifier, .{});
    }

    pub fn setIdentifier(_self: *@This(), _identifier: app_kit.UserInterfaceItemIdentifier) void {
        return objc.msgSend(_self, "setIdentifier:", void, .{_identifier});
    }

    pub fn initWithNibNameBundle(_self: *@This(), _nibNameOrNil: app_kit.NibName, _nibBundleOrNil: ?*foundation.Bundle) *@This() {
        return objc.msgSend(_self, "initWithNibName:bundle:", *@This(), .{ _nibNameOrNil, _nibBundleOrNil });
    }

    pub fn loadView(_self: *@This()) void {
        return objc.msgSend(_self, "loadView", void, .{});
    }

    pub fn loadViewIfNeeded(_self: *@This()) void {
        return objc.msgSend(_self, "loadViewIfNeeded", void, .{});
    }

    pub fn viewDidLoad(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidLoad", void, .{});
    }

    pub fn viewWillAppear(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillAppear", void, .{});
    }

    pub fn viewDidAppear(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidAppear", void, .{});
    }

    pub fn viewWillDisappear(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillDisappear", void, .{});
    }

    pub fn viewDidDisappear(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidDisappear", void, .{});
    }

    pub fn updateViewConstraints(_self: *@This()) void {
        return objc.msgSend(_self, "updateViewConstraints", void, .{});
    }

    pub fn viewWillLayout(_self: *@This()) void {
        return objc.msgSend(_self, "viewWillLayout", void, .{});
    }

    pub fn viewDidLayout(_self: *@This()) void {
        return objc.msgSend(_self, "viewDidLayout", void, .{});
    }

    pub fn nibName(_self: *@This()) app_kit.NibName {
        return objc.msgSend(_self, "nibName", app_kit.NibName, .{});
    }

    pub fn nibBundle(_self: *@This()) ?*foundation.Bundle {
        return objc.msgSend(_self, "nibBundle", ?*foundation.Bundle, .{});
    }

    pub fn representedObject(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "representedObject", *objc.Id, .{});
    }

    pub fn setRepresentedObject(_self: *@This(), _representedObject: *objc.Id) void {
        return objc.msgSend(_self, "setRepresentedObject:", void, .{_representedObject});
    }

    pub fn title(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "title", ?*foundation.String, .{});
    }

    pub fn setTitle(_self: *@This(), _title: ?*foundation.String) void {
        return objc.msgSend(_self, "setTitle:", void, .{_title});
    }

    pub fn view(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "view", ?*app_kit.View, .{});
    }

    pub fn setView(_self: *@This(), _view: ?*app_kit.View) void {
        return objc.msgSend(_self, "setView:", void, .{_view});
    }

    pub fn viewIfLoaded(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "viewIfLoaded", ?*app_kit.View, .{});
    }

    pub fn isViewLoaded(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isViewLoaded", objc.BOOL, .{});
    }

    pub fn preferredContentSize(_self: *@This()) foundation.Size {
        return objc.msgSend(_self, "preferredContentSize", foundation.Size, .{});
    }

    pub fn setPreferredContentSize(_self: *@This(), _preferredContentSize: foundation.Size) void {
        return objc.msgSend(_self, "setPreferredContentSize:", void, .{_preferredContentSize});
    }

    pub fn initWithVoiceShortcut(_self: *@This(), _voiceShortcut: ?*intents.VoiceShortcut) *@This() {
        return objc.msgSend(_self, "initWithVoiceShortcut:", *@This(), .{_voiceShortcut});
    }

    pub fn delegate(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }
};

/// https://developer.apple.com/documentation/IntentsUI/INUIEditVoiceShortcutViewControllerDelegate?language=objc
pub const EditVoiceShortcutViewControllerDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn editVoiceShortcutViewControllerDidUpdateVoiceShortcutError(_self: *@This(), _controller: ?*EditVoiceShortcutViewController, _voiceShortcut: ?*intents.VoiceShortcut, _error: ?*foundation.Error) void {
        return objc.msgSend(_self, "editVoiceShortcutViewController:didUpdateVoiceShortcut:error:", void, .{ _controller, _voiceShortcut, _error });
    }

    pub fn editVoiceShortcutViewControllerDidDeleteVoiceShortcutWithIdentifier(_self: *@This(), _controller: ?*EditVoiceShortcutViewController, _deletedVoiceShortcutIdentifier: ?*foundation.UUID) void {
        return objc.msgSend(_self, "editVoiceShortcutViewController:didDeleteVoiceShortcutWithIdentifier:", void, .{ _controller, _deletedVoiceShortcutIdentifier });
    }

    pub fn editVoiceShortcutViewControllerDidCancel(_self: *@This(), _controller: ?*EditVoiceShortcutViewController) void {
        return objc.msgSend(_self, "editVoiceShortcutViewControllerDidCancel:", void, .{_controller});
    }
};
