// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const io_kit = @import("io_kit.zig"); // Framework dependency IOKit.

pub const __IOSurface = extern struct {};

pub const IOSurfaceRef = ?*__IOSurface;

pub extern "CoreGraphics" fn PointMake(x: core_foundation.CGFloat, y: core_foundation.CGFloat) callconv(.C) core_foundation.CGPoint;

pub extern "CoreGraphics" fn SizeMake(width: core_foundation.CGFloat, height: core_foundation.CGFloat) callconv(.C) core_foundation.CGSize;

pub extern "CoreGraphics" fn VectorMake(dx: core_foundation.CGFloat, dy: core_foundation.CGFloat) callconv(.C) core_foundation.CGVector;

pub extern "CoreGraphics" fn RectMake(x: core_foundation.CGFloat, y: core_foundation.CGFloat, width: core_foundation.CGFloat, height: core_foundation.CGFloat, ) callconv(.C) core_foundation.CGRect;

pub extern "CoreGraphics" fn RectGetMinX(rect: core_foundation.CGRect) callconv(.C) core_foundation.CGFloat;

pub extern "CoreGraphics" fn RectGetMidX(rect: core_foundation.CGRect) callconv(.C) core_foundation.CGFloat;

pub extern "CoreGraphics" fn RectGetMaxX(rect: core_foundation.CGRect) callconv(.C) core_foundation.CGFloat;

pub extern "CoreGraphics" fn RectGetMinY(rect: core_foundation.CGRect) callconv(.C) core_foundation.CGFloat;

pub extern "CoreGraphics" fn RectGetMidY(rect: core_foundation.CGRect) callconv(.C) core_foundation.CGFloat;

pub extern "CoreGraphics" fn RectGetMaxY(rect: core_foundation.CGRect) callconv(.C) core_foundation.CGFloat;

pub extern "CoreGraphics" fn RectGetWidth(rect: core_foundation.CGRect) callconv(.C) core_foundation.CGFloat;

pub extern "CoreGraphics" fn RectGetHeight(rect: core_foundation.CGRect) callconv(.C) core_foundation.CGFloat;

pub extern "CoreGraphics" fn PointEqualToPoint(point1: core_foundation.CGPoint, point2: core_foundation.CGPoint) callconv(.C) i32;

pub extern "CoreGraphics" fn SizeEqualToSize(size1: core_foundation.CGSize, size2: core_foundation.CGSize) callconv(.C) i32;

pub extern "CoreGraphics" fn RectEqualToRect(rect1: core_foundation.CGRect, rect2: core_foundation.CGRect) callconv(.C) i32;

pub extern "CoreGraphics" fn RectStandardize(rect: core_foundation.CGRect) callconv(.C) core_foundation.CGRect;

pub extern "CoreGraphics" fn RectIsEmpty(rect: core_foundation.CGRect) callconv(.C) i32;

pub extern "CoreGraphics" fn RectIsNull(rect: core_foundation.CGRect) callconv(.C) i32;

pub extern "CoreGraphics" fn RectIsInfinite(rect: core_foundation.CGRect) callconv(.C) i32;

pub extern "CoreGraphics" fn RectInset(rect: core_foundation.CGRect, dx: core_foundation.CGFloat, dy: core_foundation.CGFloat) callconv(.C) core_foundation.CGRect;

pub extern "CoreGraphics" fn RectIntegral(rect: core_foundation.CGRect) callconv(.C) core_foundation.CGRect;

pub extern "CoreGraphics" fn RectUnion(r1: core_foundation.CGRect, r2: core_foundation.CGRect) callconv(.C) core_foundation.CGRect;

pub extern "CoreGraphics" fn RectIntersection(r1: core_foundation.CGRect, r2: core_foundation.CGRect) callconv(.C) core_foundation.CGRect;

pub extern "CoreGraphics" fn RectOffset(rect: core_foundation.CGRect, dx: core_foundation.CGFloat, dy: core_foundation.CGFloat) callconv(.C) core_foundation.CGRect;

pub extern "CoreGraphics" fn RectDivide(rect: core_foundation.CGRect, slice: ?*core_foundation.CGRect, remainder: ?*core_foundation.CGRect, amount: core_foundation.CGFloat, edge: core_foundation.CGRectEdge, ) callconv(.C) void;

pub extern "CoreGraphics" fn RectContainsPoint(rect: core_foundation.CGRect, point: core_foundation.CGPoint) callconv(.C) i32;

pub extern "CoreGraphics" fn RectContainsRect(rect1: core_foundation.CGRect, rect2: core_foundation.CGRect) callconv(.C) i32;

pub extern "CoreGraphics" fn RectIntersectsRect(rect1: core_foundation.CGRect, rect2: core_foundation.CGRect) callconv(.C) i32;

pub extern "CoreGraphics" fn PointCreateDictionaryRepresentation(point: core_foundation.CGPoint) callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreGraphics" fn PointMakeWithDictionaryRepresentation(dict: core_foundation.DictionaryRef, point: ?*core_foundation.CGPoint) callconv(.C) i32;

pub extern "CoreGraphics" fn SizeCreateDictionaryRepresentation(size: core_foundation.CGSize) callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreGraphics" fn SizeMakeWithDictionaryRepresentation(dict: core_foundation.DictionaryRef, size: ?*core_foundation.CGSize) callconv(.C) i32;

pub extern "CoreGraphics" fn RectCreateDictionaryRepresentation(core_foundation.CGRect) callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreGraphics" fn RectMakeWithDictionaryRepresentation(dict: core_foundation.DictionaryRef, rect: ?*core_foundation.CGRect) callconv(.C) i32;

pub extern "CoreGraphics" fn __CGPointEqualToPoint(point1: core_foundation.CGPoint, point2: core_foundation.CGPoint) callconv(.C) i32;

pub extern "CoreGraphics" fn __CGSizeEqualToSize(size1: core_foundation.CGSize, size2: core_foundation.CGSize) callconv(.C) i32;

pub extern "CoreGraphics" fn AffineTransformMake(a: core_foundation.CGFloat, b: core_foundation.CGFloat, c: core_foundation.CGFloat, d: core_foundation.CGFloat, tx: core_foundation.CGFloat, ty: core_foundation.CGFloat, ) callconv(.C) core_foundation.CGAffineTransform;

pub extern "CoreGraphics" fn AffineTransformMakeTranslation(tx: core_foundation.CGFloat, ty: core_foundation.CGFloat) callconv(.C) core_foundation.CGAffineTransform;

pub extern "CoreGraphics" fn AffineTransformMakeScale(sx: core_foundation.CGFloat, sy: core_foundation.CGFloat) callconv(.C) core_foundation.CGAffineTransform;

pub extern "CoreGraphics" fn AffineTransformMakeRotation(angle: core_foundation.CGFloat) callconv(.C) core_foundation.CGAffineTransform;

pub extern "CoreGraphics" fn AffineTransformIsIdentity(t: core_foundation.CGAffineTransform) callconv(.C) i32;

pub extern "CoreGraphics" fn AffineTransformTranslate(t: core_foundation.CGAffineTransform, tx: core_foundation.CGFloat, ty: core_foundation.CGFloat) callconv(.C) core_foundation.CGAffineTransform;

pub extern "CoreGraphics" fn AffineTransformScale(t: core_foundation.CGAffineTransform, sx: core_foundation.CGFloat, sy: core_foundation.CGFloat) callconv(.C) core_foundation.CGAffineTransform;

pub extern "CoreGraphics" fn AffineTransformRotate(t: core_foundation.CGAffineTransform, angle: core_foundation.CGFloat) callconv(.C) core_foundation.CGAffineTransform;

pub extern "CoreGraphics" fn AffineTransformInvert(t: core_foundation.CGAffineTransform) callconv(.C) core_foundation.CGAffineTransform;

pub extern "CoreGraphics" fn AffineTransformConcat(t1: core_foundation.CGAffineTransform, t2: core_foundation.CGAffineTransform) callconv(.C) core_foundation.CGAffineTransform;

pub extern "CoreGraphics" fn AffineTransformEqualToTransform(t1: core_foundation.CGAffineTransform, t2: core_foundation.CGAffineTransform) callconv(.C) i32;

pub extern "CoreGraphics" fn PointApplyAffineTransform(point: core_foundation.CGPoint, t: core_foundation.CGAffineTransform) callconv(.C) core_foundation.CGPoint;

pub extern "CoreGraphics" fn SizeApplyAffineTransform(size: core_foundation.CGSize, t: core_foundation.CGAffineTransform) callconv(.C) core_foundation.CGSize;

pub extern "CoreGraphics" fn RectApplyAffineTransform(rect: core_foundation.CGRect, t: core_foundation.CGAffineTransform) callconv(.C) core_foundation.CGRect;

pub extern "CoreGraphics" fn AffineTransformDecompose(transform: core_foundation.CGAffineTransform) callconv(.C) core_foundation.CGAffineTransformComponents;

pub extern "CoreGraphics" fn AffineTransformMakeWithComponents(components: core_foundation.CGAffineTransformComponents) callconv(.C) core_foundation.CGAffineTransform;

pub extern "CoreGraphics" fn __CGAffineTransformMake(a: core_foundation.CGFloat, b: core_foundation.CGFloat, c: core_foundation.CGFloat, d: core_foundation.CGFloat, tx: core_foundation.CGFloat, ty: core_foundation.CGFloat, ) callconv(.C) core_foundation.CGAffineTransform;

pub extern "CoreGraphics" fn __CGPointApplyAffineTransform(point: core_foundation.CGPoint, t: core_foundation.CGAffineTransform) callconv(.C) core_foundation.CGPoint;

pub extern "CoreGraphics" fn __CGSizeApplyAffineTransform(size: core_foundation.CGSize, t: core_foundation.CGAffineTransform) callconv(.C) core_foundation.CGSize;

pub const Context = extern struct {};

pub const ContextRef = ?*Context;

pub const Color = extern struct {};

pub const ColorRef = ?*Color;

pub const ColorSpace = extern struct {};

pub const ColorSpaceRef = ?*ColorSpace;

pub const DataProvider = extern struct {};

pub const DataProviderRef = ?*DataProvider;

pub const DataProviderGetBytesCallback = ?*const fn(?*anyopaque, ?*anyopaque, objc.size_t) callconv(.C) objc.size_t;

pub const DataProviderSkipForwardCallback = ?*const fn(?*anyopaque, objc.off_t) callconv(.C) objc.off_t;

pub const DataProviderRewindCallback = ?*const fn(?*anyopaque) callconv(.C) void;

pub const DataProviderReleaseInfoCallback = ?*const fn(?*anyopaque) callconv(.C) void;

pub const DataProviderSequentialCallbacks = extern struct {
    version: u32,
    getBytes: DataProviderGetBytesCallback,
    skipForward: DataProviderSkipForwardCallback,
    rewind: DataProviderRewindCallback,
    releaseInfo: DataProviderReleaseInfoCallback,
};

pub const DataProviderGetBytePointerCallback = ?*const fn(?*anyopaque) callconv(.C) ?*anyopaque;

pub const DataProviderReleaseBytePointerCallback = ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) void;

pub const DataProviderGetBytesAtPositionCallback = ?*const fn(?*anyopaque, ?*anyopaque, objc.off_t, objc.size_t, ) callconv(.C) objc.size_t;

pub const DataProviderDirectCallbacks = extern struct {
    version: u32,
    getBytePointer: DataProviderGetBytePointerCallback,
    releaseBytePointer: DataProviderReleaseBytePointerCallback,
    getBytesAtPosition: DataProviderGetBytesAtPositionCallback,
    releaseInfo: DataProviderReleaseInfoCallback,
};

pub extern "CoreGraphics" fn DataProviderGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreGraphics" fn DataProviderCreateSequential(info: ?*anyopaque, callbacks: ?*DataProviderSequentialCallbacks) callconv(.C) DataProviderRef;

pub extern "CoreGraphics" fn DataProviderCreateDirect(info: ?*anyopaque, size: objc.off_t, callbacks: ?*DataProviderDirectCallbacks) callconv(.C) DataProviderRef;

pub const DataProviderReleaseDataCallback = ?*const fn(?*anyopaque, ?*anyopaque, objc.size_t) callconv(.C) void;

pub extern "CoreGraphics" fn DataProviderCreateWithData(info: ?*anyopaque, data: ?*anyopaque, size: objc.size_t, releaseData: DataProviderReleaseDataCallback, ) callconv(.C) DataProviderRef;

pub extern "CoreGraphics" fn DataProviderCreateWithCFData(data: core_foundation.DataRef) callconv(.C) DataProviderRef;

pub extern "CoreGraphics" fn DataProviderCreateWithURL(url: core_foundation.URLRef) callconv(.C) DataProviderRef;

pub extern "CoreGraphics" fn DataProviderCreateWithFilename(filename: ?*i8) callconv(.C) DataProviderRef;

pub extern "CoreGraphics" fn DataProviderRetain(provider: DataProviderRef) callconv(.C) DataProviderRef;

pub extern "CoreGraphics" fn DataProviderRelease(provider: DataProviderRef) callconv(.C) void;

pub extern "CoreGraphics" fn DataProviderCopyData(provider: DataProviderRef) callconv(.C) core_foundation.DataRef;

pub extern "CoreGraphics" fn DataProviderGetInfo(provider: DataProviderRef) callconv(.C) ?*anyopaque;

pub const ColorRenderingIntent = enum(objc.int32_t) {
    kCGRenderingIntentDefault = 0,
    kCGRenderingIntentAbsoluteColorimetric = 1,
    kCGRenderingIntentRelativeColorimetric = 2,
    kCGRenderingIntentPerceptual = 3,
    kCGRenderingIntentSaturation = 4,
};

pub const ColorSpaceModel = enum(objc.int32_t) {
    kCGColorSpaceModelUnknown = -1,
    kCGColorSpaceModelMonochrome = 0,
    kCGColorSpaceModelRGB = 1,
    kCGColorSpaceModelCMYK = 2,
    kCGColorSpaceModelLab = 3,
    kCGColorSpaceModelDeviceN = 4,
    kCGColorSpaceModelIndexed = 5,
    kCGColorSpaceModelPattern = 6,
    kCGColorSpaceModelXYZ = 7,
};

pub extern "CoreGraphics" fn ColorSpaceCreateDeviceGray() callconv(.C) ColorSpaceRef;

pub extern "CoreGraphics" fn ColorSpaceCreateDeviceRGB() callconv(.C) ColorSpaceRef;

pub extern "CoreGraphics" fn ColorSpaceCreateDeviceCMYK() callconv(.C) ColorSpaceRef;

pub extern "CoreGraphics" fn ColorSpaceCreateCalibratedGray(whitePoint: ?*core_foundation.CGFloat, blackPoint: ?*core_foundation.CGFloat, gamma: core_foundation.CGFloat) callconv(.C) ColorSpaceRef;

pub extern "CoreGraphics" fn ColorSpaceCreateCalibratedRGB(whitePoint: ?*core_foundation.CGFloat, blackPoint: ?*core_foundation.CGFloat, gamma: ?*core_foundation.CGFloat, matrix: ?*core_foundation.CGFloat, ) callconv(.C) ColorSpaceRef;

pub extern "CoreGraphics" fn ColorSpaceCreateLab(whitePoint: ?*core_foundation.CGFloat, blackPoint: ?*core_foundation.CGFloat, range: ?*core_foundation.CGFloat) callconv(.C) ColorSpaceRef;

pub extern "CoreGraphics" fn ColorSpaceCreateWithICCData(data: core_foundation.TypeRef) callconv(.C) ColorSpaceRef;

pub extern "CoreGraphics" fn ColorSpaceCreateICCBased(nComponents: objc.size_t, range: ?*core_foundation.CGFloat, profile: DataProviderRef, alternate: ColorSpaceRef, ) callconv(.C) ColorSpaceRef;

pub extern "CoreGraphics" fn ColorSpaceCreateIndexed(baseSpace: ColorSpaceRef, lastIndex: objc.size_t, colorTable: ?*u8) callconv(.C) ColorSpaceRef;

pub extern "CoreGraphics" fn ColorSpaceCreatePattern(baseSpace: ColorSpaceRef) callconv(.C) ColorSpaceRef;

pub const ColorSyncProfile = extern struct {};

pub const ColorSyncProfileRef = ?*ColorSyncProfile;

pub extern "CoreGraphics" fn ColorSpaceCreateWithColorSyncProfile(ColorSyncProfileRef, options: core_foundation.DictionaryRef) callconv(.C) ColorSpaceRef;

pub extern "CoreGraphics" fn ColorSpaceCreateWithName(name: core_foundation.StringRef) callconv(.C) ColorSpaceRef;

pub extern "CoreGraphics" fn ColorSpaceRetain(space: ColorSpaceRef) callconv(.C) ColorSpaceRef;

pub extern "CoreGraphics" fn ColorSpaceRelease(space: ColorSpaceRef) callconv(.C) void;

pub extern "CoreGraphics" fn ColorSpaceGetName(space: ColorSpaceRef) callconv(.C) core_foundation.StringRef;

pub extern "CoreGraphics" fn ColorSpaceCopyName(space: ColorSpaceRef) callconv(.C) core_foundation.StringRef;

pub extern "CoreGraphics" fn ColorSpaceGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreGraphics" fn ColorSpaceGetNumberOfComponents(space: ColorSpaceRef) callconv(.C) objc.size_t;

pub extern "CoreGraphics" fn ColorSpaceGetModel(space: ColorSpaceRef) callconv(.C) ColorSpaceModel;

pub extern "CoreGraphics" fn ColorSpaceGetBaseColorSpace(space: ColorSpaceRef) callconv(.C) ColorSpaceRef;

pub extern "CoreGraphics" fn ColorSpaceCopyBaseColorSpace(space: ColorSpaceRef) callconv(.C) ColorSpaceRef;

pub extern "CoreGraphics" fn ColorSpaceGetColorTableCount(space: ColorSpaceRef) callconv(.C) objc.size_t;

pub extern "CoreGraphics" fn ColorSpaceGetColorTable(space: ColorSpaceRef, table: ?*objc.uint8_t) callconv(.C) void;

pub extern "CoreGraphics" fn ColorSpaceCopyICCData(space: ColorSpaceRef) callconv(.C) core_foundation.DataRef;

pub extern "CoreGraphics" fn ColorSpaceIsWideGamutRGB(ColorSpaceRef) callconv(.C) i32;

pub extern "CoreGraphics" fn ColorSpaceIsHDR(ColorSpaceRef) callconv(.C) i32;

pub extern "CoreGraphics" fn ColorSpaceUsesITUR_2100TF(ColorSpaceRef) callconv(.C) i32;

pub extern "CoreGraphics" fn ColorSpaceIsPQBased(s: ColorSpaceRef) callconv(.C) i32;

pub extern "CoreGraphics" fn ColorSpaceIsHLGBased(s: ColorSpaceRef) callconv(.C) i32;

pub extern "CoreGraphics" fn ColorSpaceSupportsOutput(space: ColorSpaceRef) callconv(.C) i32;

pub extern "CoreGraphics" fn ColorSpaceCopyPropertyList(space: ColorSpaceRef) callconv(.C) core_foundation.PropertyListRef;

pub extern "CoreGraphics" fn ColorSpaceCreateWithPropertyList(plist: core_foundation.PropertyListRef) callconv(.C) ColorSpaceRef;

pub extern "CoreGraphics" fn ColorSpaceUsesExtendedRange(space: ColorSpaceRef) callconv(.C) i32;

pub extern "CoreGraphics" fn ColorSpaceCreateLinearized(space: ColorSpaceRef) callconv(.C) ColorSpaceRef;

pub extern "CoreGraphics" fn ColorSpaceCreateExtended(space: ColorSpaceRef) callconv(.C) ColorSpaceRef;

pub extern "CoreGraphics" fn ColorSpaceCreateExtendedLinearized(space: ColorSpaceRef) callconv(.C) ColorSpaceRef;

pub extern "CoreGraphics" fn ColorSpaceCreateCopyWithStandardRange(s: ColorSpaceRef) callconv(.C) ColorSpaceRef;

pub extern "CoreGraphics" fn ColorSpaceCreateWithICCProfile(data: core_foundation.DataRef) callconv(.C) ColorSpaceRef;

pub extern "CoreGraphics" fn ColorSpaceCopyICCProfile(space: ColorSpaceRef) callconv(.C) core_foundation.DataRef;

pub extern "CoreGraphics" fn ColorSpaceCreateWithPlatformColorSpace(ref: ?*anyopaque) callconv(.C) ColorSpaceRef;

pub const Pattern = extern struct {};

pub const PatternRef = ?*Pattern;

pub const PatternTiling = enum(objc.int32_t) {
    kCGPatternTilingNoDistortion = 0,
    kCGPatternTilingConstantSpacingMinimalDistortion = 1,
    kCGPatternTilingConstantSpacing = 2,
};

pub const PatternDrawPatternCallback = ?*const fn(?*anyopaque, ContextRef) callconv(.C) void;

pub const PatternReleaseInfoCallback = ?*const fn(?*anyopaque) callconv(.C) void;

pub const PatternCallbacks = extern struct {
    version: u32,
    drawPattern: PatternDrawPatternCallback,
    releaseInfo: PatternReleaseInfoCallback,
};

pub extern "CoreGraphics" fn PatternGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreGraphics" fn PatternCreate(info: ?*anyopaque, bounds: core_foundation.CGRect, matrix: core_foundation.CGAffineTransform, xStep: core_foundation.CGFloat, yStep: core_foundation.CGFloat, tiling: PatternTiling, isColored: i32, callbacks: ?*PatternCallbacks, ) callconv(.C) PatternRef;

pub extern "CoreGraphics" fn PatternRetain(pattern: PatternRef) callconv(.C) PatternRef;

pub extern "CoreGraphics" fn PatternRelease(pattern: PatternRef) callconv(.C) void;

pub extern "CoreGraphics" fn ColorCreate(space: ColorSpaceRef, components: ?*core_foundation.CGFloat) callconv(.C) ColorRef;

pub extern "CoreGraphics" fn ColorCreateGenericGray(gray: core_foundation.CGFloat, alpha: core_foundation.CGFloat) callconv(.C) ColorRef;

pub extern "CoreGraphics" fn ColorCreateGenericRGB(red: core_foundation.CGFloat, green: core_foundation.CGFloat, blue: core_foundation.CGFloat, alpha: core_foundation.CGFloat, ) callconv(.C) ColorRef;

pub extern "CoreGraphics" fn ColorCreateGenericCMYK(cyan: core_foundation.CGFloat, magenta: core_foundation.CGFloat, yellow: core_foundation.CGFloat, black: core_foundation.CGFloat, alpha: core_foundation.CGFloat, ) callconv(.C) ColorRef;

pub extern "CoreGraphics" fn ColorCreateGenericGrayGamma2_2(gray: core_foundation.CGFloat, alpha: core_foundation.CGFloat) callconv(.C) ColorRef;

pub extern "CoreGraphics" fn ColorCreateSRGB(red: core_foundation.CGFloat, green: core_foundation.CGFloat, blue: core_foundation.CGFloat, alpha: core_foundation.CGFloat, ) callconv(.C) ColorRef;

pub extern "CoreGraphics" fn ColorGetConstantColor(colorName: core_foundation.StringRef) callconv(.C) ColorRef;

pub extern "CoreGraphics" fn ColorCreateWithPattern(space: ColorSpaceRef, pattern: PatternRef, components: ?*core_foundation.CGFloat) callconv(.C) ColorRef;

pub extern "CoreGraphics" fn ColorCreateCopy(color: ColorRef) callconv(.C) ColorRef;

pub extern "CoreGraphics" fn ColorCreateCopyWithAlpha(color: ColorRef, alpha: core_foundation.CGFloat) callconv(.C) ColorRef;

pub extern "CoreGraphics" fn ColorCreateCopyByMatchingToColorSpace(ColorSpaceRef, intent: ColorRenderingIntent, color: ColorRef, options: core_foundation.DictionaryRef, ) callconv(.C) ColorRef;

pub extern "CoreGraphics" fn ColorRetain(color: ColorRef) callconv(.C) ColorRef;

pub extern "CoreGraphics" fn ColorRelease(color: ColorRef) callconv(.C) void;

pub extern "CoreGraphics" fn ColorEqualToColor(color1: ColorRef, color2: ColorRef) callconv(.C) i32;

pub extern "CoreGraphics" fn ColorGetNumberOfComponents(color: ColorRef) callconv(.C) objc.size_t;

pub extern "CoreGraphics" fn ColorGetComponents(color: ColorRef) callconv(.C) ?*core_foundation.CGFloat;

pub extern "CoreGraphics" fn ColorGetAlpha(color: ColorRef) callconv(.C) core_foundation.CGFloat;

pub extern "CoreGraphics" fn ColorGetColorSpace(color: ColorRef) callconv(.C) ColorSpaceRef;

pub extern "CoreGraphics" fn ColorGetPattern(color: ColorRef) callconv(.C) PatternRef;

pub extern "CoreGraphics" fn ColorGetTypeID() callconv(.C) core_foundation.TypeID;

pub const Font = extern struct {};

pub const FontRef = ?*Font;

pub const FontIndex = u16;

pub const Glyph = FontIndex;

pub const FontPostScriptFormat = enum(objc.int32_t) {
    kCGFontPostScriptFormatType1 = 1,
    kCGFontPostScriptFormatType3 = 3,
    kCGFontPostScriptFormatType42 = 42,
};

pub extern "CoreGraphics" fn FontGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreGraphics" fn FontCreateWithPlatformFont(platformFontReference: ?*anyopaque) callconv(.C) FontRef;

pub extern "CoreGraphics" fn FontCreateWithDataProvider(provider: DataProviderRef) callconv(.C) FontRef;

pub extern "CoreGraphics" fn FontCreateWithFontName(name: core_foundation.StringRef) callconv(.C) FontRef;

pub extern "CoreGraphics" fn FontCreateCopyWithVariations(font: FontRef, variations: core_foundation.DictionaryRef) callconv(.C) FontRef;

pub extern "CoreGraphics" fn FontRetain(font: FontRef) callconv(.C) FontRef;

pub extern "CoreGraphics" fn FontRelease(font: FontRef) callconv(.C) void;

pub extern "CoreGraphics" fn FontGetNumberOfGlyphs(font: FontRef) callconv(.C) objc.size_t;

pub extern "CoreGraphics" fn FontGetUnitsPerEm(font: FontRef) callconv(.C) i32;

pub extern "CoreGraphics" fn FontCopyPostScriptName(font: FontRef) callconv(.C) core_foundation.StringRef;

pub extern "CoreGraphics" fn FontCopyFullName(font: FontRef) callconv(.C) core_foundation.StringRef;

pub extern "CoreGraphics" fn FontGetAscent(font: FontRef) callconv(.C) i32;

pub extern "CoreGraphics" fn FontGetDescent(font: FontRef) callconv(.C) i32;

pub extern "CoreGraphics" fn FontGetLeading(font: FontRef) callconv(.C) i32;

pub extern "CoreGraphics" fn FontGetCapHeight(font: FontRef) callconv(.C) i32;

pub extern "CoreGraphics" fn FontGetXHeight(font: FontRef) callconv(.C) i32;

pub extern "CoreGraphics" fn FontGetFontBBox(font: FontRef) callconv(.C) core_foundation.CGRect;

pub extern "CoreGraphics" fn FontGetItalicAngle(font: FontRef) callconv(.C) core_foundation.CGFloat;

pub extern "CoreGraphics" fn FontGetStemV(font: FontRef) callconv(.C) core_foundation.CGFloat;

pub extern "CoreGraphics" fn FontCopyVariationAxes(font: FontRef) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreGraphics" fn FontCopyVariations(font: FontRef) callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreGraphics" fn FontGetGlyphAdvances(font: FontRef, glyphs: ?*Glyph, count: objc.size_t, advances: ?*i32, ) callconv(.C) i32;

pub extern "CoreGraphics" fn FontGetGlyphBBoxes(font: FontRef, glyphs: ?*Glyph, count: objc.size_t, bboxes: ?*core_foundation.CGRect, ) callconv(.C) i32;

pub extern "CoreGraphics" fn FontGetGlyphWithGlyphName(font: FontRef, name: core_foundation.StringRef) callconv(.C) Glyph;

pub extern "CoreGraphics" fn FontCopyGlyphNameForGlyph(font: FontRef, glyph: Glyph) callconv(.C) core_foundation.StringRef;

pub extern "CoreGraphics" fn FontCanCreatePostScriptSubset(font: FontRef, format: FontPostScriptFormat) callconv(.C) i32;

pub extern "CoreGraphics" fn FontCreatePostScriptSubset(font: FontRef, subsetName: core_foundation.StringRef, format: FontPostScriptFormat, glyphs: ?*Glyph, count: objc.size_t, encoding: ?*Glyph, ) callconv(.C) core_foundation.DataRef;

pub extern "CoreGraphics" fn FontCreatePostScriptEncoding(font: FontRef, encoding: ?*Glyph) callconv(.C) core_foundation.DataRef;

pub extern "CoreGraphics" fn FontCopyTableTags(font: FontRef) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreGraphics" fn FontCopyTableForTag(font: FontRef, tag: objc.uint32_t) callconv(.C) core_foundation.DataRef;

pub const GlyphDeprecatedEnum = enum(objc.int32_t) {
    Min = 0,
    Max = 1,
};

pub const Gradient = extern struct {};

pub const GradientRef = ?*Gradient;

pub const GradientDrawingOptions = enum(objc.uint32_t) {
    kCGGradientDrawsBeforeStartLocation = 1,
    kCGGradientDrawsAfterEndLocation = 2,
};

pub extern "CoreGraphics" fn GradientGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreGraphics" fn GradientCreateWithColorComponents(space: ColorSpaceRef, components: ?*core_foundation.CGFloat, locations: ?*core_foundation.CGFloat, count: objc.size_t, ) callconv(.C) GradientRef;

pub extern "CoreGraphics" fn GradientCreateWithColors(space: ColorSpaceRef, colors: core_foundation.ArrayRef, locations: ?*core_foundation.CGFloat) callconv(.C) GradientRef;

pub extern "CoreGraphics" fn GradientRetain(gradient: GradientRef) callconv(.C) GradientRef;

pub extern "CoreGraphics" fn GradientRelease(gradient: GradientRef) callconv(.C) void;

pub const Image = extern struct {};

pub const ImageRef = ?*Image;

pub const ImageAlphaInfo = enum(objc.uint32_t) {
    kCGImageAlphaNone = 0,
    kCGImageAlphaPremultipliedLast = 1,
    kCGImageAlphaPremultipliedFirst = 2,
    kCGImageAlphaLast = 3,
    kCGImageAlphaFirst = 4,
    kCGImageAlphaNoneSkipLast = 5,
    kCGImageAlphaNoneSkipFirst = 6,
    kCGImageAlphaOnly = 7,
};

pub const ImageByteOrderInfo = enum(objc.uint32_t) {
    kCGImageByteOrderMask = 28672,
    kCGImageByteOrderDefault = 0,
    kCGImageByteOrder16Little = 4096,
    kCGImageByteOrder32Little = 8192,
    kCGImageByteOrder16Big = 12288,
    kCGImageByteOrder32Big = 16384,
};

pub const ImagePixelFormatInfo = enum(objc.uint32_t) {
    kCGImagePixelFormatMask = 983040,
    kCGImagePixelFormatPacked = 0,
    kCGImagePixelFormatRGB555 = 65536,
    kCGImagePixelFormatRGB565 = 131072,
    kCGImagePixelFormatRGB101010 = 196608,
    kCGImagePixelFormatRGBCIF10 = 262144,
};

pub const BitmapInfo = enum(objc.uint32_t) {
    kCGBitmapAlphaInfoMask = 31,
    kCGBitmapFloatInfoMask = 3840,
    kCGBitmapFloatComponents = 256,
    kCGBitmapByteOrderMask = 28672,
    kCGBitmapByteOrderDefault = 0,
    kCGBitmapByteOrder16Little = 4096,
    kCGBitmapByteOrder32Little = 8192,
    kCGBitmapByteOrder16Big = 12288,
    kCGBitmapByteOrder32Big = 16384,
};

pub extern "CoreGraphics" fn ImageGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreGraphics" fn ImageCreate(width: objc.size_t, height: objc.size_t, bitsPerComponent: objc.size_t, bitsPerPixel: objc.size_t, bytesPerRow: objc.size_t, space: ColorSpaceRef, bitmapInfo: BitmapInfo, provider: DataProviderRef, decode: ?*core_foundation.CGFloat, shouldInterpolate: i32, intent: ColorRenderingIntent, ) callconv(.C) ImageRef;

pub extern "CoreGraphics" fn ImageMaskCreate(width: objc.size_t, height: objc.size_t, bitsPerComponent: objc.size_t, bitsPerPixel: objc.size_t, bytesPerRow: objc.size_t, provider: DataProviderRef, decode: ?*core_foundation.CGFloat, shouldInterpolate: i32, ) callconv(.C) ImageRef;

pub extern "CoreGraphics" fn ImageCreateCopy(image: ImageRef) callconv(.C) ImageRef;

pub extern "CoreGraphics" fn ImageCreateWithJPEGDataProvider(source: DataProviderRef, decode: ?*core_foundation.CGFloat, shouldInterpolate: i32, intent: ColorRenderingIntent, ) callconv(.C) ImageRef;

pub extern "CoreGraphics" fn ImageCreateWithPNGDataProvider(source: DataProviderRef, decode: ?*core_foundation.CGFloat, shouldInterpolate: i32, intent: ColorRenderingIntent, ) callconv(.C) ImageRef;

pub extern "CoreGraphics" fn ImageCreateWithImageInRect(image: ImageRef, rect: core_foundation.CGRect) callconv(.C) ImageRef;

pub extern "CoreGraphics" fn ImageCreateWithMask(image: ImageRef, mask: ImageRef) callconv(.C) ImageRef;

pub extern "CoreGraphics" fn ImageCreateWithMaskingColors(image: ImageRef, components: ?*core_foundation.CGFloat) callconv(.C) ImageRef;

pub extern "CoreGraphics" fn ImageCreateCopyWithColorSpace(image: ImageRef, space: ColorSpaceRef) callconv(.C) ImageRef;

pub extern "CoreGraphics" fn ImageCreateWithContentHeadroom(headroom: f32, width: objc.size_t, height: objc.size_t, bitsPerComponent: objc.size_t, bitsPerPixel: objc.size_t, bytesPerRow: objc.size_t, space: ColorSpaceRef, bitmapInfo: BitmapInfo, provider: DataProviderRef, decode: ?*core_foundation.CGFloat, shouldInterpolate: i32, intent: ColorRenderingIntent, ) callconv(.C) ImageRef;

pub extern "CoreGraphics" fn ImageCreateCopyWithContentHeadroom(headroom: f32, image: ImageRef) callconv(.C) ImageRef;

pub extern "CoreGraphics" fn ImageGetContentHeadroom(image: ImageRef) callconv(.C) f32;

pub extern "CoreGraphics" fn ImageRetain(image: ImageRef) callconv(.C) ImageRef;

pub extern "CoreGraphics" fn ImageRelease(image: ImageRef) callconv(.C) void;

pub extern "CoreGraphics" fn ImageIsMask(image: ImageRef) callconv(.C) i32;

pub extern "CoreGraphics" fn ImageGetWidth(image: ImageRef) callconv(.C) objc.size_t;

pub extern "CoreGraphics" fn ImageGetHeight(image: ImageRef) callconv(.C) objc.size_t;

pub extern "CoreGraphics" fn ImageGetBitsPerComponent(image: ImageRef) callconv(.C) objc.size_t;

pub extern "CoreGraphics" fn ImageGetBitsPerPixel(image: ImageRef) callconv(.C) objc.size_t;

pub extern "CoreGraphics" fn ImageGetBytesPerRow(image: ImageRef) callconv(.C) objc.size_t;

pub extern "CoreGraphics" fn ImageGetColorSpace(image: ImageRef) callconv(.C) ColorSpaceRef;

pub extern "CoreGraphics" fn ImageGetAlphaInfo(image: ImageRef) callconv(.C) ImageAlphaInfo;

pub extern "CoreGraphics" fn ImageGetDataProvider(image: ImageRef) callconv(.C) DataProviderRef;

pub extern "CoreGraphics" fn ImageGetDecode(image: ImageRef) callconv(.C) ?*core_foundation.CGFloat;

pub extern "CoreGraphics" fn ImageGetShouldInterpolate(image: ImageRef) callconv(.C) i32;

pub extern "CoreGraphics" fn ImageGetRenderingIntent(image: ImageRef) callconv(.C) ColorRenderingIntent;

pub extern "CoreGraphics" fn ImageGetBitmapInfo(image: ImageRef) callconv(.C) BitmapInfo;

pub extern "CoreGraphics" fn ImageGetByteOrderInfo(image: ImageRef) callconv(.C) ImageByteOrderInfo;

pub extern "CoreGraphics" fn ImageGetPixelFormatInfo(image: ImageRef) callconv(.C) ImagePixelFormatInfo;

pub extern "CoreGraphics" fn ImageShouldToneMap(image: ImageRef) callconv(.C) i32;

pub extern "CoreGraphics" fn ImageContainsImageSpecificToneMappingMetadata(image: ImageRef) callconv(.C) i32;

pub extern "CoreGraphics" fn ImageGetUTType(image: ImageRef) callconv(.C) core_foundation.StringRef;

pub const Path = extern struct {};

pub const MutablePathRef = ?*Path;

pub const PathRef = ?*Path;

pub const LineJoin = enum(objc.int32_t) {
    kCGLineJoinMiter = 0,
    kCGLineJoinRound = 1,
    kCGLineJoinBevel = 2,
};

pub const LineCap = enum(objc.int32_t) {
    kCGLineCapButt = 0,
    kCGLineCapRound = 1,
    kCGLineCapSquare = 2,
};

pub extern "CoreGraphics" fn PathGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreGraphics" fn PathCreateMutable() callconv(.C) MutablePathRef;

pub extern "CoreGraphics" fn PathCreateCopy(path: PathRef) callconv(.C) PathRef;

pub extern "CoreGraphics" fn PathCreateCopyByTransformingPath(path: PathRef, transform: ?*core_foundation.CGAffineTransform) callconv(.C) PathRef;

pub extern "CoreGraphics" fn PathCreateMutableCopy(path: PathRef) callconv(.C) MutablePathRef;

pub extern "CoreGraphics" fn PathCreateMutableCopyByTransformingPath(path: PathRef, transform: ?*core_foundation.CGAffineTransform) callconv(.C) MutablePathRef;

pub extern "CoreGraphics" fn PathCreateWithRect(rect: core_foundation.CGRect, transform: ?*core_foundation.CGAffineTransform) callconv(.C) PathRef;

pub extern "CoreGraphics" fn PathCreateWithEllipseInRect(rect: core_foundation.CGRect, transform: ?*core_foundation.CGAffineTransform) callconv(.C) PathRef;

pub extern "CoreGraphics" fn PathCreateWithRoundedRect(rect: core_foundation.CGRect, cornerWidth: core_foundation.CGFloat, cornerHeight: core_foundation.CGFloat, transform: ?*core_foundation.CGAffineTransform, ) callconv(.C) PathRef;

pub extern "CoreGraphics" fn PathAddRoundedRect(path: MutablePathRef, transform: ?*core_foundation.CGAffineTransform, rect: core_foundation.CGRect, cornerWidth: core_foundation.CGFloat, cornerHeight: core_foundation.CGFloat, ) callconv(.C) void;

pub extern "CoreGraphics" fn PathCreateCopyByDashingPath(path: PathRef, transform: ?*core_foundation.CGAffineTransform, phase: core_foundation.CGFloat, lengths: ?*core_foundation.CGFloat, count: objc.size_t, ) callconv(.C) PathRef;

pub extern "CoreGraphics" fn PathCreateCopyByStrokingPath(path: PathRef, transform: ?*core_foundation.CGAffineTransform, lineWidth: core_foundation.CGFloat, lineCap: LineCap, lineJoin: LineJoin, miterLimit: core_foundation.CGFloat, ) callconv(.C) PathRef;

pub extern "CoreGraphics" fn PathRetain(path: PathRef) callconv(.C) PathRef;

pub extern "CoreGraphics" fn PathRelease(path: PathRef) callconv(.C) void;

pub extern "CoreGraphics" fn PathEqualToPath(path1: PathRef, path2: PathRef) callconv(.C) i32;

pub extern "CoreGraphics" fn PathMoveToPoint(path: MutablePathRef, m: ?*core_foundation.CGAffineTransform, x: core_foundation.CGFloat, y: core_foundation.CGFloat, ) callconv(.C) void;

pub extern "CoreGraphics" fn PathAddLineToPoint(path: MutablePathRef, m: ?*core_foundation.CGAffineTransform, x: core_foundation.CGFloat, y: core_foundation.CGFloat, ) callconv(.C) void;

pub extern "CoreGraphics" fn PathAddQuadCurveToPoint(path: MutablePathRef, m: ?*core_foundation.CGAffineTransform, cpx: core_foundation.CGFloat, cpy: core_foundation.CGFloat, x: core_foundation.CGFloat, y: core_foundation.CGFloat, ) callconv(.C) void;

pub extern "CoreGraphics" fn PathAddCurveToPoint(path: MutablePathRef, m: ?*core_foundation.CGAffineTransform, cp1x: core_foundation.CGFloat, cp1y: core_foundation.CGFloat, cp2x: core_foundation.CGFloat, cp2y: core_foundation.CGFloat, x: core_foundation.CGFloat, y: core_foundation.CGFloat, ) callconv(.C) void;

pub extern "CoreGraphics" fn PathCloseSubpath(path: MutablePathRef) callconv(.C) void;

pub extern "CoreGraphics" fn PathAddRect(path: MutablePathRef, m: ?*core_foundation.CGAffineTransform, rect: core_foundation.CGRect) callconv(.C) void;

pub extern "CoreGraphics" fn PathAddRects(path: MutablePathRef, m: ?*core_foundation.CGAffineTransform, rects: ?*core_foundation.CGRect, count: objc.size_t, ) callconv(.C) void;

pub extern "CoreGraphics" fn PathAddLines(path: MutablePathRef, m: ?*core_foundation.CGAffineTransform, points: ?*core_foundation.CGPoint, count: objc.size_t, ) callconv(.C) void;

pub extern "CoreGraphics" fn PathAddEllipseInRect(path: MutablePathRef, m: ?*core_foundation.CGAffineTransform, rect: core_foundation.CGRect) callconv(.C) void;

pub extern "CoreGraphics" fn PathAddRelativeArc(path: MutablePathRef, matrix: ?*core_foundation.CGAffineTransform, x: core_foundation.CGFloat, y: core_foundation.CGFloat, radius: core_foundation.CGFloat, startAngle: core_foundation.CGFloat, delta: core_foundation.CGFloat, ) callconv(.C) void;

pub extern "CoreGraphics" fn PathAddArc(path: MutablePathRef, m: ?*core_foundation.CGAffineTransform, x: core_foundation.CGFloat, y: core_foundation.CGFloat, radius: core_foundation.CGFloat, startAngle: core_foundation.CGFloat, endAngle: core_foundation.CGFloat, clockwise: i32, ) callconv(.C) void;

pub extern "CoreGraphics" fn PathAddArcToPoint(path: MutablePathRef, m: ?*core_foundation.CGAffineTransform, x1: core_foundation.CGFloat, y1: core_foundation.CGFloat, x2: core_foundation.CGFloat, y2: core_foundation.CGFloat, radius: core_foundation.CGFloat, ) callconv(.C) void;

pub extern "CoreGraphics" fn PathAddPath(path1: MutablePathRef, m: ?*core_foundation.CGAffineTransform, path2: PathRef) callconv(.C) void;

pub extern "CoreGraphics" fn PathIsEmpty(path: PathRef) callconv(.C) i32;

pub extern "CoreGraphics" fn PathIsRect(path: PathRef, rect: ?*core_foundation.CGRect) callconv(.C) i32;

pub extern "CoreGraphics" fn PathGetCurrentPoint(path: PathRef) callconv(.C) core_foundation.CGPoint;

pub extern "CoreGraphics" fn PathGetBoundingBox(path: PathRef) callconv(.C) core_foundation.CGRect;

pub extern "CoreGraphics" fn PathGetPathBoundingBox(path: PathRef) callconv(.C) core_foundation.CGRect;

pub extern "CoreGraphics" fn PathContainsPoint(path: PathRef, m: ?*core_foundation.CGAffineTransform, point: core_foundation.CGPoint, eoFill: i32, ) callconv(.C) i32;

pub const PathElementType = enum(objc.int32_t) {
    kCGPathElementMoveToPoint = 0,
    kCGPathElementAddLineToPoint = 1,
    kCGPathElementAddQuadCurveToPoint = 2,
    kCGPathElementAddCurveToPoint = 3,
    kCGPathElementCloseSubpath = 4,
};

pub const PathElement = extern struct {
    @"type": PathElementType,
    points: ?*core_foundation.CGPoint,
};

pub const PathApplierFunction = ?*const fn(?*anyopaque, ?*PathElement) callconv(.C) void;

pub extern "CoreGraphics" fn PathApply(path: PathRef, info: ?*anyopaque, function: PathApplierFunction) callconv(.C) void;

pub const PathApplyBlock = *const fn(?*PathElement) callconv(.C) void;

pub extern "CoreGraphics" fn PathApplyWithBlock(path: PathRef, block: PathApplyBlock) callconv(.C) void;

pub extern "CoreGraphics" fn PathCreateCopyByNormalizing(path: PathRef, evenOddFillRule: i32) callconv(.C) PathRef;

pub extern "CoreGraphics" fn PathCreateCopyByUnioningPath(path: PathRef, maskPath: PathRef, evenOddFillRule: i32) callconv(.C) PathRef;

pub extern "CoreGraphics" fn PathCreateCopyByIntersectingPath(path: PathRef, maskPath: PathRef, evenOddFillRule: i32) callconv(.C) PathRef;

pub extern "CoreGraphics" fn PathCreateCopyBySubtractingPath(path: PathRef, maskPath: PathRef, evenOddFillRule: i32) callconv(.C) PathRef;

pub extern "CoreGraphics" fn PathCreateCopyBySymmetricDifferenceOfPath(path: PathRef, maskPath: PathRef, evenOddFillRule: i32) callconv(.C) PathRef;

pub extern "CoreGraphics" fn PathCreateCopyOfLineBySubtractingPath(path: PathRef, maskPath: PathRef, evenOddFillRule: i32) callconv(.C) PathRef;

pub extern "CoreGraphics" fn PathCreateCopyOfLineByIntersectingPath(path: PathRef, maskPath: PathRef, evenOddFillRule: i32) callconv(.C) PathRef;

pub extern "CoreGraphics" fn PathCreateSeparateComponents(path: PathRef, evenOddFillRule: i32) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreGraphics" fn PathCreateCopyByFlattening(path: PathRef, flatteningThreshold: core_foundation.CGFloat) callconv(.C) PathRef;

pub extern "CoreGraphics" fn PathIntersectsPath(path1: PathRef, path2: PathRef, evenOddFillRule: i32) callconv(.C) i32;

pub const PDFDocument = extern struct {};

pub const PDFDocumentRef = ?*PDFDocument;

pub const PDFPage = extern struct {};

pub const PDFPageRef = ?*PDFPage;

pub const PDFDictionary = extern struct {};

pub const PDFDictionaryRef = ?*PDFDictionary;

pub const PDFArray = extern struct {};

pub const PDFArrayRef = ?*PDFArray;

pub const PDFBoolean = u8;

pub const PDFInteger = i64;

pub const PDFReal = core_foundation.CGFloat;

pub const PDFObject = extern struct {};

pub const PDFObjectRef = ?*PDFObject;

pub const PDFObjectType = enum(objc.int32_t) {
    kCGPDFObjectTypeNull = 1,
    kCGPDFObjectTypeBoolean = 2,
    kCGPDFObjectTypeInteger = 3,
    kCGPDFObjectTypeReal = 4,
    kCGPDFObjectTypeName = 5,
    kCGPDFObjectTypeString = 6,
    kCGPDFObjectTypeArray = 7,
    kCGPDFObjectTypeDictionary = 8,
    kCGPDFObjectTypeStream = 9,
};

pub extern "CoreGraphics" fn PDFObjectGetType(object: PDFObjectRef) callconv(.C) PDFObjectType;

pub extern "CoreGraphics" fn PDFObjectGetValue(object: PDFObjectRef, @"type": PDFObjectType, value: ?*anyopaque) callconv(.C) i32;

pub const PDFStream = extern struct {};

pub const PDFStreamRef = ?*PDFStream;

pub const PDFDataFormat = enum(objc.int32_t) {
    Raw = 0,
    JPEGEncoded = 1,
    JPEG2000 = 2,
};

pub extern "CoreGraphics" fn PDFStreamGetDictionary(stream: PDFStreamRef) callconv(.C) PDFDictionaryRef;

pub extern "CoreGraphics" fn PDFStreamCopyData(stream: PDFStreamRef, format: ?*PDFDataFormat) callconv(.C) core_foundation.DataRef;

pub const PDFString = extern struct {};

pub const PDFStringRef = ?*PDFString;

pub extern "CoreGraphics" fn PDFStringGetLength(string: PDFStringRef) callconv(.C) objc.size_t;

pub extern "CoreGraphics" fn PDFStringGetBytePtr(string: PDFStringRef) callconv(.C) ?*u8;

pub extern "CoreGraphics" fn PDFStringCopyTextString(string: PDFStringRef) callconv(.C) core_foundation.StringRef;

pub extern "CoreGraphics" fn PDFStringCopyDate(string: PDFStringRef) callconv(.C) core_foundation.DateRef;

pub extern "CoreGraphics" fn PDFArrayGetCount(array: PDFArrayRef) callconv(.C) objc.size_t;

pub extern "CoreGraphics" fn PDFArrayGetObject(array: PDFArrayRef, index: objc.size_t, value: ?*PDFObjectRef) callconv(.C) i32;

pub extern "CoreGraphics" fn PDFArrayGetNull(array: PDFArrayRef, index: objc.size_t) callconv(.C) i32;

pub extern "CoreGraphics" fn PDFArrayGetBoolean(array: PDFArrayRef, index: objc.size_t, value: ?*PDFBoolean) callconv(.C) i32;

pub extern "CoreGraphics" fn PDFArrayGetInteger(array: PDFArrayRef, index: objc.size_t, value: ?*PDFInteger) callconv(.C) i32;

pub extern "CoreGraphics" fn PDFArrayGetNumber(array: PDFArrayRef, index: objc.size_t, value: ?*PDFReal) callconv(.C) i32;

pub extern "CoreGraphics" fn PDFArrayGetName(array: PDFArrayRef, index: objc.size_t, value: ?*?*i8) callconv(.C) i32;

pub extern "CoreGraphics" fn PDFArrayGetString(array: PDFArrayRef, index: objc.size_t, value: ?*PDFStringRef) callconv(.C) i32;

pub extern "CoreGraphics" fn PDFArrayGetArray(array: PDFArrayRef, index: objc.size_t, value: ?*PDFArrayRef) callconv(.C) i32;

pub extern "CoreGraphics" fn PDFArrayGetDictionary(array: PDFArrayRef, index: objc.size_t, value: ?*PDFDictionaryRef) callconv(.C) i32;

pub extern "CoreGraphics" fn PDFArrayGetStream(array: PDFArrayRef, index: objc.size_t, value: ?*PDFStreamRef) callconv(.C) i32;

pub const bool = fn(i32) callconv(.C) i32;

pub extern "CoreGraphics" fn PDFArrayApplyBlock(array: PDFArrayRef, block: i32, info: ?*anyopaque) callconv(.C) void;

pub extern "CoreGraphics" fn PDFDictionaryGetCount(dict: PDFDictionaryRef) callconv(.C) objc.size_t;

pub extern "CoreGraphics" fn PDFDictionaryGetObject() callconv(.C) i32;

pub extern "CoreGraphics" fn PDFDictionaryGetBoolean() callconv(.C) i32;

pub extern "CoreGraphics" fn PDFDictionaryGetInteger() callconv(.C) i32;

pub extern "CoreGraphics" fn PDFDictionaryGetNumber() callconv(.C) i32;

pub extern "CoreGraphics" fn PDFDictionaryGetName() callconv(.C) i32;

pub extern "CoreGraphics" fn PDFDictionaryGetString() callconv(.C) i32;

pub extern "CoreGraphics" fn PDFDictionaryGetArray() callconv(.C) i32;

pub extern "CoreGraphics" fn PDFDictionaryGetDictionary() callconv(.C) i32;

pub extern "CoreGraphics" fn PDFDictionaryGetStream() callconv(.C) i32;

pub const PDFDictionaryApplierFunction = ?*const fn(?*i8, PDFObjectRef, ?*anyopaque) callconv(.C) void;

pub extern "CoreGraphics" fn PDFDictionaryApplyFunction(dict: PDFDictionaryRef, function: PDFDictionaryApplierFunction, info: ?*anyopaque) callconv(.C) void;

pub const PDFDictionaryApplierBlock = *const fn(?*i8, PDFObjectRef, ?*anyopaque) callconv(.C) i32;

pub extern "CoreGraphics" fn PDFDictionaryApplyBlock(dict: PDFDictionaryRef, block: PDFDictionaryApplierBlock, info: ?*anyopaque) callconv(.C) void;

pub const PDFBox = enum(objc.int32_t) {
    kCGPDFMediaBox = 0,
    kCGPDFCropBox = 1,
    kCGPDFBleedBox = 2,
    kCGPDFTrimBox = 3,
    kCGPDFArtBox = 4,
};

pub extern "CoreGraphics" fn PDFPageRetain(page: PDFPageRef) callconv(.C) PDFPageRef;

pub extern "CoreGraphics" fn PDFPageRelease(page: PDFPageRef) callconv(.C) void;

pub extern "CoreGraphics" fn PDFPageGetDocument(page: PDFPageRef) callconv(.C) PDFDocumentRef;

pub extern "CoreGraphics" fn PDFPageGetPageNumber(page: PDFPageRef) callconv(.C) objc.size_t;

pub extern "CoreGraphics" fn PDFPageGetBoxRect(page: PDFPageRef, box: PDFBox) callconv(.C) core_foundation.CGRect;

pub extern "CoreGraphics" fn PDFPageGetRotationAngle(page: PDFPageRef) callconv(.C) i32;

pub extern "CoreGraphics" fn PDFPageGetDrawingTransform(page: PDFPageRef, box: PDFBox, rect: core_foundation.CGRect, rotate: i32, preserveAspectRatio: bool, ) callconv(.C) core_foundation.CGAffineTransform;

pub extern "CoreGraphics" fn PDFPageGetDictionary(page: PDFPageRef) callconv(.C) PDFDictionaryRef;

pub extern "CoreGraphics" fn PDFPageGetTypeID() callconv(.C) core_foundation.TypeID;

pub const PDFAccessPermissions = enum(objc.uint32_t) {
    kCGPDFAllowsLowQualityPrinting = 1,
    kCGPDFAllowsHighQualityPrinting = 2,
    kCGPDFAllowsDocumentChanges = 4,
    kCGPDFAllowsDocumentAssembly = 8,
    kCGPDFAllowsContentCopying = 16,
    kCGPDFAllowsContentAccessibility = 32,
    kCGPDFAllowsCommenting = 64,
    kCGPDFAllowsFormFieldEntry = 128,
};

pub extern "CoreGraphics" fn PDFDocumentCreateWithProvider(provider: DataProviderRef) callconv(.C) PDFDocumentRef;

pub extern "CoreGraphics" fn PDFDocumentCreateWithURL(url: core_foundation.URLRef) callconv(.C) PDFDocumentRef;

pub extern "CoreGraphics" fn PDFDocumentRetain(document: PDFDocumentRef) callconv(.C) PDFDocumentRef;

pub extern "CoreGraphics" fn PDFDocumentRelease(document: PDFDocumentRef) callconv(.C) void;

pub extern "CoreGraphics" fn PDFDocumentGetVersion(document: PDFDocumentRef, majorVersion: ?*i32, minorVersion: ?*i32) callconv(.C) void;

pub extern "CoreGraphics" fn PDFDocumentIsEncrypted() callconv(.C) i32;

pub extern "CoreGraphics" fn PDFDocumentUnlockWithPassword() callconv(.C) i32;

pub extern "CoreGraphics" fn PDFDocumentIsUnlocked() callconv(.C) i32;

pub extern "CoreGraphics" fn PDFDocumentAllowsPrinting() callconv(.C) i32;

pub extern "CoreGraphics" fn PDFDocumentAllowsCopying() callconv(.C) i32;

pub extern "CoreGraphics" fn PDFDocumentGetNumberOfPages(document: PDFDocumentRef) callconv(.C) objc.size_t;

pub extern "CoreGraphics" fn PDFDocumentGetPage(document: PDFDocumentRef, pageNumber: objc.size_t) callconv(.C) PDFPageRef;

pub extern "CoreGraphics" fn PDFDocumentGetCatalog(document: PDFDocumentRef) callconv(.C) PDFDictionaryRef;

pub extern "CoreGraphics" fn PDFDocumentGetInfo(document: PDFDocumentRef) callconv(.C) PDFDictionaryRef;

pub extern "CoreGraphics" fn PDFDocumentGetID(document: PDFDocumentRef) callconv(.C) PDFArrayRef;

pub extern "CoreGraphics" fn PDFDocumentGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreGraphics" fn PDFDocumentGetOutline(document: PDFDocumentRef) callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreGraphics" fn PDFDocumentGetAccessPermissions(document: PDFDocumentRef) callconv(.C) PDFAccessPermissions;

pub extern "CoreGraphics" fn PDFDocumentGetMediaBox(document: PDFDocumentRef, page: i32) callconv(.C) core_foundation.CGRect;

pub extern "CoreGraphics" fn PDFDocumentGetCropBox(document: PDFDocumentRef, page: i32) callconv(.C) core_foundation.CGRect;

pub extern "CoreGraphics" fn PDFDocumentGetBleedBox(document: PDFDocumentRef, page: i32) callconv(.C) core_foundation.CGRect;

pub extern "CoreGraphics" fn PDFDocumentGetTrimBox(document: PDFDocumentRef, page: i32) callconv(.C) core_foundation.CGRect;

pub extern "CoreGraphics" fn PDFDocumentGetArtBox(document: PDFDocumentRef, page: i32) callconv(.C) core_foundation.CGRect;

pub extern "CoreGraphics" fn PDFDocumentGetRotationAngle(document: PDFDocumentRef, page: i32) callconv(.C) i32;

pub const Shading = extern struct {};

pub const ShadingRef = ?*Shading;

pub const Function = extern struct {};

pub const FunctionRef = ?*Function;

pub const FunctionEvaluateCallback = ?*const fn(?*anyopaque, ?*core_foundation.CGFloat, ?*core_foundation.CGFloat) callconv(.C) void;

pub const FunctionReleaseInfoCallback = ?*const fn(?*anyopaque) callconv(.C) void;

pub const FunctionCallbacks = extern struct {
    version: u32,
    evaluate: FunctionEvaluateCallback,
    releaseInfo: FunctionReleaseInfoCallback,
};

pub extern "CoreGraphics" fn FunctionGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreGraphics" fn FunctionCreate(info: ?*anyopaque, domainDimension: objc.size_t, domain: ?*core_foundation.CGFloat, rangeDimension: objc.size_t, range: ?*core_foundation.CGFloat, callbacks: ?*FunctionCallbacks, ) callconv(.C) FunctionRef;

pub extern "CoreGraphics" fn FunctionRetain(function: FunctionRef) callconv(.C) FunctionRef;

pub extern "CoreGraphics" fn FunctionRelease(function: FunctionRef) callconv(.C) void;

pub extern "CoreGraphics" fn ShadingGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreGraphics" fn ShadingCreateAxial(space: ColorSpaceRef, start: core_foundation.CGPoint, end: core_foundation.CGPoint, function: FunctionRef, extendStart: bool, extendEnd: bool, ) callconv(.C) ShadingRef;

pub extern "CoreGraphics" fn ShadingCreateRadial(space: ColorSpaceRef, start: core_foundation.CGPoint, startRadius: core_foundation.CGFloat, end: core_foundation.CGPoint, endRadius: core_foundation.CGFloat, function: FunctionRef, extendStart: bool, extendEnd: bool, ) callconv(.C) ShadingRef;

pub extern "CoreGraphics" fn ShadingRetain(shading: ShadingRef) callconv(.C) ShadingRef;

pub extern "CoreGraphics" fn ShadingRelease(shading: ShadingRef) callconv(.C) void;

pub const PathDrawingMode = enum(objc.int32_t) {
    kCGPathFill = 0,
    kCGPathEOFill = 1,
    kCGPathStroke = 2,
    kCGPathFillStroke = 3,
    kCGPathEOFillStroke = 4,
};

pub const TextDrawingMode = enum(objc.int32_t) {
    kCGTextFill = 0,
    kCGTextStroke = 1,
    kCGTextFillStroke = 2,
    kCGTextInvisible = 3,
    kCGTextFillClip = 4,
    kCGTextStrokeClip = 5,
    kCGTextFillStrokeClip = 6,
    kCGTextClip = 7,
};

pub const TextEncoding = enum(objc.int32_t) {
    kCGEncodingFontSpecific = 0,
    kCGEncodingMacRoman = 1,
};

pub const InterpolationQuality = enum(objc.int32_t) {
    kCGInterpolationDefault = 0,
    kCGInterpolationNone = 1,
    kCGInterpolationLow = 2,
    kCGInterpolationMedium = 4,
    kCGInterpolationHigh = 3,
};

pub const BlendMode = enum(objc.int32_t) {
    kCGBlendModeNormal = 0,
    kCGBlendModeMultiply = 1,
    kCGBlendModeScreen = 2,
    kCGBlendModeOverlay = 3,
    kCGBlendModeDarken = 4,
    kCGBlendModeLighten = 5,
    kCGBlendModeColorDodge = 6,
    kCGBlendModeColorBurn = 7,
    kCGBlendModeSoftLight = 8,
    kCGBlendModeHardLight = 9,
    kCGBlendModeDifference = 10,
    kCGBlendModeExclusion = 11,
    kCGBlendModeHue = 12,
    kCGBlendModeSaturation = 13,
    kCGBlendModeColor = 14,
    kCGBlendModeLuminosity = 15,
    kCGBlendModeClear = 16,
    kCGBlendModeCopy = 17,
    kCGBlendModeSourceIn = 18,
    kCGBlendModeSourceOut = 19,
    kCGBlendModeSourceAtop = 20,
    kCGBlendModeDestinationOver = 21,
    kCGBlendModeDestinationIn = 22,
    kCGBlendModeDestinationOut = 23,
    kCGBlendModeDestinationAtop = 24,
    kCGBlendModeXOR = 25,
    kCGBlendModePlusDarker = 26,
    kCGBlendModePlusLighter = 27,
};

pub extern "CoreGraphics" fn ContextGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreGraphics" fn ContextSaveGState(c: ContextRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextRestoreGState(c: ContextRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextScaleCTM(c: ContextRef, sx: core_foundation.CGFloat, sy: core_foundation.CGFloat) callconv(.C) void;

pub extern "CoreGraphics" fn ContextTranslateCTM(c: ContextRef, tx: core_foundation.CGFloat, ty: core_foundation.CGFloat) callconv(.C) void;

pub extern "CoreGraphics" fn ContextRotateCTM(c: ContextRef, angle: core_foundation.CGFloat) callconv(.C) void;

pub extern "CoreGraphics" fn ContextConcatCTM(c: ContextRef, transform: core_foundation.CGAffineTransform) callconv(.C) void;

pub extern "CoreGraphics" fn ContextGetCTM(c: ContextRef) callconv(.C) core_foundation.CGAffineTransform;

pub extern "CoreGraphics" fn ContextSetLineWidth(c: ContextRef, width: core_foundation.CGFloat) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetLineCap(c: ContextRef, cap: LineCap) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetLineJoin(c: ContextRef, join: LineJoin) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetMiterLimit(c: ContextRef, limit: core_foundation.CGFloat) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetLineDash(c: ContextRef, phase: core_foundation.CGFloat, lengths: ?*core_foundation.CGFloat, count: objc.size_t, ) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetFlatness(c: ContextRef, flatness: core_foundation.CGFloat) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetAlpha(c: ContextRef, alpha: core_foundation.CGFloat) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetBlendMode(c: ContextRef, mode: BlendMode) callconv(.C) void;

pub extern "CoreGraphics" fn ContextBeginPath(c: ContextRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextMoveToPoint(c: ContextRef, x: core_foundation.CGFloat, y: core_foundation.CGFloat) callconv(.C) void;

pub extern "CoreGraphics" fn ContextAddLineToPoint(c: ContextRef, x: core_foundation.CGFloat, y: core_foundation.CGFloat) callconv(.C) void;

pub extern "CoreGraphics" fn ContextAddCurveToPoint(c: ContextRef, cp1x: core_foundation.CGFloat, cp1y: core_foundation.CGFloat, cp2x: core_foundation.CGFloat, cp2y: core_foundation.CGFloat, x: core_foundation.CGFloat, y: core_foundation.CGFloat, ) callconv(.C) void;

pub extern "CoreGraphics" fn ContextAddQuadCurveToPoint(c: ContextRef, cpx: core_foundation.CGFloat, cpy: core_foundation.CGFloat, x: core_foundation.CGFloat, y: core_foundation.CGFloat, ) callconv(.C) void;

pub extern "CoreGraphics" fn ContextClosePath(c: ContextRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextAddRect(c: ContextRef, rect: core_foundation.CGRect) callconv(.C) void;

pub extern "CoreGraphics" fn ContextAddRects(c: ContextRef, rects: ?*core_foundation.CGRect, count: objc.size_t) callconv(.C) void;

pub extern "CoreGraphics" fn ContextAddLines(c: ContextRef, points: ?*core_foundation.CGPoint, count: objc.size_t) callconv(.C) void;

pub extern "CoreGraphics" fn ContextAddEllipseInRect(c: ContextRef, rect: core_foundation.CGRect) callconv(.C) void;

pub extern "CoreGraphics" fn ContextAddArc(c: ContextRef, x: core_foundation.CGFloat, y: core_foundation.CGFloat, radius: core_foundation.CGFloat, startAngle: core_foundation.CGFloat, endAngle: core_foundation.CGFloat, clockwise: i32, ) callconv(.C) void;

pub extern "CoreGraphics" fn ContextAddArcToPoint(c: ContextRef, x1: core_foundation.CGFloat, y1: core_foundation.CGFloat, x2: core_foundation.CGFloat, y2: core_foundation.CGFloat, radius: core_foundation.CGFloat, ) callconv(.C) void;

pub extern "CoreGraphics" fn ContextAddPath(c: ContextRef, path: PathRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextReplacePathWithStrokedPath(c: ContextRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextIsPathEmpty() callconv(.C) i32;

pub extern "CoreGraphics" fn ContextGetPathCurrentPoint(c: ContextRef) callconv(.C) core_foundation.CGPoint;

pub extern "CoreGraphics" fn ContextGetPathBoundingBox(c: ContextRef) callconv(.C) core_foundation.CGRect;

pub extern "CoreGraphics" fn ContextCopyPath(c: ContextRef) callconv(.C) PathRef;

pub extern "CoreGraphics" fn ContextPathContainsPoint() callconv(.C) i32;

pub extern "CoreGraphics" fn ContextDrawPath(c: ContextRef, mode: PathDrawingMode) callconv(.C) void;

pub extern "CoreGraphics" fn ContextFillPath(c: ContextRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextEOFillPath(c: ContextRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextStrokePath(c: ContextRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextFillRect(c: ContextRef, rect: core_foundation.CGRect) callconv(.C) void;

pub extern "CoreGraphics" fn ContextFillRects(c: ContextRef, rects: ?*core_foundation.CGRect, count: objc.size_t) callconv(.C) void;

pub extern "CoreGraphics" fn ContextStrokeRect(c: ContextRef, rect: core_foundation.CGRect) callconv(.C) void;

pub extern "CoreGraphics" fn ContextStrokeRectWithWidth(c: ContextRef, rect: core_foundation.CGRect, width: core_foundation.CGFloat) callconv(.C) void;

pub extern "CoreGraphics" fn ContextClearRect(c: ContextRef, rect: core_foundation.CGRect) callconv(.C) void;

pub extern "CoreGraphics" fn ContextFillEllipseInRect(c: ContextRef, rect: core_foundation.CGRect) callconv(.C) void;

pub extern "CoreGraphics" fn ContextStrokeEllipseInRect(c: ContextRef, rect: core_foundation.CGRect) callconv(.C) void;

pub extern "CoreGraphics" fn ContextStrokeLineSegments(c: ContextRef, points: ?*core_foundation.CGPoint, count: objc.size_t) callconv(.C) void;

pub extern "CoreGraphics" fn ContextClip(c: ContextRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextEOClip(c: ContextRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextResetClip(c: ContextRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextClipToMask(c: ContextRef, rect: core_foundation.CGRect, mask: ImageRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextGetClipBoundingBox(c: ContextRef) callconv(.C) core_foundation.CGRect;

pub extern "CoreGraphics" fn ContextClipToRect(c: ContextRef, rect: core_foundation.CGRect) callconv(.C) void;

pub extern "CoreGraphics" fn ContextClipToRects(c: ContextRef, rects: ?*core_foundation.CGRect, count: objc.size_t) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetFillColorWithColor(c: ContextRef, color: ColorRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetStrokeColorWithColor(c: ContextRef, color: ColorRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetFillColorSpace(c: ContextRef, space: ColorSpaceRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetStrokeColorSpace(c: ContextRef, space: ColorSpaceRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetFillColor(c: ContextRef, components: ?*core_foundation.CGFloat) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetStrokeColor(c: ContextRef, components: ?*core_foundation.CGFloat) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetFillPattern(c: ContextRef, pattern: PatternRef, components: ?*core_foundation.CGFloat) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetStrokePattern(c: ContextRef, pattern: PatternRef, components: ?*core_foundation.CGFloat) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetPatternPhase(c: ContextRef, phase: core_foundation.CGSize) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetGrayFillColor(c: ContextRef, gray: core_foundation.CGFloat, alpha: core_foundation.CGFloat) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetGrayStrokeColor(c: ContextRef, gray: core_foundation.CGFloat, alpha: core_foundation.CGFloat) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetRGBFillColor(c: ContextRef, red: core_foundation.CGFloat, green: core_foundation.CGFloat, blue: core_foundation.CGFloat, alpha: core_foundation.CGFloat, ) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetRGBStrokeColor(c: ContextRef, red: core_foundation.CGFloat, green: core_foundation.CGFloat, blue: core_foundation.CGFloat, alpha: core_foundation.CGFloat, ) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetCMYKFillColor(c: ContextRef, cyan: core_foundation.CGFloat, magenta: core_foundation.CGFloat, yellow: core_foundation.CGFloat, black: core_foundation.CGFloat, alpha: core_foundation.CGFloat, ) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetCMYKStrokeColor(c: ContextRef, cyan: core_foundation.CGFloat, magenta: core_foundation.CGFloat, yellow: core_foundation.CGFloat, black: core_foundation.CGFloat, alpha: core_foundation.CGFloat, ) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetRenderingIntent(c: ContextRef, intent: ColorRenderingIntent) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetEDRTargetHeadroom() callconv(.C) i32;

pub extern "CoreGraphics" fn ContextGetEDRTargetHeadroom(c: ContextRef) callconv(.C) f32;

pub extern "CoreGraphics" fn ContextDrawImage(c: ContextRef, rect: core_foundation.CGRect, image: ImageRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextDrawTiledImage(c: ContextRef, rect: core_foundation.CGRect, image: ImageRef) callconv(.C) void;

pub const ToneMapping = enum(objc.uint32_t) {
    kCGToneMappingDefault = 0,
    kCGToneMappingImageSpecificLumaScaling = 1,
    kCGToneMappingReferenceWhiteBased = 2,
    kCGToneMappingITURecommended = 3,
    kCGToneMappingEXRGamma = 4,
    kCGToneMappingNone = 5,
};

pub extern "CoreGraphics" fn ContextDrawImageApplyingToneMapping() callconv(.C) i32;

pub extern "CoreGraphics" fn ContextGetInterpolationQuality(c: ContextRef) callconv(.C) InterpolationQuality;

pub extern "CoreGraphics" fn ContextSetInterpolationQuality(c: ContextRef, quality: InterpolationQuality) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetShadowWithColor(c: ContextRef, offset: core_foundation.CGSize, blur: core_foundation.CGFloat, color: ColorRef, ) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetShadow(c: ContextRef, offset: core_foundation.CGSize, blur: core_foundation.CGFloat) callconv(.C) void;

pub extern "CoreGraphics" fn ContextDrawLinearGradient(c: ContextRef, gradient: GradientRef, startPoint: core_foundation.CGPoint, endPoint: core_foundation.CGPoint, options: GradientDrawingOptions, ) callconv(.C) void;

pub extern "CoreGraphics" fn ContextDrawRadialGradient(c: ContextRef, gradient: GradientRef, startCenter: core_foundation.CGPoint, startRadius: core_foundation.CGFloat, endCenter: core_foundation.CGPoint, endRadius: core_foundation.CGFloat, options: GradientDrawingOptions, ) callconv(.C) void;

pub extern "CoreGraphics" fn ContextDrawConicGradient(c: ContextRef, gradient: GradientRef, center: core_foundation.CGPoint, angle: core_foundation.CGFloat, ) callconv(.C) void;

pub extern "CoreGraphics" fn ContextDrawShading(c: ContextRef, shading: ShadingRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetCharacterSpacing(c: ContextRef, spacing: core_foundation.CGFloat) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetTextPosition(c: ContextRef, x: core_foundation.CGFloat, y: core_foundation.CGFloat) callconv(.C) void;

pub extern "CoreGraphics" fn ContextGetTextPosition(c: ContextRef) callconv(.C) core_foundation.CGPoint;

pub extern "CoreGraphics" fn ContextSetTextMatrix(c: ContextRef, t: core_foundation.CGAffineTransform) callconv(.C) void;

pub extern "CoreGraphics" fn ContextGetTextMatrix(c: ContextRef) callconv(.C) core_foundation.CGAffineTransform;

pub extern "CoreGraphics" fn ContextSetTextDrawingMode(c: ContextRef, mode: TextDrawingMode) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetFont(c: ContextRef, font: FontRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetFontSize(c: ContextRef, size: core_foundation.CGFloat) callconv(.C) void;

pub extern "CoreGraphics" fn ContextShowGlyphsAtPositions(c: ContextRef, glyphs: ?*Glyph, Lpositions: ?*core_foundation.CGPoint, count: objc.size_t, ) callconv(.C) void;

pub extern "CoreGraphics" fn ContextDrawPDFPage(c: ContextRef, page: PDFPageRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextBeginPage(c: ContextRef, mediaBox: ?*core_foundation.CGRect) callconv(.C) void;

pub extern "CoreGraphics" fn ContextEndPage(c: ContextRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextRetain(c: ContextRef) callconv(.C) ContextRef;

pub extern "CoreGraphics" fn ContextRelease(c: ContextRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextFlush(c: ContextRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSynchronize(c: ContextRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetShouldAntialias(c: ContextRef, shouldAntialias: bool) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetAllowsAntialiasing(c: ContextRef, allowsAntialiasing: bool) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetShouldSmoothFonts(c: ContextRef, shouldSmoothFonts: bool) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetAllowsFontSmoothing(c: ContextRef, allowsFontSmoothing: bool) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetShouldSubpixelPositionFonts(c: ContextRef, shouldSubpixelPositionFonts: bool) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetAllowsFontSubpixelPositioning(c: ContextRef, allowsFontSubpixelPositioning: bool) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetShouldSubpixelQuantizeFonts(c: ContextRef, shouldSubpixelQuantizeFonts: bool) callconv(.C) void;

pub extern "CoreGraphics" fn ContextSetAllowsFontSubpixelQuantization(c: ContextRef, allowsFontSubpixelQuantization: bool) callconv(.C) void;

pub extern "CoreGraphics" fn ContextBeginTransparencyLayer(c: ContextRef, auxiliaryInfo: core_foundation.DictionaryRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextBeginTransparencyLayerWithRect(c: ContextRef, rect: core_foundation.CGRect, auxInfo: core_foundation.DictionaryRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextEndTransparencyLayer(c: ContextRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextGetUserSpaceToDeviceSpaceTransform(c: ContextRef) callconv(.C) core_foundation.CGAffineTransform;

pub extern "CoreGraphics" fn ContextConvertPointToDeviceSpace(c: ContextRef, point: core_foundation.CGPoint) callconv(.C) core_foundation.CGPoint;

pub extern "CoreGraphics" fn ContextConvertPointToUserSpace(c: ContextRef, point: core_foundation.CGPoint) callconv(.C) core_foundation.CGPoint;

pub extern "CoreGraphics" fn ContextConvertSizeToDeviceSpace(c: ContextRef, size: core_foundation.CGSize) callconv(.C) core_foundation.CGSize;

pub extern "CoreGraphics" fn ContextConvertSizeToUserSpace(c: ContextRef, size: core_foundation.CGSize) callconv(.C) core_foundation.CGSize;

pub extern "CoreGraphics" fn ContextConvertRectToDeviceSpace(c: ContextRef, rect: core_foundation.CGRect) callconv(.C) core_foundation.CGRect;

pub extern "CoreGraphics" fn ContextConvertRectToUserSpace(c: ContextRef, rect: core_foundation.CGRect) callconv(.C) core_foundation.CGRect;

pub extern "CoreGraphics" fn ContextSelectFont(c: ContextRef, name: ?*i8, size: core_foundation.CGFloat, textEncoding: TextEncoding, ) callconv(.C) void;

pub extern "CoreGraphics" fn ContextShowText(c: ContextRef, string: ?*i8, length: objc.size_t) callconv(.C) void;

pub extern "CoreGraphics" fn ContextShowTextAtPoint(c: ContextRef, x: core_foundation.CGFloat, y: core_foundation.CGFloat, string: ?*i8, length: objc.size_t, ) callconv(.C) void;

pub extern "CoreGraphics" fn ContextShowGlyphs(c: ContextRef, g: ?*Glyph, count: objc.size_t) callconv(.C) void;

pub extern "CoreGraphics" fn ContextShowGlyphsAtPoint(c: ContextRef, x: core_foundation.CGFloat, y: core_foundation.CGFloat, glyphs: ?*Glyph, count: objc.size_t, ) callconv(.C) void;

pub extern "CoreGraphics" fn ContextShowGlyphsWithAdvances(c: ContextRef, glyphs: ?*Glyph, advances: ?*core_foundation.CGSize, count: objc.size_t, ) callconv(.C) void;

pub extern "CoreGraphics" fn ContextDrawPDFDocument(c: ContextRef, rect: core_foundation.CGRect, document: PDFDocumentRef, page: i32, ) callconv(.C) void;

pub const BitmapContextReleaseDataCallback = ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) void;

pub extern "CoreGraphics" fn BitmapContextCreateWithData(data: ?*anyopaque, width: objc.size_t, height: objc.size_t, bitsPerComponent: objc.size_t, bytesPerRow: objc.size_t, space: ColorSpaceRef, bitmapInfo: objc.uint32_t, releaseCallback: BitmapContextReleaseDataCallback, releaseInfo: ?*anyopaque, ) callconv(.C) ContextRef;

pub extern "CoreGraphics" fn BitmapContextCreate(data: ?*anyopaque, width: objc.size_t, height: objc.size_t, bitsPerComponent: objc.size_t, bytesPerRow: objc.size_t, space: ColorSpaceRef, bitmapInfo: objc.uint32_t, ) callconv(.C) ContextRef;

pub extern "CoreGraphics" fn BitmapContextGetData(context: ContextRef) callconv(.C) ?*anyopaque;

pub extern "CoreGraphics" fn BitmapContextGetWidth(context: ContextRef) callconv(.C) objc.size_t;

pub extern "CoreGraphics" fn BitmapContextGetHeight(context: ContextRef) callconv(.C) objc.size_t;

pub extern "CoreGraphics" fn BitmapContextGetBitsPerComponent(context: ContextRef) callconv(.C) objc.size_t;

pub extern "CoreGraphics" fn BitmapContextGetBitsPerPixel(context: ContextRef) callconv(.C) objc.size_t;

pub extern "CoreGraphics" fn BitmapContextGetBytesPerRow(context: ContextRef) callconv(.C) objc.size_t;

pub extern "CoreGraphics" fn BitmapContextGetColorSpace(context: ContextRef) callconv(.C) ColorSpaceRef;

pub extern "CoreGraphics" fn BitmapContextGetAlphaInfo(context: ContextRef) callconv(.C) ImageAlphaInfo;

pub extern "CoreGraphics" fn BitmapContextGetBitmapInfo(context: ContextRef) callconv(.C) BitmapInfo;

pub extern "CoreGraphics" fn BitmapContextCreateImage(context: ContextRef) callconv(.C) ImageRef;

pub const ColorConversionInfo = extern struct {};

pub const ColorConversionInfoRef = ?*ColorConversionInfo;

pub extern "CoreGraphics" fn ColorConversionInfoGetTypeID() callconv(.C) core_foundation.TypeID;

pub const ColorConversionInfoTransformType = enum(objc.uint32_t) {
    kCGColorConversionTransformFromSpace = 0,
    kCGColorConversionTransformToSpace = 1,
    kCGColorConversionTransformApplySpace = 2,
};

pub extern "CoreGraphics" fn ColorConversionInfoCreate(src: ColorSpaceRef, dst: ColorSpaceRef) callconv(.C) ColorConversionInfoRef;

pub extern "CoreGraphics" fn ColorConversionInfoCreateWithOptions(src: ColorSpaceRef, dst: ColorSpaceRef, options: core_foundation.DictionaryRef) callconv(.C) ColorConversionInfoRef;

pub extern "CoreGraphics" fn ColorConversionInfoCreateFromList(options: core_foundation.DictionaryRef, ColorSpaceRef, ColorConversionInfoTransformType, ColorRenderingIntent, ) callconv(.C) ColorConversionInfoRef;

pub extern "CoreGraphics" fn ColorConversionInfoCreateFromListWithArguments(options: core_foundation.DictionaryRef, ColorSpaceRef, ColorConversionInfoTransformType, ColorRenderingIntent, va_list: i32, ) callconv(.C) ColorConversionInfoRef;

pub const ColorDataFormat = extern struct {
    version: objc.uint32_t,
    colorspace_info: core_foundation.TypeRef,
    bitmap_info: BitmapInfo,
    bits_per_component: objc.size_t,
    bytes_per_row: objc.size_t,
    intent: ColorRenderingIntent,
    decode: ?*core_foundation.CGFloat,
};

pub extern "CoreGraphics" fn ConvertColorDataWithFormat() callconv(.C) i32;

pub const DataConsumer = extern struct {};

pub const DataConsumerRef = ?*DataConsumer;

pub const DataConsumerPutBytesCallback = ?*const fn(?*anyopaque, ?*anyopaque, objc.size_t) callconv(.C) objc.size_t;

pub const DataConsumerReleaseInfoCallback = ?*const fn(?*anyopaque) callconv(.C) void;

pub const DataConsumerCallbacks = extern struct {
    putBytes: DataConsumerPutBytesCallback,
    releaseConsumer: DataConsumerReleaseInfoCallback,
};

pub extern "CoreGraphics" fn DataConsumerGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreGraphics" fn DataConsumerCreate(info: ?*anyopaque, cbks: ?*DataConsumerCallbacks) callconv(.C) DataConsumerRef;

pub extern "CoreGraphics" fn DataConsumerCreateWithURL(url: core_foundation.URLRef) callconv(.C) DataConsumerRef;

pub extern "CoreGraphics" fn DataConsumerCreateWithCFData(data: core_foundation.MutableDataRef) callconv(.C) DataConsumerRef;

pub extern "CoreGraphics" fn DataConsumerRetain(consumer: DataConsumerRef) callconv(.C) DataConsumerRef;

pub extern "CoreGraphics" fn DataConsumerRelease(consumer: DataConsumerRef) callconv(.C) void;

pub const Error = enum(objc.int32_t) {
    kCGErrorSuccess = 0,
    kCGErrorFailure = 1000,
    kCGErrorIllegalArgument = 1001,
    kCGErrorInvalidConnection = 1002,
    kCGErrorInvalidContext = 1003,
    kCGErrorCannotComplete = 1004,
    kCGErrorNotImplemented = 1006,
    kCGErrorRangeCheck = 1007,
    kCGErrorTypeCheck = 1008,
    kCGErrorInvalidOperation = 1010,
    kCGErrorNoneAvailable = 1011,
};

pub const ErrorCallback = ?*const fn() callconv(.C) void;

pub extern "CoreGraphics" fn ErrorSetCallback(callback: ErrorCallback) callconv(.C) void;

pub const Layer = extern struct {};

pub const LayerRef = ?*Layer;

pub extern "CoreGraphics" fn LayerCreateWithContext(context: ContextRef, size: core_foundation.CGSize, auxiliaryInfo: core_foundation.DictionaryRef) callconv(.C) LayerRef;

pub extern "CoreGraphics" fn LayerRetain(layer: LayerRef) callconv(.C) LayerRef;

pub extern "CoreGraphics" fn LayerRelease(layer: LayerRef) callconv(.C) void;

pub extern "CoreGraphics" fn LayerGetSize(layer: LayerRef) callconv(.C) core_foundation.CGSize;

pub extern "CoreGraphics" fn LayerGetContext(layer: LayerRef) callconv(.C) ContextRef;

pub extern "CoreGraphics" fn ContextDrawLayerInRect(context: ContextRef, rect: core_foundation.CGRect, layer: LayerRef) callconv(.C) void;

pub extern "CoreGraphics" fn ContextDrawLayerAtPoint(context: ContextRef, point: core_foundation.CGPoint, layer: LayerRef) callconv(.C) void;

pub extern "CoreGraphics" fn LayerGetTypeID() callconv(.C) core_foundation.TypeID;

pub const PDFContentStream = extern struct {};

pub const PDFContentStreamRef = ?*PDFContentStream;

pub extern "CoreGraphics" fn PDFContentStreamCreateWithPage(page: PDFPageRef) callconv(.C) PDFContentStreamRef;

pub extern "CoreGraphics" fn PDFContentStreamCreateWithStream(stream: PDFStreamRef, streamResources: PDFDictionaryRef, parent: PDFContentStreamRef) callconv(.C) PDFContentStreamRef;

pub extern "CoreGraphics" fn PDFContentStreamRetain(cs: PDFContentStreamRef) callconv(.C) PDFContentStreamRef;

pub extern "CoreGraphics" fn PDFContentStreamRelease(cs: PDFContentStreamRef) callconv(.C) void;

pub extern "CoreGraphics" fn PDFContentStreamGetStreams(cs: PDFContentStreamRef) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreGraphics" fn PDFContentStreamGetResource(cs: PDFContentStreamRef, category: ?*i8, name: ?*i8) callconv(.C) PDFObjectRef;

pub extern "CoreGraphics" fn PDFContextCreate(consumer: DataConsumerRef, mediaBox: ?*core_foundation.CGRect, auxiliaryInfo: core_foundation.DictionaryRef) callconv(.C) ContextRef;

pub extern "CoreGraphics" fn PDFContextCreateWithURL(url: core_foundation.URLRef, mediaBox: ?*core_foundation.CGRect, auxiliaryInfo: core_foundation.DictionaryRef) callconv(.C) ContextRef;

pub extern "CoreGraphics" fn PDFContextClose(context: ContextRef) callconv(.C) void;

pub extern "CoreGraphics" fn PDFContextBeginPage(context: ContextRef, pageInfo: core_foundation.DictionaryRef) callconv(.C) void;

pub extern "CoreGraphics" fn PDFContextEndPage(context: ContextRef) callconv(.C) void;

pub extern "CoreGraphics" fn PDFContextAddDocumentMetadata(context: ContextRef, metadata: core_foundation.DataRef) callconv(.C) void;

pub extern "CoreGraphics" fn PDFContextSetParentTree(context: ContextRef, parentTreeDictionary: PDFDictionaryRef) callconv(.C) void;

pub extern "CoreGraphics" fn PDFContextSetIDTree(context: ContextRef, IDTreeDictionary: PDFDictionaryRef) callconv(.C) void;

pub extern "CoreGraphics" fn PDFContextSetPageTagStructureTree(context: ContextRef, pageTagStructureTreeDictionary: core_foundation.DictionaryRef) callconv(.C) void;

pub extern "CoreGraphics" fn PDFContextSetURLForRect(context: ContextRef, url: core_foundation.URLRef, rect: core_foundation.CGRect) callconv(.C) void;

pub extern "CoreGraphics" fn PDFContextAddDestinationAtPoint(context: ContextRef, name: core_foundation.StringRef, point: core_foundation.CGPoint) callconv(.C) void;

pub extern "CoreGraphics" fn PDFContextSetDestinationForRect(context: ContextRef, name: core_foundation.StringRef, rect: core_foundation.CGRect) callconv(.C) void;

pub extern "CoreGraphics" fn PDFContextSetOutline(context: ContextRef, outline: core_foundation.DictionaryRef) callconv(.C) void;

pub const PDFTagType = enum(objc.int32_t) {
    Document = 100,
    Part = 101,
    Art = 102,
    Section = 103,
    Div = 104,
    BlockQuote = 105,
    Caption = 106,
    TOC = 107,
    TOCI = 108,
    Index = 109,
    NonStructure = 110,
    Private = 111,
    Paragraph = 200,
    Header = 201,
    Header1 = 202,
    Header2 = 203,
    Header3 = 204,
    Header4 = 205,
    Header5 = 206,
    Header6 = 207,
    List = 300,
    ListItem = 301,
    Label = 302,
    ListBody = 303,
    Table = 400,
    TableRow = 401,
    TableHeaderCell = 402,
    TableDataCell = 403,
    TableHeader = 404,
    TableBody = 405,
    TableFooter = 406,
    Span = 500,
    Quote = 501,
    Note = 502,
    Reference = 503,
    Bibliography = 504,
    Code = 505,
    Link = 506,
    Annotation = 507,
    Ruby = 600,
    RubyBaseText = 601,
    RubyAnnotationText = 602,
    RubyPunctuation = 603,
    Warichu = 604,
    WarichuText = 605,
    WarichuPunctiation = 606,
    Figure = 700,
    Formula = 701,
    Form = 702,
    Object = 800,
};

pub extern "CoreGraphics" fn PDFTagTypeGetName(tagType: PDFTagType) callconv(.C) ?*i8;

pub const PDFTagProperty = core_foundation.StringRef;

pub extern "CoreGraphics" fn PDFContextBeginTag(context: ContextRef, tagType: PDFTagType, tagProperties: core_foundation.DictionaryRef) callconv(.C) void;

pub extern "CoreGraphics" fn PDFContextEndTag(context: ContextRef) callconv(.C) void;

pub const PDFOperatorTable = extern struct {};

pub const PDFOperatorTableRef = ?*PDFOperatorTable;

pub const PDFScanner = extern struct {};

pub const PDFScannerRef = ?*PDFScanner;

pub extern "CoreGraphics" fn PDFScannerCreate(cs: PDFContentStreamRef, table: PDFOperatorTableRef, info: ?*anyopaque) callconv(.C) PDFScannerRef;

pub extern "CoreGraphics" fn PDFScannerRetain(scanner: PDFScannerRef) callconv(.C) PDFScannerRef;

pub extern "CoreGraphics" fn PDFScannerRelease(scanner: PDFScannerRef) callconv(.C) void;

pub extern "CoreGraphics" fn PDFScannerScan() callconv(.C) i32;

pub extern "CoreGraphics" fn PDFScannerGetContentStream(scanner: PDFScannerRef) callconv(.C) PDFContentStreamRef;

pub extern "CoreGraphics" fn PDFScannerPopObject() callconv(.C) i32;

pub extern "CoreGraphics" fn PDFScannerPopBoolean() callconv(.C) i32;

pub extern "CoreGraphics" fn PDFScannerPopInteger() callconv(.C) i32;

pub extern "CoreGraphics" fn PDFScannerPopNumber() callconv(.C) i32;

pub extern "CoreGraphics" fn PDFScannerPopName() callconv(.C) i32;

pub extern "CoreGraphics" fn PDFScannerPopString() callconv(.C) i32;

pub extern "CoreGraphics" fn PDFScannerPopArray() callconv(.C) i32;

pub extern "CoreGraphics" fn PDFScannerPopDictionary() callconv(.C) i32;

pub extern "CoreGraphics" fn PDFScannerPopStream() callconv(.C) i32;

pub extern "CoreGraphics" fn PDFScannerStop(s: PDFScannerRef) callconv(.C) void;

pub const PDFOperatorCallback = ?*const fn(PDFScannerRef, ?*anyopaque) callconv(.C) void;

pub extern "CoreGraphics" fn PDFOperatorTableCreate() callconv(.C) PDFOperatorTableRef;

pub extern "CoreGraphics" fn PDFOperatorTableRetain(table: PDFOperatorTableRef) callconv(.C) PDFOperatorTableRef;

pub extern "CoreGraphics" fn PDFOperatorTableRelease(table: PDFOperatorTableRef) callconv(.C) void;

pub extern "CoreGraphics" fn PDFOperatorTableSetCallback(table: PDFOperatorTableRef, name: ?*i8, callback: PDFOperatorCallback) callconv(.C) void;

pub const WindowID = objc.uint32_t;

pub const WindowSharingType = enum(objc.uint32_t) {
    kCGWindowSharingNone = 0,
    kCGWindowSharingReadOnly = 1,
    kCGWindowSharingReadWrite = 2,
};

pub const WindowBackingType = enum(objc.uint32_t) {
    kCGBackingStoreRetained = 0,
    kCGBackingStoreNonretained = 1,
    kCGBackingStoreBuffered = 2,
};

pub const WindowListOption = enum(objc.uint32_t) {
    kCGWindowListOptionAll = 0,
    kCGWindowListOptionOnScreenOnly = 1,
    kCGWindowListOptionOnScreenAboveWindow = 2,
    kCGWindowListOptionOnScreenBelowWindow = 4,
    kCGWindowListOptionIncludingWindow = 8,
    kCGWindowListExcludeDesktopElements = 16,
};

pub extern "CoreGraphics" fn WindowListCopyWindowInfo(option: WindowListOption, relativeToWindow: WindowID) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreGraphics" fn WindowListCreate(option: WindowListOption, relativeToWindow: WindowID) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreGraphics" fn WindowListCreateDescriptionFromArray(windowArray: core_foundation.ArrayRef) callconv(.C) core_foundation.ArrayRef;

pub const WindowImageOption = enum(objc.uint32_t) {
    kCGWindowImageDefault = 0,
    kCGWindowImageBoundsIgnoreFraming = 1,
    kCGWindowImageShouldBeOpaque = 2,
    kCGWindowImageOnlyShadows = 4,
    kCGWindowImageBestResolution = 8,
    kCGWindowImageNominalResolution = 16,
};

pub extern "CoreGraphics" fn WindowListCreateImage(screenBounds: core_foundation.CGRect, listOption: WindowListOption, windowID: WindowID, imageOption: WindowImageOption, ) callconv(.C) ImageRef;

pub extern "CoreGraphics" fn WindowListCreateImageFromArray(screenBounds: core_foundation.CGRect, windowArray: core_foundation.ArrayRef, imageOption: WindowImageOption) callconv(.C) ImageRef;

pub extern "CoreGraphics" fn PreflightScreenCaptureAccess() callconv(.C) i32;

pub extern "CoreGraphics" fn RequestScreenCaptureAccess() callconv(.C) i32;

pub const WindowLevelKey = enum(objc.int32_t) {
    kCGBaseWindowLevelKey = 0,
    kCGMinimumWindowLevelKey = 1,
    kCGDesktopWindowLevelKey = 2,
    kCGBackstopMenuLevelKey = 3,
    kCGNormalWindowLevelKey = 4,
    kCGFloatingWindowLevelKey = 5,
    kCGTornOffMenuWindowLevelKey = 6,
    kCGDockWindowLevelKey = 7,
    kCGMainMenuWindowLevelKey = 8,
    kCGStatusWindowLevelKey = 9,
    kCGModalPanelWindowLevelKey = 10,
    kCGPopUpMenuWindowLevelKey = 11,
    kCGDraggingWindowLevelKey = 12,
    kCGScreenSaverWindowLevelKey = 13,
    kCGMaximumWindowLevelKey = 14,
    kCGOverlayWindowLevelKey = 15,
    kCGHelpWindowLevelKey = 16,
    kCGUtilityWindowLevelKey = 17,
    kCGDesktopIconWindowLevelKey = 18,
    kCGCursorWindowLevelKey = 19,
    kCGAssistiveTechHighWindowLevelKey = 20,
    kCGNumberOfWindowLevelKeys = 21,
};

pub const WindowLevel = objc.int32_t;

pub extern "CoreGraphics" fn WindowLevelForKey(key: WindowLevelKey) callconv(.C) WindowLevel;

pub const DirectDisplayID = objc.uint32_t;

pub const OpenGLDisplayMask = objc.uint32_t;

pub const RefreshRate = f64;

pub const DisplayMode = extern struct {};

pub const DisplayModeRef = ?*DisplayMode;

pub extern "CoreGraphics" fn MainDisplayID() callconv(.C) DirectDisplayID;

pub extern "CoreGraphics" fn GetDisplaysWithPoint(point: core_foundation.CGPoint, maxDisplays: objc.uint32_t, displays: ?*DirectDisplayID, matchingDisplayCount: ?*objc.uint32_t, ) callconv(.C) Error;

pub extern "CoreGraphics" fn GetDisplaysWithRect(rect: core_foundation.CGRect, maxDisplays: objc.uint32_t, displays: ?*DirectDisplayID, matchingDisplayCount: ?*objc.uint32_t, ) callconv(.C) Error;

pub extern "CoreGraphics" fn GetDisplaysWithOpenGLDisplayMask(mask: OpenGLDisplayMask, maxDisplays: objc.uint32_t, displays: ?*DirectDisplayID, matchingDisplayCount: ?*objc.uint32_t, ) callconv(.C) Error;

pub extern "CoreGraphics" fn GetActiveDisplayList(maxDisplays: objc.uint32_t, activeDisplays: ?*DirectDisplayID, displayCount: ?*objc.uint32_t) callconv(.C) Error;

pub extern "CoreGraphics" fn GetOnlineDisplayList(maxDisplays: objc.uint32_t, onlineDisplays: ?*DirectDisplayID, displayCount: ?*objc.uint32_t) callconv(.C) Error;

pub extern "CoreGraphics" fn DisplayIDToOpenGLDisplayMask(display: DirectDisplayID) callconv(.C) OpenGLDisplayMask;

pub extern "CoreGraphics" fn OpenGLDisplayMaskToDisplayID(mask: OpenGLDisplayMask) callconv(.C) DirectDisplayID;

pub extern "CoreGraphics" fn DisplayBounds(display: DirectDisplayID) callconv(.C) core_foundation.CGRect;

pub extern "CoreGraphics" fn DisplayPixelsWide(display: DirectDisplayID) callconv(.C) objc.size_t;

pub extern "CoreGraphics" fn DisplayPixelsHigh(display: DirectDisplayID) callconv(.C) objc.size_t;

pub extern "CoreGraphics" fn DisplayCopyAllDisplayModes(display: DirectDisplayID, options: core_foundation.DictionaryRef) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreGraphics" fn DisplayCopyDisplayMode(display: DirectDisplayID) callconv(.C) DisplayModeRef;

pub extern "CoreGraphics" fn DisplaySetDisplayMode(display: DirectDisplayID, mode: DisplayModeRef, options: core_foundation.DictionaryRef) callconv(.C) Error;

pub extern "CoreGraphics" fn DisplayModeGetWidth(mode: DisplayModeRef) callconv(.C) objc.size_t;

pub extern "CoreGraphics" fn DisplayModeGetHeight(mode: DisplayModeRef) callconv(.C) objc.size_t;

pub extern "CoreGraphics" fn DisplayModeCopyPixelEncoding(mode: DisplayModeRef) callconv(.C) core_foundation.StringRef;

pub extern "CoreGraphics" fn DisplayModeGetRefreshRate(mode: DisplayModeRef) callconv(.C) f64;

pub extern "CoreGraphics" fn DisplayModeGetIOFlags(mode: DisplayModeRef) callconv(.C) objc.uint32_t;

pub extern "CoreGraphics" fn DisplayModeGetIODisplayModeID(mode: DisplayModeRef) callconv(.C) objc.int32_t;

pub extern "CoreGraphics" fn DisplayModeIsUsableForDesktopGUI() callconv(.C) i32;

pub extern "CoreGraphics" fn DisplayModeGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreGraphics" fn DisplayModeRetain(mode: DisplayModeRef) callconv(.C) DisplayModeRef;

pub extern "CoreGraphics" fn DisplayModeRelease(mode: DisplayModeRef) callconv(.C) void;

pub extern "CoreGraphics" fn DisplayModeGetPixelWidth(mode: DisplayModeRef) callconv(.C) objc.size_t;

pub extern "CoreGraphics" fn DisplayModeGetPixelHeight(mode: DisplayModeRef) callconv(.C) objc.size_t;

pub const GammaValue = f32;

pub extern "CoreGraphics" fn SetDisplayTransferByFormula(display: DirectDisplayID, redMin: GammaValue, redMax: GammaValue, redGamma: GammaValue, greenMin: GammaValue, greenMax: GammaValue, greenGamma: GammaValue, blueMin: GammaValue, blueMax: GammaValue, blueGamma: GammaValue, ) callconv(.C) Error;

pub extern "CoreGraphics" fn GetDisplayTransferByFormula(display: DirectDisplayID, redMin: ?*GammaValue, redMax: ?*GammaValue, redGamma: ?*GammaValue, greenMin: ?*GammaValue, greenMax: ?*GammaValue, greenGamma: ?*GammaValue, blueMin: ?*GammaValue, blueMax: ?*GammaValue, blueGamma: ?*GammaValue, ) callconv(.C) Error;

pub extern "CoreGraphics" fn DisplayGammaTableCapacity(display: DirectDisplayID) callconv(.C) objc.uint32_t;

pub extern "CoreGraphics" fn SetDisplayTransferByTable(display: DirectDisplayID, tableSize: objc.uint32_t, redTable: ?*GammaValue, greenTable: ?*GammaValue, blueTable: ?*GammaValue, ) callconv(.C) Error;

pub extern "CoreGraphics" fn GetDisplayTransferByTable(display: DirectDisplayID, capacity: objc.uint32_t, redTable: ?*GammaValue, greenTable: ?*GammaValue, blueTable: ?*GammaValue, sampleCount: ?*objc.uint32_t, ) callconv(.C) Error;

pub extern "CoreGraphics" fn SetDisplayTransferByByteTable(display: DirectDisplayID, tableSize: objc.uint32_t, redTable: ?*objc.uint8_t, greenTable: ?*objc.uint8_t, blueTable: ?*objc.uint8_t, ) callconv(.C) Error;

pub extern "CoreGraphics" fn DisplayRestoreColorSyncSettings() callconv(.C) void;

pub const CaptureOptions = enum(objc.uint32_t) {
    kCGCaptureNoOptions = 0,
    kCGCaptureNoFill = 1,
};

pub extern "CoreGraphics" fn DisplayIsCaptured(display: DirectDisplayID) callconv(.C) objc.boolean_t;

pub extern "CoreGraphics" fn DisplayCapture(display: DirectDisplayID) callconv(.C) Error;

pub extern "CoreGraphics" fn DisplayCaptureWithOptions(display: DirectDisplayID, options: CaptureOptions) callconv(.C) Error;

pub extern "CoreGraphics" fn DisplayRelease(display: DirectDisplayID) callconv(.C) Error;

pub extern "CoreGraphics" fn CaptureAllDisplays() callconv(.C) Error;

pub extern "CoreGraphics" fn CaptureAllDisplaysWithOptions(options: CaptureOptions) callconv(.C) Error;

pub extern "CoreGraphics" fn ReleaseAllDisplays() callconv(.C) Error;

pub extern "CoreGraphics" fn ShieldingWindowID(display: DirectDisplayID) callconv(.C) WindowID;

pub extern "CoreGraphics" fn ShieldingWindowLevel() callconv(.C) WindowLevel;

pub extern "CoreGraphics" fn DisplayCreateImage(displayID: DirectDisplayID) callconv(.C) ImageRef;

pub extern "CoreGraphics" fn DisplayCreateImageForRect(display: DirectDisplayID, rect: core_foundation.CGRect) callconv(.C) ImageRef;

pub extern "CoreGraphics" fn DisplayHideCursor(display: DirectDisplayID) callconv(.C) Error;

pub extern "CoreGraphics" fn DisplayShowCursor(display: DirectDisplayID) callconv(.C) Error;

pub extern "CoreGraphics" fn DisplayMoveCursorToPoint(display: DirectDisplayID, point: core_foundation.CGPoint) callconv(.C) Error;

pub extern "CoreGraphics" fn GetLastMouseDelta(deltaX: ?*objc.int32_t, deltaY: ?*objc.int32_t) callconv(.C) void;

pub extern "CoreGraphics" fn DisplayGetDrawingContext(display: DirectDisplayID) callconv(.C) ContextRef;

pub const DisplayCount = objc.uint32_t;

pub const DisplayErr = Error;

pub extern "CoreGraphics" fn DisplayAvailableModes(dsp: DirectDisplayID) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreGraphics" fn DisplayBestModeForParameters(display: DirectDisplayID, bitsPerPixel: objc.size_t, width: objc.size_t, height: objc.size_t, exactMatch: ?*objc.boolean_t, ) callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreGraphics" fn DisplayBestModeForParametersAndRefreshRate(display: DirectDisplayID, bitsPerPixel: objc.size_t, width: objc.size_t, height: objc.size_t, refreshRate: RefreshRate, exactMatch: ?*objc.boolean_t, ) callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreGraphics" fn DisplayCurrentMode(display: DirectDisplayID) callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreGraphics" fn DisplaySwitchToMode(display: DirectDisplayID, mode: core_foundation.DictionaryRef) callconv(.C) Error;

pub const DeviceColor = extern struct {
    red: f32,
    green: f32,
    blue: f32,
};

pub const _CGDisplayConfigRef = extern struct {};

pub const DisplayConfigRef = ?*_CGDisplayConfigRef;

pub extern "CoreGraphics" fn BeginDisplayConfiguration(config: ?*DisplayConfigRef) callconv(.C) Error;

pub extern "CoreGraphics" fn ConfigureDisplayOrigin(config: DisplayConfigRef, display: DirectDisplayID, x: objc.int32_t, y: objc.int32_t, ) callconv(.C) Error;

pub extern "CoreGraphics" fn ConfigureDisplayWithDisplayMode(config: DisplayConfigRef, display: DirectDisplayID, mode: DisplayModeRef, options: core_foundation.DictionaryRef, ) callconv(.C) Error;

pub extern "CoreGraphics" fn ConfigureDisplayStereoOperation(config: DisplayConfigRef, display: DirectDisplayID, stereo: objc.boolean_t, forceBlueLine: objc.boolean_t, ) callconv(.C) Error;

pub extern "CoreGraphics" fn ConfigureDisplayMirrorOfDisplay(config: DisplayConfigRef, display: DirectDisplayID, master: DirectDisplayID) callconv(.C) Error;

pub extern "CoreGraphics" fn CancelDisplayConfiguration(config: DisplayConfigRef) callconv(.C) Error;

pub const ConfigureOption = enum(objc.uint32_t) {
    kCGConfigureForAppOnly = 0,
    kCGConfigureForSession = 1,
    kCGConfigurePermanently = 2,
};

pub extern "CoreGraphics" fn CompleteDisplayConfiguration(config: DisplayConfigRef, option: ConfigureOption) callconv(.C) Error;

pub extern "CoreGraphics" fn RestorePermanentDisplayConfiguration() callconv(.C) void;

pub const DisplayChangeSummaryFlags = enum(objc.uint32_t) {
    kCGDisplayBeginConfigurationFlag = 1,
    kCGDisplayMovedFlag = 2,
    kCGDisplaySetMainFlag = 4,
    kCGDisplaySetModeFlag = 8,
    kCGDisplayAddFlag = 16,
    kCGDisplayRemoveFlag = 32,
    kCGDisplayEnabledFlag = 256,
    kCGDisplayDisabledFlag = 512,
    kCGDisplayMirrorFlag = 1024,
    kCGDisplayUnMirrorFlag = 2048,
    kCGDisplayDesktopShapeChangedFlag = 4096,
};

pub const DisplayReconfigurationCallBack = ?*const fn(DirectDisplayID, DisplayChangeSummaryFlags, ?*anyopaque) callconv(.C) void;

pub extern "CoreGraphics" fn DisplayRegisterReconfigurationCallback(callback: DisplayReconfigurationCallBack, userInfo: ?*anyopaque) callconv(.C) Error;

pub extern "CoreGraphics" fn DisplayRemoveReconfigurationCallback(callback: DisplayReconfigurationCallBack, userInfo: ?*anyopaque) callconv(.C) Error;

pub extern "CoreGraphics" fn DisplaySetStereoOperation(display: DirectDisplayID, stereo: objc.boolean_t, forceBlueLine: objc.boolean_t, option: ConfigureOption, ) callconv(.C) Error;

pub extern "CoreGraphics" fn DisplayIsActive(display: DirectDisplayID) callconv(.C) objc.boolean_t;

pub extern "CoreGraphics" fn DisplayIsAsleep(display: DirectDisplayID) callconv(.C) objc.boolean_t;

pub extern "CoreGraphics" fn DisplayIsOnline(display: DirectDisplayID) callconv(.C) objc.boolean_t;

pub extern "CoreGraphics" fn DisplayIsMain(display: DirectDisplayID) callconv(.C) objc.boolean_t;

pub extern "CoreGraphics" fn DisplayIsBuiltin(display: DirectDisplayID) callconv(.C) objc.boolean_t;

pub extern "CoreGraphics" fn DisplayIsInMirrorSet(display: DirectDisplayID) callconv(.C) objc.boolean_t;

pub extern "CoreGraphics" fn DisplayIsAlwaysInMirrorSet(display: DirectDisplayID) callconv(.C) objc.boolean_t;

pub extern "CoreGraphics" fn DisplayIsInHWMirrorSet(display: DirectDisplayID) callconv(.C) objc.boolean_t;

pub extern "CoreGraphics" fn DisplayMirrorsDisplay(display: DirectDisplayID) callconv(.C) DirectDisplayID;

pub extern "CoreGraphics" fn DisplayUsesOpenGLAcceleration(display: DirectDisplayID) callconv(.C) objc.boolean_t;

pub extern "CoreGraphics" fn DisplayIsStereo(display: DirectDisplayID) callconv(.C) objc.boolean_t;

pub extern "CoreGraphics" fn DisplayPrimaryDisplay(display: DirectDisplayID) callconv(.C) DirectDisplayID;

pub extern "CoreGraphics" fn DisplayUnitNumber(display: DirectDisplayID) callconv(.C) objc.uint32_t;

pub extern "CoreGraphics" fn DisplayVendorNumber(display: DirectDisplayID) callconv(.C) objc.uint32_t;

pub extern "CoreGraphics" fn DisplayModelNumber(display: DirectDisplayID) callconv(.C) objc.uint32_t;

pub extern "CoreGraphics" fn DisplaySerialNumber(display: DirectDisplayID) callconv(.C) objc.uint32_t;

pub extern "CoreGraphics" fn DisplayIOServicePort(display: DirectDisplayID) callconv(.C) io_kit.io_service_t;

pub extern "CoreGraphics" fn DisplayScreenSize(display: DirectDisplayID) callconv(.C) core_foundation.CGSize;

pub extern "CoreGraphics" fn DisplayRotation(display: DirectDisplayID) callconv(.C) f64;

pub extern "CoreGraphics" fn DisplayCopyColorSpace(display: DirectDisplayID) callconv(.C) ColorSpaceRef;

pub extern "CoreGraphics" fn ConfigureDisplayMode(config: DisplayConfigRef, display: DirectDisplayID, mode: core_foundation.DictionaryRef) callconv(.C) Error;

pub const DisplayFadeReservationToken = objc.uint32_t;

pub const DisplayBlendFraction = f32;

pub const DisplayFadeInterval = f32;

pub extern "CoreGraphics" fn ConfigureDisplayFadeEffect(config: DisplayConfigRef, fadeOutSeconds: DisplayFadeInterval, fadeInSeconds: DisplayFadeInterval, fadeRed: f32, fadeGreen: f32, fadeBlue: f32, ) callconv(.C) Error;

pub const DisplayReservationInterval = f32;

pub extern "CoreGraphics" fn AcquireDisplayFadeReservation(seconds: DisplayReservationInterval, token: ?*DisplayFadeReservationToken) callconv(.C) Error;

pub extern "CoreGraphics" fn ReleaseDisplayFadeReservation(token: DisplayFadeReservationToken) callconv(.C) Error;

pub extern "CoreGraphics" fn DisplayFade(token: DisplayFadeReservationToken, duration: DisplayFadeInterval, startBlend: DisplayBlendFraction, endBlend: DisplayBlendFraction, redBlend: f32, greenBlend: f32, blueBlend: f32, synchronous: objc.boolean_t, ) callconv(.C) Error;

pub extern "CoreGraphics" fn DisplayFadeOperationInProgress() callconv(.C) objc.boolean_t;

pub const DisplayStream = extern struct {};

pub const DisplayStreamRef = ?*DisplayStream;

pub const DisplayStreamUpdate = extern struct {};

pub const DisplayStreamUpdateRef = ?*DisplayStreamUpdate;

pub const DisplayStreamUpdateRectType = enum(objc.int32_t) {
    kCGDisplayStreamUpdateRefreshedRects = 0,
    kCGDisplayStreamUpdateMovedRects = 1,
    kCGDisplayStreamUpdateDirtyRects = 2,
    kCGDisplayStreamUpdateReducedDirtyRects = 3,
};

pub const DisplayStreamFrameStatus = enum(objc.int32_t) {
    kCGDisplayStreamFrameStatusFrameComplete = 0,
    kCGDisplayStreamFrameStatusFrameIdle = 1,
    kCGDisplayStreamFrameStatusFrameBlank = 2,
    kCGDisplayStreamFrameStatusStopped = 3,
};

pub const DisplayStreamFrameAvailableHandler = *const fn(DisplayStreamFrameStatus, objc.uint64_t, IOSurfaceRef, DisplayStreamUpdateRef, ) callconv(.C) void;

pub extern "CoreGraphics" fn DisplayStreamUpdateGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreGraphics" fn DisplayStreamUpdateGetRects(updateRef: DisplayStreamUpdateRef, rectType: DisplayStreamUpdateRectType, rectCount: ?*objc.size_t) callconv(.C) ?*core_foundation.CGRect;

pub extern "CoreGraphics" fn DisplayStreamUpdateCreateMergedUpdate(firstUpdate: DisplayStreamUpdateRef, secondUpdate: DisplayStreamUpdateRef) callconv(.C) DisplayStreamUpdateRef;

pub extern "CoreGraphics" fn DisplayStreamUpdateGetMovedRectsDelta(updateRef: DisplayStreamUpdateRef, dx: ?*core_foundation.CGFloat, dy: ?*core_foundation.CGFloat) callconv(.C) void;

pub extern "CoreGraphics" fn DisplayStreamUpdateGetDropCount(updateRef: DisplayStreamUpdateRef) callconv(.C) objc.size_t;

pub extern "CoreGraphics" fn DisplayStreamGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreGraphics" fn DisplayStreamCreate(display: DirectDisplayID, outputWidth: objc.size_t, outputHeight: objc.size_t, pixelFormat: objc.int32_t, properties: core_foundation.DictionaryRef, handler: DisplayStreamFrameAvailableHandler, ) callconv(.C) DisplayStreamRef;

pub extern "CoreGraphics" fn DisplayStreamCreateWithDispatchQueue(display: DirectDisplayID, outputWidth: objc.size_t, outputHeight: objc.size_t, pixelFormat: objc.int32_t, properties: core_foundation.DictionaryRef, queue: objc.dispatch_queue_t, handler: DisplayStreamFrameAvailableHandler, ) callconv(.C) DisplayStreamRef;

pub extern "CoreGraphics" fn DisplayStreamStart(displayStream: DisplayStreamRef) callconv(.C) Error;

pub extern "CoreGraphics" fn DisplayStreamStop(displayStream: DisplayStreamRef) callconv(.C) Error;

pub extern "CoreGraphics" fn DisplayStreamGetRunLoopSource(displayStream: DisplayStreamRef) callconv(.C) core_foundation.RunLoopSourceRef;

pub const EventErr = Error;

pub const ButtonCount = objc.uint32_t;

pub const WheelCount = objc.uint32_t;

pub const CharCode = objc.uint16_t;

pub const KeyCode = objc.uint16_t;

pub const ScreenRefreshCallback = ?*const fn(objc.uint32_t, ?*core_foundation.CGRect, ?*anyopaque) callconv(.C) void;

pub extern "CoreGraphics" fn RegisterScreenRefreshCallback(callback: ScreenRefreshCallback, userInfo: ?*anyopaque) callconv(.C) Error;

pub extern "CoreGraphics" fn UnregisterScreenRefreshCallback(callback: ScreenRefreshCallback, userInfo: ?*anyopaque) callconv(.C) void;

pub extern "CoreGraphics" fn WaitForScreenRefreshRects(rects: ?*?*core_foundation.CGRect, count: ?*objc.uint32_t) callconv(.C) Error;

pub const ScreenUpdateOperation = enum(objc.uint32_t) {
    kCGScreenUpdateOperationRefresh = 0,
    kCGScreenUpdateOperationMove = 1,
    kCGScreenUpdateOperationReducedDirtyRectangleCount = -2147483648,
};

pub const ScreenUpdateMoveDelta = extern struct {
    dX: objc.int32_t,
    dY: objc.int32_t,
};

pub const ScreenUpdateMoveCallback = ?*const fn(ScreenUpdateMoveDelta, objc.size_t, ?*core_foundation.CGRect, ?*anyopaque, ) callconv(.C) void;

pub extern "CoreGraphics" fn ScreenRegisterMoveCallback(callback: ScreenUpdateMoveCallback, userInfo: ?*anyopaque) callconv(.C) Error;

pub extern "CoreGraphics" fn ScreenUnregisterMoveCallback(callback: ScreenUpdateMoveCallback, userInfo: ?*anyopaque) callconv(.C) void;

pub extern "CoreGraphics" fn WaitForScreenUpdateRects(requestedOperations: ScreenUpdateOperation, currentOperation: ?*ScreenUpdateOperation, rects: ?*?*core_foundation.CGRect, rectCount: ?*objc.size_t, delta: ?*ScreenUpdateMoveDelta, ) callconv(.C) Error;

pub extern "CoreGraphics" fn ReleaseScreenRefreshRects(rects: ?*core_foundation.CGRect) callconv(.C) void;

pub extern "CoreGraphics" fn CursorIsVisible() callconv(.C) objc.boolean_t;

pub extern "CoreGraphics" fn CursorIsDrawnInFramebuffer() callconv(.C) objc.boolean_t;

pub extern "CoreGraphics" fn WarpMouseCursorPosition(newCursorPosition: core_foundation.CGPoint) callconv(.C) Error;

pub extern "CoreGraphics" fn AssociateMouseAndMouseCursorPosition(connected: objc.boolean_t) callconv(.C) Error;

pub extern "CoreGraphics" fn WindowServerCreateServerPort() callconv(.C) core_foundation.MachPortRef;

pub extern "CoreGraphics" fn EnableEventStateCombining(combineState: objc.boolean_t) callconv(.C) Error;

pub extern "CoreGraphics" fn InhibitLocalEvents(inhibit: objc.boolean_t) callconv(.C) Error;

pub extern "CoreGraphics" fn PostMouseEvent(mouseCursorPosition: core_foundation.CGPoint, updateMouseCursorPosition: objc.boolean_t, buttonCount: ButtonCount, mouseButtonDown: objc.boolean_t, ) callconv(.C) Error;

pub extern "CoreGraphics" fn PostScrollWheelEvent(wheelCount: WheelCount, wheel1: objc.int32_t) callconv(.C) Error;

pub extern "CoreGraphics" fn PostKeyboardEvent(keyChar: CharCode, virtualKey: KeyCode, keyDown: objc.boolean_t) callconv(.C) Error;

pub const EventFilterMask = enum(objc.uint32_t) {
    kCGEventFilterMaskPermitLocalMouseEvents = 1,
    kCGEventFilterMaskPermitLocalKeyboardEvents = 2,
    kCGEventFilterMaskPermitSystemDefinedEvents = 4,
};

pub const EventSuppressionState = enum(objc.uint32_t) {
    kCGEventSuppressionStateSuppressionInterval = 0,
    kCGEventSuppressionStateRemoteMouseDrag = 1,
    kCGNumberOfEventSuppressionStates = 2,
};

pub extern "CoreGraphics" fn SetLocalEventsFilterDuringSuppressionState(filter: EventFilterMask, state: EventSuppressionState) callconv(.C) Error;

pub extern "CoreGraphics" fn SetLocalEventsSuppressionInterval(seconds: core_foundation.TimeInterval) callconv(.C) Error;

pub extern "CoreGraphics" fn WindowServerCFMachPort() callconv(.C) core_foundation.MachPortRef;

pub const RectCount = objc.uint32_t;

pub const __CGEvent = extern struct {};

pub const EventRef = ?*__CGEvent;

pub const MouseButton = enum(objc.uint32_t) {
    kCGMouseButtonLeft = 0,
    kCGMouseButtonRight = 1,
    kCGMouseButtonCenter = 2,
};

pub const ScrollEventUnit = enum(objc.uint32_t) {
    kCGScrollEventUnitPixel = 0,
    kCGScrollEventUnitLine = 1,
};

pub const MomentumScrollPhase = enum(objc.uint32_t) {
    kCGMomentumScrollPhaseNone = 0,
    kCGMomentumScrollPhaseBegin = 1,
    kCGMomentumScrollPhaseContinue = 2,
    kCGMomentumScrollPhaseEnd = 3,
};

pub const ScrollPhase = enum(objc.uint32_t) {
    kCGScrollPhaseBegan = 1,
    kCGScrollPhaseChanged = 2,
    kCGScrollPhaseEnded = 4,
    kCGScrollPhaseCancelled = 8,
    kCGScrollPhaseMayBegin = 128,
};

pub const GesturePhase = enum(objc.uint32_t) {
    kCGGesturePhaseNone = 0,
    kCGGesturePhaseBegan = 1,
    kCGGesturePhaseChanged = 2,
    kCGGesturePhaseEnded = 4,
    kCGGesturePhaseCancelled = 8,
    kCGGesturePhaseMayBegin = 128,
};

pub const EventFlags = enum(objc.uint64_t) {
    kCGEventFlagMaskAlphaShift = 65536,
    kCGEventFlagMaskShift = 131072,
    kCGEventFlagMaskControl = 262144,
    kCGEventFlagMaskAlternate = 524288,
    kCGEventFlagMaskCommand = 1048576,
    kCGEventFlagMaskHelp = 4194304,
    kCGEventFlagMaskSecondaryFn = 8388608,
    kCGEventFlagMaskNumericPad = 2097152,
    kCGEventFlagMaskNonCoalesced = 256,
};

pub const EventType = enum(objc.uint32_t) {
    kCGEventNull = 0,
    kCGEventLeftMouseDown = 1,
    kCGEventLeftMouseUp = 2,
    kCGEventRightMouseDown = 3,
    kCGEventRightMouseUp = 4,
    kCGEventMouseMoved = 5,
    kCGEventLeftMouseDragged = 6,
    kCGEventRightMouseDragged = 7,
    kCGEventKeyDown = 10,
    kCGEventKeyUp = 11,
    kCGEventFlagsChanged = 12,
    kCGEventScrollWheel = 22,
    kCGEventTabletPointer = 23,
    kCGEventTabletProximity = 24,
    kCGEventOtherMouseDown = 25,
    kCGEventOtherMouseUp = 26,
    kCGEventOtherMouseDragged = 27,
    kCGEventTapDisabledByTimeout = -2,
    kCGEventTapDisabledByUserInput = -1,
};

pub const EventTimestamp = objc.uint64_t;

pub const EventField = enum(objc.uint32_t) {
    kCGMouseEventNumber = 0,
    kCGMouseEventClickState = 1,
    kCGMouseEventPressure = 2,
    kCGMouseEventButtonNumber = 3,
    kCGMouseEventDeltaX = 4,
    kCGMouseEventDeltaY = 5,
    kCGMouseEventInstantMouser = 6,
    kCGMouseEventSubtype = 7,
    kCGKeyboardEventAutorepeat = 8,
    kCGKeyboardEventKeycode = 9,
    kCGKeyboardEventKeyboardType = 10,
    kCGScrollWheelEventDeltaAxis1 = 11,
    kCGScrollWheelEventDeltaAxis2 = 12,
    kCGScrollWheelEventDeltaAxis3 = 13,
    kCGScrollWheelEventFixedPtDeltaAxis1 = 93,
    kCGScrollWheelEventFixedPtDeltaAxis2 = 94,
    kCGScrollWheelEventFixedPtDeltaAxis3 = 95,
    kCGScrollWheelEventPointDeltaAxis1 = 96,
    kCGScrollWheelEventPointDeltaAxis2 = 97,
    kCGScrollWheelEventPointDeltaAxis3 = 98,
    kCGScrollWheelEventScrollPhase = 99,
    kCGScrollWheelEventScrollCount = 100,
    kCGScrollWheelEventMomentumPhase = 123,
    kCGScrollWheelEventInstantMouser = 14,
    kCGTabletEventPointX = 15,
    kCGTabletEventPointY = 16,
    kCGTabletEventPointZ = 17,
    kCGTabletEventPointButtons = 18,
    kCGTabletEventPointPressure = 19,
    kCGTabletEventTiltX = 20,
    kCGTabletEventTiltY = 21,
    kCGTabletEventRotation = 22,
    kCGTabletEventTangentialPressure = 23,
    kCGTabletEventDeviceID = 24,
    kCGTabletEventVendor1 = 25,
    kCGTabletEventVendor2 = 26,
    kCGTabletEventVendor3 = 27,
    kCGTabletProximityEventVendorID = 28,
    kCGTabletProximityEventTabletID = 29,
    kCGTabletProximityEventPointerID = 30,
    kCGTabletProximityEventDeviceID = 31,
    kCGTabletProximityEventSystemTabletID = 32,
    kCGTabletProximityEventVendorPointerType = 33,
    kCGTabletProximityEventVendorPointerSerialNumber = 34,
    kCGTabletProximityEventVendorUniqueID = 35,
    kCGTabletProximityEventCapabilityMask = 36,
    kCGTabletProximityEventPointerType = 37,
    kCGTabletProximityEventEnterProximity = 38,
    kCGEventTargetProcessSerialNumber = 39,
    kCGEventTargetUnixProcessID = 40,
    kCGEventSourceUnixProcessID = 41,
    kCGEventSourceUserData = 42,
    kCGEventSourceUserID = 43,
    kCGEventSourceGroupID = 44,
    kCGEventSourceStateID = 45,
    kCGScrollWheelEventIsContinuous = 88,
    kCGMouseEventWindowUnderMousePointer = 91,
    kCGMouseEventWindowUnderMousePointerThatCanHandleThisEvent = 92,
    kCGEventUnacceleratedPointerMovementX = 170,
    kCGEventUnacceleratedPointerMovementY = 171,
    kCGScrollWheelEventMomentumOptionPhase = 173,
    kCGScrollWheelEventAcceleratedDeltaAxis1 = 176,
    kCGScrollWheelEventAcceleratedDeltaAxis2 = 175,
    kCGScrollWheelEventRawDeltaAxis1 = 178,
    kCGScrollWheelEventRawDeltaAxis2 = 177,
};

pub const EventMouseSubtype = enum(objc.uint32_t) {
    kCGEventMouseSubtypeDefault = 0,
    kCGEventMouseSubtypeTabletPoint = 1,
    kCGEventMouseSubtypeTabletProximity = 2,
};

pub const EventTapLocation = enum(objc.uint32_t) {
    kCGHIDEventTap = 0,
    kCGSessionEventTap = 1,
    kCGAnnotatedSessionEventTap = 2,
};

pub const EventTapPlacement = enum(objc.uint32_t) {
    kCGHeadInsertEventTap = 0,
    kCGTailAppendEventTap = 1,
};

pub const EventTapOptions = enum(objc.uint32_t) {
    kCGEventTapOptionDefault = 0,
    kCGEventTapOptionListenOnly = 1,
};

pub const EventMask = objc.uint64_t;

pub const __CGEventTapProxy = extern struct {};

pub const EventTapProxy = ?*__CGEventTapProxy;

pub const EventTapCallBack = ?*const fn(EventTapProxy, EventType, EventRef, ?*anyopaque, ) callconv(.C) EventRef;

pub const __CGEventTapInformation = extern struct {
    eventTapID: objc.uint32_t,
    tapPoint: EventTapLocation,
    options: EventTapOptions,
    eventsOfInterest: EventMask,
    tappingProcess: objc.pid_t,
    processBeingTapped: objc.pid_t,
    enabled: bool,
    minUsecLatency: f32,
    avgUsecLatency: f32,
    maxUsecLatency: f32,
};

pub const __CGEventSource = extern struct {};

pub const EventSourceRef = ?*__CGEventSource;

pub const EventSourceStateID = enum(objc.int32_t) {
    kCGEventSourceStatePrivate = -1,
    kCGEventSourceStateCombinedSessionState = 0,
    kCGEventSourceStateHIDSystemState = 1,
};

pub const EventSourceKeyboardType = objc.uint32_t;

pub extern "CoreGraphics" fn EventGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreGraphics" fn EventCreate(source: EventSourceRef) callconv(.C) EventRef;

pub extern "CoreGraphics" fn EventCreateData(allocator: core_foundation.AllocatorRef, event: EventRef) callconv(.C) core_foundation.DataRef;

pub extern "CoreGraphics" fn EventCreateFromData(allocator: core_foundation.AllocatorRef, data: core_foundation.DataRef) callconv(.C) EventRef;

pub extern "CoreGraphics" fn EventCreateMouseEvent(source: EventSourceRef, mouseType: EventType, mouseCursorPosition: core_foundation.CGPoint, mouseButton: MouseButton, ) callconv(.C) EventRef;

pub extern "CoreGraphics" fn EventCreateKeyboardEvent(source: EventSourceRef, virtualKey: KeyCode, keyDown: bool) callconv(.C) EventRef;

pub extern "CoreGraphics" fn EventCreateScrollWheelEvent(source: EventSourceRef, units: ScrollEventUnit, wheelCount: objc.uint32_t, wheel1: objc.int32_t, ) callconv(.C) EventRef;

pub extern "CoreGraphics" fn EventCreateScrollWheelEvent2(source: EventSourceRef, units: ScrollEventUnit, wheelCount: objc.uint32_t, wheel1: objc.int32_t, wheel2: objc.int32_t, wheel3: objc.int32_t, ) callconv(.C) EventRef;

pub extern "CoreGraphics" fn EventCreateCopy(event: EventRef) callconv(.C) EventRef;

pub extern "CoreGraphics" fn EventCreateSourceFromEvent(event: EventRef) callconv(.C) EventSourceRef;

pub extern "CoreGraphics" fn EventSetSource(event: EventRef, source: EventSourceRef) callconv(.C) void;

pub extern "CoreGraphics" fn EventGetType(event: EventRef) callconv(.C) EventType;

pub extern "CoreGraphics" fn EventSetType(event: EventRef, @"type": EventType) callconv(.C) void;

pub extern "CoreGraphics" fn EventGetTimestamp(event: EventRef) callconv(.C) EventTimestamp;

pub extern "CoreGraphics" fn EventSetTimestamp(event: EventRef, timestamp: EventTimestamp) callconv(.C) void;

pub extern "CoreGraphics" fn EventGetLocation(event: EventRef) callconv(.C) core_foundation.CGPoint;

pub extern "CoreGraphics" fn EventGetUnflippedLocation(event: EventRef) callconv(.C) core_foundation.CGPoint;

pub extern "CoreGraphics" fn EventSetLocation(event: EventRef, location: core_foundation.CGPoint) callconv(.C) void;

pub extern "CoreGraphics" fn EventGetFlags(event: EventRef) callconv(.C) EventFlags;

pub extern "CoreGraphics" fn EventSetFlags(event: EventRef, flags: EventFlags) callconv(.C) void;

pub extern "CoreGraphics" fn EventKeyboardGetUnicodeString(event: EventRef, maxStringLength: objc.UniCharCount, actualStringLength: ?*objc.UniCharCount, unicodeString: ?*objc.UniChar, ) callconv(.C) void;

pub extern "CoreGraphics" fn EventKeyboardSetUnicodeString(event: EventRef, stringLength: objc.UniCharCount, unicodeString: ?*objc.UniChar) callconv(.C) void;

pub extern "CoreGraphics" fn EventGetIntegerValueField(event: EventRef, field: EventField) callconv(.C) objc.int64_t;

pub extern "CoreGraphics" fn EventSetIntegerValueField(event: EventRef, field: EventField, value: objc.int64_t) callconv(.C) void;

pub extern "CoreGraphics" fn EventGetDoubleValueField(event: EventRef, field: EventField) callconv(.C) f64;

pub extern "CoreGraphics" fn EventSetDoubleValueField(event: EventRef, field: EventField, value: f64) callconv(.C) void;

pub extern "CoreGraphics" fn EventTapCreate(tap: EventTapLocation, place: EventTapPlacement, options: EventTapOptions, eventsOfInterest: EventMask, callback: EventTapCallBack, userInfo: ?*anyopaque, ) callconv(.C) core_foundation.MachPortRef;

pub extern "CoreGraphics" fn EventTapCreateForPSN(processSerialNumber: ?*anyopaque, place: EventTapPlacement, options: EventTapOptions, eventsOfInterest: EventMask, callback: EventTapCallBack, userInfo: ?*anyopaque, ) callconv(.C) core_foundation.MachPortRef;

pub extern "CoreGraphics" fn EventTapCreateForPid(pid: objc.pid_t, place: EventTapPlacement, options: EventTapOptions, eventsOfInterest: EventMask, callback: EventTapCallBack, userInfo: ?*anyopaque, ) callconv(.C) core_foundation.MachPortRef;

pub extern "CoreGraphics" fn EventTapEnable(tap: core_foundation.MachPortRef, enable: bool) callconv(.C) void;

pub extern "CoreGraphics" fn EventTapIsEnabled() callconv(.C) i32;

pub extern "CoreGraphics" fn EventTapPostEvent(proxy: EventTapProxy, event: EventRef) callconv(.C) void;

pub extern "CoreGraphics" fn EventPost(tap: EventTapLocation, event: EventRef) callconv(.C) void;

pub extern "CoreGraphics" fn EventPostToPSN(processSerialNumber: ?*anyopaque, event: EventRef) callconv(.C) void;

pub extern "CoreGraphics" fn EventPostToPid(pid: objc.pid_t, event: EventRef) callconv(.C) void;

pub extern "CoreGraphics" fn GetEventTapList(maxNumberOfTaps: objc.uint32_t, tapList: ?*EventTapInformation, eventTapCount: ?*objc.uint32_t) callconv(.C) Error;

pub extern "CoreGraphics" fn PreflightListenEventAccess() callconv(.C) i32;

pub extern "CoreGraphics" fn RequestListenEventAccess() callconv(.C) i32;

pub extern "CoreGraphics" fn PreflightPostEventAccess() callconv(.C) i32;

pub extern "CoreGraphics" fn RequestPostEventAccess() callconv(.C) i32;

pub extern "CoreGraphics" fn EventSourceGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreGraphics" fn EventSourceCreate(stateID: EventSourceStateID) callconv(.C) EventSourceRef;

pub extern "CoreGraphics" fn EventSourceGetKeyboardType(source: EventSourceRef) callconv(.C) EventSourceKeyboardType;

pub extern "CoreGraphics" fn EventSourceSetKeyboardType(source: EventSourceRef, keyboardType: EventSourceKeyboardType) callconv(.C) void;

pub extern "CoreGraphics" fn EventSourceGetPixelsPerLine(source: EventSourceRef) callconv(.C) f64;

pub extern "CoreGraphics" fn EventSourceSetPixelsPerLine(source: EventSourceRef, pixelsPerLine: f64) callconv(.C) void;

pub extern "CoreGraphics" fn EventSourceGetSourceStateID(source: EventSourceRef) callconv(.C) EventSourceStateID;

pub extern "CoreGraphics" fn EventSourceButtonState() callconv(.C) i32;

pub extern "CoreGraphics" fn EventSourceKeyState() callconv(.C) i32;

pub extern "CoreGraphics" fn EventSourceFlagsState(stateID: EventSourceStateID) callconv(.C) EventFlags;

pub extern "CoreGraphics" fn EventSourceSecondsSinceLastEventType(stateID: EventSourceStateID, eventType: EventType) callconv(.C) core_foundation.TimeInterval;

pub extern "CoreGraphics" fn EventSourceCounterForEventType(stateID: EventSourceStateID, eventType: EventType) callconv(.C) objc.uint32_t;

pub extern "CoreGraphics" fn EventSourceSetUserData(source: EventSourceRef, userData: objc.int64_t) callconv(.C) void;

pub extern "CoreGraphics" fn EventSourceGetUserData(source: EventSourceRef) callconv(.C) objc.int64_t;

pub extern "CoreGraphics" fn EventSourceSetLocalEventsFilterDuringSuppressionState(source: EventSourceRef, filter: EventFilterMask, state: EventSuppressionState) callconv(.C) void;

pub extern "CoreGraphics" fn EventSourceGetLocalEventsFilterDuringSuppressionState(source: EventSourceRef, state: EventSuppressionState) callconv(.C) EventFilterMask;

pub extern "CoreGraphics" fn EventSourceSetLocalEventsSuppressionInterval(source: EventSourceRef, seconds: core_foundation.TimeInterval) callconv(.C) void;

pub extern "CoreGraphics" fn EventSourceGetLocalEventsSuppressionInterval(source: EventSourceRef) callconv(.C) core_foundation.TimeInterval;

pub const PSConverter = extern struct {};

pub const PSConverterRef = ?*PSConverter;

pub const PSConverterBeginDocumentCallback = ?*const fn(?*anyopaque) callconv(.C) void;

pub const PSConverterEndDocumentCallback = ?*const fn(?*anyopaque, bool) callconv(.C) void;

pub const PSConverterBeginPageCallback = ?*const fn(?*anyopaque, objc.size_t, core_foundation.DictionaryRef) callconv(.C) void;

pub const PSConverterEndPageCallback = ?*const fn(?*anyopaque, objc.size_t, core_foundation.DictionaryRef) callconv(.C) void;

pub const PSConverterProgressCallback = ?*const fn(?*anyopaque) callconv(.C) void;

pub const PSConverterMessageCallback = ?*const fn(?*anyopaque, core_foundation.StringRef) callconv(.C) void;

pub const PSConverterReleaseInfoCallback = ?*const fn(?*anyopaque) callconv(.C) void;

pub const PSConverterCallbacks = extern struct {
    version: u32,
    beginDocument: PSConverterBeginDocumentCallback,
    endDocument: PSConverterEndDocumentCallback,
    beginPage: PSConverterBeginPageCallback,
    endPage: PSConverterEndPageCallback,
    noteProgress: PSConverterProgressCallback,
    noteMessage: PSConverterMessageCallback,
    releaseInfo: PSConverterReleaseInfoCallback,
};

pub extern "CoreGraphics" fn PSConverterCreate(info: ?*anyopaque, callbacks: ?*PSConverterCallbacks, options: core_foundation.DictionaryRef) callconv(.C) PSConverterRef;

pub extern "CoreGraphics" fn PSConverterConvert() callconv(.C) i32;

pub extern "CoreGraphics" fn PSConverterAbort() callconv(.C) i32;

pub extern "CoreGraphics" fn PSConverterIsConverting() callconv(.C) i32;

pub extern "CoreGraphics" fn PSConverterGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreGraphics" fn SessionCopyCurrentDictionary() callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreGraphics" fn DirectDisplayCopyCurrentMetalDevice(display: DirectDisplayID) callconv(.C) ?*anyopaque;

