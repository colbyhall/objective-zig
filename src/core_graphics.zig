// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const io_kit = @import("io_kit.zig"); // Framework dependency IOKit.

pub const __IOSurface = extern struct {};

pub const IOSurfaceRef = __IOSurface;

extern "CoreGraphics" fn CGRectGetMinX(rect: core_foundation.CGRect) callconv(.C) core_foundation.CGFloat;
pub const rectGetMinX = CGRectGetMinX;

extern "CoreGraphics" fn CGRectGetMidX(rect: core_foundation.CGRect) callconv(.C) core_foundation.CGFloat;
pub const rectGetMidX = CGRectGetMidX;

extern "CoreGraphics" fn CGRectGetMaxX(rect: core_foundation.CGRect) callconv(.C) core_foundation.CGFloat;
pub const rectGetMaxX = CGRectGetMaxX;

extern "CoreGraphics" fn CGRectGetMinY(rect: core_foundation.CGRect) callconv(.C) core_foundation.CGFloat;
pub const rectGetMinY = CGRectGetMinY;

extern "CoreGraphics" fn CGRectGetMidY(rect: core_foundation.CGRect) callconv(.C) core_foundation.CGFloat;
pub const rectGetMidY = CGRectGetMidY;

extern "CoreGraphics" fn CGRectGetMaxY(rect: core_foundation.CGRect) callconv(.C) core_foundation.CGFloat;
pub const rectGetMaxY = CGRectGetMaxY;

extern "CoreGraphics" fn CGRectGetWidth(rect: core_foundation.CGRect) callconv(.C) core_foundation.CGFloat;
pub const rectGetWidth = CGRectGetWidth;

extern "CoreGraphics" fn CGRectGetHeight(rect: core_foundation.CGRect) callconv(.C) core_foundation.CGFloat;
pub const rectGetHeight = CGRectGetHeight;

extern "CoreGraphics" fn CGPointEqualToPoint(point1: core_foundation.CGPoint, point2: core_foundation.CGPoint) callconv(.C) i32;
pub const pointEqualToPoint = CGPointEqualToPoint;

extern "CoreGraphics" fn CGSizeEqualToSize(size1: core_foundation.CGSize, size2: core_foundation.CGSize) callconv(.C) i32;
pub const sizeEqualToSize = CGSizeEqualToSize;

extern "CoreGraphics" fn CGRectEqualToRect(rect1: core_foundation.CGRect, rect2: core_foundation.CGRect) callconv(.C) i32;
pub const rectEqualToRect = CGRectEqualToRect;

extern "CoreGraphics" fn CGRectStandardize(rect: core_foundation.CGRect) callconv(.C) core_foundation.CGRect;
pub const rectStandardize = CGRectStandardize;

extern "CoreGraphics" fn CGRectIsEmpty(rect: core_foundation.CGRect) callconv(.C) i32;
pub const rectIsEmpty = CGRectIsEmpty;

extern "CoreGraphics" fn CGRectIsNull(rect: core_foundation.CGRect) callconv(.C) i32;
pub const rectIsNull = CGRectIsNull;

extern "CoreGraphics" fn CGRectIsInfinite(rect: core_foundation.CGRect) callconv(.C) i32;
pub const rectIsInfinite = CGRectIsInfinite;

extern "CoreGraphics" fn CGRectInset(rect: core_foundation.CGRect, dx: core_foundation.CGFloat, dy: core_foundation.CGFloat) callconv(.C) core_foundation.CGRect;
pub const rectInset = CGRectInset;

extern "CoreGraphics" fn CGRectIntegral(rect: core_foundation.CGRect) callconv(.C) core_foundation.CGRect;
pub const rectIntegral = CGRectIntegral;

extern "CoreGraphics" fn CGRectUnion(r1: core_foundation.CGRect, r2: core_foundation.CGRect) callconv(.C) core_foundation.CGRect;
pub const rectUnion = CGRectUnion;

extern "CoreGraphics" fn CGRectIntersection(r1: core_foundation.CGRect, r2: core_foundation.CGRect) callconv(.C) core_foundation.CGRect;
pub const rectIntersection = CGRectIntersection;

extern "CoreGraphics" fn CGRectOffset(rect: core_foundation.CGRect, dx: core_foundation.CGFloat, dy: core_foundation.CGFloat) callconv(.C) core_foundation.CGRect;
pub const rectOffset = CGRectOffset;

extern "CoreGraphics" fn CGRectDivide(
    rect: core_foundation.CGRect,
    slice: ?*core_foundation.CGRect,
    remainder: ?*core_foundation.CGRect,
    amount: core_foundation.CGFloat,
    edge: core_foundation.CGRectEdge,
) callconv(.C) void;
pub const rectDivide = CGRectDivide;

extern "CoreGraphics" fn CGRectContainsPoint(rect: core_foundation.CGRect, point: core_foundation.CGPoint) callconv(.C) i32;
pub const rectContainsPoint = CGRectContainsPoint;

extern "CoreGraphics" fn CGRectContainsRect(rect1: core_foundation.CGRect, rect2: core_foundation.CGRect) callconv(.C) i32;
pub const rectContainsRect = CGRectContainsRect;

extern "CoreGraphics" fn CGRectIntersectsRect(rect1: core_foundation.CGRect, rect2: core_foundation.CGRect) callconv(.C) i32;
pub const rectIntersectsRect = CGRectIntersectsRect;

extern "CoreGraphics" fn CGPointCreateDictionaryRepresentation(point: core_foundation.CGPoint) callconv(.C) core_foundation.DictionaryRef;
pub const pointCreateDictionaryRepresentation = CGPointCreateDictionaryRepresentation;

extern "CoreGraphics" fn CGPointMakeWithDictionaryRepresentation(dict: core_foundation.DictionaryRef, point: ?*core_foundation.CGPoint) callconv(.C) i32;
pub const pointMakeWithDictionaryRepresentation = CGPointMakeWithDictionaryRepresentation;

extern "CoreGraphics" fn CGSizeCreateDictionaryRepresentation(size: core_foundation.CGSize) callconv(.C) core_foundation.DictionaryRef;
pub const sizeCreateDictionaryRepresentation = CGSizeCreateDictionaryRepresentation;

extern "CoreGraphics" fn CGSizeMakeWithDictionaryRepresentation(dict: core_foundation.DictionaryRef, size: ?*core_foundation.CGSize) callconv(.C) i32;
pub const sizeMakeWithDictionaryRepresentation = CGSizeMakeWithDictionaryRepresentation;

extern "CoreGraphics" fn CGRectCreateDictionaryRepresentation(core_foundation.CGRect) callconv(.C) core_foundation.DictionaryRef;
pub const rectCreateDictionaryRepresentation = CGRectCreateDictionaryRepresentation;

extern "CoreGraphics" fn CGRectMakeWithDictionaryRepresentation(dict: core_foundation.DictionaryRef, rect: ?*core_foundation.CGRect) callconv(.C) i32;
pub const rectMakeWithDictionaryRepresentation = CGRectMakeWithDictionaryRepresentation;

extern "CoreGraphics" fn CGAffineTransformMake(
    a: core_foundation.CGFloat,
    b: core_foundation.CGFloat,
    c: core_foundation.CGFloat,
    d: core_foundation.CGFloat,
    tx: core_foundation.CGFloat,
    ty: core_foundation.CGFloat,
) callconv(.C) core_foundation.CGAffineTransform;
pub const affineTransformMake = CGAffineTransformMake;

extern "CoreGraphics" fn CGAffineTransformMakeTranslation(tx: core_foundation.CGFloat, ty: core_foundation.CGFloat) callconv(.C) core_foundation.CGAffineTransform;
pub const affineTransformMakeTranslation = CGAffineTransformMakeTranslation;

extern "CoreGraphics" fn CGAffineTransformMakeScale(sx: core_foundation.CGFloat, sy: core_foundation.CGFloat) callconv(.C) core_foundation.CGAffineTransform;
pub const affineTransformMakeScale = CGAffineTransformMakeScale;

extern "CoreGraphics" fn CGAffineTransformMakeRotation(angle: core_foundation.CGFloat) callconv(.C) core_foundation.CGAffineTransform;
pub const affineTransformMakeRotation = CGAffineTransformMakeRotation;

extern "CoreGraphics" fn CGAffineTransformIsIdentity(t: core_foundation.CGAffineTransform) callconv(.C) i32;
pub const affineTransformIsIdentity = CGAffineTransformIsIdentity;

extern "CoreGraphics" fn CGAffineTransformTranslate(t: core_foundation.CGAffineTransform, tx: core_foundation.CGFloat, ty: core_foundation.CGFloat) callconv(.C) core_foundation.CGAffineTransform;
pub const affineTransformTranslate = CGAffineTransformTranslate;

extern "CoreGraphics" fn CGAffineTransformScale(t: core_foundation.CGAffineTransform, sx: core_foundation.CGFloat, sy: core_foundation.CGFloat) callconv(.C) core_foundation.CGAffineTransform;
pub const affineTransformScale = CGAffineTransformScale;

extern "CoreGraphics" fn CGAffineTransformRotate(t: core_foundation.CGAffineTransform, angle: core_foundation.CGFloat) callconv(.C) core_foundation.CGAffineTransform;
pub const affineTransformRotate = CGAffineTransformRotate;

extern "CoreGraphics" fn CGAffineTransformInvert(t: core_foundation.CGAffineTransform) callconv(.C) core_foundation.CGAffineTransform;
pub const affineTransformInvert = CGAffineTransformInvert;

extern "CoreGraphics" fn CGAffineTransformConcat(t1: core_foundation.CGAffineTransform, t2: core_foundation.CGAffineTransform) callconv(.C) core_foundation.CGAffineTransform;
pub const affineTransformConcat = CGAffineTransformConcat;

extern "CoreGraphics" fn CGAffineTransformEqualToTransform(t1: core_foundation.CGAffineTransform, t2: core_foundation.CGAffineTransform) callconv(.C) i32;
pub const affineTransformEqualToTransform = CGAffineTransformEqualToTransform;

extern "CoreGraphics" fn CGPointApplyAffineTransform(point: core_foundation.CGPoint, t: core_foundation.CGAffineTransform) callconv(.C) core_foundation.CGPoint;
pub const pointApplyAffineTransform = CGPointApplyAffineTransform;

extern "CoreGraphics" fn CGSizeApplyAffineTransform(size: core_foundation.CGSize, t: core_foundation.CGAffineTransform) callconv(.C) core_foundation.CGSize;
pub const sizeApplyAffineTransform = CGSizeApplyAffineTransform;

extern "CoreGraphics" fn CGRectApplyAffineTransform(rect: core_foundation.CGRect, t: core_foundation.CGAffineTransform) callconv(.C) core_foundation.CGRect;
pub const rectApplyAffineTransform = CGRectApplyAffineTransform;

extern "CoreGraphics" fn CGAffineTransformDecompose(transform: core_foundation.CGAffineTransform) callconv(.C) core_foundation.CGAffineTransformComponents;
pub const affineTransformDecompose = CGAffineTransformDecompose;

extern "CoreGraphics" fn CGAffineTransformMakeWithComponents(components: core_foundation.CGAffineTransformComponents) callconv(.C) core_foundation.CGAffineTransform;
pub const affineTransformMakeWithComponents = CGAffineTransformMakeWithComponents;

pub const Context = extern struct {};

pub const ContextRef = Context;

pub const Color = extern struct {};

pub const ColorRef = Color;

pub const ColorSpace = extern struct {};

pub const ColorSpaceRef = ColorSpace;

pub const DataProvider = extern struct {};

pub const DataProviderRef = DataProvider;

pub const DataProviderGetBytesCallback = objc.size_t;

pub const DataProviderSkipForwardCallback = objc.off_t;

pub const DataProviderRewindCallback = ?*const fn (?*anyopaque) callconv(.C) void;

pub const DataProviderReleaseInfoCallback = ?*const fn (?*anyopaque) callconv(.C) void;

pub const DataProviderSequentialCallbacks = extern struct {
    version: u32,
    getBytes: DataProviderGetBytesCallback,
    skipForward: DataProviderSkipForwardCallback,
    rewind: DataProviderRewindCallback,
    releaseInfo: DataProviderReleaseInfoCallback,
};

pub const DataProviderGetBytePointerCallback = ?*const fn (?*anyopaque) callconv(.C) ?*const anyopaque;

pub const DataProviderReleaseBytePointerCallback = ?*const fn (?*anyopaque, ?*const anyopaque) callconv(.C) void;

pub const DataProviderGetBytesAtPositionCallback = objc.size_t;

pub const DataProviderDirectCallbacks = extern struct {
    version: u32,
    getBytePointer: DataProviderGetBytePointerCallback,
    releaseBytePointer: DataProviderReleaseBytePointerCallback,
    getBytesAtPosition: DataProviderGetBytesAtPositionCallback,
    releaseInfo: DataProviderReleaseInfoCallback,
};

extern "CoreGraphics" fn CGDataProviderGetTypeID() callconv(.C) core_foundation.TypeID;
pub const dataProviderGetTypeID = CGDataProviderGetTypeID;

extern "CoreGraphics" fn CGDataProviderCreateSequential(info: ?*anyopaque, callbacks: ?*const DataProviderSequentialCallbacks) callconv(.C) DataProviderRef;
pub const dataProviderCreateSequential = CGDataProviderCreateSequential;

extern "CoreGraphics" fn CGDataProviderCreateDirect(info: ?*anyopaque, size: objc.off_t, callbacks: ?*const DataProviderDirectCallbacks) callconv(.C) DataProviderRef;
pub const dataProviderCreateDirect = CGDataProviderCreateDirect;

pub const DataProviderReleaseDataCallback = ?*const fn (?*anyopaque, ?*const anyopaque, objc.size_t) callconv(.C) void;

extern "CoreGraphics" fn CGDataProviderCreateWithData(
    info: ?*anyopaque,
    data: ?*const anyopaque,
    size: objc.size_t,
    releaseData: DataProviderReleaseDataCallback,
) callconv(.C) DataProviderRef;
pub const dataProviderCreateWithData = CGDataProviderCreateWithData;

extern "CoreGraphics" fn CGDataProviderCreateWithCFData(data: core_foundation.DataRef) callconv(.C) DataProviderRef;
pub const dataProviderCreateWithCFData = CGDataProviderCreateWithCFData;

extern "CoreGraphics" fn CGDataProviderCreateWithURL(url: core_foundation.URLRef) callconv(.C) DataProviderRef;
pub const dataProviderCreateWithURL = CGDataProviderCreateWithURL;

extern "CoreGraphics" fn CGDataProviderCreateWithFilename(filename: [*:0]const u8) callconv(.C) DataProviderRef;
pub const dataProviderCreateWithFilename = CGDataProviderCreateWithFilename;

extern "CoreGraphics" fn CGDataProviderRetain(provider: DataProviderRef) callconv(.C) DataProviderRef;
pub const dataProviderRetain = CGDataProviderRetain;

extern "CoreGraphics" fn CGDataProviderRelease(provider: DataProviderRef) callconv(.C) void;
pub const dataProviderRelease = CGDataProviderRelease;

extern "CoreGraphics" fn CGDataProviderCopyData(provider: DataProviderRef) callconv(.C) core_foundation.DataRef;
pub const dataProviderCopyData = CGDataProviderCopyData;

extern "CoreGraphics" fn CGDataProviderGetInfo(provider: DataProviderRef) callconv(.C) ?*anyopaque;
pub const dataProviderGetInfo = CGDataProviderGetInfo;

pub const ColorRenderingIntent = objc.int32_t;
pub const ColorRenderingIntent_RenderingIntentDefault: objc.int32_t = 0;
pub const ColorRenderingIntent_RenderingIntentAbsoluteColorimetric: objc.int32_t = 1;
pub const ColorRenderingIntent_RenderingIntentRelativeColorimetric: objc.int32_t = 2;
pub const ColorRenderingIntent_RenderingIntentPerceptual: objc.int32_t = 3;
pub const ColorRenderingIntent_RenderingIntentSaturation: objc.int32_t = 4;

pub const ColorSpaceModel = objc.int32_t;
pub const ColorSpaceModel_Unknown: objc.int32_t = -1;
pub const ColorSpaceModel_Monochrome: objc.int32_t = 0;
pub const ColorSpaceModel_RGB: objc.int32_t = 1;
pub const ColorSpaceModel_CMYK: objc.int32_t = 2;
pub const ColorSpaceModel_Lab: objc.int32_t = 3;
pub const ColorSpaceModel_DeviceN: objc.int32_t = 4;
pub const ColorSpaceModel_Indexed: objc.int32_t = 5;
pub const ColorSpaceModel_Pattern: objc.int32_t = 6;
pub const ColorSpaceModel_XYZ: objc.int32_t = 7;

extern "CoreGraphics" fn CGColorSpaceCreateDeviceGray() callconv(.C) ColorSpaceRef;
pub const colorSpaceCreateDeviceGray = CGColorSpaceCreateDeviceGray;

extern "CoreGraphics" fn CGColorSpaceCreateDeviceRGB() callconv(.C) ColorSpaceRef;
pub const colorSpaceCreateDeviceRGB = CGColorSpaceCreateDeviceRGB;

extern "CoreGraphics" fn CGColorSpaceCreateDeviceCMYK() callconv(.C) ColorSpaceRef;
pub const colorSpaceCreateDeviceCMYK = CGColorSpaceCreateDeviceCMYK;

extern "CoreGraphics" fn CGColorSpaceCreateCalibratedGray(whitePoint: ?*const core_foundation.CGFloat, blackPoint: ?*const core_foundation.CGFloat, gamma: core_foundation.CGFloat) callconv(.C) ColorSpaceRef;
pub const colorSpaceCreateCalibratedGray = CGColorSpaceCreateCalibratedGray;

extern "CoreGraphics" fn CGColorSpaceCreateCalibratedRGB(
    whitePoint: ?*const core_foundation.CGFloat,
    blackPoint: ?*const core_foundation.CGFloat,
    gamma: ?*const core_foundation.CGFloat,
    matrix: ?*const core_foundation.CGFloat,
) callconv(.C) ColorSpaceRef;
pub const colorSpaceCreateCalibratedRGB = CGColorSpaceCreateCalibratedRGB;

extern "CoreGraphics" fn CGColorSpaceCreateLab(whitePoint: ?*const core_foundation.CGFloat, blackPoint: ?*const core_foundation.CGFloat, range: ?*const core_foundation.CGFloat) callconv(.C) ColorSpaceRef;
pub const colorSpaceCreateLab = CGColorSpaceCreateLab;

extern "CoreGraphics" fn CGColorSpaceCreateWithICCData(data: core_foundation.TypeRef) callconv(.C) ColorSpaceRef;
pub const colorSpaceCreateWithICCData = CGColorSpaceCreateWithICCData;

extern "CoreGraphics" fn CGColorSpaceCreateICCBased(
    nComponents: objc.size_t,
    range: ?*const core_foundation.CGFloat,
    profile: DataProviderRef,
    alternate: ColorSpaceRef,
) callconv(.C) ColorSpaceRef;
pub const colorSpaceCreateICCBased = CGColorSpaceCreateICCBased;

extern "CoreGraphics" fn CGColorSpaceCreateIndexed(baseSpace: ColorSpaceRef, lastIndex: objc.size_t, colorTable: ?*const u8) callconv(.C) ColorSpaceRef;
pub const colorSpaceCreateIndexed = CGColorSpaceCreateIndexed;

extern "CoreGraphics" fn CGColorSpaceCreatePattern(baseSpace: ColorSpaceRef) callconv(.C) ColorSpaceRef;
pub const colorSpaceCreatePattern = CGColorSpaceCreatePattern;

pub const ColorSyncProfile = extern struct {};

pub const ColorSyncProfileRef = ColorSyncProfile;

extern "CoreGraphics" fn CGColorSpaceCreateWithColorSyncProfile(ColorSyncProfileRef, options: core_foundation.DictionaryRef) callconv(.C) ColorSpaceRef;
pub const colorSpaceCreateWithColorSyncProfile = CGColorSpaceCreateWithColorSyncProfile;

extern "CoreGraphics" fn CGColorSpaceCreateWithName(name: core_foundation.StringRef) callconv(.C) ColorSpaceRef;
pub const colorSpaceCreateWithName = CGColorSpaceCreateWithName;

extern "CoreGraphics" fn CGColorSpaceRetain(space: ColorSpaceRef) callconv(.C) ColorSpaceRef;
pub const colorSpaceRetain = CGColorSpaceRetain;

extern "CoreGraphics" fn CGColorSpaceRelease(space: ColorSpaceRef) callconv(.C) void;
pub const colorSpaceRelease = CGColorSpaceRelease;

extern "CoreGraphics" fn CGColorSpaceGetName(space: ColorSpaceRef) callconv(.C) core_foundation.StringRef;
pub const colorSpaceGetName = CGColorSpaceGetName;

extern "CoreGraphics" fn CGColorSpaceCopyName(space: ColorSpaceRef) callconv(.C) core_foundation.StringRef;
pub const colorSpaceCopyName = CGColorSpaceCopyName;

extern "CoreGraphics" fn CGColorSpaceGetTypeID() callconv(.C) core_foundation.TypeID;
pub const colorSpaceGetTypeID = CGColorSpaceGetTypeID;

extern "CoreGraphics" fn CGColorSpaceGetNumberOfComponents(space: ColorSpaceRef) callconv(.C) objc.size_t;
pub const colorSpaceGetNumberOfComponents = CGColorSpaceGetNumberOfComponents;

extern "CoreGraphics" fn CGColorSpaceGetModel(space: ColorSpaceRef) callconv(.C) ColorSpaceModel;
pub const colorSpaceGetModel = CGColorSpaceGetModel;

extern "CoreGraphics" fn CGColorSpaceGetBaseColorSpace(space: ColorSpaceRef) callconv(.C) ColorSpaceRef;
pub const colorSpaceGetBaseColorSpace = CGColorSpaceGetBaseColorSpace;

extern "CoreGraphics" fn CGColorSpaceCopyBaseColorSpace(space: ColorSpaceRef) callconv(.C) ColorSpaceRef;
pub const colorSpaceCopyBaseColorSpace = CGColorSpaceCopyBaseColorSpace;

extern "CoreGraphics" fn CGColorSpaceGetColorTableCount(space: ColorSpaceRef) callconv(.C) objc.size_t;
pub const colorSpaceGetColorTableCount = CGColorSpaceGetColorTableCount;

extern "CoreGraphics" fn CGColorSpaceGetColorTable(space: ColorSpaceRef, table: ?*objc.uint8_t) callconv(.C) void;
pub const colorSpaceGetColorTable = CGColorSpaceGetColorTable;

extern "CoreGraphics" fn CGColorSpaceCopyICCData(space: ColorSpaceRef) callconv(.C) core_foundation.DataRef;
pub const colorSpaceCopyICCData = CGColorSpaceCopyICCData;

extern "CoreGraphics" fn CGColorSpaceIsWideGamutRGB(ColorSpaceRef) callconv(.C) i32;
pub const colorSpaceIsWideGamutRGB = CGColorSpaceIsWideGamutRGB;

extern "CoreGraphics" fn CGColorSpaceIsHDR(ColorSpaceRef) callconv(.C) i32;
pub const colorSpaceIsHDR = CGColorSpaceIsHDR;

extern "CoreGraphics" fn CGColorSpaceUsesITUR_2100TF(ColorSpaceRef) callconv(.C) i32;
pub const colorSpaceUsesITUR_2100TF = CGColorSpaceUsesITUR_2100TF;

extern "CoreGraphics" fn CGColorSpaceIsPQBased(s: ColorSpaceRef) callconv(.C) i32;
pub const colorSpaceIsPQBased = CGColorSpaceIsPQBased;

extern "CoreGraphics" fn CGColorSpaceIsHLGBased(s: ColorSpaceRef) callconv(.C) i32;
pub const colorSpaceIsHLGBased = CGColorSpaceIsHLGBased;

extern "CoreGraphics" fn CGColorSpaceSupportsOutput(space: ColorSpaceRef) callconv(.C) i32;
pub const colorSpaceSupportsOutput = CGColorSpaceSupportsOutput;

extern "CoreGraphics" fn CGColorSpaceCopyPropertyList(space: ColorSpaceRef) callconv(.C) core_foundation.PropertyListRef;
pub const colorSpaceCopyPropertyList = CGColorSpaceCopyPropertyList;

extern "CoreGraphics" fn CGColorSpaceCreateWithPropertyList(plist: core_foundation.PropertyListRef) callconv(.C) ColorSpaceRef;
pub const colorSpaceCreateWithPropertyList = CGColorSpaceCreateWithPropertyList;

extern "CoreGraphics" fn CGColorSpaceUsesExtendedRange(space: ColorSpaceRef) callconv(.C) i32;
pub const colorSpaceUsesExtendedRange = CGColorSpaceUsesExtendedRange;

extern "CoreGraphics" fn CGColorSpaceCreateLinearized(space: ColorSpaceRef) callconv(.C) ColorSpaceRef;
pub const colorSpaceCreateLinearized = CGColorSpaceCreateLinearized;

extern "CoreGraphics" fn CGColorSpaceCreateExtended(space: ColorSpaceRef) callconv(.C) ColorSpaceRef;
pub const colorSpaceCreateExtended = CGColorSpaceCreateExtended;

extern "CoreGraphics" fn CGColorSpaceCreateExtendedLinearized(space: ColorSpaceRef) callconv(.C) ColorSpaceRef;
pub const colorSpaceCreateExtendedLinearized = CGColorSpaceCreateExtendedLinearized;

extern "CoreGraphics" fn CGColorSpaceCreateCopyWithStandardRange(s: ColorSpaceRef) callconv(.C) ColorSpaceRef;
pub const colorSpaceCreateCopyWithStandardRange = CGColorSpaceCreateCopyWithStandardRange;

extern "CoreGraphics" fn CGColorSpaceCreateWithICCProfile(data: core_foundation.DataRef) callconv(.C) ColorSpaceRef;
pub const colorSpaceCreateWithICCProfile = CGColorSpaceCreateWithICCProfile;

extern "CoreGraphics" fn CGColorSpaceCopyICCProfile(space: ColorSpaceRef) callconv(.C) core_foundation.DataRef;
pub const colorSpaceCopyICCProfile = CGColorSpaceCopyICCProfile;

extern "CoreGraphics" fn CGColorSpaceCreateWithPlatformColorSpace(ref: ?*const anyopaque) callconv(.C) ColorSpaceRef;
pub const colorSpaceCreateWithPlatformColorSpace = CGColorSpaceCreateWithPlatformColorSpace;

pub const Pattern = extern struct {};

pub const PatternRef = Pattern;

pub const PatternTiling = objc.int32_t;
pub const PatternTiling_NoDistortion: objc.int32_t = 0;
pub const PatternTiling_ConstantSpacingMinimalDistortion: objc.int32_t = 1;
pub const PatternTiling_ConstantSpacing: objc.int32_t = 2;

pub const PatternDrawPatternCallback = ?*const fn (?*anyopaque, ContextRef) callconv(.C) void;

pub const PatternReleaseInfoCallback = ?*const fn (?*anyopaque) callconv(.C) void;

pub const PatternCallbacks = extern struct {
    version: u32,
    drawPattern: PatternDrawPatternCallback,
    releaseInfo: PatternReleaseInfoCallback,
};

extern "CoreGraphics" fn CGPatternGetTypeID() callconv(.C) core_foundation.TypeID;
pub const patternGetTypeID = CGPatternGetTypeID;

extern "CoreGraphics" fn CGPatternCreate(
    info: ?*anyopaque,
    bounds: core_foundation.CGRect,
    matrix: core_foundation.CGAffineTransform,
    xStep: core_foundation.CGFloat,
    yStep: core_foundation.CGFloat,
    tiling: PatternTiling,
    isColored: i32,
    callbacks: ?*const PatternCallbacks,
) callconv(.C) PatternRef;
pub const patternCreate = CGPatternCreate;

extern "CoreGraphics" fn CGPatternRetain(pattern: PatternRef) callconv(.C) PatternRef;
pub const patternRetain = CGPatternRetain;

extern "CoreGraphics" fn CGPatternRelease(pattern: PatternRef) callconv(.C) void;
pub const patternRelease = CGPatternRelease;

extern "CoreGraphics" fn CGColorCreate(space: ColorSpaceRef, components: ?*const core_foundation.CGFloat) callconv(.C) ColorRef;
pub const colorCreate = CGColorCreate;

extern "CoreGraphics" fn CGColorCreateGenericGray(gray: core_foundation.CGFloat, alpha: core_foundation.CGFloat) callconv(.C) ColorRef;
pub const colorCreateGenericGray = CGColorCreateGenericGray;

extern "CoreGraphics" fn CGColorCreateGenericRGB(
    red: core_foundation.CGFloat,
    green: core_foundation.CGFloat,
    blue: core_foundation.CGFloat,
    alpha: core_foundation.CGFloat,
) callconv(.C) ColorRef;
pub const colorCreateGenericRGB = CGColorCreateGenericRGB;

extern "CoreGraphics" fn CGColorCreateGenericCMYK(
    cyan: core_foundation.CGFloat,
    magenta: core_foundation.CGFloat,
    yellow: core_foundation.CGFloat,
    black: core_foundation.CGFloat,
    alpha: core_foundation.CGFloat,
) callconv(.C) ColorRef;
pub const colorCreateGenericCMYK = CGColorCreateGenericCMYK;

extern "CoreGraphics" fn CGColorCreateGenericGrayGamma2_2(gray: core_foundation.CGFloat, alpha: core_foundation.CGFloat) callconv(.C) ColorRef;
pub const colorCreateGenericGrayGamma2_2 = CGColorCreateGenericGrayGamma2_2;

extern "CoreGraphics" fn CGColorCreateSRGB(
    red: core_foundation.CGFloat,
    green: core_foundation.CGFloat,
    blue: core_foundation.CGFloat,
    alpha: core_foundation.CGFloat,
) callconv(.C) ColorRef;
pub const colorCreateSRGB = CGColorCreateSRGB;

extern "CoreGraphics" fn CGColorGetConstantColor(colorName: core_foundation.StringRef) callconv(.C) ColorRef;
pub const colorGetConstantColor = CGColorGetConstantColor;

extern "CoreGraphics" fn CGColorCreateWithPattern(space: ColorSpaceRef, pattern: PatternRef, components: ?*const core_foundation.CGFloat) callconv(.C) ColorRef;
pub const colorCreateWithPattern = CGColorCreateWithPattern;

extern "CoreGraphics" fn CGColorCreateCopy(color: ColorRef) callconv(.C) ColorRef;
pub const colorCreateCopy = CGColorCreateCopy;

extern "CoreGraphics" fn CGColorCreateCopyWithAlpha(color: ColorRef, alpha: core_foundation.CGFloat) callconv(.C) ColorRef;
pub const colorCreateCopyWithAlpha = CGColorCreateCopyWithAlpha;

extern "CoreGraphics" fn CGColorCreateCopyByMatchingToColorSpace(
    ColorSpaceRef,
    intent: ColorRenderingIntent,
    color: ColorRef,
    options: core_foundation.DictionaryRef,
) callconv(.C) ColorRef;
pub const colorCreateCopyByMatchingToColorSpace = CGColorCreateCopyByMatchingToColorSpace;

extern "CoreGraphics" fn CGColorRetain(color: ColorRef) callconv(.C) ColorRef;
pub const colorRetain = CGColorRetain;

extern "CoreGraphics" fn CGColorRelease(color: ColorRef) callconv(.C) void;
pub const colorRelease = CGColorRelease;

extern "CoreGraphics" fn CGColorEqualToColor(color1: ColorRef, color2: ColorRef) callconv(.C) i32;
pub const colorEqualToColor = CGColorEqualToColor;

extern "CoreGraphics" fn CGColorGetNumberOfComponents(color: ColorRef) callconv(.C) objc.size_t;
pub const colorGetNumberOfComponents = CGColorGetNumberOfComponents;

extern "CoreGraphics" fn CGColorGetComponents(color: ColorRef) callconv(.C) ?*const core_foundation.CGFloat;
pub const colorGetComponents = CGColorGetComponents;

extern "CoreGraphics" fn CGColorGetAlpha(color: ColorRef) callconv(.C) core_foundation.CGFloat;
pub const colorGetAlpha = CGColorGetAlpha;

extern "CoreGraphics" fn CGColorGetColorSpace(color: ColorRef) callconv(.C) ColorSpaceRef;
pub const colorGetColorSpace = CGColorGetColorSpace;

extern "CoreGraphics" fn CGColorGetPattern(color: ColorRef) callconv(.C) PatternRef;
pub const colorGetPattern = CGColorGetPattern;

extern "CoreGraphics" fn CGColorGetTypeID() callconv(.C) core_foundation.TypeID;
pub const colorGetTypeID = CGColorGetTypeID;

pub const Font = extern struct {};

pub const FontRef = Font;

pub const FontIndex = u16;

pub const Glyph = FontIndex;

pub const FontPostScriptFormat = objc.int32_t;
pub const FontPostScriptFormat_Type1: objc.int32_t = 1;
pub const FontPostScriptFormat_Type3: objc.int32_t = 3;
pub const FontPostScriptFormat_Type42: objc.int32_t = 42;

extern "CoreGraphics" fn CGFontGetTypeID() callconv(.C) core_foundation.TypeID;
pub const fontGetTypeID = CGFontGetTypeID;

extern "CoreGraphics" fn CGFontCreateWithPlatformFont(platformFontReference: ?*anyopaque) callconv(.C) FontRef;
pub const fontCreateWithPlatformFont = CGFontCreateWithPlatformFont;

extern "CoreGraphics" fn CGFontCreateWithDataProvider(provider: DataProviderRef) callconv(.C) FontRef;
pub const fontCreateWithDataProvider = CGFontCreateWithDataProvider;

extern "CoreGraphics" fn CGFontCreateWithFontName(name: core_foundation.StringRef) callconv(.C) FontRef;
pub const fontCreateWithFontName = CGFontCreateWithFontName;

extern "CoreGraphics" fn CGFontCreateCopyWithVariations(font: FontRef, variations: core_foundation.DictionaryRef) callconv(.C) FontRef;
pub const fontCreateCopyWithVariations = CGFontCreateCopyWithVariations;

extern "CoreGraphics" fn CGFontRetain(font: FontRef) callconv(.C) FontRef;
pub const fontRetain = CGFontRetain;

extern "CoreGraphics" fn CGFontRelease(font: FontRef) callconv(.C) void;
pub const fontRelease = CGFontRelease;

extern "CoreGraphics" fn CGFontGetNumberOfGlyphs(font: FontRef) callconv(.C) objc.size_t;
pub const fontGetNumberOfGlyphs = CGFontGetNumberOfGlyphs;

extern "CoreGraphics" fn CGFontGetUnitsPerEm(font: FontRef) callconv(.C) i32;
pub const fontGetUnitsPerEm = CGFontGetUnitsPerEm;

extern "CoreGraphics" fn CGFontCopyPostScriptName(font: FontRef) callconv(.C) core_foundation.StringRef;
pub const fontCopyPostScriptName = CGFontCopyPostScriptName;

extern "CoreGraphics" fn CGFontCopyFullName(font: FontRef) callconv(.C) core_foundation.StringRef;
pub const fontCopyFullName = CGFontCopyFullName;

extern "CoreGraphics" fn CGFontGetAscent(font: FontRef) callconv(.C) i32;
pub const fontGetAscent = CGFontGetAscent;

extern "CoreGraphics" fn CGFontGetDescent(font: FontRef) callconv(.C) i32;
pub const fontGetDescent = CGFontGetDescent;

extern "CoreGraphics" fn CGFontGetLeading(font: FontRef) callconv(.C) i32;
pub const fontGetLeading = CGFontGetLeading;

extern "CoreGraphics" fn CGFontGetCapHeight(font: FontRef) callconv(.C) i32;
pub const fontGetCapHeight = CGFontGetCapHeight;

extern "CoreGraphics" fn CGFontGetXHeight(font: FontRef) callconv(.C) i32;
pub const fontGetXHeight = CGFontGetXHeight;

extern "CoreGraphics" fn CGFontGetFontBBox(font: FontRef) callconv(.C) core_foundation.CGRect;
pub const fontGetFontBBox = CGFontGetFontBBox;

extern "CoreGraphics" fn CGFontGetItalicAngle(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetItalicAngle = CGFontGetItalicAngle;

extern "CoreGraphics" fn CGFontGetStemV(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetStemV = CGFontGetStemV;

extern "CoreGraphics" fn CGFontCopyVariationAxes(font: FontRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCopyVariationAxes = CGFontCopyVariationAxes;

extern "CoreGraphics" fn CGFontCopyVariations(font: FontRef) callconv(.C) core_foundation.DictionaryRef;
pub const fontCopyVariations = CGFontCopyVariations;

extern "CoreGraphics" fn CGFontGetGlyphAdvances(
    font: FontRef,
    glyphs: ?*const Glyph,
    count: objc.size_t,
    advances: ?*i32,
) callconv(.C) i32;
pub const fontGetGlyphAdvances = CGFontGetGlyphAdvances;

extern "CoreGraphics" fn CGFontGetGlyphBBoxes(
    font: FontRef,
    glyphs: ?*const Glyph,
    count: objc.size_t,
    bboxes: ?*core_foundation.CGRect,
) callconv(.C) i32;
pub const fontGetGlyphBBoxes = CGFontGetGlyphBBoxes;

extern "CoreGraphics" fn CGFontGetGlyphWithGlyphName(font: FontRef, name: core_foundation.StringRef) callconv(.C) Glyph;
pub const fontGetGlyphWithGlyphName = CGFontGetGlyphWithGlyphName;

extern "CoreGraphics" fn CGFontCopyGlyphNameForGlyph(font: FontRef, glyph: Glyph) callconv(.C) core_foundation.StringRef;
pub const fontCopyGlyphNameForGlyph = CGFontCopyGlyphNameForGlyph;

extern "CoreGraphics" fn CGFontCanCreatePostScriptSubset(font: FontRef, format: FontPostScriptFormat) callconv(.C) i32;
pub const fontCanCreatePostScriptSubset = CGFontCanCreatePostScriptSubset;

extern "CoreGraphics" fn CGFontCreatePostScriptSubset(
    font: FontRef,
    subsetName: core_foundation.StringRef,
    format: FontPostScriptFormat,
    glyphs: ?*const Glyph,
    count: objc.size_t,
    encoding: ?*const Glyph,
) callconv(.C) core_foundation.DataRef;
pub const fontCreatePostScriptSubset = CGFontCreatePostScriptSubset;

extern "CoreGraphics" fn CGFontCreatePostScriptEncoding(font: FontRef, encoding: ?*const Glyph) callconv(.C) core_foundation.DataRef;
pub const fontCreatePostScriptEncoding = CGFontCreatePostScriptEncoding;

extern "CoreGraphics" fn CGFontCopyTableTags(font: FontRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCopyTableTags = CGFontCopyTableTags;

extern "CoreGraphics" fn CGFontCopyTableForTag(font: FontRef, tag: objc.uint32_t) callconv(.C) core_foundation.DataRef;
pub const fontCopyTableForTag = CGFontCopyTableForTag;

pub const GlyphDeprecatedEnum = objc.int32_t;
pub const GlyphDeprecatedEnum_Min: objc.int32_t = 0;
pub const GlyphDeprecatedEnum_Max: objc.int32_t = 1;

pub const Gradient = extern struct {};

pub const GradientRef = Gradient;

pub const GradientDrawingOptions = objc.uint32_t;
pub const GradientDrawingOptions_DrawsBeforeStartLocation: objc.uint32_t = 1;
pub const GradientDrawingOptions_DrawsAfterEndLocation: objc.uint32_t = 2;

extern "CoreGraphics" fn CGGradientGetTypeID() callconv(.C) core_foundation.TypeID;
pub const gradientGetTypeID = CGGradientGetTypeID;

extern "CoreGraphics" fn CGGradientCreateWithColorComponents(
    space: ColorSpaceRef,
    components: ?*const core_foundation.CGFloat,
    locations: ?*const core_foundation.CGFloat,
    count: objc.size_t,
) callconv(.C) GradientRef;
pub const gradientCreateWithColorComponents = CGGradientCreateWithColorComponents;

extern "CoreGraphics" fn CGGradientCreateWithColors(space: ColorSpaceRef, colors: core_foundation.ArrayRef, locations: ?*const core_foundation.CGFloat) callconv(.C) GradientRef;
pub const gradientCreateWithColors = CGGradientCreateWithColors;

extern "CoreGraphics" fn CGGradientRetain(gradient: GradientRef) callconv(.C) GradientRef;
pub const gradientRetain = CGGradientRetain;

extern "CoreGraphics" fn CGGradientRelease(gradient: GradientRef) callconv(.C) void;
pub const gradientRelease = CGGradientRelease;

pub const Image = extern struct {};

pub const ImageRef = Image;

pub const ImageAlphaInfo = objc.uint32_t;
pub const ImageAlphaInfo_None: objc.uint32_t = 0;
pub const ImageAlphaInfo_PremultipliedLast: objc.uint32_t = 1;
pub const ImageAlphaInfo_PremultipliedFirst: objc.uint32_t = 2;
pub const ImageAlphaInfo_Last: objc.uint32_t = 3;
pub const ImageAlphaInfo_First: objc.uint32_t = 4;
pub const ImageAlphaInfo_NoneSkipLast: objc.uint32_t = 5;
pub const ImageAlphaInfo_NoneSkipFirst: objc.uint32_t = 6;
pub const ImageAlphaInfo_Only: objc.uint32_t = 7;

pub const ImageByteOrderInfo = objc.uint32_t;
pub const ImageByteOrderInfo_Mask: objc.uint32_t = 28672;
pub const ImageByteOrderInfo_Default: objc.uint32_t = 0;
pub const ImageByteOrderInfo_Order16Little: objc.uint32_t = 4096;
pub const ImageByteOrderInfo_Order32Little: objc.uint32_t = 8192;
pub const ImageByteOrderInfo_Order16Big: objc.uint32_t = 12288;
pub const ImageByteOrderInfo_Order32Big: objc.uint32_t = 16384;

pub const ImagePixelFormatInfo = objc.uint32_t;
pub const ImagePixelFormatInfo_Mask: objc.uint32_t = 983040;
pub const ImagePixelFormatInfo_Packed: objc.uint32_t = 0;
pub const ImagePixelFormatInfo_RGB555: objc.uint32_t = 65536;
pub const ImagePixelFormatInfo_RGB565: objc.uint32_t = 131072;
pub const ImagePixelFormatInfo_RGB101010: objc.uint32_t = 196608;
pub const ImagePixelFormatInfo_RGBCIF10: objc.uint32_t = 262144;

pub const BitmapInfo = objc.uint32_t;
pub const BitmapInfo_AlphaInfoMask: objc.uint32_t = 31;
pub const BitmapInfo_FloatInfoMask: objc.uint32_t = 3840;
pub const BitmapInfo_FloatComponents: objc.uint32_t = 256;
pub const BitmapInfo_ByteOrderMask: objc.uint32_t = 28672;
pub const BitmapInfo_ByteOrderDefault: objc.uint32_t = 0;
pub const BitmapInfo_ByteOrder16Little: objc.uint32_t = 4096;
pub const BitmapInfo_ByteOrder32Little: objc.uint32_t = 8192;
pub const BitmapInfo_ByteOrder16Big: objc.uint32_t = 12288;
pub const BitmapInfo_ByteOrder32Big: objc.uint32_t = 16384;

extern "CoreGraphics" fn CGImageGetTypeID() callconv(.C) core_foundation.TypeID;
pub const imageGetTypeID = CGImageGetTypeID;

extern "CoreGraphics" fn CGImageCreate(
    width: objc.size_t,
    height: objc.size_t,
    bitsPerComponent: objc.size_t,
    bitsPerPixel: objc.size_t,
    bytesPerRow: objc.size_t,
    space: ColorSpaceRef,
    bitmapInfo: BitmapInfo,
    provider: DataProviderRef,
    decode: ?*const core_foundation.CGFloat,
    shouldInterpolate: i32,
    intent: ColorRenderingIntent,
) callconv(.C) ImageRef;
pub const imageCreate = CGImageCreate;

extern "CoreGraphics" fn CGImageMaskCreate(
    width: objc.size_t,
    height: objc.size_t,
    bitsPerComponent: objc.size_t,
    bitsPerPixel: objc.size_t,
    bytesPerRow: objc.size_t,
    provider: DataProviderRef,
    decode: ?*const core_foundation.CGFloat,
    shouldInterpolate: i32,
) callconv(.C) ImageRef;
pub const imageMaskCreate = CGImageMaskCreate;

extern "CoreGraphics" fn CGImageCreateCopy(image: ImageRef) callconv(.C) ImageRef;
pub const imageCreateCopy = CGImageCreateCopy;

extern "CoreGraphics" fn CGImageCreateWithJPEGDataProvider(
    source: DataProviderRef,
    decode: ?*const core_foundation.CGFloat,
    shouldInterpolate: i32,
    intent: ColorRenderingIntent,
) callconv(.C) ImageRef;
pub const imageCreateWithJPEGDataProvider = CGImageCreateWithJPEGDataProvider;

extern "CoreGraphics" fn CGImageCreateWithPNGDataProvider(
    source: DataProviderRef,
    decode: ?*const core_foundation.CGFloat,
    shouldInterpolate: i32,
    intent: ColorRenderingIntent,
) callconv(.C) ImageRef;
pub const imageCreateWithPNGDataProvider = CGImageCreateWithPNGDataProvider;

extern "CoreGraphics" fn CGImageCreateWithImageInRect(image: ImageRef, rect: core_foundation.CGRect) callconv(.C) ImageRef;
pub const imageCreateWithImageInRect = CGImageCreateWithImageInRect;

extern "CoreGraphics" fn CGImageCreateWithMask(image: ImageRef, mask: ImageRef) callconv(.C) ImageRef;
pub const imageCreateWithMask = CGImageCreateWithMask;

extern "CoreGraphics" fn CGImageCreateWithMaskingColors(image: ImageRef, components: ?*const core_foundation.CGFloat) callconv(.C) ImageRef;
pub const imageCreateWithMaskingColors = CGImageCreateWithMaskingColors;

extern "CoreGraphics" fn CGImageCreateCopyWithColorSpace(image: ImageRef, space: ColorSpaceRef) callconv(.C) ImageRef;
pub const imageCreateCopyWithColorSpace = CGImageCreateCopyWithColorSpace;

extern "CoreGraphics" fn CGImageCreateWithContentHeadroom(
    headroom: f32,
    width: objc.size_t,
    height: objc.size_t,
    bitsPerComponent: objc.size_t,
    bitsPerPixel: objc.size_t,
    bytesPerRow: objc.size_t,
    space: ColorSpaceRef,
    bitmapInfo: BitmapInfo,
    provider: DataProviderRef,
    decode: ?*const core_foundation.CGFloat,
    shouldInterpolate: i32,
    intent: ColorRenderingIntent,
) callconv(.C) ImageRef;
pub const imageCreateWithContentHeadroom = CGImageCreateWithContentHeadroom;

extern "CoreGraphics" fn CGImageCreateCopyWithContentHeadroom(headroom: f32, image: ImageRef) callconv(.C) ImageRef;
pub const imageCreateCopyWithContentHeadroom = CGImageCreateCopyWithContentHeadroom;

extern "CoreGraphics" fn CGImageGetContentHeadroom(image: ImageRef) callconv(.C) f32;
pub const imageGetContentHeadroom = CGImageGetContentHeadroom;

extern "CoreGraphics" fn CGImageRetain(image: ImageRef) callconv(.C) ImageRef;
pub const imageRetain = CGImageRetain;

extern "CoreGraphics" fn CGImageRelease(image: ImageRef) callconv(.C) void;
pub const imageRelease = CGImageRelease;

extern "CoreGraphics" fn CGImageIsMask(image: ImageRef) callconv(.C) i32;
pub const imageIsMask = CGImageIsMask;

extern "CoreGraphics" fn CGImageGetWidth(image: ImageRef) callconv(.C) objc.size_t;
pub const imageGetWidth = CGImageGetWidth;

extern "CoreGraphics" fn CGImageGetHeight(image: ImageRef) callconv(.C) objc.size_t;
pub const imageGetHeight = CGImageGetHeight;

extern "CoreGraphics" fn CGImageGetBitsPerComponent(image: ImageRef) callconv(.C) objc.size_t;
pub const imageGetBitsPerComponent = CGImageGetBitsPerComponent;

extern "CoreGraphics" fn CGImageGetBitsPerPixel(image: ImageRef) callconv(.C) objc.size_t;
pub const imageGetBitsPerPixel = CGImageGetBitsPerPixel;

extern "CoreGraphics" fn CGImageGetBytesPerRow(image: ImageRef) callconv(.C) objc.size_t;
pub const imageGetBytesPerRow = CGImageGetBytesPerRow;

extern "CoreGraphics" fn CGImageGetColorSpace(image: ImageRef) callconv(.C) ColorSpaceRef;
pub const imageGetColorSpace = CGImageGetColorSpace;

extern "CoreGraphics" fn CGImageGetAlphaInfo(image: ImageRef) callconv(.C) ImageAlphaInfo;
pub const imageGetAlphaInfo = CGImageGetAlphaInfo;

extern "CoreGraphics" fn CGImageGetDataProvider(image: ImageRef) callconv(.C) DataProviderRef;
pub const imageGetDataProvider = CGImageGetDataProvider;

extern "CoreGraphics" fn CGImageGetDecode(image: ImageRef) callconv(.C) ?*const core_foundation.CGFloat;
pub const imageGetDecode = CGImageGetDecode;

extern "CoreGraphics" fn CGImageGetShouldInterpolate(image: ImageRef) callconv(.C) i32;
pub const imageGetShouldInterpolate = CGImageGetShouldInterpolate;

extern "CoreGraphics" fn CGImageGetRenderingIntent(image: ImageRef) callconv(.C) ColorRenderingIntent;
pub const imageGetRenderingIntent = CGImageGetRenderingIntent;

extern "CoreGraphics" fn CGImageGetBitmapInfo(image: ImageRef) callconv(.C) BitmapInfo;
pub const imageGetBitmapInfo = CGImageGetBitmapInfo;

extern "CoreGraphics" fn CGImageGetByteOrderInfo(image: ImageRef) callconv(.C) ImageByteOrderInfo;
pub const imageGetByteOrderInfo = CGImageGetByteOrderInfo;

extern "CoreGraphics" fn CGImageGetPixelFormatInfo(image: ImageRef) callconv(.C) ImagePixelFormatInfo;
pub const imageGetPixelFormatInfo = CGImageGetPixelFormatInfo;

extern "CoreGraphics" fn CGImageShouldToneMap(image: ImageRef) callconv(.C) i32;
pub const imageShouldToneMap = CGImageShouldToneMap;

extern "CoreGraphics" fn CGImageContainsImageSpecificToneMappingMetadata(image: ImageRef) callconv(.C) i32;
pub const imageContainsImageSpecificToneMappingMetadata = CGImageContainsImageSpecificToneMappingMetadata;

extern "CoreGraphics" fn CGImageGetUTType(image: ImageRef) callconv(.C) core_foundation.StringRef;
pub const imageGetUTType = CGImageGetUTType;

pub const Path = extern struct {};

pub const MutablePathRef = Path;

pub const PathRef = Path;

pub const LineJoin = objc.int32_t;
pub const LineJoin_Miter: objc.int32_t = 0;
pub const LineJoin_Round: objc.int32_t = 1;
pub const LineJoin_Bevel: objc.int32_t = 2;

pub const LineCap = objc.int32_t;
pub const LineCap_Butt: objc.int32_t = 0;
pub const LineCap_Round: objc.int32_t = 1;
pub const LineCap_Square: objc.int32_t = 2;

extern "CoreGraphics" fn CGPathGetTypeID() callconv(.C) core_foundation.TypeID;
pub const pathGetTypeID = CGPathGetTypeID;

extern "CoreGraphics" fn CGPathCreateMutable() callconv(.C) MutablePathRef;
pub const pathCreateMutable = CGPathCreateMutable;

extern "CoreGraphics" fn CGPathCreateCopy(path: PathRef) callconv(.C) PathRef;
pub const pathCreateCopy = CGPathCreateCopy;

extern "CoreGraphics" fn CGPathCreateCopyByTransformingPath(path: PathRef, transform: ?*const core_foundation.CGAffineTransform) callconv(.C) PathRef;
pub const pathCreateCopyByTransformingPath = CGPathCreateCopyByTransformingPath;

extern "CoreGraphics" fn CGPathCreateMutableCopy(path: PathRef) callconv(.C) MutablePathRef;
pub const pathCreateMutableCopy = CGPathCreateMutableCopy;

extern "CoreGraphics" fn CGPathCreateMutableCopyByTransformingPath(path: PathRef, transform: ?*const core_foundation.CGAffineTransform) callconv(.C) MutablePathRef;
pub const pathCreateMutableCopyByTransformingPath = CGPathCreateMutableCopyByTransformingPath;

extern "CoreGraphics" fn CGPathCreateWithRect(rect: core_foundation.CGRect, transform: ?*const core_foundation.CGAffineTransform) callconv(.C) PathRef;
pub const pathCreateWithRect = CGPathCreateWithRect;

extern "CoreGraphics" fn CGPathCreateWithEllipseInRect(rect: core_foundation.CGRect, transform: ?*const core_foundation.CGAffineTransform) callconv(.C) PathRef;
pub const pathCreateWithEllipseInRect = CGPathCreateWithEllipseInRect;

extern "CoreGraphics" fn CGPathCreateWithRoundedRect(
    rect: core_foundation.CGRect,
    cornerWidth: core_foundation.CGFloat,
    cornerHeight: core_foundation.CGFloat,
    transform: ?*const core_foundation.CGAffineTransform,
) callconv(.C) PathRef;
pub const pathCreateWithRoundedRect = CGPathCreateWithRoundedRect;

extern "CoreGraphics" fn CGPathAddRoundedRect(
    path: MutablePathRef,
    transform: ?*const core_foundation.CGAffineTransform,
    rect: core_foundation.CGRect,
    cornerWidth: core_foundation.CGFloat,
    cornerHeight: core_foundation.CGFloat,
) callconv(.C) void;
pub const pathAddRoundedRect = CGPathAddRoundedRect;

extern "CoreGraphics" fn CGPathCreateCopyByDashingPath(
    path: PathRef,
    transform: ?*const core_foundation.CGAffineTransform,
    phase: core_foundation.CGFloat,
    lengths: ?*const core_foundation.CGFloat,
    count: objc.size_t,
) callconv(.C) PathRef;
pub const pathCreateCopyByDashingPath = CGPathCreateCopyByDashingPath;

extern "CoreGraphics" fn CGPathCreateCopyByStrokingPath(
    path: PathRef,
    transform: ?*const core_foundation.CGAffineTransform,
    lineWidth: core_foundation.CGFloat,
    lineCap: LineCap,
    lineJoin: LineJoin,
    miterLimit: core_foundation.CGFloat,
) callconv(.C) PathRef;
pub const pathCreateCopyByStrokingPath = CGPathCreateCopyByStrokingPath;

extern "CoreGraphics" fn CGPathRetain(path: PathRef) callconv(.C) PathRef;
pub const pathRetain = CGPathRetain;

extern "CoreGraphics" fn CGPathRelease(path: PathRef) callconv(.C) void;
pub const pathRelease = CGPathRelease;

extern "CoreGraphics" fn CGPathEqualToPath(path1: PathRef, path2: PathRef) callconv(.C) i32;
pub const pathEqualToPath = CGPathEqualToPath;

extern "CoreGraphics" fn CGPathMoveToPoint(
    path: MutablePathRef,
    m: ?*const core_foundation.CGAffineTransform,
    x: core_foundation.CGFloat,
    y: core_foundation.CGFloat,
) callconv(.C) void;
pub const pathMoveToPoint = CGPathMoveToPoint;

extern "CoreGraphics" fn CGPathAddLineToPoint(
    path: MutablePathRef,
    m: ?*const core_foundation.CGAffineTransform,
    x: core_foundation.CGFloat,
    y: core_foundation.CGFloat,
) callconv(.C) void;
pub const pathAddLineToPoint = CGPathAddLineToPoint;

extern "CoreGraphics" fn CGPathAddQuadCurveToPoint(
    path: MutablePathRef,
    m: ?*const core_foundation.CGAffineTransform,
    cpx: core_foundation.CGFloat,
    cpy: core_foundation.CGFloat,
    x: core_foundation.CGFloat,
    y: core_foundation.CGFloat,
) callconv(.C) void;
pub const pathAddQuadCurveToPoint = CGPathAddQuadCurveToPoint;

extern "CoreGraphics" fn CGPathAddCurveToPoint(
    path: MutablePathRef,
    m: ?*const core_foundation.CGAffineTransform,
    cp1x: core_foundation.CGFloat,
    cp1y: core_foundation.CGFloat,
    cp2x: core_foundation.CGFloat,
    cp2y: core_foundation.CGFloat,
    x: core_foundation.CGFloat,
    y: core_foundation.CGFloat,
) callconv(.C) void;
pub const pathAddCurveToPoint = CGPathAddCurveToPoint;

extern "CoreGraphics" fn CGPathCloseSubpath(path: MutablePathRef) callconv(.C) void;
pub const pathCloseSubpath = CGPathCloseSubpath;

extern "CoreGraphics" fn CGPathAddRect(path: MutablePathRef, m: ?*const core_foundation.CGAffineTransform, rect: core_foundation.CGRect) callconv(.C) void;
pub const pathAddRect = CGPathAddRect;

extern "CoreGraphics" fn CGPathAddRects(
    path: MutablePathRef,
    m: ?*const core_foundation.CGAffineTransform,
    rects: ?*const core_foundation.CGRect,
    count: objc.size_t,
) callconv(.C) void;
pub const pathAddRects = CGPathAddRects;

extern "CoreGraphics" fn CGPathAddLines(
    path: MutablePathRef,
    m: ?*const core_foundation.CGAffineTransform,
    points: ?*const core_foundation.CGPoint,
    count: objc.size_t,
) callconv(.C) void;
pub const pathAddLines = CGPathAddLines;

extern "CoreGraphics" fn CGPathAddEllipseInRect(path: MutablePathRef, m: ?*const core_foundation.CGAffineTransform, rect: core_foundation.CGRect) callconv(.C) void;
pub const pathAddEllipseInRect = CGPathAddEllipseInRect;

extern "CoreGraphics" fn CGPathAddRelativeArc(
    path: MutablePathRef,
    matrix: ?*const core_foundation.CGAffineTransform,
    x: core_foundation.CGFloat,
    y: core_foundation.CGFloat,
    radius: core_foundation.CGFloat,
    startAngle: core_foundation.CGFloat,
    delta: core_foundation.CGFloat,
) callconv(.C) void;
pub const pathAddRelativeArc = CGPathAddRelativeArc;

extern "CoreGraphics" fn CGPathAddArc(
    path: MutablePathRef,
    m: ?*const core_foundation.CGAffineTransform,
    x: core_foundation.CGFloat,
    y: core_foundation.CGFloat,
    radius: core_foundation.CGFloat,
    startAngle: core_foundation.CGFloat,
    endAngle: core_foundation.CGFloat,
    clockwise: i32,
) callconv(.C) void;
pub const pathAddArc = CGPathAddArc;

extern "CoreGraphics" fn CGPathAddArcToPoint(
    path: MutablePathRef,
    m: ?*const core_foundation.CGAffineTransform,
    x1: core_foundation.CGFloat,
    y1: core_foundation.CGFloat,
    x2: core_foundation.CGFloat,
    y2: core_foundation.CGFloat,
    radius: core_foundation.CGFloat,
) callconv(.C) void;
pub const pathAddArcToPoint = CGPathAddArcToPoint;

extern "CoreGraphics" fn CGPathAddPath(path1: MutablePathRef, m: ?*const core_foundation.CGAffineTransform, path2: PathRef) callconv(.C) void;
pub const pathAddPath = CGPathAddPath;

extern "CoreGraphics" fn CGPathIsEmpty(path: PathRef) callconv(.C) i32;
pub const pathIsEmpty = CGPathIsEmpty;

extern "CoreGraphics" fn CGPathIsRect(path: PathRef, rect: ?*core_foundation.CGRect) callconv(.C) i32;
pub const pathIsRect = CGPathIsRect;

extern "CoreGraphics" fn CGPathGetCurrentPoint(path: PathRef) callconv(.C) core_foundation.CGPoint;
pub const pathGetCurrentPoint = CGPathGetCurrentPoint;

extern "CoreGraphics" fn CGPathGetBoundingBox(path: PathRef) callconv(.C) core_foundation.CGRect;
pub const pathGetBoundingBox = CGPathGetBoundingBox;

extern "CoreGraphics" fn CGPathGetPathBoundingBox(path: PathRef) callconv(.C) core_foundation.CGRect;
pub const pathGetPathBoundingBox = CGPathGetPathBoundingBox;

extern "CoreGraphics" fn CGPathContainsPoint(
    path: PathRef,
    m: ?*const core_foundation.CGAffineTransform,
    point: core_foundation.CGPoint,
    eoFill: i32,
) callconv(.C) i32;
pub const pathContainsPoint = CGPathContainsPoint;

pub const PathElementType = objc.int32_t;
pub const PathElementType_MoveToPoint: objc.int32_t = 0;
pub const PathElementType_AddLineToPoint: objc.int32_t = 1;
pub const PathElementType_AddQuadCurveToPoint: objc.int32_t = 2;
pub const PathElementType_AddCurveToPoint: objc.int32_t = 3;
pub const PathElementType_CloseSubpath: objc.int32_t = 4;

pub const PathElement = extern struct {
    type: PathElementType,
    points: core_foundation.CGPoint,
};

pub const PathApplierFunction = ?*const fn (?*anyopaque, ?*const PathElement) callconv(.C) void;

extern "CoreGraphics" fn CGPathApply(path: PathRef, info: ?*anyopaque, function: PathApplierFunction) callconv(.C) void;
pub const pathApply = CGPathApply;

pub const PathApplyBlock = *const fn (?*const PathElement) callconv(.C) void;

extern "CoreGraphics" fn CGPathApplyWithBlock(path: PathRef, block: PathApplyBlock) callconv(.C) void;
pub const pathApplyWithBlock = CGPathApplyWithBlock;

extern "CoreGraphics" fn CGPathCreateCopyByNormalizing(path: PathRef, evenOddFillRule: i32) callconv(.C) PathRef;
pub const pathCreateCopyByNormalizing = CGPathCreateCopyByNormalizing;

extern "CoreGraphics" fn CGPathCreateCopyByUnioningPath(path: PathRef, maskPath: PathRef, evenOddFillRule: i32) callconv(.C) PathRef;
pub const pathCreateCopyByUnioningPath = CGPathCreateCopyByUnioningPath;

extern "CoreGraphics" fn CGPathCreateCopyByIntersectingPath(path: PathRef, maskPath: PathRef, evenOddFillRule: i32) callconv(.C) PathRef;
pub const pathCreateCopyByIntersectingPath = CGPathCreateCopyByIntersectingPath;

extern "CoreGraphics" fn CGPathCreateCopyBySubtractingPath(path: PathRef, maskPath: PathRef, evenOddFillRule: i32) callconv(.C) PathRef;
pub const pathCreateCopyBySubtractingPath = CGPathCreateCopyBySubtractingPath;

extern "CoreGraphics" fn CGPathCreateCopyBySymmetricDifferenceOfPath(path: PathRef, maskPath: PathRef, evenOddFillRule: i32) callconv(.C) PathRef;
pub const pathCreateCopyBySymmetricDifferenceOfPath = CGPathCreateCopyBySymmetricDifferenceOfPath;

extern "CoreGraphics" fn CGPathCreateCopyOfLineBySubtractingPath(path: PathRef, maskPath: PathRef, evenOddFillRule: i32) callconv(.C) PathRef;
pub const pathCreateCopyOfLineBySubtractingPath = CGPathCreateCopyOfLineBySubtractingPath;

extern "CoreGraphics" fn CGPathCreateCopyOfLineByIntersectingPath(path: PathRef, maskPath: PathRef, evenOddFillRule: i32) callconv(.C) PathRef;
pub const pathCreateCopyOfLineByIntersectingPath = CGPathCreateCopyOfLineByIntersectingPath;

extern "CoreGraphics" fn CGPathCreateSeparateComponents(path: PathRef, evenOddFillRule: i32) callconv(.C) core_foundation.ArrayRef;
pub const pathCreateSeparateComponents = CGPathCreateSeparateComponents;

extern "CoreGraphics" fn CGPathCreateCopyByFlattening(path: PathRef, flatteningThreshold: core_foundation.CGFloat) callconv(.C) PathRef;
pub const pathCreateCopyByFlattening = CGPathCreateCopyByFlattening;

extern "CoreGraphics" fn CGPathIntersectsPath(path1: PathRef, path2: PathRef, evenOddFillRule: i32) callconv(.C) i32;
pub const pathIntersectsPath = CGPathIntersectsPath;

pub const PDFDocument = extern struct {};

pub const PDFDocumentRef = PDFDocument;

pub const PDFPage = extern struct {};

pub const PDFPageRef = PDFPage;

pub const PDFDictionary = extern struct {};

pub const PDFDictionaryRef = PDFDictionary;

pub const PDFArray = extern struct {};

pub const PDFArrayRef = PDFArray;

pub const PDFBoolean = u8;

pub const PDFInteger = i64;

pub const PDFReal = core_foundation.CGFloat;

pub const PDFObject = extern struct {};

pub const PDFObjectRef = PDFObject;

pub const PDFObjectType = objc.int32_t;
pub const PDFObjectType_Null: objc.int32_t = 1;
pub const PDFObjectType_Boolean: objc.int32_t = 2;
pub const PDFObjectType_Integer: objc.int32_t = 3;
pub const PDFObjectType_Real: objc.int32_t = 4;
pub const PDFObjectType_Name: objc.int32_t = 5;
pub const PDFObjectType_String: objc.int32_t = 6;
pub const PDFObjectType_Array: objc.int32_t = 7;
pub const PDFObjectType_Dictionary: objc.int32_t = 8;
pub const PDFObjectType_Stream: objc.int32_t = 9;

extern "CoreGraphics" fn CGPDFObjectGetType(object: PDFObjectRef) callconv(.C) PDFObjectType;
pub const pdfObjectGetType = CGPDFObjectGetType;

extern "CoreGraphics" fn CGPDFObjectGetValue(object: PDFObjectRef, @"type": PDFObjectType, value: ?*anyopaque) callconv(.C) i32;
pub const pdfObjectGetValue = CGPDFObjectGetValue;

pub const PDFStream = extern struct {};

pub const PDFStreamRef = PDFStream;

pub const PDFDataFormat = objc.int32_t;
pub const PDFDataFormat_Raw: objc.int32_t = 0;
pub const PDFDataFormat_JPEGEncoded: objc.int32_t = 1;
pub const PDFDataFormat_JPEG2000: objc.int32_t = 2;

extern "CoreGraphics" fn CGPDFStreamGetDictionary(stream: PDFStreamRef) callconv(.C) PDFDictionaryRef;
pub const pdfStreamGetDictionary = CGPDFStreamGetDictionary;

extern "CoreGraphics" fn CGPDFStreamCopyData(stream: PDFStreamRef, format: ?*PDFDataFormat) callconv(.C) core_foundation.DataRef;
pub const pdfStreamCopyData = CGPDFStreamCopyData;

pub const PDFString = extern struct {};

pub const PDFStringRef = PDFString;

extern "CoreGraphics" fn CGPDFStringGetLength(string: PDFStringRef) callconv(.C) objc.size_t;
pub const pdfStringGetLength = CGPDFStringGetLength;

extern "CoreGraphics" fn CGPDFStringGetBytePtr(string: PDFStringRef) callconv(.C) ?*const u8;
pub const pdfStringGetBytePtr = CGPDFStringGetBytePtr;

extern "CoreGraphics" fn CGPDFStringCopyTextString(string: PDFStringRef) callconv(.C) core_foundation.StringRef;
pub const pdfStringCopyTextString = CGPDFStringCopyTextString;

extern "CoreGraphics" fn CGPDFStringCopyDate(string: PDFStringRef) callconv(.C) core_foundation.DateRef;
pub const pdfStringCopyDate = CGPDFStringCopyDate;

extern "CoreGraphics" fn CGPDFArrayGetCount(array: PDFArrayRef) callconv(.C) objc.size_t;
pub const pdfArrayGetCount = CGPDFArrayGetCount;

extern "CoreGraphics" fn CGPDFArrayGetObject(array: PDFArrayRef, index: objc.size_t, value: ?*PDFObjectRef) callconv(.C) i32;
pub const pdfArrayGetObject = CGPDFArrayGetObject;

extern "CoreGraphics" fn CGPDFArrayGetNull(array: PDFArrayRef, index: objc.size_t) callconv(.C) i32;
pub const pdfArrayGetNull = CGPDFArrayGetNull;

extern "CoreGraphics" fn CGPDFArrayGetBoolean(array: PDFArrayRef, index: objc.size_t, value: ?*PDFBoolean) callconv(.C) i32;
pub const pdfArrayGetBoolean = CGPDFArrayGetBoolean;

extern "CoreGraphics" fn CGPDFArrayGetInteger(array: PDFArrayRef, index: objc.size_t, value: ?*PDFInteger) callconv(.C) i32;
pub const pdfArrayGetInteger = CGPDFArrayGetInteger;

extern "CoreGraphics" fn CGPDFArrayGetNumber(array: PDFArrayRef, index: objc.size_t, value: ?*PDFReal) callconv(.C) i32;
pub const pdfArrayGetNumber = CGPDFArrayGetNumber;

extern "CoreGraphics" fn CGPDFArrayGetName(array: PDFArrayRef, index: objc.size_t, value: ?*[*:0]const u8) callconv(.C) i32;
pub const pdfArrayGetName = CGPDFArrayGetName;

extern "CoreGraphics" fn CGPDFArrayGetString(array: PDFArrayRef, index: objc.size_t, value: ?*PDFStringRef) callconv(.C) i32;
pub const pdfArrayGetString = CGPDFArrayGetString;

extern "CoreGraphics" fn CGPDFArrayGetArray(array: PDFArrayRef, index: objc.size_t, value: ?*PDFArrayRef) callconv(.C) i32;
pub const pdfArrayGetArray = CGPDFArrayGetArray;

extern "CoreGraphics" fn CGPDFArrayGetDictionary(array: PDFArrayRef, index: objc.size_t, value: ?*PDFDictionaryRef) callconv(.C) i32;
pub const pdfArrayGetDictionary = CGPDFArrayGetDictionary;

extern "CoreGraphics" fn CGPDFArrayGetStream(array: PDFArrayRef, index: objc.size_t, value: ?*PDFStreamRef) callconv(.C) i32;
pub const pdfArrayGetStream = CGPDFArrayGetStream;

pub const @"bool" = fn (i32) callconv(.C) i32;

extern "CoreGraphics" fn CGPDFArrayApplyBlock(array: PDFArrayRef, block: i32, info: ?*anyopaque) callconv(.C) void;
pub const pdfArrayApplyBlock = CGPDFArrayApplyBlock;

extern "CoreGraphics" fn CGPDFDictionaryGetCount(dict: PDFDictionaryRef) callconv(.C) objc.size_t;
pub const pdfDictionaryGetCount = CGPDFDictionaryGetCount;

extern "CoreGraphics" fn CGPDFDictionaryGetObject() callconv(.C) i32;
pub const pdfDictionaryGetObject = CGPDFDictionaryGetObject;

extern "CoreGraphics" fn CGPDFDictionaryGetBoolean() callconv(.C) i32;
pub const pdfDictionaryGetBoolean = CGPDFDictionaryGetBoolean;

extern "CoreGraphics" fn CGPDFDictionaryGetInteger() callconv(.C) i32;
pub const pdfDictionaryGetInteger = CGPDFDictionaryGetInteger;

extern "CoreGraphics" fn CGPDFDictionaryGetNumber() callconv(.C) i32;
pub const pdfDictionaryGetNumber = CGPDFDictionaryGetNumber;

extern "CoreGraphics" fn CGPDFDictionaryGetName() callconv(.C) i32;
pub const pdfDictionaryGetName = CGPDFDictionaryGetName;

extern "CoreGraphics" fn CGPDFDictionaryGetString() callconv(.C) i32;
pub const pdfDictionaryGetString = CGPDFDictionaryGetString;

extern "CoreGraphics" fn CGPDFDictionaryGetArray() callconv(.C) i32;
pub const pdfDictionaryGetArray = CGPDFDictionaryGetArray;

extern "CoreGraphics" fn CGPDFDictionaryGetDictionary() callconv(.C) i32;
pub const pdfDictionaryGetDictionary = CGPDFDictionaryGetDictionary;

extern "CoreGraphics" fn CGPDFDictionaryGetStream() callconv(.C) i32;
pub const pdfDictionaryGetStream = CGPDFDictionaryGetStream;

pub const PDFDictionaryApplierFunction = ?*const fn ([*:0]const u8, PDFObjectRef, ?*anyopaque) callconv(.C) void;

extern "CoreGraphics" fn CGPDFDictionaryApplyFunction(dict: PDFDictionaryRef, function: PDFDictionaryApplierFunction, info: ?*anyopaque) callconv(.C) void;
pub const pdfDictionaryApplyFunction = CGPDFDictionaryApplyFunction;

pub const PDFDictionaryApplierBlock = *const fn ([*:0]const u8, PDFObjectRef, ?*anyopaque) callconv(.C) i32;

extern "CoreGraphics" fn CGPDFDictionaryApplyBlock(dict: PDFDictionaryRef, block: PDFDictionaryApplierBlock, info: ?*anyopaque) callconv(.C) void;
pub const pdfDictionaryApplyBlock = CGPDFDictionaryApplyBlock;

pub const PDFBox = objc.int32_t;
pub const PDFBox_MediaBox: objc.int32_t = 0;
pub const PDFBox_CropBox: objc.int32_t = 1;
pub const PDFBox_BleedBox: objc.int32_t = 2;
pub const PDFBox_TrimBox: objc.int32_t = 3;
pub const PDFBox_ArtBox: objc.int32_t = 4;

extern "CoreGraphics" fn CGPDFPageRetain(page: PDFPageRef) callconv(.C) PDFPageRef;
pub const pdfPageRetain = CGPDFPageRetain;

extern "CoreGraphics" fn CGPDFPageRelease(page: PDFPageRef) callconv(.C) void;
pub const pdfPageRelease = CGPDFPageRelease;

extern "CoreGraphics" fn CGPDFPageGetDocument(page: PDFPageRef) callconv(.C) PDFDocumentRef;
pub const pdfPageGetDocument = CGPDFPageGetDocument;

extern "CoreGraphics" fn CGPDFPageGetPageNumber(page: PDFPageRef) callconv(.C) objc.size_t;
pub const pdfPageGetPageNumber = CGPDFPageGetPageNumber;

extern "CoreGraphics" fn CGPDFPageGetBoxRect(page: PDFPageRef, box: PDFBox) callconv(.C) core_foundation.CGRect;
pub const pdfPageGetBoxRect = CGPDFPageGetBoxRect;

extern "CoreGraphics" fn CGPDFPageGetRotationAngle(page: PDFPageRef) callconv(.C) i32;
pub const pdfPageGetRotationAngle = CGPDFPageGetRotationAngle;

extern "CoreGraphics" fn CGPDFPageGetDrawingTransform(
    page: PDFPageRef,
    box: PDFBox,
    rect: core_foundation.CGRect,
    rotate: i32,
    preserveAspectRatio: @"bool",
) callconv(.C) core_foundation.CGAffineTransform;
pub const pdfPageGetDrawingTransform = CGPDFPageGetDrawingTransform;

extern "CoreGraphics" fn CGPDFPageGetDictionary(page: PDFPageRef) callconv(.C) PDFDictionaryRef;
pub const pdfPageGetDictionary = CGPDFPageGetDictionary;

extern "CoreGraphics" fn CGPDFPageGetTypeID() callconv(.C) core_foundation.TypeID;
pub const pdfPageGetTypeID = CGPDFPageGetTypeID;

pub const PDFAccessPermissions = objc.uint32_t;
pub const PDFAccessPermissions_AllowsLowQualityPrinting: objc.uint32_t = 1;
pub const PDFAccessPermissions_AllowsHighQualityPrinting: objc.uint32_t = 2;
pub const PDFAccessPermissions_AllowsDocumentChanges: objc.uint32_t = 4;
pub const PDFAccessPermissions_AllowsDocumentAssembly: objc.uint32_t = 8;
pub const PDFAccessPermissions_AllowsContentCopying: objc.uint32_t = 16;
pub const PDFAccessPermissions_AllowsContentAccessibility: objc.uint32_t = 32;
pub const PDFAccessPermissions_AllowsCommenting: objc.uint32_t = 64;
pub const PDFAccessPermissions_AllowsFormFieldEntry: objc.uint32_t = 128;

extern "CoreGraphics" fn CGPDFDocumentCreateWithProvider(provider: DataProviderRef) callconv(.C) PDFDocumentRef;
pub const pdfDocumentCreateWithProvider = CGPDFDocumentCreateWithProvider;

extern "CoreGraphics" fn CGPDFDocumentCreateWithURL(url: core_foundation.URLRef) callconv(.C) PDFDocumentRef;
pub const pdfDocumentCreateWithURL = CGPDFDocumentCreateWithURL;

extern "CoreGraphics" fn CGPDFDocumentRetain(document: PDFDocumentRef) callconv(.C) PDFDocumentRef;
pub const pdfDocumentRetain = CGPDFDocumentRetain;

extern "CoreGraphics" fn CGPDFDocumentRelease(document: PDFDocumentRef) callconv(.C) void;
pub const pdfDocumentRelease = CGPDFDocumentRelease;

extern "CoreGraphics" fn CGPDFDocumentGetVersion(document: PDFDocumentRef, majorVersion: ?*i32, minorVersion: ?*i32) callconv(.C) void;
pub const pdfDocumentGetVersion = CGPDFDocumentGetVersion;

extern "CoreGraphics" fn CGPDFDocumentIsEncrypted() callconv(.C) i32;
pub const pdfDocumentIsEncrypted = CGPDFDocumentIsEncrypted;

extern "CoreGraphics" fn CGPDFDocumentUnlockWithPassword() callconv(.C) i32;
pub const pdfDocumentUnlockWithPassword = CGPDFDocumentUnlockWithPassword;

extern "CoreGraphics" fn CGPDFDocumentIsUnlocked() callconv(.C) i32;
pub const pdfDocumentIsUnlocked = CGPDFDocumentIsUnlocked;

extern "CoreGraphics" fn CGPDFDocumentAllowsPrinting() callconv(.C) i32;
pub const pdfDocumentAllowsPrinting = CGPDFDocumentAllowsPrinting;

extern "CoreGraphics" fn CGPDFDocumentAllowsCopying() callconv(.C) i32;
pub const pdfDocumentAllowsCopying = CGPDFDocumentAllowsCopying;

extern "CoreGraphics" fn CGPDFDocumentGetNumberOfPages(document: PDFDocumentRef) callconv(.C) objc.size_t;
pub const pdfDocumentGetNumberOfPages = CGPDFDocumentGetNumberOfPages;

extern "CoreGraphics" fn CGPDFDocumentGetPage(document: PDFDocumentRef, pageNumber: objc.size_t) callconv(.C) PDFPageRef;
pub const pdfDocumentGetPage = CGPDFDocumentGetPage;

extern "CoreGraphics" fn CGPDFDocumentGetCatalog(document: PDFDocumentRef) callconv(.C) PDFDictionaryRef;
pub const pdfDocumentGetCatalog = CGPDFDocumentGetCatalog;

extern "CoreGraphics" fn CGPDFDocumentGetInfo(document: PDFDocumentRef) callconv(.C) PDFDictionaryRef;
pub const pdfDocumentGetInfo = CGPDFDocumentGetInfo;

extern "CoreGraphics" fn CGPDFDocumentGetID(document: PDFDocumentRef) callconv(.C) PDFArrayRef;
pub const pdfDocumentGetID = CGPDFDocumentGetID;

extern "CoreGraphics" fn CGPDFDocumentGetTypeID() callconv(.C) core_foundation.TypeID;
pub const pdfDocumentGetTypeID = CGPDFDocumentGetTypeID;

extern "CoreGraphics" fn CGPDFDocumentGetOutline(document: PDFDocumentRef) callconv(.C) core_foundation.DictionaryRef;
pub const pdfDocumentGetOutline = CGPDFDocumentGetOutline;

extern "CoreGraphics" fn CGPDFDocumentGetAccessPermissions(document: PDFDocumentRef) callconv(.C) PDFAccessPermissions;
pub const pdfDocumentGetAccessPermissions = CGPDFDocumentGetAccessPermissions;

extern "CoreGraphics" fn CGPDFDocumentGetMediaBox(document: PDFDocumentRef, page: i32) callconv(.C) core_foundation.CGRect;
pub const pdfDocumentGetMediaBox = CGPDFDocumentGetMediaBox;

extern "CoreGraphics" fn CGPDFDocumentGetCropBox(document: PDFDocumentRef, page: i32) callconv(.C) core_foundation.CGRect;
pub const pdfDocumentGetCropBox = CGPDFDocumentGetCropBox;

extern "CoreGraphics" fn CGPDFDocumentGetBleedBox(document: PDFDocumentRef, page: i32) callconv(.C) core_foundation.CGRect;
pub const pdfDocumentGetBleedBox = CGPDFDocumentGetBleedBox;

extern "CoreGraphics" fn CGPDFDocumentGetTrimBox(document: PDFDocumentRef, page: i32) callconv(.C) core_foundation.CGRect;
pub const pdfDocumentGetTrimBox = CGPDFDocumentGetTrimBox;

extern "CoreGraphics" fn CGPDFDocumentGetArtBox(document: PDFDocumentRef, page: i32) callconv(.C) core_foundation.CGRect;
pub const pdfDocumentGetArtBox = CGPDFDocumentGetArtBox;

extern "CoreGraphics" fn CGPDFDocumentGetRotationAngle(document: PDFDocumentRef, page: i32) callconv(.C) i32;
pub const pdfDocumentGetRotationAngle = CGPDFDocumentGetRotationAngle;

pub const Shading = extern struct {};

pub const ShadingRef = Shading;

pub const Function = extern struct {};

pub const FunctionRef = Function;

pub const FunctionEvaluateCallback = ?*const fn (?*anyopaque, ?*const core_foundation.CGFloat, ?*core_foundation.CGFloat) callconv(.C) void;

pub const FunctionReleaseInfoCallback = ?*const fn (?*anyopaque) callconv(.C) void;

pub const FunctionCallbacks = extern struct {
    version: u32,
    evaluate: FunctionEvaluateCallback,
    releaseInfo: FunctionReleaseInfoCallback,
};

extern "CoreGraphics" fn CGFunctionGetTypeID() callconv(.C) core_foundation.TypeID;
pub const functionGetTypeID = CGFunctionGetTypeID;

extern "CoreGraphics" fn CGFunctionCreate(
    info: ?*anyopaque,
    domainDimension: objc.size_t,
    domain: ?*const core_foundation.CGFloat,
    rangeDimension: objc.size_t,
    range: ?*const core_foundation.CGFloat,
    callbacks: ?*const FunctionCallbacks,
) callconv(.C) FunctionRef;
pub const functionCreate = CGFunctionCreate;

extern "CoreGraphics" fn CGFunctionRetain(function: FunctionRef) callconv(.C) FunctionRef;
pub const functionRetain = CGFunctionRetain;

extern "CoreGraphics" fn CGFunctionRelease(function: FunctionRef) callconv(.C) void;
pub const functionRelease = CGFunctionRelease;

extern "CoreGraphics" fn CGShadingGetTypeID() callconv(.C) core_foundation.TypeID;
pub const shadingGetTypeID = CGShadingGetTypeID;

extern "CoreGraphics" fn CGShadingCreateAxial(
    space: ColorSpaceRef,
    start: core_foundation.CGPoint,
    end: core_foundation.CGPoint,
    function: FunctionRef,
    extendStart: @"bool",
    extendEnd: @"bool",
) callconv(.C) ShadingRef;
pub const shadingCreateAxial = CGShadingCreateAxial;

extern "CoreGraphics" fn CGShadingCreateRadial(
    space: ColorSpaceRef,
    start: core_foundation.CGPoint,
    startRadius: core_foundation.CGFloat,
    end: core_foundation.CGPoint,
    endRadius: core_foundation.CGFloat,
    function: FunctionRef,
    extendStart: @"bool",
    extendEnd: @"bool",
) callconv(.C) ShadingRef;
pub const shadingCreateRadial = CGShadingCreateRadial;

extern "CoreGraphics" fn CGShadingRetain(shading: ShadingRef) callconv(.C) ShadingRef;
pub const shadingRetain = CGShadingRetain;

extern "CoreGraphics" fn CGShadingRelease(shading: ShadingRef) callconv(.C) void;
pub const shadingRelease = CGShadingRelease;

pub const PathDrawingMode = objc.int32_t;
pub const PathDrawingMode_Fill: objc.int32_t = 0;
pub const PathDrawingMode_EOFill: objc.int32_t = 1;
pub const PathDrawingMode_Stroke: objc.int32_t = 2;
pub const PathDrawingMode_FillStroke: objc.int32_t = 3;
pub const PathDrawingMode_EOFillStroke: objc.int32_t = 4;

pub const TextDrawingMode = objc.int32_t;
pub const TextDrawingMode_Fill: objc.int32_t = 0;
pub const TextDrawingMode_Stroke: objc.int32_t = 1;
pub const TextDrawingMode_FillStroke: objc.int32_t = 2;
pub const TextDrawingMode_Invisible: objc.int32_t = 3;
pub const TextDrawingMode_FillClip: objc.int32_t = 4;
pub const TextDrawingMode_StrokeClip: objc.int32_t = 5;
pub const TextDrawingMode_FillStrokeClip: objc.int32_t = 6;
pub const TextDrawingMode_Clip: objc.int32_t = 7;

pub const TextEncoding = objc.int32_t;
pub const TextEncoding_EncodingFontSpecific: objc.int32_t = 0;
pub const TextEncoding_EncodingMacRoman: objc.int32_t = 1;

pub const InterpolationQuality = objc.int32_t;
pub const InterpolationQuality_Default: objc.int32_t = 0;
pub const InterpolationQuality_None: objc.int32_t = 1;
pub const InterpolationQuality_Low: objc.int32_t = 2;
pub const InterpolationQuality_Medium: objc.int32_t = 4;
pub const InterpolationQuality_High: objc.int32_t = 3;

pub const BlendMode = objc.int32_t;
pub const BlendMode_Normal: objc.int32_t = 0;
pub const BlendMode_Multiply: objc.int32_t = 1;
pub const BlendMode_Screen: objc.int32_t = 2;
pub const BlendMode_Overlay: objc.int32_t = 3;
pub const BlendMode_Darken: objc.int32_t = 4;
pub const BlendMode_Lighten: objc.int32_t = 5;
pub const BlendMode_ColorDodge: objc.int32_t = 6;
pub const BlendMode_ColorBurn: objc.int32_t = 7;
pub const BlendMode_SoftLight: objc.int32_t = 8;
pub const BlendMode_HardLight: objc.int32_t = 9;
pub const BlendMode_Difference: objc.int32_t = 10;
pub const BlendMode_Exclusion: objc.int32_t = 11;
pub const BlendMode_Hue: objc.int32_t = 12;
pub const BlendMode_Saturation: objc.int32_t = 13;
pub const BlendMode_Color: objc.int32_t = 14;
pub const BlendMode_Luminosity: objc.int32_t = 15;
pub const BlendMode_Clear: objc.int32_t = 16;
pub const BlendMode_Copy: objc.int32_t = 17;
pub const BlendMode_SourceIn: objc.int32_t = 18;
pub const BlendMode_SourceOut: objc.int32_t = 19;
pub const BlendMode_SourceAtop: objc.int32_t = 20;
pub const BlendMode_DestinationOver: objc.int32_t = 21;
pub const BlendMode_DestinationIn: objc.int32_t = 22;
pub const BlendMode_DestinationOut: objc.int32_t = 23;
pub const BlendMode_DestinationAtop: objc.int32_t = 24;
pub const BlendMode_XOR: objc.int32_t = 25;
pub const BlendMode_PlusDarker: objc.int32_t = 26;
pub const BlendMode_PlusLighter: objc.int32_t = 27;

extern "CoreGraphics" fn CGContextGetTypeID() callconv(.C) core_foundation.TypeID;
pub const contextGetTypeID = CGContextGetTypeID;

extern "CoreGraphics" fn CGContextSaveGState(c: ContextRef) callconv(.C) void;
pub const contextSaveGState = CGContextSaveGState;

extern "CoreGraphics" fn CGContextRestoreGState(c: ContextRef) callconv(.C) void;
pub const contextRestoreGState = CGContextRestoreGState;

extern "CoreGraphics" fn CGContextScaleCTM(c: ContextRef, sx: core_foundation.CGFloat, sy: core_foundation.CGFloat) callconv(.C) void;
pub const contextScaleCTM = CGContextScaleCTM;

extern "CoreGraphics" fn CGContextTranslateCTM(c: ContextRef, tx: core_foundation.CGFloat, ty: core_foundation.CGFloat) callconv(.C) void;
pub const contextTranslateCTM = CGContextTranslateCTM;

extern "CoreGraphics" fn CGContextRotateCTM(c: ContextRef, angle: core_foundation.CGFloat) callconv(.C) void;
pub const contextRotateCTM = CGContextRotateCTM;

extern "CoreGraphics" fn CGContextConcatCTM(c: ContextRef, transform: core_foundation.CGAffineTransform) callconv(.C) void;
pub const contextConcatCTM = CGContextConcatCTM;

extern "CoreGraphics" fn CGContextGetCTM(c: ContextRef) callconv(.C) core_foundation.CGAffineTransform;
pub const contextGetCTM = CGContextGetCTM;

extern "CoreGraphics" fn CGContextSetLineWidth(c: ContextRef, width: core_foundation.CGFloat) callconv(.C) void;
pub const contextSetLineWidth = CGContextSetLineWidth;

extern "CoreGraphics" fn CGContextSetLineCap(c: ContextRef, cap: LineCap) callconv(.C) void;
pub const contextSetLineCap = CGContextSetLineCap;

extern "CoreGraphics" fn CGContextSetLineJoin(c: ContextRef, join: LineJoin) callconv(.C) void;
pub const contextSetLineJoin = CGContextSetLineJoin;

extern "CoreGraphics" fn CGContextSetMiterLimit(c: ContextRef, limit: core_foundation.CGFloat) callconv(.C) void;
pub const contextSetMiterLimit = CGContextSetMiterLimit;

extern "CoreGraphics" fn CGContextSetLineDash(
    c: ContextRef,
    phase: core_foundation.CGFloat,
    lengths: ?*const core_foundation.CGFloat,
    count: objc.size_t,
) callconv(.C) void;
pub const contextSetLineDash = CGContextSetLineDash;

extern "CoreGraphics" fn CGContextSetFlatness(c: ContextRef, flatness: core_foundation.CGFloat) callconv(.C) void;
pub const contextSetFlatness = CGContextSetFlatness;

extern "CoreGraphics" fn CGContextSetAlpha(c: ContextRef, alpha: core_foundation.CGFloat) callconv(.C) void;
pub const contextSetAlpha = CGContextSetAlpha;

extern "CoreGraphics" fn CGContextSetBlendMode(c: ContextRef, mode: BlendMode) callconv(.C) void;
pub const contextSetBlendMode = CGContextSetBlendMode;

extern "CoreGraphics" fn CGContextBeginPath(c: ContextRef) callconv(.C) void;
pub const contextBeginPath = CGContextBeginPath;

extern "CoreGraphics" fn CGContextMoveToPoint(c: ContextRef, x: core_foundation.CGFloat, y: core_foundation.CGFloat) callconv(.C) void;
pub const contextMoveToPoint = CGContextMoveToPoint;

extern "CoreGraphics" fn CGContextAddLineToPoint(c: ContextRef, x: core_foundation.CGFloat, y: core_foundation.CGFloat) callconv(.C) void;
pub const contextAddLineToPoint = CGContextAddLineToPoint;

extern "CoreGraphics" fn CGContextAddCurveToPoint(
    c: ContextRef,
    cp1x: core_foundation.CGFloat,
    cp1y: core_foundation.CGFloat,
    cp2x: core_foundation.CGFloat,
    cp2y: core_foundation.CGFloat,
    x: core_foundation.CGFloat,
    y: core_foundation.CGFloat,
) callconv(.C) void;
pub const contextAddCurveToPoint = CGContextAddCurveToPoint;

extern "CoreGraphics" fn CGContextAddQuadCurveToPoint(
    c: ContextRef,
    cpx: core_foundation.CGFloat,
    cpy: core_foundation.CGFloat,
    x: core_foundation.CGFloat,
    y: core_foundation.CGFloat,
) callconv(.C) void;
pub const contextAddQuadCurveToPoint = CGContextAddQuadCurveToPoint;

extern "CoreGraphics" fn CGContextClosePath(c: ContextRef) callconv(.C) void;
pub const contextClosePath = CGContextClosePath;

extern "CoreGraphics" fn CGContextAddRect(c: ContextRef, rect: core_foundation.CGRect) callconv(.C) void;
pub const contextAddRect = CGContextAddRect;

extern "CoreGraphics" fn CGContextAddRects(c: ContextRef, rects: ?*const core_foundation.CGRect, count: objc.size_t) callconv(.C) void;
pub const contextAddRects = CGContextAddRects;

extern "CoreGraphics" fn CGContextAddLines(c: ContextRef, points: ?*const core_foundation.CGPoint, count: objc.size_t) callconv(.C) void;
pub const contextAddLines = CGContextAddLines;

extern "CoreGraphics" fn CGContextAddEllipseInRect(c: ContextRef, rect: core_foundation.CGRect) callconv(.C) void;
pub const contextAddEllipseInRect = CGContextAddEllipseInRect;

extern "CoreGraphics" fn CGContextAddArc(
    c: ContextRef,
    x: core_foundation.CGFloat,
    y: core_foundation.CGFloat,
    radius: core_foundation.CGFloat,
    startAngle: core_foundation.CGFloat,
    endAngle: core_foundation.CGFloat,
    clockwise: i32,
) callconv(.C) void;
pub const contextAddArc = CGContextAddArc;

extern "CoreGraphics" fn CGContextAddArcToPoint(
    c: ContextRef,
    x1: core_foundation.CGFloat,
    y1: core_foundation.CGFloat,
    x2: core_foundation.CGFloat,
    y2: core_foundation.CGFloat,
    radius: core_foundation.CGFloat,
) callconv(.C) void;
pub const contextAddArcToPoint = CGContextAddArcToPoint;

extern "CoreGraphics" fn CGContextAddPath(c: ContextRef, path: PathRef) callconv(.C) void;
pub const contextAddPath = CGContextAddPath;

extern "CoreGraphics" fn CGContextReplacePathWithStrokedPath(c: ContextRef) callconv(.C) void;
pub const contextReplacePathWithStrokedPath = CGContextReplacePathWithStrokedPath;

extern "CoreGraphics" fn CGContextIsPathEmpty() callconv(.C) i32;
pub const contextIsPathEmpty = CGContextIsPathEmpty;

extern "CoreGraphics" fn CGContextGetPathCurrentPoint(c: ContextRef) callconv(.C) core_foundation.CGPoint;
pub const contextGetPathCurrentPoint = CGContextGetPathCurrentPoint;

extern "CoreGraphics" fn CGContextGetPathBoundingBox(c: ContextRef) callconv(.C) core_foundation.CGRect;
pub const contextGetPathBoundingBox = CGContextGetPathBoundingBox;

extern "CoreGraphics" fn CGContextCopyPath(c: ContextRef) callconv(.C) PathRef;
pub const contextCopyPath = CGContextCopyPath;

extern "CoreGraphics" fn CGContextPathContainsPoint() callconv(.C) i32;
pub const contextPathContainsPoint = CGContextPathContainsPoint;

extern "CoreGraphics" fn CGContextDrawPath(c: ContextRef, mode: PathDrawingMode) callconv(.C) void;
pub const contextDrawPath = CGContextDrawPath;

extern "CoreGraphics" fn CGContextFillPath(c: ContextRef) callconv(.C) void;
pub const contextFillPath = CGContextFillPath;

extern "CoreGraphics" fn CGContextEOFillPath(c: ContextRef) callconv(.C) void;
pub const contextEOFillPath = CGContextEOFillPath;

extern "CoreGraphics" fn CGContextStrokePath(c: ContextRef) callconv(.C) void;
pub const contextStrokePath = CGContextStrokePath;

extern "CoreGraphics" fn CGContextFillRect(c: ContextRef, rect: core_foundation.CGRect) callconv(.C) void;
pub const contextFillRect = CGContextFillRect;

extern "CoreGraphics" fn CGContextFillRects(c: ContextRef, rects: ?*const core_foundation.CGRect, count: objc.size_t) callconv(.C) void;
pub const contextFillRects = CGContextFillRects;

extern "CoreGraphics" fn CGContextStrokeRect(c: ContextRef, rect: core_foundation.CGRect) callconv(.C) void;
pub const contextStrokeRect = CGContextStrokeRect;

extern "CoreGraphics" fn CGContextStrokeRectWithWidth(c: ContextRef, rect: core_foundation.CGRect, width: core_foundation.CGFloat) callconv(.C) void;
pub const contextStrokeRectWithWidth = CGContextStrokeRectWithWidth;

extern "CoreGraphics" fn CGContextClearRect(c: ContextRef, rect: core_foundation.CGRect) callconv(.C) void;
pub const contextClearRect = CGContextClearRect;

extern "CoreGraphics" fn CGContextFillEllipseInRect(c: ContextRef, rect: core_foundation.CGRect) callconv(.C) void;
pub const contextFillEllipseInRect = CGContextFillEllipseInRect;

extern "CoreGraphics" fn CGContextStrokeEllipseInRect(c: ContextRef, rect: core_foundation.CGRect) callconv(.C) void;
pub const contextStrokeEllipseInRect = CGContextStrokeEllipseInRect;

extern "CoreGraphics" fn CGContextStrokeLineSegments(c: ContextRef, points: ?*const core_foundation.CGPoint, count: objc.size_t) callconv(.C) void;
pub const contextStrokeLineSegments = CGContextStrokeLineSegments;

extern "CoreGraphics" fn CGContextClip(c: ContextRef) callconv(.C) void;
pub const contextClip = CGContextClip;

extern "CoreGraphics" fn CGContextEOClip(c: ContextRef) callconv(.C) void;
pub const contextEOClip = CGContextEOClip;

extern "CoreGraphics" fn CGContextResetClip(c: ContextRef) callconv(.C) void;
pub const contextResetClip = CGContextResetClip;

extern "CoreGraphics" fn CGContextClipToMask(c: ContextRef, rect: core_foundation.CGRect, mask: ImageRef) callconv(.C) void;
pub const contextClipToMask = CGContextClipToMask;

extern "CoreGraphics" fn CGContextGetClipBoundingBox(c: ContextRef) callconv(.C) core_foundation.CGRect;
pub const contextGetClipBoundingBox = CGContextGetClipBoundingBox;

extern "CoreGraphics" fn CGContextClipToRect(c: ContextRef, rect: core_foundation.CGRect) callconv(.C) void;
pub const contextClipToRect = CGContextClipToRect;

extern "CoreGraphics" fn CGContextClipToRects(c: ContextRef, rects: ?*const core_foundation.CGRect, count: objc.size_t) callconv(.C) void;
pub const contextClipToRects = CGContextClipToRects;

extern "CoreGraphics" fn CGContextSetFillColorWithColor(c: ContextRef, color: ColorRef) callconv(.C) void;
pub const contextSetFillColorWithColor = CGContextSetFillColorWithColor;

extern "CoreGraphics" fn CGContextSetStrokeColorWithColor(c: ContextRef, color: ColorRef) callconv(.C) void;
pub const contextSetStrokeColorWithColor = CGContextSetStrokeColorWithColor;

extern "CoreGraphics" fn CGContextSetFillColorSpace(c: ContextRef, space: ColorSpaceRef) callconv(.C) void;
pub const contextSetFillColorSpace = CGContextSetFillColorSpace;

extern "CoreGraphics" fn CGContextSetStrokeColorSpace(c: ContextRef, space: ColorSpaceRef) callconv(.C) void;
pub const contextSetStrokeColorSpace = CGContextSetStrokeColorSpace;

extern "CoreGraphics" fn CGContextSetFillColor(c: ContextRef, components: ?*const core_foundation.CGFloat) callconv(.C) void;
pub const contextSetFillColor = CGContextSetFillColor;

extern "CoreGraphics" fn CGContextSetStrokeColor(c: ContextRef, components: ?*const core_foundation.CGFloat) callconv(.C) void;
pub const contextSetStrokeColor = CGContextSetStrokeColor;

extern "CoreGraphics" fn CGContextSetFillPattern(c: ContextRef, pattern: PatternRef, components: ?*const core_foundation.CGFloat) callconv(.C) void;
pub const contextSetFillPattern = CGContextSetFillPattern;

extern "CoreGraphics" fn CGContextSetStrokePattern(c: ContextRef, pattern: PatternRef, components: ?*const core_foundation.CGFloat) callconv(.C) void;
pub const contextSetStrokePattern = CGContextSetStrokePattern;

extern "CoreGraphics" fn CGContextSetPatternPhase(c: ContextRef, phase: core_foundation.CGSize) callconv(.C) void;
pub const contextSetPatternPhase = CGContextSetPatternPhase;

extern "CoreGraphics" fn CGContextSetGrayFillColor(c: ContextRef, gray: core_foundation.CGFloat, alpha: core_foundation.CGFloat) callconv(.C) void;
pub const contextSetGrayFillColor = CGContextSetGrayFillColor;

extern "CoreGraphics" fn CGContextSetGrayStrokeColor(c: ContextRef, gray: core_foundation.CGFloat, alpha: core_foundation.CGFloat) callconv(.C) void;
pub const contextSetGrayStrokeColor = CGContextSetGrayStrokeColor;

extern "CoreGraphics" fn CGContextSetRGBFillColor(
    c: ContextRef,
    red: core_foundation.CGFloat,
    green: core_foundation.CGFloat,
    blue: core_foundation.CGFloat,
    alpha: core_foundation.CGFloat,
) callconv(.C) void;
pub const contextSetRGBFillColor = CGContextSetRGBFillColor;

extern "CoreGraphics" fn CGContextSetRGBStrokeColor(
    c: ContextRef,
    red: core_foundation.CGFloat,
    green: core_foundation.CGFloat,
    blue: core_foundation.CGFloat,
    alpha: core_foundation.CGFloat,
) callconv(.C) void;
pub const contextSetRGBStrokeColor = CGContextSetRGBStrokeColor;

extern "CoreGraphics" fn CGContextSetCMYKFillColor(
    c: ContextRef,
    cyan: core_foundation.CGFloat,
    magenta: core_foundation.CGFloat,
    yellow: core_foundation.CGFloat,
    black: core_foundation.CGFloat,
    alpha: core_foundation.CGFloat,
) callconv(.C) void;
pub const contextSetCMYKFillColor = CGContextSetCMYKFillColor;

extern "CoreGraphics" fn CGContextSetCMYKStrokeColor(
    c: ContextRef,
    cyan: core_foundation.CGFloat,
    magenta: core_foundation.CGFloat,
    yellow: core_foundation.CGFloat,
    black: core_foundation.CGFloat,
    alpha: core_foundation.CGFloat,
) callconv(.C) void;
pub const contextSetCMYKStrokeColor = CGContextSetCMYKStrokeColor;

extern "CoreGraphics" fn CGContextSetRenderingIntent(c: ContextRef, intent: ColorRenderingIntent) callconv(.C) void;
pub const contextSetRenderingIntent = CGContextSetRenderingIntent;

extern "CoreGraphics" fn CGContextSetEDRTargetHeadroom() callconv(.C) i32;
pub const contextSetEDRTargetHeadroom = CGContextSetEDRTargetHeadroom;

extern "CoreGraphics" fn CGContextGetEDRTargetHeadroom(c: ContextRef) callconv(.C) f32;
pub const contextGetEDRTargetHeadroom = CGContextGetEDRTargetHeadroom;

extern "CoreGraphics" fn CGContextDrawImage(c: ContextRef, rect: core_foundation.CGRect, image: ImageRef) callconv(.C) void;
pub const contextDrawImage = CGContextDrawImage;

extern "CoreGraphics" fn CGContextDrawTiledImage(c: ContextRef, rect: core_foundation.CGRect, image: ImageRef) callconv(.C) void;
pub const contextDrawTiledImage = CGContextDrawTiledImage;

pub const ToneMapping = objc.uint32_t;
pub const ToneMapping_Default: objc.uint32_t = 0;
pub const ToneMapping_ImageSpecificLumaScaling: objc.uint32_t = 1;
pub const ToneMapping_ReferenceWhiteBased: objc.uint32_t = 2;
pub const ToneMapping_ITURecommended: objc.uint32_t = 3;
pub const ToneMapping_EXRGamma: objc.uint32_t = 4;
pub const ToneMapping_None: objc.uint32_t = 5;

extern "CoreGraphics" fn CGContextDrawImageApplyingToneMapping() callconv(.C) i32;
pub const contextDrawImageApplyingToneMapping = CGContextDrawImageApplyingToneMapping;

extern "CoreGraphics" fn CGContextGetInterpolationQuality(c: ContextRef) callconv(.C) InterpolationQuality;
pub const contextGetInterpolationQuality = CGContextGetInterpolationQuality;

extern "CoreGraphics" fn CGContextSetInterpolationQuality(c: ContextRef, quality: InterpolationQuality) callconv(.C) void;
pub const contextSetInterpolationQuality = CGContextSetInterpolationQuality;

extern "CoreGraphics" fn CGContextSetShadowWithColor(
    c: ContextRef,
    offset: core_foundation.CGSize,
    blur: core_foundation.CGFloat,
    color: ColorRef,
) callconv(.C) void;
pub const contextSetShadowWithColor = CGContextSetShadowWithColor;

extern "CoreGraphics" fn CGContextSetShadow(c: ContextRef, offset: core_foundation.CGSize, blur: core_foundation.CGFloat) callconv(.C) void;
pub const contextSetShadow = CGContextSetShadow;

extern "CoreGraphics" fn CGContextDrawLinearGradient(
    c: ContextRef,
    gradient: GradientRef,
    startPoint: core_foundation.CGPoint,
    endPoint: core_foundation.CGPoint,
    options: GradientDrawingOptions,
) callconv(.C) void;
pub const contextDrawLinearGradient = CGContextDrawLinearGradient;

extern "CoreGraphics" fn CGContextDrawRadialGradient(
    c: ContextRef,
    gradient: GradientRef,
    startCenter: core_foundation.CGPoint,
    startRadius: core_foundation.CGFloat,
    endCenter: core_foundation.CGPoint,
    endRadius: core_foundation.CGFloat,
    options: GradientDrawingOptions,
) callconv(.C) void;
pub const contextDrawRadialGradient = CGContextDrawRadialGradient;

extern "CoreGraphics" fn CGContextDrawConicGradient(
    c: ContextRef,
    gradient: GradientRef,
    center: core_foundation.CGPoint,
    angle: core_foundation.CGFloat,
) callconv(.C) void;
pub const contextDrawConicGradient = CGContextDrawConicGradient;

extern "CoreGraphics" fn CGContextDrawShading(c: ContextRef, shading: ShadingRef) callconv(.C) void;
pub const contextDrawShading = CGContextDrawShading;

extern "CoreGraphics" fn CGContextSetCharacterSpacing(c: ContextRef, spacing: core_foundation.CGFloat) callconv(.C) void;
pub const contextSetCharacterSpacing = CGContextSetCharacterSpacing;

extern "CoreGraphics" fn CGContextSetTextPosition(c: ContextRef, x: core_foundation.CGFloat, y: core_foundation.CGFloat) callconv(.C) void;
pub const contextSetTextPosition = CGContextSetTextPosition;

extern "CoreGraphics" fn CGContextGetTextPosition(c: ContextRef) callconv(.C) core_foundation.CGPoint;
pub const contextGetTextPosition = CGContextGetTextPosition;

extern "CoreGraphics" fn CGContextSetTextMatrix(c: ContextRef, t: core_foundation.CGAffineTransform) callconv(.C) void;
pub const contextSetTextMatrix = CGContextSetTextMatrix;

extern "CoreGraphics" fn CGContextGetTextMatrix(c: ContextRef) callconv(.C) core_foundation.CGAffineTransform;
pub const contextGetTextMatrix = CGContextGetTextMatrix;

extern "CoreGraphics" fn CGContextSetTextDrawingMode(c: ContextRef, mode: TextDrawingMode) callconv(.C) void;
pub const contextSetTextDrawingMode = CGContextSetTextDrawingMode;

extern "CoreGraphics" fn CGContextSetFont(c: ContextRef, font: FontRef) callconv(.C) void;
pub const contextSetFont = CGContextSetFont;

extern "CoreGraphics" fn CGContextSetFontSize(c: ContextRef, size: core_foundation.CGFloat) callconv(.C) void;
pub const contextSetFontSize = CGContextSetFontSize;

extern "CoreGraphics" fn CGContextShowGlyphsAtPositions(
    c: ContextRef,
    glyphs: ?*const Glyph,
    Lpositions: ?*const core_foundation.CGPoint,
    count: objc.size_t,
) callconv(.C) void;
pub const contextShowGlyphsAtPositions = CGContextShowGlyphsAtPositions;

extern "CoreGraphics" fn CGContextDrawPDFPage(c: ContextRef, page: PDFPageRef) callconv(.C) void;
pub const contextDrawPDFPage = CGContextDrawPDFPage;

extern "CoreGraphics" fn CGContextBeginPage(c: ContextRef, mediaBox: ?*const core_foundation.CGRect) callconv(.C) void;
pub const contextBeginPage = CGContextBeginPage;

extern "CoreGraphics" fn CGContextEndPage(c: ContextRef) callconv(.C) void;
pub const contextEndPage = CGContextEndPage;

extern "CoreGraphics" fn CGContextRetain(c: ContextRef) callconv(.C) ContextRef;
pub const contextRetain = CGContextRetain;

extern "CoreGraphics" fn CGContextRelease(c: ContextRef) callconv(.C) void;
pub const contextRelease = CGContextRelease;

extern "CoreGraphics" fn CGContextFlush(c: ContextRef) callconv(.C) void;
pub const contextFlush = CGContextFlush;

extern "CoreGraphics" fn CGContextSynchronize(c: ContextRef) callconv(.C) void;
pub const contextSynchronize = CGContextSynchronize;

extern "CoreGraphics" fn CGContextSetShouldAntialias(c: ContextRef, shouldAntialias: @"bool") callconv(.C) void;
pub const contextSetShouldAntialias = CGContextSetShouldAntialias;

extern "CoreGraphics" fn CGContextSetAllowsAntialiasing(c: ContextRef, allowsAntialiasing: @"bool") callconv(.C) void;
pub const contextSetAllowsAntialiasing = CGContextSetAllowsAntialiasing;

extern "CoreGraphics" fn CGContextSetShouldSmoothFonts(c: ContextRef, shouldSmoothFonts: @"bool") callconv(.C) void;
pub const contextSetShouldSmoothFonts = CGContextSetShouldSmoothFonts;

extern "CoreGraphics" fn CGContextSetAllowsFontSmoothing(c: ContextRef, allowsFontSmoothing: @"bool") callconv(.C) void;
pub const contextSetAllowsFontSmoothing = CGContextSetAllowsFontSmoothing;

extern "CoreGraphics" fn CGContextSetShouldSubpixelPositionFonts(c: ContextRef, shouldSubpixelPositionFonts: @"bool") callconv(.C) void;
pub const contextSetShouldSubpixelPositionFonts = CGContextSetShouldSubpixelPositionFonts;

extern "CoreGraphics" fn CGContextSetAllowsFontSubpixelPositioning(c: ContextRef, allowsFontSubpixelPositioning: @"bool") callconv(.C) void;
pub const contextSetAllowsFontSubpixelPositioning = CGContextSetAllowsFontSubpixelPositioning;

extern "CoreGraphics" fn CGContextSetShouldSubpixelQuantizeFonts(c: ContextRef, shouldSubpixelQuantizeFonts: @"bool") callconv(.C) void;
pub const contextSetShouldSubpixelQuantizeFonts = CGContextSetShouldSubpixelQuantizeFonts;

extern "CoreGraphics" fn CGContextSetAllowsFontSubpixelQuantization(c: ContextRef, allowsFontSubpixelQuantization: @"bool") callconv(.C) void;
pub const contextSetAllowsFontSubpixelQuantization = CGContextSetAllowsFontSubpixelQuantization;

extern "CoreGraphics" fn CGContextBeginTransparencyLayer(c: ContextRef, auxiliaryInfo: core_foundation.DictionaryRef) callconv(.C) void;
pub const contextBeginTransparencyLayer = CGContextBeginTransparencyLayer;

extern "CoreGraphics" fn CGContextBeginTransparencyLayerWithRect(c: ContextRef, rect: core_foundation.CGRect, auxInfo: core_foundation.DictionaryRef) callconv(.C) void;
pub const contextBeginTransparencyLayerWithRect = CGContextBeginTransparencyLayerWithRect;

extern "CoreGraphics" fn CGContextEndTransparencyLayer(c: ContextRef) callconv(.C) void;
pub const contextEndTransparencyLayer = CGContextEndTransparencyLayer;

extern "CoreGraphics" fn CGContextGetUserSpaceToDeviceSpaceTransform(c: ContextRef) callconv(.C) core_foundation.CGAffineTransform;
pub const contextGetUserSpaceToDeviceSpaceTransform = CGContextGetUserSpaceToDeviceSpaceTransform;

extern "CoreGraphics" fn CGContextConvertPointToDeviceSpace(c: ContextRef, point: core_foundation.CGPoint) callconv(.C) core_foundation.CGPoint;
pub const contextConvertPointToDeviceSpace = CGContextConvertPointToDeviceSpace;

extern "CoreGraphics" fn CGContextConvertPointToUserSpace(c: ContextRef, point: core_foundation.CGPoint) callconv(.C) core_foundation.CGPoint;
pub const contextConvertPointToUserSpace = CGContextConvertPointToUserSpace;

extern "CoreGraphics" fn CGContextConvertSizeToDeviceSpace(c: ContextRef, size: core_foundation.CGSize) callconv(.C) core_foundation.CGSize;
pub const contextConvertSizeToDeviceSpace = CGContextConvertSizeToDeviceSpace;

extern "CoreGraphics" fn CGContextConvertSizeToUserSpace(c: ContextRef, size: core_foundation.CGSize) callconv(.C) core_foundation.CGSize;
pub const contextConvertSizeToUserSpace = CGContextConvertSizeToUserSpace;

extern "CoreGraphics" fn CGContextConvertRectToDeviceSpace(c: ContextRef, rect: core_foundation.CGRect) callconv(.C) core_foundation.CGRect;
pub const contextConvertRectToDeviceSpace = CGContextConvertRectToDeviceSpace;

extern "CoreGraphics" fn CGContextConvertRectToUserSpace(c: ContextRef, rect: core_foundation.CGRect) callconv(.C) core_foundation.CGRect;
pub const contextConvertRectToUserSpace = CGContextConvertRectToUserSpace;

extern "CoreGraphics" fn CGContextSelectFont(
    c: ContextRef,
    name: [*:0]const u8,
    size: core_foundation.CGFloat,
    textEncoding: TextEncoding,
) callconv(.C) void;
pub const contextSelectFont = CGContextSelectFont;

extern "CoreGraphics" fn CGContextShowText(c: ContextRef, string: [*:0]const u8, length: objc.size_t) callconv(.C) void;
pub const contextShowText = CGContextShowText;

extern "CoreGraphics" fn CGContextShowTextAtPoint(
    c: ContextRef,
    x: core_foundation.CGFloat,
    y: core_foundation.CGFloat,
    string: [*:0]const u8,
    length: objc.size_t,
) callconv(.C) void;
pub const contextShowTextAtPoint = CGContextShowTextAtPoint;

extern "CoreGraphics" fn CGContextShowGlyphs(c: ContextRef, g: ?*const Glyph, count: objc.size_t) callconv(.C) void;
pub const contextShowGlyphs = CGContextShowGlyphs;

extern "CoreGraphics" fn CGContextShowGlyphsAtPoint(
    c: ContextRef,
    x: core_foundation.CGFloat,
    y: core_foundation.CGFloat,
    glyphs: ?*const Glyph,
    count: objc.size_t,
) callconv(.C) void;
pub const contextShowGlyphsAtPoint = CGContextShowGlyphsAtPoint;

extern "CoreGraphics" fn CGContextShowGlyphsWithAdvances(
    c: ContextRef,
    glyphs: ?*const Glyph,
    advances: ?*const core_foundation.CGSize,
    count: objc.size_t,
) callconv(.C) void;
pub const contextShowGlyphsWithAdvances = CGContextShowGlyphsWithAdvances;

extern "CoreGraphics" fn CGContextDrawPDFDocument(
    c: ContextRef,
    rect: core_foundation.CGRect,
    document: PDFDocumentRef,
    page: i32,
) callconv(.C) void;
pub const contextDrawPDFDocument = CGContextDrawPDFDocument;

pub const BitmapContextReleaseDataCallback = ?*const fn (?*anyopaque, ?*anyopaque) callconv(.C) void;

extern "CoreGraphics" fn CGBitmapContextCreateWithData(
    data: ?*anyopaque,
    width: objc.size_t,
    height: objc.size_t,
    bitsPerComponent: objc.size_t,
    bytesPerRow: objc.size_t,
    space: ColorSpaceRef,
    bitmapInfo: objc.uint32_t,
    releaseCallback: BitmapContextReleaseDataCallback,
    releaseInfo: ?*anyopaque,
) callconv(.C) ContextRef;
pub const bitmapContextCreateWithData = CGBitmapContextCreateWithData;

extern "CoreGraphics" fn CGBitmapContextCreate(
    data: ?*anyopaque,
    width: objc.size_t,
    height: objc.size_t,
    bitsPerComponent: objc.size_t,
    bytesPerRow: objc.size_t,
    space: ColorSpaceRef,
    bitmapInfo: objc.uint32_t,
) callconv(.C) ContextRef;
pub const bitmapContextCreate = CGBitmapContextCreate;

extern "CoreGraphics" fn CGBitmapContextGetData(context: ContextRef) callconv(.C) ?*anyopaque;
pub const bitmapContextGetData = CGBitmapContextGetData;

extern "CoreGraphics" fn CGBitmapContextGetWidth(context: ContextRef) callconv(.C) objc.size_t;
pub const bitmapContextGetWidth = CGBitmapContextGetWidth;

extern "CoreGraphics" fn CGBitmapContextGetHeight(context: ContextRef) callconv(.C) objc.size_t;
pub const bitmapContextGetHeight = CGBitmapContextGetHeight;

extern "CoreGraphics" fn CGBitmapContextGetBitsPerComponent(context: ContextRef) callconv(.C) objc.size_t;
pub const bitmapContextGetBitsPerComponent = CGBitmapContextGetBitsPerComponent;

extern "CoreGraphics" fn CGBitmapContextGetBitsPerPixel(context: ContextRef) callconv(.C) objc.size_t;
pub const bitmapContextGetBitsPerPixel = CGBitmapContextGetBitsPerPixel;

extern "CoreGraphics" fn CGBitmapContextGetBytesPerRow(context: ContextRef) callconv(.C) objc.size_t;
pub const bitmapContextGetBytesPerRow = CGBitmapContextGetBytesPerRow;

extern "CoreGraphics" fn CGBitmapContextGetColorSpace(context: ContextRef) callconv(.C) ColorSpaceRef;
pub const bitmapContextGetColorSpace = CGBitmapContextGetColorSpace;

extern "CoreGraphics" fn CGBitmapContextGetAlphaInfo(context: ContextRef) callconv(.C) ImageAlphaInfo;
pub const bitmapContextGetAlphaInfo = CGBitmapContextGetAlphaInfo;

extern "CoreGraphics" fn CGBitmapContextGetBitmapInfo(context: ContextRef) callconv(.C) BitmapInfo;
pub const bitmapContextGetBitmapInfo = CGBitmapContextGetBitmapInfo;

extern "CoreGraphics" fn CGBitmapContextCreateImage(context: ContextRef) callconv(.C) ImageRef;
pub const bitmapContextCreateImage = CGBitmapContextCreateImage;

pub const ColorConversionInfo = extern struct {};

pub const ColorConversionInfoRef = ColorConversionInfo;

extern "CoreGraphics" fn CGColorConversionInfoGetTypeID() callconv(.C) core_foundation.TypeID;
pub const colorConversionInfoGetTypeID = CGColorConversionInfoGetTypeID;

pub const ColorConversionInfoTransformType = objc.uint32_t;
pub const ColorConversionInfoTransformType_TransformFromSpace: objc.uint32_t = 0;
pub const ColorConversionInfoTransformType_TransformToSpace: objc.uint32_t = 1;
pub const ColorConversionInfoTransformType_TransformApplySpace: objc.uint32_t = 2;

extern "CoreGraphics" fn CGColorConversionInfoCreate(src: ColorSpaceRef, dst: ColorSpaceRef) callconv(.C) ColorConversionInfoRef;
pub const colorConversionInfoCreate = CGColorConversionInfoCreate;

extern "CoreGraphics" fn CGColorConversionInfoCreateWithOptions(src: ColorSpaceRef, dst: ColorSpaceRef, options: core_foundation.DictionaryRef) callconv(.C) ColorConversionInfoRef;
pub const colorConversionInfoCreateWithOptions = CGColorConversionInfoCreateWithOptions;

extern "CoreGraphics" fn CGColorConversionInfoCreateFromList(
    options: core_foundation.DictionaryRef,
    ColorSpaceRef,
    ColorConversionInfoTransformType,
    ColorRenderingIntent,
) callconv(.C) ColorConversionInfoRef;
pub const colorConversionInfoCreateFromList = CGColorConversionInfoCreateFromList;

extern "CoreGraphics" fn CGColorConversionInfoCreateFromListWithArguments(
    options: core_foundation.DictionaryRef,
    ColorSpaceRef,
    ColorConversionInfoTransformType,
    ColorRenderingIntent,
    va_list: i32,
) callconv(.C) ColorConversionInfoRef;
pub const colorConversionInfoCreateFromListWithArguments = CGColorConversionInfoCreateFromListWithArguments;

pub const ColorDataFormat = extern struct {
    version: objc.uint32_t,
    colorspace_info: core_foundation.TypeRef,
    bitmap_info: BitmapInfo,
    bits_per_component: objc.size_t,
    bytes_per_row: objc.size_t,
    intent: ColorRenderingIntent,
    decode: core_foundation.CGFloat,
};

extern "CoreGraphics" fn CGConvertColorDataWithFormat() callconv(.C) i32;
pub const convertColorDataWithFormat = CGConvertColorDataWithFormat;

pub const DataConsumer = extern struct {};

pub const DataConsumerRef = DataConsumer;

pub const DataConsumerPutBytesCallback = objc.size_t;

pub const DataConsumerReleaseInfoCallback = ?*const fn (?*anyopaque) callconv(.C) void;

pub const DataConsumerCallbacks = extern struct {
    putBytes: DataConsumerPutBytesCallback,
    releaseConsumer: DataConsumerReleaseInfoCallback,
};

extern "CoreGraphics" fn CGDataConsumerGetTypeID() callconv(.C) core_foundation.TypeID;
pub const dataConsumerGetTypeID = CGDataConsumerGetTypeID;

extern "CoreGraphics" fn CGDataConsumerCreate(info: ?*anyopaque, cbks: ?*const DataConsumerCallbacks) callconv(.C) DataConsumerRef;
pub const dataConsumerCreate = CGDataConsumerCreate;

extern "CoreGraphics" fn CGDataConsumerCreateWithURL(url: core_foundation.URLRef) callconv(.C) DataConsumerRef;
pub const dataConsumerCreateWithURL = CGDataConsumerCreateWithURL;

extern "CoreGraphics" fn CGDataConsumerCreateWithCFData(data: core_foundation.MutableDataRef) callconv(.C) DataConsumerRef;
pub const dataConsumerCreateWithCFData = CGDataConsumerCreateWithCFData;

extern "CoreGraphics" fn CGDataConsumerRetain(consumer: DataConsumerRef) callconv(.C) DataConsumerRef;
pub const dataConsumerRetain = CGDataConsumerRetain;

extern "CoreGraphics" fn CGDataConsumerRelease(consumer: DataConsumerRef) callconv(.C) void;
pub const dataConsumerRelease = CGDataConsumerRelease;

pub const Error = objc.int32_t;
pub const Error_Success: objc.int32_t = 0;
pub const Error_Failure: objc.int32_t = 1000;
pub const Error_IllegalArgument: objc.int32_t = 1001;
pub const Error_InvalidConnection: objc.int32_t = 1002;
pub const Error_InvalidContext: objc.int32_t = 1003;
pub const Error_CannotComplete: objc.int32_t = 1004;
pub const Error_NotImplemented: objc.int32_t = 1006;
pub const Error_RangeCheck: objc.int32_t = 1007;
pub const Error_TypeCheck: objc.int32_t = 1008;
pub const Error_InvalidOperation: objc.int32_t = 1010;
pub const Error_NoneAvailable: objc.int32_t = 1011;

pub const ErrorCallback = ?*const fn () callconv(.C) void;

extern "CoreGraphics" fn CGErrorSetCallback(callback: ErrorCallback) callconv(.C) void;
pub const errorSetCallback = CGErrorSetCallback;

pub const Layer = extern struct {};

pub const LayerRef = Layer;

extern "CoreGraphics" fn CGLayerCreateWithContext(context: ContextRef, size: core_foundation.CGSize, auxiliaryInfo: core_foundation.DictionaryRef) callconv(.C) LayerRef;
pub const layerCreateWithContext = CGLayerCreateWithContext;

extern "CoreGraphics" fn CGLayerRetain(layer: LayerRef) callconv(.C) LayerRef;
pub const layerRetain = CGLayerRetain;

extern "CoreGraphics" fn CGLayerRelease(layer: LayerRef) callconv(.C) void;
pub const layerRelease = CGLayerRelease;

extern "CoreGraphics" fn CGLayerGetSize(layer: LayerRef) callconv(.C) core_foundation.CGSize;
pub const layerGetSize = CGLayerGetSize;

extern "CoreGraphics" fn CGLayerGetContext(layer: LayerRef) callconv(.C) ContextRef;
pub const layerGetContext = CGLayerGetContext;

extern "CoreGraphics" fn CGContextDrawLayerInRect(context: ContextRef, rect: core_foundation.CGRect, layer: LayerRef) callconv(.C) void;
pub const contextDrawLayerInRect = CGContextDrawLayerInRect;

extern "CoreGraphics" fn CGContextDrawLayerAtPoint(context: ContextRef, point: core_foundation.CGPoint, layer: LayerRef) callconv(.C) void;
pub const contextDrawLayerAtPoint = CGContextDrawLayerAtPoint;

extern "CoreGraphics" fn CGLayerGetTypeID() callconv(.C) core_foundation.TypeID;
pub const layerGetTypeID = CGLayerGetTypeID;

pub const PDFContentStream = extern struct {};

pub const PDFContentStreamRef = PDFContentStream;

extern "CoreGraphics" fn CGPDFContentStreamCreateWithPage(page: PDFPageRef) callconv(.C) PDFContentStreamRef;
pub const pdfContentStreamCreateWithPage = CGPDFContentStreamCreateWithPage;

extern "CoreGraphics" fn CGPDFContentStreamCreateWithStream(stream: PDFStreamRef, streamResources: PDFDictionaryRef, parent: PDFContentStreamRef) callconv(.C) PDFContentStreamRef;
pub const pdfContentStreamCreateWithStream = CGPDFContentStreamCreateWithStream;

extern "CoreGraphics" fn CGPDFContentStreamRetain(cs: PDFContentStreamRef) callconv(.C) PDFContentStreamRef;
pub const pdfContentStreamRetain = CGPDFContentStreamRetain;

extern "CoreGraphics" fn CGPDFContentStreamRelease(cs: PDFContentStreamRef) callconv(.C) void;
pub const pdfContentStreamRelease = CGPDFContentStreamRelease;

extern "CoreGraphics" fn CGPDFContentStreamGetStreams(cs: PDFContentStreamRef) callconv(.C) core_foundation.ArrayRef;
pub const pdfContentStreamGetStreams = CGPDFContentStreamGetStreams;

extern "CoreGraphics" fn CGPDFContentStreamGetResource(cs: PDFContentStreamRef, category: [*:0]const u8, name: [*:0]const u8) callconv(.C) PDFObjectRef;
pub const pdfContentStreamGetResource = CGPDFContentStreamGetResource;

extern "CoreGraphics" fn CGPDFContextCreate(consumer: DataConsumerRef, mediaBox: ?*const core_foundation.CGRect, auxiliaryInfo: core_foundation.DictionaryRef) callconv(.C) ContextRef;
pub const pdfContextCreate = CGPDFContextCreate;

extern "CoreGraphics" fn CGPDFContextCreateWithURL(url: core_foundation.URLRef, mediaBox: ?*const core_foundation.CGRect, auxiliaryInfo: core_foundation.DictionaryRef) callconv(.C) ContextRef;
pub const pdfContextCreateWithURL = CGPDFContextCreateWithURL;

extern "CoreGraphics" fn CGPDFContextClose(context: ContextRef) callconv(.C) void;
pub const pdfContextClose = CGPDFContextClose;

extern "CoreGraphics" fn CGPDFContextBeginPage(context: ContextRef, pageInfo: core_foundation.DictionaryRef) callconv(.C) void;
pub const pdfContextBeginPage = CGPDFContextBeginPage;

extern "CoreGraphics" fn CGPDFContextEndPage(context: ContextRef) callconv(.C) void;
pub const pdfContextEndPage = CGPDFContextEndPage;

extern "CoreGraphics" fn CGPDFContextAddDocumentMetadata(context: ContextRef, metadata: core_foundation.DataRef) callconv(.C) void;
pub const pdfContextAddDocumentMetadata = CGPDFContextAddDocumentMetadata;

extern "CoreGraphics" fn CGPDFContextSetParentTree(context: ContextRef, parentTreeDictionary: PDFDictionaryRef) callconv(.C) void;
pub const pdfContextSetParentTree = CGPDFContextSetParentTree;

extern "CoreGraphics" fn CGPDFContextSetIDTree(context: ContextRef, IDTreeDictionary: PDFDictionaryRef) callconv(.C) void;
pub const pdfContextSetIDTree = CGPDFContextSetIDTree;

extern "CoreGraphics" fn CGPDFContextSetPageTagStructureTree(context: ContextRef, pageTagStructureTreeDictionary: core_foundation.DictionaryRef) callconv(.C) void;
pub const pdfContextSetPageTagStructureTree = CGPDFContextSetPageTagStructureTree;

extern "CoreGraphics" fn CGPDFContextSetURLForRect(context: ContextRef, url: core_foundation.URLRef, rect: core_foundation.CGRect) callconv(.C) void;
pub const pdfContextSetURLForRect = CGPDFContextSetURLForRect;

extern "CoreGraphics" fn CGPDFContextAddDestinationAtPoint(context: ContextRef, name: core_foundation.StringRef, point: core_foundation.CGPoint) callconv(.C) void;
pub const pdfContextAddDestinationAtPoint = CGPDFContextAddDestinationAtPoint;

extern "CoreGraphics" fn CGPDFContextSetDestinationForRect(context: ContextRef, name: core_foundation.StringRef, rect: core_foundation.CGRect) callconv(.C) void;
pub const pdfContextSetDestinationForRect = CGPDFContextSetDestinationForRect;

extern "CoreGraphics" fn CGPDFContextSetOutline(context: ContextRef, outline: core_foundation.DictionaryRef) callconv(.C) void;
pub const pdfContextSetOutline = CGPDFContextSetOutline;

pub const PDFTagType = objc.int32_t;
pub const PDFTagType_Document: objc.int32_t = 100;
pub const PDFTagType_Part: objc.int32_t = 101;
pub const PDFTagType_Art: objc.int32_t = 102;
pub const PDFTagType_Section: objc.int32_t = 103;
pub const PDFTagType_Div: objc.int32_t = 104;
pub const PDFTagType_BlockQuote: objc.int32_t = 105;
pub const PDFTagType_Caption: objc.int32_t = 106;
pub const PDFTagType_TOC: objc.int32_t = 107;
pub const PDFTagType_TOCI: objc.int32_t = 108;
pub const PDFTagType_Index: objc.int32_t = 109;
pub const PDFTagType_NonStructure: objc.int32_t = 110;
pub const PDFTagType_Private: objc.int32_t = 111;
pub const PDFTagType_Paragraph: objc.int32_t = 200;
pub const PDFTagType_Header: objc.int32_t = 201;
pub const PDFTagType_Header1: objc.int32_t = 202;
pub const PDFTagType_Header2: objc.int32_t = 203;
pub const PDFTagType_Header3: objc.int32_t = 204;
pub const PDFTagType_Header4: objc.int32_t = 205;
pub const PDFTagType_Header5: objc.int32_t = 206;
pub const PDFTagType_Header6: objc.int32_t = 207;
pub const PDFTagType_List: objc.int32_t = 300;
pub const PDFTagType_ListItem: objc.int32_t = 301;
pub const PDFTagType_Label: objc.int32_t = 302;
pub const PDFTagType_ListBody: objc.int32_t = 303;
pub const PDFTagType_Table: objc.int32_t = 400;
pub const PDFTagType_TableRow: objc.int32_t = 401;
pub const PDFTagType_TableHeaderCell: objc.int32_t = 402;
pub const PDFTagType_TableDataCell: objc.int32_t = 403;
pub const PDFTagType_TableHeader: objc.int32_t = 404;
pub const PDFTagType_TableBody: objc.int32_t = 405;
pub const PDFTagType_TableFooter: objc.int32_t = 406;
pub const PDFTagType_Span: objc.int32_t = 500;
pub const PDFTagType_Quote: objc.int32_t = 501;
pub const PDFTagType_Note: objc.int32_t = 502;
pub const PDFTagType_Reference: objc.int32_t = 503;
pub const PDFTagType_Bibliography: objc.int32_t = 504;
pub const PDFTagType_Code: objc.int32_t = 505;
pub const PDFTagType_Link: objc.int32_t = 506;
pub const PDFTagType_Annotation: objc.int32_t = 507;
pub const PDFTagType_Ruby: objc.int32_t = 600;
pub const PDFTagType_RubyBaseText: objc.int32_t = 601;
pub const PDFTagType_RubyAnnotationText: objc.int32_t = 602;
pub const PDFTagType_RubyPunctuation: objc.int32_t = 603;
pub const PDFTagType_Warichu: objc.int32_t = 604;
pub const PDFTagType_WarichuText: objc.int32_t = 605;
pub const PDFTagType_WarichuPunctiation: objc.int32_t = 606;
pub const PDFTagType_Figure: objc.int32_t = 700;
pub const PDFTagType_Formula: objc.int32_t = 701;
pub const PDFTagType_Form: objc.int32_t = 702;
pub const PDFTagType_Object: objc.int32_t = 800;

extern "CoreGraphics" fn CGPDFTagTypeGetName(tagType: PDFTagType) callconv(.C) [*:0]const u8;
pub const pdfTagTypeGetName = CGPDFTagTypeGetName;

pub const PDFTagProperty = core_foundation.StringRef;

extern "CoreGraphics" fn CGPDFContextBeginTag(context: ContextRef, tagType: PDFTagType, tagProperties: core_foundation.DictionaryRef) callconv(.C) void;
pub const pdfContextBeginTag = CGPDFContextBeginTag;

extern "CoreGraphics" fn CGPDFContextEndTag(context: ContextRef) callconv(.C) void;
pub const pdfContextEndTag = CGPDFContextEndTag;

pub const PDFOperatorTable = extern struct {};

pub const PDFOperatorTableRef = PDFOperatorTable;

pub const PDFScanner = extern struct {};

pub const PDFScannerRef = PDFScanner;

extern "CoreGraphics" fn CGPDFScannerCreate(cs: PDFContentStreamRef, table: PDFOperatorTableRef, info: ?*anyopaque) callconv(.C) PDFScannerRef;
pub const pdfScannerCreate = CGPDFScannerCreate;

extern "CoreGraphics" fn CGPDFScannerRetain(scanner: PDFScannerRef) callconv(.C) PDFScannerRef;
pub const pdfScannerRetain = CGPDFScannerRetain;

extern "CoreGraphics" fn CGPDFScannerRelease(scanner: PDFScannerRef) callconv(.C) void;
pub const pdfScannerRelease = CGPDFScannerRelease;

extern "CoreGraphics" fn CGPDFScannerScan() callconv(.C) i32;
pub const pdfScannerScan = CGPDFScannerScan;

extern "CoreGraphics" fn CGPDFScannerGetContentStream(scanner: PDFScannerRef) callconv(.C) PDFContentStreamRef;
pub const pdfScannerGetContentStream = CGPDFScannerGetContentStream;

extern "CoreGraphics" fn CGPDFScannerPopObject() callconv(.C) i32;
pub const pdfScannerPopObject = CGPDFScannerPopObject;

extern "CoreGraphics" fn CGPDFScannerPopBoolean() callconv(.C) i32;
pub const pdfScannerPopBoolean = CGPDFScannerPopBoolean;

extern "CoreGraphics" fn CGPDFScannerPopInteger() callconv(.C) i32;
pub const pdfScannerPopInteger = CGPDFScannerPopInteger;

extern "CoreGraphics" fn CGPDFScannerPopNumber() callconv(.C) i32;
pub const pdfScannerPopNumber = CGPDFScannerPopNumber;

extern "CoreGraphics" fn CGPDFScannerPopName() callconv(.C) i32;
pub const pdfScannerPopName = CGPDFScannerPopName;

extern "CoreGraphics" fn CGPDFScannerPopString() callconv(.C) i32;
pub const pdfScannerPopString = CGPDFScannerPopString;

extern "CoreGraphics" fn CGPDFScannerPopArray() callconv(.C) i32;
pub const pdfScannerPopArray = CGPDFScannerPopArray;

extern "CoreGraphics" fn CGPDFScannerPopDictionary() callconv(.C) i32;
pub const pdfScannerPopDictionary = CGPDFScannerPopDictionary;

extern "CoreGraphics" fn CGPDFScannerPopStream() callconv(.C) i32;
pub const pdfScannerPopStream = CGPDFScannerPopStream;

extern "CoreGraphics" fn CGPDFScannerStop(s: PDFScannerRef) callconv(.C) void;
pub const pdfScannerStop = CGPDFScannerStop;

pub const PDFOperatorCallback = ?*const fn (PDFScannerRef, ?*anyopaque) callconv(.C) void;

extern "CoreGraphics" fn CGPDFOperatorTableCreate() callconv(.C) PDFOperatorTableRef;
pub const pdfOperatorTableCreate = CGPDFOperatorTableCreate;

extern "CoreGraphics" fn CGPDFOperatorTableRetain(table: PDFOperatorTableRef) callconv(.C) PDFOperatorTableRef;
pub const pdfOperatorTableRetain = CGPDFOperatorTableRetain;

extern "CoreGraphics" fn CGPDFOperatorTableRelease(table: PDFOperatorTableRef) callconv(.C) void;
pub const pdfOperatorTableRelease = CGPDFOperatorTableRelease;

extern "CoreGraphics" fn CGPDFOperatorTableSetCallback(table: PDFOperatorTableRef, name: [*:0]const u8, callback: PDFOperatorCallback) callconv(.C) void;
pub const pdfOperatorTableSetCallback = CGPDFOperatorTableSetCallback;

pub const WindowID = objc.uint32_t;

pub const WindowSharingType = objc.uint32_t;
pub const WindowSharingType_None: objc.uint32_t = 0;
pub const WindowSharingType_ReadOnly: objc.uint32_t = 1;
pub const WindowSharingType_ReadWrite: objc.uint32_t = 2;

pub const WindowBackingType = objc.uint32_t;
pub const WindowBackingType_BackingStoreRetained: objc.uint32_t = 0;
pub const WindowBackingType_BackingStoreNonretained: objc.uint32_t = 1;
pub const WindowBackingType_BackingStoreBuffered: objc.uint32_t = 2;

pub const WindowListOption = objc.uint32_t;
pub const WindowListOption_All: objc.uint32_t = 0;
pub const WindowListOption_OnScreenOnly: objc.uint32_t = 1;
pub const WindowListOption_OnScreenAboveWindow: objc.uint32_t = 2;
pub const WindowListOption_OnScreenBelowWindow: objc.uint32_t = 4;
pub const WindowListOption_IncludingWindow: objc.uint32_t = 8;
pub const WindowListOption_ExcludeDesktopElements: objc.uint32_t = 16;

extern "CoreGraphics" fn CGWindowListCopyWindowInfo(option: WindowListOption, relativeToWindow: WindowID) callconv(.C) core_foundation.ArrayRef;
pub const windowListCopyWindowInfo = CGWindowListCopyWindowInfo;

extern "CoreGraphics" fn CGWindowListCreate(option: WindowListOption, relativeToWindow: WindowID) callconv(.C) core_foundation.ArrayRef;
pub const windowListCreate = CGWindowListCreate;

extern "CoreGraphics" fn CGWindowListCreateDescriptionFromArray(windowArray: core_foundation.ArrayRef) callconv(.C) core_foundation.ArrayRef;
pub const windowListCreateDescriptionFromArray = CGWindowListCreateDescriptionFromArray;

pub const WindowImageOption = objc.uint32_t;
pub const WindowImageOption_Default: objc.uint32_t = 0;
pub const WindowImageOption_BoundsIgnoreFraming: objc.uint32_t = 1;
pub const WindowImageOption_ShouldBeOpaque: objc.uint32_t = 2;
pub const WindowImageOption_OnlyShadows: objc.uint32_t = 4;
pub const WindowImageOption_BestResolution: objc.uint32_t = 8;
pub const WindowImageOption_NominalResolution: objc.uint32_t = 16;

extern "CoreGraphics" fn CGWindowListCreateImage(
    screenBounds: core_foundation.CGRect,
    listOption: WindowListOption,
    windowID: WindowID,
    imageOption: WindowImageOption,
) callconv(.C) ImageRef;
pub const windowListCreateImage = CGWindowListCreateImage;

extern "CoreGraphics" fn CGWindowListCreateImageFromArray(screenBounds: core_foundation.CGRect, windowArray: core_foundation.ArrayRef, imageOption: WindowImageOption) callconv(.C) ImageRef;
pub const windowListCreateImageFromArray = CGWindowListCreateImageFromArray;

extern "CoreGraphics" fn CGPreflightScreenCaptureAccess() callconv(.C) i32;
pub const preflightScreenCaptureAccess = CGPreflightScreenCaptureAccess;

extern "CoreGraphics" fn CGRequestScreenCaptureAccess() callconv(.C) i32;
pub const requestScreenCaptureAccess = CGRequestScreenCaptureAccess;

pub const WindowLevelKey = objc.int32_t;
pub const WindowLevelKey_BaseWindowLevelKey: objc.int32_t = 0;
pub const WindowLevelKey_MinimumWindowLevelKey: objc.int32_t = 1;
pub const WindowLevelKey_DesktopWindowLevelKey: objc.int32_t = 2;
pub const WindowLevelKey_BackstopMenuLevelKey: objc.int32_t = 3;
pub const WindowLevelKey_NormalWindowLevelKey: objc.int32_t = 4;
pub const WindowLevelKey_FloatingWindowLevelKey: objc.int32_t = 5;
pub const WindowLevelKey_TornOffMenuWindowLevelKey: objc.int32_t = 6;
pub const WindowLevelKey_DockWindowLevelKey: objc.int32_t = 7;
pub const WindowLevelKey_MainMenuWindowLevelKey: objc.int32_t = 8;
pub const WindowLevelKey_StatusWindowLevelKey: objc.int32_t = 9;
pub const WindowLevelKey_ModalPanelWindowLevelKey: objc.int32_t = 10;
pub const WindowLevelKey_PopUpMenuWindowLevelKey: objc.int32_t = 11;
pub const WindowLevelKey_DraggingWindowLevelKey: objc.int32_t = 12;
pub const WindowLevelKey_ScreenSaverWindowLevelKey: objc.int32_t = 13;
pub const WindowLevelKey_MaximumWindowLevelKey: objc.int32_t = 14;
pub const WindowLevelKey_OverlayWindowLevelKey: objc.int32_t = 15;
pub const WindowLevelKey_HelpWindowLevelKey: objc.int32_t = 16;
pub const WindowLevelKey_UtilityWindowLevelKey: objc.int32_t = 17;
pub const WindowLevelKey_DesktopIconWindowLevelKey: objc.int32_t = 18;
pub const WindowLevelKey_CursorWindowLevelKey: objc.int32_t = 19;
pub const WindowLevelKey_AssistiveTechHighWindowLevelKey: objc.int32_t = 20;
pub const WindowLevelKey_NumberOfWindowLevelKeys: objc.int32_t = 21;

pub const WindowLevel = objc.int32_t;

extern "CoreGraphics" fn CGWindowLevelForKey(key: WindowLevelKey) callconv(.C) WindowLevel;
pub const windowLevelForKey = CGWindowLevelForKey;

pub const DirectDisplayID = objc.uint32_t;

pub const OpenGLDisplayMask = objc.uint32_t;

pub const RefreshRate = f64;

pub const DisplayMode = extern struct {};

pub const DisplayModeRef = DisplayMode;

extern "CoreGraphics" fn CGMainDisplayID() callconv(.C) DirectDisplayID;
pub const mainDisplayID = CGMainDisplayID;

extern "CoreGraphics" fn CGGetDisplaysWithPoint(
    point: core_foundation.CGPoint,
    maxDisplays: objc.uint32_t,
    displays: ?*DirectDisplayID,
    matchingDisplayCount: ?*objc.uint32_t,
) callconv(.C) Error;
pub const getDisplaysWithPoint = CGGetDisplaysWithPoint;

extern "CoreGraphics" fn CGGetDisplaysWithRect(
    rect: core_foundation.CGRect,
    maxDisplays: objc.uint32_t,
    displays: ?*DirectDisplayID,
    matchingDisplayCount: ?*objc.uint32_t,
) callconv(.C) Error;
pub const getDisplaysWithRect = CGGetDisplaysWithRect;

extern "CoreGraphics" fn CGGetDisplaysWithOpenGLDisplayMask(
    mask: OpenGLDisplayMask,
    maxDisplays: objc.uint32_t,
    displays: ?*DirectDisplayID,
    matchingDisplayCount: ?*objc.uint32_t,
) callconv(.C) Error;
pub const getDisplaysWithOpenGLDisplayMask = CGGetDisplaysWithOpenGLDisplayMask;

extern "CoreGraphics" fn CGGetActiveDisplayList(maxDisplays: objc.uint32_t, activeDisplays: ?*DirectDisplayID, displayCount: ?*objc.uint32_t) callconv(.C) Error;
pub const getActiveDisplayList = CGGetActiveDisplayList;

extern "CoreGraphics" fn CGGetOnlineDisplayList(maxDisplays: objc.uint32_t, onlineDisplays: ?*DirectDisplayID, displayCount: ?*objc.uint32_t) callconv(.C) Error;
pub const getOnlineDisplayList = CGGetOnlineDisplayList;

extern "CoreGraphics" fn CGDisplayIDToOpenGLDisplayMask(display: DirectDisplayID) callconv(.C) OpenGLDisplayMask;
pub const displayIDToOpenGLDisplayMask = CGDisplayIDToOpenGLDisplayMask;

extern "CoreGraphics" fn CGOpenGLDisplayMaskToDisplayID(mask: OpenGLDisplayMask) callconv(.C) DirectDisplayID;
pub const openGLDisplayMaskToDisplayID = CGOpenGLDisplayMaskToDisplayID;

extern "CoreGraphics" fn CGDisplayBounds(display: DirectDisplayID) callconv(.C) core_foundation.CGRect;
pub const displayBounds = CGDisplayBounds;

extern "CoreGraphics" fn CGDisplayPixelsWide(display: DirectDisplayID) callconv(.C) objc.size_t;
pub const displayPixelsWide = CGDisplayPixelsWide;

extern "CoreGraphics" fn CGDisplayPixelsHigh(display: DirectDisplayID) callconv(.C) objc.size_t;
pub const displayPixelsHigh = CGDisplayPixelsHigh;

extern "CoreGraphics" fn CGDisplayCopyAllDisplayModes(display: DirectDisplayID, options: core_foundation.DictionaryRef) callconv(.C) core_foundation.ArrayRef;
pub const displayCopyAllDisplayModes = CGDisplayCopyAllDisplayModes;

extern "CoreGraphics" fn CGDisplayCopyDisplayMode(display: DirectDisplayID) callconv(.C) DisplayModeRef;
pub const displayCopyDisplayMode = CGDisplayCopyDisplayMode;

extern "CoreGraphics" fn CGDisplaySetDisplayMode(display: DirectDisplayID, mode: DisplayModeRef, options: core_foundation.DictionaryRef) callconv(.C) Error;
pub const displaySetDisplayMode = CGDisplaySetDisplayMode;

extern "CoreGraphics" fn CGDisplayModeGetWidth(mode: DisplayModeRef) callconv(.C) objc.size_t;
pub const displayModeGetWidth = CGDisplayModeGetWidth;

extern "CoreGraphics" fn CGDisplayModeGetHeight(mode: DisplayModeRef) callconv(.C) objc.size_t;
pub const displayModeGetHeight = CGDisplayModeGetHeight;

extern "CoreGraphics" fn CGDisplayModeCopyPixelEncoding(mode: DisplayModeRef) callconv(.C) core_foundation.StringRef;
pub const displayModeCopyPixelEncoding = CGDisplayModeCopyPixelEncoding;

extern "CoreGraphics" fn CGDisplayModeGetRefreshRate(mode: DisplayModeRef) callconv(.C) f64;
pub const displayModeGetRefreshRate = CGDisplayModeGetRefreshRate;

extern "CoreGraphics" fn CGDisplayModeGetIOFlags(mode: DisplayModeRef) callconv(.C) objc.uint32_t;
pub const displayModeGetIOFlags = CGDisplayModeGetIOFlags;

extern "CoreGraphics" fn CGDisplayModeGetIODisplayModeID(mode: DisplayModeRef) callconv(.C) objc.int32_t;
pub const displayModeGetIODisplayModeID = CGDisplayModeGetIODisplayModeID;

extern "CoreGraphics" fn CGDisplayModeIsUsableForDesktopGUI() callconv(.C) i32;
pub const displayModeIsUsableForDesktopGUI = CGDisplayModeIsUsableForDesktopGUI;

extern "CoreGraphics" fn CGDisplayModeGetTypeID() callconv(.C) core_foundation.TypeID;
pub const displayModeGetTypeID = CGDisplayModeGetTypeID;

extern "CoreGraphics" fn CGDisplayModeRetain(mode: DisplayModeRef) callconv(.C) DisplayModeRef;
pub const displayModeRetain = CGDisplayModeRetain;

extern "CoreGraphics" fn CGDisplayModeRelease(mode: DisplayModeRef) callconv(.C) void;
pub const displayModeRelease = CGDisplayModeRelease;

extern "CoreGraphics" fn CGDisplayModeGetPixelWidth(mode: DisplayModeRef) callconv(.C) objc.size_t;
pub const displayModeGetPixelWidth = CGDisplayModeGetPixelWidth;

extern "CoreGraphics" fn CGDisplayModeGetPixelHeight(mode: DisplayModeRef) callconv(.C) objc.size_t;
pub const displayModeGetPixelHeight = CGDisplayModeGetPixelHeight;

pub const GammaValue = f32;

extern "CoreGraphics" fn CGSetDisplayTransferByFormula(
    display: DirectDisplayID,
    redMin: GammaValue,
    redMax: GammaValue,
    redGamma: GammaValue,
    greenMin: GammaValue,
    greenMax: GammaValue,
    greenGamma: GammaValue,
    blueMin: GammaValue,
    blueMax: GammaValue,
    blueGamma: GammaValue,
) callconv(.C) Error;
pub const setDisplayTransferByFormula = CGSetDisplayTransferByFormula;

extern "CoreGraphics" fn CGGetDisplayTransferByFormula(
    display: DirectDisplayID,
    redMin: ?*GammaValue,
    redMax: ?*GammaValue,
    redGamma: ?*GammaValue,
    greenMin: ?*GammaValue,
    greenMax: ?*GammaValue,
    greenGamma: ?*GammaValue,
    blueMin: ?*GammaValue,
    blueMax: ?*GammaValue,
    blueGamma: ?*GammaValue,
) callconv(.C) Error;
pub const getDisplayTransferByFormula = CGGetDisplayTransferByFormula;

extern "CoreGraphics" fn CGDisplayGammaTableCapacity(display: DirectDisplayID) callconv(.C) objc.uint32_t;
pub const displayGammaTableCapacity = CGDisplayGammaTableCapacity;

extern "CoreGraphics" fn CGSetDisplayTransferByTable(
    display: DirectDisplayID,
    tableSize: objc.uint32_t,
    redTable: ?*const GammaValue,
    greenTable: ?*const GammaValue,
    blueTable: ?*const GammaValue,
) callconv(.C) Error;
pub const setDisplayTransferByTable = CGSetDisplayTransferByTable;

extern "CoreGraphics" fn CGGetDisplayTransferByTable(
    display: DirectDisplayID,
    capacity: objc.uint32_t,
    redTable: ?*GammaValue,
    greenTable: ?*GammaValue,
    blueTable: ?*GammaValue,
    sampleCount: ?*objc.uint32_t,
) callconv(.C) Error;
pub const getDisplayTransferByTable = CGGetDisplayTransferByTable;

extern "CoreGraphics" fn CGSetDisplayTransferByByteTable(
    display: DirectDisplayID,
    tableSize: objc.uint32_t,
    redTable: ?*const objc.uint8_t,
    greenTable: ?*const objc.uint8_t,
    blueTable: ?*const objc.uint8_t,
) callconv(.C) Error;
pub const setDisplayTransferByByteTable = CGSetDisplayTransferByByteTable;

extern "CoreGraphics" fn CGDisplayRestoreColorSyncSettings() callconv(.C) void;
pub const displayRestoreColorSyncSettings = CGDisplayRestoreColorSyncSettings;

pub const CaptureOptions = objc.uint32_t;
pub const CaptureOptions_NoOptions: objc.uint32_t = 0;
pub const CaptureOptions_NoFill: objc.uint32_t = 1;

extern "CoreGraphics" fn CGDisplayIsCaptured(display: DirectDisplayID) callconv(.C) objc.boolean_t;
pub const displayIsCaptured = CGDisplayIsCaptured;

extern "CoreGraphics" fn CGDisplayCapture(display: DirectDisplayID) callconv(.C) Error;
pub const displayCapture = CGDisplayCapture;

extern "CoreGraphics" fn CGDisplayCaptureWithOptions(display: DirectDisplayID, options: CaptureOptions) callconv(.C) Error;
pub const displayCaptureWithOptions = CGDisplayCaptureWithOptions;

extern "CoreGraphics" fn CGDisplayRelease(display: DirectDisplayID) callconv(.C) Error;
pub const displayRelease = CGDisplayRelease;

extern "CoreGraphics" fn CGCaptureAllDisplays() callconv(.C) Error;
pub const captureAllDisplays = CGCaptureAllDisplays;

extern "CoreGraphics" fn CGCaptureAllDisplaysWithOptions(options: CaptureOptions) callconv(.C) Error;
pub const captureAllDisplaysWithOptions = CGCaptureAllDisplaysWithOptions;

extern "CoreGraphics" fn CGReleaseAllDisplays() callconv(.C) Error;
pub const releaseAllDisplays = CGReleaseAllDisplays;

extern "CoreGraphics" fn CGShieldingWindowID(display: DirectDisplayID) callconv(.C) WindowID;
pub const shieldingWindowID = CGShieldingWindowID;

extern "CoreGraphics" fn CGShieldingWindowLevel() callconv(.C) WindowLevel;
pub const shieldingWindowLevel = CGShieldingWindowLevel;

extern "CoreGraphics" fn CGDisplayCreateImage(displayID: DirectDisplayID) callconv(.C) ImageRef;
pub const displayCreateImage = CGDisplayCreateImage;

extern "CoreGraphics" fn CGDisplayCreateImageForRect(display: DirectDisplayID, rect: core_foundation.CGRect) callconv(.C) ImageRef;
pub const displayCreateImageForRect = CGDisplayCreateImageForRect;

extern "CoreGraphics" fn CGDisplayHideCursor(display: DirectDisplayID) callconv(.C) Error;
pub const displayHideCursor = CGDisplayHideCursor;

extern "CoreGraphics" fn CGDisplayShowCursor(display: DirectDisplayID) callconv(.C) Error;
pub const displayShowCursor = CGDisplayShowCursor;

extern "CoreGraphics" fn CGDisplayMoveCursorToPoint(display: DirectDisplayID, point: core_foundation.CGPoint) callconv(.C) Error;
pub const displayMoveCursorToPoint = CGDisplayMoveCursorToPoint;

extern "CoreGraphics" fn CGGetLastMouseDelta(deltaX: ?*objc.int32_t, deltaY: ?*objc.int32_t) callconv(.C) void;
pub const getLastMouseDelta = CGGetLastMouseDelta;

extern "CoreGraphics" fn CGDisplayGetDrawingContext(display: DirectDisplayID) callconv(.C) ContextRef;
pub const displayGetDrawingContext = CGDisplayGetDrawingContext;

pub const DisplayCount = objc.uint32_t;

pub const DisplayErr = Error;

extern "CoreGraphics" fn CGDisplayAvailableModes(dsp: DirectDisplayID) callconv(.C) core_foundation.ArrayRef;
pub const displayAvailableModes = CGDisplayAvailableModes;

extern "CoreGraphics" fn CGDisplayBestModeForParameters(
    display: DirectDisplayID,
    bitsPerPixel: objc.size_t,
    width: objc.size_t,
    height: objc.size_t,
    exactMatch: ?*objc.boolean_t,
) callconv(.C) core_foundation.DictionaryRef;
pub const displayBestModeForParameters = CGDisplayBestModeForParameters;

extern "CoreGraphics" fn CGDisplayBestModeForParametersAndRefreshRate(
    display: DirectDisplayID,
    bitsPerPixel: objc.size_t,
    width: objc.size_t,
    height: objc.size_t,
    refreshRate: RefreshRate,
    exactMatch: ?*objc.boolean_t,
) callconv(.C) core_foundation.DictionaryRef;
pub const displayBestModeForParametersAndRefreshRate = CGDisplayBestModeForParametersAndRefreshRate;

extern "CoreGraphics" fn CGDisplayCurrentMode(display: DirectDisplayID) callconv(.C) core_foundation.DictionaryRef;
pub const displayCurrentMode = CGDisplayCurrentMode;

extern "CoreGraphics" fn CGDisplaySwitchToMode(display: DirectDisplayID, mode: core_foundation.DictionaryRef) callconv(.C) Error;
pub const displaySwitchToMode = CGDisplaySwitchToMode;

pub const DeviceColor = extern struct {
    red: f32,
    green: f32,
    blue: f32,
};

pub const _CGDisplayConfigRef = extern struct {};

pub const DisplayConfigRef = _CGDisplayConfigRef;

extern "CoreGraphics" fn CGBeginDisplayConfiguration(config: ?*DisplayConfigRef) callconv(.C) Error;
pub const beginDisplayConfiguration = CGBeginDisplayConfiguration;

extern "CoreGraphics" fn CGConfigureDisplayOrigin(
    config: DisplayConfigRef,
    display: DirectDisplayID,
    x: objc.int32_t,
    y: objc.int32_t,
) callconv(.C) Error;
pub const configureDisplayOrigin = CGConfigureDisplayOrigin;

extern "CoreGraphics" fn CGConfigureDisplayWithDisplayMode(
    config: DisplayConfigRef,
    display: DirectDisplayID,
    mode: DisplayModeRef,
    options: core_foundation.DictionaryRef,
) callconv(.C) Error;
pub const configureDisplayWithDisplayMode = CGConfigureDisplayWithDisplayMode;

extern "CoreGraphics" fn CGConfigureDisplayStereoOperation(
    config: DisplayConfigRef,
    display: DirectDisplayID,
    stereo: objc.boolean_t,
    forceBlueLine: objc.boolean_t,
) callconv(.C) Error;
pub const configureDisplayStereoOperation = CGConfigureDisplayStereoOperation;

extern "CoreGraphics" fn CGConfigureDisplayMirrorOfDisplay(config: DisplayConfigRef, display: DirectDisplayID, master: DirectDisplayID) callconv(.C) Error;
pub const configureDisplayMirrorOfDisplay = CGConfigureDisplayMirrorOfDisplay;

extern "CoreGraphics" fn CGCancelDisplayConfiguration(config: DisplayConfigRef) callconv(.C) Error;
pub const cancelDisplayConfiguration = CGCancelDisplayConfiguration;

pub const ConfigureOption = objc.uint32_t;
pub const ConfigureOption_ForAppOnly: objc.uint32_t = 0;
pub const ConfigureOption_ForSession: objc.uint32_t = 1;
pub const ConfigureOption_Permanently: objc.uint32_t = 2;

extern "CoreGraphics" fn CGCompleteDisplayConfiguration(config: DisplayConfigRef, option: ConfigureOption) callconv(.C) Error;
pub const completeDisplayConfiguration = CGCompleteDisplayConfiguration;

extern "CoreGraphics" fn CGRestorePermanentDisplayConfiguration() callconv(.C) void;
pub const restorePermanentDisplayConfiguration = CGRestorePermanentDisplayConfiguration;

pub const DisplayChangeSummaryFlags = objc.uint32_t;
pub const DisplayChangeSummaryFlags_BeginConfigurationFlag: objc.uint32_t = 1;
pub const DisplayChangeSummaryFlags_MovedFlag: objc.uint32_t = 2;
pub const DisplayChangeSummaryFlags_SetMainFlag: objc.uint32_t = 4;
pub const DisplayChangeSummaryFlags_SetModeFlag: objc.uint32_t = 8;
pub const DisplayChangeSummaryFlags_AddFlag: objc.uint32_t = 16;
pub const DisplayChangeSummaryFlags_RemoveFlag: objc.uint32_t = 32;
pub const DisplayChangeSummaryFlags_EnabledFlag: objc.uint32_t = 256;
pub const DisplayChangeSummaryFlags_DisabledFlag: objc.uint32_t = 512;
pub const DisplayChangeSummaryFlags_MirrorFlag: objc.uint32_t = 1024;
pub const DisplayChangeSummaryFlags_UnMirrorFlag: objc.uint32_t = 2048;
pub const DisplayChangeSummaryFlags_DesktopShapeChangedFlag: objc.uint32_t = 4096;

pub const DisplayReconfigurationCallBack = ?*const fn (DirectDisplayID, DisplayChangeSummaryFlags, ?*anyopaque) callconv(.C) void;

extern "CoreGraphics" fn CGDisplayRegisterReconfigurationCallback(callback: DisplayReconfigurationCallBack, userInfo: ?*anyopaque) callconv(.C) Error;
pub const displayRegisterReconfigurationCallback = CGDisplayRegisterReconfigurationCallback;

extern "CoreGraphics" fn CGDisplayRemoveReconfigurationCallback(callback: DisplayReconfigurationCallBack, userInfo: ?*anyopaque) callconv(.C) Error;
pub const displayRemoveReconfigurationCallback = CGDisplayRemoveReconfigurationCallback;

extern "CoreGraphics" fn CGDisplaySetStereoOperation(
    display: DirectDisplayID,
    stereo: objc.boolean_t,
    forceBlueLine: objc.boolean_t,
    option: ConfigureOption,
) callconv(.C) Error;
pub const displaySetStereoOperation = CGDisplaySetStereoOperation;

extern "CoreGraphics" fn CGDisplayIsActive(display: DirectDisplayID) callconv(.C) objc.boolean_t;
pub const displayIsActive = CGDisplayIsActive;

extern "CoreGraphics" fn CGDisplayIsAsleep(display: DirectDisplayID) callconv(.C) objc.boolean_t;
pub const displayIsAsleep = CGDisplayIsAsleep;

extern "CoreGraphics" fn CGDisplayIsOnline(display: DirectDisplayID) callconv(.C) objc.boolean_t;
pub const displayIsOnline = CGDisplayIsOnline;

extern "CoreGraphics" fn CGDisplayIsMain(display: DirectDisplayID) callconv(.C) objc.boolean_t;
pub const displayIsMain = CGDisplayIsMain;

extern "CoreGraphics" fn CGDisplayIsBuiltin(display: DirectDisplayID) callconv(.C) objc.boolean_t;
pub const displayIsBuiltin = CGDisplayIsBuiltin;

extern "CoreGraphics" fn CGDisplayIsInMirrorSet(display: DirectDisplayID) callconv(.C) objc.boolean_t;
pub const displayIsInMirrorSet = CGDisplayIsInMirrorSet;

extern "CoreGraphics" fn CGDisplayIsAlwaysInMirrorSet(display: DirectDisplayID) callconv(.C) objc.boolean_t;
pub const displayIsAlwaysInMirrorSet = CGDisplayIsAlwaysInMirrorSet;

extern "CoreGraphics" fn CGDisplayIsInHWMirrorSet(display: DirectDisplayID) callconv(.C) objc.boolean_t;
pub const displayIsInHWMirrorSet = CGDisplayIsInHWMirrorSet;

extern "CoreGraphics" fn CGDisplayMirrorsDisplay(display: DirectDisplayID) callconv(.C) DirectDisplayID;
pub const displayMirrorsDisplay = CGDisplayMirrorsDisplay;

extern "CoreGraphics" fn CGDisplayUsesOpenGLAcceleration(display: DirectDisplayID) callconv(.C) objc.boolean_t;
pub const displayUsesOpenGLAcceleration = CGDisplayUsesOpenGLAcceleration;

extern "CoreGraphics" fn CGDisplayIsStereo(display: DirectDisplayID) callconv(.C) objc.boolean_t;
pub const displayIsStereo = CGDisplayIsStereo;

extern "CoreGraphics" fn CGDisplayPrimaryDisplay(display: DirectDisplayID) callconv(.C) DirectDisplayID;
pub const displayPrimaryDisplay = CGDisplayPrimaryDisplay;

extern "CoreGraphics" fn CGDisplayUnitNumber(display: DirectDisplayID) callconv(.C) objc.uint32_t;
pub const displayUnitNumber = CGDisplayUnitNumber;

extern "CoreGraphics" fn CGDisplayVendorNumber(display: DirectDisplayID) callconv(.C) objc.uint32_t;
pub const displayVendorNumber = CGDisplayVendorNumber;

extern "CoreGraphics" fn CGDisplayModelNumber(display: DirectDisplayID) callconv(.C) objc.uint32_t;
pub const displayModelNumber = CGDisplayModelNumber;

extern "CoreGraphics" fn CGDisplaySerialNumber(display: DirectDisplayID) callconv(.C) objc.uint32_t;
pub const displaySerialNumber = CGDisplaySerialNumber;

extern "CoreGraphics" fn CGDisplayIOServicePort(display: DirectDisplayID) callconv(.C) io_kit.io_service_t;
pub const displayIOServicePort = CGDisplayIOServicePort;

extern "CoreGraphics" fn CGDisplayScreenSize(display: DirectDisplayID) callconv(.C) core_foundation.CGSize;
pub const displayScreenSize = CGDisplayScreenSize;

extern "CoreGraphics" fn CGDisplayRotation(display: DirectDisplayID) callconv(.C) f64;
pub const displayRotation = CGDisplayRotation;

extern "CoreGraphics" fn CGDisplayCopyColorSpace(display: DirectDisplayID) callconv(.C) ColorSpaceRef;
pub const displayCopyColorSpace = CGDisplayCopyColorSpace;

extern "CoreGraphics" fn CGConfigureDisplayMode(config: DisplayConfigRef, display: DirectDisplayID, mode: core_foundation.DictionaryRef) callconv(.C) Error;
pub const configureDisplayMode = CGConfigureDisplayMode;

pub const DisplayFadeReservationToken = objc.uint32_t;

pub const DisplayBlendFraction = f32;

pub const DisplayFadeInterval = f32;

extern "CoreGraphics" fn CGConfigureDisplayFadeEffect(
    config: DisplayConfigRef,
    fadeOutSeconds: DisplayFadeInterval,
    fadeInSeconds: DisplayFadeInterval,
    fadeRed: f32,
    fadeGreen: f32,
    fadeBlue: f32,
) callconv(.C) Error;
pub const configureDisplayFadeEffect = CGConfigureDisplayFadeEffect;

pub const DisplayReservationInterval = f32;

extern "CoreGraphics" fn CGAcquireDisplayFadeReservation(seconds: DisplayReservationInterval, token: ?*DisplayFadeReservationToken) callconv(.C) Error;
pub const acquireDisplayFadeReservation = CGAcquireDisplayFadeReservation;

extern "CoreGraphics" fn CGReleaseDisplayFadeReservation(token: DisplayFadeReservationToken) callconv(.C) Error;
pub const releaseDisplayFadeReservation = CGReleaseDisplayFadeReservation;

extern "CoreGraphics" fn CGDisplayFade(
    token: DisplayFadeReservationToken,
    duration: DisplayFadeInterval,
    startBlend: DisplayBlendFraction,
    endBlend: DisplayBlendFraction,
    redBlend: f32,
    greenBlend: f32,
    blueBlend: f32,
    synchronous: objc.boolean_t,
) callconv(.C) Error;
pub const displayFade = CGDisplayFade;

extern "CoreGraphics" fn CGDisplayFadeOperationInProgress() callconv(.C) objc.boolean_t;
pub const displayFadeOperationInProgress = CGDisplayFadeOperationInProgress;

pub const DisplayStream = extern struct {};

pub const DisplayStreamRef = DisplayStream;

pub const DisplayStreamUpdate = extern struct {};

pub const DisplayStreamUpdateRef = DisplayStreamUpdate;

pub const DisplayStreamUpdateRectType = objc.int32_t;
pub const DisplayStreamUpdateRectType_RefreshedRects: objc.int32_t = 0;
pub const DisplayStreamUpdateRectType_MovedRects: objc.int32_t = 1;
pub const DisplayStreamUpdateRectType_DirtyRects: objc.int32_t = 2;
pub const DisplayStreamUpdateRectType_ReducedDirtyRects: objc.int32_t = 3;

pub const DisplayStreamFrameStatus = objc.int32_t;
pub const DisplayStreamFrameStatus_FrameComplete: objc.int32_t = 0;
pub const DisplayStreamFrameStatus_FrameIdle: objc.int32_t = 1;
pub const DisplayStreamFrameStatus_FrameBlank: objc.int32_t = 2;
pub const DisplayStreamFrameStatus_Stopped: objc.int32_t = 3;

pub const DisplayStreamFrameAvailableHandler = *const fn (
    DisplayStreamFrameStatus,
    objc.uint64_t,
    IOSurfaceRef,
    DisplayStreamUpdateRef,
) callconv(.C) void;

extern "CoreGraphics" fn CGDisplayStreamUpdateGetTypeID() callconv(.C) core_foundation.TypeID;
pub const displayStreamUpdateGetTypeID = CGDisplayStreamUpdateGetTypeID;

extern "CoreGraphics" fn CGDisplayStreamUpdateGetRects(updateRef: DisplayStreamUpdateRef, rectType: DisplayStreamUpdateRectType, rectCount: ?*objc.size_t) callconv(.C) ?*const core_foundation.CGRect;
pub const displayStreamUpdateGetRects = CGDisplayStreamUpdateGetRects;

extern "CoreGraphics" fn CGDisplayStreamUpdateCreateMergedUpdate(firstUpdate: DisplayStreamUpdateRef, secondUpdate: DisplayStreamUpdateRef) callconv(.C) DisplayStreamUpdateRef;
pub const displayStreamUpdateCreateMergedUpdate = CGDisplayStreamUpdateCreateMergedUpdate;

extern "CoreGraphics" fn CGDisplayStreamUpdateGetMovedRectsDelta(updateRef: DisplayStreamUpdateRef, dx: ?*core_foundation.CGFloat, dy: ?*core_foundation.CGFloat) callconv(.C) void;
pub const displayStreamUpdateGetMovedRectsDelta = CGDisplayStreamUpdateGetMovedRectsDelta;

extern "CoreGraphics" fn CGDisplayStreamUpdateGetDropCount(updateRef: DisplayStreamUpdateRef) callconv(.C) objc.size_t;
pub const displayStreamUpdateGetDropCount = CGDisplayStreamUpdateGetDropCount;

extern "CoreGraphics" fn CGDisplayStreamGetTypeID() callconv(.C) core_foundation.TypeID;
pub const displayStreamGetTypeID = CGDisplayStreamGetTypeID;

extern "CoreGraphics" fn CGDisplayStreamCreate(
    display: DirectDisplayID,
    outputWidth: objc.size_t,
    outputHeight: objc.size_t,
    pixelFormat: objc.int32_t,
    properties: core_foundation.DictionaryRef,
    handler: DisplayStreamFrameAvailableHandler,
) callconv(.C) DisplayStreamRef;
pub const displayStreamCreate = CGDisplayStreamCreate;

extern "CoreGraphics" fn CGDisplayStreamCreateWithDispatchQueue(
    display: DirectDisplayID,
    outputWidth: objc.size_t,
    outputHeight: objc.size_t,
    pixelFormat: objc.int32_t,
    properties: core_foundation.DictionaryRef,
    queue: objc.dispatch_queue_t,
    handler: DisplayStreamFrameAvailableHandler,
) callconv(.C) DisplayStreamRef;
pub const displayStreamCreateWithDispatchQueue = CGDisplayStreamCreateWithDispatchQueue;

extern "CoreGraphics" fn CGDisplayStreamStart(displayStream: DisplayStreamRef) callconv(.C) Error;
pub const displayStreamStart = CGDisplayStreamStart;

extern "CoreGraphics" fn CGDisplayStreamStop(displayStream: DisplayStreamRef) callconv(.C) Error;
pub const displayStreamStop = CGDisplayStreamStop;

extern "CoreGraphics" fn CGDisplayStreamGetRunLoopSource(displayStream: DisplayStreamRef) callconv(.C) core_foundation.RunLoopSourceRef;
pub const displayStreamGetRunLoopSource = CGDisplayStreamGetRunLoopSource;

pub const EventErr = Error;

pub const ButtonCount = objc.uint32_t;

pub const WheelCount = objc.uint32_t;

pub const CharCode = objc.uint16_t;

pub const KeyCode = objc.uint16_t;

pub const ScreenRefreshCallback = ?*const fn (objc.uint32_t, ?*const core_foundation.CGRect, ?*anyopaque) callconv(.C) void;

extern "CoreGraphics" fn CGRegisterScreenRefreshCallback(callback: ScreenRefreshCallback, userInfo: ?*anyopaque) callconv(.C) Error;
pub const registerScreenRefreshCallback = CGRegisterScreenRefreshCallback;

extern "CoreGraphics" fn CGUnregisterScreenRefreshCallback(callback: ScreenRefreshCallback, userInfo: ?*anyopaque) callconv(.C) void;
pub const unregisterScreenRefreshCallback = CGUnregisterScreenRefreshCallback;

extern "CoreGraphics" fn CGWaitForScreenRefreshRects(rects: ?*?*core_foundation.CGRect, count: ?*objc.uint32_t) callconv(.C) Error;
pub const waitForScreenRefreshRects = CGWaitForScreenRefreshRects;

pub const ScreenUpdateOperation = objc.uint32_t;
pub const ScreenUpdateOperation_Refresh: objc.uint32_t = 0;
pub const ScreenUpdateOperation_Move: objc.uint32_t = 1;
pub const ScreenUpdateOperation_ReducedDirtyRectangleCount: objc.uint32_t = -2147483648;

pub const ScreenUpdateMoveDelta = extern struct {
    dX: objc.int32_t,
    dY: objc.int32_t,
};

pub const ScreenUpdateMoveCallback = ?*const fn (
    ScreenUpdateMoveDelta,
    objc.size_t,
    ?*const core_foundation.CGRect,
    ?*anyopaque,
) callconv(.C) void;

extern "CoreGraphics" fn CGScreenRegisterMoveCallback(callback: ScreenUpdateMoveCallback, userInfo: ?*anyopaque) callconv(.C) Error;
pub const screenRegisterMoveCallback = CGScreenRegisterMoveCallback;

extern "CoreGraphics" fn CGScreenUnregisterMoveCallback(callback: ScreenUpdateMoveCallback, userInfo: ?*anyopaque) callconv(.C) void;
pub const screenUnregisterMoveCallback = CGScreenUnregisterMoveCallback;

extern "CoreGraphics" fn CGWaitForScreenUpdateRects(
    requestedOperations: ScreenUpdateOperation,
    currentOperation: ?*ScreenUpdateOperation,
    rects: ?*?*core_foundation.CGRect,
    rectCount: ?*objc.size_t,
    delta: ?*ScreenUpdateMoveDelta,
) callconv(.C) Error;
pub const waitForScreenUpdateRects = CGWaitForScreenUpdateRects;

extern "CoreGraphics" fn CGReleaseScreenRefreshRects(rects: ?*core_foundation.CGRect) callconv(.C) void;
pub const releaseScreenRefreshRects = CGReleaseScreenRefreshRects;

extern "CoreGraphics" fn CGCursorIsVisible() callconv(.C) objc.boolean_t;
pub const cursorIsVisible = CGCursorIsVisible;

extern "CoreGraphics" fn CGCursorIsDrawnInFramebuffer() callconv(.C) objc.boolean_t;
pub const cursorIsDrawnInFramebuffer = CGCursorIsDrawnInFramebuffer;

extern "CoreGraphics" fn CGWarpMouseCursorPosition(newCursorPosition: core_foundation.CGPoint) callconv(.C) Error;
pub const warpMouseCursorPosition = CGWarpMouseCursorPosition;

extern "CoreGraphics" fn CGAssociateMouseAndMouseCursorPosition(connected: objc.boolean_t) callconv(.C) Error;
pub const associateMouseAndMouseCursorPosition = CGAssociateMouseAndMouseCursorPosition;

extern "CoreGraphics" fn CGWindowServerCreateServerPort() callconv(.C) core_foundation.MachPortRef;
pub const windowServerCreateServerPort = CGWindowServerCreateServerPort;

extern "CoreGraphics" fn CGEnableEventStateCombining(combineState: objc.boolean_t) callconv(.C) Error;
pub const enableEventStateCombining = CGEnableEventStateCombining;

extern "CoreGraphics" fn CGInhibitLocalEvents(inhibit: objc.boolean_t) callconv(.C) Error;
pub const inhibitLocalEvents = CGInhibitLocalEvents;

extern "CoreGraphics" fn CGPostMouseEvent(
    mouseCursorPosition: core_foundation.CGPoint,
    updateMouseCursorPosition: objc.boolean_t,
    buttonCount: ButtonCount,
    mouseButtonDown: objc.boolean_t,
) callconv(.C) Error;
pub const postMouseEvent = CGPostMouseEvent;

extern "CoreGraphics" fn CGPostScrollWheelEvent(wheelCount: WheelCount, wheel1: objc.int32_t) callconv(.C) Error;
pub const postScrollWheelEvent = CGPostScrollWheelEvent;

extern "CoreGraphics" fn CGPostKeyboardEvent(keyChar: CharCode, virtualKey: KeyCode, keyDown: objc.boolean_t) callconv(.C) Error;
pub const postKeyboardEvent = CGPostKeyboardEvent;

pub const EventFilterMask = objc.uint32_t;
pub const EventFilterMask_PermitLocalMouseEvents: objc.uint32_t = 1;
pub const EventFilterMask_PermitLocalKeyboardEvents: objc.uint32_t = 2;
pub const EventFilterMask_PermitSystemDefinedEvents: objc.uint32_t = 4;

pub const EventSuppressionState = objc.uint32_t;
pub const EventSuppressionState_SuppressionInterval: objc.uint32_t = 0;
pub const EventSuppressionState_RemoteMouseDrag: objc.uint32_t = 1;
pub const EventSuppressionState_NumberOfEventSuppressionStates: objc.uint32_t = 2;

extern "CoreGraphics" fn CGSetLocalEventsFilterDuringSuppressionState(filter: EventFilterMask, state: EventSuppressionState) callconv(.C) Error;
pub const setLocalEventsFilterDuringSuppressionState = CGSetLocalEventsFilterDuringSuppressionState;

extern "CoreGraphics" fn CGSetLocalEventsSuppressionInterval(seconds: core_foundation.TimeInterval) callconv(.C) Error;
pub const setLocalEventsSuppressionInterval = CGSetLocalEventsSuppressionInterval;

extern "CoreGraphics" fn CGWindowServerCFMachPort() callconv(.C) core_foundation.MachPortRef;
pub const windowServerCFMachPort = CGWindowServerCFMachPort;

pub const RectCount = objc.uint32_t;

pub const __CGEvent = extern struct {};

pub const EventRef = __CGEvent;

pub const MouseButton = objc.uint32_t;
pub const MouseButton_Left: objc.uint32_t = 0;
pub const MouseButton_Right: objc.uint32_t = 1;
pub const MouseButton_Center: objc.uint32_t = 2;

pub const ScrollEventUnit = objc.uint32_t;
pub const ScrollEventUnit_Pixel: objc.uint32_t = 0;
pub const ScrollEventUnit_Line: objc.uint32_t = 1;

pub const MomentumScrollPhase = objc.uint32_t;
pub const MomentumScrollPhase_None: objc.uint32_t = 0;
pub const MomentumScrollPhase_Begin: objc.uint32_t = 1;
pub const MomentumScrollPhase_Continue: objc.uint32_t = 2;
pub const MomentumScrollPhase_End: objc.uint32_t = 3;

pub const ScrollPhase = objc.uint32_t;
pub const ScrollPhase_Began: objc.uint32_t = 1;
pub const ScrollPhase_Changed: objc.uint32_t = 2;
pub const ScrollPhase_Ended: objc.uint32_t = 4;
pub const ScrollPhase_Cancelled: objc.uint32_t = 8;
pub const ScrollPhase_MayBegin: objc.uint32_t = 128;

pub const GesturePhase = objc.uint32_t;
pub const GesturePhase_None: objc.uint32_t = 0;
pub const GesturePhase_Began: objc.uint32_t = 1;
pub const GesturePhase_Changed: objc.uint32_t = 2;
pub const GesturePhase_Ended: objc.uint32_t = 4;
pub const GesturePhase_Cancelled: objc.uint32_t = 8;
pub const GesturePhase_MayBegin: objc.uint32_t = 128;

pub const EventFlags = objc.uint64_t;
pub const EventFlags_MaskAlphaShift: objc.uint64_t = 65536;
pub const EventFlags_MaskShift: objc.uint64_t = 131072;
pub const EventFlags_MaskControl: objc.uint64_t = 262144;
pub const EventFlags_MaskAlternate: objc.uint64_t = 524288;
pub const EventFlags_MaskCommand: objc.uint64_t = 1048576;
pub const EventFlags_MaskHelp: objc.uint64_t = 4194304;
pub const EventFlags_MaskSecondaryFn: objc.uint64_t = 8388608;
pub const EventFlags_MaskNumericPad: objc.uint64_t = 2097152;
pub const EventFlags_MaskNonCoalesced: objc.uint64_t = 256;

pub const EventType = objc.uint32_t;
pub const EventType_Null: objc.uint32_t = 0;
pub const EventType_LeftMouseDown: objc.uint32_t = 1;
pub const EventType_LeftMouseUp: objc.uint32_t = 2;
pub const EventType_RightMouseDown: objc.uint32_t = 3;
pub const EventType_RightMouseUp: objc.uint32_t = 4;
pub const EventType_MouseMoved: objc.uint32_t = 5;
pub const EventType_LeftMouseDragged: objc.uint32_t = 6;
pub const EventType_RightMouseDragged: objc.uint32_t = 7;
pub const EventType_KeyDown: objc.uint32_t = 10;
pub const EventType_KeyUp: objc.uint32_t = 11;
pub const EventType_FlagsChanged: objc.uint32_t = 12;
pub const EventType_ScrollWheel: objc.uint32_t = 22;
pub const EventType_TabletPointer: objc.uint32_t = 23;
pub const EventType_TabletProximity: objc.uint32_t = 24;
pub const EventType_OtherMouseDown: objc.uint32_t = 25;
pub const EventType_OtherMouseUp: objc.uint32_t = 26;
pub const EventType_OtherMouseDragged: objc.uint32_t = 27;
pub const EventType_TapDisabledByTimeout: objc.uint32_t = -2;
pub const EventType_TapDisabledByUserInput: objc.uint32_t = -1;

pub const EventTimestamp = objc.uint64_t;

pub const EventField = objc.uint32_t;
pub const EventField_MouseEventNumber: objc.uint32_t = 0;
pub const EventField_MouseEventClickState: objc.uint32_t = 1;
pub const EventField_MouseEventPressure: objc.uint32_t = 2;
pub const EventField_MouseEventButtonNumber: objc.uint32_t = 3;
pub const EventField_MouseEventDeltaX: objc.uint32_t = 4;
pub const EventField_MouseEventDeltaY: objc.uint32_t = 5;
pub const EventField_MouseEventInstantMouser: objc.uint32_t = 6;
pub const EventField_MouseEventSubtype: objc.uint32_t = 7;
pub const EventField_KeyboardEventAutorepeat: objc.uint32_t = 8;
pub const EventField_KeyboardEventKeycode: objc.uint32_t = 9;
pub const EventField_KeyboardEventKeyboardType: objc.uint32_t = 10;
pub const EventField_ScrollWheelEventDeltaAxis1: objc.uint32_t = 11;
pub const EventField_ScrollWheelEventDeltaAxis2: objc.uint32_t = 12;
pub const EventField_ScrollWheelEventDeltaAxis3: objc.uint32_t = 13;
pub const EventField_ScrollWheelEventFixedPtDeltaAxis1: objc.uint32_t = 93;
pub const EventField_ScrollWheelEventFixedPtDeltaAxis2: objc.uint32_t = 94;
pub const EventField_ScrollWheelEventFixedPtDeltaAxis3: objc.uint32_t = 95;
pub const EventField_ScrollWheelEventPointDeltaAxis1: objc.uint32_t = 96;
pub const EventField_ScrollWheelEventPointDeltaAxis2: objc.uint32_t = 97;
pub const EventField_ScrollWheelEventPointDeltaAxis3: objc.uint32_t = 98;
pub const EventField_ScrollWheelEventScrollPhase: objc.uint32_t = 99;
pub const EventField_ScrollWheelEventScrollCount: objc.uint32_t = 100;
pub const EventField_ScrollWheelEventMomentumPhase: objc.uint32_t = 123;
pub const EventField_ScrollWheelEventInstantMouser: objc.uint32_t = 14;
pub const EventField_TabletEventPointX: objc.uint32_t = 15;
pub const EventField_TabletEventPointY: objc.uint32_t = 16;
pub const EventField_TabletEventPointZ: objc.uint32_t = 17;
pub const EventField_TabletEventPointButtons: objc.uint32_t = 18;
pub const EventField_TabletEventPointPressure: objc.uint32_t = 19;
pub const EventField_TabletEventTiltX: objc.uint32_t = 20;
pub const EventField_TabletEventTiltY: objc.uint32_t = 21;
pub const EventField_TabletEventRotation: objc.uint32_t = 22;
pub const EventField_TabletEventTangentialPressure: objc.uint32_t = 23;
pub const EventField_TabletEventDeviceID: objc.uint32_t = 24;
pub const EventField_TabletEventVendor1: objc.uint32_t = 25;
pub const EventField_TabletEventVendor2: objc.uint32_t = 26;
pub const EventField_TabletEventVendor3: objc.uint32_t = 27;
pub const EventField_TabletProximityEventVendorID: objc.uint32_t = 28;
pub const EventField_TabletProximityEventTabletID: objc.uint32_t = 29;
pub const EventField_TabletProximityEventPointerID: objc.uint32_t = 30;
pub const EventField_TabletProximityEventDeviceID: objc.uint32_t = 31;
pub const EventField_TabletProximityEventSystemTabletID: objc.uint32_t = 32;
pub const EventField_TabletProximityEventVendorPointerType: objc.uint32_t = 33;
pub const EventField_TabletProximityEventVendorPointerSerialNumber: objc.uint32_t = 34;
pub const EventField_TabletProximityEventVendorUniqueID: objc.uint32_t = 35;
pub const EventField_TabletProximityEventCapabilityMask: objc.uint32_t = 36;
pub const EventField_TabletProximityEventPointerType: objc.uint32_t = 37;
pub const EventField_TabletProximityEventEnterProximity: objc.uint32_t = 38;
pub const EventField_TargetProcessSerialNumber: objc.uint32_t = 39;
pub const EventField_TargetUnixProcessID: objc.uint32_t = 40;
pub const EventField_SourceUnixProcessID: objc.uint32_t = 41;
pub const EventField_SourceUserData: objc.uint32_t = 42;
pub const EventField_SourceUserID: objc.uint32_t = 43;
pub const EventField_SourceGroupID: objc.uint32_t = 44;
pub const EventField_SourceStateID: objc.uint32_t = 45;
pub const EventField_ScrollWheelEventIsContinuous: objc.uint32_t = 88;
pub const EventField_MouseEventWindowUnderMousePointer: objc.uint32_t = 91;
pub const EventField_MouseEventWindowUnderMousePointerThatCanHandleThisEvent: objc.uint32_t = 92;
pub const EventField_UnacceleratedPointerMovementX: objc.uint32_t = 170;
pub const EventField_UnacceleratedPointerMovementY: objc.uint32_t = 171;
pub const EventField_ScrollWheelEventMomentumOptionPhase: objc.uint32_t = 173;
pub const EventField_ScrollWheelEventAcceleratedDeltaAxis1: objc.uint32_t = 176;
pub const EventField_ScrollWheelEventAcceleratedDeltaAxis2: objc.uint32_t = 175;
pub const EventField_ScrollWheelEventRawDeltaAxis1: objc.uint32_t = 178;
pub const EventField_ScrollWheelEventRawDeltaAxis2: objc.uint32_t = 177;

pub const EventMouseSubtype = objc.uint32_t;
pub const EventMouseSubtype_Default: objc.uint32_t = 0;
pub const EventMouseSubtype_TabletPoint: objc.uint32_t = 1;
pub const EventMouseSubtype_TabletProximity: objc.uint32_t = 2;

pub const EventTapLocation = objc.uint32_t;
pub const EventTapLocation_HIDEventTap: objc.uint32_t = 0;
pub const EventTapLocation_SessionEventTap: objc.uint32_t = 1;
pub const EventTapLocation_AnnotatedSessionEventTap: objc.uint32_t = 2;

pub const EventTapPlacement = objc.uint32_t;
pub const EventTapPlacement_HeadInsertEventTap: objc.uint32_t = 0;
pub const EventTapPlacement_TailAppendEventTap: objc.uint32_t = 1;

pub const EventTapOptions = objc.uint32_t;
pub const EventTapOptions_Default: objc.uint32_t = 0;
pub const EventTapOptions_ListenOnly: objc.uint32_t = 1;

pub const EventMask = objc.uint64_t;

pub const __CGEventTapProxy = extern struct {};

pub const EventTapProxy = __CGEventTapProxy;

pub const EventTapCallBack = EventRef;

pub const __CGEventTapInformation = extern struct {
    eventTapID: objc.uint32_t,
    tapPoint: EventTapLocation,
    options: EventTapOptions,
    eventsOfInterest: EventMask,
    tappingProcess: objc.pid_t,
    processBeingTapped: objc.pid_t,
    enabled: @"bool",
    minUsecLatency: f32,
    avgUsecLatency: f32,
    maxUsecLatency: f32,
};

pub const EventTapInformation = __CGEventTapInformation;

pub const __CGEventSource = extern struct {};

pub const EventSourceRef = __CGEventSource;

pub const EventSourceStateID = objc.int32_t;
pub const EventSourceStateID_Private: objc.int32_t = -1;
pub const EventSourceStateID_CombinedSessionState: objc.int32_t = 0;
pub const EventSourceStateID_HIDSystemState: objc.int32_t = 1;

pub const EventSourceKeyboardType = objc.uint32_t;

extern "CoreGraphics" fn CGEventGetTypeID() callconv(.C) core_foundation.TypeID;
pub const eventGetTypeID = CGEventGetTypeID;

extern "CoreGraphics" fn CGEventCreate(source: EventSourceRef) callconv(.C) EventRef;
pub const eventCreate = CGEventCreate;

extern "CoreGraphics" fn CGEventCreateData(allocator: core_foundation.AllocatorRef, event: EventRef) callconv(.C) core_foundation.DataRef;
pub const eventCreateData = CGEventCreateData;

extern "CoreGraphics" fn CGEventCreateFromData(allocator: core_foundation.AllocatorRef, data: core_foundation.DataRef) callconv(.C) EventRef;
pub const eventCreateFromData = CGEventCreateFromData;

extern "CoreGraphics" fn CGEventCreateMouseEvent(
    source: EventSourceRef,
    mouseType: EventType,
    mouseCursorPosition: core_foundation.CGPoint,
    mouseButton: MouseButton,
) callconv(.C) EventRef;
pub const eventCreateMouseEvent = CGEventCreateMouseEvent;

extern "CoreGraphics" fn CGEventCreateKeyboardEvent(source: EventSourceRef, virtualKey: KeyCode, keyDown: @"bool") callconv(.C) EventRef;
pub const eventCreateKeyboardEvent = CGEventCreateKeyboardEvent;

extern "CoreGraphics" fn CGEventCreateScrollWheelEvent(
    source: EventSourceRef,
    units: ScrollEventUnit,
    wheelCount: objc.uint32_t,
    wheel1: objc.int32_t,
) callconv(.C) EventRef;
pub const eventCreateScrollWheelEvent = CGEventCreateScrollWheelEvent;

extern "CoreGraphics" fn CGEventCreateScrollWheelEvent2(
    source: EventSourceRef,
    units: ScrollEventUnit,
    wheelCount: objc.uint32_t,
    wheel1: objc.int32_t,
    wheel2: objc.int32_t,
    wheel3: objc.int32_t,
) callconv(.C) EventRef;
pub const eventCreateScrollWheelEvent2 = CGEventCreateScrollWheelEvent2;

extern "CoreGraphics" fn CGEventCreateCopy(event: EventRef) callconv(.C) EventRef;
pub const eventCreateCopy = CGEventCreateCopy;

extern "CoreGraphics" fn CGEventCreateSourceFromEvent(event: EventRef) callconv(.C) EventSourceRef;
pub const eventCreateSourceFromEvent = CGEventCreateSourceFromEvent;

extern "CoreGraphics" fn CGEventSetSource(event: EventRef, source: EventSourceRef) callconv(.C) void;
pub const eventSetSource = CGEventSetSource;

extern "CoreGraphics" fn CGEventGetType(event: EventRef) callconv(.C) EventType;
pub const eventGetType = CGEventGetType;

extern "CoreGraphics" fn CGEventSetType(event: EventRef, @"type": EventType) callconv(.C) void;
pub const eventSetType = CGEventSetType;

extern "CoreGraphics" fn CGEventGetTimestamp(event: EventRef) callconv(.C) EventTimestamp;
pub const eventGetTimestamp = CGEventGetTimestamp;

extern "CoreGraphics" fn CGEventSetTimestamp(event: EventRef, timestamp: EventTimestamp) callconv(.C) void;
pub const eventSetTimestamp = CGEventSetTimestamp;

extern "CoreGraphics" fn CGEventGetLocation(event: EventRef) callconv(.C) core_foundation.CGPoint;
pub const eventGetLocation = CGEventGetLocation;

extern "CoreGraphics" fn CGEventGetUnflippedLocation(event: EventRef) callconv(.C) core_foundation.CGPoint;
pub const eventGetUnflippedLocation = CGEventGetUnflippedLocation;

extern "CoreGraphics" fn CGEventSetLocation(event: EventRef, location: core_foundation.CGPoint) callconv(.C) void;
pub const eventSetLocation = CGEventSetLocation;

extern "CoreGraphics" fn CGEventGetFlags(event: EventRef) callconv(.C) EventFlags;
pub const eventGetFlags = CGEventGetFlags;

extern "CoreGraphics" fn CGEventSetFlags(event: EventRef, flags: EventFlags) callconv(.C) void;
pub const eventSetFlags = CGEventSetFlags;

extern "CoreGraphics" fn CGEventKeyboardGetUnicodeString(
    event: EventRef,
    maxStringLength: objc.UniCharCount,
    actualStringLength: ?*objc.UniCharCount,
    unicodeString: ?*objc.UniChar,
) callconv(.C) void;
pub const eventKeyboardGetUnicodeString = CGEventKeyboardGetUnicodeString;

extern "CoreGraphics" fn CGEventKeyboardSetUnicodeString(event: EventRef, stringLength: objc.UniCharCount, unicodeString: ?*const objc.UniChar) callconv(.C) void;
pub const eventKeyboardSetUnicodeString = CGEventKeyboardSetUnicodeString;

extern "CoreGraphics" fn CGEventGetIntegerValueField(event: EventRef, field: EventField) callconv(.C) objc.int64_t;
pub const eventGetIntegerValueField = CGEventGetIntegerValueField;

extern "CoreGraphics" fn CGEventSetIntegerValueField(event: EventRef, field: EventField, value: objc.int64_t) callconv(.C) void;
pub const eventSetIntegerValueField = CGEventSetIntegerValueField;

extern "CoreGraphics" fn CGEventGetDoubleValueField(event: EventRef, field: EventField) callconv(.C) f64;
pub const eventGetDoubleValueField = CGEventGetDoubleValueField;

extern "CoreGraphics" fn CGEventSetDoubleValueField(event: EventRef, field: EventField, value: f64) callconv(.C) void;
pub const eventSetDoubleValueField = CGEventSetDoubleValueField;

extern "CoreGraphics" fn CGEventTapCreate(
    tap: EventTapLocation,
    place: EventTapPlacement,
    options: EventTapOptions,
    eventsOfInterest: EventMask,
    callback: EventTapCallBack,
    userInfo: ?*anyopaque,
) callconv(.C) core_foundation.MachPortRef;
pub const eventTapCreate = CGEventTapCreate;

extern "CoreGraphics" fn CGEventTapCreateForPSN(
    processSerialNumber: ?*anyopaque,
    place: EventTapPlacement,
    options: EventTapOptions,
    eventsOfInterest: EventMask,
    callback: EventTapCallBack,
    userInfo: ?*anyopaque,
) callconv(.C) core_foundation.MachPortRef;
pub const eventTapCreateForPSN = CGEventTapCreateForPSN;

extern "CoreGraphics" fn CGEventTapCreateForPid(
    pid: objc.pid_t,
    place: EventTapPlacement,
    options: EventTapOptions,
    eventsOfInterest: EventMask,
    callback: EventTapCallBack,
    userInfo: ?*anyopaque,
) callconv(.C) core_foundation.MachPortRef;
pub const eventTapCreateForPid = CGEventTapCreateForPid;

extern "CoreGraphics" fn CGEventTapEnable(tap: core_foundation.MachPortRef, enable: @"bool") callconv(.C) void;
pub const eventTapEnable = CGEventTapEnable;

extern "CoreGraphics" fn CGEventTapIsEnabled() callconv(.C) i32;
pub const eventTapIsEnabled = CGEventTapIsEnabled;

extern "CoreGraphics" fn CGEventTapPostEvent(proxy: EventTapProxy, event: EventRef) callconv(.C) void;
pub const eventTapPostEvent = CGEventTapPostEvent;

extern "CoreGraphics" fn CGEventPost(tap: EventTapLocation, event: EventRef) callconv(.C) void;
pub const eventPost = CGEventPost;

extern "CoreGraphics" fn CGEventPostToPSN(processSerialNumber: ?*anyopaque, event: EventRef) callconv(.C) void;
pub const eventPostToPSN = CGEventPostToPSN;

extern "CoreGraphics" fn CGEventPostToPid(pid: objc.pid_t, event: EventRef) callconv(.C) void;
pub const eventPostToPid = CGEventPostToPid;

extern "CoreGraphics" fn CGGetEventTapList(maxNumberOfTaps: objc.uint32_t, tapList: ?*EventTapInformation, eventTapCount: ?*objc.uint32_t) callconv(.C) Error;
pub const getEventTapList = CGGetEventTapList;

extern "CoreGraphics" fn CGPreflightListenEventAccess() callconv(.C) i32;
pub const preflightListenEventAccess = CGPreflightListenEventAccess;

extern "CoreGraphics" fn CGRequestListenEventAccess() callconv(.C) i32;
pub const requestListenEventAccess = CGRequestListenEventAccess;

extern "CoreGraphics" fn CGPreflightPostEventAccess() callconv(.C) i32;
pub const preflightPostEventAccess = CGPreflightPostEventAccess;

extern "CoreGraphics" fn CGRequestPostEventAccess() callconv(.C) i32;
pub const requestPostEventAccess = CGRequestPostEventAccess;

extern "CoreGraphics" fn CGEventSourceGetTypeID() callconv(.C) core_foundation.TypeID;
pub const eventSourceGetTypeID = CGEventSourceGetTypeID;

extern "CoreGraphics" fn CGEventSourceCreate(stateID: EventSourceStateID) callconv(.C) EventSourceRef;
pub const eventSourceCreate = CGEventSourceCreate;

extern "CoreGraphics" fn CGEventSourceGetKeyboardType(source: EventSourceRef) callconv(.C) EventSourceKeyboardType;
pub const eventSourceGetKeyboardType = CGEventSourceGetKeyboardType;

extern "CoreGraphics" fn CGEventSourceSetKeyboardType(source: EventSourceRef, keyboardType: EventSourceKeyboardType) callconv(.C) void;
pub const eventSourceSetKeyboardType = CGEventSourceSetKeyboardType;

extern "CoreGraphics" fn CGEventSourceGetPixelsPerLine(source: EventSourceRef) callconv(.C) f64;
pub const eventSourceGetPixelsPerLine = CGEventSourceGetPixelsPerLine;

extern "CoreGraphics" fn CGEventSourceSetPixelsPerLine(source: EventSourceRef, pixelsPerLine: f64) callconv(.C) void;
pub const eventSourceSetPixelsPerLine = CGEventSourceSetPixelsPerLine;

extern "CoreGraphics" fn CGEventSourceGetSourceStateID(source: EventSourceRef) callconv(.C) EventSourceStateID;
pub const eventSourceGetSourceStateID = CGEventSourceGetSourceStateID;

extern "CoreGraphics" fn CGEventSourceButtonState() callconv(.C) i32;
pub const eventSourceButtonState = CGEventSourceButtonState;

extern "CoreGraphics" fn CGEventSourceKeyState() callconv(.C) i32;
pub const eventSourceKeyState = CGEventSourceKeyState;

extern "CoreGraphics" fn CGEventSourceFlagsState(stateID: EventSourceStateID) callconv(.C) EventFlags;
pub const eventSourceFlagsState = CGEventSourceFlagsState;

extern "CoreGraphics" fn CGEventSourceSecondsSinceLastEventType(stateID: EventSourceStateID, eventType: EventType) callconv(.C) core_foundation.TimeInterval;
pub const eventSourceSecondsSinceLastEventType = CGEventSourceSecondsSinceLastEventType;

extern "CoreGraphics" fn CGEventSourceCounterForEventType(stateID: EventSourceStateID, eventType: EventType) callconv(.C) objc.uint32_t;
pub const eventSourceCounterForEventType = CGEventSourceCounterForEventType;

extern "CoreGraphics" fn CGEventSourceSetUserData(source: EventSourceRef, userData: objc.int64_t) callconv(.C) void;
pub const eventSourceSetUserData = CGEventSourceSetUserData;

extern "CoreGraphics" fn CGEventSourceGetUserData(source: EventSourceRef) callconv(.C) objc.int64_t;
pub const eventSourceGetUserData = CGEventSourceGetUserData;

extern "CoreGraphics" fn CGEventSourceSetLocalEventsFilterDuringSuppressionState(source: EventSourceRef, filter: EventFilterMask, state: EventSuppressionState) callconv(.C) void;
pub const eventSourceSetLocalEventsFilterDuringSuppressionState = CGEventSourceSetLocalEventsFilterDuringSuppressionState;

extern "CoreGraphics" fn CGEventSourceGetLocalEventsFilterDuringSuppressionState(source: EventSourceRef, state: EventSuppressionState) callconv(.C) EventFilterMask;
pub const eventSourceGetLocalEventsFilterDuringSuppressionState = CGEventSourceGetLocalEventsFilterDuringSuppressionState;

extern "CoreGraphics" fn CGEventSourceSetLocalEventsSuppressionInterval(source: EventSourceRef, seconds: core_foundation.TimeInterval) callconv(.C) void;
pub const eventSourceSetLocalEventsSuppressionInterval = CGEventSourceSetLocalEventsSuppressionInterval;

extern "CoreGraphics" fn CGEventSourceGetLocalEventsSuppressionInterval(source: EventSourceRef) callconv(.C) core_foundation.TimeInterval;
pub const eventSourceGetLocalEventsSuppressionInterval = CGEventSourceGetLocalEventsSuppressionInterval;

pub const PSConverter = extern struct {};

pub const PSConverterRef = PSConverter;

pub const PSConverterBeginDocumentCallback = ?*const fn (?*anyopaque) callconv(.C) void;

pub const PSConverterEndDocumentCallback = ?*const fn (?*anyopaque, @"bool") callconv(.C) void;

pub const PSConverterBeginPageCallback = ?*const fn (?*anyopaque, objc.size_t, core_foundation.DictionaryRef) callconv(.C) void;

pub const PSConverterEndPageCallback = ?*const fn (?*anyopaque, objc.size_t, core_foundation.DictionaryRef) callconv(.C) void;

pub const PSConverterProgressCallback = ?*const fn (?*anyopaque) callconv(.C) void;

pub const PSConverterMessageCallback = ?*const fn (?*anyopaque, core_foundation.StringRef) callconv(.C) void;

pub const PSConverterReleaseInfoCallback = ?*const fn (?*anyopaque) callconv(.C) void;

pub const PSConverterCallbacks = extern struct {
    version: u32,
    beginDocument: PSConverterBeginDocumentCallback,
    endDocument: PSConverterEndDocumentCallback,
    beginPage: PSConverterBeginPageCallback,
    endPage: PSConverterEndPageCallback,
    noteProgress: PSConverterProgressCallback,
    noteMessage: PSConverterMessageCallback,
    releaseInfo: PSConverterReleaseInfoCallback,
};

extern "CoreGraphics" fn CGPSConverterCreate(info: ?*anyopaque, callbacks: ?*const PSConverterCallbacks, options: core_foundation.DictionaryRef) callconv(.C) PSConverterRef;
pub const psConverterCreate = CGPSConverterCreate;

extern "CoreGraphics" fn CGPSConverterConvert() callconv(.C) i32;
pub const psConverterConvert = CGPSConverterConvert;

extern "CoreGraphics" fn CGPSConverterAbort() callconv(.C) i32;
pub const psConverterAbort = CGPSConverterAbort;

extern "CoreGraphics" fn CGPSConverterIsConverting() callconv(.C) i32;
pub const psConverterIsConverting = CGPSConverterIsConverting;

extern "CoreGraphics" fn CGPSConverterGetTypeID() callconv(.C) core_foundation.TypeID;
pub const psConverterGetTypeID = CGPSConverterGetTypeID;

extern "CoreGraphics" fn CGSessionCopyCurrentDictionary() callconv(.C) core_foundation.DictionaryRef;
pub const sessionCopyCurrentDictionary = CGSessionCopyCurrentDictionary;

extern "CoreGraphics" fn CGDirectDisplayCopyCurrentMetalDevice(display: DirectDisplayID) callconv(.C) ?*objc.id;
pub const directDisplayCopyCurrentMetalDevice = CGDirectDisplayCopyCurrentMetalDevice;
