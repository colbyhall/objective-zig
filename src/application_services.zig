// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const core_text = @import("core_text.zig"); // Framework dependency CoreText.
const core_graphics = @import("core_graphics.zig"); // Framework dependency CoreGraphics.
const core_services = @import("core_services.zig"); // Framework dependency CoreServices.
const foundation = @import("foundation.zig"); // Framework dependency Foundation.

pub const anon1231 = enum(u32) {
    kICAttrLockedBit = 0,
    kICAttrVolatileBit = 1,
};

pub const anon651 = enum(u32) {
    kATSUUnFlattenOptionNoOptionsMask = 0,
};

pub const anon1071 = enum(objc.OSType) {
    soVoiceDescription = 1768842863,
    soVoiceFile = 1718773094,
};

pub const anon371 = enum(u32) {
    kPMCancel = 128,
};

pub const anon521 = enum(objc.SInt32) {
    kImmediate = 0,
    kEndOfWord = 1,
    kEndOfSentence = 2,
};

pub const anon1271 = enum(u32) {
    kSelectorLarge1Bit = 1,
    kSelectorLarge4Bit = 2,
    kSelectorLarge8Bit = 4,
    kSelectorLarge32Bit = 8,
    kSelectorLarge8BitMask = 16,
    kSelectorSmall1Bit = 256,
    kSelectorSmall4Bit = 512,
    kSelectorSmall8Bit = 1024,
    kSelectorSmall32Bit = 2048,
    kSelectorSmall8BitMask = 4096,
    kSelectorMini1Bit = 65536,
    kSelectorMini4Bit = 131072,
    kSelectorMini8Bit = 262144,
    kSelectorHuge1Bit = 16777216,
    kSelectorHuge4Bit = 33554432,
    kSelectorHuge8Bit = 67108864,
    kSelectorHuge32Bit = 134217728,
    kSelectorHuge8BitMask = 268435456,
    kSelectorAllLargeData = 255,
    kSelectorAllSmallData = 65280,
    kSelectorAllMiniData = 16711680,
    kSelectorAllHugeData = -16777216,
    kSelectorAll1BitData = 16843009,
    kSelectorAll4BitData = 33686018,
    kSelectorAll8BitData = 67372036,
    kSelectorAll32BitData = 134219784,
    kSelectorAllAvailableData = -1,
};

pub const anon1381 = enum(u32) {
    icNoPerm = 0,
    icReadOnlyPerm = 1,
    icReadWritePerm = 2,
};

pub const anon391 = enum(objc.OSType) {
    kTextToSpeechSynthType = 1953788771,
    kTextToSpeechVoiceType = 1953789540,
    kTextToSpeechVoiceFileType = 1953789542,
    kTextToSpeechVoiceBundleType = 1953789538,
};

pub const anon441 = enum(u32) {
    kATSUDataStreamUnicodeStyledText = 1970500716,
};

pub const anon711 = enum(u32) {
    kUAZoomFocusTypeOther = 0,
    kUAZoomFocusTypeInsertionPoint = 1,
};

pub const anon881 = enum(u32) {
    kTransformNone = 0,
    kTransformDisabled = 1,
    kTransformOffline = 2,
    kTransformOpen = 3,
    kTransformLabel1 = 256,
    kTransformLabel2 = 512,
    kTransformLabel3 = 768,
    kTransformLabel4 = 1024,
    kTransformLabel5 = 1280,
    kTransformLabel6 = 1536,
    kTransformLabel7 = 1792,
    kTransformSelected = 16384,
    kTransformSelectedDisabled = 16385,
    kTransformSelectedOffline = 16386,
    kTransformSelectedOpen = 16387,
};

pub const anon1121 = enum(u32) {
    modeReserved = 16777216,
    modeControlPanel = 524288,
    modeLaunchDontSwitch = 262144,
    modeDeskAccessory = 131072,
    modeMultiLaunch = 65536,
    modeNeedSuspendResume = 16384,
    modeCanBackground = 4096,
    modeDoesActivateOnFGSwitch = 2048,
    modeOnlyBackground = 1024,
    modeGetFrontClicks = 512,
    modeGetAppDiedMsg = 256,
    mode32BitCompatible = 128,
    modeHighLevelEventAware = 64,
    modeLocalAndRemoteHLEvents = 32,
    modeStationeryAware = 16,
    modeUseTextEditServices = 8,
    modeDisplayManagerAware = 4,
};

pub const anon1391 = enum(u32) {
    kPMLayoutLeftRightTopBottom = 1,
    kPMLayoutLeftRightBottomTop = 2,
    kPMLayoutRightLeftTopBottom = 3,
    kPMLayoutRightLeftBottomTop = 4,
    kPMLayoutTopBottomLeftRight = 5,
    kPMLayoutTopBottomRightLeft = 6,
    kPMLayoutBottomTopLeftRight = 7,
    kPMLayoutBottomTopRightLeft = 8,
};

pub const anon4001 = enum(u32) {
    kATSFlattenedFontSpecifierRawNameData = 1851878756,
};

pub const anon731 = enum(i32) {
    icPrefNotFoundErr = -666,
    icPermErr = -667,
    icPrefDataErr = -668,
    icInternalErr = -669,
    icTruncatedErr = -670,
    icNoMoreWritersErr = -671,
    icNothingToOverrideErr = -672,
    icNoURLErr = -673,
    icConfigNotFoundErr = -674,
    icConfigInappropriateErr = -675,
    icProfileNotFoundErr = -676,
    icTooManyProfilesErr = -677,
};

pub const anon1501 = enum(u32) {
    kICNilProfileID = 0,
};

pub const anon2511 = enum(u32) {
    kICFileSpecHeaderSize = 106,
};

pub const anon3451 = enum(u32) {
    cmXYZData = 1482250784,
    cmLabData = 1281450528,
    cmLuvData = 1282766368,
    cmYCbCrData = 1497588338,
    cmYxyData = 1501067552,
    cmRGBData = 1380401696,
    cmSRGBData = 1934772034,
    cmGrayData = 1196573017,
    cmHSVData = 1213421088,
    cmHLSData = 1212961568,
    cmCMYKData = 1129142603,
    cmCMYData = 1129142560,
    cmMCH5Data = 1296255029,
    cmMCH6Data = 1296255030,
    cmMCH7Data = 1296255031,
    cmMCH8Data = 1296255032,
    cm3CLRData = 860048466,
    cm4CLRData = 876825682,
    cm5CLRData = 893602898,
    cm6CLRData = 910380114,
    cm7CLRData = 927157330,
    cm8CLRData = 943934546,
    cm9CLRData = 960711762,
    cm10CLRData = 1094929490,
    cm11CLRData = 1111706706,
    cm12CLRData = 1128483922,
    cm13CLRData = 1145261138,
    cm14CLRData = 1162038354,
    cm15CLRData = 1178815570,
    cmNamedData = 1312902469,
};

pub const anon12291 = enum(u32) {
    kATSUUseLineControlWidth = 2147483647,
};

pub const anon1191 = enum(u32) {
    kPMScalingPinTopLeft = 1,
    kPMScalingPinTopRight = 2,
    kPMScalingPinBottomLeft = 3,
    kPMScalingPinBottomRight = 4,
    kPMScalingCenterOnPaper = 5,
    kPMScalingCenterOnImgArea = 6,
};

pub const anon1541 = enum(u32) {
    kATSULayoutOperationCallbackStatusHandled = 0,
    kATSULayoutOperationCallbackStatusContinue = 1,
};

pub const anon1591 = enum(u32) {
    svLarge1Bit = 1,
    svLarge4Bit = 2,
    svLarge8Bit = 4,
    svSmall1Bit = 256,
    svSmall4Bit = 512,
    svSmall8Bit = 1024,
    svMini1Bit = 65536,
    svMini4Bit = 131072,
    svMini8Bit = 262144,
    svAllLargeData = 255,
    svAllSmallData = 65280,
    svAllMiniData = 16711680,
    svAll1BitData = 16843009,
    svAll4BitData = 33686018,
    svAll8BitData = 67372036,
    svAllAvailableData = -1,
};

pub const anon2821 = enum(u32) {
    kICMapBinaryBit = 0,
    kICMapResourceForkBit = 1,
    kICMapDataForkBit = 2,
    kICMapPostBit = 3,
    kICMapNotIncomingBit = 4,
    kICMapNotOutgoingBit = 5,
};

pub const anon3131 = enum(u32) {
    kICServicesTCPBit = 0,
    kICServicesUDPBit = 1,
};

pub const anon3331 = enum(u32) {
    cmSpotFunctionUnknown = 0,
    cmSpotFunctionDefault = 1,
    cmSpotFunctionRound = 2,
    cmSpotFunctionDiamond = 3,
    cmSpotFunctionEllipse = 4,
    cmSpotFunctionLine = 5,
    cmSpotFunctionSquare = 6,
    cmSpotFunctionCross = 7,
};

pub const anon3411 = enum(u32) {
    kATSDeletedGlyphcode = 65535,
};

pub const anon3791 = enum(u32) {
    cmInputClass = 1935896178,
    cmDisplayClass = 1835955314,
    cmOutputClass = 1886549106,
    cmLinkClass = 1818848875,
    cmAbstractClass = 1633842036,
    cmColorSpaceClass = 1936744803,
    cmNamedColorClass = 1852662636,
};

pub const anon3991 = enum(u32) {
    cmParametricType0 = 0,
    cmParametricType1 = 1,
    cmParametricType2 = 2,
    cmParametricType3 = 3,
    cmParametricType4 = 4,
};

pub const anon461 = enum(objc.SInt32) {
    kNoEndingProsody = 1,
    kNoSpeechInterrupt = 2,
    kPreflightThenPause = 4,
};

pub const anon511 = enum(u32) {
    srcCopy = 0,
};

pub const anon571 = enum(u32) {
    kATSOptionFlagsDefault = 0,
    kATSOptionFlagsComposeFontPostScriptName = 1,
    kATSOptionFlagsUseDataForkAsResourceFork = 256,
    kATSOptionFlagsUseResourceFork = 512,
    kATSOptionFlagsUseDataFork = 768,
};

pub const anon751 = enum(u32) {
    kPMPrinterIdle = 3,
    kPMPrinterProcessing = 4,
    kPMPrinterStopped = 5,
};

pub const anon1691 = enum(u32) {
    cmNumHeaderElements = 10,
};

pub const anon981 = enum(objc.OSType) {
    modeText = 1413830740,
    modePhonemes = 1346916174,
    modeTune = 1414876741,
    modeNormal = 1313821261,
    modeLiteral = 1280594508,
};

pub const anon5121 = enum(u32) {
    kSetFrontProcessFrontWindowOnly = 1,
    kSetFrontProcessCausedByUser = 2,
};

pub const anon7791 = enum(u32) {
    kATSUStronglyHorizontal = 0,
    kATSUStronglyVertical = 1,
};

pub const anon9191 = enum(u32) {
    kGlyphCollectionGID = 0,
    kGlyphCollectionAdobeCNS1 = 1,
    kGlyphCollectionAdobeGB1 = 2,
    kGlyphCollectionAdobeJapan1 = 3,
    kGlyphCollectionAdobeJapan2 = 4,
    kGlyphCollectionAdobeKorea1 = 5,
    kGlyphCollectionUnspecified = 255,
};

pub const anon9321 = enum(u32) {
    kPlotIconRefNormalFlags = 0,
    kPlotIconRefNoImage = 2,
    kPlotIconRefNoMask = 4,
};

pub const anon14521 = enum(u32) {
    cmGray8Space = 10250,
    cmGray16Space = 10,
    cmGray16LSpace = 16394,
    cmGrayA16Space = 8330,
    cmGrayA32Space = 138,
    cmGrayA32LSpace = 16522,
    cmGrayA16PmulSpace = 8394,
    cmGrayA32PmulSpace = 202,
    cmGrayA32LPmulSpace = 16586,
    cmRGB16Space = 1281,
    cmRGB16LSpace = 17665,
    cmRGB565Space = 1537,
    cmRGB565LSpace = 17921,
    cmRGB24Space = 8449,
    cmRGB32Space = 2049,
    cmRGB48Space = 10497,
    cmRGB48LSpace = 26881,
    cmARGB32Space = 6273,
    cmARGB64Space = 14977,
    cmARGB64LSpace = 31361,
    cmRGBA32Space = 2177,
    cmRGBA64Space = 10881,
    cmRGBA64LSpace = 27265,
    cmARGB32PmulSpace = 6337,
    cmARGB64PmulSpace = 15041,
    cmARGB64LPmulSpace = 31425,
    cmRGBA32PmulSpace = 2241,
    cmRGBA64PmulSpace = 10945,
    cmRGBA64LPmulSpace = 27329,
    cmCMYK32Space = 2050,
    cmCMYK64Space = 10754,
    cmCMYK64LSpace = 27138,
    cmHSV32Space = 2563,
    cmHLS32Space = 2564,
    cmYXY32Space = 2565,
    cmXYZ24Space = 8454,
    cmXYZ32Space = 2566,
    cmXYZ48Space = 10502,
    cmXYZ48LSpace = 26886,
    cmLUV32Space = 2567,
    cmLAB24Space = 8456,
    cmLAB32Space = 2568,
    cmLAB48Space = 10504,
    cmLAB48LSpace = 26888,
    cmGamutResult1Space = 2828,
    cmNamedIndexed32Space = 10000,
    cmNamedIndexed32LSpace = 26384,
    cmMCFive8Space = 8721,
    cmMCSix8Space = 8978,
    cmMCSeven8Space = 9235,
    cmMCEight8Space = 9492,
};

pub const anon18441 = enum(u32) {
    cmDeviceInfoVersion1 = 65536,
    cmDeviceProfileInfoVersion1 = 65536,
    cmDeviceProfileInfoVersion2 = 131072,
};

pub const anon18681 = enum(i32) {
    cmDeviceStateDefault = 0,
    cmDeviceStateOffline = 1,
    cmDeviceStateBusy = 2,
    cmDeviceStateForceNotify = -2147483648,
    cmDeviceStateDeviceRsvdBits = 16711680,
    cmDeviceStateAppleRsvdBits = -16711681,
};

pub const anon821 = enum(u32) {
    kPMUnknownColorSpaceModel = 0,
    kPMGrayColorSpaceModel = 1,
    kPMRGBColorSpaceModel = 2,
    kPMCMYKColorSpaceModel = 3,
    kPMDevNColorSpaceModel = 4,
};

pub const anon451 = enum(u32) {
    launchContinue = 16384,
    launchNoFileFlags = 2048,
    launchUseMinimum = 1024,
    launchDontSwitch = 512,
    launchAllow24Bit = 256,
    launchInhibitDaemon = 128,
};

pub const anon1041 = enum(u32) {
    kATSFlatDataUstlVersion0 = 0,
    kATSFlatDataUstlVersion1 = 1,
    kATSFlatDataUstlVersion2 = 2,
    kATSFlatDataUstlCurrentVersion = 2,
};

pub const anon1201 = enum(i32) {
    badTranslationRefErr = -3031,
};

pub const anon551 = enum(u32) {
    kATSUFlattenOptionNoOptionsMask = 0,
};

pub const anon671 = enum(u32) {
    atNone = 0,
    atVerticalCenter = 1,
    atTop = 2,
    atBottom = 3,
    atHorizontalCenter = 4,
    atAbsoluteCenter = 5,
    atCenterTop = 6,
    atCenterBottom = 7,
    atLeft = 8,
    atCenterLeft = 9,
    atTopLeft = 10,
    atBottomLeft = 11,
    atRight = 12,
    atCenterRight = 13,
    atTopRight = 14,
    atBottomRight = 15,
};

pub const anon1161 = enum(i32) {
    kInvalidGeneration = 0,
    kInvalidFontFamily = -1,
    kInvalidFont = 0,
};

pub const anon1251 = enum(objc.UInt32) {
    kAudioUnitSubType_SpeechSynthesis = 1953788784,
    kAudioUnitProperty_Voice = 3330,
    kAudioUnitProperty_SpeechChannel = 3331,
};

pub const anon1301 = enum(u32) {
    kPMDuplexNone = 1,
    kPMDuplexNoTumble = 2,
    kPMDuplexTumble = 3,
    kPMSimplexTumble = 4,
};

pub const anon1371 = enum(u32) {
    kFMTrueTypeFontTechnology = 1953658213,
    kFMPostScriptFontTechnology = 1954115633,
};

pub const anon2211 = enum(u32) {
    cmPS2CRDVMSizeTag = 1886615149,
    cmVideoCardGammaTag = 1986226036,
    cmMakeAndModelTag = 1835888484,
    cmProfileDescriptionMLTag = 1685283693,
    cmNativeDisplayInfoTag = 1852074350,
};

pub const anon2911 = enum(u32) {
    kICMapBinaryMask = 1,
    kICMapResourceForkMask = 2,
    kICMapDataForkMask = 4,
    kICMapPostMask = 8,
    kICMapNotIncomingMask = 16,
    kICMapNotOutgoingMask = 32,
};

pub const anon3181 = enum(u32) {
    kICServicesTCPMask = 1,
    kICServicesUDPMask = 2,
};

pub const anon3301 = enum(u32) {
    kATSCubicCurveType = 1,
    kATSQuadCurveType = 2,
    kATSOtherCurveType = 3,
};

pub const anon8151 = enum(u32) {
    kATSUDefaultFontFallbacks = 0,
    kATSULastResortOnlyFallback = 1,
    kATSUSequentialFallbacksPreferred = 2,
    kATSUSequentialFallbacksExclusive = 3,
};

pub const anon661 = enum(u32) {
    kPMPortrait = 1,
    kPMLandscape = 2,
    kPMReversePortrait = 3,
    kPMReverseLandscape = 4,
};

pub const anon911 = enum(u32) {
    cmMagicNumber = 1633907568,
};

pub const anon2301 = enum(u32) {
    cmSigCrdInfoType = 1668441193,
    cmSigCurveType = 1668641398,
    cmSigDataType = 1684108385,
    cmSigDateTimeType = 1685350765,
    cmSigLut16Type = 1835430962,
    cmSigLut8Type = 1835430961,
    cmSigMeasurementType = 1835360627,
    cmSigMultiFunctA2BType = 1832993312,
    cmSigMultiFunctB2AType = 1833058592,
    cmSigNamedColorType = 1852010348,
    cmSigNamedColor2Type = 1852009522,
    cmSigParametricCurveType = 1885434465,
    cmSigProfileDescriptionType = 1684370275,
    cmSigProfileSequenceDescType = 1886610801,
    cmSigScreeningType = 1935897198,
    cmSigS15Fixed16Type = 1936077618,
    cmSigSignatureType = 1936287520,
    cmSigTextType = 1952807028,
    cmSigU16Fixed16Type = 1969632050,
    cmSigU1Fixed15Type = 1969631542,
    cmSigUInt8Type = 1969827896,
    cmSigUInt16Type = 1969828150,
    cmSigUInt32Type = 1969828658,
    cmSigUInt64Type = 1969829428,
    cmSigUcrBgType = 1650877472,
    cmSigUnicodeTextType = 1970567284,
    cmSigViewingConditionsType = 1986618743,
    cmSigXYZType = 1482250784,
};

pub const anon2721 = enum(u32) {
    cmTechnologyDigitalCamera = 1684234605,
    cmTechnologyFilmScanner = 1718838126,
    cmTechnologyReflectiveScanner = 1920164718,
    cmTechnologyInkJetPrinter = 1768580468,
    cmTechnologyThermalWaxPrinter = 1953980792,
    cmTechnologyElectrophotographicPrinter = 1701865583,
    cmTechnologyElectrostaticPrinter = 1702065249,
    cmTechnologyDyeSublimationPrinter = 1685288290,
    cmTechnologyPhotographicPaperPrinter = 1919969391,
    cmTechnologyFilmWriter = 1718645358,
    cmTechnologyVideoMonitor = 1986618477,
    cmTechnologyVideoCamera = 1986618467,
    cmTechnologyProjectionTelevision = 1886024822,
    cmTechnologyCRTDisplay = 1129468960,
    cmTechnologyPMDisplay = 1347240992,
    cmTechnologyAMDisplay = 1095582752,
    cmTechnologyPhotoCD = 1263551300,
    cmTechnologyPhotoImageSetter = 1768777587,
    cmTechnologyGravure = 1735549302,
    cmTechnologyOffsetLithography = 1868981875,
    cmTechnologySilkscreen = 1936288875,
    cmTechnologyFlexography = 1718379896,
};

pub const anon2761 = enum(i32) {
    kProcessDictionaryIncludeAllInformationMask = -1,
};

pub const anon2871 = enum(u32) {
    kATSFontFormatUnspecified = 0,
};

pub const anon3221 = enum(u32) {
    kATSItalicQDSkew = 16384,
    kATSBoldQDStretch = 98304,
    kATSRadiansFactor = 1144,
};

pub const anon1651 = enum(u32) {
    kPMHideInlineItems = 0,
    kPMShowDefaultInlineItems = 32768,
    kPMShowInlineCopies = 1,
    kPMShowInlinePageRange = 2,
    kPMShowInlinePageRangeWithSelection = 64,
    kPMShowInlinePaperSize = 4,
    kPMShowInlineOrientation = 8,
    kPMShowInlineScale = 128,
    kPMShowPageAttributesPDE = 256,
};

pub const anon1111 = enum(u32) {
    k1MonochromePixelFormat = 1,
    k2IndexedPixelFormat = 2,
    k4IndexedPixelFormat = 4,
    k8IndexedPixelFormat = 8,
    k16BE555PixelFormat = 16,
    k24RGBPixelFormat = 24,
    k32ARGBPixelFormat = 32,
    k1IndexedGrayPixelFormat = 33,
    k2IndexedGrayPixelFormat = 34,
    k4IndexedGrayPixelFormat = 36,
    k8IndexedGrayPixelFormat = 40,
    k16LE555PixelFormat = 1278555445,
    k16LE5551PixelFormat = 892679473,
    k16BE565PixelFormat = 1110783541,
    k16LE565PixelFormat = 1278555701,
    k24BGRPixelFormat = 842285639,
    k32BGRAPixelFormat = 1111970369,
    k32ABGRPixelFormat = 1094862674,
    k32RGBAPixelFormat = 1380401729,
    kYUVSPixelFormat = 2037741171,
    kYUVUPixelFormat = 2037741173,
    kYVU9PixelFormat = 1498830137,
    kYUV411PixelFormat = 1496592689,
    kYVYU422PixelFormat = 1498831189,
    kUYVY422PixelFormat = 1431918169,
    kYUV211PixelFormat = 1496461617,
    k2vuyPixelFormat = 846624121,
};

pub const anon1531 = enum(u32) {
    kPMBorderSingleHairline = 1,
    kPMBorderDoubleHairline = 2,
    kPMBorderSingleThickline = 3,
    kPMBorderDoubleThickline = 4,
};

pub const anon1631 = enum(u32) {
    cmPrtrDefaultScreens = 0,
    cmLinesPer = 1,
};

pub const anon1731 = enum(u32) {
    kInternetEventClass = 1196773964,
    kAEGetURL = 1196773964,
    kAEFetchURL = 1179996748,
    keyAEAttaching = 1098146664,
};

pub const anon831 = enum(u32) {
    kATSOptionFlagsActivateDisabled = 32,
    kATSOptionFlagsProcessSubdirectories = 64,
    kATSOptionFlagsDoNotNotify = 128,
    kATSOptionFlagsRecordPersistently = 262144,
};

pub const anon1611 = enum(u32) {
    kICNoUserInteractionMask = 1,
};

pub const anon621 = enum(objc.OSType) {
    soStatus = 1937006964,
    soErrors = 1701999215,
    soInputMode = 1768845428,
    soCharacterMode = 1667785074,
    soNumberMode = 1852662386,
    soRate = 1918989413,
    soPitchBase = 1885495667,
    soPitchMod = 1886220132,
    soVolume = 1987013741,
    soSynthType = 1986359923,
    soRecentSync = 1937337955,
    soPhonemeSymbols = 1885893497,
    soCurrentVoice = 1668706168,
    soCommandDelimiter = 1684826477,
    soReset = 1920165236,
    soCurrentA5 = 1836663093,
    soRefCon = 1919247971,
    soTextDoneCallBack = 1952736098,
    soSpeechDoneCallBack = 1935958882,
    soSyncCallBack = 1937335138,
    soErrorCallBack = 1701995362,
    soPhonemeCallBack = 1885889378,
    soWordCallBack = 2003067746,
    soSynthExtension = 2020896356,
    soSoundOutput = 1936614511,
    soOutputToFileWithCFURL = 1869635942,
    soOutputToExtAudioFile = 1869635960,
    soOutputToAudioDevice = 1869635940,
    soPhonemeOptions = 1886351476,
};

pub const anon1221 = enum(u32) {
    kFMCurrentFilterFormat = 0,
};

pub const anon1811 = enum(u32) {
    kICEditPreferenceEventClass = 1229144432,
    kICEditPreferenceEvent = 1229144432,
    keyICEditPreferenceDestination = 1684370292,
};

pub const anon3001 = enum(u32) {
    cmFlare0 = 0,
    cmFlare100 = 1,
};

pub const anon761 = enum(u32) {
    cmICCProfileVersion4 = 67108864,
    cmICCProfileVersion2 = 33554432,
    cmICCProfileVersion21 = 34603008,
    cmCS2ProfileVersion = 33554432,
    cmCS1ProfileVersion = 256,
};

pub const anon941 = enum(u32) {
    kPMQualityLowest = 0,
    kPMQualityInkSaver = 1,
    kPMQualityDraft = 4,
    kPMQualityNormal = 8,
    kPMQualityPhoto = 11,
    kPMQualityBest = 13,
    kPMQualityHighest = 15,
};

pub const anon1281 = enum(u32) {
    kICAttrNoChange = -1,
    kICAttrLockedMask = 1,
    kICAttrVolatileMask = 2,
};

pub const anon1741 = enum(u32) {
    cmAToB0Tag = 1093812784,
    cmAToB1Tag = 1093812785,
    cmAToB2Tag = 1093812786,
    cmBlueColorantTag = 1649957210,
    cmBlueTRCTag = 1649693251,
    cmBToA0Tag = 1110589744,
    cmBToA1Tag = 1110589745,
    cmBToA2Tag = 1110589746,
    cmCalibrationDateTimeTag = 1667329140,
    cmChromaticAdaptationTag = 1667785060,
    cmCharTargetTag = 1952543335,
    cmCopyrightTag = 1668313716,
    cmDeviceMfgDescTag = 1684893284,
    cmDeviceModelDescTag = 1684890724,
    cmGamutTag = 1734438260,
    cmGrayTRCTag = 1800688195,
    cmGreenColorantTag = 1733843290,
    cmGreenTRCTag = 1733579331,
    cmLuminanceTag = 1819635049,
    cmMeasurementTag = 1835360627,
    cmMediaBlackPointTag = 1651208308,
    cmMediaWhitePointTag = 2004119668,
    cmNamedColorTag = 1852010348,
    cmNamedColor2Tag = 1852009522,
    cmPreview0Tag = 1886545200,
    cmPreview1Tag = 1886545201,
    cmPreview2Tag = 1886545202,
    cmProfileDescriptionTag = 1684370275,
    cmProfileSequenceDescTag = 1886610801,
    cmPS2CRD0Tag = 1886610480,
    cmPS2CRD1Tag = 1886610481,
    cmPS2CRD2Tag = 1886610482,
    cmPS2CRD3Tag = 1886610483,
    cmPS2CSATag = 1886597747,
    cmPS2RenderingIntentTag = 1886597737,
    cmRedColorantTag = 1918392666,
    cmRedTRCTag = 1918128707,
    cmScreeningDescTag = 1935897188,
    cmScreeningTag = 1935897198,
    cmTechnologyTag = 1952801640,
    cmUcrBgTag = 1650877472,
    cmViewingConditionsDescTag = 1987405156,
    cmViewingConditionsTag = 1986618743,
};

pub const anon2201 = enum(i32) {
    kPMInvalidPrintSession = -30879,
    kPMInvalidPrinter = -30880,
    kPMObjectInUse = -30881,
    kPMInvalidPreset = -30899,
};

pub const anon8331 = enum(u32) {
    cmVideoCardGammaTableType = 0,
    cmVideoCardGammaFormulaType = 1,
};

pub const anon8751 = enum(u32) {
    initDev = 0,
    hitDev = 1,
    closeDev = 2,
    nulDev = 3,
    updateDev = 4,
    activDev = 5,
    deactivDev = 6,
    keyEvtDev = 7,
    macDev = 8,
    undoDev = 9,
    cutDev = 10,
    copyDev = 11,
    pasteDev = 12,
    clearDev = 13,
    cursorDev = 14,
};

pub const anon2781 = enum(u32) {
    kICMapFixedLength = 22,
};

pub const anon2921 = enum(u32) {
    kQuitBeforeNormalTimeMask = 1,
    kQuitAtNormalTimeMask = 2,
    kQuitBeforeFBAsQuitMask = 4,
    kQuitBeforeShellQuitsMask = 8,
    kQuitBeforeTerminatorAppQuitsMask = 16,
    kQuitNeverMask = 32,
    kQuitOptionsMask = 127,
    kQuitNotQuitDuringInstallMask = 256,
    kQuitNotQuitDuringLogoutMask = 512,
};

pub const anon851 = enum(i32) {
    cmProfileMajorVersionMask = -16777216,
    cmCurrentProfileMajorVersion = 33554432,
};

pub const anon1901 = enum(u32) {
    kICComponentVersion = 0,
    kICNumVersion = 1,
};

pub const anon10431 = enum(u32) {
    kATSUBackgroundColor = 0,
    kATSUBackgroundCallback = 1,
};

pub const anon1021 = enum(i32) {
    badPasteboardSyncErr = -25130,
    badPasteboardIndexErr = -25131,
    badPasteboardItemErr = -25132,
    badPasteboardFlavorErr = -25133,
    duplicatePasteboardFlavorErr = -25134,
    notPasteboardOwnerErr = -25135,
    noPasteboardPromiseKeeperErr = -25136,
};

pub const anon1151 = enum(objc.SInt32) {
    kSpeechGenerateTune = 1,
    kSpeechRelativePitch = 2,
    kSpeechRelativeDuration = 4,
    kSpeechShowSyllables = 8,
};

pub const anon1561 = enum(u32) {
    kPMCoverPageNone = 1,
    kPMCoverPageBefore = 2,
    kPMCoverPageAfter = 3,
};

pub const anon8681 = enum(u32) {
    kATSULeftTab = 0,
    kATSUCenterTab = 1,
    kATSURightTab = 2,
    kATSUDecimalTab = 3,
    kATSUNumberTabTypes = 4,
};

pub const anon541 = enum(u32) {
    kPMDestinationInvalid = 0,
    kPMDestinationPrinter = 1,
    kPMDestinationFile = 2,
    kPMDestinationFax = 3,
    kPMDestinationPreview = 4,
    kPMDestinationProcessPDF = 5,
};

pub const anon351 = enum(i32) {
    kPMAllocationFailure = -108,
    kPMInternalError = -30870,
    kPMInvalidIndex = -30882,
    kPMStringConversionFailure = -30883,
    kPMXMLParseError = -30884,
    kPMInvalidJobTemplate = -30885,
    kPMInvalidPrinterInfo = -30886,
    kPMInvalidConnection = -30887,
    kPMInvalidKey = -30888,
    kPMInvalidValue = -30889,
    kPMInvalidAllocator = -30890,
    kPMInvalidTicket = -30891,
    kPMInvalidItem = -30892,
    kPMInvalidType = -30893,
    kPMInvalidReply = -30894,
    kPMInvalidFileType = -30895,
    kPMInvalidObject = -30896,
    kPMInvalidPaper = -30897,
    kPMInvalidCalibrationTarget = -30898,
    kPMNoDefaultItem = -9500,
    kPMNoDefaultSettings = -9501,
    kPMInvalidPDEContext = -9530,
    kPMDontSwitchPDEError = -9531,
    kPMUnableToFindProcess = -9532,
    kPMFeatureNotInstalled = -9533,
    kPMInvalidPBMRef = -9540,
    kPMNoSelectedPrinters = -9541,
    kPMInvalidLookupSpec = -9542,
    kPMSyncRequestFailed = -9543,
    kPMEditRequestFailed = -9544,
    kPMPrBrowserNoUI = -9545,
    kPMTicketTypeNotFound = -9580,
    kPMUpdateTicketFailed = -9581,
    kPMValidateTicketFailed = -9582,
    kPMSubTicketNotFound = -9583,
    kPMInvalidSubTicket = -9584,
    kPMDeleteSubTicketFailed = -9585,
    kPMItemIsLocked = -9586,
    kPMTicketIsLocked = -9587,
    kPMTemplateIsLocked = -9588,
    kPMKeyNotFound = -9589,
    kPMKeyNotUnique = -9590,
    kPMUnknownDataType = -9591,
    kPMCreateMessageFailed = -9620,
    kPMServerCommunicationFailed = -9621,
    kPMKeyOrValueNotFound = -9623,
    kPMMessagingError = -9624,
    kPMServerNotFound = -9630,
    kPMServerAlreadyRunning = -9631,
    kPMServerSuspended = -9632,
    kPMServerAttributeRestricted = -9633,
    kPMFileOrDirOperationFailed = -9634,
    kPMUserOrGroupNotFound = -9635,
    kPMPermissionError = -9636,
    kPMUnknownMessage = -9637,
    kPMQueueNotFound = -9638,
    kPMQueueAlreadyExists = -9639,
    kPMQueueJobFailed = -9640,
    kPMJobNotFound = -9641,
    kPMJobBusy = -9642,
    kPMJobCanceled = -9643,
    kPMDocumentNotFound = -9644,
    kPMPMSymbolNotFound = -9660,
    kPMIOMSymbolNotFound = -9661,
    kPMCVMSymbolNotFound = -9662,
    kPMInvalidPMContext = -9663,
    kPMInvalidIOMContext = -9664,
    kPMInvalidCVMContext = -9665,
    kPMInvalidJobID = -9666,
    kPMNoPrinterJobID = -9667,
    kPMJobStreamOpenFailed = -9668,
    kPMJobStreamReadFailed = -9669,
    kPMJobStreamEndError = -9670,
    kPMJobManagerAborted = -9671,
    kPMJobGetTicketBadFormatError = -9672,
    kPMJobGetTicketReadError = -9673,
    kPMPluginNotFound = -9701,
    kPMPluginRegisterationFailed = -9702,
    kPMFontNotFound = -9703,
    kPMFontNameTooLong = -9704,
    kPMGeneralCGError = -9705,
    kPMInvalidState = -9706,
    kPMUnexpectedImagingError = -9707,
    kPMInvalidPrinterAddress = -9780,
    kPMOpenFailed = -9781,
    kPMReadFailed = -9782,
    kPMWriteFailed = -9783,
    kPMStatusFailed = -9784,
    kPMCloseFailed = -9785,
    kPMUnsupportedConnection = -9786,
    kPMIOAttrNotAvailable = -9787,
    kPMReadGotZeroData = -9788,
    kPMLastErrorCodeToMakeMaintenanceOfThisListEasier = -9799,
};

pub const anon1801 = enum(u32) {
    kATSULineWidthTag = 1,
    kATSULineRotationTag = 2,
    kATSULineDirectionTag = 3,
    kATSULineJustificationFactorTag = 4,
    kATSULineFlushFactorTag = 5,
    kATSULineBaselineValuesTag = 6,
    kATSULineLayoutOptionsTag = 7,
    kATSULineAscentTag = 8,
    kATSULineDescentTag = 9,
    kATSULineLangRegionTag = 10,
    kATSULineTextLocatorTag = 11,
    kATSULineTruncationTag = 12,
    kATSULineFontFallbacksTag = 13,
    kATSULineDecimalTabCharacterTag = 14,
    kATSULayoutOperationOverrideTag = 15,
    kATSULineHighlightCGColorTag = 17,
    kATSUMaxLineTag = 18,
    kATSULineLanguageTag = 10,
    kATSUCGContextTag = 32767,
    kATSUQDBoldfaceTag = 256,
    kATSUQDItalicTag = 257,
    kATSUQDUnderlineTag = 258,
    kATSUQDCondensedTag = 259,
    kATSUQDExtendedTag = 260,
    kATSUFontTag = 261,
    kATSUSizeTag = 262,
    kATSUColorTag = 263,
    kATSULangRegionTag = 264,
    kATSUVerticalCharacterTag = 265,
    kATSUImposeWidthTag = 266,
    kATSUBeforeWithStreamShiftTag = 267,
    kATSUAfterWithStreamShiftTag = 268,
    kATSUCrossStreamShiftTag = 269,
    kATSUTrackingTag = 270,
    kATSUHangingInhibitFactorTag = 271,
    kATSUKerningInhibitFactorTag = 272,
    kATSUDecompositionFactorTag = 273,
    kATSUBaselineClassTag = 274,
    kATSUPriorityJustOverrideTag = 275,
    kATSUNoLigatureSplitTag = 276,
    kATSUNoCaretAngleTag = 277,
    kATSUSuppressCrossKerningTag = 278,
    kATSUNoOpticalAlignmentTag = 279,
    kATSUForceHangingTag = 280,
    kATSUNoSpecialJustificationTag = 281,
    kATSUStyleTextLocatorTag = 282,
    kATSUStyleRenderingOptionsTag = 283,
    kATSUAscentTag = 284,
    kATSUDescentTag = 285,
    kATSULeadingTag = 286,
    kATSUGlyphSelectorTag = 287,
    kATSURGBAlphaColorTag = 288,
    kATSUFontMatrixTag = 289,
    kATSUStyleUnderlineCountOptionTag = 290,
    kATSUStyleUnderlineColorOptionTag = 291,
    kATSUStyleStrikeThroughTag = 292,
    kATSUStyleStrikeThroughCountOptionTag = 293,
    kATSUStyleStrikeThroughColorOptionTag = 294,
    kATSUStyleDropShadowTag = 295,
    kATSUStyleDropShadowBlurOptionTag = 296,
    kATSUStyleDropShadowOffsetOptionTag = 297,
    kATSUStyleDropShadowColorOptionTag = 298,
    kATSUMaxStyleTag = 299,
    kATSULanguageTag = 264,
    kATSUMaxATSUITagValue = 65535,
};

pub const anon2191 = enum(u32) {
    kNoConstraint = 0,
    kVerticalConstraint = 1,
    kHorizontalConstraint = 2,
};

pub const anon2621 = enum(u32) {
    cmSigPS2CRDVMSizeType = 1886615149,
    cmSigVideoCardGammaType = 1986226036,
    cmSigMakeAndModelType = 1835888484,
    cmSigNativeDisplayInfoType = 1852074350,
    cmSigMultiLocalizedUniCodeType = 1835824483,
};

pub const anon771 = enum(u32) {
    kATSFontContextUnspecified = 0,
    kATSFontContextGlobal = 1,
    kATSFontContextLocal = 2,
};

pub const anon12141 = enum(i32) {
    kNoTransform = 0,
    kUseAtoB = 1,
    kUseBtoA = 2,
    kUseBtoB = 3,
    kDeviceToPCS = 1,
    kPCSToDevice = 2,
    kPCSToPCS = 3,
    kUseProfileIntent = -1,
};

pub const anon14691 = enum(u32) {
    kATSFontAutoActivationDefault = 0,
    kATSFontAutoActivationDisabled = 1,
    kATSFontAutoActivationEnabled = 2,
    kATSFontAutoActivationAsk = 4,
};

pub const Point = core_foundation.CGPoint;

pub const FMGeneration = objc.UInt32;

pub const FMFontFamily = objc.SInt16;

pub const FMFontStyle = objc.SInt16;

pub const FMFontSize = objc.SInt16;

pub const FMFont = objc.UInt32;

pub const FMFontFamilyInstance = extern struct {
    fontFamily: FMFontFamily,
    fontStyle: FMFontStyle,
};

pub const FMFontFamilyIterator = extern struct {
    reserved: [16]objc.UInt32,
};

pub const FMFontIterator = extern struct {
    reserved: [16]objc.UInt32,
};

pub const FMFontFamilyInstanceIterator = extern struct {
    reserved: [16]objc.UInt32,
};

pub const FMFilterSelector = objc.UInt32;

pub const OptionFlags = objc.OptionBits;

pub const Generation = objc.UInt32;

pub const FontContainerRef = objc.UInt32;

pub const FontFamilyRef = objc.UInt32;

pub const FontRef = objc.UInt32;

pub const GlyphRef = objc.UInt16;

pub const FontSize = core_foundation.CGFloat;

pub const FontFormat = objc.UInt32;

pub const FontMetrics = extern struct {
    version: objc.UInt32,
    ascent: core_foundation.CGFloat,
    descent: core_foundation.CGFloat,
    leading: core_foundation.CGFloat,
    avgAdvanceWidth: core_foundation.CGFloat,
    maxAdvanceWidth: core_foundation.CGFloat,
    minLeftSideBearing: core_foundation.CGFloat,
    minRightSideBearing: core_foundation.CGFloat,
    stemWidth: core_foundation.CGFloat,
    stemHeight: core_foundation.CGFloat,
    capHeight: core_foundation.CGFloat,
    xHeight: core_foundation.CGFloat,
    italicAngle: core_foundation.CGFloat,
    underlinePosition: core_foundation.CGFloat,
    underlineThickness: core_foundation.CGFloat,
};

pub const CurveType = objc.UInt16;

pub const UCurvePath = extern struct {
    vectors: objc.UInt32,
    controlBits: [1]objc.UInt32,
    vector: [1]Point,
};

pub const UCurvePaths = extern struct {
    contours: objc.UInt32,
    contour: [1]UCurvePath,
};

pub const GlyphIdealMetrics = extern struct {
    advance: Point,
    sideBearing: Point,
    otherSideBearing: Point,
};

pub const GlyphScreenMetrics = extern struct {
    deviceAdvance: Point,
    topLeft: Point,
    height: objc.UInt32,
    width: objc.UInt32,
    sideBearing: Point,
    otherSideBearing: Point,
};

pub const GlyphID = GlyphRef;

pub const ULayoutOperationSelector = objc.UInt32;

pub const anon1031 = enum(u32) {
    kATSULayoutOperationNone = 0,
    kATSULayoutOperationJustification = 1,
    kATSULayoutOperationMorph = 2,
    kATSULayoutOperationKerningAdjustment = 4,
    kATSULayoutOperationBaselineAdjustment = 8,
    kATSULayoutOperationTrackingAdjustment = 16,
    kATSULayoutOperationPostLayoutAdjustment = 32,
    kATSULayoutOperationAppleReserved = -64,
};

pub const ULayoutOperationCallbackStatus = objc.UInt32;

pub const LineLayoutOptions = objc.UInt32;

pub const StyleRenderingOptions = objc.UInt32;

pub const GlyphInfoFlags = objc.UInt32;

pub const LayoutRecord = extern struct {
    glyphID: GlyphRef,
    flags: GlyphInfoFlags,
    originalOffset: objc.ByteCount,
    realPos: objc.Fixed,
};

pub const Trapezoid = extern struct {
    upperLeft: objc.FixedPoint,
    upperRight: objc.FixedPoint,
    lowerRight: objc.FixedPoint,
    lowerLeft: objc.FixedPoint,
};

pub const JustWidthDeltaEntryOverride = extern struct {
    beforeGrowLimit: objc.Fixed,
    beforeShrinkLimit: objc.Fixed,
    afterGrowLimit: objc.Fixed,
    afterShrinkLimit: objc.Fixed,
    growFlags: core_text.JustificationFlags,
    shrinkFlags: core_text.JustificationFlags,
};

pub const JustPriorityWidthDeltaOverrides = [4]JustWidthDeltaEntryOverride;

pub const anon3201 = enum(u32) {
    cmIlluminantUnknown = 0,
    cmIlluminantD50 = 1,
    cmIlluminantD65 = 2,
    cmIlluminantD93 = 3,
    cmIlluminantF2 = 4,
    cmIlluminantD55 = 5,
    cmIlluminantA = 6,
    cmIlluminantEquiPower = 7,
    cmIlluminantF8 = 8,
};

pub const anon251 = enum(u32) {
    kFontNoPlatform = -1,
    kFontNoScript = -1,
    kFontNoLanguage = -1,
    kFontNoName = -1,
};

pub const FontContext = objc.UInt32;

pub const FontFamilyApplierFunction = ?*const fn (FontFamilyRef, ?*anyopaque) callconv(.C) objc.OSStatus;

pub const FontApplierFunction = ?*const fn (FontRef, ?*anyopaque) callconv(.C) objc.OSStatus;

pub const FontFamilyIterator_ = extern struct {};

pub const FontFamilyIterator = ?*FontFamilyIterator_;

pub const FontIterator_ = extern struct {};

pub const FontIterator = ?*FontIterator_;

pub const FontFilterSelector = enum(u32) {
    kATSFontFilterSelectorUnspecified = 0,
    kATSFontFilterSelectorGeneration = 3,
    kATSFontFilterSelectorFontFamily = 7,
    kATSFontFilterSelectorFontFamilyApplierFunction = 8,
    kATSFontFilterSelectorFontApplierFunction = 9,
    kATSFileReferenceFilterSelector = 10,
};

pub const FontFilter = extern struct {
    version: objc.UInt32,
    filterSelector: FontFilterSelector,
    filter: anon1213,
};

pub const anon1213 = extern union {
    generationFilter: Generation,
    fontFamilyFilter: FontFamilyRef,
    fontFamilyApplierFunctionFilter: FontFamilyApplierFunction,
    fontApplierFunctionFilter: FontApplierFunction,
};

pub const FontNotificationRef_ = extern struct {};

pub const FontNotificationRef = ?*FontNotificationRef_;

pub const FontNotificationInfoRef_ = extern struct {};

pub const FontNotificationInfoRef = ?*FontNotificationInfoRef_;

pub const FontNotifyOption = enum(u32) {
    kATSFontNotifyOptionDefault = 0,
    kATSFontNotifyOptionReceiveWhileSuspended = 1,
};

pub const FontNotifyAction = enum(u32) {
    kATSFontNotifyActionFontsChanged = 1,
    kATSFontNotifyActionDirectoriesChanged = 2,
};

pub const NotificationCallback = ?*const fn (FontNotificationInfoRef, ?*anyopaque) callconv(.C) void;

extern "ApplicationServices" fn ATSGetGeneration() callconv(.C) Generation;
pub const getGeneration = ATSGetGeneration;

extern "ApplicationServices" fn ATSFontActivateFromMemory(
    iData: objc.LogicalAddress,
    iLength: objc.ByteCount,
    iContext: FontContext,
    iFormat: FontFormat,
    iReserved: ?*anyopaque,
    iOptions: OptionFlags,
    oContainer: ?*FontContainerRef,
) callconv(.C) objc.OSStatus;
pub const fontActivateFromMemory = ATSFontActivateFromMemory;

extern "ApplicationServices" fn ATSFontDeactivate(iContainer: FontContainerRef, iRefCon: ?*anyopaque, iOptions: OptionFlags) callconv(.C) objc.OSStatus;
pub const fontDeactivate = ATSFontDeactivate;

extern "ApplicationServices" fn ATSFontGetContainer(iFont: FontRef, iOptions: OptionFlags, oContainer: ?*FontContainerRef) callconv(.C) objc.OSStatus;
pub const fontGetContainer = ATSFontGetContainer;

extern "ApplicationServices" fn ATSFontSetEnabled(iFont: FontRef, iOptions: OptionFlags, iEnabled: objc.Boolean) callconv(.C) objc.OSStatus;
pub const fontSetEnabled = ATSFontSetEnabled;

extern "ApplicationServices" fn ATSFontIsEnabled(iFont: FontRef) callconv(.C) objc.Boolean;
pub const fontIsEnabled = ATSFontIsEnabled;

extern "ApplicationServices" fn ATSFontFamilyApplyFunction(iFunction: FontFamilyApplierFunction, iRefCon: ?*anyopaque) callconv(.C) objc.OSStatus;
pub const fontFamilyApplyFunction = ATSFontFamilyApplyFunction;

extern "ApplicationServices" fn ATSFontFamilyIteratorCreate(
    iContext: FontContext,
    iFilter: ?*FontFilter,
    iRefCon: ?*anyopaque,
    iOptions: OptionFlags,
    ioIterator: ?*FontFamilyIterator,
) callconv(.C) objc.OSStatus;
pub const fontFamilyIteratorCreate = ATSFontFamilyIteratorCreate;

extern "ApplicationServices" fn ATSFontFamilyIteratorRelease(ioIterator: ?*FontFamilyIterator) callconv(.C) objc.OSStatus;
pub const fontFamilyIteratorRelease = ATSFontFamilyIteratorRelease;

extern "ApplicationServices" fn ATSFontFamilyIteratorReset(
    iContext: FontContext,
    iFilter: ?*FontFilter,
    iRefCon: ?*anyopaque,
    iOptions: OptionFlags,
    ioIterator: ?*FontFamilyIterator,
) callconv(.C) objc.OSStatus;
pub const fontFamilyIteratorReset = ATSFontFamilyIteratorReset;

extern "ApplicationServices" fn ATSFontFamilyIteratorNext(iIterator: FontFamilyIterator, oFamily: ?*FontFamilyRef) callconv(.C) objc.OSStatus;
pub const fontFamilyIteratorNext = ATSFontFamilyIteratorNext;

extern "ApplicationServices" fn ATSFontFamilyFindFromName(iName: core_foundation.StringRef, iOptions: OptionFlags) callconv(.C) FontFamilyRef;
pub const fontFamilyFindFromName = ATSFontFamilyFindFromName;

extern "ApplicationServices" fn ATSFontFamilyGetGeneration(iFamily: FontFamilyRef) callconv(.C) Generation;
pub const fontFamilyGetGeneration = ATSFontFamilyGetGeneration;

extern "ApplicationServices" fn ATSFontFamilyGetName(iFamily: FontFamilyRef, iOptions: OptionFlags, oName: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const fontFamilyGetName = ATSFontFamilyGetName;

extern "ApplicationServices" fn ATSFontApplyFunction(iFunction: FontApplierFunction, iRefCon: ?*anyopaque) callconv(.C) objc.OSStatus;
pub const fontApplyFunction = ATSFontApplyFunction;

extern "ApplicationServices" fn ATSFontIteratorCreate(
    iContext: FontContext,
    iFilter: ?*FontFilter,
    iRefCon: ?*anyopaque,
    iOptions: OptionFlags,
    ioIterator: ?*FontIterator,
) callconv(.C) objc.OSStatus;
pub const fontIteratorCreate = ATSFontIteratorCreate;

extern "ApplicationServices" fn ATSFontIteratorRelease(ioIterator: ?*FontIterator) callconv(.C) objc.OSStatus;
pub const fontIteratorRelease = ATSFontIteratorRelease;

extern "ApplicationServices" fn ATSFontIteratorReset(
    iContext: FontContext,
    iFilter: ?*FontFilter,
    iRefCon: ?*anyopaque,
    iOptions: OptionFlags,
    ioIterator: ?*FontIterator,
) callconv(.C) objc.OSStatus;
pub const fontIteratorReset = ATSFontIteratorReset;

extern "ApplicationServices" fn ATSFontIteratorNext(iIterator: FontIterator, oFont: ?*FontRef) callconv(.C) objc.OSStatus;
pub const fontIteratorNext = ATSFontIteratorNext;

extern "ApplicationServices" fn ATSFontFindFromName(iName: core_foundation.StringRef, iOptions: OptionFlags) callconv(.C) FontRef;
pub const fontFindFromName = ATSFontFindFromName;

extern "ApplicationServices" fn ATSFontFindFromPostScriptName(iName: core_foundation.StringRef, iOptions: OptionFlags) callconv(.C) FontRef;
pub const fontFindFromPostScriptName = ATSFontFindFromPostScriptName;

extern "ApplicationServices" fn ATSFontFindFromContainer(
    iContainer: FontContainerRef,
    iOptions: OptionFlags,
    iCount: objc.ItemCount,
    ioArray: *FontRef,
    oCount: ?*objc.ItemCount,
) callconv(.C) objc.OSStatus;
pub const fontFindFromContainer = ATSFontFindFromContainer;

extern "ApplicationServices" fn ATSFontGetGeneration(iFont: FontRef) callconv(.C) Generation;
pub const fontGetGeneration = ATSFontGetGeneration;

extern "ApplicationServices" fn ATSFontGetName(iFont: FontRef, iOptions: OptionFlags, oName: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const fontGetName = ATSFontGetName;

extern "ApplicationServices" fn ATSFontGetPostScriptName(iFont: FontRef, iOptions: OptionFlags, oName: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const fontGetPostScriptName = ATSFontGetPostScriptName;

extern "ApplicationServices" fn ATSFontGetTableDirectory(
    iFont: FontRef,
    iBufferSize: objc.ByteCount,
    ioBuffer: ?*anyopaque,
    oSize: ?*objc.ByteCount,
) callconv(.C) objc.OSStatus;
pub const fontGetTableDirectory = ATSFontGetTableDirectory;

extern "ApplicationServices" fn ATSFontGetTable(
    iFont: FontRef,
    iTag: objc.FourCharCode,
    iOffset: objc.ByteOffset,
    iBufferSize: objc.ByteCount,
    ioBuffer: ?*anyopaque,
    oSize: ?*objc.ByteCount,
) callconv(.C) objc.OSStatus;
pub const fontGetTable = ATSFontGetTable;

extern "ApplicationServices" fn ATSFontGetHorizontalMetrics(iFont: FontRef, iOptions: OptionFlags, oMetrics: ?*FontMetrics) callconv(.C) objc.OSStatus;
pub const fontGetHorizontalMetrics = ATSFontGetHorizontalMetrics;

extern "ApplicationServices" fn ATSFontGetVerticalMetrics(iFont: FontRef, iOptions: OptionFlags, oMetrics: ?*FontMetrics) callconv(.C) objc.OSStatus;
pub const fontGetVerticalMetrics = ATSFontGetVerticalMetrics;

extern "ApplicationServices" fn ATSFontFamilyFindFromQuickDrawName(iName: objc.ConstStr255Param) callconv(.C) FontFamilyRef;
pub const fontFamilyFindFromQuickDrawName = ATSFontFamilyFindFromQuickDrawName;

extern "ApplicationServices" fn ATSFontFamilyGetQuickDrawName(iFamily: FontFamilyRef, oName: objc.Str255) callconv(.C) objc.OSStatus;
pub const fontFamilyGetQuickDrawName = ATSFontFamilyGetQuickDrawName;

extern "ApplicationServices" fn ATSFontGetFontFamilyResource(
    iFont: FontRef,
    iBufferSize: objc.ByteCount,
    ioBuffer: ?*anyopaque,
    oSize: ?*objc.ByteCount,
) callconv(.C) objc.OSStatus;
pub const fontGetFontFamilyResource = ATSFontGetFontFamilyResource;

extern "ApplicationServices" fn ATSFontNotify(action: FontNotifyAction, info: ?*anyopaque) callconv(.C) objc.OSStatus;
pub const fontNotify = ATSFontNotify;

extern "ApplicationServices" fn ATSFontNotificationSubscribe(
    callback: NotificationCallback,
    options: FontNotifyOption,
    iRefcon: ?*anyopaque,
    oNotificationRef: ?*FontNotificationRef,
) callconv(.C) objc.OSStatus;
pub const fontNotificationSubscribe = ATSFontNotificationSubscribe;

extern "ApplicationServices" fn ATSFontNotificationUnsubscribe(notificationRef: FontNotificationRef) callconv(.C) objc.OSStatus;
pub const fontNotificationUnsubscribe = ATSFontNotificationUnsubscribe;

pub const FontQuerySourceContext = extern struct {
    version: objc.UInt32,
    refCon: ?*anyopaque,
    retain: core_foundation.AllocatorRetainCallBack,
    release: core_foundation.AllocatorReleaseCallBack,
};

pub const FontQueryMessageID = enum(u32) {
    kATSQueryActivateFontMessage = 1635021665,
};

pub const FontQueryCallback = ?*const fn (FontQueryMessageID, core_foundation.PropertyListRef, ?*anyopaque) callconv(.C) core_foundation.PropertyListRef;

extern "ApplicationServices" fn ATSCreateFontQueryRunLoopSource(
    queryOrder: core_foundation.Index,
    sourceOrder: core_foundation.Index,
    callout: FontQueryCallback,
    context: ?*FontQuerySourceContext,
) callconv(.C) core_foundation.RunLoopSourceRef;
pub const createFontQueryRunLoopSource = ATSCreateFontQueryRunLoopSource;

pub const FontAutoActivationSetting = objc.UInt32;

extern "ApplicationServices" fn ATSFontSetGlobalAutoActivationSetting(iSetting: FontAutoActivationSetting) callconv(.C) objc.OSStatus;
pub const fontSetGlobalAutoActivationSetting = ATSFontSetGlobalAutoActivationSetting;

extern "ApplicationServices" fn ATSFontGetGlobalAutoActivationSetting() callconv(.C) FontAutoActivationSetting;
pub const fontGetGlobalAutoActivationSetting = ATSFontGetGlobalAutoActivationSetting;

extern "ApplicationServices" fn ATSFontSetAutoActivationSettingForApplication(iSetting: FontAutoActivationSetting, iApplicationFileURL: core_foundation.URLRef) callconv(.C) objc.OSStatus;
pub const fontSetAutoActivationSettingForApplication = ATSFontSetAutoActivationSettingForApplication;

extern "ApplicationServices" fn ATSFontGetAutoActivationSettingForApplication(iApplicationFileURL: core_foundation.URLRef) callconv(.C) FontAutoActivationSetting;
pub const fontGetAutoActivationSettingForApplication = ATSFontGetAutoActivationSettingForApplication;

pub const anon1341 = enum(u32) {
    kProcessTransformToForegroundApplication = 1,
    kProcessTransformToBackgroundApplication = 2,
    kProcessTransformToUIElementApplication = 4,
};

pub const anon1401 = enum(u32) {
    cmReflective = 0,
    cmGlossy = 1,
};

pub const anon1471 = enum(u32) {
    cmPerceptual = 0,
    cmRelativeColorimetric = 1,
    cmSaturation = 2,
    cmAbsoluteColorimetric = 3,
};

pub const anon1571 = enum(u32) {
    kICNoUserInteractionBit = 0,
};

pub const anon3061 = enum(u32) {
    cmGeometryUnknown = 0,
    cmGeometry045or450 = 1,
    cmGeometry0dord0 = 2,
};

pub const anon3901 = enum(u32) {
    cmMacintosh = 1095782476,
    cmMicrosoft = 1297303124,
    cmSolaris = 1398099543,
    cmSiliconGraphics = 1397180704,
    cmTaligent = 1413959252,
};

pub const anon4091 = enum(u32) {
    cmCS1ChromTag = 1667789421,
    cmCS1TRCTag = 1953653536,
    cmCS1NameTag = 1851878757,
    cmCS1CustTag = 1668641652,
};

pub const CMDateTime = extern struct {
    year: objc.UInt16,
    month: objc.UInt16,
    dayOfTheMonth: objc.UInt16,
    hours: objc.UInt16,
    minutes: objc.UInt16,
    seconds: objc.UInt16,
};

pub const CMFixedXYColor = extern struct {
    x: objc.Fixed,
    y: objc.Fixed,
};

pub const CMFixedXYZColor = extern struct {
    X: objc.Fixed,
    Y: objc.Fixed,
    Z: objc.Fixed,
};

pub const CMXYZComponent = objc.UInt16;

pub const CMXYZColor = extern struct {
    X: CMXYZComponent,
    Y: CMXYZComponent,
    Z: CMXYZComponent,
};

pub const CMProfileMD5 = [16]u8;

pub const CMProfileMD5Ptr = ?*CMProfileMD5;

pub const CM2Header = extern struct {
    size: objc.UInt32,
    CMMType: objc.OSType,
    profileVersion: objc.UInt32,
    profileClass: objc.OSType,
    dataColorSpace: objc.OSType,
    profileConnectionSpace: objc.OSType,
    dateTime: CMDateTime,
    CS2profileSignature: objc.OSType,
    platform: objc.OSType,
    flags: objc.UInt32,
    deviceManufacturer: objc.OSType,
    deviceModel: objc.UInt32,
    deviceAttributes: [2]objc.UInt32,
    renderingIntent: objc.UInt32,
    white: CMFixedXYZColor,
    creator: objc.OSType,
    reserved: [44]i8,
};

pub const CM4Header = extern struct {
    size: objc.UInt32,
    CMMType: objc.OSType,
    profileVersion: objc.UInt32,
    profileClass: objc.OSType,
    dataColorSpace: objc.OSType,
    profileConnectionSpace: objc.OSType,
    dateTime: CMDateTime,
    CS2profileSignature: objc.OSType,
    platform: objc.OSType,
    flags: objc.UInt32,
    deviceManufacturer: objc.OSType,
    deviceModel: objc.UInt32,
    deviceAttributes: [2]objc.UInt32,
    renderingIntent: objc.UInt32,
    white: CMFixedXYZColor,
    creator: objc.OSType,
    digest: CMProfileMD5,
    reserved: [28]i8,
};

pub const CMTagRecord = extern struct {
    tag: objc.OSType,
    elementOffset: objc.UInt32,
    elementSize: objc.UInt32,
};

pub const CMTagElemTable = extern struct {
    count: objc.UInt32,
    tagList: [1]CMTagRecord,
};

pub const CM2Profile = extern struct {
    header: CM2Header,
    tagTable: CMTagElemTable,
    elemData: [1]i8,
};

pub const CM2ProfilePtr = ?*CM2Profile;

pub const CM2ProfileHandle = ?*?*CM2Profile;

pub const CMAdaptationMatrixType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    adaptationMatrix: [9]objc.Fixed,
};

pub const CMCurveType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    countValue: objc.UInt32,
    data: [1]objc.UInt16,
};

pub const CMDataType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    dataFlag: objc.UInt32,
    data: [1]i8,
};

pub const CMDateTimeType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    dateTime: CMDateTime,
};

pub const CMLut16Type = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    inputChannels: objc.UInt8,
    outputChannels: objc.UInt8,
    gridPoints: objc.UInt8,
    reserved2: objc.UInt8,
    matrix: [3][3]objc.Fixed,
    inputTableEntries: objc.UInt16,
    outputTableEntries: objc.UInt16,
    inputTable: [1]objc.UInt16,
};

pub const CMLut8Type = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    inputChannels: objc.UInt8,
    outputChannels: objc.UInt8,
    gridPoints: objc.UInt8,
    reserved2: objc.UInt8,
    matrix: [3][3]objc.Fixed,
    inputTable: [1]objc.UInt8,
};

pub const CMMultiFunctLutType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    inputChannels: objc.UInt8,
    outputChannels: objc.UInt8,
    reserved2: objc.UInt16,
    offsetBcurves: objc.UInt32,
    offsetMatrix: objc.UInt32,
    offsetMcurves: objc.UInt32,
    offsetCLUT: objc.UInt32,
    offsetAcurves: objc.UInt32,
    data: [1]objc.UInt8,
};

pub const CMMultiFunctLutA2BType = CMMultiFunctLutType;

pub const CMMultiFunctLutB2AType = CMMultiFunctLutType;

pub const CMMultiFunctCLUTType = extern struct {
    gridPoints: [16]objc.UInt8,
    entrySize: objc.UInt8,
    reserved: [3]objc.UInt8,
    data: [2]objc.UInt8,
};

pub const CMMeasurementType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    standardObserver: objc.UInt32,
    backingXYZ: CMFixedXYZColor,
    geometry: objc.UInt32,
    flare: objc.UInt32,
    illuminant: objc.UInt32,
};

pub const CMNamedColorType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    vendorFlag: objc.UInt32,
    count: objc.UInt32,
    prefixName: [1]objc.UInt8,
};

pub const CMNamedColor2EntryType = extern struct {
    rootName: [32]objc.UInt8,
    PCSColorCoords: [3]objc.UInt16,
    DeviceColorCoords: [1]objc.UInt16,
};

pub const CMNamedColor2Type = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    vendorFlag: objc.UInt32,
    count: objc.UInt32,
    deviceChannelCount: objc.UInt32,
    prefixName: [32]objc.UInt8,
    suffixName: [32]objc.UInt8,
    data: [1]i8,
};

pub const CMNativeDisplayInfo = extern struct {
    dataSize: objc.UInt32,
    redPhosphor: CMFixedXYColor,
    greenPhosphor: CMFixedXYColor,
    bluePhosphor: CMFixedXYColor,
    whitePoint: CMFixedXYColor,
    redGammaValue: objc.Fixed,
    greenGammaValue: objc.Fixed,
    blueGammaValue: objc.Fixed,
    gammaChannels: objc.UInt16,
    gammaEntryCount: objc.UInt16,
    gammaEntrySize: objc.UInt16,
    gammaData: [1]i8,
};

pub const CMNativeDisplayInfoType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    nativeDisplayInfo: CMNativeDisplayInfo,
};

pub const CMParametricCurveType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    functionType: objc.UInt16,
    reserved2: objc.UInt16,
    value: [1]objc.Fixed,
};

pub const CMTextDescriptionType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    ASCIICount: objc.UInt32,
    ASCIIName: [2]objc.UInt8,
};

pub const CMTextType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    text: [1]objc.UInt8,
};

pub const CMUnicodeTextType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    text: [1]objc.UniChar,
};

pub const CMScreeningChannelRec = extern struct {
    frequency: objc.Fixed,
    angle: objc.Fixed,
    spotFunction: objc.UInt32,
};

pub const CMScreeningType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    screeningFlag: objc.UInt32,
    channelCount: objc.UInt32,
    channelInfo: [1]CMScreeningChannelRec,
};

pub const CMSignatureType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    signature: objc.OSType,
};

pub const CMS15Fixed16ArrayType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    value: [1]objc.Fixed,
};

pub const CMU16Fixed16ArrayType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    value: [1]objc.UInt32,
};

pub const CMUInt8ArrayType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    value: [1]objc.UInt8,
};

pub const CMUInt16ArrayType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    value: [1]objc.UInt16,
};

pub const CMUInt32ArrayType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    value: [1]objc.UInt32,
};

pub const CMUInt64ArrayType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    value: [1]objc.UInt32,
};

pub const CMViewingConditionsType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    illuminant: CMFixedXYZColor,
    surround: CMFixedXYZColor,
    stdIlluminant: objc.UInt32,
};

pub const CMXYZType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    XYZ: [1]CMFixedXYZColor,
};

pub const CMProfileSequenceDescType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    count: objc.UInt32,
    data: [1]i8,
};

pub const CMUcrBgType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    ucrCount: objc.UInt32,
    ucrValues: [1]objc.UInt16,
};

pub const CMIntentCRDVMSize = extern struct {
    renderingIntent: objc.UInt32,
    VMSize: objc.UInt32,
};

pub const CMPS2CRDVMSizeType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    count: objc.UInt32,
    intentCRD: [1]CMIntentCRDVMSize,
};

pub const CMVideoCardGammaTable = extern struct {
    channels: objc.UInt16,
    entryCount: objc.UInt16,
    entrySize: objc.UInt16,
    data: [1]i8,
};

pub const CMVideoCardGammaFormula = extern struct {
    redGamma: objc.Fixed,
    redMin: objc.Fixed,
    redMax: objc.Fixed,
    greenGamma: objc.Fixed,
    greenMin: objc.Fixed,
    greenMax: objc.Fixed,
    blueGamma: objc.Fixed,
    blueMin: objc.Fixed,
    blueMax: objc.Fixed,
};

pub const CMVideoCardGamma = extern struct {
    tagType: objc.UInt32,
    u: anon8593,
};

pub const anon8593 = extern union {
    table: CMVideoCardGammaTable,
    formula: CMVideoCardGammaFormula,
};

pub const CMVideoCardGammaType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    gamma: CMVideoCardGamma,
};

pub const CMMakeAndModel = extern struct {
    manufacturer: objc.OSType,
    model: objc.UInt32,
    serialNumber: objc.UInt32,
    manufactureDate: objc.UInt32,
    reserved1: objc.UInt32,
    reserved2: objc.UInt32,
    reserved3: objc.UInt32,
    reserved4: objc.UInt32,
};

pub const CMMakeAndModelType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    makeAndModel: CMMakeAndModel,
};

pub const CMMultiLocalizedUniCodeEntryRec = extern struct {
    languageCode: [2]i8,
    regionCode: [2]i8,
    textLength: objc.UInt32,
    textOffset: objc.UInt32,
};

pub const CMMultiLocalizedUniCodeType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    entryCount: objc.UInt32,
    entrySize: objc.UInt32,
};

pub const OpaqueCMProfileRef = extern struct {};

pub const CMProfileRef = ?*OpaqueCMProfileRef;

pub const OpaqueCMWorldRef = extern struct {};

pub const CMWorldRef = ?*OpaqueCMWorldRef;

pub const CMDisplayIDType = objc.UInt32;

pub const CMChromaticAdaptation = objc.UInt32;

pub const anon10181 = enum(u32) {
    cmUseDefaultChromaticAdaptation = 0,
    cmLinearChromaticAdaptation = 1,
    cmVonKriesChromaticAdaptation = 2,
    cmBradfordChromaticAdaptation = 3,
};

pub const CMFlattenProcPtr = ?*const fn (
    objc.SInt32,
    ?*i64,
    ?*anyopaque,
    ?*anyopaque,
) callconv(.C) objc.OSErr;

pub const CMFlattenUPP = CMFlattenProcPtr;

pub const CMBitmapCallBackProcPtr = ?*const fn (objc.SInt32, ?*anyopaque) callconv(.C) objc.Boolean;

pub const CMBitmapCallBackUPP = CMBitmapCallBackProcPtr;

pub const CMConcatCallBackProcPtr = ?*const fn (objc.SInt32, ?*anyopaque) callconv(.C) objc.Boolean;

pub const CMConcatCallBackUPP = CMConcatCallBackProcPtr;

pub const anon10851 = enum(u32) {
    kDefaultCMMSignature = 1634758764,
};

pub const anon11381 = enum(u32) {
    cmPS7bit = 1,
    cmPS8bit = 2,
};

pub const anon11521 = enum(u32) {
    cmOpenReadSpool = 1,
    cmOpenWriteSpool = 2,
    cmReadSpool = 3,
    cmWriteSpool = 4,
    cmCloseSpool = 5,
};

pub const anon11611 = enum(u32) {
    cmOpenReadAccess = 1,
    cmOpenWriteAccess = 2,
    cmReadAccess = 3,
    cmWriteAccess = 4,
    cmCloseAccess = 5,
    cmCreateNewAccess = 6,
    cmAbortWriteAccess = 7,
    cmBeginAccess = 8,
    cmEndAccess = 9,
};

pub const anon11741 = enum(u32) {
    cmInputUse = 1768845428,
    cmOutputUse = 1869968496,
    cmDisplayUse = 1685089401,
    cmProofUse = 1886549350,
};

pub const CMAppleProfileHeader = extern union {
    cm2: CM2Header,
    cm4: CM4Header,
};

pub const CMConcatProfileSet = extern struct {
    keyIndex: objc.UInt16,
    count: objc.UInt16,
    profileSet: [1]CMProfileRef,
};

pub const NCMConcatProfileSpec = extern struct {
    renderingIntent: objc.UInt32,
    transformTag: objc.UInt32,
    profile: CMProfileRef,
};

pub const NCMConcatProfileSet = extern struct {
    cmm: objc.OSType,
    flags: objc.UInt32,
    flagsMask: objc.UInt32,
    profileCount: objc.UInt32,
    profileSpecs: [1]NCMConcatProfileSpec,
};

pub const CMRGBColor = extern struct {
    red: objc.UInt16,
    green: objc.UInt16,
    blue: objc.UInt16,
};

pub const CMCMYKColor = extern struct {
    cyan: objc.UInt16,
    magenta: objc.UInt16,
    yellow: objc.UInt16,
    black: objc.UInt16,
};

pub const CMCMYColor = extern struct {
    cyan: objc.UInt16,
    magenta: objc.UInt16,
    yellow: objc.UInt16,
};

pub const CMHLSColor = extern struct {
    hue: objc.UInt16,
    lightness: objc.UInt16,
    saturation: objc.UInt16,
};

pub const CMHSVColor = extern struct {
    hue: objc.UInt16,
    saturation: objc.UInt16,
    value: objc.UInt16,
};

pub const CMLabColor = extern struct {
    L: objc.UInt16,
    a: objc.UInt16,
    b: objc.UInt16,
};

pub const CMLuvColor = extern struct {
    L: objc.UInt16,
    u: objc.UInt16,
    v: objc.UInt16,
};

pub const CMYxyColor = extern struct {
    capY: objc.UInt16,
    x: objc.UInt16,
    y: objc.UInt16,
};

pub const CMGrayColor = extern struct {
    gray: objc.UInt16,
};

pub const CMMultichannel5Color = extern struct {
    components: [5]objc.UInt8,
};

pub const CMMultichannel6Color = extern struct {
    components: [6]objc.UInt8,
};

pub const CMMultichannel7Color = extern struct {
    components: [7]objc.UInt8,
};

pub const CMMultichannel8Color = extern struct {
    components: [8]objc.UInt8,
};

pub const CMNamedColor = extern struct {
    namedColorIndex: objc.UInt32,
};

pub const CMColor = extern union {
    rgb: CMRGBColor,
    hsv: CMHSVColor,
    hls: CMHLSColor,
    XYZ: CMXYZColor,
    Lab: CMLabColor,
    Luv: CMLuvColor,
    Yxy: CMYxyColor,
    cmyk: CMCMYKColor,
    cmy: CMCMYColor,
    gray: CMGrayColor,
    mc5: CMMultichannel5Color,
    mc6: CMMultichannel6Color,
    mc7: CMMultichannel7Color,
    mc8: CMMultichannel8Color,
    namedColor: CMNamedColor,
};

pub const CMMInfo = extern struct {
    dataSize: objc.size_t,
    CMMType: objc.OSType,
    CMMMfr: objc.OSType,
    CMMVersion: objc.UInt32,
    ASCIIName: [32]u8,
    ASCIIDesc: [256]u8,
    UniCodeNameCount: objc.UniCharCount,
    UniCodeName: [32]objc.UniChar,
    UniCodeDescCount: objc.UniCharCount,
    UniCodeDesc: [256]objc.UniChar,
};

pub const anon13801 = enum(i32) {
    cmColorSpaceSpaceMask = 63,
    cmColorSpacePremulAlphaMask = 64,
    cmColorSpaceAlphaMask = 128,
    cmColorSpaceSpaceAndAlphaMask = 255,
    cmColorSpacePackingMask = 65280,
    cmColorSpaceEncodingMask = 983040,
    cmColorSpaceReservedMask = -1048576,
};

pub const anon13911 = enum(u32) {
    cmNoColorPacking = 0,
    cmWord5ColorPacking = 1280,
    cmWord565ColorPacking = 1536,
    cmLong8ColorPacking = 2048,
    cmLong10ColorPacking = 2560,
    cmAlphaFirstPacking = 4096,
    cmOneBitDirectPacking = 2816,
    cmAlphaLastPacking = 0,
    cm8_8ColorPacking = 10240,
    cm16_8ColorPacking = 8192,
    cm24_8ColorPacking = 8448,
    cm32_8ColorPacking = 2048,
    cm40_8ColorPacking = 8704,
    cm48_8ColorPacking = 8960,
    cm56_8ColorPacking = 9216,
    cm64_8ColorPacking = 9472,
    cm32_16ColorPacking = 9728,
    cm48_16ColorPacking = 10496,
    cm64_16ColorPacking = 10752,
    cm32_32ColorPacking = 9984,
    cmLittleEndianPacking = 16384,
    cmReverseChannelPacking = 32768,
};

pub const anon14171 = enum(u32) {
    cmSRGB16ChannelEncoding = 65536,
};

pub const anon14221 = enum(u32) {
    cmNoSpace = 0,
    cmRGBSpace = 1,
    cmCMYKSpace = 2,
    cmHSVSpace = 3,
    cmHLSSpace = 4,
    cmYXYSpace = 5,
    cmXYZSpace = 6,
    cmLUVSpace = 7,
    cmLABSpace = 8,
    cmReservedSpace1 = 9,
    cmGraySpace = 10,
    cmReservedSpace2 = 11,
    cmGamutResultSpace = 12,
    cmNamedIndexedSpace = 16,
    cmMCFiveSpace = 17,
    cmMCSixSpace = 18,
    cmMCSevenSpace = 19,
    cmMCEightSpace = 20,
    cmAlphaPmulSpace = 64,
    cmAlphaSpace = 128,
    cmRGBASpace = 129,
    cmGrayASpace = 138,
    cmRGBAPmulSpace = 193,
    cmGrayAPmulSpace = 202,
};

pub const CMBitmapColorSpace = objc.UInt32;

pub const CMBitmap = extern struct {
    image: ?*i8,
    width: objc.size_t,
    height: objc.size_t,
    rowBytes: objc.size_t,
    pixelSize: objc.size_t,
    space: CMBitmapColorSpace,
    user1: objc.UInt32,
    user2: objc.UInt32,
};

pub const anon15231 = enum(u32) {
    CS_MAX_PATH = 1024,
};

pub const anon15351 = enum(u32) {
    cmNoProfileBase = 0,
    cmPathBasedProfile = 5,
    cmBufferBasedProfile = 6,
};

pub const CMHandleLocation = extern struct {
    h: objc.Handle,
};

pub const CMPathLocation = extern struct {
    path: [1024]i8,
};

pub const CMBufferLocation = extern struct {
    buffer: ?*anyopaque,
    size: objc.UInt32,
};

pub const CMProfLoc = extern union {
    handleLoc: CMHandleLocation,
    pathLoc: CMPathLocation,
    bufferLoc: CMBufferLocation,
};

pub const CMProfileLocation = extern struct {
    locType: i16,
    u: CMProfLoc,
};

pub const anon16031 = enum(u32) {
    cmOriginalProfileLocationSize = 72,
    cmCurrentProfileLocationSize = 1032,
};

pub const anon16111 = enum(u32) {
    cmProfileIterateDataVersion1 = 65536,
    cmProfileIterateDataVersion2 = 131072,
    cmProfileIterateDataVersion3 = 196608,
    cmProfileIterateDataVersion4 = 262144,
};

pub const CMProfileIterateData = extern struct {
    dataVersion: objc.UInt32,
    header: CM2Header,
    code: objc.ScriptCode,
    name: objc.Str255,
    location: CMProfileLocation,
    uniCodeNameCount: objc.UniCharCount,
    uniCodeName: ?*objc.UniChar,
    asciiName: ?*u8,
    makeAndModel: ?*CMMakeAndModel,
    digest: ?*CMProfileMD5,
};

pub const CMProfileIterateProcPtr = ?*const fn (?*CMProfileIterateData, ?*anyopaque) callconv(.C) objc.OSErr;

pub const CMProfileIterateUPP = CMProfileIterateProcPtr;

pub const CMMIterateProcPtr = ?*const fn (?*CMMInfo, ?*anyopaque) callconv(.C) objc.OSErr;

pub const CMMIterateUPP = CMMIterateProcPtr;

pub const CMLabToLabProcPtr = ?*const fn (
    ?*f32,
    ?*f32,
    ?*f32,
    ?*anyopaque,
) callconv(.C) void;

pub const CMFloatBitmapFlags = enum(u32) {
    kCMFloatBitmapFlagsNone = 0,
    kCMFloatBitmapFlagsAlpha = 1,
    kCMFloatBitmapFlagsAlphaPremul = 2,
    kCMFloatBitmapFlagsRangeClipped = 4,
};

pub const CMFloatBitmap = extern struct {
    version: u64,
    buffers: [16]?*f32,
    height: objc.size_t,
    width: objc.size_t,
    rowStride: objc.ptrdiff_t,
    colStride: objc.ptrdiff_t,
    space: objc.OSType,
    flags: CMFloatBitmapFlags,
};

pub const anon18501 = enum(u32) {
    cmCurrentDeviceInfoVersion = 65536,
    cmCurrentProfileInfoVersion = 65536,
};

pub const anon18591 = enum(u32) {
    cmDefaultDeviceID = 0,
    cmDefaultProfileID = 0,
};

pub const anon19051 = enum(u32) {
    cmIterateFactoryDeviceProfiles = 1,
    cmIterateCustomDeviceProfiles = 2,
    cmIterateCurrentDeviceProfiles = 3,
    cmIterateAllDeviceProfiles = 4,
    cmIterateDeviceProfilesMask = 15,
};

pub const anon19161 = enum(i32) {
    cmDeviceDBNotFoundErr = -4227,
    cmDeviceAlreadyRegistered = -4228,
    cmDeviceNotRegistered = -4229,
    cmDeviceProfilesNotFound = -4230,
    cmInternalCFErr = -4231,
    cmPrefsSynchError = -4232,
};

pub const CMDeviceState = objc.UInt32;

pub const CMDeviceID = objc.UInt32;

pub const CMDeviceProfileID = objc.UInt32;

pub const anon19681 = enum(u32) {
    cmScannerDeviceClass = 1935896178,
    cmCameraDeviceClass = 1668117089,
    cmDisplayDeviceClass = 1835955314,
    cmPrinterDeviceClass = 1886549106,
    cmProofDeviceClass = 1886549350,
};

pub const CMDeviceClass = objc.OSType;

pub const CMDeviceScope = extern struct {
    deviceUser: core_foundation.StringRef,
    deviceHost: core_foundation.StringRef,
};

pub const CMDeviceProfileScope = CMDeviceScope;

pub const CMDeviceInfo = extern struct {
    dataVersion: objc.UInt32,
    deviceClass: CMDeviceClass,
    deviceID: CMDeviceID,
    deviceScope: CMDeviceScope,
    deviceState: CMDeviceState,
    defaultProfileID: CMDeviceProfileID,
    deviceName: ?*core_foundation.DictionaryRef,
    profileCount: objc.UInt32,
    reserved: objc.UInt32,
};

pub const CMDeviceInfoPtr = ?*CMDeviceInfo;

pub const CMDeviceProfileInfo = extern struct {
    dataVersion: objc.UInt32,
    profileID: CMDeviceProfileID,
    profileLoc: CMProfileLocation,
    profileName: core_foundation.DictionaryRef,
    reserved: objc.UInt32,
};

pub const NCMDeviceProfileInfo = extern struct {
    dataVersion: objc.UInt32,
    profileID: CMDeviceProfileID,
    profileLoc: CMProfileLocation,
    profileName: core_foundation.DictionaryRef,
    profileScope: CMDeviceProfileScope,
    reserved: objc.UInt32,
};

pub const CMDeviceProfileArray = extern struct {
    profileCount: objc.UInt32,
    profiles: [1]CMDeviceProfileInfo,
};

pub const CMDeviceProfileArrayPtr = ?*CMDeviceProfileArray;

pub const CMIterateDeviceInfoProcPtr = ?*const fn (?*CMDeviceInfo, ?*anyopaque) callconv(.C) objc.OSErr;

pub const CMIterateDeviceProfileProcPtr = ?*const fn (?*CMDeviceInfo, ?*NCMDeviceProfileInfo, ?*anyopaque) callconv(.C) objc.OSErr;

pub const OpaqueGrafPtr = extern struct {};

pub const GrafPtr = ?*OpaqueGrafPtr;

pub const CGrafPtr = GrafPtr;

pub const GWorldPtr = CGrafPtr;

pub const QDErr = i16;

pub const GWorldFlags = u64;

pub const BitMap = extern struct {
    baseAddr: objc.Ptr,
    rowBytes: i16,
    bounds: objc.Rect,
};

pub const BitMapPtr = ?*BitMap;

pub const BitMapHandle = ?*BitMapPtr;

pub const RGBColor = extern struct {
    red: u16,
    green: u16,
    blue: u16,
};

pub const ColorSpec = extern struct {
    value: i16,
    rgb: RGBColor,
};

pub const ColorSpecPtr = ?*ColorSpec;

pub const CSpecArray = [1]ColorSpec;

pub const ColorTable = extern struct {
    ctSeed: objc.SInt32,
    ctFlags: i16,
    ctSize: i16,
    ctTable: CSpecArray,
};

pub const CTabPtr = ?*ColorTable;

pub const CTabHandle = ?*CTabPtr;

pub const PixMap = extern struct {
    baseAddr: objc.Ptr,
    rowBytes: i16,
    bounds: objc.Rect,
    pmVersion: i16,
    packType: i16,
    packSize: objc.SInt32,
    hRes: objc.Fixed,
    vRes: objc.Fixed,
    pixelType: i16,
    pixelSize: i16,
    cmpCount: i16,
    cmpSize: i16,
    pixelFormat: objc.OSType,
    pmTable: CTabHandle,
    pmExt: ?*anyopaque,
};

pub const PixMapPtr = ?*PixMap;

pub const PixMapHandle = ?*PixMapPtr;

pub const Pattern = extern struct {
    pat: [8]objc.UInt8,
};

pub const PatPtr = ?*Pattern;

pub const PatHandle = ?*PatPtr;

pub const PixPat = extern struct {
    patType: i16,
    patMap: PixMapHandle,
    patData: objc.Handle,
    patXData: objc.Handle,
    patXValid: i16,
    patXMap: objc.Handle,
    pat1Data: Pattern,
};

pub const PixPatPtr = ?*PixPat;

pub const PixPatHandle = ?*PixPatPtr;

pub const OpaqueRgnHandle = extern struct {};

pub const RgnHandle = ?*OpaqueRgnHandle;

pub const GDevice = extern struct {
    gdRefNum: i16,
    gdID: i16,
    gdType: i16,
    gdITable: objc.Handle,
    gdResPref: i16,
    gdSearchProc: objc.Handle,
    gdCompProc: objc.Handle,
    gdFlags: i16,
    gdPMap: PixMapHandle,
    gdRefCon: objc.SInt32,
    gdNextGD: GDHandle,
    gdRect: objc.Rect,
    gdMode: objc.SInt32,
    gdCCBytes: i16,
    gdCCDepth: i16,
    gdCCXData: objc.Handle,
    gdCCXMask: objc.Handle,
    gdExt: objc.Handle,
};

pub const GDPtr = ?*GDevice;

pub const GDHandle = ?*GDPtr;

pub const Picture = extern struct {
    picSize: i16,
    picFrame: objc.Rect,
};

pub const PicPtr = ?*Picture;

pub const PicHandle = ?*PicPtr;

pub const OpenCPicParams = extern struct {
    srcRect: objc.Rect,
    hRes: objc.Fixed,
    vRes: objc.Fixed,
    version: i16,
    reserved1: i16,
    reserved2: objc.SInt32,
};

pub const FontInfo = extern struct {
    ascent: i16,
    descent: i16,
    widMax: i16,
    leading: i16,
};

pub const QDRegionParseDirection = objc.SInt32;

pub const RegionToRectsProcPtr = ?*const fn (
    objc.UInt16,
    RgnHandle,
    ?*objc.Rect,
    ?*anyopaque,
) callconv(.C) objc.OSStatus;

pub const RegionToRectsUPP = RegionToRectsProcPtr;

pub const TruncCode = i16;

pub const DragConstraint = objc.UInt16;

pub const DragGrayRgnProcPtr = ?*const fn () callconv(.C) void;

pub const ColorSearchProcPtr = ?*const fn (?*RGBColor, ?*i64) callconv(.C) objc.Boolean;

pub const ColorComplementProcPtr = ?*const fn (?*RGBColor) callconv(.C) objc.Boolean;

pub const DragGrayRgnUPP = DragGrayRgnProcPtr;

pub const ColorSearchUPP = ColorSearchProcPtr;

pub const ColorComplementUPP = ColorComplementProcPtr;

pub const OpaqueWindowPtr = extern struct {};

pub const WindowPtr = ?*OpaqueWindowPtr;

pub const OpaqueDialogPtr = extern struct {};

pub const DialogPtr = ?*OpaqueDialogPtr;

pub const WindowRef = WindowPtr;

pub const VDGammaRecord = extern struct {
    csGTable: objc.Ptr,
};

pub const VDGamRecPtr = ?*VDGammaRecord;

pub const MacPolygon = extern struct {
    polySize: i16,
    polyBBox: objc.Rect,
    polyPoints: [1]objc.Point,
};

pub const Polygon = MacPolygon;

pub const PolyPtr = ?*MacPolygon;

pub const PolyHandle = ?*PolyPtr;

pub const GrafVerb = objc.SInt8;

pub const PrinterStatusOpcode = objc.SInt32;

pub const QDTextProcPtr = ?*const fn (
    i16,
    ?*anyopaque,
    objc.Point,
    objc.Point,
) callconv(.C) void;

pub const QDLineProcPtr = ?*const fn (objc.Point) callconv(.C) void;

pub const QDRectProcPtr = ?*const fn (GrafVerb, ?*objc.Rect) callconv(.C) void;

pub const QDRRectProcPtr = ?*const fn (
    GrafVerb,
    ?*objc.Rect,
    i16,
    i16,
) callconv(.C) void;

pub const QDOvalProcPtr = ?*const fn (GrafVerb, ?*objc.Rect) callconv(.C) void;

pub const QDArcProcPtr = ?*const fn (
    GrafVerb,
    ?*objc.Rect,
    i16,
    i16,
) callconv(.C) void;

pub const QDPolyProcPtr = ?*const fn (GrafVerb, PolyHandle) callconv(.C) void;

pub const QDRgnProcPtr = ?*const fn (GrafVerb, RgnHandle) callconv(.C) void;

pub const QDBitsProcPtr = ?*const fn (
    ?*BitMap,
    ?*objc.Rect,
    ?*objc.Rect,
    i16,
    RgnHandle,
) callconv(.C) void;

pub const QDCommentProcPtr = ?*const fn (i16, i16, objc.Handle) callconv(.C) void;

pub const QDTxMeasProcPtr = ?*const fn (
    i16,
    ?*anyopaque,
    ?*objc.Point,
    ?*objc.Point,
    ?*FontInfo,
) callconv(.C) i16;

pub const QDGetPicProcPtr = ?*const fn (?*anyopaque, i16) callconv(.C) void;

pub const QDPutPicProcPtr = ?*const fn (?*anyopaque, i16) callconv(.C) void;

pub const QDOpcodeProcPtr = ?*const fn (
    ?*objc.Rect,
    ?*objc.Rect,
    objc.UInt16,
    objc.SInt16,
) callconv(.C) void;

pub const QDStdGlyphsProcPtr = ?*const fn (?*anyopaque, objc.ByteCount) callconv(.C) objc.OSStatus;

pub const QDJShieldCursorProcPtr = ?*const fn (
    i16,
    i16,
    i16,
    i16,
) callconv(.C) void;

pub const QDPrinterStatusProcPtr = ?*const fn (PrinterStatusOpcode, CGrafPtr, ?*anyopaque) callconv(.C) objc.OSStatus;

pub const QDTextUPP = QDTextProcPtr;

pub const QDLineUPP = QDLineProcPtr;

pub const QDRectUPP = QDRectProcPtr;

pub const QDRRectUPP = QDRRectProcPtr;

pub const QDOvalUPP = QDOvalProcPtr;

pub const QDArcUPP = QDArcProcPtr;

pub const QDPolyUPP = QDPolyProcPtr;

pub const QDRgnUPP = QDRgnProcPtr;

pub const QDBitsUPP = QDBitsProcPtr;

pub const QDCommentUPP = QDCommentProcPtr;

pub const QDTxMeasUPP = QDTxMeasProcPtr;

pub const QDGetPicUPP = QDGetPicProcPtr;

pub const QDPutPicUPP = QDPutPicProcPtr;

pub const QDOpcodeUPP = QDOpcodeProcPtr;

pub const QDStdGlyphsUPP = QDStdGlyphsProcPtr;

pub const QDJShieldCursorUPP = QDJShieldCursorProcPtr;

pub const QDPrinterStatusUPP = QDPrinterStatusProcPtr;

pub const CQDProcs = extern struct {
    textProc: QDTextUPP,
    lineProc: QDLineUPP,
    rectProc: QDRectUPP,
    rRectProc: QDRRectUPP,
    ovalProc: QDOvalUPP,
    arcProc: QDArcUPP,
    polyProc: QDPolyUPP,
    rgnProc: QDRgnUPP,
    bitsProc: QDBitsUPP,
    commentProc: QDCommentUPP,
    txMeasProc: QDTxMeasUPP,
    getPicProc: QDGetPicUPP,
    putPicProc: QDPutPicUPP,
    opcodeProc: QDOpcodeUPP,
    newProc1: objc.UniversalProcPtr,
    glyphsProc: QDStdGlyphsUPP,
    printerStatusProc: QDPrinterStatusUPP,
    newProc4: objc.UniversalProcPtr,
    newProc5: objc.UniversalProcPtr,
    newProc6: objc.UniversalProcPtr,
};

pub const CQDProcsPtr = ?*CQDProcs;

pub const GrafPort = extern struct {
    whatever: [87]i16,
};

pub const CGrafPort = GrafPort;

pub const __HIShape = extern struct {};

pub const HIShapeRef = ?*__HIShape;

pub const HIMutableShapeRef = ?*__HIShape;

pub const anon971 = enum(u32) {
    kHIShapeParseFromTop = 0,
    kHIShapeParseFromBottom = 1,
    kHIShapeParseFromLeft = 0,
    kHIShapeParseFromRight = 2,
    kHIShapeParseFromTopLeft = 0,
    kHIShapeParseFromBottomRight = 3,
};

pub const HIShapeEnumerateProcPtr = ?*const fn (
    i32,
    HIShapeRef,
    ?*core_foundation.CGRect,
    ?*anyopaque,
) callconv(.C) objc.OSStatus;

extern "ApplicationServices" fn HIShapeGetTypeID() callconv(.C) core_foundation.TypeID;
pub const hapeGetTypeID = HIShapeGetTypeID;

extern "ApplicationServices" fn HIShapeCreateEmpty() callconv(.C) HIShapeRef;
pub const hapeCreateEmpty = HIShapeCreateEmpty;

extern "ApplicationServices" fn HIShapeCreateWithQDRgn(inRgn: RgnHandle) callconv(.C) HIShapeRef;
pub const hapeCreateWithQDRgn = HIShapeCreateWithQDRgn;

extern "ApplicationServices" fn HIShapeCreateWithRect(inRect: ?*core_foundation.CGRect) callconv(.C) HIShapeRef;
pub const hapeCreateWithRect = HIShapeCreateWithRect;

extern "ApplicationServices" fn HIShapeCreateCopy(inShape: HIShapeRef) callconv(.C) HIShapeRef;
pub const hapeCreateCopy = HIShapeCreateCopy;

extern "ApplicationServices" fn HIShapeCreateIntersection(inShape1: HIShapeRef, inShape2: HIShapeRef) callconv(.C) HIShapeRef;
pub const hapeCreateIntersection = HIShapeCreateIntersection;

extern "ApplicationServices" fn HIShapeCreateDifference(inShape1: HIShapeRef, inShape2: HIShapeRef) callconv(.C) HIShapeRef;
pub const hapeCreateDifference = HIShapeCreateDifference;

extern "ApplicationServices" fn HIShapeCreateUnion(inShape1: HIShapeRef, inShape2: HIShapeRef) callconv(.C) HIShapeRef;
pub const hapeCreateUnion = HIShapeCreateUnion;

extern "ApplicationServices" fn HIShapeCreateXor(inShape1: HIShapeRef, inShape2: HIShapeRef) callconv(.C) HIShapeRef;
pub const hapeCreateXor = HIShapeCreateXor;

extern "ApplicationServices" fn HIShapeIsEmpty(inShape: HIShapeRef) callconv(.C) objc.Boolean;
pub const hapeIsEmpty = HIShapeIsEmpty;

extern "ApplicationServices" fn HIShapeIsRectangular(inShape: HIShapeRef) callconv(.C) objc.Boolean;
pub const hapeIsRectangular = HIShapeIsRectangular;

extern "ApplicationServices" fn HIShapeContainsPoint(inShape: HIShapeRef, inPoint: ?*core_foundation.CGPoint) callconv(.C) objc.Boolean;
pub const hapeContainsPoint = HIShapeContainsPoint;

extern "ApplicationServices" fn HIShapeIntersectsRect(inShape: HIShapeRef, inRect: ?*core_foundation.CGRect) callconv(.C) objc.Boolean;
pub const hapeIntersectsRect = HIShapeIntersectsRect;

extern "ApplicationServices" fn HIShapeGetBounds(inShape: HIShapeRef, outRect: ?*core_foundation.CGRect) callconv(.C) ?*core_foundation.CGRect;
pub const hapeGetBounds = HIShapeGetBounds;

extern "ApplicationServices" fn HIShapeGetAsQDRgn(inShape: HIShapeRef, outRgn: RgnHandle) callconv(.C) objc.OSStatus;
pub const hapeGetAsQDRgn = HIShapeGetAsQDRgn;

extern "ApplicationServices" fn HIShapeReplacePathInCGContext(inShape: HIShapeRef, inContext: core_graphics.ContextRef) callconv(.C) objc.OSStatus;
pub const hapeReplacePathInCGContext = HIShapeReplacePathInCGContext;

extern "ApplicationServices" fn HIShapeEnumerate(
    inShape: HIShapeRef,
    inOptions: objc.OptionBits,
    inProc: HIShapeEnumerateProcPtr,
    inRefcon: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const hapeEnumerate = HIShapeEnumerate;

extern "ApplicationServices" fn HIShapeCreateMutable() callconv(.C) HIMutableShapeRef;
pub const hapeCreateMutable = HIShapeCreateMutable;

extern "ApplicationServices" fn HIShapeCreateMutableCopy(inOrig: HIShapeRef) callconv(.C) HIMutableShapeRef;
pub const hapeCreateMutableCopy = HIShapeCreateMutableCopy;

extern "ApplicationServices" fn HIShapeCreateMutableWithRect(inRect: ?*core_foundation.CGRect) callconv(.C) HIMutableShapeRef;
pub const hapeCreateMutableWithRect = HIShapeCreateMutableWithRect;

extern "ApplicationServices" fn HIShapeSetEmpty(inShape: HIMutableShapeRef) callconv(.C) objc.OSStatus;
pub const hapeSetEmpty = HIShapeSetEmpty;

extern "ApplicationServices" fn HIShapeSetWithShape(inDestShape: HIMutableShapeRef, inSrcShape: HIShapeRef) callconv(.C) objc.OSStatus;
pub const hapeSetWithShape = HIShapeSetWithShape;

extern "ApplicationServices" fn HIShapeIntersect(inShape1: HIShapeRef, inShape2: HIShapeRef, outResult: HIMutableShapeRef) callconv(.C) objc.OSStatus;
pub const hapeIntersect = HIShapeIntersect;

extern "ApplicationServices" fn HIShapeDifference(inShape1: HIShapeRef, inShape2: HIShapeRef, outResult: HIMutableShapeRef) callconv(.C) objc.OSStatus;
pub const hapeDifference = HIShapeDifference;

extern "ApplicationServices" fn HIShapeUnion(inShape1: HIShapeRef, inShape2: HIShapeRef, outResult: HIMutableShapeRef) callconv(.C) objc.OSStatus;
pub const hapeUnion = HIShapeUnion;

extern "ApplicationServices" fn HIShapeXor(inShape1: HIShapeRef, inShape2: HIShapeRef, outResult: HIMutableShapeRef) callconv(.C) objc.OSStatus;
pub const hapeXor = HIShapeXor;

extern "ApplicationServices" fn HIShapeOffset(inShape: HIMutableShapeRef, inDX: core_foundation.CGFloat, inDY: core_foundation.CGFloat) callconv(.C) objc.OSStatus;
pub const hapeOffset = HIShapeOffset;

extern "ApplicationServices" fn HIShapeInset(inShape: HIMutableShapeRef, inDX: core_foundation.CGFloat, inDY: core_foundation.CGFloat) callconv(.C) objc.OSStatus;
pub const hapeInset = HIShapeInset;

extern "ApplicationServices" fn HIShapeUnionWithRect(inShape: HIMutableShapeRef, inRect: ?*core_foundation.CGRect) callconv(.C) objc.OSStatus;
pub const hapeUnionWithRect = HIShapeUnionWithRect;

pub const IconAlignmentType = objc.SInt16;

pub const IconTransformType = objc.SInt16;

pub const IconSelectorValue = objc.UInt32;

pub const IconActionProcPtr = ?*const fn (objc.ResType, ?*objc.Handle, ?*anyopaque) callconv(.C) objc.OSErr;

pub const IconGetterProcPtr = ?*const fn (objc.ResType, ?*anyopaque) callconv(.C) objc.Handle;

pub const IconActionUPP = IconActionProcPtr;

pub const IconGetterUPP = IconGetterProcPtr;

extern "ApplicationServices" fn NewIconActionUPP(userRoutine: IconActionProcPtr) callconv(.C) IconActionUPP;
pub const iconActionUPP = NewIconActionUPP;

extern "ApplicationServices" fn NewIconGetterUPP(userRoutine: IconGetterProcPtr) callconv(.C) IconGetterUPP;
pub const iconGetterUPP = NewIconGetterUPP;

extern "ApplicationServices" fn DisposeIconActionUPP(userUPP: IconActionUPP) callconv(.C) void;
pub const poseIconActionUPP = DisposeIconActionUPP;

extern "ApplicationServices" fn DisposeIconGetterUPP(userUPP: IconGetterUPP) callconv(.C) void;
pub const poseIconGetterUPP = DisposeIconGetterUPP;

extern "ApplicationServices" fn InvokeIconActionUPP(
    theType: objc.ResType,
    theIcon: ?*objc.Handle,
    yourDataPtr: ?*anyopaque,
    userUPP: IconActionUPP,
) callconv(.C) objc.OSErr;
pub const okeIconActionUPP = InvokeIconActionUPP;

extern "ApplicationServices" fn InvokeIconGetterUPP(theType: objc.ResType, yourDataPtr: ?*anyopaque, userUPP: IconGetterUPP) callconv(.C) objc.Handle;
pub const okeIconGetterUPP = InvokeIconGetterUPP;

pub const PlotIconRefFlags = objc.UInt32;

extern "ApplicationServices" fn IconRefToIconFamily(theIconRef: core_services.IconRef, whichIcons: IconSelectorValue, iconFamily: ?*core_services.IconFamilyHandle) callconv(.C) objc.OSErr;
pub const nRefToIconFamily = IconRefToIconFamily;

extern "ApplicationServices" fn SetIconFamilyData(iconFamily: core_services.IconFamilyHandle, iconType: objc.OSType, h: objc.Handle) callconv(.C) objc.OSErr;
pub const iconFamilyData = SetIconFamilyData;

extern "ApplicationServices" fn GetIconFamilyData(iconFamily: core_services.IconFamilyHandle, iconType: objc.OSType, h: objc.Handle) callconv(.C) objc.OSErr;
pub const iconFamilyData = GetIconFamilyData;

extern "ApplicationServices" fn PlotIconRefInContext(
    inContext: core_graphics.ContextRef,
    inRect: ?*core_foundation.CGRect,
    inAlign: IconAlignmentType,
    inTransform: IconTransformType,
    inLabelColor: ?*RGBColor,
    inFlags: PlotIconRefFlags,
    inIconRef: core_services.IconRef,
) callconv(.C) objc.OSStatus;
pub const tIconRefInContext = PlotIconRefInContext;

extern "ApplicationServices" fn IconRefContainsCGPoint(
    testPt: ?*core_foundation.CGPoint,
    iconRect: ?*core_foundation.CGRect,
    @"align": IconAlignmentType,
    iconServicesUsageFlags: core_services.IconServicesUsageFlags,
    theIconRef: core_services.IconRef,
) callconv(.C) objc.Boolean;
pub const nRefContainsCGPoint = IconRefContainsCGPoint;

extern "ApplicationServices" fn IconRefIntersectsCGRect(
    testRect: ?*core_foundation.CGRect,
    iconRect: ?*core_foundation.CGRect,
    @"align": IconAlignmentType,
    iconServicesUsageFlags: core_services.IconServicesUsageFlags,
    theIconRef: core_services.IconRef,
) callconv(.C) objc.Boolean;
pub const nRefIntersectsCGRect = IconRefIntersectsCGRect;

extern "ApplicationServices" fn IconRefToHIShape(
    iconRect: ?*core_foundation.CGRect,
    @"align": IconAlignmentType,
    iconServicesUsageFlags: core_services.IconServicesUsageFlags,
    theIconRef: core_services.IconRef,
) callconv(.C) HIShapeRef;
pub const nRefToHIShape = IconRefToHIShape;

extern "ApplicationServices" fn IsIconRefMaskEmpty(iconRef: core_services.IconRef) callconv(.C) objc.Boolean;
pub const conRefMaskEmpty = IsIconRefMaskEmpty;

extern "ApplicationServices" fn GetIconRefVariant(inIconRef: core_services.IconRef, inVariant: objc.OSType, outTransform: ?*IconTransformType) callconv(.C) core_services.IconRef;
pub const iconRefVariant = GetIconRefVariant;

pub const anon921 = enum(u32) {
    kICComponentInterfaceVersion0 = 0,
    kICComponentInterfaceVersion1 = 65536,
    kICComponentInterfaceVersion2 = 131072,
    kICComponentInterfaceVersion3 = 196608,
    kICComponentInterfaceVersion4 = 262144,
    kICComponentInterfaceVersion = 262144,
};

pub const OpaqueICInstance = extern struct {};

pub const ICInstance = ?*OpaqueICInstance;

pub const ICAttr = objc.UInt32;

pub const ICPerm = objc.UInt8;

pub const ICProfileID = objc.SInt32;

pub const ICProfileIDPtr = ?*ICProfileID;

pub const ICFontRecord = extern struct {
    size: objc.SInt16,
    face: objc.Style,
    pad: i8,
    font: objc.Str255,
};

pub const ICFontRecordPtr = ?*ICFontRecord;

pub const ICFontRecordHandle = ?*ICFontRecordPtr;

pub const ICCharTable = extern struct {
    netToMac: [256]u8,
    macToNet: [256]u8,
};

pub const ICCharTablePtr = ?*ICCharTable;

pub const ICCharTableHandle = ?*ICCharTablePtr;

pub const ICAppSpec = extern struct {
    fCreator: objc.OSType,
    name: objc.Str63,
};

pub const ICAppSpecPtr = ?*ICAppSpec;

pub const ICAppSpecHandle = ?*ICAppSpecPtr;

pub const ICAppSpecList = extern struct {
    numberOfItems: objc.SInt16,
    appSpecs: [1]ICAppSpec,
};

pub const ICAppSpecListPtr = ?*ICAppSpecList;

pub const ICAppSpecListHandle = ?*ICAppSpecListPtr;

pub const ICFileSpec = extern struct {
    volName: objc.Str31,
    volCreationDate: objc.SInt32,
    fss: core_services.FSSpec,
    alias: core_services.AliasRecord,
};

pub const ICFileSpecPtr = ?*ICFileSpec;

pub const ICFileSpecHandle = ?*ICFileSpecPtr;

pub const ICMapEntryFlags = objc.SInt32;

pub const ICFixedLength = objc.SInt16;

pub const ICMapEntry = extern struct {
    totalLength: objc.SInt16,
    fixedLength: ICFixedLength,
    version: objc.SInt16,
    fileType: objc.OSType,
    fileCreator: objc.OSType,
    postCreator: objc.OSType,
    flags: ICMapEntryFlags,
    extension: objc.Str255,
    creatorAppName: objc.Str255,
    postAppName: objc.Str255,
    MIMEType: objc.Str255,
    entryName: objc.Str255,
};

pub const ICMapEntryPtr = ?*ICMapEntry;

pub const ICMapEntryHandle = ?*ICMapEntryPtr;

pub const ICServiceEntryFlags = objc.SInt16;

pub const ICServiceEntry = extern struct {
    name: objc.Str255,
    port: objc.SInt16,
    flags: ICServiceEntryFlags,
};

pub const ICServiceEntryPtr = ?*ICServiceEntry;

pub const ICServiceEntryHandle = ?*ICServiceEntryPtr;

pub const ICServices = extern struct {
    count: objc.SInt16,
    services: [1]ICServiceEntry,
};

pub const ICServicesPtr = ?*ICServices;

pub const ICServicesHandle = ?*ICServicesPtr;

extern "ApplicationServices" fn ICStart(inst: ?*ICInstance, signature: objc.OSType) callconv(.C) objc.OSStatus;
pub const tart = ICStart;

extern "ApplicationServices" fn ICStop(inst: ICInstance) callconv(.C) objc.OSStatus;
pub const top = ICStop;

extern "ApplicationServices" fn ICGetVersion(inst: ICInstance, whichVersion: i64, version: ?*objc.UInt32) callconv(.C) objc.OSStatus;
pub const etVersion = ICGetVersion;

extern "ApplicationServices" fn ICGetConfigName(inst: ICInstance, longname: objc.Boolean, name: objc.Str255) callconv(.C) objc.OSStatus;
pub const etConfigName = ICGetConfigName;

extern "ApplicationServices" fn ICGetSeed(inst: ICInstance, seed: ?*i64) callconv(.C) objc.OSStatus;
pub const etSeed = ICGetSeed;

extern "ApplicationServices" fn ICGetPerm(inst: ICInstance, perm: ?*ICPerm) callconv(.C) objc.OSStatus;
pub const etPerm = ICGetPerm;

extern "ApplicationServices" fn ICBegin(inst: ICInstance, perm: ICPerm) callconv(.C) objc.OSStatus;
pub const egin = ICBegin;

extern "ApplicationServices" fn ICGetPref(
    inst: ICInstance,
    key: objc.ConstStr255Param,
    attr: ?*ICAttr,
    buf: ?*anyopaque,
    size: ?*i64,
) callconv(.C) objc.OSStatus;
pub const etPref = ICGetPref;

extern "ApplicationServices" fn ICSetPref(
    inst: ICInstance,
    key: objc.ConstStr255Param,
    attr: ICAttr,
    buf: ?*anyopaque,
    size: i64,
) callconv(.C) objc.OSStatus;
pub const etPref = ICSetPref;

extern "ApplicationServices" fn ICFindPrefHandle(
    inst: ICInstance,
    key: objc.ConstStr255Param,
    attr: ?*ICAttr,
    prefh: objc.Handle,
) callconv(.C) objc.OSStatus;
pub const indPrefHandle = ICFindPrefHandle;

extern "ApplicationServices" fn ICGetPrefHandle(
    inst: ICInstance,
    key: objc.ConstStr255Param,
    attr: ?*ICAttr,
    prefh: ?*objc.Handle,
) callconv(.C) objc.OSStatus;
pub const etPrefHandle = ICGetPrefHandle;

extern "ApplicationServices" fn ICSetPrefHandle(
    inst: ICInstance,
    key: objc.ConstStr255Param,
    attr: ICAttr,
    prefh: objc.Handle,
) callconv(.C) objc.OSStatus;
pub const etPrefHandle = ICSetPrefHandle;

extern "ApplicationServices" fn ICCountPref(inst: ICInstance, count: ?*i64) callconv(.C) objc.OSStatus;
pub const ountPref = ICCountPref;

extern "ApplicationServices" fn ICGetIndPref(inst: ICInstance, index: i64, key: objc.Str255) callconv(.C) objc.OSStatus;
pub const etIndPref = ICGetIndPref;

extern "ApplicationServices" fn ICDeletePref(inst: ICInstance, key: objc.ConstStr255Param) callconv(.C) objc.OSStatus;
pub const eletePref = ICDeletePref;

extern "ApplicationServices" fn ICEnd(inst: ICInstance) callconv(.C) objc.OSStatus;
pub const nd = ICEnd;

extern "ApplicationServices" fn ICGetDefaultPref(inst: ICInstance, key: objc.ConstStr255Param, prefH: objc.Handle) callconv(.C) objc.OSStatus;
pub const etDefaultPref = ICGetDefaultPref;

extern "ApplicationServices" fn ICEditPreferences(inst: ICInstance, key: objc.ConstStr255Param) callconv(.C) objc.OSStatus;
pub const ditPreferences = ICEditPreferences;

extern "ApplicationServices" fn ICLaunchURL(
    inst: ICInstance,
    hint: objc.ConstStr255Param,
    data: ?*anyopaque,
    len: i64,
    selStart: ?*i64,
    selEnd: ?*i64,
) callconv(.C) objc.OSStatus;
pub const aunchURL = ICLaunchURL;

extern "ApplicationServices" fn ICParseURL(
    inst: ICInstance,
    hint: objc.ConstStr255Param,
    data: ?*anyopaque,
    len: i64,
    selStart: ?*i64,
    selEnd: ?*i64,
    url: objc.Handle,
) callconv(.C) objc.OSStatus;
pub const arseURL = ICParseURL;

extern "ApplicationServices" fn ICCreateGURLEvent(
    inst: ICInstance,
    helperCreator: objc.OSType,
    urlH: objc.Handle,
    theEvent: ?*core_services.AppleEvent,
) callconv(.C) objc.OSStatus;
pub const reateGURLEvent = ICCreateGURLEvent;

extern "ApplicationServices" fn ICSendGURLEvent(inst: ICInstance, theEvent: ?*core_services.AppleEvent) callconv(.C) objc.OSStatus;
pub const endGURLEvent = ICSendGURLEvent;

extern "ApplicationServices" fn ICMapFilename(inst: ICInstance, filename: objc.ConstStr255Param, entry: ?*ICMapEntry) callconv(.C) objc.OSStatus;
pub const apFilename = ICMapFilename;

extern "ApplicationServices" fn ICMapTypeCreator(
    inst: ICInstance,
    fType: objc.OSType,
    fCreator: objc.OSType,
    filename: objc.ConstStr255Param,
    entry: ?*ICMapEntry,
) callconv(.C) objc.OSStatus;
pub const apTypeCreator = ICMapTypeCreator;

extern "ApplicationServices" fn ICMapEntriesFilename(
    inst: ICInstance,
    entries: objc.Handle,
    filename: objc.ConstStr255Param,
    entry: ?*ICMapEntry,
) callconv(.C) objc.OSStatus;
pub const apEntriesFilename = ICMapEntriesFilename;

extern "ApplicationServices" fn ICMapEntriesTypeCreator(
    inst: ICInstance,
    entries: objc.Handle,
    fType: objc.OSType,
    fCreator: objc.OSType,
    filename: objc.ConstStr255Param,
    entry: ?*ICMapEntry,
) callconv(.C) objc.OSStatus;
pub const apEntriesTypeCreator = ICMapEntriesTypeCreator;

extern "ApplicationServices" fn ICCountMapEntries(inst: ICInstance, entries: objc.Handle, count: ?*i64) callconv(.C) objc.OSStatus;
pub const ountMapEntries = ICCountMapEntries;

extern "ApplicationServices" fn ICGetIndMapEntry(
    inst: ICInstance,
    entries: objc.Handle,
    index: i64,
    pos: ?*i64,
    entry: ?*ICMapEntry,
) callconv(.C) objc.OSStatus;
pub const etIndMapEntry = ICGetIndMapEntry;

extern "ApplicationServices" fn ICGetMapEntry(
    inst: ICInstance,
    entries: objc.Handle,
    pos: i64,
    entry: ?*ICMapEntry,
) callconv(.C) objc.OSStatus;
pub const etMapEntry = ICGetMapEntry;

extern "ApplicationServices" fn ICSetMapEntry(
    inst: ICInstance,
    entries: objc.Handle,
    pos: i64,
    entry: ?*ICMapEntry,
) callconv(.C) objc.OSStatus;
pub const etMapEntry = ICSetMapEntry;

extern "ApplicationServices" fn ICDeleteMapEntry(inst: ICInstance, entries: objc.Handle, pos: i64) callconv(.C) objc.OSStatus;
pub const eleteMapEntry = ICDeleteMapEntry;

extern "ApplicationServices" fn ICAddMapEntry(inst: ICInstance, entries: objc.Handle, entry: ?*ICMapEntry) callconv(.C) objc.OSStatus;
pub const ddMapEntry = ICAddMapEntry;

extern "ApplicationServices" fn ICGetCurrentProfile(inst: ICInstance, currentID: ?*ICProfileID) callconv(.C) objc.OSStatus;
pub const etCurrentProfile = ICGetCurrentProfile;

extern "ApplicationServices" fn ICSetCurrentProfile(inst: ICInstance, newID: ICProfileID) callconv(.C) objc.OSStatus;
pub const etCurrentProfile = ICSetCurrentProfile;

extern "ApplicationServices" fn ICCountProfiles(inst: ICInstance, count: ?*i64) callconv(.C) objc.OSStatus;
pub const ountProfiles = ICCountProfiles;

extern "ApplicationServices" fn ICGetIndProfile(inst: ICInstance, index: i64, thisID: ?*ICProfileID) callconv(.C) objc.OSStatus;
pub const etIndProfile = ICGetIndProfile;

extern "ApplicationServices" fn ICGetProfileName(inst: ICInstance, thisID: ICProfileID, name: objc.Str255) callconv(.C) objc.OSStatus;
pub const etProfileName = ICGetProfileName;

extern "ApplicationServices" fn ICSetProfileName(inst: ICInstance, thisID: ICProfileID, name: objc.ConstStr255Param) callconv(.C) objc.OSStatus;
pub const etProfileName = ICSetProfileName;

extern "ApplicationServices" fn ICAddProfile(inst: ICInstance, prototypeID: ICProfileID, newID: ?*ICProfileID) callconv(.C) objc.OSStatus;
pub const ddProfile = ICAddProfile;

extern "ApplicationServices" fn ICDeleteProfile(inst: ICInstance, thisID: ICProfileID) callconv(.C) objc.OSStatus;
pub const eleteProfile = ICDeleteProfile;

pub const LaunchFlags = objc.UInt16;

pub const AppParameters = extern struct {
    theMsgEvent: anon573,
    eventRefCon: objc.UInt32,
    messageLength: objc.UInt32,
};

pub const anon573 = extern struct {
    what: objc.UInt16,
    message: objc.UInt32,
    when: objc.UInt32,
    where: objc.Point,
    modifiers: objc.UInt16,
};

pub const AppParametersPtr = ?*AppParameters;

pub const LaunchParamBlockRec = extern struct {
    reserved1: objc.UInt32,
    reserved2: objc.UInt16,
    launchBlockID: objc.UInt16,
    launchEPBLength: objc.UInt32,
    launchFileFlags: objc.UInt16,
    launchControlFlags: LaunchFlags,
    launchAppRef: core_services.FSRefPtr,
    launchProcessSN: objc.ProcessSerialNumber,
    launchPreferredSize: objc.UInt32,
    launchMinimumSize: objc.UInt32,
    launchAvailableSize: objc.UInt32,
    launchAppParameters: AppParametersPtr,
};

pub const LaunchPBPtr = ?*LaunchParamBlockRec;

pub const ProcessApplicationTransformState = objc.UInt32;

pub const ProcessInfoRec = extern struct {
    processInfoLength: objc.UInt32,
    processName: objc.StringPtr,
    processNumber: objc.ProcessSerialNumber,
    processType: objc.UInt32,
    processSignature: objc.OSType,
    processMode: objc.UInt32,
    processLocation: objc.Ptr,
    processSize: objc.UInt32,
    processFreeMem: objc.UInt32,
    processLauncher: objc.ProcessSerialNumber,
    processLaunchDate: objc.UInt32,
    processActiveTime: objc.UInt32,
    processAppRef: core_services.FSRefPtr,
};

pub const ProcessInfoRecPtr = ?*ProcessInfoRec;

pub const ProcessInfoExtendedRec = extern struct {
    processInfoLength: objc.UInt32,
    processName: objc.StringPtr,
    processNumber: objc.ProcessSerialNumber,
    processType: objc.UInt32,
    processSignature: objc.OSType,
    processMode: objc.UInt32,
    processLocation: objc.Ptr,
    processSize: objc.UInt32,
    processFreeMem: objc.UInt32,
    processLauncher: objc.ProcessSerialNumber,
    processLaunchDate: objc.UInt32,
    processActiveTime: objc.UInt32,
    processAppRef: core_services.FSRefPtr,
    processTempMemTotal: objc.UInt32,
    processPurgeableTempMemTotal: objc.UInt32,
};

pub const ProcessInfoExtendedRecPtr = ?*ProcessInfoExtendedRec;

pub const SizeResourceRec = extern struct {
    flags: objc.UInt16,
    preferredHeapSize: objc.UInt32,
    minimumHeapSize: objc.UInt32,
};

pub const SizeResourceRecPtr = ?*SizeResourceRec;

pub const SizeResourceRecHandle = ?*SizeResourceRecPtr;

extern "ApplicationServices" fn LaunchApplication(LaunchParams: LaunchPBPtr) callconv(.C) objc.OSErr;
pub const nchApplication = LaunchApplication;

extern "ApplicationServices" fn GetCurrentProcess(pPSN: ?*objc.ProcessSerialNumber) callconv(.C) objc.OSErr;
pub const currentProcess = GetCurrentProcess;

extern "ApplicationServices" fn GetFrontProcess(pPSN: ?*objc.ProcessSerialNumber) callconv(.C) objc.OSErr;
pub const frontProcess = GetFrontProcess;

extern "ApplicationServices" fn GetNextProcess(pPSN: ?*objc.ProcessSerialNumber) callconv(.C) objc.OSErr;
pub const nextProcess = GetNextProcess;

extern "ApplicationServices" fn GetProcessInformation(PSN: ?*objc.ProcessSerialNumber, info: ?*ProcessInfoRec) callconv(.C) objc.OSErr;
pub const processInformation = GetProcessInformation;

extern "ApplicationServices" fn ProcessInformationCopyDictionary(PSN: ?*objc.ProcessSerialNumber, infoToReturn: objc.UInt32) callconv(.C) core_foundation.DictionaryRef;
pub const cessInformationCopyDictionary = ProcessInformationCopyDictionary;

extern "ApplicationServices" fn SetFrontProcess(pPSN: ?*objc.ProcessSerialNumber) callconv(.C) objc.OSErr;
pub const frontProcess = SetFrontProcess;

extern "ApplicationServices" fn SetFrontProcessWithOptions(inProcess: ?*objc.ProcessSerialNumber, inOptions: objc.OptionBits) callconv(.C) objc.OSStatus;
pub const frontProcessWithOptions = SetFrontProcessWithOptions;

extern "ApplicationServices" fn WakeUpProcess(PSN: ?*objc.ProcessSerialNumber) callconv(.C) objc.OSErr;
pub const eUpProcess = WakeUpProcess;

extern "ApplicationServices" fn SameProcess(PSN1: ?*objc.ProcessSerialNumber, PSN2: ?*objc.ProcessSerialNumber, result: ?*objc.Boolean) callconv(.C) objc.OSErr;
pub const eProcess = SameProcess;

extern "ApplicationServices" fn ExitToShell() callconv(.C) void;
pub const tToShell = ExitToShell;

extern "ApplicationServices" fn KillProcess(inProcess: ?*objc.ProcessSerialNumber) callconv(.C) objc.OSErr;
pub const lProcess = KillProcess;

extern "ApplicationServices" fn GetProcessBundleLocation(psn: ?*objc.ProcessSerialNumber, location: ?*core_services.FSRef) callconv(.C) objc.OSStatus;
pub const processBundleLocation = GetProcessBundleLocation;

extern "ApplicationServices" fn CopyProcessName(psn: ?*objc.ProcessSerialNumber, name: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const yProcessName = CopyProcessName;

extern "ApplicationServices" fn GetProcessPID(psn: ?*objc.ProcessSerialNumber, pid: ?*objc.pid_t) callconv(.C) objc.OSStatus;
pub const processPID = GetProcessPID;

extern "ApplicationServices" fn GetProcessForPID(pid: objc.pid_t, psn: ?*objc.ProcessSerialNumber) callconv(.C) objc.OSStatus;
pub const processForPID = GetProcessForPID;

extern "ApplicationServices" fn IsProcessVisible(psn: ?*objc.ProcessSerialNumber) callconv(.C) objc.Boolean;
pub const rocessVisible = IsProcessVisible;

extern "ApplicationServices" fn ShowHideProcess(psn: ?*objc.ProcessSerialNumber, visible: objc.Boolean) callconv(.C) objc.OSErr;
pub const wHideProcess = ShowHideProcess;

extern "ApplicationServices" fn TransformProcessType(psn: ?*objc.ProcessSerialNumber, transformState: ProcessApplicationTransformState) callconv(.C) objc.OSStatus;
pub const nsformProcessType = TransformProcessType;

pub const anon8941 = enum(i32) {
    cdevGenErr = -1,
    cdevMemErr = 0,
    cdevResErr = 1,
    cdevUnset = 3,
};

pub const OpaquePasteboardRef = extern struct {};

pub const PasteboardRef = ?*OpaquePasteboardRef;

pub const PasteboardItemID = ?*anyopaque;

pub const PasteboardSyncFlags = enum(objc.OptionBits) {
    kPasteboardModified = 1,
    kPasteboardClientIsOwner = 2,
};

pub const PasteboardFlavorFlags = enum(objc.OptionBits) {
    kPasteboardFlavorNoFlags = 0,
    kPasteboardFlavorSenderOnly = 1,
    kPasteboardFlavorSenderTranslated = 2,
    kPasteboardFlavorNotSaved = 4,
    kPasteboardFlavorRequestOnly = 8,
    kPasteboardFlavorSystemTranslated = 256,
    kPasteboardFlavorPromised = 512,
};

pub const PasteboardStandardLocation = enum(objc.OSType) {
    kPasteboardStandardLocationTrash = 1953657704,
    kPasteboardStandardLocationUnknown = 1970170734,
};

extern "ApplicationServices" fn PasteboardGetTypeID() callconv(.C) core_foundation.TypeID;
pub const teboardGetTypeID = PasteboardGetTypeID;

extern "ApplicationServices" fn PasteboardCreate(inName: core_foundation.StringRef, outPasteboard: ?*PasteboardRef) callconv(.C) objc.OSStatus;
pub const teboardCreate = PasteboardCreate;

extern "ApplicationServices" fn PasteboardSynchronize(inPasteboard: PasteboardRef) callconv(.C) PasteboardSyncFlags;
pub const teboardSynchronize = PasteboardSynchronize;

extern "ApplicationServices" fn PasteboardClear(inPasteboard: PasteboardRef) callconv(.C) objc.OSStatus;
pub const teboardClear = PasteboardClear;

extern "ApplicationServices" fn PasteboardCopyName(inPasteboard: PasteboardRef, outName: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const teboardCopyName = PasteboardCopyName;

extern "ApplicationServices" fn PasteboardGetItemCount(inPasteboard: PasteboardRef, outItemCount: ?*objc.ItemCount) callconv(.C) objc.OSStatus;
pub const teboardGetItemCount = PasteboardGetItemCount;

extern "ApplicationServices" fn PasteboardGetItemIdentifier(inPasteboard: PasteboardRef, inIndex: core_foundation.Index, outItem: ?*PasteboardItemID) callconv(.C) objc.OSStatus;
pub const teboardGetItemIdentifier = PasteboardGetItemIdentifier;

extern "ApplicationServices" fn PasteboardCopyItemFlavors(inPasteboard: PasteboardRef, inItem: PasteboardItemID, outFlavorTypes: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const teboardCopyItemFlavors = PasteboardCopyItemFlavors;

extern "ApplicationServices" fn PasteboardGetItemFlavorFlags(
    inPasteboard: PasteboardRef,
    inItem: PasteboardItemID,
    inFlavorType: core_foundation.StringRef,
    outFlags: ?*PasteboardFlavorFlags,
) callconv(.C) objc.OSStatus;
pub const teboardGetItemFlavorFlags = PasteboardGetItemFlavorFlags;

extern "ApplicationServices" fn PasteboardCopyItemFlavorData(
    inPasteboard: PasteboardRef,
    inItem: PasteboardItemID,
    inFlavorType: core_foundation.StringRef,
    outData: ?*core_foundation.DataRef,
) callconv(.C) objc.OSStatus;
pub const teboardCopyItemFlavorData = PasteboardCopyItemFlavorData;

extern "ApplicationServices" fn PasteboardPutItemFlavor(
    inPasteboard: PasteboardRef,
    inItem: PasteboardItemID,
    inFlavorType: core_foundation.StringRef,
    inData: core_foundation.DataRef,
    inFlags: PasteboardFlavorFlags,
) callconv(.C) objc.OSStatus;
pub const teboardPutItemFlavor = PasteboardPutItemFlavor;

extern "ApplicationServices" fn PasteboardCopyPasteLocation(inPasteboard: PasteboardRef, outPasteLocation: ?*core_foundation.URLRef) callconv(.C) objc.OSStatus;
pub const teboardCopyPasteLocation = PasteboardCopyPasteLocation;

extern "ApplicationServices" fn PasteboardSetPasteLocation(inPasteboard: PasteboardRef, inPasteLocation: core_foundation.URLRef) callconv(.C) objc.OSStatus;
pub const teboardSetPasteLocation = PasteboardSetPasteLocation;

pub const PasteboardPromiseKeeperProcPtr = ?*const fn (
    PasteboardRef,
    PasteboardItemID,
    core_foundation.StringRef,
    ?*anyopaque,
) callconv(.C) objc.OSStatus;

extern "ApplicationServices" fn PasteboardSetPromiseKeeper(inPasteboard: PasteboardRef, inPromiseKeeper: PasteboardPromiseKeeperProcPtr, inContext: ?*anyopaque) callconv(.C) objc.OSStatus;
pub const teboardSetPromiseKeeper = PasteboardSetPromiseKeeper;

extern "ApplicationServices" fn PasteboardResolvePromises(inPasteboard: PasteboardRef) callconv(.C) objc.OSStatus;
pub const teboardResolvePromises = PasteboardResolvePromises;

pub const OpaqueTranslationRef = extern struct {};

pub const TranslationRef = ?*OpaqueTranslationRef;

pub const TranslationFlags = objc.OptionBits;

pub const anon1421 = enum(u32) {
    kTranslationDataTranslation = 1,
    kTranslationFileTranslation = 2,
};

extern "ApplicationServices" fn TranslationGetTypeID() callconv(.C) core_foundation.TypeID;
pub const nslationGetTypeID = TranslationGetTypeID;

extern "ApplicationServices" fn TranslationCreate(
    inSourceType: core_foundation.StringRef,
    inDestinationType: core_foundation.StringRef,
    inTranslationFlags: TranslationFlags,
    outTranslation: ?*TranslationRef,
) callconv(.C) objc.OSStatus;
pub const nslationCreate = TranslationCreate;

extern "ApplicationServices" fn TranslationCreateWithSourceArray(
    inSourceTypes: core_foundation.ArrayRef,
    inTranslationFlags: TranslationFlags,
    outDestinationTypes: ?*core_foundation.ArrayRef,
    outTranslations: ?*core_foundation.DictionaryRef,
) callconv(.C) objc.OSStatus;
pub const nslationCreateWithSourceArray = TranslationCreateWithSourceArray;

extern "ApplicationServices" fn TranslationPerformForData(inTranslation: TranslationRef, inSourceData: core_foundation.DataRef, outDestinationData: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;
pub const nslationPerformForData = TranslationPerformForData;

extern "ApplicationServices" fn TranslationPerformForFile(
    inTranslation: TranslationRef,
    inSourceFile: ?*core_services.FSRef,
    inDestinationDirectory: ?*core_services.FSRef,
    inDestinationName: core_foundation.StringRef,
    outTranslatedFile: ?*core_services.FSRef,
) callconv(.C) objc.OSStatus;
pub const nslationPerformForFile = TranslationPerformForFile;

extern "ApplicationServices" fn TranslationPerformForURL(
    inTranslation: TranslationRef,
    inSourceURL: core_foundation.URLRef,
    inDestinationURL: core_foundation.URLRef,
    outTranslatedURL: ?*core_foundation.URLRef,
) callconv(.C) objc.OSStatus;
pub const nslationPerformForURL = TranslationPerformForURL;

extern "ApplicationServices" fn TranslationCopySourceType(inTranslation: TranslationRef, outSourceType: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const nslationCopySourceType = TranslationCopySourceType;

extern "ApplicationServices" fn TranslationCopyDestinationType(inTranslation: TranslationRef, outDestinationType: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const nslationCopyDestinationType = TranslationCopyDestinationType;

extern "ApplicationServices" fn TranslationGetTranslationFlags(inTranslation: TranslationRef, outTranslationFlags: ?*TranslationFlags) callconv(.C) objc.OSStatus;
pub const nslationGetTranslationFlags = TranslationGetTranslationFlags;

pub const AXError = enum(objc.SInt32) {
    kAXErrorSuccess = 0,
    kAXErrorFailure = -25200,
    kAXErrorIllegalArgument = -25201,
    kAXErrorInvalidUIElement = -25202,
    kAXErrorInvalidUIElementObserver = -25203,
    kAXErrorCannotComplete = -25204,
    kAXErrorAttributeUnsupported = -25205,
    kAXErrorActionUnsupported = -25206,
    kAXErrorNotificationUnsupported = -25207,
    kAXErrorNotImplemented = -25208,
    kAXErrorNotificationAlreadyRegistered = -25209,
    kAXErrorNotificationNotRegistered = -25210,
    kAXErrorAPIDisabled = -25211,
    kAXErrorNoValue = -25212,
    kAXErrorParameterizedAttributeUnsupported = -25213,
    kAXErrorNotEnoughPrecision = -25214,
};

pub const AXMenuItemModifiers = enum(objc.UInt32) {
    kAXMenuItemModifierNone = 0,
    kAXMenuItemModifierShift = 1,
    kAXMenuItemModifierOption = 2,
    kAXMenuItemModifierControl = 4,
    kAXMenuItemModifierNoCommand = 8,
};

pub const AXPriority = enum(core_foundation.Index) {
    kAXPriorityLow = 10,
    kAXPriorityMedium = 50,
    kAXPriorityHigh = 90,
};

extern "ApplicationServices" fn AXAPIEnabled() callconv(.C) objc.Boolean;
pub const piEnabled = AXAPIEnabled;

extern "ApplicationServices" fn AXIsProcessTrustedWithOptions(options: core_foundation.DictionaryRef) callconv(.C) objc.Boolean;
pub const sProcessTrustedWithOptions = AXIsProcessTrustedWithOptions;

extern "ApplicationServices" fn AXIsProcessTrusted() callconv(.C) objc.Boolean;
pub const sProcessTrusted = AXIsProcessTrusted;

extern "ApplicationServices" fn AXMakeProcessTrusted(executablePath: core_foundation.StringRef) callconv(.C) AXError;
pub const akeProcessTrusted = AXMakeProcessTrusted;

pub const __AXUIElement = extern struct {};

pub const AXUIElementRef = ?*__AXUIElement;

pub const AXCopyMultipleAttributeOptions = enum(objc.UInt32) {
    kAXCopyMultipleAttributeOptionStopOnError = 1,
};

extern "ApplicationServices" fn AXUIElementGetTypeID() callconv(.C) core_foundation.TypeID;
pub const iElementGetTypeID = AXUIElementGetTypeID;

extern "ApplicationServices" fn AXUIElementCopyAttributeNames(element: AXUIElementRef, names: ?*core_foundation.ArrayRef) callconv(.C) AXError;
pub const iElementCopyAttributeNames = AXUIElementCopyAttributeNames;

extern "ApplicationServices" fn AXUIElementCopyAttributeValue(element: AXUIElementRef, attribute: core_foundation.StringRef, value: ?*core_foundation.TypeRef) callconv(.C) AXError;
pub const iElementCopyAttributeValue = AXUIElementCopyAttributeValue;

extern "ApplicationServices" fn AXUIElementGetAttributeValueCount(element: AXUIElementRef, attribute: core_foundation.StringRef, count: ?*core_foundation.Index) callconv(.C) AXError;
pub const iElementGetAttributeValueCount = AXUIElementGetAttributeValueCount;

extern "ApplicationServices" fn AXUIElementCopyAttributeValues(
    element: AXUIElementRef,
    attribute: core_foundation.StringRef,
    index: core_foundation.Index,
    maxValues: core_foundation.Index,
    values: ?*core_foundation.ArrayRef,
) callconv(.C) AXError;
pub const iElementCopyAttributeValues = AXUIElementCopyAttributeValues;

extern "ApplicationServices" fn AXUIElementIsAttributeSettable(element: AXUIElementRef, attribute: core_foundation.StringRef, settable: ?*objc.Boolean) callconv(.C) AXError;
pub const iElementIsAttributeSettable = AXUIElementIsAttributeSettable;

extern "ApplicationServices" fn AXUIElementSetAttributeValue(element: AXUIElementRef, attribute: core_foundation.StringRef, value: core_foundation.TypeRef) callconv(.C) AXError;
pub const iElementSetAttributeValue = AXUIElementSetAttributeValue;

extern "ApplicationServices" fn AXUIElementCopyMultipleAttributeValues(
    element: AXUIElementRef,
    attributes: core_foundation.ArrayRef,
    options: AXCopyMultipleAttributeOptions,
    values: ?*core_foundation.ArrayRef,
) callconv(.C) AXError;
pub const iElementCopyMultipleAttributeValues = AXUIElementCopyMultipleAttributeValues;

extern "ApplicationServices" fn AXUIElementCopyParameterizedAttributeNames(element: AXUIElementRef, names: ?*core_foundation.ArrayRef) callconv(.C) AXError;
pub const iElementCopyParameterizedAttributeNames = AXUIElementCopyParameterizedAttributeNames;

extern "ApplicationServices" fn AXUIElementCopyParameterizedAttributeValue(
    element: AXUIElementRef,
    parameterizedAttribute: core_foundation.StringRef,
    parameter: core_foundation.TypeRef,
    result: ?*core_foundation.TypeRef,
) callconv(.C) AXError;
pub const iElementCopyParameterizedAttributeValue = AXUIElementCopyParameterizedAttributeValue;

extern "ApplicationServices" fn AXUIElementCopyActionNames(element: AXUIElementRef, names: ?*core_foundation.ArrayRef) callconv(.C) AXError;
pub const iElementCopyActionNames = AXUIElementCopyActionNames;

extern "ApplicationServices" fn AXUIElementCopyActionDescription(element: AXUIElementRef, action: core_foundation.StringRef, description: ?*core_foundation.StringRef) callconv(.C) AXError;
pub const iElementCopyActionDescription = AXUIElementCopyActionDescription;

extern "ApplicationServices" fn AXUIElementPerformAction(element: AXUIElementRef, action: core_foundation.StringRef) callconv(.C) AXError;
pub const iElementPerformAction = AXUIElementPerformAction;

extern "ApplicationServices" fn AXUIElementCopyElementAtPosition(
    application: AXUIElementRef,
    x: f32,
    y: f32,
    element: ?*AXUIElementRef,
) callconv(.C) AXError;
pub const iElementCopyElementAtPosition = AXUIElementCopyElementAtPosition;

extern "ApplicationServices" fn AXUIElementCreateApplication(pid: objc.pid_t) callconv(.C) AXUIElementRef;
pub const iElementCreateApplication = AXUIElementCreateApplication;

extern "ApplicationServices" fn AXUIElementCreateSystemWide() callconv(.C) AXUIElementRef;
pub const iElementCreateSystemWide = AXUIElementCreateSystemWide;

extern "ApplicationServices" fn AXUIElementGetPid(element: AXUIElementRef, pid: ?*objc.pid_t) callconv(.C) AXError;
pub const iElementGetPid = AXUIElementGetPid;

extern "ApplicationServices" fn AXUIElementSetMessagingTimeout(element: AXUIElementRef, timeoutInSeconds: f32) callconv(.C) AXError;
pub const iElementSetMessagingTimeout = AXUIElementSetMessagingTimeout;

extern "ApplicationServices" fn AXUIElementPostKeyboardEvent(
    application: AXUIElementRef,
    keyChar: core_graphics.CharCode,
    virtualKey: core_graphics.KeyCode,
    keyDown: objc.Boolean,
) callconv(.C) AXError;
pub const iElementPostKeyboardEvent = AXUIElementPostKeyboardEvent;

pub const __AXTextMarker = extern struct {};

pub const AXTextMarkerRef = ?*__AXTextMarker;

extern "ApplicationServices" fn AXTextMarkerGetTypeID() callconv(.C) core_foundation.TypeID;
pub const extMarkerGetTypeID = AXTextMarkerGetTypeID;

extern "ApplicationServices" fn AXTextMarkerCreate(allocator: core_foundation.AllocatorRef, bytes: ?*objc.UInt8, length: core_foundation.Index) callconv(.C) AXTextMarkerRef;
pub const extMarkerCreate = AXTextMarkerCreate;

extern "ApplicationServices" fn AXTextMarkerGetLength(marker: AXTextMarkerRef) callconv(.C) core_foundation.Index;
pub const extMarkerGetLength = AXTextMarkerGetLength;

extern "ApplicationServices" fn AXTextMarkerGetBytePtr(theTextMarker: AXTextMarkerRef) callconv(.C) ?*objc.UInt8;
pub const extMarkerGetBytePtr = AXTextMarkerGetBytePtr;

pub const __AXTextMarkerRange = extern struct {};

pub const AXTextMarkerRangeRef = ?*__AXTextMarkerRange;

extern "ApplicationServices" fn AXTextMarkerRangeGetTypeID() callconv(.C) core_foundation.TypeID;
pub const extMarkerRangeGetTypeID = AXTextMarkerRangeGetTypeID;

extern "ApplicationServices" fn AXTextMarkerRangeCreate(allocator: core_foundation.AllocatorRef, startMarker: AXTextMarkerRef, endMarker: AXTextMarkerRef) callconv(.C) AXTextMarkerRangeRef;
pub const extMarkerRangeCreate = AXTextMarkerRangeCreate;

extern "ApplicationServices" fn AXTextMarkerRangeCreateWithBytes(
    allocator: core_foundation.AllocatorRef,
    startMarkerBytes: ?*objc.UInt8,
    startMarkerLength: core_foundation.Index,
    endMarkerBytes: ?*objc.UInt8,
    endMarkerLength: core_foundation.Index,
) callconv(.C) AXTextMarkerRangeRef;
pub const extMarkerRangeCreateWithBytes = AXTextMarkerRangeCreateWithBytes;

extern "ApplicationServices" fn AXTextMarkerRangeCopyStartMarker(textMarkerRange: AXTextMarkerRangeRef) callconv(.C) AXTextMarkerRef;
pub const extMarkerRangeCopyStartMarker = AXTextMarkerRangeCopyStartMarker;

extern "ApplicationServices" fn AXTextMarkerRangeCopyEndMarker(textMarkerRange: AXTextMarkerRangeRef) callconv(.C) AXTextMarkerRef;
pub const extMarkerRangeCopyEndMarker = AXTextMarkerRangeCopyEndMarker;

pub const __AXObserver = extern struct {};

pub const AXObserverRef = ?*__AXObserver;

pub const AXObserverCallback = ?*const fn (
    AXObserverRef,
    AXUIElementRef,
    core_foundation.StringRef,
    ?*anyopaque,
) callconv(.C) void;

pub const AXObserverCallbackWithInfo = ?*const fn (
    AXObserverRef,
    AXUIElementRef,
    core_foundation.StringRef,
    core_foundation.DictionaryRef,
    ?*anyopaque,
) callconv(.C) void;

extern "ApplicationServices" fn AXObserverGetTypeID() callconv(.C) core_foundation.TypeID;
pub const bserverGetTypeID = AXObserverGetTypeID;

extern "ApplicationServices" fn AXObserverCreate(application: objc.pid_t, callback: AXObserverCallback, outObserver: ?*AXObserverRef) callconv(.C) AXError;
pub const bserverCreate = AXObserverCreate;

extern "ApplicationServices" fn AXObserverCreateWithInfoCallback(application: objc.pid_t, callback: AXObserverCallbackWithInfo, outObserver: ?*AXObserverRef) callconv(.C) AXError;
pub const bserverCreateWithInfoCallback = AXObserverCreateWithInfoCallback;

extern "ApplicationServices" fn AXObserverAddNotification(
    observer: AXObserverRef,
    element: AXUIElementRef,
    notification: core_foundation.StringRef,
    refcon: ?*anyopaque,
) callconv(.C) AXError;
pub const bserverAddNotification = AXObserverAddNotification;

extern "ApplicationServices" fn AXObserverRemoveNotification(observer: AXObserverRef, element: AXUIElementRef, notification: core_foundation.StringRef) callconv(.C) AXError;
pub const bserverRemoveNotification = AXObserverRemoveNotification;

extern "ApplicationServices" fn AXObserverGetRunLoopSource(observer: AXObserverRef) callconv(.C) core_foundation.RunLoopSourceRef;
pub const bserverGetRunLoopSource = AXObserverGetRunLoopSource;

pub const AXValueType = enum(objc.UInt32) {
    kAXValueTypeCGPoint = 1,
    kAXValueTypeCGSize = 2,
    kAXValueTypeCGRect = 3,
    kAXValueTypeCFRange = 4,
    kAXValueTypeAXError = 5,
    kAXValueTypeIllegal = 0,
};

pub const __AXValue = extern struct {};

pub const AXValueRef = ?*__AXValue;

extern "ApplicationServices" fn AXValueGetTypeID() callconv(.C) core_foundation.TypeID;
pub const alueGetTypeID = AXValueGetTypeID;

extern "ApplicationServices" fn AXValueCreate(theType: AXValueType, valuePtr: ?*anyopaque) callconv(.C) AXValueRef;
pub const alueCreate = AXValueCreate;

extern "ApplicationServices" fn AXValueGetType(value: AXValueRef) callconv(.C) AXValueType;
pub const alueGetType = AXValueGetType;

extern "ApplicationServices" fn AXValueGetValue(value: AXValueRef, theType: AXValueType, valuePtr: ?*anyopaque) callconv(.C) objc.Boolean;
pub const alueGetValue = AXValueGetValue;

pub const AXUnderlineStyle = enum(objc.UInt32) {
    kAXUnderlineStyleNone = 0,
    kAXUnderlineStyleSingle = 1,
    kAXUnderlineStyleThick = 2,
    kAXUnderlineStyleDouble = 9,
};

pub const UAZoomChangeFocusType = objc.UInt32;

extern "ApplicationServices" fn UAZoomEnabled() callconv(.C) objc.Boolean;
pub const oomEnabled = UAZoomEnabled;

extern "ApplicationServices" fn UAZoomChangeFocus(inRect: ?*core_foundation.CGRect, inHighlightRect: ?*core_foundation.CGRect, inType: UAZoomChangeFocusType) callconv(.C) objc.OSStatus;
pub const oomChangeFocus = UAZoomChangeFocus;

pub const PMObject = ?*anyopaque;

pub const OpaquePMPrintSettings = extern struct {};

pub const PMPrintSettings = ?*OpaquePMPrintSettings;

pub const OpaquePMPageFormat = extern struct {};

pub const PMPageFormat = ?*OpaquePMPageFormat;

pub const OpaquePMPrintSession = extern struct {};

pub const PMPrintSession = ?*OpaquePMPrintSession;

pub const OpaquePMPrinter = extern struct {};

pub const PMPrinter = ?*OpaquePMPrinter;

pub const OpaquePMServer = extern struct {};

pub const PMServer = ?*OpaquePMServer;

pub const OpaquePMPreset = extern struct {};

pub const PMPreset = ?*OpaquePMPreset;

pub const OpaquePMPaper = extern struct {};

pub const PMPaper = ?*OpaquePMPaper;

pub const PMDestinationType = objc.UInt16;

pub const PMOrientation = objc.UInt16;

pub const PMPrinterState = objc.UInt16;

pub const PMColorSpaceModel = objc.UInt32;

pub const PMQualityMode = objc.UInt32;

pub const PMPaperType = objc.UInt32;

pub const PMScalingAlignment = objc.UInt16;

pub const PMDuplexMode = objc.UInt32;

pub const PMLayoutDirection = objc.UInt16;

pub const PMBorderType = objc.UInt16;

pub const PMPrintDialogOptionFlags = objc.OptionBits;

pub const PMPPDDomain = objc.UInt16;

pub const anon1781 = enum(u32) {
    kAllPPDDomains = 1,
    kSystemPPDDomain = 2,
    kLocalPPDDomain = 3,
    kNetworkPPDDomain = 4,
    kUserPPDDomain = 5,
    kCUPSPPDDomain = 6,
};

pub const anon2071 = enum(i32) {
    kPMNoError = 0,
    kPMGeneralError = -30870,
    kPMOutOfScope = -30871,
    kPMInvalidParameter = -50,
    kPMNoDefaultPrinter = -30872,
    kPMNotImplemented = -30873,
    kPMNoSuchEntry = -30874,
    kPMInvalidPrintSettings = -30875,
    kPMInvalidPageFormat = -30876,
    kPMValueOutOfRange = -30877,
};

pub const anon2281 = enum(i32) {
    kPMPrintAllPages = -1,
};

pub const anon2321 = enum(u32) {
    kPMUnlocked = 0,
};

pub const PMRect = extern struct {
    top: f64,
    left: f64,
    bottom: f64,
    right: f64,
};

pub const PMResolution = extern struct {
    hRes: f64,
    vRes: f64,
};

pub const PMLanguageInfo = extern struct {
    level: objc.Str32,
    version: objc.Str32,
    release: objc.Str32,
};

pub const PMPaperMargins = PMRect;

pub const PMDataFormat = enum(u32) {
    kPMDataFormatXMLDefault = 0,
    kPMDataFormatXMLMinimal = 1,
    kPMDataFormatXMLCompressed = 2,
};

/// https://developer.apple.com/documentation/ApplicationServices/PDEPlugIn?language=objc
pub const PDEPlugIn = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn initWithBundle(_self: *@This(), _theBundle: ?*foundation.Bundle) *@This() {
        return objc.msgSend(_self, "initWithBundle:", *@This(), .{_theBundle});
    }

    pub fn pdePanelsForTypeWithHostInfo(_self: *@This(), _pdeType: ?*foundation.String, _host: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "PDEPanelsForType:withHostInfo:", ?*anyopaque, .{ _pdeType, _host });
    }
};

/// https://developer.apple.com/documentation/ApplicationServices/PDEPanel?language=objc
pub const PDEPanel = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn willShow(_self: *@This()) void {
        return objc.msgSend(_self, "willShow", void, .{});
    }

    pub fn shouldHide(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldHide", objc.BOOL, .{});
    }

    pub fn saveValuesAndReturnError(_self: *@This(), _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "saveValuesAndReturnError:", objc.BOOL, .{_error});
    }

    pub fn restoreValuesAndReturnError(_self: *@This(), _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "restoreValuesAndReturnError:", objc.BOOL, .{_error});
    }

    pub fn supportedPPDOptionKeys(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "supportedPPDOptionKeys", ?*anyopaque, .{});
    }

    pub fn ppdOptionKeyValueDidChangePpdChoice(_self: *@This(), _option: ?*NSString, _choice: ?*NSString) void {
        return objc.msgSend(_self, "PPDOptionKeyValueDidChange:ppdChoice:", void, .{ _option, _choice });
    }

    pub fn panelView(_self: *@This()) ?*NSView {
        return objc.msgSend(_self, "panelView", ?*NSView, .{});
    }

    pub fn panelName(_self: *@This()) ?*NSString {
        return objc.msgSend(_self, "panelName", ?*NSString, .{});
    }

    pub fn panelKind(_self: *@This()) ?*NSString {
        return objc.msgSend(_self, "panelKind", ?*NSString, .{});
    }

    pub fn summaryInfo(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "summaryInfo", ?*anyopaque, .{});
    }

    pub fn shouldShowHelp(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldShowHelp", objc.BOOL, .{});
    }

    pub fn shouldPrint(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldPrint", objc.BOOL, .{});
    }

    pub fn printWindowWillClose(_self: *@This(), _userCanceled: objc.BOOL) void {
        return objc.msgSend(_self, "printWindowWillClose:", void, .{_userCanceled});
    }
};

/// https://developer.apple.com/documentation/ApplicationServices/PDEPlugInCallbackProtocol?language=objc
pub const PDEPlugInCallbackProtocol = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn printSession(_self: *@This()) PMPrintSession {
        return objc.msgSend(_self, "printSession", PMPrintSession, .{});
    }

    pub fn printSettings(_self: *@This()) PMPrintSettings {
        return objc.msgSend(_self, "printSettings", PMPrintSettings, .{});
    }

    pub fn pageFormat(_self: *@This()) PMPageFormat {
        return objc.msgSend(_self, "pageFormat", PMPageFormat, .{});
    }

    pub fn pmPrinter(_self: *@This()) PMPrinter {
        return objc.msgSend(_self, "PMPrinter", PMPrinter, .{});
    }

    pub fn ppdFile(_self: *@This()) ?*objc.ppd_file_s {
        return objc.msgSend(_self, "ppdFile", ?*objc.ppd_file_s, .{});
    }

    pub fn willChangePPDOptionKeyValuePpdChoice(_self: *@This(), _option: ?*NSString, _choice: ?*NSString) objc.BOOL {
        return objc.msgSend(_self, "willChangePPDOptionKeyValue:ppdChoice:", objc.BOOL, .{ _option, _choice });
    }
};

extern "ApplicationServices" fn PMRetain(object: PMObject) callconv(.C) objc.OSStatus;
pub const etain = PMRetain;

extern "ApplicationServices" fn PMRelease(object: PMObject) callconv(.C) objc.OSStatus;
pub const elease = PMRelease;

extern "ApplicationServices" fn PMCreateSession(printSession: ?*PMPrintSession) callconv(.C) objc.OSStatus;
pub const reateSession = PMCreateSession;

extern "ApplicationServices" fn PMSessionError(printSession: PMPrintSession) callconv(.C) objc.OSStatus;
pub const essionError = PMSessionError;

extern "ApplicationServices" fn PMSessionSetError(printSession: PMPrintSession, printError: objc.OSStatus) callconv(.C) objc.OSStatus;
pub const essionSetError = PMSessionSetError;

extern "ApplicationServices" fn PMSessionBeginCGDocumentNoDialog(printSession: PMPrintSession, printSettings: PMPrintSettings, pageFormat: PMPageFormat) callconv(.C) objc.OSStatus;
pub const essionBeginCGDocumentNoDialog = PMSessionBeginCGDocumentNoDialog;

extern "ApplicationServices" fn PMSessionEndDocumentNoDialog(printSession: PMPrintSession) callconv(.C) objc.OSStatus;
pub const essionEndDocumentNoDialog = PMSessionEndDocumentNoDialog;

extern "ApplicationServices" fn PMSessionBeginPageNoDialog(printSession: PMPrintSession, pageFormat: PMPageFormat, pageFrame: ?*PMRect) callconv(.C) objc.OSStatus;
pub const essionBeginPageNoDialog = PMSessionBeginPageNoDialog;

extern "ApplicationServices" fn PMSessionEndPageNoDialog(printSession: PMPrintSession) callconv(.C) objc.OSStatus;
pub const essionEndPageNoDialog = PMSessionEndPageNoDialog;

extern "ApplicationServices" fn PMSessionGetCGGraphicsContext(printSession: PMPrintSession, context: ?*core_graphics.ContextRef) callconv(.C) objc.OSStatus;
pub const essionGetCGGraphicsContext = PMSessionGetCGGraphicsContext;

extern "ApplicationServices" fn PMSessionGetDestinationType(printSession: PMPrintSession, printSettings: PMPrintSettings, destTypeP: ?*PMDestinationType) callconv(.C) objc.OSStatus;
pub const essionGetDestinationType = PMSessionGetDestinationType;

extern "ApplicationServices" fn PMSessionCopyDestinationFormat(printSession: PMPrintSession, printSettings: PMPrintSettings, destFormatP: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const essionCopyDestinationFormat = PMSessionCopyDestinationFormat;

extern "ApplicationServices" fn PMSessionCopyDestinationLocation(printSession: PMPrintSession, printSettings: PMPrintSettings, destLocationP: ?*core_foundation.URLRef) callconv(.C) objc.OSStatus;
pub const essionCopyDestinationLocation = PMSessionCopyDestinationLocation;

extern "ApplicationServices" fn PMSessionSetDestination(
    printSession: PMPrintSession,
    printSettings: PMPrintSettings,
    destType: PMDestinationType,
    destFormat: core_foundation.StringRef,
    destLocation: core_foundation.URLRef,
) callconv(.C) objc.OSStatus;
pub const essionSetDestination = PMSessionSetDestination;

extern "ApplicationServices" fn PMSessionCopyOutputFormatList(printSession: PMPrintSession, destType: PMDestinationType, documentFormatP: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const essionCopyOutputFormatList = PMSessionCopyOutputFormatList;

extern "ApplicationServices" fn PMSessionCreatePageFormatList(printSession: PMPrintSession, printer: PMPrinter, pageFormatList: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const essionCreatePageFormatList = PMSessionCreatePageFormatList;

extern "ApplicationServices" fn PMSessionCreatePrinterList(
    printSession: PMPrintSession,
    printerList: ?*core_foundation.ArrayRef,
    currentIndex: ?*core_foundation.Index,
    currentPrinter: ?*PMPrinter,
) callconv(.C) objc.OSStatus;
pub const essionCreatePrinterList = PMSessionCreatePrinterList;

extern "ApplicationServices" fn PMSessionGetCurrentPrinter(printSession: PMPrintSession, currentPrinter: ?*PMPrinter) callconv(.C) objc.OSStatus;
pub const essionGetCurrentPrinter = PMSessionGetCurrentPrinter;

extern "ApplicationServices" fn PMSessionSetCurrentPMPrinter(session: PMPrintSession, printer: PMPrinter) callconv(.C) objc.OSStatus;
pub const essionSetCurrentPMPrinter = PMSessionSetCurrentPMPrinter;

extern "ApplicationServices" fn PMSessionGetDataFromSession(printSession: PMPrintSession, key: core_foundation.StringRef, data: ?*core_foundation.TypeRef) callconv(.C) objc.OSStatus;
pub const essionGetDataFromSession = PMSessionGetDataFromSession;

extern "ApplicationServices" fn PMSessionSetDataInSession(printSession: PMPrintSession, key: core_foundation.StringRef, data: core_foundation.TypeRef) callconv(.C) objc.OSStatus;
pub const essionSetDataInSession = PMSessionSetDataInSession;

extern "ApplicationServices" fn PMCreatePageFormat(pageFormat: ?*PMPageFormat) callconv(.C) objc.OSStatus;
pub const reatePageFormat = PMCreatePageFormat;

extern "ApplicationServices" fn PMSessionDefaultPageFormat(printSession: PMPrintSession, pageFormat: PMPageFormat) callconv(.C) objc.OSStatus;
pub const essionDefaultPageFormat = PMSessionDefaultPageFormat;

extern "ApplicationServices" fn PMSessionValidatePageFormat(printSession: PMPrintSession, pageFormat: PMPageFormat, changed: ?*objc.Boolean) callconv(.C) objc.OSStatus;
pub const essionValidatePageFormat = PMSessionValidatePageFormat;

extern "ApplicationServices" fn PMCopyPageFormat(formatSrc: PMPageFormat, formatDest: PMPageFormat) callconv(.C) objc.OSStatus;
pub const opyPageFormat = PMCopyPageFormat;

extern "ApplicationServices" fn PMCreatePageFormatWithPMPaper(pageFormat: ?*PMPageFormat, paper: PMPaper) callconv(.C) objc.OSStatus;
pub const reatePageFormatWithPMPaper = PMCreatePageFormatWithPMPaper;

extern "ApplicationServices" fn PMPageFormatCreateDataRepresentation(pageFormat: PMPageFormat, data: ?*core_foundation.DataRef, format: PMDataFormat) callconv(.C) objc.OSStatus;
pub const ageFormatCreateDataRepresentation = PMPageFormatCreateDataRepresentation;

extern "ApplicationServices" fn PMPageFormatCreateWithDataRepresentation(data: core_foundation.DataRef, pageFormat: ?*PMPageFormat) callconv(.C) objc.OSStatus;
pub const ageFormatCreateWithDataRepresentation = PMPageFormatCreateWithDataRepresentation;

extern "ApplicationServices" fn PMGetAdjustedPageRect(pageFormat: PMPageFormat, pageRect: ?*PMRect) callconv(.C) objc.OSStatus;
pub const etAdjustedPageRect = PMGetAdjustedPageRect;

extern "ApplicationServices" fn PMGetAdjustedPaperRect(pageFormat: PMPageFormat, paperRect: ?*PMRect) callconv(.C) objc.OSStatus;
pub const etAdjustedPaperRect = PMGetAdjustedPaperRect;

extern "ApplicationServices" fn PMGetOrientation(pageFormat: PMPageFormat, orientation: ?*PMOrientation) callconv(.C) objc.OSStatus;
pub const etOrientation = PMGetOrientation;

extern "ApplicationServices" fn PMGetPageFormatExtendedData(
    pageFormat: PMPageFormat,
    dataID: objc.OSType,
    size: ?*objc.UInt32,
    extendedData: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const etPageFormatExtendedData = PMGetPageFormatExtendedData;

extern "ApplicationServices" fn PMPageFormatGetPrinterID(pageFormat: PMPageFormat, printerID: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const ageFormatGetPrinterID = PMPageFormatGetPrinterID;

extern "ApplicationServices" fn PMGetScale(pageFormat: PMPageFormat, scale: ?*f64) callconv(.C) objc.OSStatus;
pub const etScale = PMGetScale;

extern "ApplicationServices" fn PMGetUnadjustedPageRect(pageFormat: PMPageFormat, pageRect: ?*PMRect) callconv(.C) objc.OSStatus;
pub const etUnadjustedPageRect = PMGetUnadjustedPageRect;

extern "ApplicationServices" fn PMGetUnadjustedPaperRect(pageFormat: PMPageFormat, paperRect: ?*PMRect) callconv(.C) objc.OSStatus;
pub const etUnadjustedPaperRect = PMGetUnadjustedPaperRect;

extern "ApplicationServices" fn PMSetOrientation(pageFormat: PMPageFormat, orientation: PMOrientation, lock: objc.Boolean) callconv(.C) objc.OSStatus;
pub const etOrientation = PMSetOrientation;

extern "ApplicationServices" fn PMSetPageFormatExtendedData(
    pageFormat: PMPageFormat,
    dataID: objc.OSType,
    size: objc.UInt32,
    extendedData: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const etPageFormatExtendedData = PMSetPageFormatExtendedData;

extern "ApplicationServices" fn PMSetScale(pageFormat: PMPageFormat, scale: f64) callconv(.C) objc.OSStatus;
pub const etScale = PMSetScale;

extern "ApplicationServices" fn PMCreatePrintSettings(printSettings: ?*PMPrintSettings) callconv(.C) objc.OSStatus;
pub const reatePrintSettings = PMCreatePrintSettings;

extern "ApplicationServices" fn PMSessionDefaultPrintSettings(printSession: PMPrintSession, printSettings: PMPrintSettings) callconv(.C) objc.OSStatus;
pub const essionDefaultPrintSettings = PMSessionDefaultPrintSettings;

extern "ApplicationServices" fn PMSessionValidatePrintSettings(printSession: PMPrintSession, printSettings: PMPrintSettings, changed: ?*objc.Boolean) callconv(.C) objc.OSStatus;
pub const essionValidatePrintSettings = PMSessionValidatePrintSettings;

extern "ApplicationServices" fn PMCopyPrintSettings(settingSrc: PMPrintSettings, settingDest: PMPrintSettings) callconv(.C) objc.OSStatus;
pub const opyPrintSettings = PMCopyPrintSettings;

extern "ApplicationServices" fn PMPrintSettingsCreateDataRepresentation(printSettings: PMPrintSettings, data: ?*core_foundation.DataRef, format: PMDataFormat) callconv(.C) objc.OSStatus;
pub const rintSettingsCreateDataRepresentation = PMPrintSettingsCreateDataRepresentation;

extern "ApplicationServices" fn PMPrintSettingsCreateWithDataRepresentation(data: core_foundation.DataRef, printSettings: ?*PMPrintSettings) callconv(.C) objc.OSStatus;
pub const rintSettingsCreateWithDataRepresentation = PMPrintSettingsCreateWithDataRepresentation;

extern "ApplicationServices" fn PMGetCollate(printSettings: PMPrintSettings, collate: ?*objc.Boolean) callconv(.C) objc.OSStatus;
pub const etCollate = PMGetCollate;

extern "ApplicationServices" fn PMGetCopies(printSettings: PMPrintSettings, copies: ?*objc.UInt32) callconv(.C) objc.OSStatus;
pub const etCopies = PMGetCopies;

extern "ApplicationServices" fn PMGetDuplex(printSettings: PMPrintSettings, duplexSetting: ?*PMDuplexMode) callconv(.C) objc.OSStatus;
pub const etDuplex = PMGetDuplex;

extern "ApplicationServices" fn PMGetFirstPage(printSettings: PMPrintSettings, first: ?*objc.UInt32) callconv(.C) objc.OSStatus;
pub const etFirstPage = PMGetFirstPage;

extern "ApplicationServices" fn PMGetLastPage(printSettings: PMPrintSettings, last: ?*objc.UInt32) callconv(.C) objc.OSStatus;
pub const etLastPage = PMGetLastPage;

extern "ApplicationServices" fn PMGetPageRange(printSettings: PMPrintSettings, minPage: ?*objc.UInt32, maxPage: ?*objc.UInt32) callconv(.C) objc.OSStatus;
pub const etPageRange = PMGetPageRange;

extern "ApplicationServices" fn PMPrintSettingsGetJobName(printSettings: PMPrintSettings, name: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const rintSettingsGetJobName = PMPrintSettingsGetJobName;

extern "ApplicationServices" fn PMPrintSettingsGetValue(printSettings: PMPrintSettings, key: core_foundation.StringRef, value: ?*core_foundation.TypeRef) callconv(.C) objc.OSStatus;
pub const rintSettingsGetValue = PMPrintSettingsGetValue;

extern "ApplicationServices" fn PMSetCollate(printSettings: PMPrintSettings, collate: objc.Boolean) callconv(.C) objc.OSStatus;
pub const etCollate = PMSetCollate;

extern "ApplicationServices" fn PMSetCopies(printSettings: PMPrintSettings, copies: objc.UInt32, lock: objc.Boolean) callconv(.C) objc.OSStatus;
pub const etCopies = PMSetCopies;

extern "ApplicationServices" fn PMSetDuplex(printSettings: PMPrintSettings, duplexSetting: PMDuplexMode) callconv(.C) objc.OSStatus;
pub const etDuplex = PMSetDuplex;

extern "ApplicationServices" fn PMSetFirstPage(printSettings: PMPrintSettings, first: objc.UInt32, lock: objc.Boolean) callconv(.C) objc.OSStatus;
pub const etFirstPage = PMSetFirstPage;

extern "ApplicationServices" fn PMSetLastPage(printSettings: PMPrintSettings, last: objc.UInt32, lock: objc.Boolean) callconv(.C) objc.OSStatus;
pub const etLastPage = PMSetLastPage;

extern "ApplicationServices" fn PMSetPageRange(printSettings: PMPrintSettings, minPage: objc.UInt32, maxPage: objc.UInt32) callconv(.C) objc.OSStatus;
pub const etPageRange = PMSetPageRange;

extern "ApplicationServices" fn PMPrintSettingsSetJobName(printSettings: PMPrintSettings, name: core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const rintSettingsSetJobName = PMPrintSettingsSetJobName;

extern "ApplicationServices" fn PMPrintSettingsSetValue(
    printSettings: PMPrintSettings,
    key: core_foundation.StringRef,
    value: core_foundation.TypeRef,
    locked: objc.Boolean,
) callconv(.C) objc.OSStatus;
pub const rintSettingsSetValue = PMPrintSettingsSetValue;

extern "ApplicationServices" fn PMPrintSettingsCopyAsDictionary(printSettings: PMPrintSettings, settingsDictionary: ?*core_foundation.DictionaryRef) callconv(.C) objc.OSStatus;
pub const rintSettingsCopyAsDictionary = PMPrintSettingsCopyAsDictionary;

extern "ApplicationServices" fn PMPrintSettingsCopyKeys(printSettings: PMPrintSettings, settingsKeys: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const rintSettingsCopyKeys = PMPrintSettingsCopyKeys;

extern "ApplicationServices" fn PMCreateGenericPrinter(printer: ?*PMPrinter) callconv(.C) objc.OSStatus;
pub const reateGenericPrinter = PMCreateGenericPrinter;

extern "ApplicationServices" fn PMServerCreatePrinterList(server: PMServer, printerList: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const erverCreatePrinterList = PMServerCreatePrinterList;

extern "ApplicationServices" fn PMServerLaunchPrinterBrowser(server: PMServer, options: core_foundation.DictionaryRef) callconv(.C) objc.OSStatus;
pub const erverLaunchPrinterBrowser = PMServerLaunchPrinterBrowser;

extern "ApplicationServices" fn PMPrinterCreateFromPrinterID(printerID: core_foundation.StringRef) callconv(.C) PMPrinter;
pub const rinterCreateFromPrinterID = PMPrinterCreateFromPrinterID;

extern "ApplicationServices" fn PMPrinterCopyDescriptionURL(printer: PMPrinter, descriptionType: core_foundation.StringRef, fileURL: ?*core_foundation.URLRef) callconv(.C) objc.OSStatus;
pub const rinterCopyDescriptionURL = PMPrinterCopyDescriptionURL;

extern "ApplicationServices" fn PMPrinterCopyDeviceURI(printer: PMPrinter, deviceURI: ?*core_foundation.URLRef) callconv(.C) objc.OSStatus;
pub const rinterCopyDeviceURI = PMPrinterCopyDeviceURI;

extern "ApplicationServices" fn PMPrinterCopyHostName(printer: PMPrinter, hostNameP: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const rinterCopyHostName = PMPrinterCopyHostName;

extern "ApplicationServices" fn PMPrinterCopyPresets(printer: PMPrinter, presetList: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const rinterCopyPresets = PMPrinterCopyPresets;

extern "ApplicationServices" fn PMPrinterGetCommInfo(printer: PMPrinter, supportsControlCharRangeP: ?*objc.Boolean, supportsEightBitP: ?*objc.Boolean) callconv(.C) objc.OSStatus;
pub const rinterGetCommInfo = PMPrinterGetCommInfo;

extern "ApplicationServices" fn PMPrinterGetID(printer: PMPrinter) callconv(.C) core_foundation.StringRef;
pub const rinterGetID = PMPrinterGetID;

extern "ApplicationServices" fn PMPrinterGetLocation(printer: PMPrinter) callconv(.C) core_foundation.StringRef;
pub const rinterGetLocation = PMPrinterGetLocation;

extern "ApplicationServices" fn PMPrinterGetDriverCreator(printer: PMPrinter, creator: ?*objc.OSType) callconv(.C) objc.OSStatus;
pub const rinterGetDriverCreator = PMPrinterGetDriverCreator;

extern "ApplicationServices" fn PMPrinterGetDriverReleaseInfo(printer: PMPrinter, release: ?*objc.VersRec) callconv(.C) objc.OSStatus;
pub const rinterGetDriverReleaseInfo = PMPrinterGetDriverReleaseInfo;

extern "ApplicationServices" fn PMPrinterGetPrinterResolutionCount(printer: PMPrinter, countP: ?*objc.UInt32) callconv(.C) objc.OSStatus;
pub const rinterGetPrinterResolutionCount = PMPrinterGetPrinterResolutionCount;

extern "ApplicationServices" fn PMPrinterGetIndexedPrinterResolution(printer: PMPrinter, index: objc.UInt32, resolutionP: ?*PMResolution) callconv(.C) objc.OSStatus;
pub const rinterGetIndexedPrinterResolution = PMPrinterGetIndexedPrinterResolution;

extern "ApplicationServices" fn PMPrinterGetOutputResolution(printer: PMPrinter, printSettings: PMPrintSettings, resolutionP: ?*PMResolution) callconv(.C) objc.OSStatus;
pub const rinterGetOutputResolution = PMPrinterGetOutputResolution;

extern "ApplicationServices" fn PMPrinterSetOutputResolution(printer: PMPrinter, printSettings: PMPrintSettings, resolutionP: ?*PMResolution) callconv(.C) objc.OSStatus;
pub const rinterSetOutputResolution = PMPrinterSetOutputResolution;

extern "ApplicationServices" fn PMPrinterGetLanguageInfo(printer: PMPrinter, info: ?*PMLanguageInfo) callconv(.C) objc.OSStatus;
pub const rinterGetLanguageInfo = PMPrinterGetLanguageInfo;

extern "ApplicationServices" fn PMPrinterGetMakeAndModelName(printer: PMPrinter, makeAndModel: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const rinterGetMakeAndModelName = PMPrinterGetMakeAndModelName;

extern "ApplicationServices" fn PMPrinterGetMimeTypes(printer: PMPrinter, settings: PMPrintSettings, mimeTypes: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const rinterGetMimeTypes = PMPrinterGetMimeTypes;

extern "ApplicationServices" fn PMPrinterGetName(printer: PMPrinter) callconv(.C) core_foundation.StringRef;
pub const rinterGetName = PMPrinterGetName;

extern "ApplicationServices" fn PMPrinterGetPaperList(printer: PMPrinter, paperList: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const rinterGetPaperList = PMPrinterGetPaperList;

extern "ApplicationServices" fn PMPrinterGetState(printer: PMPrinter, state: ?*PMPrinterState) callconv(.C) objc.OSStatus;
pub const rinterGetState = PMPrinterGetState;

extern "ApplicationServices" fn PMPrinterIsDefault(printer: PMPrinter) callconv(.C) objc.Boolean;
pub const rinterIsDefault = PMPrinterIsDefault;

extern "ApplicationServices" fn PMPrinterIsFavorite(printer: PMPrinter) callconv(.C) objc.Boolean;
pub const rinterIsFavorite = PMPrinterIsFavorite;

extern "ApplicationServices" fn PMPrinterIsPostScriptCapable(printer: PMPrinter) callconv(.C) objc.Boolean;
pub const rinterIsPostScriptCapable = PMPrinterIsPostScriptCapable;

extern "ApplicationServices" fn PMPrinterIsPostScriptPrinter(printer: PMPrinter, isPSPrinter: ?*objc.Boolean) callconv(.C) objc.OSStatus;
pub const rinterIsPostScriptPrinter = PMPrinterIsPostScriptPrinter;

extern "ApplicationServices" fn PMPrinterIsRemote(printer: PMPrinter, isRemoteP: ?*objc.Boolean) callconv(.C) objc.OSStatus;
pub const rinterIsRemote = PMPrinterIsRemote;

extern "ApplicationServices" fn PMPrinterSetDefault(printer: PMPrinter) callconv(.C) objc.OSStatus;
pub const rinterSetDefault = PMPrinterSetDefault;

extern "ApplicationServices" fn PMPresetCopyName(preset: PMPreset, name: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const resetCopyName = PMPresetCopyName;

extern "ApplicationServices" fn PMPresetCreatePrintSettings(preset: PMPreset, session: PMPrintSession, printSettings: ?*PMPrintSettings) callconv(.C) objc.OSStatus;
pub const resetCreatePrintSettings = PMPresetCreatePrintSettings;

extern "ApplicationServices" fn PMPresetGetAttributes(preset: PMPreset, attributes: ?*core_foundation.DictionaryRef) callconv(.C) objc.OSStatus;
pub const resetGetAttributes = PMPresetGetAttributes;

extern "ApplicationServices" fn PMGetPageFormatPaper(format: PMPageFormat, paper: ?*PMPaper) callconv(.C) objc.OSStatus;
pub const etPageFormatPaper = PMGetPageFormatPaper;

extern "ApplicationServices" fn PMPaperCreateCustom(
    printer: PMPrinter,
    id: core_foundation.StringRef,
    name: core_foundation.StringRef,
    width: f64,
    height: f64,
    margins: ?*PMPaperMargins,
    paperP: ?*PMPaper,
) callconv(.C) objc.OSStatus;
pub const aperCreateCustom = PMPaperCreateCustom;

extern "ApplicationServices" fn PMPaperGetWidth(paper: PMPaper, paperWidth: ?*f64) callconv(.C) objc.OSStatus;
pub const aperGetWidth = PMPaperGetWidth;

extern "ApplicationServices" fn PMPaperGetHeight(paper: PMPaper, paperHeight: ?*f64) callconv(.C) objc.OSStatus;
pub const aperGetHeight = PMPaperGetHeight;

extern "ApplicationServices" fn PMPaperGetMargins(paper: PMPaper, paperMargins: ?*PMPaperMargins) callconv(.C) objc.OSStatus;
pub const aperGetMargins = PMPaperGetMargins;

extern "ApplicationServices" fn PMPaperGetID(paper: PMPaper, paperID: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const aperGetID = PMPaperGetID;

extern "ApplicationServices" fn PMPaperGetPPDPaperName(paper: PMPaper, paperName: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const aperGetPPDPaperName = PMPaperGetPPDPaperName;

extern "ApplicationServices" fn PMPaperCreateLocalizedName(paper: PMPaper, printer: PMPrinter, paperName: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const aperCreateLocalizedName = PMPaperCreateLocalizedName;

extern "ApplicationServices" fn PMPaperGetPrinterID(paper: PMPaper, printerID: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const aperGetPrinterID = PMPaperGetPrinterID;

extern "ApplicationServices" fn PMPaperIsCustom(paper: PMPaper) callconv(.C) objc.Boolean;
pub const aperIsCustom = PMPaperIsCustom;

extern "ApplicationServices" fn PMWorkflowCopyItems(workflowItems: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const orkflowCopyItems = PMWorkflowCopyItems;

extern "ApplicationServices" fn PMWorkflowSubmitPDFWithOptions(
    workflowItem: core_foundation.URLRef,
    title: core_foundation.StringRef,
    options: ?*i8,
    pdfFile: core_foundation.URLRef,
) callconv(.C) objc.OSStatus;
pub const orkflowSubmitPDFWithOptions = PMWorkflowSubmitPDFWithOptions;

extern "ApplicationServices" fn PMWorkflowSubmitPDFWithSettings(workflowItem: core_foundation.URLRef, settings: PMPrintSettings, pdfFile: core_foundation.URLRef) callconv(.C) objc.OSStatus;
pub const orkflowSubmitPDFWithSettings = PMWorkflowSubmitPDFWithSettings;

extern "ApplicationServices" fn PMPrinterPrintWithProvider(
    printer: PMPrinter,
    settings: PMPrintSettings,
    format: PMPageFormat,
    mimeType: core_foundation.StringRef,
    provider: core_graphics.DataProviderRef,
) callconv(.C) objc.OSStatus;
pub const rinterPrintWithProvider = PMPrinterPrintWithProvider;

extern "ApplicationServices" fn PMPrinterPrintWithFile(
    printer: PMPrinter,
    settings: PMPrintSettings,
    format: PMPageFormat,
    mimeType: core_foundation.StringRef,
    fileURL: core_foundation.URLRef,
) callconv(.C) objc.OSStatus;
pub const rinterPrintWithFile = PMPrinterPrintWithFile;

extern "ApplicationServices" fn PMPrinterWritePostScriptToURL(
    printer: PMPrinter,
    settings: PMPrintSettings,
    format: PMPageFormat,
    mimeType: core_foundation.StringRef,
    sourceFileURL: core_foundation.URLRef,
    destinationFileURL: core_foundation.URLRef,
) callconv(.C) objc.OSStatus;
pub const rinterWritePostScriptToURL = PMPrinterWritePostScriptToURL;

extern "ApplicationServices" fn PMPrintSettingsToOptions(settings: PMPrintSettings, options: ?*?*i8) callconv(.C) objc.OSStatus;
pub const rintSettingsToOptions = PMPrintSettingsToOptions;

extern "ApplicationServices" fn PMPrintSettingsToOptionsWithPrinterAndPageFormat(
    settings: PMPrintSettings,
    printer: PMPrinter,
    pageFormat: PMPageFormat,
    options: ?*?*i8,
) callconv(.C) objc.OSStatus;
pub const rintSettingsToOptionsWithPrinterAndPageFormat = PMPrintSettingsToOptionsWithPrinterAndPageFormat;

extern "ApplicationServices" fn PMPrinterSendCommand(
    printer: PMPrinter,
    commandString: core_foundation.StringRef,
    jobTitle: core_foundation.StringRef,
    options: core_foundation.DictionaryRef,
) callconv(.C) objc.OSStatus;
pub const rinterSendCommand = PMPrinterSendCommand;

extern "ApplicationServices" fn PMPrinterCopyState(printer: PMPrinter, stateDict: ?*core_foundation.DictionaryRef) callconv(.C) objc.OSStatus;
pub const rinterCopyState = PMPrinterCopyState;

extern "ApplicationServices" fn PMCopyAvailablePPDs(domain: PMPPDDomain, ppds: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const opyAvailablePPDs = PMCopyAvailablePPDs;

extern "ApplicationServices" fn PMCopyLocalizedPPD(ppd: core_foundation.URLRef, localizedPPD: ?*core_foundation.URLRef) callconv(.C) objc.OSStatus;
pub const opyLocalizedPPD = PMCopyLocalizedPPD;

extern "ApplicationServices" fn PMCopyPPDData(ppd: core_foundation.URLRef, data: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;
pub const opyPPDData = PMCopyPPDData;

extern "ApplicationServices" fn PMCGImageCreateWithEPSDataProvider(epsDataProvider: core_graphics.DataProviderRef, epsPreview: core_graphics.ImageRef) callconv(.C) core_graphics.ImageRef;
pub const gImageCreateWithEPSDataProvider = PMCGImageCreateWithEPSDataProvider;

pub const PMPageToPaperMappingType = enum(u32) {
    kPMPageToPaperMappingNone = 1,
    kPMPageToPaperMappingScaleToFit = 2,
};

pub const FontRec = extern struct {
    fontType: objc.SInt16,
    firstChar: objc.SInt16,
    lastChar: objc.SInt16,
    widMax: objc.SInt16,
    kernMax: objc.SInt16,
    nDescent: objc.SInt16,
    fRectWidth: objc.SInt16,
    fRectHeight: objc.SInt16,
    owTLoc: objc.UInt16,
    ascent: objc.SInt16,
    descent: objc.SInt16,
    leading: objc.SInt16,
    rowWords: objc.SInt16,
};

pub const FontRecPtr = ?*FontRec;

pub const FontRecHdl = ?*FontRecPtr;

pub const FMInput = extern struct {
    family: i16,
    size: i16,
    face: objc.Style,
    needBits: objc.Boolean,
    device: i16,
    numer: objc.Point,
    denom: objc.Point,
};

pub const FamRec = extern struct {
    ffFlags: objc.SInt16,
    ffFamID: objc.SInt16,
    ffFirstChar: objc.SInt16,
    ffLastChar: objc.SInt16,
    ffAscent: objc.SInt16,
    ffDescent: objc.SInt16,
    ffLeading: objc.SInt16,
    ffWidMax: objc.SInt16,
    ffWTabOff: objc.SInt32,
    ffKernOff: objc.SInt32,
    ffStylOff: objc.SInt32,
    ffProperty: [9]objc.SInt16,
    ffIntl: [2]objc.SInt16,
    ffVersion: objc.SInt16,
};

pub const AsscEntry = extern struct {
    fontSize: objc.SInt16,
    fontStyle: objc.SInt16,
    fontID: objc.SInt16,
};

pub const FontAssoc = extern struct {
    numAssoc: objc.SInt16,
};

pub const StyleTable = extern struct {
    fontClass: objc.SInt16,
    offset: objc.SInt32,
    reserved: objc.SInt32,
    indexes: [48]i8,
};

pub const NameTable = extern struct {
    stringCount: objc.SInt16,
    baseFontName: objc.Str255,
};

pub const KernPair = extern struct {
    kernFirst: i8,
    kernSecond: i8,
    kernWidth: objc.SInt16,
};

pub const KernEntry = extern struct {
    kernStyle: objc.SInt16,
    kernLength: objc.SInt16,
};

pub const KernTable = extern struct {
    numKerns: objc.SInt16,
};

pub const OpaqueATSUTextLayout = extern struct {};

pub const UTextLayout = ?*OpaqueATSUTextLayout;

pub const OpaqueATSUStyle = extern struct {};

pub const UStyle = ?*OpaqueATSUStyle;

pub const OpaqueATSUFontFallbacks = extern struct {};

pub const UFontFallbacks = ?*OpaqueATSUFontFallbacks;

pub const UTextMeasurement = objc.Fixed;

pub const UFontID = FMFont;

pub const UFontFeatureType = objc.UInt16;

pub const UFontFeatureSelector = objc.UInt16;

pub const UFontVariationAxis = objc.FourCharCode;

pub const UFontVariationValue = objc.Fixed;

pub const UAttributeTag = objc.UInt32;

pub const UAttributeValuePtr = ?*anyopaque;

pub const ConstATSUAttributeValuePtr = ?*anyopaque;

pub const UAttributeInfo = extern struct {
    fTag: UAttributeTag,
    fValueSize: objc.ByteCount,
};

pub const UCaret = extern struct {
    fX: objc.Fixed,
    fY: objc.Fixed,
    fDeltaX: objc.Fixed,
    fDeltaY: objc.Fixed,
};

pub const UCursorMovementType = objc.UInt16;

pub const anon6931 = enum(u32) {
    kATSUByCharacter = 0,
    kATSUByTypographicCluster = 1,
    kATSUByWord = 2,
    kATSUByCharacterCluster = 3,
    kATSUByCluster = 1,
};

pub const ULineTruncation = objc.UInt32;

pub const anon7441 = enum(u32) {
    kATSUTruncateNone = 0,
    kATSUTruncateStart = 1,
    kATSUTruncateEnd = 2,
    kATSUTruncateMiddle = 3,
    kATSUTruncateSpecificationMask = 7,
    kATSUTruncFeatNoSquishing = 8,
};

pub const UStyleLineCountType = objc.UInt16;

pub const anon7631 = enum(u32) {
    kATSUStyleSingleLineCount = 1,
    kATSUStyleDoubleLineCount = 2,
};

pub const UVerticalCharacterType = objc.UInt16;

pub const UStyleComparison = objc.UInt16;

pub const anon7961 = enum(u32) {
    kATSUStyleUnequal = 0,
    kATSUStyleContains = 1,
    kATSUStyleEquals = 2,
    kATSUStyleContainedBy = 3,
};

pub const UFontFallbackMethod = objc.UInt16;

pub const UTabType = objc.UInt16;

pub const UTab = extern struct {
    tabPosition: UTextMeasurement,
    tabType: UTabType,
};

pub const URGBAlphaColor = extern struct {
    red: f32,
    green: f32,
    blue: f32,
    alpha: f32,
};

pub const GlyphCollection = objc.UInt16;

pub const UGlyphSelector = extern struct {
    collection: GlyphCollection,
    glyphID: GlyphID,
};

pub const UGlyphInfo = extern struct {
    glyphID: GlyphID,
    reserved: objc.UInt16,
    layoutFlags: objc.UInt32,
    charIndex: core_services.UniCharArrayOffset,
    style: UStyle,
    deltaY: objc.Float32,
    idealX: objc.Float32,
    screenX: objc.SInt16,
    caretX: objc.SInt16,
};

pub const UGlyphInfoArray = extern struct {
    layout: UTextLayout,
    numGlyphs: objc.ItemCount,
    glyphs: [1]UGlyphInfo,
};

pub const UHighlightMethod = objc.UInt32;

pub const anon10261 = enum(u32) {
    kInvertHighlighting = 0,
    kRedrawHighlighting = 1,
};

pub const UBackgroundDataType = objc.UInt32;

pub const UBackgroundColor = URGBAlphaColor;

pub const RedrawBackgroundProcPtr = ?*const fn (
    UTextLayout,
    core_services.UniCharArrayOffset,
    objc.UniCharCount,
    *Trapezoid,
    objc.ItemCount,
) callconv(.C) objc.Boolean;

pub const RedrawBackgroundUPP = RedrawBackgroundProcPtr;

pub const UBackgroundData = extern union {
    backgroundColor: UBackgroundColor,
    backgroundUPP: RedrawBackgroundUPP,
};

pub const UUnhighlightData = extern struct {
    dataType: UBackgroundDataType,
    unhighlightData: UBackgroundData,
};

pub const anon11921 = enum(u32) {
    kATSULeftToRightBaseDirection = 0,
    kATSURightToLeftBaseDirection = 1,
};

pub const anon12171 = enum(u32) {
    kATSUInvalidFontID = 0,
};

pub const anon12401 = enum(u32) {
    kATSUNoSelector = 65535,
};

pub const anon12551 = enum(u32) {
    kATSUFromTextBeginning = -1,
    kATSUToTextEnd = -1,
    kATSUFromPreviousLayout = -2,
    kATSUFromFollowingLayout = -3,
};

pub const anon12831 = enum(u32) {
    kATSUUseGrafPortPenLoc = -1,
    kATSUClearAll = -1,
};

pub const QuadraticNewPathProcPtr = ?*const fn (?*anyopaque) callconv(.C) objc.OSStatus;

pub const QuadraticNewPathUPP = QuadraticNewPathProcPtr;

pub const QuadraticLineProcPtr = ?*const fn (?*objc.Float32Point, ?*objc.Float32Point, ?*anyopaque) callconv(.C) objc.OSStatus;

pub const QuadraticLineUPP = QuadraticLineProcPtr;

pub const QuadraticCurveProcPtr = ?*const fn (
    ?*objc.Float32Point,
    ?*objc.Float32Point,
    ?*objc.Float32Point,
    ?*anyopaque,
) callconv(.C) objc.OSStatus;

pub const QuadraticCurveUPP = QuadraticCurveProcPtr;

pub const QuadraticClosePathProcPtr = ?*const fn (?*anyopaque) callconv(.C) objc.OSStatus;

pub const QuadraticClosePathUPP = QuadraticClosePathProcPtr;

pub const CubicMoveToProcPtr = ?*const fn (?*objc.Float32Point, ?*anyopaque) callconv(.C) objc.OSStatus;

pub const CubicMoveToUPP = CubicMoveToProcPtr;

pub const CubicLineToProcPtr = ?*const fn (?*objc.Float32Point, ?*anyopaque) callconv(.C) objc.OSStatus;

pub const CubicLineToUPP = CubicLineToProcPtr;

pub const CubicCurveToProcPtr = ?*const fn (
    ?*objc.Float32Point,
    ?*objc.Float32Point,
    ?*objc.Float32Point,
    ?*anyopaque,
) callconv(.C) objc.OSStatus;

pub const CubicCurveToUPP = CubicCurveToProcPtr;

pub const CubicClosePathProcPtr = ?*const fn (?*anyopaque) callconv(.C) objc.OSStatus;

pub const CubicClosePathUPP = CubicClosePathProcPtr;

pub const UFlattenedDataStreamFormat = objc.UInt32;

pub const UFlattenStyleRunOptions = objc.UInt32;

pub const UUnFlattenStyleRunOptions = objc.UInt32;

pub const UStyleRunInfo = extern struct {
    runLength: objc.UInt32,
    styleObjectIndex: objc.UInt32,
};

pub const FlatDataMainHeaderBlock = extern struct {
    version: objc.UInt32,
    sizeOfDataBlock: objc.UInt32,
    offsetToTextLayouts: objc.UInt32,
    offsetToStyleRuns: objc.UInt32,
    offsetToStyleList: objc.UInt32,
};

pub const FlatDataTextLayoutDataHeader = extern struct {
    sizeOfLayoutData: objc.UInt32,
    textLayoutLength: objc.UInt32,
    offsetToLayoutControls: objc.UInt32,
    offsetToLineInfo: objc.UInt32,
};

pub const FlatDataTextLayoutHeader = extern struct {
    numFlattenedTextLayouts: objc.UInt32,
    flattenedTextLayouts: [1]FlatDataTextLayoutDataHeader,
};

pub const FlatDataLayoutControlsDataHeader = extern struct {
    numberOfLayoutControls: objc.UInt32,
    controlArray: [1]UAttributeInfo,
};

pub const FlatDataLineInfoData = extern struct {
    lineLength: objc.UInt32,
    numberOfLineControls: objc.UInt32,
};

pub const FlatDataLineInfoHeader = extern struct {
    numberOfLines: objc.UInt32,
    lineInfoArray: [1]FlatDataLineInfoData,
};

pub const FlatDataStyleRunDataHeader = extern struct {
    numberOfStyleRuns: objc.UInt32,
    styleRunArray: [1]UStyleRunInfo,
};

pub const FlatDataStyleListStyleDataHeader = extern struct {
    sizeOfStyleInfo: objc.UInt32,
    numberOfSetAttributes: objc.UInt32,
    numberOfSetFeatures: objc.UInt32,
    numberOfSetVariations: objc.UInt32,
};

pub const FlatDataStyleListHeader = extern struct {
    numberOfStyles: objc.UInt32,
    styleDataArray: [1]FlatDataStyleListStyleDataHeader,
};

pub const FlatDataStyleListFeatureData = extern struct {
    theFeatureType: UFontFeatureType,
    theFeatureSelector: UFontFeatureSelector,
};

pub const FlatDataStyleListVariationData = extern struct {
    theVariationAxis: UFontVariationAxis,
    theVariationValue: UFontVariationValue,
};

pub const FlatDataFontSpeciferType = objc.UInt32;

pub const FlatDataFontNameDataHeader = extern struct {
    nameSpecifierType: FlatDataFontSpeciferType,
    nameSpecifierSize: objc.UInt32,
};

pub const FlatDataFontSpecRawNameData = extern struct {
    fontNameType: core_text.FontNameCode,
    fontNamePlatform: core_text.FontPlatformCode,
    fontNameScript: core_text.FontScriptCode,
    fontNameLanguage: core_text.FontLanguageCode,
    fontNameLength: objc.UInt32,
};

pub const FlatDataFontSpecRawNameDataHeader = extern struct {
    numberOfFlattenedNames: objc.UInt32,
    nameDataArray: [1]FlatDataFontSpecRawNameData,
};

pub const UDirectDataSelector = objc.UInt32;

pub const LLCStyleInfo = extern struct {};

pub const UStyleSettingRef = ?*LLCStyleInfo;

pub const SpeechChannelRecord = extern struct {
    data: [1]i64,
};

pub const SpeechChannel = ?*SpeechChannelRecord;

pub const VoiceSpec = extern struct {
    creator: objc.OSType,
    id: objc.OSType,
};

pub const VoiceSpecPtr = ?*VoiceSpec;

pub const anon1481 = enum(objc.SInt16) {
    kNeuter = 0,
    kMale = 1,
    kFemale = 2,
};

pub const VoiceDescription = extern struct {
    length: objc.SInt32,
    voice: VoiceSpec,
    version: objc.SInt32,
    name: objc.Str63,
    comment: objc.Str255,
    gender: objc.SInt16,
    age: objc.SInt16,
    script: objc.SInt16,
    language: objc.SInt16,
    region: objc.SInt16,
    reserved: [4]objc.SInt32,
};

pub const VoiceFileInfo = extern struct {
    fileSpec: core_services.FSSpec,
    resID: objc.SInt16,
};

pub const SpeechStatusInfo = extern struct {
    outputBusy: objc.Boolean,
    outputPaused: objc.Boolean,
    inputBytesLeft: i64,
    phonemeCode: objc.SInt16,
};

pub const SpeechErrorInfo = extern struct {
    count: objc.SInt16,
    oldest: objc.OSErr,
    oldPos: i64,
    newest: objc.OSErr,
    newPos: i64,
};

pub const SpeechVersionInfo = extern struct {
    synthType: objc.OSType,
    synthSubType: objc.OSType,
    synthManufacturer: objc.OSType,
    synthFlags: objc.SInt32,
    synthVersion: objc.NumVersion,
};

pub const PhonemeInfo = extern struct {
    opcode: objc.SInt16,
    phStr: objc.Str15,
    exampleStr: objc.Str31,
    hiliteStart: objc.SInt16,
    hiliteEnd: objc.SInt16,
};

pub const PhonemeDescriptor = extern struct {
    phonemeCount: objc.SInt16,
    thePhonemes: [1]PhonemeInfo,
};

pub const SpeechXtndData = extern struct {
    synthCreator: objc.OSType,
    synthData: [2]objc.Byte,
};

pub const DelimiterInfo = extern struct {
    startDelimiter: [2]objc.Byte,
    endDelimiter: [2]objc.Byte,
};

pub const SpeechTextDoneProcPtr = ?*const fn (
    SpeechChannel,
    objc.SRefCon,
    ?*?*anyopaque,
    ?*u64,
    ?*objc.SInt32,
) callconv(.C) void;

pub const SpeechDoneProcPtr = ?*const fn (SpeechChannel, objc.SRefCon) callconv(.C) void;

pub const SpeechSyncProcPtr = ?*const fn (SpeechChannel, objc.SRefCon, objc.OSType) callconv(.C) void;

pub const SpeechErrorProcPtr = ?*const fn (
    SpeechChannel,
    objc.SRefCon,
    objc.OSErr,
    i64,
) callconv(.C) void;

pub const SpeechPhonemeProcPtr = ?*const fn (SpeechChannel, objc.SRefCon, objc.SInt16) callconv(.C) void;

pub const SpeechWordProcPtr = ?*const fn (
    SpeechChannel,
    objc.SRefCon,
    u64,
    objc.UInt16,
) callconv(.C) void;

pub const SpeechTextDoneUPP = SpeechTextDoneProcPtr;

pub const SpeechDoneUPP = SpeechDoneProcPtr;

pub const SpeechSyncUPP = SpeechSyncProcPtr;

pub const SpeechErrorUPP = SpeechErrorProcPtr;

pub const SpeechPhonemeUPP = SpeechPhonemeProcPtr;

pub const SpeechWordUPP = SpeechWordProcPtr;

extern "ApplicationServices" fn NewSpeechTextDoneUPP(userRoutine: SpeechTextDoneProcPtr) callconv(.C) SpeechTextDoneUPP;
pub const speechTextDoneUPP = NewSpeechTextDoneUPP;

extern "ApplicationServices" fn NewSpeechDoneUPP(userRoutine: SpeechDoneProcPtr) callconv(.C) SpeechDoneUPP;
pub const speechDoneUPP = NewSpeechDoneUPP;

extern "ApplicationServices" fn NewSpeechSyncUPP(userRoutine: SpeechSyncProcPtr) callconv(.C) SpeechSyncUPP;
pub const speechSyncUPP = NewSpeechSyncUPP;

extern "ApplicationServices" fn NewSpeechErrorUPP(userRoutine: SpeechErrorProcPtr) callconv(.C) SpeechErrorUPP;
pub const speechErrorUPP = NewSpeechErrorUPP;

extern "ApplicationServices" fn NewSpeechPhonemeUPP(userRoutine: SpeechPhonemeProcPtr) callconv(.C) SpeechPhonemeUPP;
pub const speechPhonemeUPP = NewSpeechPhonemeUPP;

extern "ApplicationServices" fn NewSpeechWordUPP(userRoutine: SpeechWordProcPtr) callconv(.C) SpeechWordUPP;
pub const speechWordUPP = NewSpeechWordUPP;

extern "ApplicationServices" fn DisposeSpeechTextDoneUPP(userUPP: SpeechTextDoneUPP) callconv(.C) void;
pub const poseSpeechTextDoneUPP = DisposeSpeechTextDoneUPP;

extern "ApplicationServices" fn DisposeSpeechDoneUPP(userUPP: SpeechDoneUPP) callconv(.C) void;
pub const poseSpeechDoneUPP = DisposeSpeechDoneUPP;

extern "ApplicationServices" fn DisposeSpeechSyncUPP(userUPP: SpeechSyncUPP) callconv(.C) void;
pub const poseSpeechSyncUPP = DisposeSpeechSyncUPP;

extern "ApplicationServices" fn DisposeSpeechErrorUPP(userUPP: SpeechErrorUPP) callconv(.C) void;
pub const poseSpeechErrorUPP = DisposeSpeechErrorUPP;

extern "ApplicationServices" fn DisposeSpeechPhonemeUPP(userUPP: SpeechPhonemeUPP) callconv(.C) void;
pub const poseSpeechPhonemeUPP = DisposeSpeechPhonemeUPP;

extern "ApplicationServices" fn DisposeSpeechWordUPP(userUPP: SpeechWordUPP) callconv(.C) void;
pub const poseSpeechWordUPP = DisposeSpeechWordUPP;

extern "ApplicationServices" fn InvokeSpeechTextDoneUPP(
    chan: SpeechChannel,
    refCon: objc.SRefCon,
    nextBuf: ?*?*anyopaque,
    byteLen: ?*u64,
    controlFlags: ?*objc.SInt32,
    userUPP: SpeechTextDoneUPP,
) callconv(.C) void;
pub const okeSpeechTextDoneUPP = InvokeSpeechTextDoneUPP;

extern "ApplicationServices" fn InvokeSpeechDoneUPP(chan: SpeechChannel, refCon: objc.SRefCon, userUPP: SpeechDoneUPP) callconv(.C) void;
pub const okeSpeechDoneUPP = InvokeSpeechDoneUPP;

extern "ApplicationServices" fn InvokeSpeechSyncUPP(
    chan: SpeechChannel,
    refCon: objc.SRefCon,
    syncMessage: objc.OSType,
    userUPP: SpeechSyncUPP,
) callconv(.C) void;
pub const okeSpeechSyncUPP = InvokeSpeechSyncUPP;

extern "ApplicationServices" fn InvokeSpeechErrorUPP(
    chan: SpeechChannel,
    refCon: objc.SRefCon,
    theError: objc.OSErr,
    bytePos: i64,
    userUPP: SpeechErrorUPP,
) callconv(.C) void;
pub const okeSpeechErrorUPP = InvokeSpeechErrorUPP;

extern "ApplicationServices" fn InvokeSpeechPhonemeUPP(
    chan: SpeechChannel,
    refCon: objc.SRefCon,
    phonemeOpcode: objc.SInt16,
    userUPP: SpeechPhonemeUPP,
) callconv(.C) void;
pub const okeSpeechPhonemeUPP = InvokeSpeechPhonemeUPP;

extern "ApplicationServices" fn InvokeSpeechWordUPP(
    chan: SpeechChannel,
    refCon: objc.SRefCon,
    wordPos: u64,
    wordLen: objc.UInt16,
    userUPP: SpeechWordUPP,
) callconv(.C) void;
pub const okeSpeechWordUPP = InvokeSpeechWordUPP;

pub const SpeechErrorCFProcPtr = ?*const fn (SpeechChannel, objc.SRefCon, core_foundation.ErrorRef) callconv(.C) void;

pub const SpeechWordCFProcPtr = ?*const fn (
    SpeechChannel,
    objc.SRefCon,
    core_foundation.StringRef,
    core_foundation.Range,
) callconv(.C) void;

extern "ApplicationServices" fn SpeechManagerVersion() callconv(.C) objc.NumVersion;
pub const echManagerVersion = SpeechManagerVersion;

extern "ApplicationServices" fn MakeVoiceSpec(creator: objc.OSType, id: objc.OSType, voice: ?*VoiceSpec) callconv(.C) objc.OSErr;
pub const eVoiceSpec = MakeVoiceSpec;

extern "ApplicationServices" fn CountVoices(numVoices: ?*objc.SInt16) callconv(.C) objc.OSErr;
pub const ntVoices = CountVoices;

extern "ApplicationServices" fn GetIndVoice(index: objc.SInt16, voice: ?*VoiceSpec) callconv(.C) objc.OSErr;
pub const indVoice = GetIndVoice;

extern "ApplicationServices" fn GetVoiceDescription(voice: ?*VoiceSpec, info: ?*VoiceDescription, infoLength: i64) callconv(.C) objc.OSErr;
pub const voiceDescription = GetVoiceDescription;

extern "ApplicationServices" fn GetVoiceInfo(voice: ?*VoiceSpec, selector: objc.OSType, voiceInfo: ?*anyopaque) callconv(.C) objc.OSErr;
pub const voiceInfo = GetVoiceInfo;

extern "ApplicationServices" fn NewSpeechChannel(voice: ?*VoiceSpec, chan: ?*SpeechChannel) callconv(.C) objc.OSErr;
pub const speechChannel = NewSpeechChannel;

extern "ApplicationServices" fn DisposeSpeechChannel(chan: SpeechChannel) callconv(.C) objc.OSErr;
pub const poseSpeechChannel = DisposeSpeechChannel;

extern "ApplicationServices" fn SpeakString(textToBeSpoken: objc.ConstStr255Param) callconv(.C) objc.OSErr;
pub const akString = SpeakString;

extern "ApplicationServices" fn SpeakText(chan: SpeechChannel, textBuf: ?*anyopaque, textBytes: u64) callconv(.C) objc.OSErr;
pub const akText = SpeakText;

extern "ApplicationServices" fn SpeakBuffer(
    chan: SpeechChannel,
    textBuf: ?*anyopaque,
    textBytes: u64,
    controlFlags: objc.SInt32,
) callconv(.C) objc.OSErr;
pub const akBuffer = SpeakBuffer;

extern "ApplicationServices" fn StopSpeech(chan: SpeechChannel) callconv(.C) objc.OSErr;
pub const pSpeech = StopSpeech;

extern "ApplicationServices" fn StopSpeechAt(chan: SpeechChannel, whereToStop: objc.SInt32) callconv(.C) objc.OSErr;
pub const pSpeechAt = StopSpeechAt;

extern "ApplicationServices" fn PauseSpeechAt(chan: SpeechChannel, whereToPause: objc.SInt32) callconv(.C) objc.OSErr;
pub const seSpeechAt = PauseSpeechAt;

extern "ApplicationServices" fn ContinueSpeech(chan: SpeechChannel) callconv(.C) objc.OSErr;
pub const tinueSpeech = ContinueSpeech;

extern "ApplicationServices" fn SpeechBusy() callconv(.C) objc.SInt16;
pub const echBusy = SpeechBusy;

extern "ApplicationServices" fn SpeechBusySystemWide() callconv(.C) objc.SInt16;
pub const echBusySystemWide = SpeechBusySystemWide;

extern "ApplicationServices" fn SetSpeechRate(chan: SpeechChannel, rate: objc.Fixed) callconv(.C) objc.OSErr;
pub const speechRate = SetSpeechRate;

extern "ApplicationServices" fn GetSpeechRate(chan: SpeechChannel, rate: ?*objc.Fixed) callconv(.C) objc.OSErr;
pub const speechRate = GetSpeechRate;

extern "ApplicationServices" fn SetSpeechPitch(chan: SpeechChannel, pitch: objc.Fixed) callconv(.C) objc.OSErr;
pub const speechPitch = SetSpeechPitch;

extern "ApplicationServices" fn GetSpeechPitch(chan: SpeechChannel, pitch: ?*objc.Fixed) callconv(.C) objc.OSErr;
pub const speechPitch = GetSpeechPitch;

extern "ApplicationServices" fn SetSpeechInfo(chan: SpeechChannel, selector: objc.OSType, speechInfo: ?*anyopaque) callconv(.C) objc.OSErr;
pub const speechInfo = SetSpeechInfo;

extern "ApplicationServices" fn GetSpeechInfo(chan: SpeechChannel, selector: objc.OSType, speechInfo: ?*anyopaque) callconv(.C) objc.OSErr;
pub const speechInfo = GetSpeechInfo;

extern "ApplicationServices" fn TextToPhonemes(
    chan: SpeechChannel,
    textBuf: ?*anyopaque,
    textBytes: u64,
    phonemeBuf: objc.Handle,
    phonemeBytes: ?*i64,
) callconv(.C) objc.OSErr;
pub const tToPhonemes = TextToPhonemes;

extern "ApplicationServices" fn UseDictionary(chan: SpeechChannel, dictionary: objc.Handle) callconv(.C) objc.OSErr;
pub const dictionary = UseDictionary;

extern "ApplicationServices" fn SpeakCFString(chan: SpeechChannel, aString: core_foundation.StringRef, options: core_foundation.DictionaryRef) callconv(.C) objc.OSErr;
pub const akCFString = SpeakCFString;

extern "ApplicationServices" fn UseSpeechDictionary(chan: SpeechChannel, speechDictionary: core_foundation.DictionaryRef) callconv(.C) objc.OSErr;
pub const speechDictionary = UseSpeechDictionary;

extern "ApplicationServices" fn CopyPhonemesFromText(chan: SpeechChannel, text: core_foundation.StringRef, phonemes: ?*core_foundation.StringRef) callconv(.C) objc.OSErr;
pub const yPhonemesFromText = CopyPhonemesFromText;

extern "ApplicationServices" fn CopySpeechProperty(chan: SpeechChannel, property: core_foundation.StringRef, object: ?*core_foundation.TypeRef) callconv(.C) objc.OSErr;
pub const ySpeechProperty = CopySpeechProperty;

extern "ApplicationServices" fn SetSpeechProperty(chan: SpeechChannel, property: core_foundation.StringRef, object: core_foundation.TypeRef) callconv(.C) objc.OSErr;
pub const speechProperty = SetSpeechProperty;

extern "ApplicationServices" fn SpeechSynthesisRegisterModuleURL(url: core_foundation.URLRef) callconv(.C) objc.OSErr;
pub const echSynthesisRegisterModuleURL = SpeechSynthesisRegisterModuleURL;

extern "ApplicationServices" fn SpeechSynthesisUnregisterModuleURL(url: core_foundation.URLRef) callconv(.C) objc.OSErr;
pub const echSynthesisUnregisterModuleURL = SpeechSynthesisUnregisterModuleURL;
