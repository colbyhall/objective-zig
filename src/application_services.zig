// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const core_text = @import("core_text.zig"); // Framework dependency CoreText.
const core_graphics = @import("core_graphics.zig"); // Framework dependency CoreGraphics.
const core_services = @import("core_services.zig"); // Framework dependency CoreServices.
const foundation = @import("foundation.zig"); // Framework dependency Foundation.
const app_kit = @import("app_kit.zig"); // Framework dependency AppKit.

pub const Point = core_foundation.CGPoint;

pub const FMGeneration = objc.UInt32;

pub const FMFontFamily = objc.SInt16;

pub const FMFontStyle = objc.SInt16;

pub const FMFontSize = objc.SInt16;

pub const FMFont = objc.UInt32;

pub const FMFontFamilyInstance = extern struct {
    fontFamily: FMFontFamily,
    fontStyle: FMFontStyle,
};

pub const FMFontFamilyIterator = extern struct {
    reserved: objc.UInt32,
};

pub const FMFontIterator = extern struct {
    reserved: objc.UInt32,
};

pub const FMFontFamilyInstanceIterator = extern struct {
    reserved: objc.UInt32,
};

pub const FMFilterSelector = objc.UInt32;

pub const OptionFlags = objc.OptionBits;

pub const Generation = objc.UInt32;

pub const FontContainerRef = objc.UInt32;

pub const FontFamilyRef = objc.UInt32;

pub const FontRef = objc.UInt32;

pub const GlyphRef = objc.UInt16;

pub const FontSize = core_foundation.CGFloat;

pub const FontFormat = objc.UInt32;

pub const FontMetrics = extern struct {
    version: objc.UInt32,
    ascent: core_foundation.CGFloat,
    descent: core_foundation.CGFloat,
    leading: core_foundation.CGFloat,
    avgAdvanceWidth: core_foundation.CGFloat,
    maxAdvanceWidth: core_foundation.CGFloat,
    minLeftSideBearing: core_foundation.CGFloat,
    minRightSideBearing: core_foundation.CGFloat,
    stemWidth: core_foundation.CGFloat,
    stemHeight: core_foundation.CGFloat,
    capHeight: core_foundation.CGFloat,
    xHeight: core_foundation.CGFloat,
    italicAngle: core_foundation.CGFloat,
    underlinePosition: core_foundation.CGFloat,
    underlineThickness: core_foundation.CGFloat,
};

pub const CurveType = objc.UInt16;

pub const UCurvePath = extern struct {
    vectors: objc.UInt32,
    controlBits: objc.UInt32,
    vector: Point,
};

pub const UCurvePaths = extern struct {
    contours: objc.UInt32,
    contour: UCurvePath,
};

pub const GlyphIdealMetrics = extern struct {
    advance: Point,
    sideBearing: Point,
    otherSideBearing: Point,
};

pub const GlyphScreenMetrics = extern struct {
    deviceAdvance: Point,
    topLeft: Point,
    height: objc.UInt32,
    width: objc.UInt32,
    sideBearing: Point,
    otherSideBearing: Point,
};

pub const GlyphID = GlyphRef;

pub const ULayoutOperationSelector = objc.UInt32;

pub const anon1031 = u32;
pub const anon1031_ATSULayoutOperationNone: u32 = 0;
pub const anon1031_ATSULayoutOperationJustification: u32 = 1;
pub const anon1031_ATSULayoutOperationMorph: u32 = 2;
pub const anon1031_ATSULayoutOperationKerningAdjustment: u32 = 4;
pub const anon1031_ATSULayoutOperationBaselineAdjustment: u32 = 8;
pub const anon1031_ATSULayoutOperationTrackingAdjustment: u32 = 16;
pub const anon1031_ATSULayoutOperationPostLayoutAdjustment: u32 = 32;
pub const anon1031_ATSULayoutOperationAppleReserved: u32 = -64;

pub const ULayoutOperationCallbackStatus = objc.UInt32;

pub const LineLayoutOptions = objc.UInt32;

pub const StyleRenderingOptions = objc.UInt32;

pub const anon3441 = u32;
pub const anon3441_ATSStyleNoOptions: u32 = 0;
pub const anon3441_ATSStyleNoHinting: u32 = 1;
pub const anon3441_ATSStyleApplyAntiAliasing: u32 = 2;
pub const anon3441_ATSStyleNoAntiAliasing: u32 = 4;
pub const anon3441_ATSStyleAppleReserved: u32 = -8;
pub const anon3441_ATSStyleApplyHints: u32 = 0;
pub const anon3441_sizeof_sfntNameHeader: u32 = 6;

pub const GlyphInfoFlags = objc.UInt32;

pub const LayoutRecord = extern struct {
    glyphID: GlyphRef,
    flags: GlyphInfoFlags,
    originalOffset: objc.ByteCount,
    realPos: objc.Fixed,
};

pub const Trapezoid = extern struct {
    upperLeft: objc.FixedPoint,
    upperRight: objc.FixedPoint,
    lowerRight: objc.FixedPoint,
    lowerLeft: objc.FixedPoint,
};

pub const JustWidthDeltaEntryOverride = extern struct {
    beforeGrowLimit: objc.Fixed,
    beforeShrinkLimit: objc.Fixed,
    afterGrowLimit: objc.Fixed,
    afterShrinkLimit: objc.Fixed,
    growFlags: core_text.JustificationFlags,
    shrinkFlags: core_text.JustificationFlags,
};

pub const JustPriorityWidthDeltaOverrides = JustWidthDeltaEntryOverride;

pub const anon251 = u32;
pub const anon251_FontNoPlatform: u32 = -1;
pub const anon251_FontNoScript: u32 = -1;
pub const anon251_FontNoLanguage: u32 = -1;
pub const anon251_FontNoName: u32 = -1;

pub const FontContext = objc.UInt32;

pub const FontFamilyApplierFunction = objc.OSStatus;

pub const FontApplierFunction = objc.OSStatus;

pub const FontFamilyIterator_ = extern struct {};

pub const FontFamilyIterator = FontFamilyIterator_;

pub const FontIterator_ = extern struct {};

pub const FontIterator = FontIterator_;

pub const FontFilterSelector = u32;
pub const FontFilterSelector_Unspecified: u32 = 0;
pub const FontFilterSelector_Generation: u32 = 3;
pub const FontFilterSelector_FontFamily: u32 = 7;
pub const FontFilterSelector_FontFamilyApplierFunction: u32 = 8;
pub const FontFilterSelector_FontApplierFunction: u32 = 9;
pub const FontFilterSelector_FileReferenceFilterSelector: u32 = 10;

pub const FontFilter = extern struct {
    pub const anon1213 = extern union {
        generationFilter: Generation,
        fontFamilyFilter: FontFamilyRef,
        fontFamilyApplierFunctionFilter: FontFamilyApplierFunction,
        fontApplierFunctionFilter: FontApplierFunction,
    };

    version: objc.UInt32,
    filterSelector: FontFilterSelector,
    filter: FontFilter.anon1213,
};

pub const FontNotificationRef_ = extern struct {};

pub const FontNotificationRef = FontNotificationRef_;

pub const FontNotificationInfoRef_ = extern struct {};

pub const FontNotificationInfoRef = FontNotificationInfoRef_;

pub const FontNotifyOption = u32;
pub const FontNotifyOption_Default: u32 = 0;
pub const FontNotifyOption_ReceiveWhileSuspended: u32 = 1;

pub const FontNotifyAction = u32;
pub const FontNotifyAction_FontsChanged: u32 = 1;
pub const FontNotifyAction_DirectoriesChanged: u32 = 2;

pub const NotificationCallback = ?*const fn (FontNotificationInfoRef, ?*anyopaque) callconv(.C) void;

extern "ApplicationServices" fn ATSGetGeneration() callconv(.C) Generation;
pub const getGeneration = ATSGetGeneration;

extern "ApplicationServices" fn ATSFontActivateFromMemory(
    iData: objc.LogicalAddress,
    iLength: objc.ByteCount,
    iContext: FontContext,
    iFormat: FontFormat,
    iReserved: ?*anyopaque,
    iOptions: OptionFlags,
    oContainer: ?*FontContainerRef,
) callconv(.C) objc.OSStatus;
pub const fontActivateFromMemory = ATSFontActivateFromMemory;

extern "ApplicationServices" fn ATSFontDeactivate(iContainer: FontContainerRef, iRefCon: ?*anyopaque, iOptions: OptionFlags) callconv(.C) objc.OSStatus;
pub const fontDeactivate = ATSFontDeactivate;

extern "ApplicationServices" fn ATSFontGetContainer(iFont: FontRef, iOptions: OptionFlags, oContainer: ?*FontContainerRef) callconv(.C) objc.OSStatus;
pub const fontGetContainer = ATSFontGetContainer;

extern "ApplicationServices" fn ATSFontSetEnabled(iFont: FontRef, iOptions: OptionFlags, iEnabled: objc.Boolean) callconv(.C) objc.OSStatus;
pub const fontSetEnabled = ATSFontSetEnabled;

extern "ApplicationServices" fn ATSFontIsEnabled(iFont: FontRef) callconv(.C) objc.Boolean;
pub const fontIsEnabled = ATSFontIsEnabled;

extern "ApplicationServices" fn ATSFontFamilyApplyFunction(iFunction: FontFamilyApplierFunction, iRefCon: ?*anyopaque) callconv(.C) objc.OSStatus;
pub const fontFamilyApplyFunction = ATSFontFamilyApplyFunction;

extern "ApplicationServices" fn ATSFontFamilyIteratorCreate(
    iContext: FontContext,
    iFilter: ?*const FontFilter,
    iRefCon: ?*anyopaque,
    iOptions: OptionFlags,
    ioIterator: ?*FontFamilyIterator,
) callconv(.C) objc.OSStatus;
pub const fontFamilyIteratorCreate = ATSFontFamilyIteratorCreate;

extern "ApplicationServices" fn ATSFontFamilyIteratorRelease(ioIterator: ?*FontFamilyIterator) callconv(.C) objc.OSStatus;
pub const fontFamilyIteratorRelease = ATSFontFamilyIteratorRelease;

extern "ApplicationServices" fn ATSFontFamilyIteratorReset(
    iContext: FontContext,
    iFilter: ?*const FontFilter,
    iRefCon: ?*anyopaque,
    iOptions: OptionFlags,
    ioIterator: ?*FontFamilyIterator,
) callconv(.C) objc.OSStatus;
pub const fontFamilyIteratorReset = ATSFontFamilyIteratorReset;

extern "ApplicationServices" fn ATSFontFamilyIteratorNext(iIterator: FontFamilyIterator, oFamily: ?*FontFamilyRef) callconv(.C) objc.OSStatus;
pub const fontFamilyIteratorNext = ATSFontFamilyIteratorNext;

extern "ApplicationServices" fn ATSFontFamilyFindFromName(iName: core_foundation.StringRef, iOptions: OptionFlags) callconv(.C) FontFamilyRef;
pub const fontFamilyFindFromName = ATSFontFamilyFindFromName;

extern "ApplicationServices" fn ATSFontFamilyGetGeneration(iFamily: FontFamilyRef) callconv(.C) Generation;
pub const fontFamilyGetGeneration = ATSFontFamilyGetGeneration;

extern "ApplicationServices" fn ATSFontFamilyGetName(iFamily: FontFamilyRef, iOptions: OptionFlags, oName: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const fontFamilyGetName = ATSFontFamilyGetName;

extern "ApplicationServices" fn ATSFontApplyFunction(iFunction: FontApplierFunction, iRefCon: ?*anyopaque) callconv(.C) objc.OSStatus;
pub const fontApplyFunction = ATSFontApplyFunction;

extern "ApplicationServices" fn ATSFontIteratorCreate(
    iContext: FontContext,
    iFilter: ?*const FontFilter,
    iRefCon: ?*anyopaque,
    iOptions: OptionFlags,
    ioIterator: ?*FontIterator,
) callconv(.C) objc.OSStatus;
pub const fontIteratorCreate = ATSFontIteratorCreate;

extern "ApplicationServices" fn ATSFontIteratorRelease(ioIterator: ?*FontIterator) callconv(.C) objc.OSStatus;
pub const fontIteratorRelease = ATSFontIteratorRelease;

extern "ApplicationServices" fn ATSFontIteratorReset(
    iContext: FontContext,
    iFilter: ?*const FontFilter,
    iRefCon: ?*anyopaque,
    iOptions: OptionFlags,
    ioIterator: ?*FontIterator,
) callconv(.C) objc.OSStatus;
pub const fontIteratorReset = ATSFontIteratorReset;

extern "ApplicationServices" fn ATSFontIteratorNext(iIterator: FontIterator, oFont: ?*FontRef) callconv(.C) objc.OSStatus;
pub const fontIteratorNext = ATSFontIteratorNext;

extern "ApplicationServices" fn ATSFontFindFromName(iName: core_foundation.StringRef, iOptions: OptionFlags) callconv(.C) FontRef;
pub const fontFindFromName = ATSFontFindFromName;

extern "ApplicationServices" fn ATSFontFindFromPostScriptName(iName: core_foundation.StringRef, iOptions: OptionFlags) callconv(.C) FontRef;
pub const fontFindFromPostScriptName = ATSFontFindFromPostScriptName;

extern "ApplicationServices" fn ATSFontFindFromContainer(
    iContainer: FontContainerRef,
    iOptions: OptionFlags,
    iCount: objc.ItemCount,
    ioArray: *FontRef,
    oCount: ?*objc.ItemCount,
) callconv(.C) objc.OSStatus;
pub const fontFindFromContainer = ATSFontFindFromContainer;

extern "ApplicationServices" fn ATSFontGetGeneration(iFont: FontRef) callconv(.C) Generation;
pub const fontGetGeneration = ATSFontGetGeneration;

extern "ApplicationServices" fn ATSFontGetName(iFont: FontRef, iOptions: OptionFlags, oName: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const fontGetName = ATSFontGetName;

extern "ApplicationServices" fn ATSFontGetPostScriptName(iFont: FontRef, iOptions: OptionFlags, oName: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const fontGetPostScriptName = ATSFontGetPostScriptName;

extern "ApplicationServices" fn ATSFontGetTableDirectory(
    iFont: FontRef,
    iBufferSize: objc.ByteCount,
    ioBuffer: ?*anyopaque,
    oSize: ?*objc.ByteCount,
) callconv(.C) objc.OSStatus;
pub const fontGetTableDirectory = ATSFontGetTableDirectory;

extern "ApplicationServices" fn ATSFontGetTable(
    iFont: FontRef,
    iTag: objc.FourCharCode,
    iOffset: objc.ByteOffset,
    iBufferSize: objc.ByteCount,
    ioBuffer: ?*anyopaque,
    oSize: ?*objc.ByteCount,
) callconv(.C) objc.OSStatus;
pub const fontGetTable = ATSFontGetTable;

extern "ApplicationServices" fn ATSFontGetHorizontalMetrics(iFont: FontRef, iOptions: OptionFlags, oMetrics: ?*FontMetrics) callconv(.C) objc.OSStatus;
pub const fontGetHorizontalMetrics = ATSFontGetHorizontalMetrics;

extern "ApplicationServices" fn ATSFontGetVerticalMetrics(iFont: FontRef, iOptions: OptionFlags, oMetrics: ?*FontMetrics) callconv(.C) objc.OSStatus;
pub const fontGetVerticalMetrics = ATSFontGetVerticalMetrics;

extern "ApplicationServices" fn ATSFontFamilyFindFromQuickDrawName(iName: objc.ConstStr255Param) callconv(.C) FontFamilyRef;
pub const fontFamilyFindFromQuickDrawName = ATSFontFamilyFindFromQuickDrawName;

extern "ApplicationServices" fn ATSFontFamilyGetQuickDrawName(iFamily: FontFamilyRef, oName: objc.Str255) callconv(.C) objc.OSStatus;
pub const fontFamilyGetQuickDrawName = ATSFontFamilyGetQuickDrawName;

extern "ApplicationServices" fn ATSFontGetFontFamilyResource(
    iFont: FontRef,
    iBufferSize: objc.ByteCount,
    ioBuffer: ?*anyopaque,
    oSize: ?*objc.ByteCount,
) callconv(.C) objc.OSStatus;
pub const fontGetFontFamilyResource = ATSFontGetFontFamilyResource;

extern "ApplicationServices" fn ATSFontNotify(action: FontNotifyAction, info: ?*anyopaque) callconv(.C) objc.OSStatus;
pub const fontNotify = ATSFontNotify;

extern "ApplicationServices" fn ATSFontNotificationSubscribe(
    callback: NotificationCallback,
    options: FontNotifyOption,
    iRefcon: ?*anyopaque,
    oNotificationRef: ?*FontNotificationRef,
) callconv(.C) objc.OSStatus;
pub const fontNotificationSubscribe = ATSFontNotificationSubscribe;

extern "ApplicationServices" fn ATSFontNotificationUnsubscribe(notificationRef: FontNotificationRef) callconv(.C) objc.OSStatus;
pub const fontNotificationUnsubscribe = ATSFontNotificationUnsubscribe;

pub const FontQuerySourceContext = extern struct {
    version: objc.UInt32,
    refCon: ?*anyopaque,
    retain: core_foundation.AllocatorRetainCallBack,
    release: core_foundation.AllocatorReleaseCallBack,
};

pub const FontQueryMessageID = u32;
pub const FontQueryMessageID_QueryActivateFontMessage: u32 = 1635021665;

pub const FontQueryCallback = core_foundation.PropertyListRef;

extern "ApplicationServices" fn ATSCreateFontQueryRunLoopSource(
    queryOrder: core_foundation.Index,
    sourceOrder: core_foundation.Index,
    callout: FontQueryCallback,
    context: ?*const FontQuerySourceContext,
) callconv(.C) core_foundation.RunLoopSourceRef;
pub const createFontQueryRunLoopSource = ATSCreateFontQueryRunLoopSource;

pub const FontAutoActivationSetting = objc.UInt32;

extern "ApplicationServices" fn ATSFontSetGlobalAutoActivationSetting(iSetting: FontAutoActivationSetting) callconv(.C) objc.OSStatus;
pub const fontSetGlobalAutoActivationSetting = ATSFontSetGlobalAutoActivationSetting;

extern "ApplicationServices" fn ATSFontGetGlobalAutoActivationSetting() callconv(.C) FontAutoActivationSetting;
pub const fontGetGlobalAutoActivationSetting = ATSFontGetGlobalAutoActivationSetting;

extern "ApplicationServices" fn ATSFontSetAutoActivationSettingForApplication(iSetting: FontAutoActivationSetting, iApplicationFileURL: core_foundation.URLRef) callconv(.C) objc.OSStatus;
pub const fontSetAutoActivationSettingForApplication = ATSFontSetAutoActivationSettingForApplication;

extern "ApplicationServices" fn ATSFontGetAutoActivationSettingForApplication(iApplicationFileURL: core_foundation.URLRef) callconv(.C) FontAutoActivationSetting;
pub const fontGetAutoActivationSettingForApplication = ATSFontGetAutoActivationSettingForApplication;

pub const anon1341 = u32;
pub const anon1341_cmReflectiveTransparentMask: u32 = 1;
pub const anon1341_cmGlossyMatteMask: u32 = 2;
pub const anon1341_ProcessTransformToForegroundApplication: u32 = 1;
pub const anon1341_ProcessTransformToBackgroundApplication: u32 = 2;
pub const anon1341_ProcessTransformToUIElementApplication: u32 = 4;

pub const anon1401 = u32;
pub const anon1401_cmReflective: u32 = 0;
pub const anon1401_cmGlossy: u32 = 1;

pub const anon1471 = u32;
pub const anon1471_cmPerceptual: u32 = 0;
pub const anon1471_cmRelativeColorimetric: u32 = 1;
pub const anon1471_cmSaturation: u32 = 2;
pub const anon1471_cmAbsoluteColorimetric: u32 = 3;

pub const anon1571 = u32;
pub const anon1571_cmAsciiData: u32 = 0;
pub const anon1571_cmBinaryData: u32 = 1;
pub const anon1571_ICNoUserInteractionBit: u32 = 0;

pub const anon3061 = u32;
pub const anon3061_cmGeometryUnknown: u32 = 0;
pub const anon3061_cmGeometry045or450: u32 = 1;
pub const anon3061_cmGeometry0dord0: u32 = 2;

pub const anon3901 = u32;
pub const anon3901_cmMacintosh: u32 = 1095782476;
pub const anon3901_cmMicrosoft: u32 = 1297303124;
pub const anon3901_cmSolaris: u32 = 1398099543;
pub const anon3901_cmSiliconGraphics: u32 = 1397180704;
pub const anon3901_cmTaligent: u32 = 1413959252;

pub const anon4091 = u32;
pub const anon4091_cmCS1ChromTag: u32 = 1667789421;
pub const anon4091_cmCS1TRCTag: u32 = 1953653536;
pub const anon4091_cmCS1NameTag: u32 = 1851878757;
pub const anon4091_cmCS1CustTag: u32 = 1668641652;

pub const CMDateTime = extern struct {
    year: objc.UInt16,
    month: objc.UInt16,
    dayOfTheMonth: objc.UInt16,
    hours: objc.UInt16,
    minutes: objc.UInt16,
    seconds: objc.UInt16,
};

pub const CMFixedXYColor = extern struct {
    x: objc.Fixed,
    y: objc.Fixed,
};

pub const CMFixedXYZColor = extern struct {
    X: objc.Fixed,
    Y: objc.Fixed,
    Z: objc.Fixed,
};

pub const CMXYZComponent = objc.UInt16;

pub const CMXYZColor = extern struct {
    X: CMXYZComponent,
    Y: CMXYZComponent,
    Z: CMXYZComponent,
};

pub const CMProfileMD5 = [16]u8;

pub const CMProfileMD5Ptr = CMProfileMD5;

pub const CM2Header = extern struct {
    size: objc.UInt32,
    CMMType: objc.OSType,
    profileVersion: objc.UInt32,
    profileClass: objc.OSType,
    dataColorSpace: objc.OSType,
    profileConnectionSpace: objc.OSType,
    dateTime: CMDateTime,
    CS2profileSignature: objc.OSType,
    platform: objc.OSType,
    flags: objc.UInt32,
    deviceManufacturer: objc.OSType,
    deviceModel: objc.UInt32,
    deviceAttributes: objc.UInt32,
    renderingIntent: objc.UInt32,
    white: CMFixedXYZColor,
    creator: objc.OSType,
    reserved: [44]c_char,
};

pub const CM4Header = extern struct {
    size: objc.UInt32,
    CMMType: objc.OSType,
    profileVersion: objc.UInt32,
    profileClass: objc.OSType,
    dataColorSpace: objc.OSType,
    profileConnectionSpace: objc.OSType,
    dateTime: CMDateTime,
    CS2profileSignature: objc.OSType,
    platform: objc.OSType,
    flags: objc.UInt32,
    deviceManufacturer: objc.OSType,
    deviceModel: objc.UInt32,
    deviceAttributes: objc.UInt32,
    renderingIntent: objc.UInt32,
    white: CMFixedXYZColor,
    creator: objc.OSType,
    digest: CMProfileMD5,
    reserved: [28]c_char,
};

pub const CMTagRecord = extern struct {
    tag: objc.OSType,
    elementOffset: objc.UInt32,
    elementSize: objc.UInt32,
};

pub const CMTagElemTable = extern struct {
    count: objc.UInt32,
    tagList: CMTagRecord,
};

pub const CM2Profile = extern struct {
    header: CM2Header,
    tagTable: CMTagElemTable,
    elemData: [1]c_char,
};

pub const CM2ProfilePtr = ?*CM2Profile;

pub const CM2ProfileHandle = ?*?*CM2Profile;

pub const CMAdaptationMatrixType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    adaptationMatrix: objc.Fixed,
};

pub const CMCurveType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    countValue: objc.UInt32,
    data: objc.UInt16,
};

pub const CMDataType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    dataFlag: objc.UInt32,
    data: [1]c_char,
};

pub const CMDateTimeType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    dateTime: CMDateTime,
};

pub const CMLut16Type = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    inputChannels: objc.UInt8,
    outputChannels: objc.UInt8,
    gridPoints: objc.UInt8,
    reserved2: objc.UInt8,
    matrix: objc.Fixed,
    inputTableEntries: objc.UInt16,
    outputTableEntries: objc.UInt16,
    inputTable: objc.UInt16,
};

pub const CMLut8Type = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    inputChannels: objc.UInt8,
    outputChannels: objc.UInt8,
    gridPoints: objc.UInt8,
    reserved2: objc.UInt8,
    matrix: objc.Fixed,
    inputTable: objc.UInt8,
};

pub const CMMultiFunctLutType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    inputChannels: objc.UInt8,
    outputChannels: objc.UInt8,
    reserved2: objc.UInt16,
    offsetBcurves: objc.UInt32,
    offsetMatrix: objc.UInt32,
    offsetMcurves: objc.UInt32,
    offsetCLUT: objc.UInt32,
    offsetAcurves: objc.UInt32,
    data: objc.UInt8,
};

pub const CMMultiFunctLutA2BType = CMMultiFunctLutType;

pub const CMMultiFunctLutB2AType = CMMultiFunctLutType;

pub const CMMultiFunctCLUTType = extern struct {
    gridPoints: objc.UInt8,
    entrySize: objc.UInt8,
    reserved: objc.UInt8,
    data: objc.UInt8,
};

pub const CMMeasurementType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    standardObserver: objc.UInt32,
    backingXYZ: CMFixedXYZColor,
    geometry: objc.UInt32,
    flare: objc.UInt32,
    illuminant: objc.UInt32,
};

pub const CMNamedColorType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    vendorFlag: objc.UInt32,
    count: objc.UInt32,
    prefixName: objc.UInt8,
};

pub const CMNamedColor2EntryType = extern struct {
    rootName: objc.UInt8,
    PCSColorCoords: objc.UInt16,
    DeviceColorCoords: objc.UInt16,
};

pub const CMNamedColor2Type = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    vendorFlag: objc.UInt32,
    count: objc.UInt32,
    deviceChannelCount: objc.UInt32,
    prefixName: objc.UInt8,
    suffixName: objc.UInt8,
    data: [1]c_char,
};

pub const CMNativeDisplayInfo = extern struct {
    dataSize: objc.UInt32,
    redPhosphor: CMFixedXYColor,
    greenPhosphor: CMFixedXYColor,
    bluePhosphor: CMFixedXYColor,
    whitePoint: CMFixedXYColor,
    redGammaValue: objc.Fixed,
    greenGammaValue: objc.Fixed,
    blueGammaValue: objc.Fixed,
    gammaChannels: objc.UInt16,
    gammaEntryCount: objc.UInt16,
    gammaEntrySize: objc.UInt16,
    gammaData: [1]c_char,
};

pub const CMNativeDisplayInfoType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    nativeDisplayInfo: CMNativeDisplayInfo,
};

pub const CMParametricCurveType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    functionType: objc.UInt16,
    reserved2: objc.UInt16,
    value: objc.Fixed,
};

pub const CMTextDescriptionType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    ASCIICount: objc.UInt32,
    ASCIIName: objc.UInt8,
};

pub const CMTextType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    text: objc.UInt8,
};

pub const CMUnicodeTextType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    text: objc.UniChar,
};

pub const CMScreeningChannelRec = extern struct {
    frequency: objc.Fixed,
    angle: objc.Fixed,
    spotFunction: objc.UInt32,
};

pub const CMScreeningType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    screeningFlag: objc.UInt32,
    channelCount: objc.UInt32,
    channelInfo: CMScreeningChannelRec,
};

pub const CMSignatureType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    signature: objc.OSType,
};

pub const CMS15Fixed16ArrayType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    value: objc.Fixed,
};

pub const CMU16Fixed16ArrayType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    value: objc.UInt32,
};

pub const CMUInt8ArrayType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    value: objc.UInt8,
};

pub const CMUInt16ArrayType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    value: objc.UInt16,
};

pub const CMUInt32ArrayType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    value: objc.UInt32,
};

pub const CMUInt64ArrayType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    value: objc.UInt32,
};

pub const CMViewingConditionsType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    illuminant: CMFixedXYZColor,
    surround: CMFixedXYZColor,
    stdIlluminant: objc.UInt32,
};

pub const CMXYZType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    XYZ: CMFixedXYZColor,
};

pub const CMProfileSequenceDescType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    count: objc.UInt32,
    data: [1]c_char,
};

pub const CMUcrBgType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    ucrCount: objc.UInt32,
    ucrValues: objc.UInt16,
};

pub const CMIntentCRDVMSize = extern struct {
    renderingIntent: objc.UInt32,
    VMSize: objc.UInt32,
};

pub const CMPS2CRDVMSizeType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    count: objc.UInt32,
    intentCRD: CMIntentCRDVMSize,
};

pub const CMVideoCardGammaTable = extern struct {
    channels: objc.UInt16,
    entryCount: objc.UInt16,
    entrySize: objc.UInt16,
    data: [1]c_char,
};

pub const CMVideoCardGammaFormula = extern struct {
    redGamma: objc.Fixed,
    redMin: objc.Fixed,
    redMax: objc.Fixed,
    greenGamma: objc.Fixed,
    greenMin: objc.Fixed,
    greenMax: objc.Fixed,
    blueGamma: objc.Fixed,
    blueMin: objc.Fixed,
    blueMax: objc.Fixed,
};

pub const CMVideoCardGamma = extern struct {
    pub const anon8593 = extern union {
        table: CMVideoCardGammaTable,
        formula: CMVideoCardGammaFormula,
    };

    tagType: objc.UInt32,
    u: CMVideoCardGamma.anon8593,
};

pub const CMVideoCardGammaType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    gamma: CMVideoCardGamma,
};

pub const CMMakeAndModel = extern struct {
    manufacturer: objc.OSType,
    model: objc.UInt32,
    serialNumber: objc.UInt32,
    manufactureDate: objc.UInt32,
    reserved1: objc.UInt32,
    reserved2: objc.UInt32,
    reserved3: objc.UInt32,
    reserved4: objc.UInt32,
};

pub const CMMakeAndModelType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    makeAndModel: CMMakeAndModel,
};

pub const CMMultiLocalizedUniCodeEntryRec = extern struct {
    languageCode: [2]c_char,
    regionCode: [2]c_char,
    textLength: objc.UInt32,
    textOffset: objc.UInt32,
};

pub const CMMultiLocalizedUniCodeType = extern struct {
    typeDescriptor: objc.OSType,
    reserved: objc.UInt32,
    entryCount: objc.UInt32,
    entrySize: objc.UInt32,
};

pub const OpaqueCMProfileRef = extern struct {};

pub const CMProfileRef = OpaqueCMProfileRef;

pub const OpaqueCMWorldRef = extern struct {};

pub const CMWorldRef = OpaqueCMWorldRef;

pub const CMDisplayIDType = objc.UInt32;

pub const CMChromaticAdaptation = objc.UInt32;

pub const anon10181 = u32;
pub const anon10181_cmUseDefaultChromaticAdaptation: u32 = 0;
pub const anon10181_cmLinearChromaticAdaptation: u32 = 1;
pub const anon10181_cmVonKriesChromaticAdaptation: u32 = 2;
pub const anon10181_cmBradfordChromaticAdaptation: u32 = 3;

pub const CMFlattenProcPtr = objc.OSErr;

pub const CMFlattenUPP = CMFlattenProcPtr;

pub const CMBitmapCallBackProcPtr = objc.Boolean;

pub const CMBitmapCallBackUPP = CMBitmapCallBackProcPtr;

pub const CMConcatCallBackProcPtr = objc.Boolean;

pub const CMConcatCallBackUPP = CMConcatCallBackProcPtr;

pub const anon10851 = u32;
pub const anon10851_DefaultCMMSignature: u32 = 1634758764;

pub const anon11381 = u32;
pub const anon11381_cmPS7bit: u32 = 1;
pub const anon11381_cmPS8bit: u32 = 2;

pub const anon11521 = u32;
pub const anon11521_cmOpenReadSpool: u32 = 1;
pub const anon11521_cmOpenWriteSpool: u32 = 2;
pub const anon11521_cmReadSpool: u32 = 3;
pub const anon11521_cmWriteSpool: u32 = 4;
pub const anon11521_cmCloseSpool: u32 = 5;

pub const anon11611 = u32;
pub const anon11611_cmOpenReadAccess: u32 = 1;
pub const anon11611_cmOpenWriteAccess: u32 = 2;
pub const anon11611_cmReadAccess: u32 = 3;
pub const anon11611_cmWriteAccess: u32 = 4;
pub const anon11611_cmCloseAccess: u32 = 5;
pub const anon11611_cmCreateNewAccess: u32 = 6;
pub const anon11611_cmAbortWriteAccess: u32 = 7;
pub const anon11611_cmBeginAccess: u32 = 8;
pub const anon11611_cmEndAccess: u32 = 9;

pub const anon11741 = u32;
pub const anon11741_cmInputUse: u32 = 1768845428;
pub const anon11741_cmOutputUse: u32 = 1869968496;
pub const anon11741_cmDisplayUse: u32 = 1685089401;
pub const anon11741_cmProofUse: u32 = 1886549350;

pub const CMAppleProfileHeader = extern union {
    cm2: CM2Header,
    cm4: CM4Header,
};

pub const CMConcatProfileSet = extern struct {
    keyIndex: objc.UInt16,
    count: objc.UInt16,
    profileSet: CMProfileRef,
};

pub const NCMConcatProfileSpec = extern struct {
    renderingIntent: objc.UInt32,
    transformTag: objc.UInt32,
    profile: CMProfileRef,
};

pub const NCMConcatProfileSet = extern struct {
    cmm: objc.OSType,
    flags: objc.UInt32,
    flagsMask: objc.UInt32,
    profileCount: objc.UInt32,
    profileSpecs: NCMConcatProfileSpec,
};

pub const CMRGBColor = extern struct {
    red: objc.UInt16,
    green: objc.UInt16,
    blue: objc.UInt16,
};

pub const CMCMYKColor = extern struct {
    cyan: objc.UInt16,
    magenta: objc.UInt16,
    yellow: objc.UInt16,
    black: objc.UInt16,
};

pub const CMCMYColor = extern struct {
    cyan: objc.UInt16,
    magenta: objc.UInt16,
    yellow: objc.UInt16,
};

pub const CMHLSColor = extern struct {
    hue: objc.UInt16,
    lightness: objc.UInt16,
    saturation: objc.UInt16,
};

pub const CMHSVColor = extern struct {
    hue: objc.UInt16,
    saturation: objc.UInt16,
    value: objc.UInt16,
};

pub const CMLabColor = extern struct {
    L: objc.UInt16,
    a: objc.UInt16,
    b: objc.UInt16,
};

pub const CMLuvColor = extern struct {
    L: objc.UInt16,
    u: objc.UInt16,
    v: objc.UInt16,
};

pub const CMYxyColor = extern struct {
    capY: objc.UInt16,
    x: objc.UInt16,
    y: objc.UInt16,
};

pub const CMGrayColor = extern struct {
    gray: objc.UInt16,
};

pub const CMMultichannel5Color = extern struct {
    components: objc.UInt8,
};

pub const CMMultichannel6Color = extern struct {
    components: objc.UInt8,
};

pub const CMMultichannel7Color = extern struct {
    components: objc.UInt8,
};

pub const CMMultichannel8Color = extern struct {
    components: objc.UInt8,
};

pub const CMNamedColor = extern struct {
    namedColorIndex: objc.UInt32,
};

pub const CMColor = extern union {
    rgb: CMRGBColor,
    hsv: CMHSVColor,
    hls: CMHLSColor,
    XYZ: CMXYZColor,
    Lab: CMLabColor,
    Luv: CMLuvColor,
    Yxy: CMYxyColor,
    cmyk: CMCMYKColor,
    cmy: CMCMYColor,
    gray: CMGrayColor,
    mc5: CMMultichannel5Color,
    mc6: CMMultichannel6Color,
    mc7: CMMultichannel7Color,
    mc8: CMMultichannel8Color,
    namedColor: CMNamedColor,
};

pub const CMMInfo = extern struct {
    dataSize: objc.size_t,
    CMMType: objc.OSType,
    CMMMfr: objc.OSType,
    CMMVersion: objc.UInt32,
    ASCIIName: [32]u8,
    ASCIIDesc: [256]u8,
    UniCodeNameCount: objc.UniCharCount,
    UniCodeName: objc.UniChar,
    UniCodeDescCount: objc.UniCharCount,
    UniCodeDesc: objc.UniChar,
};

pub const anon13801 = i32;
pub const anon13801_cmColorSpaceSpaceMask: i32 = 63;
pub const anon13801_cmColorSpacePremulAlphaMask: i32 = 64;
pub const anon13801_cmColorSpaceAlphaMask: i32 = 128;
pub const anon13801_cmColorSpaceSpaceAndAlphaMask: i32 = 255;
pub const anon13801_cmColorSpacePackingMask: i32 = 65280;
pub const anon13801_cmColorSpaceEncodingMask: i32 = 983040;
pub const anon13801_cmColorSpaceReservedMask: i32 = -1048576;

pub const anon13911 = u32;
pub const anon13911_cmNoColorPacking: u32 = 0;
pub const anon13911_cmWord5ColorPacking: u32 = 1280;
pub const anon13911_cmWord565ColorPacking: u32 = 1536;
pub const anon13911_cmLong8ColorPacking: u32 = 2048;
pub const anon13911_cmLong10ColorPacking: u32 = 2560;
pub const anon13911_cmAlphaFirstPacking: u32 = 4096;
pub const anon13911_cmOneBitDirectPacking: u32 = 2816;
pub const anon13911_cmAlphaLastPacking: u32 = 0;
pub const anon13911_cm8_8ColorPacking: u32 = 10240;
pub const anon13911_cm16_8ColorPacking: u32 = 8192;
pub const anon13911_cm24_8ColorPacking: u32 = 8448;
pub const anon13911_cm32_8ColorPacking: u32 = 2048;
pub const anon13911_cm40_8ColorPacking: u32 = 8704;
pub const anon13911_cm48_8ColorPacking: u32 = 8960;
pub const anon13911_cm56_8ColorPacking: u32 = 9216;
pub const anon13911_cm64_8ColorPacking: u32 = 9472;
pub const anon13911_cm32_16ColorPacking: u32 = 9728;
pub const anon13911_cm48_16ColorPacking: u32 = 10496;
pub const anon13911_cm64_16ColorPacking: u32 = 10752;
pub const anon13911_cm32_32ColorPacking: u32 = 9984;
pub const anon13911_cmLittleEndianPacking: u32 = 16384;
pub const anon13911_cmReverseChannelPacking: u32 = 32768;

pub const anon14171 = u32;
pub const anon14171_cmSRGB16ChannelEncoding: u32 = 65536;

pub const anon14221 = u32;
pub const anon14221_cmNoSpace: u32 = 0;
pub const anon14221_cmRGBSpace: u32 = 1;
pub const anon14221_cmCMYKSpace: u32 = 2;
pub const anon14221_cmHSVSpace: u32 = 3;
pub const anon14221_cmHLSSpace: u32 = 4;
pub const anon14221_cmYXYSpace: u32 = 5;
pub const anon14221_cmXYZSpace: u32 = 6;
pub const anon14221_cmLUVSpace: u32 = 7;
pub const anon14221_cmLABSpace: u32 = 8;
pub const anon14221_cmReservedSpace1: u32 = 9;
pub const anon14221_cmGraySpace: u32 = 10;
pub const anon14221_cmReservedSpace2: u32 = 11;
pub const anon14221_cmGamutResultSpace: u32 = 12;
pub const anon14221_cmNamedIndexedSpace: u32 = 16;
pub const anon14221_cmMCFiveSpace: u32 = 17;
pub const anon14221_cmMCSixSpace: u32 = 18;
pub const anon14221_cmMCSevenSpace: u32 = 19;
pub const anon14221_cmMCEightSpace: u32 = 20;
pub const anon14221_cmAlphaPmulSpace: u32 = 64;
pub const anon14221_cmAlphaSpace: u32 = 128;
pub const anon14221_cmRGBASpace: u32 = 129;
pub const anon14221_cmGrayASpace: u32 = 138;
pub const anon14221_cmRGBAPmulSpace: u32 = 193;
pub const anon14221_cmGrayAPmulSpace: u32 = 202;

pub const CMBitmapColorSpace = objc.UInt32;

pub const CMBitmap = extern struct {
    image: ?*c_char,
    width: objc.size_t,
    height: objc.size_t,
    rowBytes: objc.size_t,
    pixelSize: objc.size_t,
    space: CMBitmapColorSpace,
    user1: objc.UInt32,
    user2: objc.UInt32,
};

pub const anon15231 = u32;
pub const anon15231_CS_MAX_PATH: u32 = 1024;

pub const anon15351 = u32;
pub const anon15351_cmNoProfileBase: u32 = 0;
pub const anon15351_cmPathBasedProfile: u32 = 5;
pub const anon15351_cmBufferBasedProfile: u32 = 6;

pub const CMHandleLocation = extern struct {
    h: objc.Handle,
};

pub const CMPathLocation = extern struct {
    path: [1024]c_char,
};

pub const CMBufferLocation = extern struct {
    buffer: ?*anyopaque,
    size: objc.UInt32,
};

pub const CMProfLoc = extern union {
    handleLoc: CMHandleLocation,
    pathLoc: CMPathLocation,
    bufferLoc: CMBufferLocation,
};

pub const CMProfileLocation = extern struct {
    locType: i16,
    u: CMProfLoc,
};

pub const anon16031 = u32;
pub const anon16031_cmOriginalProfileLocationSize: u32 = 72;
pub const anon16031_cmCurrentProfileLocationSize: u32 = 1032;

pub const anon16111 = u32;
pub const anon16111_cmProfileIterateDataVersion1: u32 = 65536;
pub const anon16111_cmProfileIterateDataVersion2: u32 = 131072;
pub const anon16111_cmProfileIterateDataVersion3: u32 = 196608;
pub const anon16111_cmProfileIterateDataVersion4: u32 = 262144;

pub const CMProfileIterateData = extern struct {
    dataVersion: objc.UInt32,
    header: CM2Header,
    code: objc.ScriptCode,
    name: objc.Str255,
    location: CMProfileLocation,
    uniCodeNameCount: objc.UniCharCount,
    uniCodeName: objc.UniChar,
    asciiName: ?*u8,
    makeAndModel: CMMakeAndModel,
    digest: CMProfileMD5,
};

pub const CMProfileIterateProcPtr = objc.OSErr;

pub const CMProfileIterateUPP = CMProfileIterateProcPtr;

pub const CMMIterateProcPtr = objc.OSErr;

pub const CMMIterateUPP = CMMIterateProcPtr;

pub const CMLabToLabProcPtr = ?*const fn (
    ?*f32,
    ?*f32,
    ?*f32,
    ?*anyopaque,
) callconv(.C) void;

pub const CMFloatBitmapFlags = u32;
pub const CMFloatBitmapFlags_None: u32 = 0;
pub const CMFloatBitmapFlags_Alpha: u32 = 1;
pub const CMFloatBitmapFlags_AlphaPremul: u32 = 2;
pub const CMFloatBitmapFlags_RangeClipped: u32 = 4;

pub const CMFloatBitmap = extern struct {
    version: u64,
    buffers: [16]?*f32,
    height: objc.size_t,
    width: objc.size_t,
    rowStride: objc.ptrdiff_t,
    colStride: objc.ptrdiff_t,
    space: objc.OSType,
    flags: CMFloatBitmapFlags,
};

pub const anon18501 = u32;
pub const anon18501_cmCurrentDeviceInfoVersion: u32 = 65536;
pub const anon18501_cmCurrentProfileInfoVersion: u32 = 65536;

pub const anon18591 = u32;
pub const anon18591_cmDefaultDeviceID: u32 = 0;
pub const anon18591_cmDefaultProfileID: u32 = 0;

pub const anon19051 = u32;
pub const anon19051_cmIterateFactoryDeviceProfiles: u32 = 1;
pub const anon19051_cmIterateCustomDeviceProfiles: u32 = 2;
pub const anon19051_cmIterateCurrentDeviceProfiles: u32 = 3;
pub const anon19051_cmIterateAllDeviceProfiles: u32 = 4;
pub const anon19051_cmIterateDeviceProfilesMask: u32 = 15;

pub const anon19161 = i32;
pub const anon19161_cmDeviceDBNotFoundErr: i32 = -4227;
pub const anon19161_cmDeviceAlreadyRegistered: i32 = -4228;
pub const anon19161_cmDeviceNotRegistered: i32 = -4229;
pub const anon19161_cmDeviceProfilesNotFound: i32 = -4230;
pub const anon19161_cmInternalCFErr: i32 = -4231;
pub const anon19161_cmPrefsSynchError: i32 = -4232;

pub const CMDeviceState = objc.UInt32;

pub const CMDeviceID = objc.UInt32;

pub const CMDeviceProfileID = objc.UInt32;

pub const anon19681 = u32;
pub const anon19681_cmScannerDeviceClass: u32 = 1935896178;
pub const anon19681_cmCameraDeviceClass: u32 = 1668117089;
pub const anon19681_cmDisplayDeviceClass: u32 = 1835955314;
pub const anon19681_cmPrinterDeviceClass: u32 = 1886549106;
pub const anon19681_cmProofDeviceClass: u32 = 1886549350;

pub const CMDeviceClass = objc.OSType;

pub const CMDeviceScope = extern struct {
    deviceUser: core_foundation.StringRef,
    deviceHost: core_foundation.StringRef,
};

pub const CMDeviceProfileScope = CMDeviceScope;

pub const CMDeviceInfo = extern struct {
    dataVersion: objc.UInt32,
    deviceClass: CMDeviceClass,
    deviceID: CMDeviceID,
    deviceScope: CMDeviceScope,
    deviceState: CMDeviceState,
    defaultProfileID: CMDeviceProfileID,
    deviceName: core_foundation.DictionaryRef,
    profileCount: objc.UInt32,
    reserved: objc.UInt32,
};

pub const CMDeviceInfoPtr = ?*CMDeviceInfo;

pub const CMDeviceProfileInfo = extern struct {
    dataVersion: objc.UInt32,
    profileID: CMDeviceProfileID,
    profileLoc: CMProfileLocation,
    profileName: core_foundation.DictionaryRef,
    reserved: objc.UInt32,
};

pub const NCMDeviceProfileInfo = extern struct {
    dataVersion: objc.UInt32,
    profileID: CMDeviceProfileID,
    profileLoc: CMProfileLocation,
    profileName: core_foundation.DictionaryRef,
    profileScope: CMDeviceProfileScope,
    reserved: objc.UInt32,
};

pub const CMDeviceProfileArray = extern struct {
    profileCount: objc.UInt32,
    profiles: CMDeviceProfileInfo,
};

pub const CMDeviceProfileArrayPtr = ?*CMDeviceProfileArray;

pub const CMIterateDeviceInfoProcPtr = objc.OSErr;

pub const CMIterateDeviceProfileProcPtr = objc.OSErr;

pub const OpaqueGrafPtr = extern struct {};

pub const GrafPtr = OpaqueGrafPtr;

pub const CGrafPtr = GrafPtr;

pub const GWorldPtr = CGrafPtr;

pub const QDErr = i16;

pub const GWorldFlags = u64;

pub const BitMap = extern struct {
    baseAddr: objc.Ptr,
    rowBytes: i16,
    bounds: objc.Rect,
};

pub const BitMapPtr = BitMap;

pub const BitMapHandle = BitMapPtr;

pub const RGBColor = extern struct {
    red: u16,
    green: u16,
    blue: u16,
};

pub const ColorSpec = extern struct {
    value: i16,
    rgb: RGBColor,
};

pub const ColorSpecPtr = ColorSpec;

pub const CSpecArray = ColorSpec;

pub const ColorTable = extern struct {
    ctSeed: objc.SInt32,
    ctFlags: i16,
    ctSize: i16,
    ctTable: CSpecArray,
};

pub const CTabPtr = ColorTable;

pub const CTabHandle = CTabPtr;

pub const PixMap = extern struct {
    baseAddr: objc.Ptr,
    rowBytes: i16,
    bounds: objc.Rect,
    pmVersion: i16,
    packType: i16,
    packSize: objc.SInt32,
    hRes: objc.Fixed,
    vRes: objc.Fixed,
    pixelType: i16,
    pixelSize: i16,
    cmpCount: i16,
    cmpSize: i16,
    pixelFormat: objc.OSType,
    pmTable: CTabHandle,
    pmExt: ?*anyopaque,
};

pub const PixMapPtr = PixMap;

pub const PixMapHandle = PixMapPtr;

pub const Pattern = extern struct {
    pat: objc.UInt8,
};

pub const PatPtr = Pattern;

pub const PatHandle = PatPtr;

pub const PixPat = extern struct {
    patType: i16,
    patMap: PixMapHandle,
    patData: objc.Handle,
    patXData: objc.Handle,
    patXValid: i16,
    patXMap: objc.Handle,
    pat1Data: Pattern,
};

pub const PixPatPtr = PixPat;

pub const PixPatHandle = PixPatPtr;

pub const OpaqueRgnHandle = extern struct {};

pub const RgnHandle = OpaqueRgnHandle;

pub const GDevice = extern struct {
    gdRefNum: i16,
    gdID: i16,
    gdType: i16,
    gdITable: objc.Handle,
    gdResPref: i16,
    gdSearchProc: objc.Handle,
    gdCompProc: objc.Handle,
    gdFlags: i16,
    gdPMap: PixMapHandle,
    gdRefCon: objc.SInt32,
    gdNextGD: GDHandle,
    gdRect: objc.Rect,
    gdMode: objc.SInt32,
    gdCCBytes: i16,
    gdCCDepth: i16,
    gdCCXData: objc.Handle,
    gdCCXMask: objc.Handle,
    gdExt: objc.Handle,
};

pub const GDPtr = GDevice;

pub const GDHandle = GDPtr;

pub const Picture = extern struct {
    picSize: i16,
    picFrame: objc.Rect,
};

pub const PicPtr = Picture;

pub const PicHandle = PicPtr;

pub const OpenCPicParams = extern struct {
    srcRect: objc.Rect,
    hRes: objc.Fixed,
    vRes: objc.Fixed,
    version: i16,
    reserved1: i16,
    reserved2: objc.SInt32,
};

pub const FontInfo = extern struct {
    ascent: i16,
    descent: i16,
    widMax: i16,
    leading: i16,
};

pub const QDRegionParseDirection = objc.SInt32;

pub const RegionToRectsProcPtr = objc.OSStatus;

pub const RegionToRectsUPP = RegionToRectsProcPtr;

pub const TruncCode = i16;

pub const DragConstraint = objc.UInt16;

pub const DragGrayRgnProcPtr = ?*const fn () callconv(.C) void;

pub const ColorSearchProcPtr = objc.Boolean;

pub const ColorComplementProcPtr = objc.Boolean;

pub const DragGrayRgnUPP = DragGrayRgnProcPtr;

pub const ColorSearchUPP = ColorSearchProcPtr;

pub const ColorComplementUPP = ColorComplementProcPtr;

pub const OpaqueWindowPtr = extern struct {};

pub const WindowPtr = OpaqueWindowPtr;

pub const OpaqueDialogPtr = extern struct {};

pub const DialogPtr = OpaqueDialogPtr;

pub const WindowRef = WindowPtr;

pub const VDGammaRecord = extern struct {
    csGTable: objc.Ptr,
};

pub const VDGamRecPtr = VDGammaRecord;

pub const MacPolygon = extern struct {
    polySize: i16,
    polyBBox: objc.Rect,
    polyPoints: objc.Point,
};

pub const Polygon = MacPolygon;

pub const PolyPtr = MacPolygon;

pub const PolyHandle = PolyPtr;

pub const GrafVerb = objc.SInt8;

pub const PrinterStatusOpcode = objc.SInt32;

pub const QDTextProcPtr = ?*const fn (
    i16,
    ?*const anyopaque,
    objc.Point,
    objc.Point,
) callconv(.C) void;

pub const QDLineProcPtr = ?*const fn (objc.Point) callconv(.C) void;

pub const QDRectProcPtr = ?*const fn (GrafVerb, ?*const objc.Rect) callconv(.C) void;

pub const QDRRectProcPtr = ?*const fn (
    GrafVerb,
    ?*const objc.Rect,
    i16,
    i16,
) callconv(.C) void;

pub const QDOvalProcPtr = ?*const fn (GrafVerb, ?*const objc.Rect) callconv(.C) void;

pub const QDArcProcPtr = ?*const fn (
    GrafVerb,
    ?*const objc.Rect,
    i16,
    i16,
) callconv(.C) void;

pub const QDPolyProcPtr = ?*const fn (GrafVerb, PolyHandle) callconv(.C) void;

pub const QDRgnProcPtr = ?*const fn (GrafVerb, RgnHandle) callconv(.C) void;

pub const QDBitsProcPtr = ?*const fn (
    ?*const BitMap,
    ?*const objc.Rect,
    ?*const objc.Rect,
    i16,
    RgnHandle,
) callconv(.C) void;

pub const QDCommentProcPtr = ?*const fn (i16, i16, objc.Handle) callconv(.C) void;

pub const QDTxMeasProcPtr = ?*const fn (
    i16,
    ?*const anyopaque,
    ?*objc.Point,
    ?*objc.Point,
    ?*FontInfo,
) callconv(.C) i16;

pub const QDGetPicProcPtr = ?*const fn (?*anyopaque, i16) callconv(.C) void;

pub const QDPutPicProcPtr = ?*const fn (?*const anyopaque, i16) callconv(.C) void;

pub const QDOpcodeProcPtr = ?*const fn (
    ?*const objc.Rect,
    ?*const objc.Rect,
    objc.UInt16,
    objc.SInt16,
) callconv(.C) void;

pub const QDStdGlyphsProcPtr = objc.OSStatus;

pub const QDJShieldCursorProcPtr = ?*const fn (
    i16,
    i16,
    i16,
    i16,
) callconv(.C) void;

pub const QDPrinterStatusProcPtr = objc.OSStatus;

pub const QDTextUPP = QDTextProcPtr;

pub const QDLineUPP = QDLineProcPtr;

pub const QDRectUPP = QDRectProcPtr;

pub const QDRRectUPP = QDRRectProcPtr;

pub const QDOvalUPP = QDOvalProcPtr;

pub const QDArcUPP = QDArcProcPtr;

pub const QDPolyUPP = QDPolyProcPtr;

pub const QDRgnUPP = QDRgnProcPtr;

pub const QDBitsUPP = QDBitsProcPtr;

pub const QDCommentUPP = QDCommentProcPtr;

pub const QDTxMeasUPP = QDTxMeasProcPtr;

pub const QDGetPicUPP = QDGetPicProcPtr;

pub const QDPutPicUPP = QDPutPicProcPtr;

pub const QDOpcodeUPP = QDOpcodeProcPtr;

pub const QDStdGlyphsUPP = QDStdGlyphsProcPtr;

pub const QDJShieldCursorUPP = QDJShieldCursorProcPtr;

pub const QDPrinterStatusUPP = QDPrinterStatusProcPtr;

pub const CQDProcs = extern struct {
    textProc: QDTextUPP,
    lineProc: QDLineUPP,
    rectProc: QDRectUPP,
    rRectProc: QDRRectUPP,
    ovalProc: QDOvalUPP,
    arcProc: QDArcUPP,
    polyProc: QDPolyUPP,
    rgnProc: QDRgnUPP,
    bitsProc: QDBitsUPP,
    commentProc: QDCommentUPP,
    txMeasProc: QDTxMeasUPP,
    getPicProc: QDGetPicUPP,
    putPicProc: QDPutPicUPP,
    opcodeProc: QDOpcodeUPP,
    newProc1: objc.UniversalProcPtr,
    glyphsProc: QDStdGlyphsUPP,
    printerStatusProc: QDPrinterStatusUPP,
    newProc4: objc.UniversalProcPtr,
    newProc5: objc.UniversalProcPtr,
    newProc6: objc.UniversalProcPtr,
};

pub const CQDProcsPtr = CQDProcs;

pub const GrafPort = extern struct {
    whatever: [87]i16,
};

pub const CGrafPort = GrafPort;

pub const __HIShape = extern struct {};

pub const HIShapeRef = __HIShape;

pub const HIMutableShapeRef = __HIShape;

pub const anon971 = u32;
pub const anon971_HIShapeParseFromTop: u32 = 0;
pub const anon971_HIShapeParseFromBottom: u32 = 1;
pub const anon971_HIShapeParseFromLeft: u32 = 0;
pub const anon971_HIShapeParseFromRight: u32 = 2;
pub const anon971_HIShapeParseFromTopLeft: u32 = 0;
pub const anon971_HIShapeParseFromBottomRight: u32 = 3;

pub const HIShapeEnumerateProcPtr = objc.OSStatus;

pub extern "ApplicationServices" fn HIShapeGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "ApplicationServices" fn HIShapeCreateEmpty() callconv(.C) HIShapeRef;

pub extern "ApplicationServices" fn HIShapeCreateWithQDRgn(inRgn: RgnHandle) callconv(.C) HIShapeRef;

pub extern "ApplicationServices" fn HIShapeCreateWithRect(inRect: ?*const core_foundation.CGRect) callconv(.C) HIShapeRef;

pub extern "ApplicationServices" fn HIShapeCreateCopy(inShape: HIShapeRef) callconv(.C) HIShapeRef;

pub extern "ApplicationServices" fn HIShapeCreateIntersection(inShape1: HIShapeRef, inShape2: HIShapeRef) callconv(.C) HIShapeRef;

pub extern "ApplicationServices" fn HIShapeCreateDifference(inShape1: HIShapeRef, inShape2: HIShapeRef) callconv(.C) HIShapeRef;

pub extern "ApplicationServices" fn HIShapeCreateUnion(inShape1: HIShapeRef, inShape2: HIShapeRef) callconv(.C) HIShapeRef;

pub extern "ApplicationServices" fn HIShapeCreateXor(inShape1: HIShapeRef, inShape2: HIShapeRef) callconv(.C) HIShapeRef;

pub extern "ApplicationServices" fn HIShapeIsEmpty(inShape: HIShapeRef) callconv(.C) objc.Boolean;

pub extern "ApplicationServices" fn HIShapeIsRectangular(inShape: HIShapeRef) callconv(.C) objc.Boolean;

pub extern "ApplicationServices" fn HIShapeContainsPoint(inShape: HIShapeRef, inPoint: ?*const core_foundation.CGPoint) callconv(.C) objc.Boolean;

pub extern "ApplicationServices" fn HIShapeIntersectsRect(inShape: HIShapeRef, inRect: ?*const core_foundation.CGRect) callconv(.C) objc.Boolean;

pub extern "ApplicationServices" fn HIShapeGetBounds(inShape: HIShapeRef, outRect: ?*core_foundation.CGRect) callconv(.C) ?*core_foundation.CGRect;

pub extern "ApplicationServices" fn HIShapeGetAsQDRgn(inShape: HIShapeRef, outRgn: RgnHandle) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn HIShapeReplacePathInCGContext(inShape: HIShapeRef, inContext: core_graphics.ContextRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn HIShapeEnumerate(
    inShape: HIShapeRef,
    inOptions: objc.OptionBits,
    inProc: HIShapeEnumerateProcPtr,
    inRefcon: ?*anyopaque,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn HIShapeCreateMutable() callconv(.C) HIMutableShapeRef;

pub extern "ApplicationServices" fn HIShapeCreateMutableCopy(inOrig: HIShapeRef) callconv(.C) HIMutableShapeRef;

pub extern "ApplicationServices" fn HIShapeCreateMutableWithRect(inRect: ?*const core_foundation.CGRect) callconv(.C) HIMutableShapeRef;

pub extern "ApplicationServices" fn HIShapeSetEmpty(inShape: HIMutableShapeRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn HIShapeSetWithShape(inDestShape: HIMutableShapeRef, inSrcShape: HIShapeRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn HIShapeIntersect(inShape1: HIShapeRef, inShape2: HIShapeRef, outResult: HIMutableShapeRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn HIShapeDifference(inShape1: HIShapeRef, inShape2: HIShapeRef, outResult: HIMutableShapeRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn HIShapeUnion(inShape1: HIShapeRef, inShape2: HIShapeRef, outResult: HIMutableShapeRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn HIShapeXor(inShape1: HIShapeRef, inShape2: HIShapeRef, outResult: HIMutableShapeRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn HIShapeOffset(inShape: HIMutableShapeRef, inDX: core_foundation.CGFloat, inDY: core_foundation.CGFloat) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn HIShapeInset(inShape: HIMutableShapeRef, inDX: core_foundation.CGFloat, inDY: core_foundation.CGFloat) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn HIShapeUnionWithRect(inShape: HIMutableShapeRef, inRect: ?*const core_foundation.CGRect) callconv(.C) objc.OSStatus;

pub const IconAlignmentType = objc.SInt16;

pub const IconTransformType = objc.SInt16;

pub const IconSelectorValue = objc.UInt32;

pub const IconActionProcPtr = objc.OSErr;

pub const IconGetterProcPtr = objc.Handle;

pub const IconActionUPP = IconActionProcPtr;

pub const IconGetterUPP = IconGetterProcPtr;

pub extern "ApplicationServices" fn NewIconActionUPP(userRoutine: IconActionProcPtr) callconv(.C) IconActionUPP;

pub extern "ApplicationServices" fn NewIconGetterUPP(userRoutine: IconGetterProcPtr) callconv(.C) IconGetterUPP;

pub extern "ApplicationServices" fn DisposeIconActionUPP(userUPP: IconActionUPP) callconv(.C) void;

pub extern "ApplicationServices" fn DisposeIconGetterUPP(userUPP: IconGetterUPP) callconv(.C) void;

pub extern "ApplicationServices" fn InvokeIconActionUPP(
    theType: objc.ResType,
    theIcon: ?*objc.Handle,
    yourDataPtr: ?*anyopaque,
    userUPP: IconActionUPP,
) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn InvokeIconGetterUPP(theType: objc.ResType, yourDataPtr: ?*anyopaque, userUPP: IconGetterUPP) callconv(.C) objc.Handle;

pub const PlotIconRefFlags = objc.UInt32;

pub extern "ApplicationServices" fn IconRefToIconFamily(theIconRef: core_services.IconRef, whichIcons: IconSelectorValue, iconFamily: ?*core_services.IconFamilyHandle) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn SetIconFamilyData(iconFamily: core_services.IconFamilyHandle, iconType: objc.OSType, h: objc.Handle) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn GetIconFamilyData(iconFamily: core_services.IconFamilyHandle, iconType: objc.OSType, h: objc.Handle) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn PlotIconRefInContext(
    inContext: core_graphics.ContextRef,
    inRect: ?*const core_foundation.CGRect,
    inAlign: IconAlignmentType,
    inTransform: IconTransformType,
    inLabelColor: ?*const RGBColor,
    inFlags: PlotIconRefFlags,
    inIconRef: core_services.IconRef,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn IconRefContainsCGPoint(
    testPt: ?*const core_foundation.CGPoint,
    iconRect: ?*const core_foundation.CGRect,
    @"align": IconAlignmentType,
    iconServicesUsageFlags: core_services.IconServicesUsageFlags,
    theIconRef: core_services.IconRef,
) callconv(.C) objc.Boolean;

pub extern "ApplicationServices" fn IconRefIntersectsCGRect(
    testRect: ?*const core_foundation.CGRect,
    iconRect: ?*const core_foundation.CGRect,
    @"align": IconAlignmentType,
    iconServicesUsageFlags: core_services.IconServicesUsageFlags,
    theIconRef: core_services.IconRef,
) callconv(.C) objc.Boolean;

pub extern "ApplicationServices" fn IconRefToHIShape(
    iconRect: ?*const core_foundation.CGRect,
    @"align": IconAlignmentType,
    iconServicesUsageFlags: core_services.IconServicesUsageFlags,
    theIconRef: core_services.IconRef,
) callconv(.C) HIShapeRef;

pub extern "ApplicationServices" fn IsIconRefMaskEmpty(iconRef: core_services.IconRef) callconv(.C) objc.Boolean;

pub extern "ApplicationServices" fn GetIconRefVariant(inIconRef: core_services.IconRef, inVariant: objc.OSType, outTransform: ?*IconTransformType) callconv(.C) core_services.IconRef;

pub const anon921 = u32;
pub const anon921_ICComponentInterfaceVersion0: u32 = 0;
pub const anon921_ICComponentInterfaceVersion1: u32 = 65536;
pub const anon921_ICComponentInterfaceVersion2: u32 = 131072;
pub const anon921_ICComponentInterfaceVersion3: u32 = 196608;
pub const anon921_ICComponentInterfaceVersion4: u32 = 262144;
pub const anon921_ICComponentInterfaceVersion: u32 = 262144;

pub const OpaqueICInstance = extern struct {};

pub const ICInstance = OpaqueICInstance;

pub const ICAttr = objc.UInt32;

pub const ICPerm = objc.UInt8;

pub const ICProfileID = objc.SInt32;

pub const ICProfileIDPtr = ICProfileID;

pub const ICFontRecord = extern struct {
    size: objc.SInt16,
    face: objc.Style,
    pad: c_char,
    font: objc.Str255,
};

pub const ICFontRecordPtr = ICFontRecord;

pub const ICFontRecordHandle = ICFontRecordPtr;

pub const ICCharTable = extern struct {
    netToMac: [256]u8,
    macToNet: [256]u8,
};

pub const ICCharTablePtr = ICCharTable;

pub const ICCharTableHandle = ICCharTablePtr;

pub const ICAppSpec = extern struct {
    fCreator: objc.OSType,
    name: objc.Str63,
};

pub const ICAppSpecPtr = ICAppSpec;

pub const ICAppSpecHandle = ICAppSpecPtr;

pub const ICAppSpecList = extern struct {
    numberOfItems: objc.SInt16,
    appSpecs: ICAppSpec,
};

pub const ICAppSpecListPtr = ICAppSpecList;

pub const ICAppSpecListHandle = ICAppSpecListPtr;

pub const ICFileSpec = extern struct {
    volName: objc.Str31,
    volCreationDate: objc.SInt32,
    fss: core_services.FSSpec,
    alias: core_services.AliasRecord,
};

pub const ICFileSpecPtr = ICFileSpec;

pub const ICFileSpecHandle = ICFileSpecPtr;

pub const ICMapEntryFlags = objc.SInt32;

pub const ICFixedLength = objc.SInt16;

pub const ICMapEntry = extern struct {
    totalLength: objc.SInt16,
    fixedLength: ICFixedLength,
    version: objc.SInt16,
    fileType: objc.OSType,
    fileCreator: objc.OSType,
    postCreator: objc.OSType,
    flags: ICMapEntryFlags,
    extension: objc.Str255,
    creatorAppName: objc.Str255,
    postAppName: objc.Str255,
    MIMEType: objc.Str255,
    entryName: objc.Str255,
};

pub const ICMapEntryPtr = ICMapEntry;

pub const ICMapEntryHandle = ICMapEntryPtr;

pub const ICServiceEntryFlags = objc.SInt16;

pub const ICServiceEntry = extern struct {
    name: objc.Str255,
    port: objc.SInt16,
    flags: ICServiceEntryFlags,
};

pub const ICServiceEntryPtr = ICServiceEntry;

pub const ICServiceEntryHandle = ICServiceEntryPtr;

pub const ICServices = extern struct {
    count: objc.SInt16,
    services: ICServiceEntry,
};

pub const ICServicesPtr = ICServices;

pub const ICServicesHandle = ICServicesPtr;

pub extern "ApplicationServices" fn ICStart(inst: ?*ICInstance, signature: objc.OSType) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICStop(inst: ICInstance) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICGetVersion(inst: ICInstance, whichVersion: i64, version: ?*objc.UInt32) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICGetConfigName(inst: ICInstance, longname: objc.Boolean, name: objc.Str255) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICGetSeed(inst: ICInstance, seed: ?*i64) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICGetPerm(inst: ICInstance, perm: ?*ICPerm) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICBegin(inst: ICInstance, perm: ICPerm) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICGetPref(
    inst: ICInstance,
    key: objc.ConstStr255Param,
    attr: ?*ICAttr,
    buf: ?*anyopaque,
    size: ?*i64,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICSetPref(
    inst: ICInstance,
    key: objc.ConstStr255Param,
    attr: ICAttr,
    buf: ?*const anyopaque,
    size: i64,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICFindPrefHandle(
    inst: ICInstance,
    key: objc.ConstStr255Param,
    attr: ?*ICAttr,
    prefh: objc.Handle,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICGetPrefHandle(
    inst: ICInstance,
    key: objc.ConstStr255Param,
    attr: ?*ICAttr,
    prefh: ?*objc.Handle,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICSetPrefHandle(
    inst: ICInstance,
    key: objc.ConstStr255Param,
    attr: ICAttr,
    prefh: objc.Handle,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICCountPref(inst: ICInstance, count: ?*i64) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICGetIndPref(inst: ICInstance, index: i64, key: objc.Str255) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICDeletePref(inst: ICInstance, key: objc.ConstStr255Param) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICEnd(inst: ICInstance) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICGetDefaultPref(inst: ICInstance, key: objc.ConstStr255Param, prefH: objc.Handle) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICEditPreferences(inst: ICInstance, key: objc.ConstStr255Param) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICLaunchURL(
    inst: ICInstance,
    hint: objc.ConstStr255Param,
    data: ?*const anyopaque,
    len: i64,
    selStart: ?*i64,
    selEnd: ?*i64,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICParseURL(
    inst: ICInstance,
    hint: objc.ConstStr255Param,
    data: ?*const anyopaque,
    len: i64,
    selStart: ?*i64,
    selEnd: ?*i64,
    url: objc.Handle,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICCreateGURLEvent(
    inst: ICInstance,
    helperCreator: objc.OSType,
    urlH: objc.Handle,
    theEvent: ?*core_services.AppleEvent,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICSendGURLEvent(inst: ICInstance, theEvent: ?*core_services.AppleEvent) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICMapFilename(inst: ICInstance, filename: objc.ConstStr255Param, entry: ?*ICMapEntry) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICMapTypeCreator(
    inst: ICInstance,
    fType: objc.OSType,
    fCreator: objc.OSType,
    filename: objc.ConstStr255Param,
    entry: ?*ICMapEntry,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICMapEntriesFilename(
    inst: ICInstance,
    entries: objc.Handle,
    filename: objc.ConstStr255Param,
    entry: ?*ICMapEntry,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICMapEntriesTypeCreator(
    inst: ICInstance,
    entries: objc.Handle,
    fType: objc.OSType,
    fCreator: objc.OSType,
    filename: objc.ConstStr255Param,
    entry: ?*ICMapEntry,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICCountMapEntries(inst: ICInstance, entries: objc.Handle, count: ?*i64) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICGetIndMapEntry(
    inst: ICInstance,
    entries: objc.Handle,
    index: i64,
    pos: ?*i64,
    entry: ?*ICMapEntry,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICGetMapEntry(
    inst: ICInstance,
    entries: objc.Handle,
    pos: i64,
    entry: ?*ICMapEntry,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICSetMapEntry(
    inst: ICInstance,
    entries: objc.Handle,
    pos: i64,
    entry: ?*const ICMapEntry,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICDeleteMapEntry(inst: ICInstance, entries: objc.Handle, pos: i64) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICAddMapEntry(inst: ICInstance, entries: objc.Handle, entry: ?*const ICMapEntry) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICGetCurrentProfile(inst: ICInstance, currentID: ?*ICProfileID) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICSetCurrentProfile(inst: ICInstance, newID: ICProfileID) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICCountProfiles(inst: ICInstance, count: ?*i64) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICGetIndProfile(inst: ICInstance, index: i64, thisID: ?*ICProfileID) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICGetProfileName(inst: ICInstance, thisID: ICProfileID, name: objc.Str255) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICSetProfileName(inst: ICInstance, thisID: ICProfileID, name: objc.ConstStr255Param) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICAddProfile(inst: ICInstance, prototypeID: ICProfileID, newID: ?*ICProfileID) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn ICDeleteProfile(inst: ICInstance, thisID: ICProfileID) callconv(.C) objc.OSStatus;

pub const LaunchFlags = objc.UInt16;

pub const AppParameters = extern struct {
    pub const anon573 = extern struct {
        what: objc.UInt16,
        message: objc.UInt32,
        when: objc.UInt32,
        where: objc.Point,
        modifiers: objc.UInt16,
    };

    theMsgEvent: AppParameters.anon573,
    eventRefCon: objc.UInt32,
    messageLength: objc.UInt32,
};

pub const AppParametersPtr = AppParameters;

pub const LaunchParamBlockRec = extern struct {
    reserved1: objc.UInt32,
    reserved2: objc.UInt16,
    launchBlockID: objc.UInt16,
    launchEPBLength: objc.UInt32,
    launchFileFlags: objc.UInt16,
    launchControlFlags: LaunchFlags,
    launchAppRef: core_services.FSRefPtr,
    launchProcessSN: objc.ProcessSerialNumber,
    launchPreferredSize: objc.UInt32,
    launchMinimumSize: objc.UInt32,
    launchAvailableSize: objc.UInt32,
    launchAppParameters: AppParametersPtr,
};

pub const LaunchPBPtr = LaunchParamBlockRec;

pub const ProcessApplicationTransformState = objc.UInt32;

pub const ProcessInfoRec = extern struct {
    processInfoLength: objc.UInt32,
    processName: objc.StringPtr,
    processNumber: objc.ProcessSerialNumber,
    processType: objc.UInt32,
    processSignature: objc.OSType,
    processMode: objc.UInt32,
    processLocation: objc.Ptr,
    processSize: objc.UInt32,
    processFreeMem: objc.UInt32,
    processLauncher: objc.ProcessSerialNumber,
    processLaunchDate: objc.UInt32,
    processActiveTime: objc.UInt32,
    processAppRef: core_services.FSRefPtr,
};

pub const ProcessInfoRecPtr = ProcessInfoRec;

pub const ProcessInfoExtendedRec = extern struct {
    processInfoLength: objc.UInt32,
    processName: objc.StringPtr,
    processNumber: objc.ProcessSerialNumber,
    processType: objc.UInt32,
    processSignature: objc.OSType,
    processMode: objc.UInt32,
    processLocation: objc.Ptr,
    processSize: objc.UInt32,
    processFreeMem: objc.UInt32,
    processLauncher: objc.ProcessSerialNumber,
    processLaunchDate: objc.UInt32,
    processActiveTime: objc.UInt32,
    processAppRef: core_services.FSRefPtr,
    processTempMemTotal: objc.UInt32,
    processPurgeableTempMemTotal: objc.UInt32,
};

pub const ProcessInfoExtendedRecPtr = ProcessInfoExtendedRec;

pub const SizeResourceRec = extern struct {
    flags: objc.UInt16,
    preferredHeapSize: objc.UInt32,
    minimumHeapSize: objc.UInt32,
};

pub const SizeResourceRecPtr = SizeResourceRec;

pub const SizeResourceRecHandle = SizeResourceRecPtr;

pub extern "ApplicationServices" fn LaunchApplication(LaunchParams: LaunchPBPtr) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn GetCurrentProcess(pPSN: ?*objc.ProcessSerialNumber) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn GetFrontProcess(pPSN: ?*objc.ProcessSerialNumber) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn GetNextProcess(pPSN: ?*objc.ProcessSerialNumber) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn GetProcessInformation(PSN: ?*const objc.ProcessSerialNumber, info: ?*ProcessInfoRec) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn ProcessInformationCopyDictionary(PSN: ?*const objc.ProcessSerialNumber, infoToReturn: objc.UInt32) callconv(.C) core_foundation.DictionaryRef;

pub extern "ApplicationServices" fn SetFrontProcess(pPSN: ?*const objc.ProcessSerialNumber) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn SetFrontProcessWithOptions(inProcess: ?*const objc.ProcessSerialNumber, inOptions: objc.OptionBits) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn WakeUpProcess(PSN: ?*const objc.ProcessSerialNumber) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn SameProcess(PSN1: ?*const objc.ProcessSerialNumber, PSN2: ?*const objc.ProcessSerialNumber, result: ?*objc.Boolean) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn ExitToShell() callconv(.C) void;

pub extern "ApplicationServices" fn KillProcess(inProcess: ?*const objc.ProcessSerialNumber) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn GetProcessBundleLocation(psn: ?*const objc.ProcessSerialNumber, location: ?*core_services.FSRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn CopyProcessName(psn: ?*const objc.ProcessSerialNumber, name: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn GetProcessPID(psn: ?*const objc.ProcessSerialNumber, pid: ?*objc.pid_t) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn GetProcessForPID(pid: objc.pid_t, psn: ?*objc.ProcessSerialNumber) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn IsProcessVisible(psn: ?*const objc.ProcessSerialNumber) callconv(.C) objc.Boolean;

pub extern "ApplicationServices" fn ShowHideProcess(psn: ?*const objc.ProcessSerialNumber, visible: objc.Boolean) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn TransformProcessType(psn: ?*const objc.ProcessSerialNumber, transformState: ProcessApplicationTransformState) callconv(.C) objc.OSStatus;

pub const anon8941 = i32;
pub const anon8941_cdevGenErr: i32 = -1;
pub const anon8941_cdevMemErr: i32 = 0;
pub const anon8941_cdevResErr: i32 = 1;
pub const anon8941_cdevUnset: i32 = 3;

pub const OpaquePasteboardRef = extern struct {};

pub const PasteboardRef = OpaquePasteboardRef;

pub const PasteboardItemID = ?*anyopaque;

pub const PasteboardSyncFlags = objc.OptionBits;
pub const PasteboardSyncFlags_Modified: objc.OptionBits = 1;
pub const PasteboardSyncFlags_ClientIsOwner: objc.OptionBits = 2;

pub const PasteboardFlavorFlags = objc.OptionBits;
pub const PasteboardFlavorFlags_NoFlags: objc.OptionBits = 0;
pub const PasteboardFlavorFlags_SenderOnly: objc.OptionBits = 1;
pub const PasteboardFlavorFlags_SenderTranslated: objc.OptionBits = 2;
pub const PasteboardFlavorFlags_NotSaved: objc.OptionBits = 4;
pub const PasteboardFlavorFlags_RequestOnly: objc.OptionBits = 8;
pub const PasteboardFlavorFlags_SystemTranslated: objc.OptionBits = 256;
pub const PasteboardFlavorFlags_Promised: objc.OptionBits = 512;

pub const PasteboardStandardLocation = objc.OSType;
pub const PasteboardStandardLocation_Trash: objc.OSType = 1953657704;
pub const PasteboardStandardLocation_Unknown: objc.OSType = 1970170734;

pub extern "ApplicationServices" fn PasteboardGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "ApplicationServices" fn PasteboardCreate(inName: core_foundation.StringRef, outPasteboard: ?*PasteboardRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PasteboardSynchronize(inPasteboard: PasteboardRef) callconv(.C) PasteboardSyncFlags;

pub extern "ApplicationServices" fn PasteboardClear(inPasteboard: PasteboardRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PasteboardCopyName(inPasteboard: PasteboardRef, outName: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PasteboardGetItemCount(inPasteboard: PasteboardRef, outItemCount: ?*objc.ItemCount) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PasteboardGetItemIdentifier(inPasteboard: PasteboardRef, inIndex: core_foundation.Index, outItem: ?*PasteboardItemID) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PasteboardCopyItemFlavors(inPasteboard: PasteboardRef, inItem: PasteboardItemID, outFlavorTypes: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PasteboardGetItemFlavorFlags(
    inPasteboard: PasteboardRef,
    inItem: PasteboardItemID,
    inFlavorType: core_foundation.StringRef,
    outFlags: ?*PasteboardFlavorFlags,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PasteboardCopyItemFlavorData(
    inPasteboard: PasteboardRef,
    inItem: PasteboardItemID,
    inFlavorType: core_foundation.StringRef,
    outData: ?*core_foundation.DataRef,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PasteboardPutItemFlavor(
    inPasteboard: PasteboardRef,
    inItem: PasteboardItemID,
    inFlavorType: core_foundation.StringRef,
    inData: core_foundation.DataRef,
    inFlags: PasteboardFlavorFlags,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PasteboardCopyPasteLocation(inPasteboard: PasteboardRef, outPasteLocation: ?*core_foundation.URLRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PasteboardSetPasteLocation(inPasteboard: PasteboardRef, inPasteLocation: core_foundation.URLRef) callconv(.C) objc.OSStatus;

pub const PasteboardPromiseKeeperProcPtr = objc.OSStatus;

pub extern "ApplicationServices" fn PasteboardSetPromiseKeeper(inPasteboard: PasteboardRef, inPromiseKeeper: PasteboardPromiseKeeperProcPtr, inContext: ?*anyopaque) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PasteboardResolvePromises(inPasteboard: PasteboardRef) callconv(.C) objc.OSStatus;

pub const OpaqueTranslationRef = extern struct {};

pub const TranslationRef = OpaqueTranslationRef;

pub const TranslationFlags = objc.OptionBits;

pub const anon1421 = u32;
pub const anon1421_TranslationDataTranslation: u32 = 1;
pub const anon1421_TranslationFileTranslation: u32 = 2;

pub extern "ApplicationServices" fn TranslationGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "ApplicationServices" fn TranslationCreate(
    inSourceType: core_foundation.StringRef,
    inDestinationType: core_foundation.StringRef,
    inTranslationFlags: TranslationFlags,
    outTranslation: ?*TranslationRef,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn TranslationCreateWithSourceArray(
    inSourceTypes: core_foundation.ArrayRef,
    inTranslationFlags: TranslationFlags,
    outDestinationTypes: ?*core_foundation.ArrayRef,
    outTranslations: ?*core_foundation.DictionaryRef,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn TranslationPerformForData(inTranslation: TranslationRef, inSourceData: core_foundation.DataRef, outDestinationData: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn TranslationPerformForFile(
    inTranslation: TranslationRef,
    inSourceFile: ?*const core_services.FSRef,
    inDestinationDirectory: ?*const core_services.FSRef,
    inDestinationName: core_foundation.StringRef,
    outTranslatedFile: ?*core_services.FSRef,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn TranslationPerformForURL(
    inTranslation: TranslationRef,
    inSourceURL: core_foundation.URLRef,
    inDestinationURL: core_foundation.URLRef,
    outTranslatedURL: ?*core_foundation.URLRef,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn TranslationCopySourceType(inTranslation: TranslationRef, outSourceType: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn TranslationCopyDestinationType(inTranslation: TranslationRef, outDestinationType: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn TranslationGetTranslationFlags(inTranslation: TranslationRef, outTranslationFlags: ?*TranslationFlags) callconv(.C) objc.OSStatus;

pub const AXError = objc.SInt32;
pub const AXError_Success: objc.SInt32 = 0;
pub const AXError_Failure: objc.SInt32 = -25200;
pub const AXError_IllegalArgument: objc.SInt32 = -25201;
pub const AXError_InvalidUIElement: objc.SInt32 = -25202;
pub const AXError_InvalidUIElementObserver: objc.SInt32 = -25203;
pub const AXError_CannotComplete: objc.SInt32 = -25204;
pub const AXError_AttributeUnsupported: objc.SInt32 = -25205;
pub const AXError_ActionUnsupported: objc.SInt32 = -25206;
pub const AXError_NotificationUnsupported: objc.SInt32 = -25207;
pub const AXError_NotImplemented: objc.SInt32 = -25208;
pub const AXError_NotificationAlreadyRegistered: objc.SInt32 = -25209;
pub const AXError_NotificationNotRegistered: objc.SInt32 = -25210;
pub const AXError_APIDisabled: objc.SInt32 = -25211;
pub const AXError_NoValue: objc.SInt32 = -25212;
pub const AXError_ParameterizedAttributeUnsupported: objc.SInt32 = -25213;
pub const AXError_NotEnoughPrecision: objc.SInt32 = -25214;

pub const AXMenuItemModifiers = objc.UInt32;
pub const AXMenuItemModifiers_None: objc.UInt32 = 0;
pub const AXMenuItemModifiers_Shift: objc.UInt32 = 1;
pub const AXMenuItemModifiers_Option: objc.UInt32 = 2;
pub const AXMenuItemModifiers_Control: objc.UInt32 = 4;
pub const AXMenuItemModifiers_NoCommand: objc.UInt32 = 8;

pub const AXPriority = core_foundation.Index;
pub const AXPriority_Low: core_foundation.Index = 10;
pub const AXPriority_Medium: core_foundation.Index = 50;
pub const AXPriority_High: core_foundation.Index = 90;

pub extern "ApplicationServices" fn AXAPIEnabled() callconv(.C) objc.Boolean;

pub extern "ApplicationServices" fn AXIsProcessTrustedWithOptions(options: core_foundation.DictionaryRef) callconv(.C) objc.Boolean;

pub extern "ApplicationServices" fn AXIsProcessTrusted() callconv(.C) objc.Boolean;

pub extern "ApplicationServices" fn AXMakeProcessTrusted(executablePath: core_foundation.StringRef) callconv(.C) AXError;

pub const __AXUIElement = extern struct {};

pub const AXUIElementRef = __AXUIElement;

pub const AXCopyMultipleAttributeOptions = objc.UInt32;
pub const AXCopyMultipleAttributeOptions_StopOnError: objc.UInt32 = 1;

pub extern "ApplicationServices" fn AXUIElementGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "ApplicationServices" fn AXUIElementCopyAttributeNames(element: AXUIElementRef, names: ?*core_foundation.ArrayRef) callconv(.C) AXError;

pub extern "ApplicationServices" fn AXUIElementCopyAttributeValue(element: AXUIElementRef, attribute: core_foundation.StringRef, value: ?*core_foundation.TypeRef) callconv(.C) AXError;

pub extern "ApplicationServices" fn AXUIElementGetAttributeValueCount(element: AXUIElementRef, attribute: core_foundation.StringRef, count: ?*core_foundation.Index) callconv(.C) AXError;

pub extern "ApplicationServices" fn AXUIElementCopyAttributeValues(
    element: AXUIElementRef,
    attribute: core_foundation.StringRef,
    index: core_foundation.Index,
    maxValues: core_foundation.Index,
    values: ?*core_foundation.ArrayRef,
) callconv(.C) AXError;

pub extern "ApplicationServices" fn AXUIElementIsAttributeSettable(element: AXUIElementRef, attribute: core_foundation.StringRef, settable: ?*objc.Boolean) callconv(.C) AXError;

pub extern "ApplicationServices" fn AXUIElementSetAttributeValue(element: AXUIElementRef, attribute: core_foundation.StringRef, value: core_foundation.TypeRef) callconv(.C) AXError;

pub extern "ApplicationServices" fn AXUIElementCopyMultipleAttributeValues(
    element: AXUIElementRef,
    attributes: core_foundation.ArrayRef,
    options: AXCopyMultipleAttributeOptions,
    values: ?*core_foundation.ArrayRef,
) callconv(.C) AXError;

pub extern "ApplicationServices" fn AXUIElementCopyParameterizedAttributeNames(element: AXUIElementRef, names: ?*core_foundation.ArrayRef) callconv(.C) AXError;

pub extern "ApplicationServices" fn AXUIElementCopyParameterizedAttributeValue(
    element: AXUIElementRef,
    parameterizedAttribute: core_foundation.StringRef,
    parameter: core_foundation.TypeRef,
    result: ?*core_foundation.TypeRef,
) callconv(.C) AXError;

pub extern "ApplicationServices" fn AXUIElementCopyActionNames(element: AXUIElementRef, names: ?*core_foundation.ArrayRef) callconv(.C) AXError;

pub extern "ApplicationServices" fn AXUIElementCopyActionDescription(element: AXUIElementRef, action: core_foundation.StringRef, description: ?*core_foundation.StringRef) callconv(.C) AXError;

pub extern "ApplicationServices" fn AXUIElementPerformAction(element: AXUIElementRef, action: core_foundation.StringRef) callconv(.C) AXError;

pub extern "ApplicationServices" fn AXUIElementCopyElementAtPosition(
    application: AXUIElementRef,
    x: f32,
    y: f32,
    element: ?*AXUIElementRef,
) callconv(.C) AXError;

pub extern "ApplicationServices" fn AXUIElementCreateApplication(pid: objc.pid_t) callconv(.C) AXUIElementRef;

pub extern "ApplicationServices" fn AXUIElementCreateSystemWide() callconv(.C) AXUIElementRef;

pub extern "ApplicationServices" fn AXUIElementGetPid(element: AXUIElementRef, pid: ?*objc.pid_t) callconv(.C) AXError;

pub extern "ApplicationServices" fn AXUIElementSetMessagingTimeout(element: AXUIElementRef, timeoutInSeconds: f32) callconv(.C) AXError;

pub extern "ApplicationServices" fn AXUIElementPostKeyboardEvent(
    application: AXUIElementRef,
    keyChar: core_graphics.CharCode,
    virtualKey: core_graphics.KeyCode,
    keyDown: objc.Boolean,
) callconv(.C) AXError;

pub const __AXTextMarker = extern struct {};

pub const AXTextMarkerRef = __AXTextMarker;

pub extern "ApplicationServices" fn AXTextMarkerGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "ApplicationServices" fn AXTextMarkerCreate(allocator: core_foundation.AllocatorRef, bytes: ?*const objc.UInt8, length: core_foundation.Index) callconv(.C) AXTextMarkerRef;

pub extern "ApplicationServices" fn AXTextMarkerGetLength(marker: AXTextMarkerRef) callconv(.C) core_foundation.Index;

pub extern "ApplicationServices" fn AXTextMarkerGetBytePtr(theTextMarker: AXTextMarkerRef) callconv(.C) ?*const objc.UInt8;

pub const __AXTextMarkerRange = extern struct {};

pub const AXTextMarkerRangeRef = __AXTextMarkerRange;

pub extern "ApplicationServices" fn AXTextMarkerRangeGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "ApplicationServices" fn AXTextMarkerRangeCreate(allocator: core_foundation.AllocatorRef, startMarker: AXTextMarkerRef, endMarker: AXTextMarkerRef) callconv(.C) AXTextMarkerRangeRef;

pub extern "ApplicationServices" fn AXTextMarkerRangeCreateWithBytes(
    allocator: core_foundation.AllocatorRef,
    startMarkerBytes: ?*const objc.UInt8,
    startMarkerLength: core_foundation.Index,
    endMarkerBytes: ?*const objc.UInt8,
    endMarkerLength: core_foundation.Index,
) callconv(.C) AXTextMarkerRangeRef;

pub extern "ApplicationServices" fn AXTextMarkerRangeCopyStartMarker(textMarkerRange: AXTextMarkerRangeRef) callconv(.C) AXTextMarkerRef;

pub extern "ApplicationServices" fn AXTextMarkerRangeCopyEndMarker(textMarkerRange: AXTextMarkerRangeRef) callconv(.C) AXTextMarkerRef;

pub const __AXObserver = extern struct {};

pub const AXObserverRef = __AXObserver;

pub const AXObserverCallback = ?*const fn (
    AXObserverRef,
    AXUIElementRef,
    core_foundation.StringRef,
    ?*anyopaque,
) callconv(.C) void;

pub const AXObserverCallbackWithInfo = ?*const fn (
    AXObserverRef,
    AXUIElementRef,
    core_foundation.StringRef,
    core_foundation.DictionaryRef,
    ?*anyopaque,
) callconv(.C) void;

pub extern "ApplicationServices" fn AXObserverGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "ApplicationServices" fn AXObserverCreate(application: objc.pid_t, callback: AXObserverCallback, outObserver: ?*AXObserverRef) callconv(.C) AXError;

pub extern "ApplicationServices" fn AXObserverCreateWithInfoCallback(application: objc.pid_t, callback: AXObserverCallbackWithInfo, outObserver: ?*AXObserverRef) callconv(.C) AXError;

pub extern "ApplicationServices" fn AXObserverAddNotification(
    observer: AXObserverRef,
    element: AXUIElementRef,
    notification: core_foundation.StringRef,
    refcon: ?*anyopaque,
) callconv(.C) AXError;

pub extern "ApplicationServices" fn AXObserverRemoveNotification(observer: AXObserverRef, element: AXUIElementRef, notification: core_foundation.StringRef) callconv(.C) AXError;

pub extern "ApplicationServices" fn AXObserverGetRunLoopSource(observer: AXObserverRef) callconv(.C) core_foundation.RunLoopSourceRef;

pub const AXValueType = objc.UInt32;
pub const AXValueType_CGPoint: objc.UInt32 = 1;
pub const AXValueType_CGSize: objc.UInt32 = 2;
pub const AXValueType_CGRect: objc.UInt32 = 3;
pub const AXValueType_CFRange: objc.UInt32 = 4;
pub const AXValueType_AXError: objc.UInt32 = 5;
pub const AXValueType_Illegal: objc.UInt32 = 0;

pub const __AXValue = extern struct {};

pub const AXValueRef = __AXValue;

pub extern "ApplicationServices" fn AXValueGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "ApplicationServices" fn AXValueCreate(theType: AXValueType, valuePtr: ?*const anyopaque) callconv(.C) AXValueRef;

pub extern "ApplicationServices" fn AXValueGetType(value: AXValueRef) callconv(.C) AXValueType;

pub extern "ApplicationServices" fn AXValueGetValue(value: AXValueRef, theType: AXValueType, valuePtr: ?*anyopaque) callconv(.C) objc.Boolean;

pub const AXUnderlineStyle = objc.UInt32;
pub const AXUnderlineStyle_None: objc.UInt32 = 0;
pub const AXUnderlineStyle_Single: objc.UInt32 = 1;
pub const AXUnderlineStyle_Thick: objc.UInt32 = 2;
pub const AXUnderlineStyle_Double: objc.UInt32 = 9;

pub const UAZoomChangeFocusType = objc.UInt32;

pub extern "ApplicationServices" fn UAZoomEnabled() callconv(.C) objc.Boolean;

pub extern "ApplicationServices" fn UAZoomChangeFocus(inRect: ?*const core_foundation.CGRect, inHighlightRect: ?*const core_foundation.CGRect, inType: UAZoomChangeFocusType) callconv(.C) objc.OSStatus;

pub const PMObject = ?*const anyopaque;

pub const OpaquePMPrintSettings = extern struct {};

pub const PMPrintSettings = OpaquePMPrintSettings;

pub const OpaquePMPageFormat = extern struct {};

pub const PMPageFormat = OpaquePMPageFormat;

pub const OpaquePMPrintSession = extern struct {};

pub const PMPrintSession = OpaquePMPrintSession;

pub const OpaquePMPrinter = extern struct {};

pub const PMPrinter = OpaquePMPrinter;

pub const OpaquePMServer = extern struct {};

pub const PMServer = OpaquePMServer;

pub const OpaquePMPreset = extern struct {};

pub const PMPreset = OpaquePMPreset;

pub const OpaquePMPaper = extern struct {};

pub const PMPaper = OpaquePMPaper;

pub const PMDestinationType = objc.UInt16;

pub const PMOrientation = objc.UInt16;

pub const PMPrinterState = objc.UInt16;

pub const PMColorSpaceModel = objc.UInt32;

pub const PMQualityMode = objc.UInt32;

pub const PMPaperType = objc.UInt32;

pub const PMScalingAlignment = objc.UInt16;

pub const PMDuplexMode = objc.UInt32;

pub const PMLayoutDirection = objc.UInt16;

pub const PMBorderType = objc.UInt16;

pub const PMPrintDialogOptionFlags = objc.OptionBits;

pub const PMPPDDomain = objc.UInt16;

pub const anon1781 = u32;
pub const anon1781_AllPPDDomains: u32 = 1;
pub const anon1781_SystemPPDDomain: u32 = 2;
pub const anon1781_LocalPPDDomain: u32 = 3;
pub const anon1781_NetworkPPDDomain: u32 = 4;
pub const anon1781_UserPPDDomain: u32 = 5;
pub const anon1781_CUPSPPDDomain: u32 = 6;

pub const anon2071 = i32;
pub const anon2071_PMNoError: i32 = 0;
pub const anon2071_PMGeneralError: i32 = -30870;
pub const anon2071_PMOutOfScope: i32 = -30871;
pub const anon2071_PMInvalidParameter: i32 = -50;
pub const anon2071_PMNoDefaultPrinter: i32 = -30872;
pub const anon2071_PMNotImplemented: i32 = -30873;
pub const anon2071_PMNoSuchEntry: i32 = -30874;
pub const anon2071_PMInvalidPrintSettings: i32 = -30875;
pub const anon2071_PMInvalidPageFormat: i32 = -30876;
pub const anon2071_PMValueOutOfRange: i32 = -30877;

pub const anon2281 = i32;
pub const anon2281_PMPrintAllPages: i32 = -1;

pub const anon2321 = u32;
pub const anon2321_PMUnlocked: u32 = 0;

pub const PMRect = extern struct {
    top: f64,
    left: f64,
    bottom: f64,
    right: f64,
};

pub const PMResolution = extern struct {
    hRes: f64,
    vRes: f64,
};

pub const PMLanguageInfo = extern struct {
    level: objc.Str32,
    version: objc.Str32,
    release: objc.Str32,
};

pub const PMPaperMargins = PMRect;

pub const PMDataFormat = u32;
pub const PMDataFormat_XMLDefault: u32 = 0;
pub const PMDataFormat_XMLMinimal: u32 = 1;
pub const PMDataFormat_XMLCompressed: u32 = 2;

/// https://developer.apple.com/documentation/ApplicationServices/PDEPlugIn?language=objc
pub const PDEPlugIn = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn initWithBundle(_self: *@This(), _theBundle: ?*foundation.Bundle) *@This() {
        return objc.msgSend(_self, "initWithBundle:", *@This(), .{_theBundle});
    }

    pub fn pdePanelsForTypeWithHostInfo(_self: *@This(), _pdeType: ?*foundation.String, _host: ?*objc.id) ?*foundation.Array(?*objc.id) {
        return objc.msgSend(_self, "PDEPanelsForType:withHostInfo:", ?*foundation.Array(?*objc.id), .{ _pdeType, _host });
    }
};

/// https://developer.apple.com/documentation/ApplicationServices/PDEPanel?language=objc
pub const PDEPanel = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn willShow(_self: *@This()) void {
        return objc.msgSend(_self, "willShow", void, .{});
    }

    pub fn shouldHide(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldHide", objc.BOOL, .{});
    }

    pub fn saveValuesAndReturnError(_self: *@This(), _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "saveValuesAndReturnError:", objc.BOOL, .{_error});
    }

    pub fn restoreValuesAndReturnError(_self: *@This(), _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "restoreValuesAndReturnError:", objc.BOOL, .{_error});
    }

    pub fn supportedPPDOptionKeys(_self: *@This()) ?*foundation.Array(?*foundation.String) {
        return objc.msgSend(_self, "supportedPPDOptionKeys", ?*foundation.Array(?*foundation.String), .{});
    }

    pub fn ppdOptionKeyValueDidChangePpdChoice(_self: *@This(), _option: ?*foundation.String, _choice: ?*foundation.String) void {
        return objc.msgSend(_self, "PPDOptionKeyValueDidChange:ppdChoice:", void, .{ _option, _choice });
    }

    pub fn panelView(_self: *@This()) ?*app_kit.View {
        return objc.msgSend(_self, "panelView", ?*app_kit.View, .{});
    }

    pub fn panelName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "panelName", ?*foundation.String, .{});
    }

    pub fn panelKind(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "panelKind", ?*foundation.String, .{});
    }

    pub fn summaryInfo(_self: *@This()) ?*foundation.Dictionary(?*foundation.String, ?*foundation.String) {
        return objc.msgSend(_self, "summaryInfo", ?*foundation.Dictionary(?*foundation.String, ?*foundation.String), .{});
    }

    pub fn shouldShowHelp(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldShowHelp", objc.BOOL, .{});
    }

    pub fn shouldPrint(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldPrint", objc.BOOL, .{});
    }

    pub fn printWindowWillClose(_self: *@This(), _userCanceled: objc.BOOL) void {
        return objc.msgSend(_self, "printWindowWillClose:", void, .{_userCanceled});
    }
};

/// https://developer.apple.com/documentation/ApplicationServices/PDEPlugInCallbackProtocol?language=objc
pub const PDEPlugInCallbackProtocol = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn printSession(_self: *@This()) PMPrintSession {
        return objc.msgSend(_self, "printSession", PMPrintSession, .{});
    }

    pub fn printSettings(_self: *@This()) PMPrintSettings {
        return objc.msgSend(_self, "printSettings", PMPrintSettings, .{});
    }

    pub fn pageFormat(_self: *@This()) PMPageFormat {
        return objc.msgSend(_self, "pageFormat", PMPageFormat, .{});
    }

    pub fn pmPrinter(_self: *@This()) PMPrinter {
        return objc.msgSend(_self, "PMPrinter", PMPrinter, .{});
    }

    pub fn ppdFile(_self: *@This()) ?*objc.ppd_file_s {
        return objc.msgSend(_self, "ppdFile", ?*objc.ppd_file_s, .{});
    }

    pub fn willChangePPDOptionKeyValuePpdChoice(_self: *@This(), _option: ?*foundation.String, _choice: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "willChangePPDOptionKeyValue:ppdChoice:", objc.BOOL, .{ _option, _choice });
    }
};

pub extern "ApplicationServices" fn PMRetain(object: PMObject) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMRelease(object: PMObject) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMCreateSession(printSession: ?*PMPrintSession) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSessionError(printSession: PMPrintSession) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSessionSetError(printSession: PMPrintSession, printError: objc.OSStatus) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSessionBeginCGDocumentNoDialog(printSession: PMPrintSession, printSettings: PMPrintSettings, pageFormat: PMPageFormat) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSessionEndDocumentNoDialog(printSession: PMPrintSession) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSessionBeginPageNoDialog(printSession: PMPrintSession, pageFormat: PMPageFormat, pageFrame: ?*const PMRect) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSessionEndPageNoDialog(printSession: PMPrintSession) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSessionGetCGGraphicsContext(printSession: PMPrintSession, context: ?*core_graphics.ContextRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSessionGetDestinationType(printSession: PMPrintSession, printSettings: PMPrintSettings, destTypeP: ?*PMDestinationType) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSessionCopyDestinationFormat(printSession: PMPrintSession, printSettings: PMPrintSettings, destFormatP: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSessionCopyDestinationLocation(printSession: PMPrintSession, printSettings: PMPrintSettings, destLocationP: ?*core_foundation.URLRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSessionSetDestination(
    printSession: PMPrintSession,
    printSettings: PMPrintSettings,
    destType: PMDestinationType,
    destFormat: core_foundation.StringRef,
    destLocation: core_foundation.URLRef,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSessionCopyOutputFormatList(printSession: PMPrintSession, destType: PMDestinationType, documentFormatP: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSessionCreatePageFormatList(printSession: PMPrintSession, printer: PMPrinter, pageFormatList: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSessionCreatePrinterList(
    printSession: PMPrintSession,
    printerList: ?*core_foundation.ArrayRef,
    currentIndex: ?*core_foundation.Index,
    currentPrinter: ?*PMPrinter,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSessionGetCurrentPrinter(printSession: PMPrintSession, currentPrinter: ?*PMPrinter) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSessionSetCurrentPMPrinter(session: PMPrintSession, printer: PMPrinter) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSessionGetDataFromSession(printSession: PMPrintSession, key: core_foundation.StringRef, data: ?*core_foundation.TypeRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSessionSetDataInSession(printSession: PMPrintSession, key: core_foundation.StringRef, data: core_foundation.TypeRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMCreatePageFormat(pageFormat: ?*PMPageFormat) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSessionDefaultPageFormat(printSession: PMPrintSession, pageFormat: PMPageFormat) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSessionValidatePageFormat(printSession: PMPrintSession, pageFormat: PMPageFormat, changed: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMCopyPageFormat(formatSrc: PMPageFormat, formatDest: PMPageFormat) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMCreatePageFormatWithPMPaper(pageFormat: ?*PMPageFormat, paper: PMPaper) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPageFormatCreateDataRepresentation(pageFormat: PMPageFormat, data: ?*core_foundation.DataRef, format: PMDataFormat) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPageFormatCreateWithDataRepresentation(data: core_foundation.DataRef, pageFormat: ?*PMPageFormat) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMGetAdjustedPageRect(pageFormat: PMPageFormat, pageRect: ?*PMRect) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMGetAdjustedPaperRect(pageFormat: PMPageFormat, paperRect: ?*PMRect) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMGetOrientation(pageFormat: PMPageFormat, orientation: ?*PMOrientation) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMGetPageFormatExtendedData(
    pageFormat: PMPageFormat,
    dataID: objc.OSType,
    size: ?*objc.UInt32,
    extendedData: ?*anyopaque,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPageFormatGetPrinterID(pageFormat: PMPageFormat, printerID: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMGetScale(pageFormat: PMPageFormat, scale: ?*f64) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMGetUnadjustedPageRect(pageFormat: PMPageFormat, pageRect: ?*PMRect) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMGetUnadjustedPaperRect(pageFormat: PMPageFormat, paperRect: ?*PMRect) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSetOrientation(pageFormat: PMPageFormat, orientation: PMOrientation, lock: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSetPageFormatExtendedData(
    pageFormat: PMPageFormat,
    dataID: objc.OSType,
    size: objc.UInt32,
    extendedData: ?*anyopaque,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSetScale(pageFormat: PMPageFormat, scale: f64) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMCreatePrintSettings(printSettings: ?*PMPrintSettings) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSessionDefaultPrintSettings(printSession: PMPrintSession, printSettings: PMPrintSettings) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSessionValidatePrintSettings(printSession: PMPrintSession, printSettings: PMPrintSettings, changed: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMCopyPrintSettings(settingSrc: PMPrintSettings, settingDest: PMPrintSettings) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrintSettingsCreateDataRepresentation(printSettings: PMPrintSettings, data: ?*core_foundation.DataRef, format: PMDataFormat) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrintSettingsCreateWithDataRepresentation(data: core_foundation.DataRef, printSettings: ?*PMPrintSettings) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMGetCollate(printSettings: PMPrintSettings, collate: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMGetCopies(printSettings: PMPrintSettings, copies: ?*objc.UInt32) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMGetDuplex(printSettings: PMPrintSettings, duplexSetting: ?*PMDuplexMode) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMGetFirstPage(printSettings: PMPrintSettings, first: ?*objc.UInt32) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMGetLastPage(printSettings: PMPrintSettings, last: ?*objc.UInt32) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMGetPageRange(printSettings: PMPrintSettings, minPage: ?*objc.UInt32, maxPage: ?*objc.UInt32) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrintSettingsGetJobName(printSettings: PMPrintSettings, name: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrintSettingsGetValue(printSettings: PMPrintSettings, key: core_foundation.StringRef, value: ?*core_foundation.TypeRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSetCollate(printSettings: PMPrintSettings, collate: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSetCopies(printSettings: PMPrintSettings, copies: objc.UInt32, lock: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSetDuplex(printSettings: PMPrintSettings, duplexSetting: PMDuplexMode) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSetFirstPage(printSettings: PMPrintSettings, first: objc.UInt32, lock: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSetLastPage(printSettings: PMPrintSettings, last: objc.UInt32, lock: objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMSetPageRange(printSettings: PMPrintSettings, minPage: objc.UInt32, maxPage: objc.UInt32) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrintSettingsSetJobName(printSettings: PMPrintSettings, name: core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrintSettingsSetValue(
    printSettings: PMPrintSettings,
    key: core_foundation.StringRef,
    value: core_foundation.TypeRef,
    locked: objc.Boolean,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrintSettingsCopyAsDictionary(printSettings: PMPrintSettings, settingsDictionary: ?*core_foundation.DictionaryRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrintSettingsCopyKeys(printSettings: PMPrintSettings, settingsKeys: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMCreateGenericPrinter(printer: ?*PMPrinter) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMServerCreatePrinterList(server: PMServer, printerList: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMServerLaunchPrinterBrowser(server: PMServer, options: core_foundation.DictionaryRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrinterCreateFromPrinterID(printerID: core_foundation.StringRef) callconv(.C) PMPrinter;

pub extern "ApplicationServices" fn PMPrinterCopyDescriptionURL(printer: PMPrinter, descriptionType: core_foundation.StringRef, fileURL: ?*core_foundation.URLRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrinterCopyDeviceURI(printer: PMPrinter, deviceURI: ?*core_foundation.URLRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrinterCopyHostName(printer: PMPrinter, hostNameP: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrinterCopyPresets(printer: PMPrinter, presetList: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrinterGetCommInfo(printer: PMPrinter, supportsControlCharRangeP: ?*objc.Boolean, supportsEightBitP: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrinterGetID(printer: PMPrinter) callconv(.C) core_foundation.StringRef;

pub extern "ApplicationServices" fn PMPrinterGetLocation(printer: PMPrinter) callconv(.C) core_foundation.StringRef;

pub extern "ApplicationServices" fn PMPrinterGetDriverCreator(printer: PMPrinter, creator: ?*objc.OSType) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrinterGetDriverReleaseInfo(printer: PMPrinter, release: ?*objc.VersRec) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrinterGetPrinterResolutionCount(printer: PMPrinter, countP: ?*objc.UInt32) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrinterGetIndexedPrinterResolution(printer: PMPrinter, index: objc.UInt32, resolutionP: ?*PMResolution) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrinterGetOutputResolution(printer: PMPrinter, printSettings: PMPrintSettings, resolutionP: ?*PMResolution) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrinterSetOutputResolution(printer: PMPrinter, printSettings: PMPrintSettings, resolutionP: ?*const PMResolution) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrinterGetLanguageInfo(printer: PMPrinter, info: ?*PMLanguageInfo) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrinterGetMakeAndModelName(printer: PMPrinter, makeAndModel: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrinterGetMimeTypes(printer: PMPrinter, settings: PMPrintSettings, mimeTypes: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrinterGetName(printer: PMPrinter) callconv(.C) core_foundation.StringRef;

pub extern "ApplicationServices" fn PMPrinterGetPaperList(printer: PMPrinter, paperList: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrinterGetState(printer: PMPrinter, state: ?*PMPrinterState) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrinterIsDefault(printer: PMPrinter) callconv(.C) objc.Boolean;

pub extern "ApplicationServices" fn PMPrinterIsFavorite(printer: PMPrinter) callconv(.C) objc.Boolean;

pub extern "ApplicationServices" fn PMPrinterIsPostScriptCapable(printer: PMPrinter) callconv(.C) objc.Boolean;

pub extern "ApplicationServices" fn PMPrinterIsPostScriptPrinter(printer: PMPrinter, isPSPrinter: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrinterIsRemote(printer: PMPrinter, isRemoteP: ?*objc.Boolean) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrinterSetDefault(printer: PMPrinter) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPresetCopyName(preset: PMPreset, name: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPresetCreatePrintSettings(preset: PMPreset, session: PMPrintSession, printSettings: ?*PMPrintSettings) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPresetGetAttributes(preset: PMPreset, attributes: ?*core_foundation.DictionaryRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMGetPageFormatPaper(format: PMPageFormat, paper: ?*PMPaper) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPaperCreateCustom(
    printer: PMPrinter,
    id: core_foundation.StringRef,
    name: core_foundation.StringRef,
    width: f64,
    height: f64,
    margins: ?*const PMPaperMargins,
    paperP: ?*PMPaper,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPaperGetWidth(paper: PMPaper, paperWidth: ?*f64) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPaperGetHeight(paper: PMPaper, paperHeight: ?*f64) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPaperGetMargins(paper: PMPaper, paperMargins: ?*PMPaperMargins) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPaperGetID(paper: PMPaper, paperID: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPaperGetPPDPaperName(paper: PMPaper, paperName: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPaperCreateLocalizedName(paper: PMPaper, printer: PMPrinter, paperName: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPaperGetPrinterID(paper: PMPaper, printerID: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPaperIsCustom(paper: PMPaper) callconv(.C) objc.Boolean;

pub extern "ApplicationServices" fn PMWorkflowCopyItems(workflowItems: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMWorkflowSubmitPDFWithOptions(
    workflowItem: core_foundation.URLRef,
    title: core_foundation.StringRef,
    options: [*:0]const u8,
    pdfFile: core_foundation.URLRef,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMWorkflowSubmitPDFWithSettings(workflowItem: core_foundation.URLRef, settings: PMPrintSettings, pdfFile: core_foundation.URLRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrinterPrintWithProvider(
    printer: PMPrinter,
    settings: PMPrintSettings,
    format: PMPageFormat,
    mimeType: core_foundation.StringRef,
    provider: core_graphics.DataProviderRef,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrinterPrintWithFile(
    printer: PMPrinter,
    settings: PMPrintSettings,
    format: PMPageFormat,
    mimeType: core_foundation.StringRef,
    fileURL: core_foundation.URLRef,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrinterWritePostScriptToURL(
    printer: PMPrinter,
    settings: PMPrintSettings,
    format: PMPageFormat,
    mimeType: core_foundation.StringRef,
    sourceFileURL: core_foundation.URLRef,
    destinationFileURL: core_foundation.URLRef,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrintSettingsToOptions(settings: PMPrintSettings, options: ?*?*c_char) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrintSettingsToOptionsWithPrinterAndPageFormat(
    settings: PMPrintSettings,
    printer: PMPrinter,
    pageFormat: PMPageFormat,
    options: ?*?*c_char,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrinterSendCommand(
    printer: PMPrinter,
    commandString: core_foundation.StringRef,
    jobTitle: core_foundation.StringRef,
    options: core_foundation.DictionaryRef,
) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMPrinterCopyState(printer: PMPrinter, stateDict: ?*core_foundation.DictionaryRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMCopyAvailablePPDs(domain: PMPPDDomain, ppds: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMCopyLocalizedPPD(ppd: core_foundation.URLRef, localizedPPD: ?*core_foundation.URLRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMCopyPPDData(ppd: core_foundation.URLRef, data: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;

pub extern "ApplicationServices" fn PMCGImageCreateWithEPSDataProvider(epsDataProvider: core_graphics.DataProviderRef, epsPreview: core_graphics.ImageRef) callconv(.C) core_graphics.ImageRef;

pub const PMPageToPaperMappingType = u32;
pub const PMPageToPaperMappingType_None: u32 = 1;
pub const PMPageToPaperMappingType_ScaleToFit: u32 = 2;

pub const FontRec = extern struct {
    fontType: objc.SInt16,
    firstChar: objc.SInt16,
    lastChar: objc.SInt16,
    widMax: objc.SInt16,
    kernMax: objc.SInt16,
    nDescent: objc.SInt16,
    fRectWidth: objc.SInt16,
    fRectHeight: objc.SInt16,
    owTLoc: objc.UInt16,
    ascent: objc.SInt16,
    descent: objc.SInt16,
    leading: objc.SInt16,
    rowWords: objc.SInt16,
};

pub const FontRecPtr = FontRec;

pub const FontRecHdl = FontRecPtr;

pub const FMInput = extern struct {
    family: i16,
    size: i16,
    face: objc.Style,
    needBits: objc.Boolean,
    device: i16,
    numer: objc.Point,
    denom: objc.Point,
};

pub const FamRec = extern struct {
    ffFlags: objc.SInt16,
    ffFamID: objc.SInt16,
    ffFirstChar: objc.SInt16,
    ffLastChar: objc.SInt16,
    ffAscent: objc.SInt16,
    ffDescent: objc.SInt16,
    ffLeading: objc.SInt16,
    ffWidMax: objc.SInt16,
    ffWTabOff: objc.SInt32,
    ffKernOff: objc.SInt32,
    ffStylOff: objc.SInt32,
    ffProperty: objc.SInt16,
    ffIntl: objc.SInt16,
    ffVersion: objc.SInt16,
};

pub const AsscEntry = extern struct {
    fontSize: objc.SInt16,
    fontStyle: objc.SInt16,
    fontID: objc.SInt16,
};

pub const FontAssoc = extern struct {
    numAssoc: objc.SInt16,
};

pub const StyleTable = extern struct {
    fontClass: objc.SInt16,
    offset: objc.SInt32,
    reserved: objc.SInt32,
    indexes: [48]c_char,
};

pub const NameTable = extern struct {
    stringCount: objc.SInt16,
    baseFontName: objc.Str255,
};

pub const KernPair = extern struct {
    kernFirst: c_char,
    kernSecond: c_char,
    kernWidth: objc.SInt16,
};

pub const KernEntry = extern struct {
    kernStyle: objc.SInt16,
    kernLength: objc.SInt16,
};

pub const KernTable = extern struct {
    numKerns: objc.SInt16,
};

pub const OpaqueATSUTextLayout = extern struct {};

pub const UTextLayout = OpaqueATSUTextLayout;

pub const OpaqueATSUStyle = extern struct {};

pub const UStyle = OpaqueATSUStyle;

pub const OpaqueATSUFontFallbacks = extern struct {};

pub const UFontFallbacks = OpaqueATSUFontFallbacks;

pub const UTextMeasurement = objc.Fixed;

pub const UFontID = FMFont;

pub const UFontFeatureType = objc.UInt16;

pub const UFontFeatureSelector = objc.UInt16;

pub const UFontVariationAxis = objc.FourCharCode;

pub const UFontVariationValue = objc.Fixed;

pub const UAttributeTag = objc.UInt32;

pub const UAttributeValuePtr = ?*anyopaque;

pub const ConstATSUAttributeValuePtr = ?*const anyopaque;

pub const UAttributeInfo = extern struct {
    fTag: UAttributeTag,
    fValueSize: objc.ByteCount,
};

pub const UCaret = extern struct {
    fX: objc.Fixed,
    fY: objc.Fixed,
    fDeltaX: objc.Fixed,
    fDeltaY: objc.Fixed,
};

pub const UCursorMovementType = objc.UInt16;

pub const anon6931 = u32;
pub const anon6931_ATSUByCharacter: u32 = 0;
pub const anon6931_ATSUByTypographicCluster: u32 = 1;
pub const anon6931_ATSUByWord: u32 = 2;
pub const anon6931_ATSUByCharacterCluster: u32 = 3;
pub const anon6931_ATSUByCluster: u32 = 1;

pub const ULineTruncation = objc.UInt32;

pub const anon7441 = u32;
pub const anon7441_ATSUTruncateNone: u32 = 0;
pub const anon7441_ATSUTruncateStart: u32 = 1;
pub const anon7441_ATSUTruncateEnd: u32 = 2;
pub const anon7441_ATSUTruncateMiddle: u32 = 3;
pub const anon7441_ATSUTruncateSpecificationMask: u32 = 7;
pub const anon7441_ATSUTruncFeatNoSquishing: u32 = 8;

pub const UStyleLineCountType = objc.UInt16;

pub const anon7631 = u32;
pub const anon7631_ATSUStyleSingleLineCount: u32 = 1;
pub const anon7631_ATSUStyleDoubleLineCount: u32 = 2;

pub const UVerticalCharacterType = objc.UInt16;

pub const UStyleComparison = objc.UInt16;

pub const anon7961 = u32;
pub const anon7961_ATSUStyleUnequal: u32 = 0;
pub const anon7961_ATSUStyleContains: u32 = 1;
pub const anon7961_ATSUStyleEquals: u32 = 2;
pub const anon7961_ATSUStyleContainedBy: u32 = 3;

pub const UFontFallbackMethod = objc.UInt16;

pub const UTabType = objc.UInt16;

pub const UTab = extern struct {
    tabPosition: UTextMeasurement,
    tabType: UTabType,
};

pub const URGBAlphaColor = extern struct {
    red: f32,
    green: f32,
    blue: f32,
    alpha: f32,
};

pub const GlyphCollection = objc.UInt16;

pub const UGlyphSelector = extern struct {
    collection: GlyphCollection,
    glyphID: GlyphID,
};

pub const UGlyphInfo = extern struct {
    glyphID: GlyphID,
    reserved: objc.UInt16,
    layoutFlags: objc.UInt32,
    charIndex: core_services.UniCharArrayOffset,
    style: UStyle,
    deltaY: objc.Float32,
    idealX: objc.Float32,
    screenX: objc.SInt16,
    caretX: objc.SInt16,
};

pub const UGlyphInfoArray = extern struct {
    layout: UTextLayout,
    numGlyphs: objc.ItemCount,
    glyphs: UGlyphInfo,
};

pub const UHighlightMethod = objc.UInt32;

pub const anon10261 = u32;
pub const anon10261_InvertHighlighting: u32 = 0;
pub const anon10261_RedrawHighlighting: u32 = 1;

pub const UBackgroundDataType = objc.UInt32;

pub const UBackgroundColor = URGBAlphaColor;

pub const RedrawBackgroundProcPtr = objc.Boolean;

pub const RedrawBackgroundUPP = RedrawBackgroundProcPtr;

pub const UBackgroundData = extern union {
    backgroundColor: UBackgroundColor,
    backgroundUPP: RedrawBackgroundUPP,
};

pub const UUnhighlightData = extern struct {
    dataType: UBackgroundDataType,
    unhighlightData: UBackgroundData,
};

pub const anon11921 = u32;
pub const anon11921_ATSULeftToRightBaseDirection: u32 = 0;
pub const anon11921_ATSURightToLeftBaseDirection: u32 = 1;

pub const anon12171 = u32;
pub const anon12171_ATSUInvalidFontID: u32 = 0;

pub const anon12401 = u32;
pub const anon12401_ATSUNoSelector: u32 = 65535;

pub const anon12551 = u32;
pub const anon12551_ATSUFromTextBeginning: u32 = -1;
pub const anon12551_ATSUToTextEnd: u32 = -1;
pub const anon12551_ATSUFromPreviousLayout: u32 = -2;
pub const anon12551_ATSUFromFollowingLayout: u32 = -3;

pub const anon12831 = u32;
pub const anon12831_ATSUUseGrafPortPenLoc: u32 = -1;
pub const anon12831_ATSUClearAll: u32 = -1;

pub const QuadraticNewPathProcPtr = objc.OSStatus;

pub const QuadraticNewPathUPP = QuadraticNewPathProcPtr;

pub const QuadraticLineProcPtr = objc.OSStatus;

pub const QuadraticLineUPP = QuadraticLineProcPtr;

pub const QuadraticCurveProcPtr = objc.OSStatus;

pub const QuadraticCurveUPP = QuadraticCurveProcPtr;

pub const QuadraticClosePathProcPtr = objc.OSStatus;

pub const QuadraticClosePathUPP = QuadraticClosePathProcPtr;

pub const CubicMoveToProcPtr = objc.OSStatus;

pub const CubicMoveToUPP = CubicMoveToProcPtr;

pub const CubicLineToProcPtr = objc.OSStatus;

pub const CubicLineToUPP = CubicLineToProcPtr;

pub const CubicCurveToProcPtr = objc.OSStatus;

pub const CubicCurveToUPP = CubicCurveToProcPtr;

pub const CubicClosePathProcPtr = objc.OSStatus;

pub const CubicClosePathUPP = CubicClosePathProcPtr;

pub const UFlattenedDataStreamFormat = objc.UInt32;

pub const UFlattenStyleRunOptions = objc.UInt32;

pub const UUnFlattenStyleRunOptions = objc.UInt32;

pub const UStyleRunInfo = extern struct {
    runLength: objc.UInt32,
    styleObjectIndex: objc.UInt32,
};

pub const FlatDataMainHeaderBlock = extern struct {
    version: objc.UInt32,
    sizeOfDataBlock: objc.UInt32,
    offsetToTextLayouts: objc.UInt32,
    offsetToStyleRuns: objc.UInt32,
    offsetToStyleList: objc.UInt32,
};

pub const FlatDataTextLayoutDataHeader = extern struct {
    sizeOfLayoutData: objc.UInt32,
    textLayoutLength: objc.UInt32,
    offsetToLayoutControls: objc.UInt32,
    offsetToLineInfo: objc.UInt32,
};

pub const FlatDataTextLayoutHeader = extern struct {
    numFlattenedTextLayouts: objc.UInt32,
    flattenedTextLayouts: FlatDataTextLayoutDataHeader,
};

pub const FlatDataLayoutControlsDataHeader = extern struct {
    numberOfLayoutControls: objc.UInt32,
    controlArray: UAttributeInfo,
};

pub const FlatDataLineInfoData = extern struct {
    lineLength: objc.UInt32,
    numberOfLineControls: objc.UInt32,
};

pub const FlatDataLineInfoHeader = extern struct {
    numberOfLines: objc.UInt32,
    lineInfoArray: FlatDataLineInfoData,
};

pub const FlatDataStyleRunDataHeader = extern struct {
    numberOfStyleRuns: objc.UInt32,
    styleRunArray: UStyleRunInfo,
};

pub const FlatDataStyleListStyleDataHeader = extern struct {
    sizeOfStyleInfo: objc.UInt32,
    numberOfSetAttributes: objc.UInt32,
    numberOfSetFeatures: objc.UInt32,
    numberOfSetVariations: objc.UInt32,
};

pub const FlatDataStyleListHeader = extern struct {
    numberOfStyles: objc.UInt32,
    styleDataArray: FlatDataStyleListStyleDataHeader,
};

pub const FlatDataStyleListFeatureData = extern struct {
    theFeatureType: UFontFeatureType,
    theFeatureSelector: UFontFeatureSelector,
};

pub const FlatDataStyleListVariationData = extern struct {
    theVariationAxis: UFontVariationAxis,
    theVariationValue: UFontVariationValue,
};

pub const FlatDataFontSpeciferType = objc.UInt32;

pub const FlatDataFontNameDataHeader = extern struct {
    nameSpecifierType: FlatDataFontSpeciferType,
    nameSpecifierSize: objc.UInt32,
};

pub const FlatDataFontSpecRawNameData = extern struct {
    fontNameType: core_text.FontNameCode,
    fontNamePlatform: core_text.FontPlatformCode,
    fontNameScript: core_text.FontScriptCode,
    fontNameLanguage: core_text.FontLanguageCode,
    fontNameLength: objc.UInt32,
};

pub const FlatDataFontSpecRawNameDataHeader = extern struct {
    numberOfFlattenedNames: objc.UInt32,
    nameDataArray: FlatDataFontSpecRawNameData,
};

pub const UDirectDataSelector = objc.UInt32;

pub const LLCStyleInfo = extern struct {};

pub const UStyleSettingRef = LLCStyleInfo;

pub const SpeechChannelRecord = extern struct {
    data: [1]i64,
};

pub const SpeechChannel = SpeechChannelRecord;

pub const VoiceSpec = extern struct {
    creator: objc.OSType,
    id: objc.OSType,
};

pub const VoiceSpecPtr = VoiceSpec;

pub const anon1481 = objc.SInt16;
pub const anon1481_Neuter: objc.SInt16 = 0;
pub const anon1481_Male: objc.SInt16 = 1;
pub const anon1481_Female: objc.SInt16 = 2;

pub const VoiceDescription = extern struct {
    length: objc.SInt32,
    voice: VoiceSpec,
    version: objc.SInt32,
    name: objc.Str63,
    comment: objc.Str255,
    gender: objc.SInt16,
    age: objc.SInt16,
    script: objc.SInt16,
    language: objc.SInt16,
    region: objc.SInt16,
    reserved: objc.SInt32,
};

pub const VoiceFileInfo = extern struct {
    fileSpec: core_services.FSSpec,
    resID: objc.SInt16,
};

pub const SpeechStatusInfo = extern struct {
    outputBusy: objc.Boolean,
    outputPaused: objc.Boolean,
    inputBytesLeft: i64,
    phonemeCode: objc.SInt16,
};

pub const SpeechErrorInfo = extern struct {
    count: objc.SInt16,
    oldest: objc.OSErr,
    oldPos: i64,
    newest: objc.OSErr,
    newPos: i64,
};

pub const SpeechVersionInfo = extern struct {
    synthType: objc.OSType,
    synthSubType: objc.OSType,
    synthManufacturer: objc.OSType,
    synthFlags: objc.SInt32,
    synthVersion: objc.NumVersion,
};

pub const PhonemeInfo = extern struct {
    opcode: objc.SInt16,
    phStr: objc.Str15,
    exampleStr: objc.Str31,
    hiliteStart: objc.SInt16,
    hiliteEnd: objc.SInt16,
};

pub const PhonemeDescriptor = extern struct {
    phonemeCount: objc.SInt16,
    thePhonemes: PhonemeInfo,
};

pub const SpeechXtndData = extern struct {
    synthCreator: objc.OSType,
    synthData: objc.Byte,
};

pub const DelimiterInfo = extern struct {
    startDelimiter: objc.Byte,
    endDelimiter: objc.Byte,
};

pub const SpeechTextDoneProcPtr = ?*const fn (
    SpeechChannel,
    objc.SRefCon,
    ?*?*const anyopaque,
    ?*u64,
    ?*objc.SInt32,
) callconv(.C) void;

pub const SpeechDoneProcPtr = ?*const fn (SpeechChannel, objc.SRefCon) callconv(.C) void;

pub const SpeechSyncProcPtr = ?*const fn (SpeechChannel, objc.SRefCon, objc.OSType) callconv(.C) void;

pub const SpeechErrorProcPtr = ?*const fn (
    SpeechChannel,
    objc.SRefCon,
    objc.OSErr,
    i64,
) callconv(.C) void;

pub const SpeechPhonemeProcPtr = ?*const fn (SpeechChannel, objc.SRefCon, objc.SInt16) callconv(.C) void;

pub const SpeechWordProcPtr = ?*const fn (
    SpeechChannel,
    objc.SRefCon,
    u64,
    objc.UInt16,
) callconv(.C) void;

pub const SpeechTextDoneUPP = SpeechTextDoneProcPtr;

pub const SpeechDoneUPP = SpeechDoneProcPtr;

pub const SpeechSyncUPP = SpeechSyncProcPtr;

pub const SpeechErrorUPP = SpeechErrorProcPtr;

pub const SpeechPhonemeUPP = SpeechPhonemeProcPtr;

pub const SpeechWordUPP = SpeechWordProcPtr;

pub extern "ApplicationServices" fn NewSpeechTextDoneUPP(userRoutine: SpeechTextDoneProcPtr) callconv(.C) SpeechTextDoneUPP;

pub extern "ApplicationServices" fn NewSpeechDoneUPP(userRoutine: SpeechDoneProcPtr) callconv(.C) SpeechDoneUPP;

pub extern "ApplicationServices" fn NewSpeechSyncUPP(userRoutine: SpeechSyncProcPtr) callconv(.C) SpeechSyncUPP;

pub extern "ApplicationServices" fn NewSpeechErrorUPP(userRoutine: SpeechErrorProcPtr) callconv(.C) SpeechErrorUPP;

pub extern "ApplicationServices" fn NewSpeechPhonemeUPP(userRoutine: SpeechPhonemeProcPtr) callconv(.C) SpeechPhonemeUPP;

pub extern "ApplicationServices" fn NewSpeechWordUPP(userRoutine: SpeechWordProcPtr) callconv(.C) SpeechWordUPP;

pub extern "ApplicationServices" fn DisposeSpeechTextDoneUPP(userUPP: SpeechTextDoneUPP) callconv(.C) void;

pub extern "ApplicationServices" fn DisposeSpeechDoneUPP(userUPP: SpeechDoneUPP) callconv(.C) void;

pub extern "ApplicationServices" fn DisposeSpeechSyncUPP(userUPP: SpeechSyncUPP) callconv(.C) void;

pub extern "ApplicationServices" fn DisposeSpeechErrorUPP(userUPP: SpeechErrorUPP) callconv(.C) void;

pub extern "ApplicationServices" fn DisposeSpeechPhonemeUPP(userUPP: SpeechPhonemeUPP) callconv(.C) void;

pub extern "ApplicationServices" fn DisposeSpeechWordUPP(userUPP: SpeechWordUPP) callconv(.C) void;

pub extern "ApplicationServices" fn InvokeSpeechTextDoneUPP(
    chan: SpeechChannel,
    refCon: objc.SRefCon,
    nextBuf: ?*?*const anyopaque,
    byteLen: ?*u64,
    controlFlags: ?*objc.SInt32,
    userUPP: SpeechTextDoneUPP,
) callconv(.C) void;

pub extern "ApplicationServices" fn InvokeSpeechDoneUPP(chan: SpeechChannel, refCon: objc.SRefCon, userUPP: SpeechDoneUPP) callconv(.C) void;

pub extern "ApplicationServices" fn InvokeSpeechSyncUPP(
    chan: SpeechChannel,
    refCon: objc.SRefCon,
    syncMessage: objc.OSType,
    userUPP: SpeechSyncUPP,
) callconv(.C) void;

pub extern "ApplicationServices" fn InvokeSpeechErrorUPP(
    chan: SpeechChannel,
    refCon: objc.SRefCon,
    theError: objc.OSErr,
    bytePos: i64,
    userUPP: SpeechErrorUPP,
) callconv(.C) void;

pub extern "ApplicationServices" fn InvokeSpeechPhonemeUPP(
    chan: SpeechChannel,
    refCon: objc.SRefCon,
    phonemeOpcode: objc.SInt16,
    userUPP: SpeechPhonemeUPP,
) callconv(.C) void;

pub extern "ApplicationServices" fn InvokeSpeechWordUPP(
    chan: SpeechChannel,
    refCon: objc.SRefCon,
    wordPos: u64,
    wordLen: objc.UInt16,
    userUPP: SpeechWordUPP,
) callconv(.C) void;

pub const SpeechErrorCFProcPtr = ?*const fn (SpeechChannel, objc.SRefCon, core_foundation.ErrorRef) callconv(.C) void;

pub const SpeechWordCFProcPtr = ?*const fn (
    SpeechChannel,
    objc.SRefCon,
    core_foundation.StringRef,
    core_foundation.Range,
) callconv(.C) void;

pub extern "ApplicationServices" fn SpeechManagerVersion() callconv(.C) objc.NumVersion;

pub extern "ApplicationServices" fn MakeVoiceSpec(creator: objc.OSType, id: objc.OSType, voice: ?*VoiceSpec) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn CountVoices(numVoices: ?*objc.SInt16) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn GetIndVoice(index: objc.SInt16, voice: ?*VoiceSpec) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn GetVoiceDescription(voice: ?*const VoiceSpec, info: ?*VoiceDescription, infoLength: i64) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn GetVoiceInfo(voice: ?*const VoiceSpec, selector: objc.OSType, voiceInfo: ?*anyopaque) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn NewSpeechChannel(voice: ?*VoiceSpec, chan: ?*SpeechChannel) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn DisposeSpeechChannel(chan: SpeechChannel) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn SpeakString(textToBeSpoken: objc.ConstStr255Param) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn SpeakText(chan: SpeechChannel, textBuf: ?*const anyopaque, textBytes: u64) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn SpeakBuffer(
    chan: SpeechChannel,
    textBuf: ?*const anyopaque,
    textBytes: u64,
    controlFlags: objc.SInt32,
) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn StopSpeech(chan: SpeechChannel) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn StopSpeechAt(chan: SpeechChannel, whereToStop: objc.SInt32) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn PauseSpeechAt(chan: SpeechChannel, whereToPause: objc.SInt32) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn ContinueSpeech(chan: SpeechChannel) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn SpeechBusy() callconv(.C) objc.SInt16;

pub extern "ApplicationServices" fn SpeechBusySystemWide() callconv(.C) objc.SInt16;

pub extern "ApplicationServices" fn SetSpeechRate(chan: SpeechChannel, rate: objc.Fixed) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn GetSpeechRate(chan: SpeechChannel, rate: ?*objc.Fixed) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn SetSpeechPitch(chan: SpeechChannel, pitch: objc.Fixed) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn GetSpeechPitch(chan: SpeechChannel, pitch: ?*objc.Fixed) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn SetSpeechInfo(chan: SpeechChannel, selector: objc.OSType, speechInfo: ?*const anyopaque) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn GetSpeechInfo(chan: SpeechChannel, selector: objc.OSType, speechInfo: ?*anyopaque) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn TextToPhonemes(
    chan: SpeechChannel,
    textBuf: ?*const anyopaque,
    textBytes: u64,
    phonemeBuf: objc.Handle,
    phonemeBytes: ?*i64,
) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn UseDictionary(chan: SpeechChannel, dictionary: objc.Handle) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn SpeakCFString(chan: SpeechChannel, aString: core_foundation.StringRef, options: core_foundation.DictionaryRef) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn UseSpeechDictionary(chan: SpeechChannel, speechDictionary: core_foundation.DictionaryRef) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn CopyPhonemesFromText(chan: SpeechChannel, text: core_foundation.StringRef, phonemes: ?*core_foundation.StringRef) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn CopySpeechProperty(chan: SpeechChannel, property: core_foundation.StringRef, object: ?*core_foundation.TypeRef) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn SetSpeechProperty(chan: SpeechChannel, property: core_foundation.StringRef, object: core_foundation.TypeRef) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn SpeechSynthesisRegisterModuleURL(url: core_foundation.URLRef) callconv(.C) objc.OSErr;

pub extern "ApplicationServices" fn SpeechSynthesisUnregisterModuleURL(url: core_foundation.URLRef) callconv(.C) objc.OSErr;
