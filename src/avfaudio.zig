// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const foundation = @import("foundation.zig"); // Framework dependency Foundation.
const core_audio_types = @import("core_audio_types.zig"); // Framework dependency CoreAudioTypes.
const core_media = @import("core_media.zig"); // Framework dependency CoreMedia.
const audio_toolbox = @import("audio_toolbox.zig"); // Framework dependency AudioToolbox.
const core_midi = @import("core_midi.zig"); // Framework dependency CoreMIDI.
const app_kit = @import("app_kit.zig"); // Framework dependency AppKit.

pub const FramePosition = objc.int64_t;

pub const FrameCount = objc.uint32_t;

pub const PacketCount = objc.uint32_t;

pub const ChannelCount = objc.uint32_t;

pub const NodeCompletionHandler = *const fn () callconv(.C) void;

pub const NodeBus = objc.NSUInteger;

pub const AVMusicTimeStamp = f64;

pub const AVAudio3DPoint = extern struct {
    x: f32,
    y: f32,
    z: f32,
};

pub const AVAudio3DVector = AVAudio3DPoint;

pub const AVAudio3DVectorOrientation = extern struct {
    forward: AVAudio3DVector,
    up: AVAudio3DVector,
};

pub const AVAudio3DAngularOrientation = extern struct {
    yaw: f32,
    pitch: f32,
    roll: f32,
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioBuffer?language=objc
pub const Buffer = opaque {
    pub const Internal = objc.ExternClass("AVAudioBuffer", @This(), objc.NSObject, &.{ foundation.Copying, foundation.MutableCopying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn format(_self: *@This()) ?*Format {
        return objc.msgSend(_self, "format", ?*Format, .{});
    }

    pub fn audioBufferList(_self: *@This()) ?*const core_audio_types.BufferList {
        return objc.msgSend(_self, "audioBufferList", ?*const core_audio_types.BufferList, .{});
    }

    pub fn mutableAudioBufferList(_self: *@This()) ?*core_audio_types.BufferList {
        return objc.msgSend(_self, "mutableAudioBufferList", ?*core_audio_types.BufferList, .{});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioPCMBuffer?language=objc
pub const PCMBuffer = opaque {
    pub const Internal = objc.ExternClass("AVAudioPCMBuffer", @This(), Buffer, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithPCMFormatFrameCapacity(_self: *@This(), _format: ?*Format, _frameCapacity: FrameCount) *@This() {
        return objc.msgSend(_self, "initWithPCMFormat:frameCapacity:", *@This(), .{ _format, _frameCapacity });
    }

    pub fn initWithPCMFormatBufferListNoCopyDeallocator(_self: *@This(), _format: ?*Format, _bufferList: ?*const core_audio_types.BufferList, _deallocator: *const fn (?*const core_audio_types.BufferList) callconv(.C) void) *@This() {
        return objc.msgSend(_self, "initWithPCMFormat:bufferListNoCopy:deallocator:", *@This(), .{ _format, _bufferList, _deallocator });
    }

    pub fn frameCapacity(_self: *@This()) FrameCount {
        return objc.msgSend(_self, "frameCapacity", FrameCount, .{});
    }

    pub fn frameLength(_self: *@This()) FrameCount {
        return objc.msgSend(_self, "frameLength", FrameCount, .{});
    }

    pub fn setFrameLength(_self: *@This(), _frameLength: FrameCount) void {
        return objc.msgSend(_self, "setFrameLength:", void, .{_frameLength});
    }

    pub fn stride(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "stride", objc.NSUInteger, .{});
    }

    pub fn floatChannelData(_self: *@This()) ?*const ?*f32 {
        return objc.msgSend(_self, "floatChannelData", ?*const ?*f32, .{});
    }

    pub fn int16ChannelData(_self: *@This()) ?*const ?*objc.int16_t {
        return objc.msgSend(_self, "int16ChannelData", ?*const ?*objc.int16_t, .{});
    }

    pub fn int32ChannelData(_self: *@This()) ?*const ?*objc.int32_t {
        return objc.msgSend(_self, "int32ChannelData", ?*const ?*objc.int32_t, .{});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioCompressedBuffer?language=objc
pub const CompressedBuffer = opaque {
    pub const Internal = objc.ExternClass("AVAudioCompressedBuffer", @This(), Buffer, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithFormatPacketCapacityMaximumPacketSize(_self: *@This(), _format: ?*Format, _packetCapacity: PacketCount, _maximumPacketSize: objc.NSInteger) *@This() {
        return objc.msgSend(_self, "initWithFormat:packetCapacity:maximumPacketSize:", *@This(), .{ _format, _packetCapacity, _maximumPacketSize });
    }

    pub fn initWithFormatPacketCapacity(_self: *@This(), _format: ?*Format, _packetCapacity: PacketCount) *@This() {
        return objc.msgSend(_self, "initWithFormat:packetCapacity:", *@This(), .{ _format, _packetCapacity });
    }

    pub fn packetCapacity(_self: *@This()) PacketCount {
        return objc.msgSend(_self, "packetCapacity", PacketCount, .{});
    }

    pub fn packetCount(_self: *@This()) PacketCount {
        return objc.msgSend(_self, "packetCount", PacketCount, .{});
    }

    pub fn setPacketCount(_self: *@This(), _packetCount: PacketCount) void {
        return objc.msgSend(_self, "setPacketCount:", void, .{_packetCount});
    }

    pub fn maximumPacketSize(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "maximumPacketSize", objc.NSInteger, .{});
    }

    pub fn data(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "data", ?*anyopaque, .{});
    }

    pub fn byteCapacity(_self: *@This()) objc.uint32_t {
        return objc.msgSend(_self, "byteCapacity", objc.uint32_t, .{});
    }

    pub fn byteLength(_self: *@This()) objc.uint32_t {
        return objc.msgSend(_self, "byteLength", objc.uint32_t, .{});
    }

    pub fn setByteLength(_self: *@This(), _byteLength: objc.uint32_t) void {
        return objc.msgSend(_self, "setByteLength:", void, .{_byteLength});
    }

    pub fn packetDescriptions(_self: *@This()) ?*core_audio_types.StreamPacketDescription {
        return objc.msgSend(_self, "packetDescriptions", ?*core_audio_types.StreamPacketDescription, .{});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioChannelLayout?language=objc
pub const ChannelLayout = opaque {
    pub const Internal = objc.ExternClass("AVAudioChannelLayout", @This(), objc.NSObject, &.{foundation.SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn initWithLayoutTag(_self: *@This(), _layoutTag: core_audio_types.ChannelLayoutTag) *@This() {
        return objc.msgSend(_self, "initWithLayoutTag:", *@This(), .{_layoutTag});
    }

    pub fn initWithLayout(_self: *@This(), _layout: ?*const core_audio_types.ChannelLayout) *@This() {
        return objc.msgSend(_self, "initWithLayout:", *@This(), .{_layout});
    }

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn layoutWithLayoutTag(_layoutTag: core_audio_types.ChannelLayoutTag) *@This() {
        return objc.msgSend(Internal.class(), "layoutWithLayoutTag:", *@This(), .{_layoutTag});
    }

    pub fn layoutWithLayout(_layout: ?*const core_audio_types.ChannelLayout) *@This() {
        return objc.msgSend(Internal.class(), "layoutWithLayout:", *@This(), .{_layout});
    }

    pub fn layoutTag(_self: *@This()) core_audio_types.ChannelLayoutTag {
        return objc.msgSend(_self, "layoutTag", core_audio_types.ChannelLayoutTag, .{});
    }

    pub fn layout(_self: *@This()) ?*const core_audio_types.ChannelLayout {
        return objc.msgSend(_self, "layout", ?*const core_audio_types.ChannelLayout, .{});
    }

    pub fn channelCount(_self: *@This()) ChannelCount {
        return objc.msgSend(_self, "channelCount", ChannelCount, .{});
    }
};

pub const CommonFormat = objc.NSUInteger;
pub const CommonFormat_OtherFormat: objc.NSUInteger = 0;
pub const CommonFormat_PCMFormatFloat32: objc.NSUInteger = 1;
pub const CommonFormat_PCMFormatFloat64: objc.NSUInteger = 2;
pub const CommonFormat_PCMFormatInt16: objc.NSUInteger = 3;
pub const CommonFormat_PCMFormatInt32: objc.NSUInteger = 4;

/// https://developer.apple.com/documentation/AVFAudio/AVAudioFormat?language=objc
pub const Format = opaque {
    pub const Internal = objc.ExternClass("AVAudioFormat", @This(), objc.NSObject, &.{foundation.SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn initWithStreamDescription(_self: *@This(), _asbd: ?*const core_audio_types.StreamBasicDescription) *@This() {
        return objc.msgSend(_self, "initWithStreamDescription:", *@This(), .{_asbd});
    }

    pub fn initWithStreamDescriptionChannelLayout(_self: *@This(), _asbd: ?*const core_audio_types.StreamBasicDescription, _layout: ?*ChannelLayout) *@This() {
        return objc.msgSend(_self, "initWithStreamDescription:channelLayout:", *@This(), .{ _asbd, _layout });
    }

    pub fn initStandardFormatWithSampleRateChannels(_self: *@This(), _sampleRate: f64, _channels: ChannelCount) *@This() {
        return objc.msgSend(_self, "initStandardFormatWithSampleRate:channels:", *@This(), .{ _sampleRate, _channels });
    }

    pub fn initStandardFormatWithSampleRateChannelLayout(_self: *@This(), _sampleRate: f64, _layout: ?*ChannelLayout) *@This() {
        return objc.msgSend(_self, "initStandardFormatWithSampleRate:channelLayout:", *@This(), .{ _sampleRate, _layout });
    }

    pub fn initWithCommonFormatSampleRateChannelsInterleaved(
        _self: *@This(),
        _format: CommonFormat,
        _sampleRate: f64,
        _channels: ChannelCount,
        _interleaved: objc.BOOL,
    ) *@This() {
        return objc.msgSend(_self, "initWithCommonFormat:sampleRate:channels:interleaved:", *@This(), .{
            _format,
            _sampleRate,
            _channels,
            _interleaved,
        });
    }

    pub fn initWithCommonFormatSampleRateInterleavedChannelLayout(
        _self: *@This(),
        _format: CommonFormat,
        _sampleRate: f64,
        _interleaved: objc.BOOL,
        _layout: ?*ChannelLayout,
    ) *@This() {
        return objc.msgSend(_self, "initWithCommonFormat:sampleRate:interleaved:channelLayout:", *@This(), .{
            _format,
            _sampleRate,
            _interleaved,
            _layout,
        });
    }

    pub fn initWithSettings(_self: *@This(), _settings: ?*foundation.Dictionary(?*foundation.String, ?objc.Id)) *@This() {
        return objc.msgSend(_self, "initWithSettings:", *@This(), .{_settings});
    }

    pub fn initWithCMAudioFormatDescription(_self: *@This(), _formatDescription: core_media.AudioFormatDescriptionRef) *@This() {
        return objc.msgSend(_self, "initWithCMAudioFormatDescription:", *@This(), .{_formatDescription});
    }

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn isStandard(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isStandard", objc.BOOL, .{});
    }

    pub fn commonFormat(_self: *@This()) CommonFormat {
        return objc.msgSend(_self, "commonFormat", CommonFormat, .{});
    }

    pub fn channelCount(_self: *@This()) ChannelCount {
        return objc.msgSend(_self, "channelCount", ChannelCount, .{});
    }

    pub fn sampleRate(_self: *@This()) f64 {
        return objc.msgSend(_self, "sampleRate", f64, .{});
    }

    pub fn isInterleaved(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isInterleaved", objc.BOOL, .{});
    }

    pub fn streamDescription(_self: *@This()) ?*const core_audio_types.StreamBasicDescription {
        return objc.msgSend(_self, "streamDescription", ?*const core_audio_types.StreamBasicDescription, .{});
    }

    pub fn channelLayout(_self: *@This()) ?*ChannelLayout {
        return objc.msgSend(_self, "channelLayout", ?*ChannelLayout, .{});
    }

    pub fn magicCookie(_self: *@This()) ?*foundation.Data {
        return objc.msgSend(_self, "magicCookie", ?*foundation.Data, .{});
    }

    pub fn setMagicCookie(_self: *@This(), _magicCookie: ?*foundation.Data) void {
        return objc.msgSend(_self, "setMagicCookie:", void, .{_magicCookie});
    }

    pub fn settings(_self: *@This()) ?*foundation.Dictionary(?*foundation.String, ?objc.Id) {
        return objc.msgSend(_self, "settings", ?*foundation.Dictionary(?*foundation.String, ?objc.Id), .{});
    }

    pub fn formatDescription(_self: *@This()) core_media.AudioFormatDescriptionRef {
        return objc.msgSend(_self, "formatDescription", core_media.AudioFormatDescriptionRef, .{});
    }
};

pub const Quality = objc.NSInteger;
pub const Quality_Min: objc.NSInteger = 0;
pub const Quality_Low: objc.NSInteger = 32;
pub const Quality_Medium: objc.NSInteger = 64;
pub const Quality_High: objc.NSInteger = 96;
pub const Quality_Max: objc.NSInteger = 127;

/// https://developer.apple.com/documentation/AVFAudio/AVAudioTime?language=objc
pub const Time = opaque {
    pub const Internal = objc.ExternClass("AVAudioTime", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithAudioTimeStampSampleRate(_self: *@This(), _ts: ?*const core_audio_types.TimeStamp, _sampleRate: f64) *@This() {
        return objc.msgSend(_self, "initWithAudioTimeStamp:sampleRate:", *@This(), .{ _ts, _sampleRate });
    }

    pub fn initWithHostTime(_self: *@This(), _hostTime: objc.uint64_t) *@This() {
        return objc.msgSend(_self, "initWithHostTime:", *@This(), .{_hostTime});
    }

    pub fn initWithSampleTimeAtRate(_self: *@This(), _sampleTime: FramePosition, _sampleRate: f64) *@This() {
        return objc.msgSend(_self, "initWithSampleTime:atRate:", *@This(), .{ _sampleTime, _sampleRate });
    }

    pub fn initWithHostTimeSampleTimeAtRate(_self: *@This(), _hostTime: objc.uint64_t, _sampleTime: FramePosition, _sampleRate: f64) *@This() {
        return objc.msgSend(_self, "initWithHostTime:sampleTime:atRate:", *@This(), .{ _hostTime, _sampleTime, _sampleRate });
    }

    pub fn timeWithAudioTimeStampSampleRate(_ts: ?*const core_audio_types.TimeStamp, _sampleRate: f64) *@This() {
        return objc.msgSend(Internal.class(), "timeWithAudioTimeStamp:sampleRate:", *@This(), .{ _ts, _sampleRate });
    }

    pub fn timeWithHostTime(_hostTime: objc.uint64_t) *@This() {
        return objc.msgSend(Internal.class(), "timeWithHostTime:", *@This(), .{_hostTime});
    }

    pub fn timeWithSampleTimeAtRate(_sampleTime: FramePosition, _sampleRate: f64) *@This() {
        return objc.msgSend(Internal.class(), "timeWithSampleTime:atRate:", *@This(), .{ _sampleTime, _sampleRate });
    }

    pub fn timeWithHostTimeSampleTimeAtRate(_hostTime: objc.uint64_t, _sampleTime: FramePosition, _sampleRate: f64) *@This() {
        return objc.msgSend(Internal.class(), "timeWithHostTime:sampleTime:atRate:", *@This(), .{ _hostTime, _sampleTime, _sampleRate });
    }

    pub fn hostTimeForSeconds(_seconds: foundation.TimeInterval) objc.uint64_t {
        return objc.msgSend(Internal.class(), "hostTimeForSeconds:", objc.uint64_t, .{_seconds});
    }

    pub fn secondsForHostTime(_hostTime: objc.uint64_t) foundation.TimeInterval {
        return objc.msgSend(Internal.class(), "secondsForHostTime:", foundation.TimeInterval, .{_hostTime});
    }

    pub fn extrapolateTimeFromAnchor(_self: *@This(), _anchorTime: ?*Time) ?*Time {
        return objc.msgSend(_self, "extrapolateTimeFromAnchor:", ?*Time, .{_anchorTime});
    }

    pub fn isHostTimeValid(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isHostTimeValid", objc.BOOL, .{});
    }

    pub fn hostTime(_self: *@This()) objc.uint64_t {
        return objc.msgSend(_self, "hostTime", objc.uint64_t, .{});
    }

    pub fn isSampleTimeValid(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isSampleTimeValid", objc.BOOL, .{});
    }

    pub fn sampleTime(_self: *@This()) FramePosition {
        return objc.msgSend(_self, "sampleTime", FramePosition, .{});
    }

    pub fn sampleRate(_self: *@This()) f64 {
        return objc.msgSend(_self, "sampleRate", f64, .{});
    }

    pub fn audioTimeStamp(_self: *@This()) core_audio_types.TimeStamp {
        return objc.msgSend(_self, "audioTimeStamp", core_audio_types.TimeStamp, .{});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioConnectionPoint?language=objc
pub const ConnectionPoint = opaque {
    pub const Internal = objc.ExternClass("AVAudioConnectionPoint", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithNodeBus(_self: *@This(), _node: ?*Node, _bus: NodeBus) *@This() {
        return objc.msgSend(_self, "initWithNode:bus:", *@This(), .{ _node, _bus });
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn node(_self: *@This()) ?*Node {
        return objc.msgSend(_self, "node", ?*Node, .{});
    }

    pub fn bus(_self: *@This()) NodeBus {
        return objc.msgSend(_self, "bus", NodeBus, .{});
    }
};

pub const ConverterPrimeMethod = objc.NSInteger;
pub const ConverterPrimeMethod__Pre: objc.NSInteger = 0;
pub const ConverterPrimeMethod__Normal: objc.NSInteger = 1;
pub const ConverterPrimeMethod__None: objc.NSInteger = 2;

pub const ConverterPrimeInfo = extern struct {
    leadingFrames: FrameCount,
    trailingFrames: FrameCount,
};

pub const ConverterInputStatus = objc.NSInteger;
pub const ConverterInputStatus__HaveData: objc.NSInteger = 0;
pub const ConverterInputStatus__NoDataNow: objc.NSInteger = 1;
pub const ConverterInputStatus__EndOfStream: objc.NSInteger = 2;

pub const ConverterOutputStatus = objc.NSInteger;
pub const ConverterOutputStatus__HaveData: objc.NSInteger = 0;
pub const ConverterOutputStatus__InputRanDry: objc.NSInteger = 1;
pub const ConverterOutputStatus__EndOfStream: objc.NSInteger = 2;
pub const ConverterOutputStatus__Error: objc.NSInteger = 3;

pub const ConverterInputBlock = *const fn (PacketCount, ?*ConverterInputStatus) callconv(.C) ?*Buffer;

/// https://developer.apple.com/documentation/AVFAudio/AVAudioConverter?language=objc
pub const Converter = opaque {
    pub const Internal = objc.ExternClass("AVAudioConverter", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initFromFormatToFormat(_self: *@This(), _fromFormat: ?*Format, _toFormat: ?*Format) *@This() {
        return objc.msgSend(_self, "initFromFormat:toFormat:", *@This(), .{ _fromFormat, _toFormat });
    }

    pub fn reset(_self: *@This()) void {
        return objc.msgSend(_self, "reset", void, .{});
    }

    pub fn convertToBufferFromBufferError(_self: *@This(), _outputBuffer: ?*PCMBuffer, _inputBuffer: ?*const PCMBuffer, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "convertToBuffer:fromBuffer:error:", objc.BOOL, .{ _outputBuffer, _inputBuffer, _outError });
    }

    pub fn convertToBufferErrorWithInputFromBlock(_self: *@This(), _outputBuffer: ?*Buffer, _outError: ?*?*foundation.Error, _inputBlock: ConverterInputBlock) ConverterOutputStatus {
        return objc.msgSend(_self, "convertToBuffer:error:withInputFromBlock:", ConverterOutputStatus, .{ _outputBuffer, _outError, _inputBlock });
    }

    pub fn inputFormat(_self: *@This()) ?*Format {
        return objc.msgSend(_self, "inputFormat", ?*Format, .{});
    }

    pub fn outputFormat(_self: *@This()) ?*Format {
        return objc.msgSend(_self, "outputFormat", ?*Format, .{});
    }

    pub fn channelMap(_self: *@This()) ?*foundation.Array(?*foundation.Number) {
        return objc.msgSend(_self, "channelMap", ?*foundation.Array(?*foundation.Number), .{});
    }

    pub fn setChannelMap(_self: *@This(), _channelMap: ?*foundation.Array(?*foundation.Number)) void {
        return objc.msgSend(_self, "setChannelMap:", void, .{_channelMap});
    }

    pub fn magicCookie(_self: *@This()) ?*foundation.Data {
        return objc.msgSend(_self, "magicCookie", ?*foundation.Data, .{});
    }

    pub fn setMagicCookie(_self: *@This(), _magicCookie: ?*foundation.Data) void {
        return objc.msgSend(_self, "setMagicCookie:", void, .{_magicCookie});
    }

    pub fn downmix(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "downmix", objc.BOOL, .{});
    }

    pub fn setDownmix(_self: *@This(), _downmix: objc.BOOL) void {
        return objc.msgSend(_self, "setDownmix:", void, .{_downmix});
    }

    pub fn dither(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "dither", objc.BOOL, .{});
    }

    pub fn setDither(_self: *@This(), _dither: objc.BOOL) void {
        return objc.msgSend(_self, "setDither:", void, .{_dither});
    }

    pub fn sampleRateConverterQuality(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "sampleRateConverterQuality", objc.NSInteger, .{});
    }

    pub fn setSampleRateConverterQuality(_self: *@This(), _sampleRateConverterQuality: objc.NSInteger) void {
        return objc.msgSend(_self, "setSampleRateConverterQuality:", void, .{_sampleRateConverterQuality});
    }

    pub fn sampleRateConverterAlgorithm(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "sampleRateConverterAlgorithm", ?*foundation.String, .{});
    }

    pub fn setSampleRateConverterAlgorithm(_self: *@This(), _sampleRateConverterAlgorithm: ?*foundation.String) void {
        return objc.msgSend(_self, "setSampleRateConverterAlgorithm:", void, .{_sampleRateConverterAlgorithm});
    }

    pub fn primeMethod(_self: *@This()) ConverterPrimeMethod {
        return objc.msgSend(_self, "primeMethod", ConverterPrimeMethod, .{});
    }

    pub fn setPrimeMethod(_self: *@This(), _primeMethod: ConverterPrimeMethod) void {
        return objc.msgSend(_self, "setPrimeMethod:", void, .{_primeMethod});
    }

    pub fn primeInfo(_self: *@This()) ConverterPrimeInfo {
        return objc.msgSend(_self, "primeInfo", ConverterPrimeInfo, .{});
    }

    pub fn setPrimeInfo(_self: *@This(), _primeInfo: ConverterPrimeInfo) void {
        return objc.msgSend(_self, "setPrimeInfo:", void, .{_primeInfo});
    }

    pub fn bitRate(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "bitRate", objc.NSInteger, .{});
    }

    pub fn setBitRate(_self: *@This(), _bitRate: objc.NSInteger) void {
        return objc.msgSend(_self, "setBitRate:", void, .{_bitRate});
    }

    pub fn bitRateStrategy(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "bitRateStrategy", ?*foundation.String, .{});
    }

    pub fn setBitRateStrategy(_self: *@This(), _bitRateStrategy: ?*foundation.String) void {
        return objc.msgSend(_self, "setBitRateStrategy:", void, .{_bitRateStrategy});
    }

    pub fn maximumOutputPacketSize(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "maximumOutputPacketSize", objc.NSInteger, .{});
    }

    pub fn availableEncodeBitRates(_self: *@This()) ?*foundation.Array(?*foundation.Number) {
        return objc.msgSend(_self, "availableEncodeBitRates", ?*foundation.Array(?*foundation.Number), .{});
    }

    pub fn applicableEncodeBitRates(_self: *@This()) ?*foundation.Array(?*foundation.Number) {
        return objc.msgSend(_self, "applicableEncodeBitRates", ?*foundation.Array(?*foundation.Number), .{});
    }

    pub fn availableEncodeSampleRates(_self: *@This()) ?*foundation.Array(?*foundation.Number) {
        return objc.msgSend(_self, "availableEncodeSampleRates", ?*foundation.Array(?*foundation.Number), .{});
    }

    pub fn applicableEncodeSampleRates(_self: *@This()) ?*foundation.Array(?*foundation.Number) {
        return objc.msgSend(_self, "applicableEncodeSampleRates", ?*foundation.Array(?*foundation.Number), .{});
    }

    pub fn availableEncodeChannelLayoutTags(_self: *@This()) ?*foundation.Array(?*foundation.Number) {
        return objc.msgSend(_self, "availableEncodeChannelLayoutTags", ?*foundation.Array(?*foundation.Number), .{});
    }
};

pub const NodeTapBlock = *const fn (?*PCMBuffer, ?*Time) callconv(.C) void;

/// https://developer.apple.com/documentation/AVFAudio/AVAudioNode?language=objc
pub const Node = opaque {
    pub const Internal = objc.ExternClass("AVAudioNode", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn reset(_self: *@This()) void {
        return objc.msgSend(_self, "reset", void, .{});
    }

    pub fn inputFormatForBus(_self: *@This(), _bus: NodeBus) ?*Format {
        return objc.msgSend(_self, "inputFormatForBus:", ?*Format, .{_bus});
    }

    pub fn outputFormatForBus(_self: *@This(), _bus: NodeBus) ?*Format {
        return objc.msgSend(_self, "outputFormatForBus:", ?*Format, .{_bus});
    }

    pub fn nameForInputBus(_self: *@This(), _bus: NodeBus) ?*foundation.String {
        return objc.msgSend(_self, "nameForInputBus:", ?*foundation.String, .{_bus});
    }

    pub fn nameForOutputBus(_self: *@This(), _bus: NodeBus) ?*foundation.String {
        return objc.msgSend(_self, "nameForOutputBus:", ?*foundation.String, .{_bus});
    }

    pub fn installTapOnBusBufferSizeFormatBlock(
        _self: *@This(),
        _bus: NodeBus,
        _bufferSize: FrameCount,
        _format: ?*Format,
        _tapBlock: NodeTapBlock,
    ) void {
        return objc.msgSend(_self, "installTapOnBus:bufferSize:format:block:", void, .{
            _bus,
            _bufferSize,
            _format,
            _tapBlock,
        });
    }

    pub fn removeTapOnBus(_self: *@This(), _bus: NodeBus) void {
        return objc.msgSend(_self, "removeTapOnBus:", void, .{_bus});
    }

    pub fn engine(_self: *@This()) ?*Engine {
        return objc.msgSend(_self, "engine", ?*Engine, .{});
    }

    pub fn numberOfInputs(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "numberOfInputs", objc.NSUInteger, .{});
    }

    pub fn numberOfOutputs(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "numberOfOutputs", objc.NSUInteger, .{});
    }

    pub fn lastRenderTime(_self: *@This()) ?*Time {
        return objc.msgSend(_self, "lastRenderTime", ?*Time, .{});
    }

    pub fn auAudioUnit(_self: *@This()) ?*audio_toolbox.AUAudioUnit {
        return objc.msgSend(_self, "AUAudioUnit", ?*audio_toolbox.AUAudioUnit, .{});
    }

    pub fn latency(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "latency", foundation.TimeInterval, .{});
    }

    pub fn outputPresentationLatency(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "outputPresentationLatency", foundation.TimeInterval, .{});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioMixing?language=objc
pub const Mixing = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{ StereoMixing, AVAudio3DMixing });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn pan(_self: *@This()) f32 {
        return objc.msgSend(_self, "pan", f32, .{});
    }

    pub fn setPan(_self: *@This(), _pan: f32) void {
        return objc.msgSend(_self, "setPan:", void, .{_pan});
    }

    pub fn renderingAlgorithm(_self: *@This()) AVAudio3DMixingRenderingAlgorithm {
        return objc.msgSend(_self, "renderingAlgorithm", AVAudio3DMixingRenderingAlgorithm, .{});
    }

    pub fn setRenderingAlgorithm(_self: *@This(), _renderingAlgorithm: AVAudio3DMixingRenderingAlgorithm) void {
        return objc.msgSend(_self, "setRenderingAlgorithm:", void, .{_renderingAlgorithm});
    }

    pub fn sourceMode(_self: *@This()) AVAudio3DMixingSourceMode {
        return objc.msgSend(_self, "sourceMode", AVAudio3DMixingSourceMode, .{});
    }

    pub fn setSourceMode(_self: *@This(), _sourceMode: AVAudio3DMixingSourceMode) void {
        return objc.msgSend(_self, "setSourceMode:", void, .{_sourceMode});
    }

    pub fn pointSourceInHeadMode(_self: *@This()) AVAudio3DMixingPointSourceInHeadMode {
        return objc.msgSend(_self, "pointSourceInHeadMode", AVAudio3DMixingPointSourceInHeadMode, .{});
    }

    pub fn setPointSourceInHeadMode(_self: *@This(), _pointSourceInHeadMode: AVAudio3DMixingPointSourceInHeadMode) void {
        return objc.msgSend(_self, "setPointSourceInHeadMode:", void, .{_pointSourceInHeadMode});
    }

    pub fn rate(_self: *@This()) f32 {
        return objc.msgSend(_self, "rate", f32, .{});
    }

    pub fn setRate(_self: *@This(), _rate: f32) void {
        return objc.msgSend(_self, "setRate:", void, .{_rate});
    }

    pub fn reverbBlend(_self: *@This()) f32 {
        return objc.msgSend(_self, "reverbBlend", f32, .{});
    }

    pub fn setReverbBlend(_self: *@This(), _reverbBlend: f32) void {
        return objc.msgSend(_self, "setReverbBlend:", void, .{_reverbBlend});
    }

    pub fn obstruction(_self: *@This()) f32 {
        return objc.msgSend(_self, "obstruction", f32, .{});
    }

    pub fn setObstruction(_self: *@This(), _obstruction: f32) void {
        return objc.msgSend(_self, "setObstruction:", void, .{_obstruction});
    }

    pub fn occlusion(_self: *@This()) f32 {
        return objc.msgSend(_self, "occlusion", f32, .{});
    }

    pub fn setOcclusion(_self: *@This(), _occlusion: f32) void {
        return objc.msgSend(_self, "setOcclusion:", void, .{_occlusion});
    }

    pub fn position(_self: *@This()) AVAudio3DPoint {
        return objc.msgSend(_self, "position", AVAudio3DPoint, .{});
    }

    pub fn setPosition(_self: *@This(), _position: AVAudio3DPoint) void {
        return objc.msgSend(_self, "setPosition:", void, .{_position});
    }

    pub fn destinationForMixerBus(_self: *@This(), _mixer: ?*Node, _bus: NodeBus) ?*MixingDestination {
        return objc.msgSend(_self, "destinationForMixer:bus:", ?*MixingDestination, .{ _mixer, _bus });
    }

    pub fn volume(_self: *@This()) f32 {
        return objc.msgSend(_self, "volume", f32, .{});
    }

    pub fn setVolume(_self: *@This(), _volume: f32) void {
        return objc.msgSend(_self, "setVolume:", void, .{_volume});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioStereoMixing?language=objc
pub const StereoMixing = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn pan(_self: *@This()) f32 {
        return objc.msgSend(_self, "pan", f32, .{});
    }

    pub fn setPan(_self: *@This(), _pan: f32) void {
        return objc.msgSend(_self, "setPan:", void, .{_pan});
    }
};

pub const AVAudio3DMixingRenderingAlgorithm = objc.NSInteger;
pub const AVAudio3DMixingRenderingAlgorithm_EqualPowerPanning: objc.NSInteger = 0;
pub const AVAudio3DMixingRenderingAlgorithm_SphericalHead: objc.NSInteger = 1;
pub const AVAudio3DMixingRenderingAlgorithm_HRTF: objc.NSInteger = 2;
pub const AVAudio3DMixingRenderingAlgorithm_SoundField: objc.NSInteger = 3;
pub const AVAudio3DMixingRenderingAlgorithm_StereoPassThrough: objc.NSInteger = 5;
pub const AVAudio3DMixingRenderingAlgorithm_HRTFHQ: objc.NSInteger = 6;
pub const AVAudio3DMixingRenderingAlgorithm_Auto: objc.NSInteger = 7;

pub const AVAudio3DMixingSourceMode = objc.NSInteger;
pub const AVAudio3DMixingSourceMode_SpatializeIfMono: objc.NSInteger = 0;
pub const AVAudio3DMixingSourceMode_Bypass: objc.NSInteger = 1;
pub const AVAudio3DMixingSourceMode_PointSource: objc.NSInteger = 2;
pub const AVAudio3DMixingSourceMode_AmbienceBed: objc.NSInteger = 3;

pub const AVAudio3DMixingPointSourceInHeadMode = objc.NSInteger;
pub const AVAudio3DMixingPointSourceInHeadMode_Mono: objc.NSInteger = 0;
pub const AVAudio3DMixingPointSourceInHeadMode_Bypass: objc.NSInteger = 1;

/// https://developer.apple.com/documentation/AVFAudio/AVAudio3DMixing?language=objc
pub const AVAudio3DMixing = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn renderingAlgorithm(_self: *@This()) AVAudio3DMixingRenderingAlgorithm {
        return objc.msgSend(_self, "renderingAlgorithm", AVAudio3DMixingRenderingAlgorithm, .{});
    }

    pub fn setRenderingAlgorithm(_self: *@This(), _renderingAlgorithm: AVAudio3DMixingRenderingAlgorithm) void {
        return objc.msgSend(_self, "setRenderingAlgorithm:", void, .{_renderingAlgorithm});
    }

    pub fn sourceMode(_self: *@This()) AVAudio3DMixingSourceMode {
        return objc.msgSend(_self, "sourceMode", AVAudio3DMixingSourceMode, .{});
    }

    pub fn setSourceMode(_self: *@This(), _sourceMode: AVAudio3DMixingSourceMode) void {
        return objc.msgSend(_self, "setSourceMode:", void, .{_sourceMode});
    }

    pub fn pointSourceInHeadMode(_self: *@This()) AVAudio3DMixingPointSourceInHeadMode {
        return objc.msgSend(_self, "pointSourceInHeadMode", AVAudio3DMixingPointSourceInHeadMode, .{});
    }

    pub fn setPointSourceInHeadMode(_self: *@This(), _pointSourceInHeadMode: AVAudio3DMixingPointSourceInHeadMode) void {
        return objc.msgSend(_self, "setPointSourceInHeadMode:", void, .{_pointSourceInHeadMode});
    }

    pub fn rate(_self: *@This()) f32 {
        return objc.msgSend(_self, "rate", f32, .{});
    }

    pub fn setRate(_self: *@This(), _rate: f32) void {
        return objc.msgSend(_self, "setRate:", void, .{_rate});
    }

    pub fn reverbBlend(_self: *@This()) f32 {
        return objc.msgSend(_self, "reverbBlend", f32, .{});
    }

    pub fn setReverbBlend(_self: *@This(), _reverbBlend: f32) void {
        return objc.msgSend(_self, "setReverbBlend:", void, .{_reverbBlend});
    }

    pub fn obstruction(_self: *@This()) f32 {
        return objc.msgSend(_self, "obstruction", f32, .{});
    }

    pub fn setObstruction(_self: *@This(), _obstruction: f32) void {
        return objc.msgSend(_self, "setObstruction:", void, .{_obstruction});
    }

    pub fn occlusion(_self: *@This()) f32 {
        return objc.msgSend(_self, "occlusion", f32, .{});
    }

    pub fn setOcclusion(_self: *@This(), _occlusion: f32) void {
        return objc.msgSend(_self, "setOcclusion:", void, .{_occlusion});
    }

    pub fn position(_self: *@This()) AVAudio3DPoint {
        return objc.msgSend(_self, "position", AVAudio3DPoint, .{});
    }

    pub fn setPosition(_self: *@This(), _position: AVAudio3DPoint) void {
        return objc.msgSend(_self, "setPosition:", void, .{_position});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioMixingDestination?language=objc
pub const MixingDestination = opaque {
    pub const Internal = objc.ExternClass("AVAudioMixingDestination", @This(), objc.NSObject, &.{Mixing});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn pan(_self: *@This()) f32 {
        return objc.msgSend(_self, "pan", f32, .{});
    }

    pub fn setPan(_self: *@This(), _pan: f32) void {
        return objc.msgSend(_self, "setPan:", void, .{_pan});
    }

    pub fn renderingAlgorithm(_self: *@This()) AVAudio3DMixingRenderingAlgorithm {
        return objc.msgSend(_self, "renderingAlgorithm", AVAudio3DMixingRenderingAlgorithm, .{});
    }

    pub fn setRenderingAlgorithm(_self: *@This(), _renderingAlgorithm: AVAudio3DMixingRenderingAlgorithm) void {
        return objc.msgSend(_self, "setRenderingAlgorithm:", void, .{_renderingAlgorithm});
    }

    pub fn sourceMode(_self: *@This()) AVAudio3DMixingSourceMode {
        return objc.msgSend(_self, "sourceMode", AVAudio3DMixingSourceMode, .{});
    }

    pub fn setSourceMode(_self: *@This(), _sourceMode: AVAudio3DMixingSourceMode) void {
        return objc.msgSend(_self, "setSourceMode:", void, .{_sourceMode});
    }

    pub fn pointSourceInHeadMode(_self: *@This()) AVAudio3DMixingPointSourceInHeadMode {
        return objc.msgSend(_self, "pointSourceInHeadMode", AVAudio3DMixingPointSourceInHeadMode, .{});
    }

    pub fn setPointSourceInHeadMode(_self: *@This(), _pointSourceInHeadMode: AVAudio3DMixingPointSourceInHeadMode) void {
        return objc.msgSend(_self, "setPointSourceInHeadMode:", void, .{_pointSourceInHeadMode});
    }

    pub fn rate(_self: *@This()) f32 {
        return objc.msgSend(_self, "rate", f32, .{});
    }

    pub fn setRate(_self: *@This(), _rate: f32) void {
        return objc.msgSend(_self, "setRate:", void, .{_rate});
    }

    pub fn reverbBlend(_self: *@This()) f32 {
        return objc.msgSend(_self, "reverbBlend", f32, .{});
    }

    pub fn setReverbBlend(_self: *@This(), _reverbBlend: f32) void {
        return objc.msgSend(_self, "setReverbBlend:", void, .{_reverbBlend});
    }

    pub fn obstruction(_self: *@This()) f32 {
        return objc.msgSend(_self, "obstruction", f32, .{});
    }

    pub fn setObstruction(_self: *@This(), _obstruction: f32) void {
        return objc.msgSend(_self, "setObstruction:", void, .{_obstruction});
    }

    pub fn occlusion(_self: *@This()) f32 {
        return objc.msgSend(_self, "occlusion", f32, .{});
    }

    pub fn setOcclusion(_self: *@This(), _occlusion: f32) void {
        return objc.msgSend(_self, "setOcclusion:", void, .{_occlusion});
    }

    pub fn position(_self: *@This()) AVAudio3DPoint {
        return objc.msgSend(_self, "position", AVAudio3DPoint, .{});
    }

    pub fn setPosition(_self: *@This(), _position: AVAudio3DPoint) void {
        return objc.msgSend(_self, "setPosition:", void, .{_position});
    }

    pub fn destinationForMixerBus(_self: *@This(), _mixer: ?*Node, _bus: NodeBus) ?*MixingDestination {
        return objc.msgSend(_self, "destinationForMixer:bus:", ?*MixingDestination, .{ _mixer, _bus });
    }

    pub fn volume(_self: *@This()) f32 {
        return objc.msgSend(_self, "volume", f32, .{});
    }

    pub fn setVolume(_self: *@This(), _volume: f32) void {
        return objc.msgSend(_self, "setVolume:", void, .{_volume});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn connectionPoint(_self: *@This()) ?*ConnectionPoint {
        return objc.msgSend(_self, "connectionPoint", ?*ConnectionPoint, .{});
    }
};

pub const IONodeInputBlock = core_audio_types.BufferList;

pub const VoiceProcessingSpeechActivityEvent = objc.NSInteger;
pub const VoiceProcessingSpeechActivityEvent_Started: objc.NSInteger = 0;
pub const VoiceProcessingSpeechActivityEvent_Ended: objc.NSInteger = 1;

pub const VoiceProcessingOtherAudioDuckingLevel = objc.NSInteger;
pub const VoiceProcessingOtherAudioDuckingLevel_Default: objc.NSInteger = 0;
pub const VoiceProcessingOtherAudioDuckingLevel_Min: objc.NSInteger = 10;
pub const VoiceProcessingOtherAudioDuckingLevel_Mid: objc.NSInteger = 20;
pub const VoiceProcessingOtherAudioDuckingLevel_Max: objc.NSInteger = 30;

pub const VoiceProcessingOtherAudioDuckingConfiguration = extern struct {
    enableAdvancedDucking: objc.BOOL,
    duckingLevel: VoiceProcessingOtherAudioDuckingLevel,
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioIONode?language=objc
pub const IONode = opaque {
    pub const Internal = objc.ExternClass("AVAudioIONode", @This(), Node, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn setVoiceProcessingEnabledError(_self: *@This(), _enabled: objc.BOOL, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setVoiceProcessingEnabled:error:", objc.BOOL, .{ _enabled, _outError });
    }

    pub fn presentationLatency(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "presentationLatency", foundation.TimeInterval, .{});
    }

    pub fn audioUnit(_self: *@This()) audio_toolbox.Unit {
        return objc.msgSend(_self, "audioUnit", audio_toolbox.Unit, .{});
    }

    pub fn isVoiceProcessingEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isVoiceProcessingEnabled", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioInputNode?language=objc
pub const InputNode = opaque {
    pub const Internal = objc.ExternClass("AVAudioInputNode", @This(), IONode, &.{Mixing});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn pan(_self: *@This()) f32 {
        return objc.msgSend(_self, "pan", f32, .{});
    }

    pub fn setPan(_self: *@This(), _pan: f32) void {
        return objc.msgSend(_self, "setPan:", void, .{_pan});
    }

    pub fn renderingAlgorithm(_self: *@This()) AVAudio3DMixingRenderingAlgorithm {
        return objc.msgSend(_self, "renderingAlgorithm", AVAudio3DMixingRenderingAlgorithm, .{});
    }

    pub fn setRenderingAlgorithm(_self: *@This(), _renderingAlgorithm: AVAudio3DMixingRenderingAlgorithm) void {
        return objc.msgSend(_self, "setRenderingAlgorithm:", void, .{_renderingAlgorithm});
    }

    pub fn sourceMode(_self: *@This()) AVAudio3DMixingSourceMode {
        return objc.msgSend(_self, "sourceMode", AVAudio3DMixingSourceMode, .{});
    }

    pub fn setSourceMode(_self: *@This(), _sourceMode: AVAudio3DMixingSourceMode) void {
        return objc.msgSend(_self, "setSourceMode:", void, .{_sourceMode});
    }

    pub fn pointSourceInHeadMode(_self: *@This()) AVAudio3DMixingPointSourceInHeadMode {
        return objc.msgSend(_self, "pointSourceInHeadMode", AVAudio3DMixingPointSourceInHeadMode, .{});
    }

    pub fn setPointSourceInHeadMode(_self: *@This(), _pointSourceInHeadMode: AVAudio3DMixingPointSourceInHeadMode) void {
        return objc.msgSend(_self, "setPointSourceInHeadMode:", void, .{_pointSourceInHeadMode});
    }

    pub fn rate(_self: *@This()) f32 {
        return objc.msgSend(_self, "rate", f32, .{});
    }

    pub fn setRate(_self: *@This(), _rate: f32) void {
        return objc.msgSend(_self, "setRate:", void, .{_rate});
    }

    pub fn reverbBlend(_self: *@This()) f32 {
        return objc.msgSend(_self, "reverbBlend", f32, .{});
    }

    pub fn setReverbBlend(_self: *@This(), _reverbBlend: f32) void {
        return objc.msgSend(_self, "setReverbBlend:", void, .{_reverbBlend});
    }

    pub fn obstruction(_self: *@This()) f32 {
        return objc.msgSend(_self, "obstruction", f32, .{});
    }

    pub fn setObstruction(_self: *@This(), _obstruction: f32) void {
        return objc.msgSend(_self, "setObstruction:", void, .{_obstruction});
    }

    pub fn occlusion(_self: *@This()) f32 {
        return objc.msgSend(_self, "occlusion", f32, .{});
    }

    pub fn setOcclusion(_self: *@This(), _occlusion: f32) void {
        return objc.msgSend(_self, "setOcclusion:", void, .{_occlusion});
    }

    pub fn position(_self: *@This()) AVAudio3DPoint {
        return objc.msgSend(_self, "position", AVAudio3DPoint, .{});
    }

    pub fn setPosition(_self: *@This(), _position: AVAudio3DPoint) void {
        return objc.msgSend(_self, "setPosition:", void, .{_position});
    }

    pub fn destinationForMixerBus(_self: *@This(), _mixer: ?*Node, _bus: NodeBus) ?*MixingDestination {
        return objc.msgSend(_self, "destinationForMixer:bus:", ?*MixingDestination, .{ _mixer, _bus });
    }

    pub fn volume(_self: *@This()) f32 {
        return objc.msgSend(_self, "volume", f32, .{});
    }

    pub fn setVolume(_self: *@This(), _volume: f32) void {
        return objc.msgSend(_self, "setVolume:", void, .{_volume});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn setManualRenderingInputPCMFormatInputBlock(_self: *@This(), _format: ?*Format, _block: IONodeInputBlock) objc.BOOL {
        return objc.msgSend(_self, "setManualRenderingInputPCMFormat:inputBlock:", objc.BOOL, .{ _format, _block });
    }

    pub fn setMutedSpeechActivityEventListener(_self: *@This(), _listenerBlock: *const fn (VoiceProcessingSpeechActivityEvent) callconv(.C) void) objc.BOOL {
        return objc.msgSend(_self, "setMutedSpeechActivityEventListener:", objc.BOOL, .{_listenerBlock});
    }

    pub fn isVoiceProcessingBypassed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isVoiceProcessingBypassed", objc.BOOL, .{});
    }

    pub fn setVoiceProcessingBypassed(_self: *@This(), _voiceProcessingBypassed: objc.BOOL) void {
        return objc.msgSend(_self, "setVoiceProcessingBypassed:", void, .{_voiceProcessingBypassed});
    }

    pub fn isVoiceProcessingAGCEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isVoiceProcessingAGCEnabled", objc.BOOL, .{});
    }

    pub fn setVoiceProcessingAGCEnabled(_self: *@This(), _voiceProcessingAGCEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setVoiceProcessingAGCEnabled:", void, .{_voiceProcessingAGCEnabled});
    }

    pub fn isVoiceProcessingInputMuted(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isVoiceProcessingInputMuted", objc.BOOL, .{});
    }

    pub fn setVoiceProcessingInputMuted(_self: *@This(), _voiceProcessingInputMuted: objc.BOOL) void {
        return objc.msgSend(_self, "setVoiceProcessingInputMuted:", void, .{_voiceProcessingInputMuted});
    }

    pub fn voiceProcessingOtherAudioDuckingConfiguration(_self: *@This()) VoiceProcessingOtherAudioDuckingConfiguration {
        return objc.msgSend(_self, "voiceProcessingOtherAudioDuckingConfiguration", VoiceProcessingOtherAudioDuckingConfiguration, .{});
    }

    pub fn setVoiceProcessingOtherAudioDuckingConfiguration(_self: *@This(), _voiceProcessingOtherAudioDuckingConfiguration: VoiceProcessingOtherAudioDuckingConfiguration) void {
        return objc.msgSend(_self, "setVoiceProcessingOtherAudioDuckingConfiguration:", void, .{_voiceProcessingOtherAudioDuckingConfiguration});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioOutputNode?language=objc
pub const OutputNode = opaque {
    pub const Internal = objc.ExternClass("AVAudioOutputNode", @This(), IONode, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }
};

pub const EngineManualRenderingError = objc.OSStatus;
pub const EngineManualRenderingError_InvalidMode: objc.OSStatus = -80800;
pub const EngineManualRenderingError_Initialized: objc.OSStatus = -80801;
pub const EngineManualRenderingError_NotRunning: objc.OSStatus = -80802;

pub const EngineManualRenderingStatus = objc.NSInteger;
pub const EngineManualRenderingStatus_Error: objc.NSInteger = -1;
pub const EngineManualRenderingStatus_Success: objc.NSInteger = 0;
pub const EngineManualRenderingStatus_InsufficientDataFromInputNode: objc.NSInteger = 1;
pub const EngineManualRenderingStatus_CannotDoInCurrentContext: objc.NSInteger = 2;

pub const EngineManualRenderingMode = objc.NSInteger;
pub const EngineManualRenderingMode_Offline: objc.NSInteger = 0;
pub const EngineManualRenderingMode_Realtime: objc.NSInteger = 1;

pub const EngineManualRenderingBlock = EngineManualRenderingStatus;

/// https://developer.apple.com/documentation/AVFAudio/AVAudioEngine?language=objc
pub const Engine = opaque {
    pub const Internal = objc.ExternClass("AVAudioEngine", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn attachNode(_self: *@This(), _node: ?*Node) void {
        return objc.msgSend(_self, "attachNode:", void, .{_node});
    }

    pub fn detachNode(_self: *@This(), _node: ?*Node) void {
        return objc.msgSend(_self, "detachNode:", void, .{_node});
    }

    pub fn connectToFromBusToBusFormat(
        _self: *@This(),
        _node1: ?*Node,
        _node2: ?*Node,
        _bus1: NodeBus,
        _bus2: NodeBus,
        _format: ?*Format,
    ) void {
        return objc.msgSend(_self, "connect:to:fromBus:toBus:format:", void, .{
            _node1,
            _node2,
            _bus1,
            _bus2,
            _format,
        });
    }

    pub fn connectToFormat(_self: *@This(), _node1: ?*Node, _node2: ?*Node, _format: ?*Format) void {
        return objc.msgSend(_self, "connect:to:format:", void, .{ _node1, _node2, _format });
    }

    pub fn connectToConnectionPointsFromBusFormat(
        _self: *@This(),
        _sourceNode: ?*Node,
        _destNodes: ?*foundation.Array(?*ConnectionPoint),
        _sourceBus: NodeBus,
        _format: ?*Format,
    ) void {
        return objc.msgSend(_self, "connect:toConnectionPoints:fromBus:format:", void, .{
            _sourceNode,
            _destNodes,
            _sourceBus,
            _format,
        });
    }

    pub fn disconnectNodeInputBus(_self: *@This(), _node: ?*Node, _bus: NodeBus) void {
        return objc.msgSend(_self, "disconnectNodeInput:bus:", void, .{ _node, _bus });
    }

    pub fn disconnectNodeInput(_self: *@This(), _node: ?*Node) void {
        return objc.msgSend(_self, "disconnectNodeInput:", void, .{_node});
    }

    pub fn disconnectNodeOutputBus(_self: *@This(), _node: ?*Node, _bus: NodeBus) void {
        return objc.msgSend(_self, "disconnectNodeOutput:bus:", void, .{ _node, _bus });
    }

    pub fn disconnectNodeOutput(_self: *@This(), _node: ?*Node) void {
        return objc.msgSend(_self, "disconnectNodeOutput:", void, .{_node});
    }

    pub fn prepare(_self: *@This()) void {
        return objc.msgSend(_self, "prepare", void, .{});
    }

    pub fn startAndReturnError(_self: *@This(), _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "startAndReturnError:", objc.BOOL, .{_outError});
    }

    pub fn pause(_self: *@This()) void {
        return objc.msgSend(_self, "pause", void, .{});
    }

    pub fn reset(_self: *@This()) void {
        return objc.msgSend(_self, "reset", void, .{});
    }

    pub fn stop(_self: *@This()) void {
        return objc.msgSend(_self, "stop", void, .{});
    }

    pub fn inputConnectionPointForNodeInputBus(_self: *@This(), _node: ?*Node, _bus: NodeBus) ?*ConnectionPoint {
        return objc.msgSend(_self, "inputConnectionPointForNode:inputBus:", ?*ConnectionPoint, .{ _node, _bus });
    }

    pub fn outputConnectionPointsForNodeOutputBus(_self: *@This(), _node: ?*Node, _bus: NodeBus) ?*foundation.Array(?*ConnectionPoint) {
        return objc.msgSend(_self, "outputConnectionPointsForNode:outputBus:", ?*foundation.Array(?*ConnectionPoint), .{ _node, _bus });
    }

    pub fn enableManualRenderingModeFormatMaximumFrameCountError(
        _self: *@This(),
        _mode: EngineManualRenderingMode,
        _pcmFormat: ?*Format,
        _maximumFrameCount: FrameCount,
        _outError: ?*?*foundation.Error,
    ) objc.BOOL {
        return objc.msgSend(_self, "enableManualRenderingMode:format:maximumFrameCount:error:", objc.BOOL, .{
            _mode,
            _pcmFormat,
            _maximumFrameCount,
            _outError,
        });
    }

    pub fn disableManualRenderingMode(_self: *@This()) void {
        return objc.msgSend(_self, "disableManualRenderingMode", void, .{});
    }

    pub fn renderOfflineToBufferError(_self: *@This(), _numberOfFrames: FrameCount, _buffer: ?*PCMBuffer, _outError: ?*?*foundation.Error) EngineManualRenderingStatus {
        return objc.msgSend(_self, "renderOffline:toBuffer:error:", EngineManualRenderingStatus, .{ _numberOfFrames, _buffer, _outError });
    }

    pub fn connectMIDIToFormatBlock(
        _self: *@This(),
        _sourceNode: ?*Node,
        _destinationNode: ?*Node,
        _format: ?*Format,
        _tapBlock: audio_toolbox.AUMIDIOutputEventBlock,
    ) void {
        return objc.msgSend(_self, "connectMIDI:to:format:block:", void, .{
            _sourceNode,
            _destinationNode,
            _format,
            _tapBlock,
        });
    }

    pub fn connectMIDIToFormatEventListBlock(
        _self: *@This(),
        _sourceNode: ?*Node,
        _destinationNode: ?*Node,
        _format: ?*Format,
        _tapBlock: audio_toolbox.AUMIDIEventListBlock,
    ) void {
        return objc.msgSend(_self, "connectMIDI:to:format:eventListBlock:", void, .{
            _sourceNode,
            _destinationNode,
            _format,
            _tapBlock,
        });
    }

    pub fn connectMIDIToNodesFormatBlock(
        _self: *@This(),
        _sourceNode: ?*Node,
        _destinationNodes: ?*foundation.Array(?*Node),
        _format: ?*Format,
        _tapBlock: audio_toolbox.AUMIDIOutputEventBlock,
    ) void {
        return objc.msgSend(_self, "connectMIDI:toNodes:format:block:", void, .{
            _sourceNode,
            _destinationNodes,
            _format,
            _tapBlock,
        });
    }

    pub fn connectMIDIToNodesFormatEventListBlock(
        _self: *@This(),
        _sourceNode: ?*Node,
        _destinationNodes: ?*foundation.Array(?*Node),
        _format: ?*Format,
        _tapBlock: audio_toolbox.AUMIDIEventListBlock,
    ) void {
        return objc.msgSend(_self, "connectMIDI:toNodes:format:eventListBlock:", void, .{
            _sourceNode,
            _destinationNodes,
            _format,
            _tapBlock,
        });
    }

    pub fn disconnectMIDIFrom(_self: *@This(), _sourceNode: ?*Node, _destinationNode: ?*Node) void {
        return objc.msgSend(_self, "disconnectMIDI:from:", void, .{ _sourceNode, _destinationNode });
    }

    pub fn disconnectMIDIFromNodes(_self: *@This(), _sourceNode: ?*Node, _destinationNodes: ?*foundation.Array(?*Node)) void {
        return objc.msgSend(_self, "disconnectMIDI:fromNodes:", void, .{ _sourceNode, _destinationNodes });
    }

    pub fn disconnectMIDIInput(_self: *@This(), _node: ?*Node) void {
        return objc.msgSend(_self, "disconnectMIDIInput:", void, .{_node});
    }

    pub fn disconnectMIDIOutput(_self: *@This(), _node: ?*Node) void {
        return objc.msgSend(_self, "disconnectMIDIOutput:", void, .{_node});
    }

    pub fn musicSequence(_self: *@This()) audio_toolbox.MusicSequence {
        return objc.msgSend(_self, "musicSequence", audio_toolbox.MusicSequence, .{});
    }

    pub fn setMusicSequence(_self: *@This(), _musicSequence: audio_toolbox.MusicSequence) void {
        return objc.msgSend(_self, "setMusicSequence:", void, .{_musicSequence});
    }

    pub fn outputNode(_self: *@This()) ?*OutputNode {
        return objc.msgSend(_self, "outputNode", ?*OutputNode, .{});
    }

    pub fn inputNode(_self: *@This()) ?*InputNode {
        return objc.msgSend(_self, "inputNode", ?*InputNode, .{});
    }

    pub fn mainMixerNode(_self: *@This()) ?*MixerNode {
        return objc.msgSend(_self, "mainMixerNode", ?*MixerNode, .{});
    }

    pub fn isRunning(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRunning", objc.BOOL, .{});
    }

    pub fn isAutoShutdownEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAutoShutdownEnabled", objc.BOOL, .{});
    }

    pub fn setAutoShutdownEnabled(_self: *@This(), _autoShutdownEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setAutoShutdownEnabled:", void, .{_autoShutdownEnabled});
    }

    pub fn attachedNodes(_self: *@This()) ?*foundation.Set(?*Node) {
        return objc.msgSend(_self, "attachedNodes", ?*foundation.Set(?*Node), .{});
    }

    pub fn manualRenderingBlock(_self: *@This()) EngineManualRenderingBlock {
        return objc.msgSend(_self, "manualRenderingBlock", EngineManualRenderingBlock, .{});
    }

    pub fn isInManualRenderingMode(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isInManualRenderingMode", objc.BOOL, .{});
    }

    pub fn manualRenderingMode(_self: *@This()) EngineManualRenderingMode {
        return objc.msgSend(_self, "manualRenderingMode", EngineManualRenderingMode, .{});
    }

    pub fn manualRenderingFormat(_self: *@This()) ?*Format {
        return objc.msgSend(_self, "manualRenderingFormat", ?*Format, .{});
    }

    pub fn manualRenderingMaximumFrameCount(_self: *@This()) FrameCount {
        return objc.msgSend(_self, "manualRenderingMaximumFrameCount", FrameCount, .{});
    }

    pub fn manualRenderingSampleTime(_self: *@This()) FramePosition {
        return objc.msgSend(_self, "manualRenderingSampleTime", FramePosition, .{});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioUnit?language=objc
pub const Unit = opaque {
    pub const Internal = objc.ExternClass("AVAudioUnit", @This(), Node, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn instantiateWithComponentDescriptionOptionsCompletionHandler(_audioComponentDescription: audio_toolbox.ComponentDescription, _options: audio_toolbox.ComponentInstantiationOptions, _completionHandler: *const fn (?*Unit, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(Internal.class(), "instantiateWithComponentDescription:options:completionHandler:", void, .{ _audioComponentDescription, _options, _completionHandler });
    }

    pub fn loadAudioUnitPresetAtURLError(_self: *@This(), _url: ?*foundation.URL, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "loadAudioUnitPresetAtURL:error:", objc.BOOL, .{ _url, _outError });
    }

    pub fn audioComponentDescription(_self: *@This()) audio_toolbox.ComponentDescription {
        return objc.msgSend(_self, "audioComponentDescription", audio_toolbox.ComponentDescription, .{});
    }

    pub fn audioUnit(_self: *@This()) audio_toolbox.Unit {
        return objc.msgSend(_self, "audioUnit", audio_toolbox.Unit, .{});
    }

    pub fn auAudioUnit(_self: *@This()) ?*audio_toolbox.AUAudioUnit {
        return objc.msgSend(_self, "AUAudioUnit", ?*audio_toolbox.AUAudioUnit, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn manufacturerName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "manufacturerName", ?*foundation.String, .{});
    }

    pub fn version(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "version", objc.NSUInteger, .{});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioUnitEffect?language=objc
pub const UnitEffect = opaque {
    pub const Internal = objc.ExternClass("AVAudioUnitEffect", @This(), Unit, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithAudioComponentDescription(_self: *@This(), _audioComponentDescription: audio_toolbox.ComponentDescription) *@This() {
        return objc.msgSend(_self, "initWithAudioComponentDescription:", *@This(), .{_audioComponentDescription});
    }

    pub fn bypass(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "bypass", objc.BOOL, .{});
    }

    pub fn setBypass(_self: *@This(), _bypass: objc.BOOL) void {
        return objc.msgSend(_self, "setBypass:", void, .{_bypass});
    }
};

pub const UnitReverbPreset = objc.NSInteger;
pub const UnitReverbPreset_SmallRoom: objc.NSInteger = 0;
pub const UnitReverbPreset_MediumRoom: objc.NSInteger = 1;
pub const UnitReverbPreset_LargeRoom: objc.NSInteger = 2;
pub const UnitReverbPreset_MediumHall: objc.NSInteger = 3;
pub const UnitReverbPreset_LargeHall: objc.NSInteger = 4;
pub const UnitReverbPreset_Plate: objc.NSInteger = 5;
pub const UnitReverbPreset_MediumChamber: objc.NSInteger = 6;
pub const UnitReverbPreset_LargeChamber: objc.NSInteger = 7;
pub const UnitReverbPreset_Cathedral: objc.NSInteger = 8;
pub const UnitReverbPreset_LargeRoom2: objc.NSInteger = 9;
pub const UnitReverbPreset_MediumHall2: objc.NSInteger = 10;
pub const UnitReverbPreset_MediumHall3: objc.NSInteger = 11;
pub const UnitReverbPreset_LargeHall2: objc.NSInteger = 12;

/// https://developer.apple.com/documentation/AVFAudio/AVAudioUnitReverb?language=objc
pub const UnitReverb = opaque {
    pub const Internal = objc.ExternClass("AVAudioUnitReverb", @This(), UnitEffect, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn loadFactoryPreset(_self: *@This(), _preset: UnitReverbPreset) void {
        return objc.msgSend(_self, "loadFactoryPreset:", void, .{_preset});
    }

    pub fn wetDryMix(_self: *@This()) f32 {
        return objc.msgSend(_self, "wetDryMix", f32, .{});
    }

    pub fn setWetDryMix(_self: *@This(), _wetDryMix: f32) void {
        return objc.msgSend(_self, "setWetDryMix:", void, .{_wetDryMix});
    }
};

pub const UnitEQFilterType = objc.NSInteger;
pub const UnitEQFilterType_Parametric: objc.NSInteger = 0;
pub const UnitEQFilterType_LowPass: objc.NSInteger = 1;
pub const UnitEQFilterType_HighPass: objc.NSInteger = 2;
pub const UnitEQFilterType_ResonantLowPass: objc.NSInteger = 3;
pub const UnitEQFilterType_ResonantHighPass: objc.NSInteger = 4;
pub const UnitEQFilterType_BandPass: objc.NSInteger = 5;
pub const UnitEQFilterType_BandStop: objc.NSInteger = 6;
pub const UnitEQFilterType_LowShelf: objc.NSInteger = 7;
pub const UnitEQFilterType_HighShelf: objc.NSInteger = 8;
pub const UnitEQFilterType_ResonantLowShelf: objc.NSInteger = 9;
pub const UnitEQFilterType_ResonantHighShelf: objc.NSInteger = 10;

/// https://developer.apple.com/documentation/AVFAudio/AVAudioUnitEQFilterParameters?language=objc
pub const UnitEQFilterParameters = opaque {
    pub const Internal = objc.ExternClass("AVAudioUnitEQFilterParameters", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn filterType(_self: *@This()) UnitEQFilterType {
        return objc.msgSend(_self, "filterType", UnitEQFilterType, .{});
    }

    pub fn setFilterType(_self: *@This(), _filterType: UnitEQFilterType) void {
        return objc.msgSend(_self, "setFilterType:", void, .{_filterType});
    }

    pub fn frequency(_self: *@This()) f32 {
        return objc.msgSend(_self, "frequency", f32, .{});
    }

    pub fn setFrequency(_self: *@This(), _frequency: f32) void {
        return objc.msgSend(_self, "setFrequency:", void, .{_frequency});
    }

    pub fn bandwidth(_self: *@This()) f32 {
        return objc.msgSend(_self, "bandwidth", f32, .{});
    }

    pub fn setBandwidth(_self: *@This(), _bandwidth: f32) void {
        return objc.msgSend(_self, "setBandwidth:", void, .{_bandwidth});
    }

    pub fn gain(_self: *@This()) f32 {
        return objc.msgSend(_self, "gain", f32, .{});
    }

    pub fn setGain(_self: *@This(), _gain: f32) void {
        return objc.msgSend(_self, "setGain:", void, .{_gain});
    }

    pub fn bypass(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "bypass", objc.BOOL, .{});
    }

    pub fn setBypass(_self: *@This(), _bypass: objc.BOOL) void {
        return objc.msgSend(_self, "setBypass:", void, .{_bypass});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioUnitEQ?language=objc
pub const UnitEQ = opaque {
    pub const Internal = objc.ExternClass("AVAudioUnitEQ", @This(), UnitEffect, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithNumberOfBands(_self: *@This(), _numberOfBands: objc.NSUInteger) *@This() {
        return objc.msgSend(_self, "initWithNumberOfBands:", *@This(), .{_numberOfBands});
    }

    pub fn bands(_self: *@This()) ?*foundation.Array(?*UnitEQFilterParameters) {
        return objc.msgSend(_self, "bands", ?*foundation.Array(?*UnitEQFilterParameters), .{});
    }

    pub fn globalGain(_self: *@This()) f32 {
        return objc.msgSend(_self, "globalGain", f32, .{});
    }

    pub fn setGlobalGain(_self: *@This(), _globalGain: f32) void {
        return objc.msgSend(_self, "setGlobalGain:", void, .{_globalGain});
    }
};

pub const EnvironmentDistanceAttenuationModel = objc.NSInteger;
pub const EnvironmentDistanceAttenuationModel_Exponential: objc.NSInteger = 1;
pub const EnvironmentDistanceAttenuationModel_Inverse: objc.NSInteger = 2;
pub const EnvironmentDistanceAttenuationModel_Linear: objc.NSInteger = 3;

/// https://developer.apple.com/documentation/AVFAudio/AVAudioEnvironmentDistanceAttenuationParameters?language=objc
pub const EnvironmentDistanceAttenuationParameters = opaque {
    pub const Internal = objc.ExternClass("AVAudioEnvironmentDistanceAttenuationParameters", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn distanceAttenuationModel(_self: *@This()) EnvironmentDistanceAttenuationModel {
        return objc.msgSend(_self, "distanceAttenuationModel", EnvironmentDistanceAttenuationModel, .{});
    }

    pub fn setDistanceAttenuationModel(_self: *@This(), _distanceAttenuationModel: EnvironmentDistanceAttenuationModel) void {
        return objc.msgSend(_self, "setDistanceAttenuationModel:", void, .{_distanceAttenuationModel});
    }

    pub fn referenceDistance(_self: *@This()) f32 {
        return objc.msgSend(_self, "referenceDistance", f32, .{});
    }

    pub fn setReferenceDistance(_self: *@This(), _referenceDistance: f32) void {
        return objc.msgSend(_self, "setReferenceDistance:", void, .{_referenceDistance});
    }

    pub fn maximumDistance(_self: *@This()) f32 {
        return objc.msgSend(_self, "maximumDistance", f32, .{});
    }

    pub fn setMaximumDistance(_self: *@This(), _maximumDistance: f32) void {
        return objc.msgSend(_self, "setMaximumDistance:", void, .{_maximumDistance});
    }

    pub fn rolloffFactor(_self: *@This()) f32 {
        return objc.msgSend(_self, "rolloffFactor", f32, .{});
    }

    pub fn setRolloffFactor(_self: *@This(), _rolloffFactor: f32) void {
        return objc.msgSend(_self, "setRolloffFactor:", void, .{_rolloffFactor});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioEnvironmentReverbParameters?language=objc
pub const EnvironmentReverbParameters = opaque {
    pub const Internal = objc.ExternClass("AVAudioEnvironmentReverbParameters", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn loadFactoryReverbPreset(_self: *@This(), _preset: UnitReverbPreset) void {
        return objc.msgSend(_self, "loadFactoryReverbPreset:", void, .{_preset});
    }

    pub fn enable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "enable", objc.BOOL, .{});
    }

    pub fn setEnable(_self: *@This(), _enable: objc.BOOL) void {
        return objc.msgSend(_self, "setEnable:", void, .{_enable});
    }

    pub fn level(_self: *@This()) f32 {
        return objc.msgSend(_self, "level", f32, .{});
    }

    pub fn setLevel(_self: *@This(), _level: f32) void {
        return objc.msgSend(_self, "setLevel:", void, .{_level});
    }

    pub fn filterParameters(_self: *@This()) ?*UnitEQFilterParameters {
        return objc.msgSend(_self, "filterParameters", ?*UnitEQFilterParameters, .{});
    }
};

pub const EnvironmentOutputType = objc.NSInteger;
pub const EnvironmentOutputType_Auto: objc.NSInteger = 0;
pub const EnvironmentOutputType_Headphones: objc.NSInteger = 1;
pub const EnvironmentOutputType_BuiltInSpeakers: objc.NSInteger = 2;
pub const EnvironmentOutputType_ExternalSpeakers: objc.NSInteger = 3;

/// https://developer.apple.com/documentation/AVFAudio/AVAudioEnvironmentNode?language=objc
pub const EnvironmentNode = opaque {
    pub const Internal = objc.ExternClass("AVAudioEnvironmentNode", @This(), Node, &.{Mixing});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn pan(_self: *@This()) f32 {
        return objc.msgSend(_self, "pan", f32, .{});
    }

    pub fn setPan(_self: *@This(), _pan: f32) void {
        return objc.msgSend(_self, "setPan:", void, .{_pan});
    }

    pub fn renderingAlgorithm(_self: *@This()) AVAudio3DMixingRenderingAlgorithm {
        return objc.msgSend(_self, "renderingAlgorithm", AVAudio3DMixingRenderingAlgorithm, .{});
    }

    pub fn setRenderingAlgorithm(_self: *@This(), _renderingAlgorithm: AVAudio3DMixingRenderingAlgorithm) void {
        return objc.msgSend(_self, "setRenderingAlgorithm:", void, .{_renderingAlgorithm});
    }

    pub fn sourceMode(_self: *@This()) AVAudio3DMixingSourceMode {
        return objc.msgSend(_self, "sourceMode", AVAudio3DMixingSourceMode, .{});
    }

    pub fn setSourceMode(_self: *@This(), _sourceMode: AVAudio3DMixingSourceMode) void {
        return objc.msgSend(_self, "setSourceMode:", void, .{_sourceMode});
    }

    pub fn pointSourceInHeadMode(_self: *@This()) AVAudio3DMixingPointSourceInHeadMode {
        return objc.msgSend(_self, "pointSourceInHeadMode", AVAudio3DMixingPointSourceInHeadMode, .{});
    }

    pub fn setPointSourceInHeadMode(_self: *@This(), _pointSourceInHeadMode: AVAudio3DMixingPointSourceInHeadMode) void {
        return objc.msgSend(_self, "setPointSourceInHeadMode:", void, .{_pointSourceInHeadMode});
    }

    pub fn rate(_self: *@This()) f32 {
        return objc.msgSend(_self, "rate", f32, .{});
    }

    pub fn setRate(_self: *@This(), _rate: f32) void {
        return objc.msgSend(_self, "setRate:", void, .{_rate});
    }

    pub fn reverbBlend(_self: *@This()) f32 {
        return objc.msgSend(_self, "reverbBlend", f32, .{});
    }

    pub fn setReverbBlend(_self: *@This(), _reverbBlend: f32) void {
        return objc.msgSend(_self, "setReverbBlend:", void, .{_reverbBlend});
    }

    pub fn obstruction(_self: *@This()) f32 {
        return objc.msgSend(_self, "obstruction", f32, .{});
    }

    pub fn setObstruction(_self: *@This(), _obstruction: f32) void {
        return objc.msgSend(_self, "setObstruction:", void, .{_obstruction});
    }

    pub fn occlusion(_self: *@This()) f32 {
        return objc.msgSend(_self, "occlusion", f32, .{});
    }

    pub fn setOcclusion(_self: *@This(), _occlusion: f32) void {
        return objc.msgSend(_self, "setOcclusion:", void, .{_occlusion});
    }

    pub fn position(_self: *@This()) AVAudio3DPoint {
        return objc.msgSend(_self, "position", AVAudio3DPoint, .{});
    }

    pub fn setPosition(_self: *@This(), _position: AVAudio3DPoint) void {
        return objc.msgSend(_self, "setPosition:", void, .{_position});
    }

    pub fn destinationForMixerBus(_self: *@This(), _mixer: ?*Node, _bus: NodeBus) ?*MixingDestination {
        return objc.msgSend(_self, "destinationForMixer:bus:", ?*MixingDestination, .{ _mixer, _bus });
    }

    pub fn volume(_self: *@This()) f32 {
        return objc.msgSend(_self, "volume", f32, .{});
    }

    pub fn setVolume(_self: *@This(), _volume: f32) void {
        return objc.msgSend(_self, "setVolume:", void, .{_volume});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn outputType(_self: *@This()) EnvironmentOutputType {
        return objc.msgSend(_self, "outputType", EnvironmentOutputType, .{});
    }

    pub fn setOutputType(_self: *@This(), _outputType: EnvironmentOutputType) void {
        return objc.msgSend(_self, "setOutputType:", void, .{_outputType});
    }

    pub fn outputVolume(_self: *@This()) f32 {
        return objc.msgSend(_self, "outputVolume", f32, .{});
    }

    pub fn setOutputVolume(_self: *@This(), _outputVolume: f32) void {
        return objc.msgSend(_self, "setOutputVolume:", void, .{_outputVolume});
    }

    pub fn nextAvailableInputBus(_self: *@This()) NodeBus {
        return objc.msgSend(_self, "nextAvailableInputBus", NodeBus, .{});
    }

    pub fn listenerPosition(_self: *@This()) AVAudio3DPoint {
        return objc.msgSend(_self, "listenerPosition", AVAudio3DPoint, .{});
    }

    pub fn setListenerPosition(_self: *@This(), _listenerPosition: AVAudio3DPoint) void {
        return objc.msgSend(_self, "setListenerPosition:", void, .{_listenerPosition});
    }

    pub fn listenerVectorOrientation(_self: *@This()) AVAudio3DVectorOrientation {
        return objc.msgSend(_self, "listenerVectorOrientation", AVAudio3DVectorOrientation, .{});
    }

    pub fn setListenerVectorOrientation(_self: *@This(), _listenerVectorOrientation: AVAudio3DVectorOrientation) void {
        return objc.msgSend(_self, "setListenerVectorOrientation:", void, .{_listenerVectorOrientation});
    }

    pub fn listenerAngularOrientation(_self: *@This()) AVAudio3DAngularOrientation {
        return objc.msgSend(_self, "listenerAngularOrientation", AVAudio3DAngularOrientation, .{});
    }

    pub fn setListenerAngularOrientation(_self: *@This(), _listenerAngularOrientation: AVAudio3DAngularOrientation) void {
        return objc.msgSend(_self, "setListenerAngularOrientation:", void, .{_listenerAngularOrientation});
    }

    pub fn distanceAttenuationParameters(_self: *@This()) ?*EnvironmentDistanceAttenuationParameters {
        return objc.msgSend(_self, "distanceAttenuationParameters", ?*EnvironmentDistanceAttenuationParameters, .{});
    }

    pub fn reverbParameters(_self: *@This()) ?*EnvironmentReverbParameters {
        return objc.msgSend(_self, "reverbParameters", ?*EnvironmentReverbParameters, .{});
    }

    pub fn applicableRenderingAlgorithms(_self: *@This()) ?*foundation.Array(?*foundation.Number) {
        return objc.msgSend(_self, "applicableRenderingAlgorithms", ?*foundation.Array(?*foundation.Number), .{});
    }

    pub fn isListenerHeadTrackingEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isListenerHeadTrackingEnabled", objc.BOOL, .{});
    }

    pub fn setListenerHeadTrackingEnabled(_self: *@This(), _listenerHeadTrackingEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setListenerHeadTrackingEnabled:", void, .{_listenerHeadTrackingEnabled});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioFile?language=objc
pub const File = opaque {
    pub const Internal = objc.ExternClass("AVAudioFile", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initForReadingError(_self: *@This(), _fileURL: ?*foundation.URL, _outError: ?*?*foundation.Error) *@This() {
        return objc.msgSend(_self, "initForReading:error:", *@This(), .{ _fileURL, _outError });
    }

    pub fn initForReadingCommonFormatInterleavedError(
        _self: *@This(),
        _fileURL: ?*foundation.URL,
        _format: CommonFormat,
        _interleaved: objc.BOOL,
        _outError: ?*?*foundation.Error,
    ) *@This() {
        return objc.msgSend(_self, "initForReading:commonFormat:interleaved:error:", *@This(), .{
            _fileURL,
            _format,
            _interleaved,
            _outError,
        });
    }

    pub fn initForWritingSettingsError(_self: *@This(), _fileURL: ?*foundation.URL, _settings: ?*foundation.Dictionary(?*foundation.String, ?objc.Id), _outError: ?*?*foundation.Error) *@This() {
        return objc.msgSend(_self, "initForWriting:settings:error:", *@This(), .{ _fileURL, _settings, _outError });
    }

    pub fn initForWritingSettingsCommonFormatInterleavedError(
        _self: *@This(),
        _fileURL: ?*foundation.URL,
        _settings: ?*foundation.Dictionary(?*foundation.String, ?objc.Id),
        _format: CommonFormat,
        _interleaved: objc.BOOL,
        _outError: ?*?*foundation.Error,
    ) *@This() {
        return objc.msgSend(_self, "initForWriting:settings:commonFormat:interleaved:error:", *@This(), .{
            _fileURL,
            _settings,
            _format,
            _interleaved,
            _outError,
        });
    }

    pub fn close(_self: *@This()) void {
        return objc.msgSend(_self, "close", void, .{});
    }

    pub fn readIntoBufferError(_self: *@This(), _buffer: ?*PCMBuffer, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "readIntoBuffer:error:", objc.BOOL, .{ _buffer, _outError });
    }

    pub fn readIntoBufferFrameCountError(_self: *@This(), _buffer: ?*PCMBuffer, _frames: FrameCount, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "readIntoBuffer:frameCount:error:", objc.BOOL, .{ _buffer, _frames, _outError });
    }

    pub fn writeFromBufferError(_self: *@This(), _buffer: ?*const PCMBuffer, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "writeFromBuffer:error:", objc.BOOL, .{ _buffer, _outError });
    }

    pub fn isOpen(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isOpen", objc.BOOL, .{});
    }

    pub fn url(_self: *@This()) ?*foundation.URL {
        return objc.msgSend(_self, "url", ?*foundation.URL, .{});
    }

    pub fn fileFormat(_self: *@This()) ?*Format {
        return objc.msgSend(_self, "fileFormat", ?*Format, .{});
    }

    pub fn processingFormat(_self: *@This()) ?*Format {
        return objc.msgSend(_self, "processingFormat", ?*Format, .{});
    }

    pub fn length(_self: *@This()) FramePosition {
        return objc.msgSend(_self, "length", FramePosition, .{});
    }

    pub fn framePosition(_self: *@This()) FramePosition {
        return objc.msgSend(_self, "framePosition", FramePosition, .{});
    }

    pub fn setFramePosition(_self: *@This(), _framePosition: FramePosition) void {
        return objc.msgSend(_self, "setFramePosition:", void, .{_framePosition});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioMixerNode?language=objc
pub const MixerNode = opaque {
    pub const Internal = objc.ExternClass("AVAudioMixerNode", @This(), Node, &.{Mixing});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn pan(_self: *@This()) f32 {
        return objc.msgSend(_self, "pan", f32, .{});
    }

    pub fn setPan(_self: *@This(), _pan: f32) void {
        return objc.msgSend(_self, "setPan:", void, .{_pan});
    }

    pub fn renderingAlgorithm(_self: *@This()) AVAudio3DMixingRenderingAlgorithm {
        return objc.msgSend(_self, "renderingAlgorithm", AVAudio3DMixingRenderingAlgorithm, .{});
    }

    pub fn setRenderingAlgorithm(_self: *@This(), _renderingAlgorithm: AVAudio3DMixingRenderingAlgorithm) void {
        return objc.msgSend(_self, "setRenderingAlgorithm:", void, .{_renderingAlgorithm});
    }

    pub fn sourceMode(_self: *@This()) AVAudio3DMixingSourceMode {
        return objc.msgSend(_self, "sourceMode", AVAudio3DMixingSourceMode, .{});
    }

    pub fn setSourceMode(_self: *@This(), _sourceMode: AVAudio3DMixingSourceMode) void {
        return objc.msgSend(_self, "setSourceMode:", void, .{_sourceMode});
    }

    pub fn pointSourceInHeadMode(_self: *@This()) AVAudio3DMixingPointSourceInHeadMode {
        return objc.msgSend(_self, "pointSourceInHeadMode", AVAudio3DMixingPointSourceInHeadMode, .{});
    }

    pub fn setPointSourceInHeadMode(_self: *@This(), _pointSourceInHeadMode: AVAudio3DMixingPointSourceInHeadMode) void {
        return objc.msgSend(_self, "setPointSourceInHeadMode:", void, .{_pointSourceInHeadMode});
    }

    pub fn rate(_self: *@This()) f32 {
        return objc.msgSend(_self, "rate", f32, .{});
    }

    pub fn setRate(_self: *@This(), _rate: f32) void {
        return objc.msgSend(_self, "setRate:", void, .{_rate});
    }

    pub fn reverbBlend(_self: *@This()) f32 {
        return objc.msgSend(_self, "reverbBlend", f32, .{});
    }

    pub fn setReverbBlend(_self: *@This(), _reverbBlend: f32) void {
        return objc.msgSend(_self, "setReverbBlend:", void, .{_reverbBlend});
    }

    pub fn obstruction(_self: *@This()) f32 {
        return objc.msgSend(_self, "obstruction", f32, .{});
    }

    pub fn setObstruction(_self: *@This(), _obstruction: f32) void {
        return objc.msgSend(_self, "setObstruction:", void, .{_obstruction});
    }

    pub fn occlusion(_self: *@This()) f32 {
        return objc.msgSend(_self, "occlusion", f32, .{});
    }

    pub fn setOcclusion(_self: *@This(), _occlusion: f32) void {
        return objc.msgSend(_self, "setOcclusion:", void, .{_occlusion});
    }

    pub fn position(_self: *@This()) AVAudio3DPoint {
        return objc.msgSend(_self, "position", AVAudio3DPoint, .{});
    }

    pub fn setPosition(_self: *@This(), _position: AVAudio3DPoint) void {
        return objc.msgSend(_self, "setPosition:", void, .{_position});
    }

    pub fn destinationForMixerBus(_self: *@This(), _mixer: ?*Node, _bus: NodeBus) ?*MixingDestination {
        return objc.msgSend(_self, "destinationForMixer:bus:", ?*MixingDestination, .{ _mixer, _bus });
    }

    pub fn volume(_self: *@This()) f32 {
        return objc.msgSend(_self, "volume", f32, .{});
    }

    pub fn setVolume(_self: *@This(), _volume: f32) void {
        return objc.msgSend(_self, "setVolume:", void, .{_volume});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn outputVolume(_self: *@This()) f32 {
        return objc.msgSend(_self, "outputVolume", f32, .{});
    }

    pub fn setOutputVolume(_self: *@This(), _outputVolume: f32) void {
        return objc.msgSend(_self, "setOutputVolume:", void, .{_outputVolume});
    }

    pub fn nextAvailableInputBus(_self: *@This()) NodeBus {
        return objc.msgSend(_self, "nextAvailableInputBus", NodeBus, .{});
    }
};

pub const SessionPort = ?*foundation.String;

pub const SessionCategory = ?*foundation.String;

pub const SessionMode = ?*foundation.String;

pub const SessionActivationOptions = objc.NSUInteger;
pub const SessionActivationOptions_None: objc.NSUInteger = 0;

pub const SessionPortOverride = objc.NSUInteger;
pub const SessionPortOverride_None: objc.NSUInteger = 0;
pub const SessionPortOverride_Speaker: objc.NSUInteger = 1936747378;

pub const SessionRouteChangeReason = objc.NSUInteger;
pub const SessionRouteChangeReason_Unknown: objc.NSUInteger = 0;
pub const SessionRouteChangeReason_NewDeviceAvailable: objc.NSUInteger = 1;
pub const SessionRouteChangeReason_OldDeviceUnavailable: objc.NSUInteger = 2;
pub const SessionRouteChangeReason_CategoryChange: objc.NSUInteger = 3;
pub const SessionRouteChangeReason_Override: objc.NSUInteger = 4;
pub const SessionRouteChangeReason_WakeFromSleep: objc.NSUInteger = 6;
pub const SessionRouteChangeReason_NoSuitableRouteForCategory: objc.NSUInteger = 7;
pub const SessionRouteChangeReason_RouteConfigurationChange: objc.NSUInteger = 8;

pub const SessionCategoryOptions = objc.NSUInteger;
pub const SessionCategoryOptions_MixWithOthers: objc.NSUInteger = 1;
pub const SessionCategoryOptions_DuckOthers: objc.NSUInteger = 2;
pub const SessionCategoryOptions_AllowBluetooth: objc.NSUInteger = 4;
pub const SessionCategoryOptions_DefaultToSpeaker: objc.NSUInteger = 8;
pub const SessionCategoryOptions_InterruptSpokenAudioAndMixWithOthers: objc.NSUInteger = 17;
pub const SessionCategoryOptions_AllowBluetoothA2DP: objc.NSUInteger = 32;
pub const SessionCategoryOptions_AllowAirPlay: objc.NSUInteger = 64;
pub const SessionCategoryOptions_OverrideMutedMicrophoneInterruption: objc.NSUInteger = 128;

pub const SessionInterruptionType = objc.NSUInteger;
pub const SessionInterruptionType_Began: objc.NSUInteger = 1;
pub const SessionInterruptionType_Ended: objc.NSUInteger = 0;

pub const SessionInterruptionOptions = objc.NSUInteger;
pub const SessionInterruptionOptions_ShouldResume: objc.NSUInteger = 1;

pub const SessionInterruptionReason = objc.NSUInteger;
pub const SessionInterruptionReason_Default: objc.NSUInteger = 0;
pub const SessionInterruptionReason_AppWasSuspended: objc.NSUInteger = 1;
pub const SessionInterruptionReason_BuiltInMicMuted: objc.NSUInteger = 2;
pub const SessionInterruptionReason_RouteDisconnected: objc.NSUInteger = 4;

pub const SessionSetActiveOptions = objc.NSUInteger;
pub const SessionSetActiveOptions_NotifyOthersOnDeactivation: objc.NSUInteger = 1;

pub const SessionSilenceSecondaryAudioHintType = objc.NSUInteger;
pub const SessionSilenceSecondaryAudioHintType_Begin: objc.NSUInteger = 1;
pub const SessionSilenceSecondaryAudioHintType_End: objc.NSUInteger = 0;

pub const SessionIOType = objc.NSUInteger;
pub const SessionIOType_NotSpecified: objc.NSUInteger = 0;
pub const SessionIOType_Aggregated: objc.NSUInteger = 1;

pub const SessionRouteSharingPolicy = objc.NSUInteger;
pub const SessionRouteSharingPolicy_Default: objc.NSUInteger = 0;
pub const SessionRouteSharingPolicy_LongFormAudio: objc.NSUInteger = 1;
pub const SessionRouteSharingPolicy_LongForm: objc.NSUInteger = 1;
pub const SessionRouteSharingPolicy_Independent: objc.NSUInteger = 2;
pub const SessionRouteSharingPolicy_LongFormVideo: objc.NSUInteger = 3;

pub const SessionPromptStyle = objc.NSUInteger;
pub const SessionPromptStyle_None: objc.NSUInteger = 1852796517;
pub const SessionPromptStyle_Short: objc.NSUInteger = 1936224884;
pub const SessionPromptStyle_Normal: objc.NSUInteger = 1852992876;

pub const StereoOrientation = objc.NSInteger;
pub const StereoOrientation_None: objc.NSInteger = 0;
pub const StereoOrientation_Portrait: objc.NSInteger = 1;
pub const StereoOrientation_PortraitUpsideDown: objc.NSInteger = 2;
pub const StereoOrientation_LandscapeRight: objc.NSInteger = 3;
pub const StereoOrientation_LandscapeLeft: objc.NSInteger = 4;

pub const SessionRecordPermission = objc.NSUInteger;
pub const SessionRecordPermission_Undetermined: objc.NSUInteger = 1970168948;
pub const SessionRecordPermission_Denied: objc.NSUInteger = 1684369017;
pub const SessionRecordPermission_Granted: objc.NSUInteger = 1735552628;

pub const SessionRenderingMode = objc.NSInteger;
pub const SessionRenderingMode_NotApplicable: objc.NSInteger = 0;
pub const SessionRenderingMode_MonoStereo: objc.NSInteger = 1;
pub const SessionRenderingMode_Surround: objc.NSInteger = 2;
pub const SessionRenderingMode_SpatialAudio: objc.NSInteger = 3;
pub const SessionRenderingMode_DolbyAudio: objc.NSInteger = 4;
pub const SessionRenderingMode_DolbyAtmos: objc.NSInteger = 5;

pub const SessionLocation = ?*foundation.String;

pub const SessionOrientation = ?*foundation.String;

pub const SessionPolarPattern = ?*foundation.String;

/// https://developer.apple.com/documentation/AVFAudio/AVAudioSessionChannelDescription?language=objc
pub const SessionChannelDescription = opaque {
    pub const Internal = objc.ExternClass("AVAudioSessionChannelDescription", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn channelName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "channelName", ?*foundation.String, .{});
    }

    pub fn owningPortUID(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "owningPortUID", ?*foundation.String, .{});
    }

    pub fn channelNumber(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "channelNumber", objc.NSUInteger, .{});
    }

    pub fn channelLabel(_self: *@This()) core_audio_types.ChannelLabel {
        return objc.msgSend(_self, "channelLabel", core_audio_types.ChannelLabel, .{});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioSessionDataSourceDescription?language=objc
pub const SessionDataSourceDescription = opaque {
    pub const Internal = objc.ExternClass("AVAudioSessionDataSourceDescription", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn setPreferredPolarPatternError(_self: *@This(), _pattern: SessionPolarPattern, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setPreferredPolarPattern:error:", objc.BOOL, .{ _pattern, _outError });
    }

    pub fn dataSourceID(_self: *@This()) ?*foundation.Number {
        return objc.msgSend(_self, "dataSourceID", ?*foundation.Number, .{});
    }

    pub fn dataSourceName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "dataSourceName", ?*foundation.String, .{});
    }

    pub fn location(_self: *@This()) SessionLocation {
        return objc.msgSend(_self, "location", SessionLocation, .{});
    }

    pub fn orientation(_self: *@This()) SessionOrientation {
        return objc.msgSend(_self, "orientation", SessionOrientation, .{});
    }

    pub fn supportedPolarPatterns(_self: *@This()) ?*foundation.Array(SessionPolarPattern) {
        return objc.msgSend(_self, "supportedPolarPatterns", ?*foundation.Array(SessionPolarPattern), .{});
    }

    pub fn selectedPolarPattern(_self: *@This()) SessionPolarPattern {
        return objc.msgSend(_self, "selectedPolarPattern", SessionPolarPattern, .{});
    }

    pub fn preferredPolarPattern(_self: *@This()) SessionPolarPattern {
        return objc.msgSend(_self, "preferredPolarPattern", SessionPolarPattern, .{});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioSessionPortDescription?language=objc
pub const SessionPortDescription = opaque {
    pub const Internal = objc.ExternClass("AVAudioSessionPortDescription", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn setPreferredDataSourceError(_self: *@This(), _dataSource: ?*SessionDataSourceDescription, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setPreferredDataSource:error:", objc.BOOL, .{ _dataSource, _outError });
    }

    pub fn portType(_self: *@This()) SessionPort {
        return objc.msgSend(_self, "portType", SessionPort, .{});
    }

    pub fn portName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "portName", ?*foundation.String, .{});
    }

    pub fn uid(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "UID", ?*foundation.String, .{});
    }

    pub fn hasHardwareVoiceCallProcessing(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "hasHardwareVoiceCallProcessing", objc.BOOL, .{});
    }

    pub fn isSpatialAudioEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isSpatialAudioEnabled", objc.BOOL, .{});
    }

    pub fn channels(_self: *@This()) ?*foundation.Array(?*SessionChannelDescription) {
        return objc.msgSend(_self, "channels", ?*foundation.Array(?*SessionChannelDescription), .{});
    }

    pub fn dataSources(_self: *@This()) ?*foundation.Array(?*SessionDataSourceDescription) {
        return objc.msgSend(_self, "dataSources", ?*foundation.Array(?*SessionDataSourceDescription), .{});
    }

    pub fn selectedDataSource(_self: *@This()) ?*SessionDataSourceDescription {
        return objc.msgSend(_self, "selectedDataSource", ?*SessionDataSourceDescription, .{});
    }

    pub fn preferredDataSource(_self: *@This()) ?*SessionDataSourceDescription {
        return objc.msgSend(_self, "preferredDataSource", ?*SessionDataSourceDescription, .{});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioSessionRouteDescription?language=objc
pub const SessionRouteDescription = opaque {
    pub const Internal = objc.ExternClass("AVAudioSessionRouteDescription", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn inputs(_self: *@This()) ?*foundation.Array(?*SessionPortDescription) {
        return objc.msgSend(_self, "inputs", ?*foundation.Array(?*SessionPortDescription), .{});
    }

    pub fn outputs(_self: *@This()) ?*foundation.Array(?*SessionPortDescription) {
        return objc.msgSend(_self, "outputs", ?*foundation.Array(?*SessionPortDescription), .{});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioSession?language=objc
pub const Session = opaque {
    pub const Internal = objc.ExternClass("AVAudioSession", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn sharedInstance() ?*Session {
        return objc.msgSend(Internal.class(), "sharedInstance", ?*Session, .{});
    }

    pub fn setCategoryError(_self: *@This(), _category: SessionCategory, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setCategory:error:", objc.BOOL, .{ _category, _outError });
    }

    pub fn setCategoryWithOptionsError(_self: *@This(), _category: SessionCategory, _options: SessionCategoryOptions, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setCategory:withOptions:error:", objc.BOOL, .{ _category, _options, _outError });
    }

    pub fn setCategoryModeOptionsError(
        _self: *@This(),
        _category: SessionCategory,
        _mode: SessionMode,
        _options: SessionCategoryOptions,
        _outError: ?*?*foundation.Error,
    ) objc.BOOL {
        return objc.msgSend(_self, "setCategory:mode:options:error:", objc.BOOL, .{
            _category,
            _mode,
            _options,
            _outError,
        });
    }

    pub fn setCategoryModeRouteSharingPolicyOptionsError(
        _self: *@This(),
        _category: SessionCategory,
        _mode: SessionMode,
        _policy: SessionRouteSharingPolicy,
        _options: SessionCategoryOptions,
        _outError: ?*?*foundation.Error,
    ) objc.BOOL {
        return objc.msgSend(_self, "setCategory:mode:routeSharingPolicy:options:error:", objc.BOOL, .{
            _category,
            _mode,
            _policy,
            _options,
            _outError,
        });
    }

    pub fn setModeError(_self: *@This(), _mode: SessionMode, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setMode:error:", objc.BOOL, .{ _mode, _outError });
    }

    pub fn setAllowHapticsAndSystemSoundsDuringRecordingError(_self: *@This(), _inValue: objc.BOOL, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setAllowHapticsAndSystemSoundsDuringRecording:error:", objc.BOOL, .{ _inValue, _outError });
    }

    pub fn requestRecordPermission(_self: *@This(), _response: *const fn (objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(_self, "requestRecordPermission:", void, .{_response});
    }

    pub fn overrideOutputAudioPortError(_self: *@This(), _portOverride: SessionPortOverride, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "overrideOutputAudioPort:error:", objc.BOOL, .{ _portOverride, _outError });
    }

    pub fn setPreferredInputError(_self: *@This(), _inPort: ?*SessionPortDescription, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setPreferredInput:error:", objc.BOOL, .{ _inPort, _outError });
    }

    pub fn setPrefersNoInterruptionsFromSystemAlertsError(_self: *@This(), _inValue: objc.BOOL, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setPrefersNoInterruptionsFromSystemAlerts:error:", objc.BOOL, .{ _inValue, _outError });
    }

    pub fn availableCategories(_self: *@This()) ?*foundation.Array(SessionCategory) {
        return objc.msgSend(_self, "availableCategories", ?*foundation.Array(SessionCategory), .{});
    }

    pub fn category(_self: *@This()) SessionCategory {
        return objc.msgSend(_self, "category", SessionCategory, .{});
    }

    pub fn categoryOptions(_self: *@This()) SessionCategoryOptions {
        return objc.msgSend(_self, "categoryOptions", SessionCategoryOptions, .{});
    }

    pub fn routeSharingPolicy(_self: *@This()) SessionRouteSharingPolicy {
        return objc.msgSend(_self, "routeSharingPolicy", SessionRouteSharingPolicy, .{});
    }

    pub fn availableModes(_self: *@This()) ?*foundation.Array(SessionMode) {
        return objc.msgSend(_self, "availableModes", ?*foundation.Array(SessionMode), .{});
    }

    pub fn mode(_self: *@This()) SessionMode {
        return objc.msgSend(_self, "mode", SessionMode, .{});
    }

    pub fn allowHapticsAndSystemSoundsDuringRecording(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowHapticsAndSystemSoundsDuringRecording", objc.BOOL, .{});
    }

    pub fn recordPermission(_self: *@This()) SessionRecordPermission {
        return objc.msgSend(_self, "recordPermission", SessionRecordPermission, .{});
    }

    pub fn preferredInput(_self: *@This()) ?*SessionPortDescription {
        return objc.msgSend(_self, "preferredInput", ?*SessionPortDescription, .{});
    }

    pub fn prefersNoInterruptionsFromSystemAlerts(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "prefersNoInterruptionsFromSystemAlerts", objc.BOOL, .{});
    }

    pub fn renderingMode(_self: *@This()) SessionRenderingMode {
        return objc.msgSend(_self, "renderingMode", SessionRenderingMode, .{});
    }

    pub fn setActiveError(_self: *@This(), _active: objc.BOOL, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setActive:error:", objc.BOOL, .{ _active, _outError });
    }

    pub fn setActiveWithOptionsError(_self: *@This(), _active: objc.BOOL, _options: SessionSetActiveOptions, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setActive:withOptions:error:", objc.BOOL, .{ _active, _options, _outError });
    }

    pub fn activateWithOptionsCompletionHandler(_self: *@This(), _options: SessionActivationOptions, _handler: *const fn (objc.BOOL, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(_self, "activateWithOptions:completionHandler:", void, .{ _options, _handler });
    }

    pub fn setPreferredSampleRateError(_self: *@This(), _sampleRate: f64, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setPreferredSampleRate:error:", objc.BOOL, .{ _sampleRate, _outError });
    }

    pub fn setPreferredIOBufferDurationError(_self: *@This(), _duration: foundation.TimeInterval, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setPreferredIOBufferDuration:error:", objc.BOOL, .{ _duration, _outError });
    }

    pub fn setPreferredInputNumberOfChannelsError(_self: *@This(), _count: objc.NSInteger, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setPreferredInputNumberOfChannels:error:", objc.BOOL, .{ _count, _outError });
    }

    pub fn setPreferredOutputNumberOfChannelsError(_self: *@This(), _count: objc.NSInteger, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setPreferredOutputNumberOfChannels:error:", objc.BOOL, .{ _count, _outError });
    }

    pub fn setPreferredInputOrientationError(_self: *@This(), _orientation: StereoOrientation, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setPreferredInputOrientation:error:", objc.BOOL, .{ _orientation, _outError });
    }

    pub fn setInputGainError(_self: *@This(), _gain: f32, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setInputGain:error:", objc.BOOL, .{ _gain, _outError });
    }

    pub fn setInputDataSourceError(_self: *@This(), _dataSource: ?*SessionDataSourceDescription, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setInputDataSource:error:", objc.BOOL, .{ _dataSource, _outError });
    }

    pub fn setOutputDataSourceError(_self: *@This(), _dataSource: ?*SessionDataSourceDescription, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setOutputDataSource:error:", objc.BOOL, .{ _dataSource, _outError });
    }

    pub fn preferredSampleRate(_self: *@This()) f64 {
        return objc.msgSend(_self, "preferredSampleRate", f64, .{});
    }

    pub fn preferredIOBufferDuration(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "preferredIOBufferDuration", foundation.TimeInterval, .{});
    }

    pub fn preferredInputNumberOfChannels(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "preferredInputNumberOfChannels", objc.NSInteger, .{});
    }

    pub fn preferredOutputNumberOfChannels(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "preferredOutputNumberOfChannels", objc.NSInteger, .{});
    }

    pub fn preferredInputOrientation(_self: *@This()) StereoOrientation {
        return objc.msgSend(_self, "preferredInputOrientation", StereoOrientation, .{});
    }

    pub fn inputOrientation(_self: *@This()) StereoOrientation {
        return objc.msgSend(_self, "inputOrientation", StereoOrientation, .{});
    }

    pub fn maximumInputNumberOfChannels(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "maximumInputNumberOfChannels", objc.NSInteger, .{});
    }

    pub fn maximumOutputNumberOfChannels(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "maximumOutputNumberOfChannels", objc.NSInteger, .{});
    }

    pub fn inputGain(_self: *@This()) f32 {
        return objc.msgSend(_self, "inputGain", f32, .{});
    }

    pub fn isInputGainSettable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isInputGainSettable", objc.BOOL, .{});
    }

    pub fn isInputAvailable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isInputAvailable", objc.BOOL, .{});
    }

    pub fn inputDataSources(_self: *@This()) ?*foundation.Array(?*SessionDataSourceDescription) {
        return objc.msgSend(_self, "inputDataSources", ?*foundation.Array(?*SessionDataSourceDescription), .{});
    }

    pub fn inputDataSource(_self: *@This()) ?*SessionDataSourceDescription {
        return objc.msgSend(_self, "inputDataSource", ?*SessionDataSourceDescription, .{});
    }

    pub fn outputDataSources(_self: *@This()) ?*foundation.Array(?*SessionDataSourceDescription) {
        return objc.msgSend(_self, "outputDataSources", ?*foundation.Array(?*SessionDataSourceDescription), .{});
    }

    pub fn outputDataSource(_self: *@This()) ?*SessionDataSourceDescription {
        return objc.msgSend(_self, "outputDataSource", ?*SessionDataSourceDescription, .{});
    }

    pub fn sampleRate(_self: *@This()) f64 {
        return objc.msgSend(_self, "sampleRate", f64, .{});
    }

    pub fn inputNumberOfChannels(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "inputNumberOfChannels", objc.NSInteger, .{});
    }

    pub fn outputNumberOfChannels(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "outputNumberOfChannels", objc.NSInteger, .{});
    }

    pub fn inputLatency(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "inputLatency", foundation.TimeInterval, .{});
    }

    pub fn outputLatency(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "outputLatency", foundation.TimeInterval, .{});
    }

    pub fn ioBufferDuration(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "IOBufferDuration", foundation.TimeInterval, .{});
    }

    pub fn supportedOutputChannelLayouts(_self: *@This()) ?*foundation.Array(?*ChannelLayout) {
        return objc.msgSend(_self, "supportedOutputChannelLayouts", ?*foundation.Array(?*ChannelLayout), .{});
    }

    pub fn isOtherAudioPlaying(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isOtherAudioPlaying", objc.BOOL, .{});
    }

    pub fn secondaryAudioShouldBeSilencedHint(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "secondaryAudioShouldBeSilencedHint", objc.BOOL, .{});
    }

    pub fn outputVolume(_self: *@This()) f32 {
        return objc.msgSend(_self, "outputVolume", f32, .{});
    }

    pub fn promptStyle(_self: *@This()) SessionPromptStyle {
        return objc.msgSend(_self, "promptStyle", SessionPromptStyle, .{});
    }

    pub fn setAggregatedIOPreferenceError(_self: *@This(), _inIOType: SessionIOType, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setAggregatedIOPreference:error:", objc.BOOL, .{ _inIOType, _outError });
    }

    pub fn setSupportsMultichannelContentError(_self: *@This(), _inValue: objc.BOOL, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setSupportsMultichannelContent:error:", objc.BOOL, .{ _inValue, _outError });
    }

    pub fn setPrefersInterruptionOnRouteDisconnectError(_self: *@This(), _inValue: objc.BOOL, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setPrefersInterruptionOnRouteDisconnect:error:", objc.BOOL, .{ _inValue, _outError });
    }

    pub fn availableInputs(_self: *@This()) ?*foundation.Array(?*SessionPortDescription) {
        return objc.msgSend(_self, "availableInputs", ?*foundation.Array(?*SessionPortDescription), .{});
    }

    pub fn currentRoute(_self: *@This()) ?*SessionRouteDescription {
        return objc.msgSend(_self, "currentRoute", ?*SessionRouteDescription, .{});
    }

    pub fn supportsMultichannelContent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsMultichannelContent", objc.BOOL, .{});
    }

    pub fn prefersInterruptionOnRouteDisconnect(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "prefersInterruptionOnRouteDisconnect", objc.BOOL, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn setActiveWithFlagsError(_self: *@This(), _active: objc.BOOL, _flags: objc.NSInteger, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setActive:withFlags:error:", objc.BOOL, .{ _active, _flags, _outError });
    }

    pub fn setPreferredHardwareSampleRateError(_self: *@This(), _sampleRate: f64, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setPreferredHardwareSampleRate:error:", objc.BOOL, .{ _sampleRate, _outError });
    }

    pub fn delegate(_self: *@This()) ?*objc.id {
        return objc.msgSend(_self, "delegate", ?*objc.id, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*objc.id) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn inputIsAvailable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "inputIsAvailable", objc.BOOL, .{});
    }

    pub fn currentHardwareSampleRate(_self: *@This()) f64 {
        return objc.msgSend(_self, "currentHardwareSampleRate", f64, .{});
    }

    pub fn currentHardwareInputNumberOfChannels(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "currentHardwareInputNumberOfChannels", objc.NSInteger, .{});
    }

    pub fn currentHardwareOutputNumberOfChannels(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "currentHardwareOutputNumberOfChannels", objc.NSInteger, .{});
    }

    pub fn preferredHardwareSampleRate(_self: *@This()) f64 {
        return objc.msgSend(_self, "preferredHardwareSampleRate", f64, .{});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioSessionDelegate?language=objc
pub const SessionDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn beginInterruption(_self: *@This()) void {
        return objc.msgSend(_self, "beginInterruption", void, .{});
    }

    pub fn endInterruptionWithFlags(_self: *@This(), _flags: objc.NSUInteger) void {
        return objc.msgSend(_self, "endInterruptionWithFlags:", void, .{_flags});
    }

    pub fn endInterruption(_self: *@This()) void {
        return objc.msgSend(_self, "endInterruption", void, .{});
    }

    pub fn inputIsAvailableChanged(_self: *@This(), _isInputAvailable: objc.BOOL) void {
        return objc.msgSend(_self, "inputIsAvailableChanged:", void, .{_isInputAvailable});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioPlayer?language=objc
pub const Player = opaque {
    pub const Internal = objc.ExternClass("AVAudioPlayer", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithContentsOfURLError(_self: *@This(), _url: ?*foundation.URL, _outError: ?*?*foundation.Error) *@This() {
        return objc.msgSend(_self, "initWithContentsOfURL:error:", *@This(), .{ _url, _outError });
    }

    pub fn initWithDataError(_self: *@This(), _data: ?*foundation.Data, _outError: ?*?*foundation.Error) *@This() {
        return objc.msgSend(_self, "initWithData:error:", *@This(), .{ _data, _outError });
    }

    pub fn initWithContentsOfURLFileTypeHintError(_self: *@This(), _url: ?*foundation.URL, _utiString: ?*foundation.String, _outError: ?*?*foundation.Error) *@This() {
        return objc.msgSend(_self, "initWithContentsOfURL:fileTypeHint:error:", *@This(), .{ _url, _utiString, _outError });
    }

    pub fn initWithDataFileTypeHintError(_self: *@This(), _data: ?*foundation.Data, _utiString: ?*foundation.String, _outError: ?*?*foundation.Error) *@This() {
        return objc.msgSend(_self, "initWithData:fileTypeHint:error:", *@This(), .{ _data, _utiString, _outError });
    }

    pub fn prepareToPlay(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "prepareToPlay", objc.BOOL, .{});
    }

    pub fn play(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "play", objc.BOOL, .{});
    }

    pub fn playAtTime(_self: *@This(), _time: foundation.TimeInterval) objc.BOOL {
        return objc.msgSend(_self, "playAtTime:", objc.BOOL, .{_time});
    }

    pub fn pause(_self: *@This()) void {
        return objc.msgSend(_self, "pause", void, .{});
    }

    pub fn stop(_self: *@This()) void {
        return objc.msgSend(_self, "stop", void, .{});
    }

    pub fn setVolumeFadeDuration(_self: *@This(), _volume: f32, _duration: foundation.TimeInterval) void {
        return objc.msgSend(_self, "setVolume:fadeDuration:", void, .{ _volume, _duration });
    }

    pub fn updateMeters(_self: *@This()) void {
        return objc.msgSend(_self, "updateMeters", void, .{});
    }

    pub fn peakPowerForChannel(_self: *@This(), _channelNumber: objc.NSUInteger) f32 {
        return objc.msgSend(_self, "peakPowerForChannel:", f32, .{_channelNumber});
    }

    pub fn averagePowerForChannel(_self: *@This(), _channelNumber: objc.NSUInteger) f32 {
        return objc.msgSend(_self, "averagePowerForChannel:", f32, .{_channelNumber});
    }

    pub fn isPlaying(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isPlaying", objc.BOOL, .{});
    }

    pub fn numberOfChannels(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "numberOfChannels", objc.NSUInteger, .{});
    }

    pub fn duration(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "duration", foundation.TimeInterval, .{});
    }

    pub fn currentDevice(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "currentDevice", ?*foundation.String, .{});
    }

    pub fn setCurrentDevice(_self: *@This(), _currentDevice: ?*foundation.String) void {
        return objc.msgSend(_self, "setCurrentDevice:", void, .{_currentDevice});
    }

    pub fn delegate(_self: *@This()) ?*objc.id {
        return objc.msgSend(_self, "delegate", ?*objc.id, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*objc.id) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn url(_self: *@This()) ?*foundation.URL {
        return objc.msgSend(_self, "url", ?*foundation.URL, .{});
    }

    pub fn data(_self: *@This()) ?*foundation.Data {
        return objc.msgSend(_self, "data", ?*foundation.Data, .{});
    }

    pub fn pan(_self: *@This()) f32 {
        return objc.msgSend(_self, "pan", f32, .{});
    }

    pub fn setPan(_self: *@This(), _pan: f32) void {
        return objc.msgSend(_self, "setPan:", void, .{_pan});
    }

    pub fn volume(_self: *@This()) f32 {
        return objc.msgSend(_self, "volume", f32, .{});
    }

    pub fn setVolume(_self: *@This(), _volume: f32) void {
        return objc.msgSend(_self, "setVolume:", void, .{_volume});
    }

    pub fn enableRate(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "enableRate", objc.BOOL, .{});
    }

    pub fn setEnableRate(_self: *@This(), _enableRate: objc.BOOL) void {
        return objc.msgSend(_self, "setEnableRate:", void, .{_enableRate});
    }

    pub fn rate(_self: *@This()) f32 {
        return objc.msgSend(_self, "rate", f32, .{});
    }

    pub fn setRate(_self: *@This(), _rate: f32) void {
        return objc.msgSend(_self, "setRate:", void, .{_rate});
    }

    pub fn currentTime(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "currentTime", foundation.TimeInterval, .{});
    }

    pub fn setCurrentTime(_self: *@This(), _currentTime: foundation.TimeInterval) void {
        return objc.msgSend(_self, "setCurrentTime:", void, .{_currentTime});
    }

    pub fn deviceCurrentTime(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "deviceCurrentTime", foundation.TimeInterval, .{});
    }

    pub fn numberOfLoops(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "numberOfLoops", objc.NSInteger, .{});
    }

    pub fn setNumberOfLoops(_self: *@This(), _numberOfLoops: objc.NSInteger) void {
        return objc.msgSend(_self, "setNumberOfLoops:", void, .{_numberOfLoops});
    }

    pub fn settings(_self: *@This()) ?*foundation.Dictionary(?*foundation.String, ?objc.Id) {
        return objc.msgSend(_self, "settings", ?*foundation.Dictionary(?*foundation.String, ?objc.Id), .{});
    }

    pub fn format(_self: *@This()) ?*Format {
        return objc.msgSend(_self, "format", ?*Format, .{});
    }

    pub fn isMeteringEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isMeteringEnabled", objc.BOOL, .{});
    }

    pub fn setMeteringEnabled(_self: *@This(), _meteringEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setMeteringEnabled:", void, .{_meteringEnabled});
    }

    pub fn channelAssignments(_self: *@This()) ?*foundation.Array(?*SessionChannelDescription) {
        return objc.msgSend(_self, "channelAssignments", ?*foundation.Array(?*SessionChannelDescription), .{});
    }

    pub fn setChannelAssignments(_self: *@This(), _channelAssignments: ?*foundation.Array(?*SessionChannelDescription)) void {
        return objc.msgSend(_self, "setChannelAssignments:", void, .{_channelAssignments});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioPlayerDelegate?language=objc
pub const PlayerDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn audioPlayerDidFinishPlayingSuccessfully(_self: *@This(), _player: ?*Player, _flag: objc.BOOL) void {
        return objc.msgSend(_self, "audioPlayerDidFinishPlaying:successfully:", void, .{ _player, _flag });
    }

    pub fn audioPlayerDecodeErrorDidOccurError(_self: *@This(), _player: ?*Player, _error: ?*foundation.Error) void {
        return objc.msgSend(_self, "audioPlayerDecodeErrorDidOccur:error:", void, .{ _player, _error });
    }
};

pub const PlayerNodeBufferOptions = objc.NSUInteger;
pub const PlayerNodeBufferOptions_Loops: objc.NSUInteger = 1;
pub const PlayerNodeBufferOptions_Interrupts: objc.NSUInteger = 2;
pub const PlayerNodeBufferOptions_InterruptsAtLoop: objc.NSUInteger = 4;

pub const PlayerNodeCompletionCallbackType = objc.NSInteger;
pub const PlayerNodeCompletionCallbackType_DataConsumed: objc.NSInteger = 0;
pub const PlayerNodeCompletionCallbackType_DataRendered: objc.NSInteger = 1;
pub const PlayerNodeCompletionCallbackType_DataPlayedBack: objc.NSInteger = 2;

pub const PlayerNodeCompletionHandler = *const fn (PlayerNodeCompletionCallbackType) callconv(.C) void;

/// https://developer.apple.com/documentation/AVFAudio/AVAudioPlayerNode?language=objc
pub const PlayerNode = opaque {
    pub const Internal = objc.ExternClass("AVAudioPlayerNode", @This(), Node, &.{Mixing});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn pan(_self: *@This()) f32 {
        return objc.msgSend(_self, "pan", f32, .{});
    }

    pub fn setPan(_self: *@This(), _pan: f32) void {
        return objc.msgSend(_self, "setPan:", void, .{_pan});
    }

    pub fn renderingAlgorithm(_self: *@This()) AVAudio3DMixingRenderingAlgorithm {
        return objc.msgSend(_self, "renderingAlgorithm", AVAudio3DMixingRenderingAlgorithm, .{});
    }

    pub fn setRenderingAlgorithm(_self: *@This(), _renderingAlgorithm: AVAudio3DMixingRenderingAlgorithm) void {
        return objc.msgSend(_self, "setRenderingAlgorithm:", void, .{_renderingAlgorithm});
    }

    pub fn sourceMode(_self: *@This()) AVAudio3DMixingSourceMode {
        return objc.msgSend(_self, "sourceMode", AVAudio3DMixingSourceMode, .{});
    }

    pub fn setSourceMode(_self: *@This(), _sourceMode: AVAudio3DMixingSourceMode) void {
        return objc.msgSend(_self, "setSourceMode:", void, .{_sourceMode});
    }

    pub fn pointSourceInHeadMode(_self: *@This()) AVAudio3DMixingPointSourceInHeadMode {
        return objc.msgSend(_self, "pointSourceInHeadMode", AVAudio3DMixingPointSourceInHeadMode, .{});
    }

    pub fn setPointSourceInHeadMode(_self: *@This(), _pointSourceInHeadMode: AVAudio3DMixingPointSourceInHeadMode) void {
        return objc.msgSend(_self, "setPointSourceInHeadMode:", void, .{_pointSourceInHeadMode});
    }

    pub fn rate(_self: *@This()) f32 {
        return objc.msgSend(_self, "rate", f32, .{});
    }

    pub fn setRate(_self: *@This(), _rate: f32) void {
        return objc.msgSend(_self, "setRate:", void, .{_rate});
    }

    pub fn reverbBlend(_self: *@This()) f32 {
        return objc.msgSend(_self, "reverbBlend", f32, .{});
    }

    pub fn setReverbBlend(_self: *@This(), _reverbBlend: f32) void {
        return objc.msgSend(_self, "setReverbBlend:", void, .{_reverbBlend});
    }

    pub fn obstruction(_self: *@This()) f32 {
        return objc.msgSend(_self, "obstruction", f32, .{});
    }

    pub fn setObstruction(_self: *@This(), _obstruction: f32) void {
        return objc.msgSend(_self, "setObstruction:", void, .{_obstruction});
    }

    pub fn occlusion(_self: *@This()) f32 {
        return objc.msgSend(_self, "occlusion", f32, .{});
    }

    pub fn setOcclusion(_self: *@This(), _occlusion: f32) void {
        return objc.msgSend(_self, "setOcclusion:", void, .{_occlusion});
    }

    pub fn position(_self: *@This()) AVAudio3DPoint {
        return objc.msgSend(_self, "position", AVAudio3DPoint, .{});
    }

    pub fn setPosition(_self: *@This(), _position: AVAudio3DPoint) void {
        return objc.msgSend(_self, "setPosition:", void, .{_position});
    }

    pub fn destinationForMixerBus(_self: *@This(), _mixer: ?*Node, _bus: NodeBus) ?*MixingDestination {
        return objc.msgSend(_self, "destinationForMixer:bus:", ?*MixingDestination, .{ _mixer, _bus });
    }

    pub fn volume(_self: *@This()) f32 {
        return objc.msgSend(_self, "volume", f32, .{});
    }

    pub fn setVolume(_self: *@This(), _volume: f32) void {
        return objc.msgSend(_self, "setVolume:", void, .{_volume});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn scheduleBufferCompletionHandler(_self: *@This(), _buffer: ?*PCMBuffer, _completionHandler: NodeCompletionHandler) void {
        return objc.msgSend(_self, "scheduleBuffer:completionHandler:", void, .{ _buffer, _completionHandler });
    }

    pub fn scheduleBufferCompletionCallbackTypeCompletionHandler(_self: *@This(), _buffer: ?*PCMBuffer, _callbackType: PlayerNodeCompletionCallbackType, _completionHandler: PlayerNodeCompletionHandler) void {
        return objc.msgSend(_self, "scheduleBuffer:completionCallbackType:completionHandler:", void, .{ _buffer, _callbackType, _completionHandler });
    }

    pub fn scheduleBufferAtTimeOptionsCompletionHandler(
        _self: *@This(),
        _buffer: ?*PCMBuffer,
        _when: ?*Time,
        _options: PlayerNodeBufferOptions,
        _completionHandler: NodeCompletionHandler,
    ) void {
        return objc.msgSend(_self, "scheduleBuffer:atTime:options:completionHandler:", void, .{
            _buffer,
            _when,
            _options,
            _completionHandler,
        });
    }

    pub fn scheduleBufferAtTimeOptionsCompletionCallbackTypeCompletionHandler(
        _self: *@This(),
        _buffer: ?*PCMBuffer,
        _when: ?*Time,
        _options: PlayerNodeBufferOptions,
        _callbackType: PlayerNodeCompletionCallbackType,
        _completionHandler: PlayerNodeCompletionHandler,
    ) void {
        return objc.msgSend(_self, "scheduleBuffer:atTime:options:completionCallbackType:completionHandler:", void, .{
            _buffer,
            _when,
            _options,
            _callbackType,
            _completionHandler,
        });
    }

    pub fn scheduleFileAtTimeCompletionHandler(_self: *@This(), _file: ?*File, _when: ?*Time, _completionHandler: NodeCompletionHandler) void {
        return objc.msgSend(_self, "scheduleFile:atTime:completionHandler:", void, .{ _file, _when, _completionHandler });
    }

    pub fn scheduleFileAtTimeCompletionCallbackTypeCompletionHandler(
        _self: *@This(),
        _file: ?*File,
        _when: ?*Time,
        _callbackType: PlayerNodeCompletionCallbackType,
        _completionHandler: PlayerNodeCompletionHandler,
    ) void {
        return objc.msgSend(_self, "scheduleFile:atTime:completionCallbackType:completionHandler:", void, .{
            _file,
            _when,
            _callbackType,
            _completionHandler,
        });
    }

    pub fn scheduleSegmentStartingFrameFrameCountAtTimeCompletionHandler(
        _self: *@This(),
        _file: ?*File,
        _startFrame: FramePosition,
        _numberFrames: FrameCount,
        _when: ?*Time,
        _completionHandler: NodeCompletionHandler,
    ) void {
        return objc.msgSend(_self, "scheduleSegment:startingFrame:frameCount:atTime:completionHandler:", void, .{
            _file,
            _startFrame,
            _numberFrames,
            _when,
            _completionHandler,
        });
    }

    pub fn scheduleSegmentStartingFrameFrameCountAtTimeCompletionCallbackTypeCompletionHandler(
        _self: *@This(),
        _file: ?*File,
        _startFrame: FramePosition,
        _numberFrames: FrameCount,
        _when: ?*Time,
        _callbackType: PlayerNodeCompletionCallbackType,
        _completionHandler: PlayerNodeCompletionHandler,
    ) void {
        return objc.msgSend(_self, "scheduleSegment:startingFrame:frameCount:atTime:completionCallbackType:completionHandler:", void, .{
            _file,
            _startFrame,
            _numberFrames,
            _when,
            _callbackType,
            _completionHandler,
        });
    }

    pub fn stop(_self: *@This()) void {
        return objc.msgSend(_self, "stop", void, .{});
    }

    pub fn prepareWithFrameCount(_self: *@This(), _frameCount: FrameCount) void {
        return objc.msgSend(_self, "prepareWithFrameCount:", void, .{_frameCount});
    }

    pub fn play(_self: *@This()) void {
        return objc.msgSend(_self, "play", void, .{});
    }

    pub fn playAtTime(_self: *@This(), _when: ?*Time) void {
        return objc.msgSend(_self, "playAtTime:", void, .{_when});
    }

    pub fn pause(_self: *@This()) void {
        return objc.msgSend(_self, "pause", void, .{});
    }

    pub fn nodeTimeForPlayerTime(_self: *@This(), _playerTime: ?*Time) ?*Time {
        return objc.msgSend(_self, "nodeTimeForPlayerTime:", ?*Time, .{_playerTime});
    }

    pub fn playerTimeForNodeTime(_self: *@This(), _nodeTime: ?*Time) ?*Time {
        return objc.msgSend(_self, "playerTimeForNodeTime:", ?*Time, .{_nodeTime});
    }

    pub fn isPlaying(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isPlaying", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioRecorder?language=objc
pub const Recorder = opaque {
    pub const Internal = objc.ExternClass("AVAudioRecorder", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithURLSettingsError(_self: *@This(), _url: ?*foundation.URL, _settings: ?*foundation.Dictionary(?*foundation.String, ?objc.Id), _outError: ?*?*foundation.Error) *@This() {
        return objc.msgSend(_self, "initWithURL:settings:error:", *@This(), .{ _url, _settings, _outError });
    }

    pub fn initWithURLFormatError(_self: *@This(), _url: ?*foundation.URL, _format: ?*Format, _outError: ?*?*foundation.Error) *@This() {
        return objc.msgSend(_self, "initWithURL:format:error:", *@This(), .{ _url, _format, _outError });
    }

    pub fn prepareToRecord(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "prepareToRecord", objc.BOOL, .{});
    }

    pub fn record(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "record", objc.BOOL, .{});
    }

    pub fn recordAtTime(_self: *@This(), _time: foundation.TimeInterval) objc.BOOL {
        return objc.msgSend(_self, "recordAtTime:", objc.BOOL, .{_time});
    }

    pub fn recordForDuration(_self: *@This(), _duration: foundation.TimeInterval) objc.BOOL {
        return objc.msgSend(_self, "recordForDuration:", objc.BOOL, .{_duration});
    }

    pub fn recordAtTimeForDuration(_self: *@This(), _time: foundation.TimeInterval, _duration: foundation.TimeInterval) objc.BOOL {
        return objc.msgSend(_self, "recordAtTime:forDuration:", objc.BOOL, .{ _time, _duration });
    }

    pub fn pause(_self: *@This()) void {
        return objc.msgSend(_self, "pause", void, .{});
    }

    pub fn stop(_self: *@This()) void {
        return objc.msgSend(_self, "stop", void, .{});
    }

    pub fn deleteRecording(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "deleteRecording", objc.BOOL, .{});
    }

    pub fn updateMeters(_self: *@This()) void {
        return objc.msgSend(_self, "updateMeters", void, .{});
    }

    pub fn peakPowerForChannel(_self: *@This(), _channelNumber: objc.NSUInteger) f32 {
        return objc.msgSend(_self, "peakPowerForChannel:", f32, .{_channelNumber});
    }

    pub fn averagePowerForChannel(_self: *@This(), _channelNumber: objc.NSUInteger) f32 {
        return objc.msgSend(_self, "averagePowerForChannel:", f32, .{_channelNumber});
    }

    pub fn isRecording(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRecording", objc.BOOL, .{});
    }

    pub fn url(_self: *@This()) ?*foundation.URL {
        return objc.msgSend(_self, "url", ?*foundation.URL, .{});
    }

    pub fn settings(_self: *@This()) ?*foundation.Dictionary(?*foundation.String, ?objc.Id) {
        return objc.msgSend(_self, "settings", ?*foundation.Dictionary(?*foundation.String, ?objc.Id), .{});
    }

    pub fn format(_self: *@This()) ?*Format {
        return objc.msgSend(_self, "format", ?*Format, .{});
    }

    pub fn delegate(_self: *@This()) ?*objc.id {
        return objc.msgSend(_self, "delegate", ?*objc.id, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*objc.id) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn currentTime(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "currentTime", foundation.TimeInterval, .{});
    }

    pub fn deviceCurrentTime(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "deviceCurrentTime", foundation.TimeInterval, .{});
    }

    pub fn isMeteringEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isMeteringEnabled", objc.BOOL, .{});
    }

    pub fn setMeteringEnabled(_self: *@This(), _meteringEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setMeteringEnabled:", void, .{_meteringEnabled});
    }

    pub fn channelAssignments(_self: *@This()) ?*foundation.Array(?*SessionChannelDescription) {
        return objc.msgSend(_self, "channelAssignments", ?*foundation.Array(?*SessionChannelDescription), .{});
    }

    pub fn setChannelAssignments(_self: *@This(), _channelAssignments: ?*foundation.Array(?*SessionChannelDescription)) void {
        return objc.msgSend(_self, "setChannelAssignments:", void, .{_channelAssignments});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioRecorderDelegate?language=objc
pub const RecorderDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn audioRecorderDidFinishRecordingSuccessfully(_self: *@This(), _recorder: ?*Recorder, _flag: objc.BOOL) void {
        return objc.msgSend(_self, "audioRecorderDidFinishRecording:successfully:", void, .{ _recorder, _flag });
    }

    pub fn audioRecorderEncodeErrorDidOccurError(_self: *@This(), _recorder: ?*Recorder, _error: ?*foundation.Error) void {
        return objc.msgSend(_self, "audioRecorderEncodeErrorDidOccur:error:", void, .{ _recorder, _error });
    }
};

pub const RoutingArbitrationCategory = objc.NSInteger;
pub const RoutingArbitrationCategory_Playback: objc.NSInteger = 0;
pub const RoutingArbitrationCategory_PlayAndRecord: objc.NSInteger = 1;
pub const RoutingArbitrationCategory_PlayAndRecordVoice: objc.NSInteger = 2;

/// https://developer.apple.com/documentation/AVFAudio/AVAudioRoutingArbiter?language=objc
pub const RoutingArbiter = opaque {
    pub const Internal = objc.ExternClass("AVAudioRoutingArbiter", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn beginArbitrationWithCategoryCompletionHandler(_self: *@This(), _category: RoutingArbitrationCategory, _handler: *const fn (objc.BOOL, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(_self, "beginArbitrationWithCategory:completionHandler:", void, .{ _category, _handler });
    }

    pub fn leaveArbitration(_self: *@This()) void {
        return objc.msgSend(_self, "leaveArbitration", void, .{});
    }

    pub fn sharedRoutingArbiter() ?*RoutingArbiter {
        return objc.msgSend(Internal.class(), "sharedRoutingArbiter", ?*RoutingArbiter, .{});
    }
};

pub const AVMusicSequenceLoadOptions = objc.NSUInteger;
pub const AVMusicSequenceLoadOptions_SMF_PreserveTracks: objc.NSUInteger = 0;
pub const AVMusicSequenceLoadOptions_SMF_ChannelsToTracks: objc.NSUInteger = 1;

pub const _AVBeatRange = extern struct {
    start: AVMusicTimeStamp,
    length: AVMusicTimeStamp,
};

pub const AVBeatRange = _AVBeatRange;

pub const SequencerInfoDictionaryKey = ?*foundation.String;

/// https://developer.apple.com/documentation/AVFAudio/AVAudioSequencer?language=objc
pub const Sequencer = opaque {
    pub const UserCallback = *const fn (?*AVMusicTrack, ?*foundation.Data, AVMusicTimeStamp) callconv(.C) void;

    pub const Internal = objc.ExternClass("AVAudioSequencer", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn initWithAudioEngine(_self: *@This(), _engine: ?*Engine) *@This() {
        return objc.msgSend(_self, "initWithAudioEngine:", *@This(), .{_engine});
    }

    pub fn loadFromURLOptionsError(_self: *@This(), _fileURL: ?*foundation.URL, _options: AVMusicSequenceLoadOptions, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "loadFromURL:options:error:", objc.BOOL, .{ _fileURL, _options, _outError });
    }

    pub fn loadFromDataOptionsError(_self: *@This(), _data: ?*foundation.Data, _options: AVMusicSequenceLoadOptions, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "loadFromData:options:error:", objc.BOOL, .{ _data, _options, _outError });
    }

    pub fn writeToURLSMPTEResolutionReplaceExistingError(
        _self: *@This(),
        _fileURL: ?*foundation.URL,
        _resolution: objc.NSInteger,
        _replace: objc.BOOL,
        _outError: ?*?*foundation.Error,
    ) objc.BOOL {
        return objc.msgSend(_self, "writeToURL:SMPTEResolution:replaceExisting:error:", objc.BOOL, .{
            _fileURL,
            _resolution,
            _replace,
            _outError,
        });
    }

    pub fn dataWithSMPTEResolutionError(_self: *@This(), _SMPTEResolution: objc.NSInteger, _outError: ?*?*foundation.Error) ?*foundation.Data {
        return objc.msgSend(_self, "dataWithSMPTEResolution:error:", ?*foundation.Data, .{ _SMPTEResolution, _outError });
    }

    pub fn secondsForBeats(_self: *@This(), _beats: AVMusicTimeStamp) foundation.TimeInterval {
        return objc.msgSend(_self, "secondsForBeats:", foundation.TimeInterval, .{_beats});
    }

    pub fn beatsForSeconds(_self: *@This(), _seconds: foundation.TimeInterval) AVMusicTimeStamp {
        return objc.msgSend(_self, "beatsForSeconds:", AVMusicTimeStamp, .{_seconds});
    }

    pub fn reverseEvents(_self: *@This()) void {
        return objc.msgSend(_self, "reverseEvents", void, .{});
    }

    pub fn createAndAppendTrack(_self: *@This()) ?*AVMusicTrack {
        return objc.msgSend(_self, "createAndAppendTrack", ?*AVMusicTrack, .{});
    }

    pub fn removeTrack(_self: *@This(), _track: ?*AVMusicTrack) objc.BOOL {
        return objc.msgSend(_self, "removeTrack:", objc.BOOL, .{_track});
    }

    pub fn setUserCallback(_self: *@This(), _userCallback: Sequencer.UserCallback) void {
        return objc.msgSend(_self, "setUserCallback:", void, .{_userCallback});
    }

    pub fn tracks(_self: *@This()) ?*foundation.Array(?*AVMusicTrack) {
        return objc.msgSend(_self, "tracks", ?*foundation.Array(?*AVMusicTrack), .{});
    }

    pub fn tempoTrack(_self: *@This()) ?*AVMusicTrack {
        return objc.msgSend(_self, "tempoTrack", ?*AVMusicTrack, .{});
    }

    pub fn userInfo(_self: *@This()) ?*foundation.Dictionary(?*foundation.String, ?objc.Id) {
        return objc.msgSend(_self, "userInfo", ?*foundation.Dictionary(?*foundation.String, ?objc.Id), .{});
    }

    pub fn hostTimeForBeatsError(_self: *@This(), _inBeats: AVMusicTimeStamp, _outError: ?*?*foundation.Error) objc.UInt64 {
        return objc.msgSend(_self, "hostTimeForBeats:error:", objc.UInt64, .{ _inBeats, _outError });
    }

    pub fn beatsForHostTimeError(_self: *@This(), _inHostTime: objc.UInt64, _outError: ?*?*foundation.Error) AVMusicTimeStamp {
        return objc.msgSend(_self, "beatsForHostTime:error:", AVMusicTimeStamp, .{ _inHostTime, _outError });
    }

    pub fn prepareToPlay(_self: *@This()) void {
        return objc.msgSend(_self, "prepareToPlay", void, .{});
    }

    pub fn startAndReturnError(_self: *@This(), _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "startAndReturnError:", objc.BOOL, .{_outError});
    }

    pub fn stop(_self: *@This()) void {
        return objc.msgSend(_self, "stop", void, .{});
    }

    pub fn currentPositionInSeconds(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "currentPositionInSeconds", foundation.TimeInterval, .{});
    }

    pub fn setCurrentPositionInSeconds(_self: *@This(), _currentPositionInSeconds: foundation.TimeInterval) void {
        return objc.msgSend(_self, "setCurrentPositionInSeconds:", void, .{_currentPositionInSeconds});
    }

    pub fn currentPositionInBeats(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "currentPositionInBeats", foundation.TimeInterval, .{});
    }

    pub fn setCurrentPositionInBeats(_self: *@This(), _currentPositionInBeats: foundation.TimeInterval) void {
        return objc.msgSend(_self, "setCurrentPositionInBeats:", void, .{_currentPositionInBeats});
    }

    pub fn isPlaying(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isPlaying", objc.BOOL, .{});
    }

    pub fn rate(_self: *@This()) f32 {
        return objc.msgSend(_self, "rate", f32, .{});
    }

    pub fn setRate(_self: *@This(), _rate: f32) void {
        return objc.msgSend(_self, "setRate:", void, .{_rate});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVMusicTrack?language=objc
pub const AVMusicTrack = opaque {
    pub const LoopCount = AVMusicTrack.LoopCount;

    pub const AVMusicEventEnumerationBlock = *const fn (?*AVMusicEvent, ?*AVMusicTimeStamp, ?*objc.BOOL) callconv(.C) void;

    pub const Internal = objc.ExternClass("AVMusicTrack", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn destinationAudioUnit(_self: *@This()) ?*Unit {
        return objc.msgSend(_self, "destinationAudioUnit", ?*Unit, .{});
    }

    pub fn setDestinationAudioUnit(_self: *@This(), _destinationAudioUnit: ?*Unit) void {
        return objc.msgSend(_self, "setDestinationAudioUnit:", void, .{_destinationAudioUnit});
    }

    pub fn setDestinationMIDIEndpoint(_self: *@This(), _destinationMIDIEndpoint: core_midi.EndpointRef) void {
        return objc.msgSend(_self, "setDestinationMIDIEndpoint:", void, .{_destinationMIDIEndpoint});
    }

    pub fn destinationMIDIEndpoint(_self: *@This()) core_midi.EndpointRef {
        return objc.msgSend(_self, "destinationMIDIEndpoint", core_midi.EndpointRef, .{});
    }

    pub fn setLoopRange(_self: *@This(), _loopRange: AVBeatRange) void {
        return objc.msgSend(_self, "setLoopRange:", void, .{_loopRange});
    }

    pub fn loopRange(_self: *@This()) AVBeatRange {
        return objc.msgSend(_self, "loopRange", AVBeatRange, .{});
    }

    pub fn setLoopingEnabled(_self: *@This(), _loopingEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setLoopingEnabled:", void, .{_loopingEnabled});
    }

    pub fn isLoopingEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isLoopingEnabled", objc.BOOL, .{});
    }

    pub fn numberOfLoops(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "numberOfLoops", objc.NSInteger, .{});
    }

    pub fn setNumberOfLoops(_self: *@This(), _numberOfLoops: objc.NSInteger) void {
        return objc.msgSend(_self, "setNumberOfLoops:", void, .{_numberOfLoops});
    }

    pub fn offsetTime(_self: *@This()) AVMusicTimeStamp {
        return objc.msgSend(_self, "offsetTime", AVMusicTimeStamp, .{});
    }

    pub fn setOffsetTime(_self: *@This(), _offsetTime: AVMusicTimeStamp) void {
        return objc.msgSend(_self, "setOffsetTime:", void, .{_offsetTime});
    }

    pub fn isMuted(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isMuted", objc.BOOL, .{});
    }

    pub fn setMuted(_self: *@This(), _muted: objc.BOOL) void {
        return objc.msgSend(_self, "setMuted:", void, .{_muted});
    }

    pub fn isSoloed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isSoloed", objc.BOOL, .{});
    }

    pub fn setSoloed(_self: *@This(), _soloed: objc.BOOL) void {
        return objc.msgSend(_self, "setSoloed:", void, .{_soloed});
    }

    pub fn lengthInBeats(_self: *@This()) AVMusicTimeStamp {
        return objc.msgSend(_self, "lengthInBeats", AVMusicTimeStamp, .{});
    }

    pub fn setLengthInBeats(_self: *@This(), _lengthInBeats: AVMusicTimeStamp) void {
        return objc.msgSend(_self, "setLengthInBeats:", void, .{_lengthInBeats});
    }

    pub fn lengthInSeconds(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "lengthInSeconds", foundation.TimeInterval, .{});
    }

    pub fn setLengthInSeconds(_self: *@This(), _lengthInSeconds: foundation.TimeInterval) void {
        return objc.msgSend(_self, "setLengthInSeconds:", void, .{_lengthInSeconds});
    }

    pub fn timeResolution(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "timeResolution", objc.NSUInteger, .{});
    }

    pub fn usesAutomatedParameters(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "usesAutomatedParameters", objc.BOOL, .{});
    }

    pub fn setUsesAutomatedParameters(_self: *@This(), _usesAutomatedParameters: objc.BOOL) void {
        return objc.msgSend(_self, "setUsesAutomatedParameters:", void, .{_usesAutomatedParameters});
    }

    pub fn addEventAtBeat(_self: *@This(), _event: ?*AVMusicEvent, _beat: AVMusicTimeStamp) void {
        return objc.msgSend(_self, "addEvent:atBeat:", void, .{ _event, _beat });
    }

    pub fn moveEventsInRangeByAmount(_self: *@This(), _range: AVBeatRange, _beatAmount: AVMusicTimeStamp) void {
        return objc.msgSend(_self, "moveEventsInRange:byAmount:", void, .{ _range, _beatAmount });
    }

    pub fn clearEventsInRange(_self: *@This(), _range: AVBeatRange) void {
        return objc.msgSend(_self, "clearEventsInRange:", void, .{_range});
    }

    pub fn cutEventsInRange(_self: *@This(), _range: AVBeatRange) void {
        return objc.msgSend(_self, "cutEventsInRange:", void, .{_range});
    }

    pub fn copyEventsInRangeFromTrackInsertAtBeat(_self: *@This(), _range: AVBeatRange, _sourceTrack: ?*AVMusicTrack, _insertStartBeat: AVMusicTimeStamp) void {
        return objc.msgSend(_self, "copyEventsInRange:fromTrack:insertAtBeat:", void, .{ _range, _sourceTrack, _insertStartBeat });
    }

    pub fn copyAndMergeEventsInRangeFromTrackMergeAtBeat(_self: *@This(), _range: AVBeatRange, _sourceTrack: ?*AVMusicTrack, _mergeStartBeat: AVMusicTimeStamp) void {
        return objc.msgSend(_self, "copyAndMergeEventsInRange:fromTrack:mergeAtBeat:", void, .{ _range, _sourceTrack, _mergeStartBeat });
    }

    pub fn enumerateEventsInRangeUsingBlock(_self: *@This(), _range: AVBeatRange, _block: AVMusicTrack.AVMusicEventEnumerationBlock) void {
        return objc.msgSend(_self, "enumerateEventsInRange:usingBlock:", void, .{ _range, _block });
    }
};

pub const SinkNodeReceiverBlock = objc.OSStatus;

/// https://developer.apple.com/documentation/AVFAudio/AVAudioSinkNode?language=objc
pub const SinkNode = opaque {
    pub const Internal = objc.ExternClass("AVAudioSinkNode", @This(), Node, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn initWithReceiverBlock(_self: *@This(), _block: SinkNodeReceiverBlock) *@This() {
        return objc.msgSend(_self, "initWithReceiverBlock:", *@This(), .{_block});
    }
};

pub const SourceNodeRenderBlock = objc.OSStatus;

/// https://developer.apple.com/documentation/AVFAudio/AVAudioSourceNode?language=objc
pub const SourceNode = opaque {
    pub const Internal = objc.ExternClass("AVAudioSourceNode", @This(), Node, &.{Mixing});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn pan(_self: *@This()) f32 {
        return objc.msgSend(_self, "pan", f32, .{});
    }

    pub fn setPan(_self: *@This(), _pan: f32) void {
        return objc.msgSend(_self, "setPan:", void, .{_pan});
    }

    pub fn renderingAlgorithm(_self: *@This()) AVAudio3DMixingRenderingAlgorithm {
        return objc.msgSend(_self, "renderingAlgorithm", AVAudio3DMixingRenderingAlgorithm, .{});
    }

    pub fn setRenderingAlgorithm(_self: *@This(), _renderingAlgorithm: AVAudio3DMixingRenderingAlgorithm) void {
        return objc.msgSend(_self, "setRenderingAlgorithm:", void, .{_renderingAlgorithm});
    }

    pub fn sourceMode(_self: *@This()) AVAudio3DMixingSourceMode {
        return objc.msgSend(_self, "sourceMode", AVAudio3DMixingSourceMode, .{});
    }

    pub fn setSourceMode(_self: *@This(), _sourceMode: AVAudio3DMixingSourceMode) void {
        return objc.msgSend(_self, "setSourceMode:", void, .{_sourceMode});
    }

    pub fn pointSourceInHeadMode(_self: *@This()) AVAudio3DMixingPointSourceInHeadMode {
        return objc.msgSend(_self, "pointSourceInHeadMode", AVAudio3DMixingPointSourceInHeadMode, .{});
    }

    pub fn setPointSourceInHeadMode(_self: *@This(), _pointSourceInHeadMode: AVAudio3DMixingPointSourceInHeadMode) void {
        return objc.msgSend(_self, "setPointSourceInHeadMode:", void, .{_pointSourceInHeadMode});
    }

    pub fn rate(_self: *@This()) f32 {
        return objc.msgSend(_self, "rate", f32, .{});
    }

    pub fn setRate(_self: *@This(), _rate: f32) void {
        return objc.msgSend(_self, "setRate:", void, .{_rate});
    }

    pub fn reverbBlend(_self: *@This()) f32 {
        return objc.msgSend(_self, "reverbBlend", f32, .{});
    }

    pub fn setReverbBlend(_self: *@This(), _reverbBlend: f32) void {
        return objc.msgSend(_self, "setReverbBlend:", void, .{_reverbBlend});
    }

    pub fn obstruction(_self: *@This()) f32 {
        return objc.msgSend(_self, "obstruction", f32, .{});
    }

    pub fn setObstruction(_self: *@This(), _obstruction: f32) void {
        return objc.msgSend(_self, "setObstruction:", void, .{_obstruction});
    }

    pub fn occlusion(_self: *@This()) f32 {
        return objc.msgSend(_self, "occlusion", f32, .{});
    }

    pub fn setOcclusion(_self: *@This(), _occlusion: f32) void {
        return objc.msgSend(_self, "setOcclusion:", void, .{_occlusion});
    }

    pub fn position(_self: *@This()) AVAudio3DPoint {
        return objc.msgSend(_self, "position", AVAudio3DPoint, .{});
    }

    pub fn setPosition(_self: *@This(), _position: AVAudio3DPoint) void {
        return objc.msgSend(_self, "setPosition:", void, .{_position});
    }

    pub fn destinationForMixerBus(_self: *@This(), _mixer: ?*Node, _bus: NodeBus) ?*MixingDestination {
        return objc.msgSend(_self, "destinationForMixer:bus:", ?*MixingDestination, .{ _mixer, _bus });
    }

    pub fn volume(_self: *@This()) f32 {
        return objc.msgSend(_self, "volume", f32, .{});
    }

    pub fn setVolume(_self: *@This(), _volume: f32) void {
        return objc.msgSend(_self, "setVolume:", void, .{_volume});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn initWithRenderBlock(_self: *@This(), _block: SourceNodeRenderBlock) *@This() {
        return objc.msgSend(_self, "initWithRenderBlock:", *@This(), .{_block});
    }

    pub fn initWithFormatRenderBlock(_self: *@This(), _format: ?*Format, _block: SourceNodeRenderBlock) *@This() {
        return objc.msgSend(_self, "initWithFormat:renderBlock:", *@This(), .{ _format, _block });
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioUnitComponent?language=objc
pub const UnitComponent = opaque {
    pub const Internal = objc.ExternClass("AVAudioUnitComponent", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn supportsNumberInputChannelsOutputChannels(_self: *@This(), _numInputChannels: objc.NSInteger, _numOutputChannels: objc.NSInteger) objc.BOOL {
        return objc.msgSend(_self, "supportsNumberInputChannels:outputChannels:", objc.BOOL, .{ _numInputChannels, _numOutputChannels });
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn typeName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "typeName", ?*foundation.String, .{});
    }

    pub fn localizedTypeName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "localizedTypeName", ?*foundation.String, .{});
    }

    pub fn manufacturerName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "manufacturerName", ?*foundation.String, .{});
    }

    pub fn version(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "version", objc.NSUInteger, .{});
    }

    pub fn versionString(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "versionString", ?*foundation.String, .{});
    }

    pub fn componentURL(_self: *@This()) ?*foundation.URL {
        return objc.msgSend(_self, "componentURL", ?*foundation.URL, .{});
    }

    pub fn availableArchitectures(_self: *@This()) ?*foundation.Array(?*foundation.Number) {
        return objc.msgSend(_self, "availableArchitectures", ?*foundation.Array(?*foundation.Number), .{});
    }

    pub fn isSandboxSafe(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isSandboxSafe", objc.BOOL, .{});
    }

    pub fn hasMIDIInput(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "hasMIDIInput", objc.BOOL, .{});
    }

    pub fn hasMIDIOutput(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "hasMIDIOutput", objc.BOOL, .{});
    }

    pub fn audioComponent(_self: *@This()) audio_toolbox.Component {
        return objc.msgSend(_self, "audioComponent", audio_toolbox.Component, .{});
    }

    pub fn userTagNames(_self: *@This()) ?*foundation.Array(?*foundation.String) {
        return objc.msgSend(_self, "userTagNames", ?*foundation.Array(?*foundation.String), .{});
    }

    pub fn setUserTagNames(_self: *@This(), _userTagNames: ?*foundation.Array(?*foundation.String)) void {
        return objc.msgSend(_self, "setUserTagNames:", void, .{_userTagNames});
    }

    pub fn allTagNames(_self: *@This()) ?*foundation.Array(?*foundation.String) {
        return objc.msgSend(_self, "allTagNames", ?*foundation.Array(?*foundation.String), .{});
    }

    pub fn audioComponentDescription(_self: *@This()) audio_toolbox.ComponentDescription {
        return objc.msgSend(_self, "audioComponentDescription", audio_toolbox.ComponentDescription, .{});
    }

    pub fn iconURL(_self: *@This()) ?*foundation.URL {
        return objc.msgSend(_self, "iconURL", ?*foundation.URL, .{});
    }

    pub fn icon(_self: *@This()) ?*app_kit.Image {
        return objc.msgSend(_self, "icon", ?*app_kit.Image, .{});
    }

    pub fn passesAUVal(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "passesAUVal", objc.BOOL, .{});
    }

    pub fn hasCustomView(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "hasCustomView", objc.BOOL, .{});
    }

    pub fn configurationDictionary(_self: *@This()) ?*foundation.Dictionary(?*foundation.String, ?objc.Id) {
        return objc.msgSend(_self, "configurationDictionary", ?*foundation.Dictionary(?*foundation.String, ?objc.Id), .{});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioUnitComponentManager?language=objc
pub const UnitComponentManager = opaque {
    pub const Internal = objc.ExternClass("AVAudioUnitComponentManager", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn sharedAudioUnitComponentManager() *@This() {
        return objc.msgSend(Internal.class(), "sharedAudioUnitComponentManager", *@This(), .{});
    }

    pub fn componentsMatchingPredicate(_self: *@This(), _predicate: ?*foundation.Predicate) ?*foundation.Array(?*UnitComponent) {
        return objc.msgSend(_self, "componentsMatchingPredicate:", ?*foundation.Array(?*UnitComponent), .{_predicate});
    }

    pub fn componentsPassingTest(_self: *@This(), _testHandler: *const fn (?*UnitComponent, ?*objc.BOOL) callconv(.C) objc.BOOL) ?*foundation.Array(?*UnitComponent) {
        return objc.msgSend(_self, "componentsPassingTest:", ?*foundation.Array(?*UnitComponent), .{_testHandler});
    }

    pub fn componentsMatchingDescription(_self: *@This(), _desc: audio_toolbox.ComponentDescription) ?*foundation.Array(?*UnitComponent) {
        return objc.msgSend(_self, "componentsMatchingDescription:", ?*foundation.Array(?*UnitComponent), .{_desc});
    }

    pub fn tagNames(_self: *@This()) ?*foundation.Array(?*foundation.String) {
        return objc.msgSend(_self, "tagNames", ?*foundation.Array(?*foundation.String), .{});
    }

    pub fn standardLocalizedTagNames(_self: *@This()) ?*foundation.Array(?*foundation.String) {
        return objc.msgSend(_self, "standardLocalizedTagNames", ?*foundation.Array(?*foundation.String), .{});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioUnitDelay?language=objc
pub const UnitDelay = opaque {
    pub const Internal = objc.ExternClass("AVAudioUnitDelay", @This(), UnitEffect, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn delayTime(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "delayTime", foundation.TimeInterval, .{});
    }

    pub fn setDelayTime(_self: *@This(), _delayTime: foundation.TimeInterval) void {
        return objc.msgSend(_self, "setDelayTime:", void, .{_delayTime});
    }

    pub fn feedback(_self: *@This()) f32 {
        return objc.msgSend(_self, "feedback", f32, .{});
    }

    pub fn setFeedback(_self: *@This(), _feedback: f32) void {
        return objc.msgSend(_self, "setFeedback:", void, .{_feedback});
    }

    pub fn lowPassCutoff(_self: *@This()) f32 {
        return objc.msgSend(_self, "lowPassCutoff", f32, .{});
    }

    pub fn setLowPassCutoff(_self: *@This(), _lowPassCutoff: f32) void {
        return objc.msgSend(_self, "setLowPassCutoff:", void, .{_lowPassCutoff});
    }

    pub fn wetDryMix(_self: *@This()) f32 {
        return objc.msgSend(_self, "wetDryMix", f32, .{});
    }

    pub fn setWetDryMix(_self: *@This(), _wetDryMix: f32) void {
        return objc.msgSend(_self, "setWetDryMix:", void, .{_wetDryMix});
    }
};

pub const UnitDistortionPreset = objc.NSInteger;
pub const UnitDistortionPreset_DrumsBitBrush: objc.NSInteger = 0;
pub const UnitDistortionPreset_DrumsBufferBeats: objc.NSInteger = 1;
pub const UnitDistortionPreset_DrumsLoFi: objc.NSInteger = 2;
pub const UnitDistortionPreset_MultiBrokenSpeaker: objc.NSInteger = 3;
pub const UnitDistortionPreset_MultiCellphoneConcert: objc.NSInteger = 4;
pub const UnitDistortionPreset_MultiDecimated1: objc.NSInteger = 5;
pub const UnitDistortionPreset_MultiDecimated2: objc.NSInteger = 6;
pub const UnitDistortionPreset_MultiDecimated3: objc.NSInteger = 7;
pub const UnitDistortionPreset_MultiDecimated4: objc.NSInteger = 8;
pub const UnitDistortionPreset_MultiDistortedFunk: objc.NSInteger = 9;
pub const UnitDistortionPreset_MultiDistortedCubed: objc.NSInteger = 10;
pub const UnitDistortionPreset_MultiDistortedSquared: objc.NSInteger = 11;
pub const UnitDistortionPreset_MultiEcho1: objc.NSInteger = 12;
pub const UnitDistortionPreset_MultiEcho2: objc.NSInteger = 13;
pub const UnitDistortionPreset_MultiEchoTight1: objc.NSInteger = 14;
pub const UnitDistortionPreset_MultiEchoTight2: objc.NSInteger = 15;
pub const UnitDistortionPreset_MultiEverythingIsBroken: objc.NSInteger = 16;
pub const UnitDistortionPreset_SpeechAlienChatter: objc.NSInteger = 17;
pub const UnitDistortionPreset_SpeechCosmicInterference: objc.NSInteger = 18;
pub const UnitDistortionPreset_SpeechGoldenPi: objc.NSInteger = 19;
pub const UnitDistortionPreset_SpeechRadioTower: objc.NSInteger = 20;
pub const UnitDistortionPreset_SpeechWaves: objc.NSInteger = 21;

/// https://developer.apple.com/documentation/AVFAudio/AVAudioUnitDistortion?language=objc
pub const UnitDistortion = opaque {
    pub const Internal = objc.ExternClass("AVAudioUnitDistortion", @This(), UnitEffect, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn loadFactoryPreset(_self: *@This(), _preset: UnitDistortionPreset) void {
        return objc.msgSend(_self, "loadFactoryPreset:", void, .{_preset});
    }

    pub fn preGain(_self: *@This()) f32 {
        return objc.msgSend(_self, "preGain", f32, .{});
    }

    pub fn setPreGain(_self: *@This(), _preGain: f32) void {
        return objc.msgSend(_self, "setPreGain:", void, .{_preGain});
    }

    pub fn wetDryMix(_self: *@This()) f32 {
        return objc.msgSend(_self, "wetDryMix", f32, .{});
    }

    pub fn setWetDryMix(_self: *@This(), _wetDryMix: f32) void {
        return objc.msgSend(_self, "setWetDryMix:", void, .{_wetDryMix});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioUnitGenerator?language=objc
pub const UnitGenerator = opaque {
    pub const Internal = objc.ExternClass("AVAudioUnitGenerator", @This(), Unit, &.{Mixing});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn pan(_self: *@This()) f32 {
        return objc.msgSend(_self, "pan", f32, .{});
    }

    pub fn setPan(_self: *@This(), _pan: f32) void {
        return objc.msgSend(_self, "setPan:", void, .{_pan});
    }

    pub fn renderingAlgorithm(_self: *@This()) AVAudio3DMixingRenderingAlgorithm {
        return objc.msgSend(_self, "renderingAlgorithm", AVAudio3DMixingRenderingAlgorithm, .{});
    }

    pub fn setRenderingAlgorithm(_self: *@This(), _renderingAlgorithm: AVAudio3DMixingRenderingAlgorithm) void {
        return objc.msgSend(_self, "setRenderingAlgorithm:", void, .{_renderingAlgorithm});
    }

    pub fn sourceMode(_self: *@This()) AVAudio3DMixingSourceMode {
        return objc.msgSend(_self, "sourceMode", AVAudio3DMixingSourceMode, .{});
    }

    pub fn setSourceMode(_self: *@This(), _sourceMode: AVAudio3DMixingSourceMode) void {
        return objc.msgSend(_self, "setSourceMode:", void, .{_sourceMode});
    }

    pub fn pointSourceInHeadMode(_self: *@This()) AVAudio3DMixingPointSourceInHeadMode {
        return objc.msgSend(_self, "pointSourceInHeadMode", AVAudio3DMixingPointSourceInHeadMode, .{});
    }

    pub fn setPointSourceInHeadMode(_self: *@This(), _pointSourceInHeadMode: AVAudio3DMixingPointSourceInHeadMode) void {
        return objc.msgSend(_self, "setPointSourceInHeadMode:", void, .{_pointSourceInHeadMode});
    }

    pub fn rate(_self: *@This()) f32 {
        return objc.msgSend(_self, "rate", f32, .{});
    }

    pub fn setRate(_self: *@This(), _rate: f32) void {
        return objc.msgSend(_self, "setRate:", void, .{_rate});
    }

    pub fn reverbBlend(_self: *@This()) f32 {
        return objc.msgSend(_self, "reverbBlend", f32, .{});
    }

    pub fn setReverbBlend(_self: *@This(), _reverbBlend: f32) void {
        return objc.msgSend(_self, "setReverbBlend:", void, .{_reverbBlend});
    }

    pub fn obstruction(_self: *@This()) f32 {
        return objc.msgSend(_self, "obstruction", f32, .{});
    }

    pub fn setObstruction(_self: *@This(), _obstruction: f32) void {
        return objc.msgSend(_self, "setObstruction:", void, .{_obstruction});
    }

    pub fn occlusion(_self: *@This()) f32 {
        return objc.msgSend(_self, "occlusion", f32, .{});
    }

    pub fn setOcclusion(_self: *@This(), _occlusion: f32) void {
        return objc.msgSend(_self, "setOcclusion:", void, .{_occlusion});
    }

    pub fn position(_self: *@This()) AVAudio3DPoint {
        return objc.msgSend(_self, "position", AVAudio3DPoint, .{});
    }

    pub fn setPosition(_self: *@This(), _position: AVAudio3DPoint) void {
        return objc.msgSend(_self, "setPosition:", void, .{_position});
    }

    pub fn destinationForMixerBus(_self: *@This(), _mixer: ?*Node, _bus: NodeBus) ?*MixingDestination {
        return objc.msgSend(_self, "destinationForMixer:bus:", ?*MixingDestination, .{ _mixer, _bus });
    }

    pub fn volume(_self: *@This()) f32 {
        return objc.msgSend(_self, "volume", f32, .{});
    }

    pub fn setVolume(_self: *@This(), _volume: f32) void {
        return objc.msgSend(_self, "setVolume:", void, .{_volume});
    }

    pub fn initWithAudioComponentDescription(_self: *@This(), _audioComponentDescription: audio_toolbox.ComponentDescription) *@This() {
        return objc.msgSend(_self, "initWithAudioComponentDescription:", *@This(), .{_audioComponentDescription});
    }

    pub fn bypass(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "bypass", objc.BOOL, .{});
    }

    pub fn setBypass(_self: *@This(), _bypass: objc.BOOL) void {
        return objc.msgSend(_self, "setBypass:", void, .{_bypass});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioUnitMIDIInstrument?language=objc
pub const UnitMIDIInstrument = opaque {
    pub const Internal = objc.ExternClass("AVAudioUnitMIDIInstrument", @This(), Unit, &.{Mixing});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn pan(_self: *@This()) f32 {
        return objc.msgSend(_self, "pan", f32, .{});
    }

    pub fn setPan(_self: *@This(), _pan: f32) void {
        return objc.msgSend(_self, "setPan:", void, .{_pan});
    }

    pub fn renderingAlgorithm(_self: *@This()) AVAudio3DMixingRenderingAlgorithm {
        return objc.msgSend(_self, "renderingAlgorithm", AVAudio3DMixingRenderingAlgorithm, .{});
    }

    pub fn setRenderingAlgorithm(_self: *@This(), _renderingAlgorithm: AVAudio3DMixingRenderingAlgorithm) void {
        return objc.msgSend(_self, "setRenderingAlgorithm:", void, .{_renderingAlgorithm});
    }

    pub fn sourceMode(_self: *@This()) AVAudio3DMixingSourceMode {
        return objc.msgSend(_self, "sourceMode", AVAudio3DMixingSourceMode, .{});
    }

    pub fn setSourceMode(_self: *@This(), _sourceMode: AVAudio3DMixingSourceMode) void {
        return objc.msgSend(_self, "setSourceMode:", void, .{_sourceMode});
    }

    pub fn pointSourceInHeadMode(_self: *@This()) AVAudio3DMixingPointSourceInHeadMode {
        return objc.msgSend(_self, "pointSourceInHeadMode", AVAudio3DMixingPointSourceInHeadMode, .{});
    }

    pub fn setPointSourceInHeadMode(_self: *@This(), _pointSourceInHeadMode: AVAudio3DMixingPointSourceInHeadMode) void {
        return objc.msgSend(_self, "setPointSourceInHeadMode:", void, .{_pointSourceInHeadMode});
    }

    pub fn rate(_self: *@This()) f32 {
        return objc.msgSend(_self, "rate", f32, .{});
    }

    pub fn setRate(_self: *@This(), _rate: f32) void {
        return objc.msgSend(_self, "setRate:", void, .{_rate});
    }

    pub fn reverbBlend(_self: *@This()) f32 {
        return objc.msgSend(_self, "reverbBlend", f32, .{});
    }

    pub fn setReverbBlend(_self: *@This(), _reverbBlend: f32) void {
        return objc.msgSend(_self, "setReverbBlend:", void, .{_reverbBlend});
    }

    pub fn obstruction(_self: *@This()) f32 {
        return objc.msgSend(_self, "obstruction", f32, .{});
    }

    pub fn setObstruction(_self: *@This(), _obstruction: f32) void {
        return objc.msgSend(_self, "setObstruction:", void, .{_obstruction});
    }

    pub fn occlusion(_self: *@This()) f32 {
        return objc.msgSend(_self, "occlusion", f32, .{});
    }

    pub fn setOcclusion(_self: *@This(), _occlusion: f32) void {
        return objc.msgSend(_self, "setOcclusion:", void, .{_occlusion});
    }

    pub fn position(_self: *@This()) AVAudio3DPoint {
        return objc.msgSend(_self, "position", AVAudio3DPoint, .{});
    }

    pub fn setPosition(_self: *@This(), _position: AVAudio3DPoint) void {
        return objc.msgSend(_self, "setPosition:", void, .{_position});
    }

    pub fn destinationForMixerBus(_self: *@This(), _mixer: ?*Node, _bus: NodeBus) ?*MixingDestination {
        return objc.msgSend(_self, "destinationForMixer:bus:", ?*MixingDestination, .{ _mixer, _bus });
    }

    pub fn volume(_self: *@This()) f32 {
        return objc.msgSend(_self, "volume", f32, .{});
    }

    pub fn setVolume(_self: *@This(), _volume: f32) void {
        return objc.msgSend(_self, "setVolume:", void, .{_volume});
    }

    pub fn initWithAudioComponentDescription(_self: *@This(), _description: audio_toolbox.ComponentDescription) *@This() {
        return objc.msgSend(_self, "initWithAudioComponentDescription:", *@This(), .{_description});
    }

    pub fn startNoteWithVelocityOnChannel(_self: *@This(), _note: objc.uint8_t, _velocity: objc.uint8_t, _channel: objc.uint8_t) void {
        return objc.msgSend(_self, "startNote:withVelocity:onChannel:", void, .{ _note, _velocity, _channel });
    }

    pub fn stopNoteOnChannel(_self: *@This(), _note: objc.uint8_t, _channel: objc.uint8_t) void {
        return objc.msgSend(_self, "stopNote:onChannel:", void, .{ _note, _channel });
    }

    pub fn sendControllerWithValueOnChannel(_self: *@This(), _controller: objc.uint8_t, _value: objc.uint8_t, _channel: objc.uint8_t) void {
        return objc.msgSend(_self, "sendController:withValue:onChannel:", void, .{ _controller, _value, _channel });
    }

    pub fn sendPitchBendOnChannel(_self: *@This(), _pitchbend: objc.uint16_t, _channel: objc.uint8_t) void {
        return objc.msgSend(_self, "sendPitchBend:onChannel:", void, .{ _pitchbend, _channel });
    }

    pub fn sendPressureOnChannel(_self: *@This(), _pressure: objc.uint8_t, _channel: objc.uint8_t) void {
        return objc.msgSend(_self, "sendPressure:onChannel:", void, .{ _pressure, _channel });
    }

    pub fn sendPressureForKeyWithValueOnChannel(_self: *@This(), _key: objc.uint8_t, _value: objc.uint8_t, _channel: objc.uint8_t) void {
        return objc.msgSend(_self, "sendPressureForKey:withValue:onChannel:", void, .{ _key, _value, _channel });
    }

    pub fn sendProgramChangeOnChannel(_self: *@This(), _program: objc.uint8_t, _channel: objc.uint8_t) void {
        return objc.msgSend(_self, "sendProgramChange:onChannel:", void, .{ _program, _channel });
    }

    pub fn sendProgramChangeBankMSBBankLSBOnChannel(
        _self: *@This(),
        _program: objc.uint8_t,
        _bankMSB: objc.uint8_t,
        _bankLSB: objc.uint8_t,
        _channel: objc.uint8_t,
    ) void {
        return objc.msgSend(_self, "sendProgramChange:bankMSB:bankLSB:onChannel:", void, .{
            _program,
            _bankMSB,
            _bankLSB,
            _channel,
        });
    }

    pub fn sendMIDIEventData1Data2(_self: *@This(), _midiStatus: objc.uint8_t, _data1: objc.uint8_t, _data2: objc.uint8_t) void {
        return objc.msgSend(_self, "sendMIDIEvent:data1:data2:", void, .{ _midiStatus, _data1, _data2 });
    }

    pub fn sendMIDIEventData1(_self: *@This(), _midiStatus: objc.uint8_t, _data1: objc.uint8_t) void {
        return objc.msgSend(_self, "sendMIDIEvent:data1:", void, .{ _midiStatus, _data1 });
    }

    pub fn sendMIDISysExEvent(_self: *@This(), _midiData: ?*foundation.Data) void {
        return objc.msgSend(_self, "sendMIDISysExEvent:", void, .{_midiData});
    }

    pub fn sendMIDIEventList(_self: *@This(), _eventList: ?*const audio_toolbox.MIDIEventList) void {
        return objc.msgSend(_self, "sendMIDIEventList:", void, .{_eventList});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioUnitSampler?language=objc
pub const UnitSampler = opaque {
    pub const Internal = objc.ExternClass("AVAudioUnitSampler", @This(), UnitMIDIInstrument, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn loadSoundBankInstrumentAtURLProgramBankMSBBankLSBError(
        _self: *@This(),
        _bankURL: ?*foundation.URL,
        _program: objc.uint8_t,
        _bankMSB: objc.uint8_t,
        _bankLSB: objc.uint8_t,
        _outError: ?*?*foundation.Error,
    ) objc.BOOL {
        return objc.msgSend(_self, "loadSoundBankInstrumentAtURL:program:bankMSB:bankLSB:error:", objc.BOOL, .{
            _bankURL,
            _program,
            _bankMSB,
            _bankLSB,
            _outError,
        });
    }

    pub fn loadInstrumentAtURLError(_self: *@This(), _instrumentURL: ?*foundation.URL, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "loadInstrumentAtURL:error:", objc.BOOL, .{ _instrumentURL, _outError });
    }

    pub fn loadAudioFilesAtURLsError(_self: *@This(), _audioFiles: ?*foundation.Array(?*foundation.URL), _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "loadAudioFilesAtURLs:error:", objc.BOOL, .{ _audioFiles, _outError });
    }

    pub fn stereoPan(_self: *@This()) f32 {
        return objc.msgSend(_self, "stereoPan", f32, .{});
    }

    pub fn setStereoPan(_self: *@This(), _stereoPan: f32) void {
        return objc.msgSend(_self, "setStereoPan:", void, .{_stereoPan});
    }

    pub fn overallGain(_self: *@This()) f32 {
        return objc.msgSend(_self, "overallGain", f32, .{});
    }

    pub fn setOverallGain(_self: *@This(), _overallGain: f32) void {
        return objc.msgSend(_self, "setOverallGain:", void, .{_overallGain});
    }

    pub fn masterGain(_self: *@This()) f32 {
        return objc.msgSend(_self, "masterGain", f32, .{});
    }

    pub fn setMasterGain(_self: *@This(), _masterGain: f32) void {
        return objc.msgSend(_self, "setMasterGain:", void, .{_masterGain});
    }

    pub fn globalTuning(_self: *@This()) f32 {
        return objc.msgSend(_self, "globalTuning", f32, .{});
    }

    pub fn setGlobalTuning(_self: *@This(), _globalTuning: f32) void {
        return objc.msgSend(_self, "setGlobalTuning:", void, .{_globalTuning});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioUnitTimeEffect?language=objc
pub const UnitTimeEffect = opaque {
    pub const Internal = objc.ExternClass("AVAudioUnitTimeEffect", @This(), Unit, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithAudioComponentDescription(_self: *@This(), _audioComponentDescription: audio_toolbox.ComponentDescription) *@This() {
        return objc.msgSend(_self, "initWithAudioComponentDescription:", *@This(), .{_audioComponentDescription});
    }

    pub fn bypass(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "bypass", objc.BOOL, .{});
    }

    pub fn setBypass(_self: *@This(), _bypass: objc.BOOL) void {
        return objc.msgSend(_self, "setBypass:", void, .{_bypass});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioUnitTimePitch?language=objc
pub const UnitTimePitch = opaque {
    pub const Internal = objc.ExternClass("AVAudioUnitTimePitch", @This(), UnitTimeEffect, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn rate(_self: *@This()) f32 {
        return objc.msgSend(_self, "rate", f32, .{});
    }

    pub fn setRate(_self: *@This(), _rate: f32) void {
        return objc.msgSend(_self, "setRate:", void, .{_rate});
    }

    pub fn pitch(_self: *@This()) f32 {
        return objc.msgSend(_self, "pitch", f32, .{});
    }

    pub fn setPitch(_self: *@This(), _pitch: f32) void {
        return objc.msgSend(_self, "setPitch:", void, .{_pitch});
    }

    pub fn overlap(_self: *@This()) f32 {
        return objc.msgSend(_self, "overlap", f32, .{});
    }

    pub fn setOverlap(_self: *@This(), _overlap: f32) void {
        return objc.msgSend(_self, "setOverlap:", void, .{_overlap});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAudioUnitVarispeed?language=objc
pub const UnitVarispeed = opaque {
    pub const Internal = objc.ExternClass("AVAudioUnitVarispeed", @This(), UnitTimeEffect, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn rate(_self: *@This()) f32 {
        return objc.msgSend(_self, "rate", f32, .{});
    }

    pub fn setRate(_self: *@This(), _rate: f32) void {
        return objc.msgSend(_self, "setRate:", void, .{_rate});
    }
};

pub const AVMIDIPlayerCompletionHandler = *const fn () callconv(.C) void;

/// https://developer.apple.com/documentation/AVFAudio/AVMIDIPlayer?language=objc
pub const AVMIDIPlayer = opaque {
    pub const Internal = objc.ExternClass("AVMIDIPlayer", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithContentsOfURLSoundBankURLError(_self: *@This(), _inURL: ?*foundation.URL, _bankURL: ?*foundation.URL, _outError: ?*?*foundation.Error) *@This() {
        return objc.msgSend(_self, "initWithContentsOfURL:soundBankURL:error:", *@This(), .{ _inURL, _bankURL, _outError });
    }

    pub fn initWithDataSoundBankURLError(_self: *@This(), _data: ?*foundation.Data, _bankURL: ?*foundation.URL, _outError: ?*?*foundation.Error) *@This() {
        return objc.msgSend(_self, "initWithData:soundBankURL:error:", *@This(), .{ _data, _bankURL, _outError });
    }

    pub fn prepareToPlay(_self: *@This()) void {
        return objc.msgSend(_self, "prepareToPlay", void, .{});
    }

    pub fn play(_self: *@This(), _completionHandler: AVMIDIPlayerCompletionHandler) void {
        return objc.msgSend(_self, "play:", void, .{_completionHandler});
    }

    pub fn stop(_self: *@This()) void {
        return objc.msgSend(_self, "stop", void, .{});
    }

    pub fn duration(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "duration", foundation.TimeInterval, .{});
    }

    pub fn isPlaying(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isPlaying", objc.BOOL, .{});
    }

    pub fn rate(_self: *@This()) f32 {
        return objc.msgSend(_self, "rate", f32, .{});
    }

    pub fn setRate(_self: *@This(), _rate: f32) void {
        return objc.msgSend(_self, "setRate:", void, .{_rate});
    }

    pub fn currentPosition(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "currentPosition", foundation.TimeInterval, .{});
    }

    pub fn setCurrentPosition(_self: *@This(), _currentPosition: foundation.TimeInterval) void {
        return objc.msgSend(_self, "setCurrentPosition:", void, .{_currentPosition});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVMusicEvent?language=objc
pub const AVMusicEvent = opaque {
    pub const Internal = objc.ExternClass("AVMusicEvent", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;
};

/// https://developer.apple.com/documentation/AVFAudio/AVMIDINoteEvent?language=objc
pub const AVMIDINoteEvent = opaque {
    pub const Internal = objc.ExternClass("AVMIDINoteEvent", @This(), AVMusicEvent, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithChannelKeyVelocityDuration(
        _self: *@This(),
        _channel: objc.UInt32,
        _keyNum: objc.UInt32,
        _velocity: objc.UInt32,
        _duration: AVMusicTimeStamp,
    ) *@This() {
        return objc.msgSend(_self, "initWithChannel:key:velocity:duration:", *@This(), .{
            _channel,
            _keyNum,
            _velocity,
            _duration,
        });
    }

    pub fn channel(_self: *@This()) objc.UInt32 {
        return objc.msgSend(_self, "channel", objc.UInt32, .{});
    }

    pub fn setChannel(_self: *@This(), _channel: objc.UInt32) void {
        return objc.msgSend(_self, "setChannel:", void, .{_channel});
    }

    pub fn key(_self: *@This()) objc.UInt32 {
        return objc.msgSend(_self, "key", objc.UInt32, .{});
    }

    pub fn setKey(_self: *@This(), _key: objc.UInt32) void {
        return objc.msgSend(_self, "setKey:", void, .{_key});
    }

    pub fn velocity(_self: *@This()) objc.UInt32 {
        return objc.msgSend(_self, "velocity", objc.UInt32, .{});
    }

    pub fn setVelocity(_self: *@This(), _velocity: objc.UInt32) void {
        return objc.msgSend(_self, "setVelocity:", void, .{_velocity});
    }

    pub fn duration(_self: *@This()) AVMusicTimeStamp {
        return objc.msgSend(_self, "duration", AVMusicTimeStamp, .{});
    }

    pub fn setDuration(_self: *@This(), _duration: AVMusicTimeStamp) void {
        return objc.msgSend(_self, "setDuration:", void, .{_duration});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVMIDIChannelEvent?language=objc
pub const AVMIDIChannelEvent = opaque {
    pub const Internal = objc.ExternClass("AVMIDIChannelEvent", @This(), AVMusicEvent, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn channel(_self: *@This()) objc.UInt32 {
        return objc.msgSend(_self, "channel", objc.UInt32, .{});
    }

    pub fn setChannel(_self: *@This(), _channel: objc.UInt32) void {
        return objc.msgSend(_self, "setChannel:", void, .{_channel});
    }
};

pub const AVMIDIControlChangeMessageType = objc.NSInteger;
pub const AVMIDIControlChangeMessageType_BankSelect: objc.NSInteger = 0;
pub const AVMIDIControlChangeMessageType_ModWheel: objc.NSInteger = 1;
pub const AVMIDIControlChangeMessageType_Breath: objc.NSInteger = 2;
pub const AVMIDIControlChangeMessageType_Foot: objc.NSInteger = 4;
pub const AVMIDIControlChangeMessageType_PortamentoTime: objc.NSInteger = 5;
pub const AVMIDIControlChangeMessageType_DataEntry: objc.NSInteger = 6;
pub const AVMIDIControlChangeMessageType_Volume: objc.NSInteger = 7;
pub const AVMIDIControlChangeMessageType_Balance: objc.NSInteger = 8;
pub const AVMIDIControlChangeMessageType_Pan: objc.NSInteger = 10;
pub const AVMIDIControlChangeMessageType_Expression: objc.NSInteger = 11;
pub const AVMIDIControlChangeMessageType_Sustain: objc.NSInteger = 64;
pub const AVMIDIControlChangeMessageType_Portamento: objc.NSInteger = 65;
pub const AVMIDIControlChangeMessageType_Sostenuto: objc.NSInteger = 66;
pub const AVMIDIControlChangeMessageType_Soft: objc.NSInteger = 67;
pub const AVMIDIControlChangeMessageType_LegatoPedal: objc.NSInteger = 68;
pub const AVMIDIControlChangeMessageType_Hold2Pedal: objc.NSInteger = 69;
pub const AVMIDIControlChangeMessageType_FilterResonance: objc.NSInteger = 71;
pub const AVMIDIControlChangeMessageType_ReleaseTime: objc.NSInteger = 72;
pub const AVMIDIControlChangeMessageType_AttackTime: objc.NSInteger = 73;
pub const AVMIDIControlChangeMessageType_Brightness: objc.NSInteger = 74;
pub const AVMIDIControlChangeMessageType_DecayTime: objc.NSInteger = 75;
pub const AVMIDIControlChangeMessageType_VibratoRate: objc.NSInteger = 76;
pub const AVMIDIControlChangeMessageType_VibratoDepth: objc.NSInteger = 77;
pub const AVMIDIControlChangeMessageType_VibratoDelay: objc.NSInteger = 78;
pub const AVMIDIControlChangeMessageType_ReverbLevel: objc.NSInteger = 91;
pub const AVMIDIControlChangeMessageType_ChorusLevel: objc.NSInteger = 93;
pub const AVMIDIControlChangeMessageType_RPN_LSB: objc.NSInteger = 100;
pub const AVMIDIControlChangeMessageType_RPN_MSB: objc.NSInteger = 101;
pub const AVMIDIControlChangeMessageType_AllSoundOff: objc.NSInteger = 120;
pub const AVMIDIControlChangeMessageType_ResetAllControllers: objc.NSInteger = 121;
pub const AVMIDIControlChangeMessageType_AllNotesOff: objc.NSInteger = 123;
pub const AVMIDIControlChangeMessageType_OmniModeOff: objc.NSInteger = 124;
pub const AVMIDIControlChangeMessageType_OmniModeOn: objc.NSInteger = 125;
pub const AVMIDIControlChangeMessageType_MonoModeOn: objc.NSInteger = 126;
pub const AVMIDIControlChangeMessageType_MonoModeOff: objc.NSInteger = 127;

/// https://developer.apple.com/documentation/AVFAudio/AVMIDIControlChangeEvent?language=objc
pub const AVMIDIControlChangeEvent = opaque {
    pub const Internal = objc.ExternClass("AVMIDIControlChangeEvent", @This(), AVMIDIChannelEvent, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithChannelMessageTypeValue(_self: *@This(), _channel: objc.UInt32, _messageType: AVMIDIControlChangeMessageType, _value: objc.UInt32) *@This() {
        return objc.msgSend(_self, "initWithChannel:messageType:value:", *@This(), .{ _channel, _messageType, _value });
    }

    pub fn messageType(_self: *@This()) AVMIDIControlChangeMessageType {
        return objc.msgSend(_self, "messageType", AVMIDIControlChangeMessageType, .{});
    }

    pub fn value(_self: *@This()) objc.UInt32 {
        return objc.msgSend(_self, "value", objc.UInt32, .{});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVMIDIPolyPressureEvent?language=objc
pub const AVMIDIPolyPressureEvent = opaque {
    pub const Internal = objc.ExternClass("AVMIDIPolyPressureEvent", @This(), AVMIDIChannelEvent, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithChannelKeyPressure(_self: *@This(), _channel: objc.UInt32, _key: objc.UInt32, _pressure: objc.UInt32) *@This() {
        return objc.msgSend(_self, "initWithChannel:key:pressure:", *@This(), .{ _channel, _key, _pressure });
    }

    pub fn key(_self: *@This()) objc.UInt32 {
        return objc.msgSend(_self, "key", objc.UInt32, .{});
    }

    pub fn setKey(_self: *@This(), _key: objc.UInt32) void {
        return objc.msgSend(_self, "setKey:", void, .{_key});
    }

    pub fn pressure(_self: *@This()) objc.UInt32 {
        return objc.msgSend(_self, "pressure", objc.UInt32, .{});
    }

    pub fn setPressure(_self: *@This(), _pressure: objc.UInt32) void {
        return objc.msgSend(_self, "setPressure:", void, .{_pressure});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVMIDIProgramChangeEvent?language=objc
pub const AVMIDIProgramChangeEvent = opaque {
    pub const Internal = objc.ExternClass("AVMIDIProgramChangeEvent", @This(), AVMIDIChannelEvent, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithChannelProgramNumber(_self: *@This(), _channel: objc.UInt32, _programNumber: objc.UInt32) *@This() {
        return objc.msgSend(_self, "initWithChannel:programNumber:", *@This(), .{ _channel, _programNumber });
    }

    pub fn programNumber(_self: *@This()) objc.UInt32 {
        return objc.msgSend(_self, "programNumber", objc.UInt32, .{});
    }

    pub fn setProgramNumber(_self: *@This(), _programNumber: objc.UInt32) void {
        return objc.msgSend(_self, "setProgramNumber:", void, .{_programNumber});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVMIDIChannelPressureEvent?language=objc
pub const AVMIDIChannelPressureEvent = opaque {
    pub const Internal = objc.ExternClass("AVMIDIChannelPressureEvent", @This(), AVMIDIChannelEvent, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithChannelPressure(_self: *@This(), _channel: objc.UInt32, _pressure: objc.UInt32) *@This() {
        return objc.msgSend(_self, "initWithChannel:pressure:", *@This(), .{ _channel, _pressure });
    }

    pub fn pressure(_self: *@This()) objc.UInt32 {
        return objc.msgSend(_self, "pressure", objc.UInt32, .{});
    }

    pub fn setPressure(_self: *@This(), _pressure: objc.UInt32) void {
        return objc.msgSend(_self, "setPressure:", void, .{_pressure});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVMIDIPitchBendEvent?language=objc
pub const AVMIDIPitchBendEvent = opaque {
    pub const Internal = objc.ExternClass("AVMIDIPitchBendEvent", @This(), AVMIDIChannelEvent, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithChannelValue(_self: *@This(), _channel: objc.UInt32, _value: objc.UInt32) *@This() {
        return objc.msgSend(_self, "initWithChannel:value:", *@This(), .{ _channel, _value });
    }

    pub fn value(_self: *@This()) objc.UInt32 {
        return objc.msgSend(_self, "value", objc.UInt32, .{});
    }

    pub fn setValue(_self: *@This(), _value: objc.UInt32) void {
        return objc.msgSend(_self, "setValue:", void, .{_value});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVMIDISysexEvent?language=objc
pub const AVMIDISysexEvent = opaque {
    pub const Internal = objc.ExternClass("AVMIDISysexEvent", @This(), AVMusicEvent, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithData(_self: *@This(), _data: ?*foundation.Data) *@This() {
        return objc.msgSend(_self, "initWithData:", *@This(), .{_data});
    }

    pub fn sizeInBytes(_self: *@This()) objc.UInt32 {
        return objc.msgSend(_self, "sizeInBytes", objc.UInt32, .{});
    }
};

pub const AVMIDIMetaEventType = objc.NSInteger;
pub const AVMIDIMetaEventType_SequenceNumber: objc.NSInteger = 0;
pub const AVMIDIMetaEventType_Text: objc.NSInteger = 1;
pub const AVMIDIMetaEventType_Copyright: objc.NSInteger = 2;
pub const AVMIDIMetaEventType_TrackName: objc.NSInteger = 3;
pub const AVMIDIMetaEventType_Instrument: objc.NSInteger = 4;
pub const AVMIDIMetaEventType_Lyric: objc.NSInteger = 5;
pub const AVMIDIMetaEventType_Marker: objc.NSInteger = 6;
pub const AVMIDIMetaEventType_CuePoint: objc.NSInteger = 7;
pub const AVMIDIMetaEventType_MidiChannel: objc.NSInteger = 32;
pub const AVMIDIMetaEventType_MidiPort: objc.NSInteger = 33;
pub const AVMIDIMetaEventType_EndOfTrack: objc.NSInteger = 47;
pub const AVMIDIMetaEventType_Tempo: objc.NSInteger = 81;
pub const AVMIDIMetaEventType_SmpteOffset: objc.NSInteger = 84;
pub const AVMIDIMetaEventType_TimeSignature: objc.NSInteger = 88;
pub const AVMIDIMetaEventType_KeySignature: objc.NSInteger = 89;
pub const AVMIDIMetaEventType_ProprietaryEvent: objc.NSInteger = 127;

/// https://developer.apple.com/documentation/AVFAudio/AVMIDIMetaEvent?language=objc
pub const AVMIDIMetaEvent = opaque {
    pub const Internal = objc.ExternClass("AVMIDIMetaEvent", @This(), AVMusicEvent, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithTypeData(_self: *@This(), _type: AVMIDIMetaEventType, _data: ?*foundation.Data) *@This() {
        return objc.msgSend(_self, "initWithType:data:", *@This(), .{ _type, _data });
    }

    pub fn @"type"(_self: *@This()) AVMIDIMetaEventType {
        return objc.msgSend(_self, "type", AVMIDIMetaEventType, .{});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVMusicUserEvent?language=objc
pub const AVMusicUserEvent = opaque {
    pub const Internal = objc.ExternClass("AVMusicUserEvent", @This(), AVMusicEvent, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithData(_self: *@This(), _data: ?*foundation.Data) *@This() {
        return objc.msgSend(_self, "initWithData:", *@This(), .{_data});
    }

    pub fn sizeInBytes(_self: *@This()) objc.UInt32 {
        return objc.msgSend(_self, "sizeInBytes", objc.UInt32, .{});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVExtendedNoteOnEvent?language=objc
pub const AVExtendedNoteOnEvent = opaque {
    pub const Internal = objc.ExternClass("AVExtendedNoteOnEvent", @This(), AVMusicEvent, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithMIDINoteVelocityGroupIDDuration(
        _self: *@This(),
        _midiNote: f32,
        _velocity: f32,
        _groupID: objc.UInt32,
        _duration: AVMusicTimeStamp,
    ) *@This() {
        return objc.msgSend(_self, "initWithMIDINote:velocity:groupID:duration:", *@This(), .{
            _midiNote,
            _velocity,
            _groupID,
            _duration,
        });
    }

    pub fn initWithMIDINoteVelocityInstrumentIDGroupIDDuration(
        _self: *@This(),
        _midiNote: f32,
        _velocity: f32,
        _instrumentID: objc.UInt32,
        _groupID: objc.UInt32,
        _duration: AVMusicTimeStamp,
    ) *@This() {
        return objc.msgSend(_self, "initWithMIDINote:velocity:instrumentID:groupID:duration:", *@This(), .{
            _midiNote,
            _velocity,
            _instrumentID,
            _groupID,
            _duration,
        });
    }

    pub fn midiNote(_self: *@This()) f32 {
        return objc.msgSend(_self, "midiNote", f32, .{});
    }

    pub fn setMidiNote(_self: *@This(), _midiNote: f32) void {
        return objc.msgSend(_self, "setMidiNote:", void, .{_midiNote});
    }

    pub fn velocity(_self: *@This()) f32 {
        return objc.msgSend(_self, "velocity", f32, .{});
    }

    pub fn setVelocity(_self: *@This(), _velocity: f32) void {
        return objc.msgSend(_self, "setVelocity:", void, .{_velocity});
    }

    pub fn instrumentID(_self: *@This()) objc.UInt32 {
        return objc.msgSend(_self, "instrumentID", objc.UInt32, .{});
    }

    pub fn setInstrumentID(_self: *@This(), _instrumentID: objc.UInt32) void {
        return objc.msgSend(_self, "setInstrumentID:", void, .{_instrumentID});
    }

    pub fn groupID(_self: *@This()) objc.UInt32 {
        return objc.msgSend(_self, "groupID", objc.UInt32, .{});
    }

    pub fn setGroupID(_self: *@This(), _groupID: objc.UInt32) void {
        return objc.msgSend(_self, "setGroupID:", void, .{_groupID});
    }

    pub fn duration(_self: *@This()) AVMusicTimeStamp {
        return objc.msgSend(_self, "duration", AVMusicTimeStamp, .{});
    }

    pub fn setDuration(_self: *@This(), _duration: AVMusicTimeStamp) void {
        return objc.msgSend(_self, "setDuration:", void, .{_duration});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVParameterEvent?language=objc
pub const AVParameterEvent = opaque {
    pub const Internal = objc.ExternClass("AVParameterEvent", @This(), AVMusicEvent, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithParameterIDScopeElementValue(
        _self: *@This(),
        _parameterID: objc.UInt32,
        _scope: objc.UInt32,
        _element: objc.UInt32,
        _value: f32,
    ) *@This() {
        return objc.msgSend(_self, "initWithParameterID:scope:element:value:", *@This(), .{
            _parameterID,
            _scope,
            _element,
            _value,
        });
    }

    pub fn parameterID(_self: *@This()) objc.UInt32 {
        return objc.msgSend(_self, "parameterID", objc.UInt32, .{});
    }

    pub fn setParameterID(_self: *@This(), _parameterID: objc.UInt32) void {
        return objc.msgSend(_self, "setParameterID:", void, .{_parameterID});
    }

    pub fn scope(_self: *@This()) objc.UInt32 {
        return objc.msgSend(_self, "scope", objc.UInt32, .{});
    }

    pub fn setScope(_self: *@This(), _scope: objc.UInt32) void {
        return objc.msgSend(_self, "setScope:", void, .{_scope});
    }

    pub fn element(_self: *@This()) objc.UInt32 {
        return objc.msgSend(_self, "element", objc.UInt32, .{});
    }

    pub fn setElement(_self: *@This(), _element: objc.UInt32) void {
        return objc.msgSend(_self, "setElement:", void, .{_element});
    }

    pub fn value(_self: *@This()) f32 {
        return objc.msgSend(_self, "value", f32, .{});
    }

    pub fn setValue(_self: *@This(), _value: f32) void {
        return objc.msgSend(_self, "setValue:", void, .{_value});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVAUPresetEvent?language=objc
pub const AVAUPresetEvent = opaque {
    pub const Internal = objc.ExternClass("AVAUPresetEvent", @This(), AVMusicEvent, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithScopeElementDictionary(_self: *@This(), _scope: objc.UInt32, _element: objc.UInt32, _presetDictionary: ?*foundation.Dictionary) *@This() {
        return objc.msgSend(_self, "initWithScope:element:dictionary:", *@This(), .{ _scope, _element, _presetDictionary });
    }

    pub fn scope(_self: *@This()) objc.UInt32 {
        return objc.msgSend(_self, "scope", objc.UInt32, .{});
    }

    pub fn setScope(_self: *@This(), _scope: objc.UInt32) void {
        return objc.msgSend(_self, "setScope:", void, .{_scope});
    }

    pub fn element(_self: *@This()) objc.UInt32 {
        return objc.msgSend(_self, "element", objc.UInt32, .{});
    }

    pub fn setElement(_self: *@This(), _element: objc.UInt32) void {
        return objc.msgSend(_self, "setElement:", void, .{_element});
    }

    pub fn presetDictionary(_self: *@This()) ?*foundation.Dictionary {
        return objc.msgSend(_self, "presetDictionary", ?*foundation.Dictionary, .{});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVExtendedTempoEvent?language=objc
pub const AVExtendedTempoEvent = opaque {
    pub const Internal = objc.ExternClass("AVExtendedTempoEvent", @This(), AVMusicEvent, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithTempo(_self: *@This(), _tempo: f64) *@This() {
        return objc.msgSend(_self, "initWithTempo:", *@This(), .{_tempo});
    }

    pub fn tempo(_self: *@This()) f64 {
        return objc.msgSend(_self, "tempo", f64, .{});
    }

    pub fn setTempo(_self: *@This(), _tempo: f64) void {
        return objc.msgSend(_self, "setTempo:", void, .{_tempo});
    }
};

pub const AVSpeechBoundary = objc.NSInteger;
pub const AVSpeechBoundary_Immediate: objc.NSInteger = 0;
pub const AVSpeechBoundary_Word: objc.NSInteger = 1;

pub const AVSpeechSynthesisVoiceQuality = objc.NSInteger;
pub const AVSpeechSynthesisVoiceQuality_Default: objc.NSInteger = 1;
pub const AVSpeechSynthesisVoiceQuality_Enhanced: objc.NSInteger = 2;
pub const AVSpeechSynthesisVoiceQuality_Premium: objc.NSInteger = 3;

pub const AVSpeechSynthesisVoiceGender = objc.NSInteger;
pub const AVSpeechSynthesisVoiceGender_Unspecified: objc.NSInteger = 0;
pub const AVSpeechSynthesisVoiceGender_Male: objc.NSInteger = 1;
pub const AVSpeechSynthesisVoiceGender_Female: objc.NSInteger = 2;

pub const AVSpeechSynthesisMarkerMark = objc.NSInteger;
pub const AVSpeechSynthesisMarkerMark_Phoneme: objc.NSInteger = 0;
pub const AVSpeechSynthesisMarkerMark_Word: objc.NSInteger = 1;
pub const AVSpeechSynthesisMarkerMark_Sentence: objc.NSInteger = 2;
pub const AVSpeechSynthesisMarkerMark_Paragraph: objc.NSInteger = 3;
pub const AVSpeechSynthesisMarkerMark_Bookmark: objc.NSInteger = 4;

pub const AVSpeechSynthesizerBufferCallback = *const fn (?*Buffer) callconv(.C) void;

pub const AVSpeechSynthesizerMarkerCallback = *const fn (?*foundation.Array(?*AVSpeechSynthesisMarker)) callconv(.C) void;

pub const AVSpeechSynthesisPersonalVoiceAuthorizationStatus = objc.NSUInteger;
pub const AVSpeechSynthesisPersonalVoiceAuthorizationStatus_NotDetermined: objc.NSUInteger = 0;
pub const AVSpeechSynthesisPersonalVoiceAuthorizationStatus_Denied: objc.NSUInteger = 1;
pub const AVSpeechSynthesisPersonalVoiceAuthorizationStatus_Unsupported: objc.NSUInteger = 2;
pub const AVSpeechSynthesisPersonalVoiceAuthorizationStatus_Authorized: objc.NSUInteger = 3;

pub const AVSpeechSynthesisVoiceTraits = objc.NSUInteger;
pub const AVSpeechSynthesisVoiceTraits_None: objc.NSUInteger = 0;
pub const AVSpeechSynthesisVoiceTraits_IsNoveltyVoice: objc.NSUInteger = 1;
pub const AVSpeechSynthesisVoiceTraits_IsPersonalVoice: objc.NSUInteger = 2;

/// https://developer.apple.com/documentation/AVFAudio/AVSpeechSynthesisVoice?language=objc
pub const AVSpeechSynthesisVoice = opaque {
    pub const Internal = objc.ExternClass("AVSpeechSynthesisVoice", @This(), objc.NSObject, &.{foundation.SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn speechVoices() ?*foundation.Array(?*AVSpeechSynthesisVoice) {
        return objc.msgSend(Internal.class(), "speechVoices", ?*foundation.Array(?*AVSpeechSynthesisVoice), .{});
    }

    pub fn currentLanguageCode() ?*foundation.String {
        return objc.msgSend(Internal.class(), "currentLanguageCode", ?*foundation.String, .{});
    }

    pub fn voiceWithLanguage(_languageCode: ?*foundation.String) ?*AVSpeechSynthesisVoice {
        return objc.msgSend(Internal.class(), "voiceWithLanguage:", ?*AVSpeechSynthesisVoice, .{_languageCode});
    }

    pub fn voiceWithIdentifier(_identifier: ?*foundation.String) ?*AVSpeechSynthesisVoice {
        return objc.msgSend(Internal.class(), "voiceWithIdentifier:", ?*AVSpeechSynthesisVoice, .{_identifier});
    }

    pub fn language(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "language", ?*foundation.String, .{});
    }

    pub fn identifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "identifier", ?*foundation.String, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn quality(_self: *@This()) AVSpeechSynthesisVoiceQuality {
        return objc.msgSend(_self, "quality", AVSpeechSynthesisVoiceQuality, .{});
    }

    pub fn gender(_self: *@This()) AVSpeechSynthesisVoiceGender {
        return objc.msgSend(_self, "gender", AVSpeechSynthesisVoiceGender, .{});
    }

    pub fn audioFileSettings(_self: *@This()) ?*foundation.Dictionary(?*foundation.String, ?objc.Id) {
        return objc.msgSend(_self, "audioFileSettings", ?*foundation.Dictionary(?*foundation.String, ?objc.Id), .{});
    }

    pub fn voiceTraits(_self: *@This()) AVSpeechSynthesisVoiceTraits {
        return objc.msgSend(_self, "voiceTraits", AVSpeechSynthesisVoiceTraits, .{});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVSpeechUtterance?language=objc
pub const AVSpeechUtterance = opaque {
    pub const Internal = objc.ExternClass("AVSpeechUtterance", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn speechUtteranceWithString(_string: ?*foundation.String) *@This() {
        return objc.msgSend(Internal.class(), "speechUtteranceWithString:", *@This(), .{_string});
    }

    pub fn speechUtteranceWithAttributedString(_string: ?*foundation.AttributedString) *@This() {
        return objc.msgSend(Internal.class(), "speechUtteranceWithAttributedString:", *@This(), .{_string});
    }

    pub fn speechUtteranceWithSSMLRepresentation(_string: ?*foundation.String) *@This() {
        return objc.msgSend(Internal.class(), "speechUtteranceWithSSMLRepresentation:", *@This(), .{_string});
    }

    pub fn initWithString(_self: *@This(), _string: ?*foundation.String) *@This() {
        return objc.msgSend(_self, "initWithString:", *@This(), .{_string});
    }

    pub fn initWithAttributedString(_self: *@This(), _string: ?*foundation.AttributedString) *@This() {
        return objc.msgSend(_self, "initWithAttributedString:", *@This(), .{_string});
    }

    pub fn initWithSSMLRepresentation(_self: *@This(), _string: ?*foundation.String) *@This() {
        return objc.msgSend(_self, "initWithSSMLRepresentation:", *@This(), .{_string});
    }

    pub fn voice(_self: *@This()) ?*AVSpeechSynthesisVoice {
        return objc.msgSend(_self, "voice", ?*AVSpeechSynthesisVoice, .{});
    }

    pub fn setVoice(_self: *@This(), _voice: ?*AVSpeechSynthesisVoice) void {
        return objc.msgSend(_self, "setVoice:", void, .{_voice});
    }

    pub fn speechString(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "speechString", ?*foundation.String, .{});
    }

    pub fn attributedSpeechString(_self: *@This()) ?*foundation.AttributedString {
        return objc.msgSend(_self, "attributedSpeechString", ?*foundation.AttributedString, .{});
    }

    pub fn rate(_self: *@This()) f32 {
        return objc.msgSend(_self, "rate", f32, .{});
    }

    pub fn setRate(_self: *@This(), _rate: f32) void {
        return objc.msgSend(_self, "setRate:", void, .{_rate});
    }

    pub fn pitchMultiplier(_self: *@This()) f32 {
        return objc.msgSend(_self, "pitchMultiplier", f32, .{});
    }

    pub fn setPitchMultiplier(_self: *@This(), _pitchMultiplier: f32) void {
        return objc.msgSend(_self, "setPitchMultiplier:", void, .{_pitchMultiplier});
    }

    pub fn volume(_self: *@This()) f32 {
        return objc.msgSend(_self, "volume", f32, .{});
    }

    pub fn setVolume(_self: *@This(), _volume: f32) void {
        return objc.msgSend(_self, "setVolume:", void, .{_volume});
    }

    pub fn prefersAssistiveTechnologySettings(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "prefersAssistiveTechnologySettings", objc.BOOL, .{});
    }

    pub fn setPrefersAssistiveTechnologySettings(_self: *@This(), _prefersAssistiveTechnologySettings: objc.BOOL) void {
        return objc.msgSend(_self, "setPrefersAssistiveTechnologySettings:", void, .{_prefersAssistiveTechnologySettings});
    }

    pub fn preUtteranceDelay(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "preUtteranceDelay", foundation.TimeInterval, .{});
    }

    pub fn setPreUtteranceDelay(_self: *@This(), _preUtteranceDelay: foundation.TimeInterval) void {
        return objc.msgSend(_self, "setPreUtteranceDelay:", void, .{_preUtteranceDelay});
    }

    pub fn postUtteranceDelay(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "postUtteranceDelay", foundation.TimeInterval, .{});
    }

    pub fn setPostUtteranceDelay(_self: *@This(), _postUtteranceDelay: foundation.TimeInterval) void {
        return objc.msgSend(_self, "setPostUtteranceDelay:", void, .{_postUtteranceDelay});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVSpeechSynthesizer?language=objc
pub const AVSpeechSynthesizer = opaque {
    pub const Internal = objc.ExternClass("AVSpeechSynthesizer", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn speakUtterance(_self: *@This(), _utterance: ?*AVSpeechUtterance) void {
        return objc.msgSend(_self, "speakUtterance:", void, .{_utterance});
    }

    pub fn writeUtteranceToBufferCallback(_self: *@This(), _utterance: ?*AVSpeechUtterance, _bufferCallback: AVSpeechSynthesizerBufferCallback) void {
        return objc.msgSend(_self, "writeUtterance:toBufferCallback:", void, .{ _utterance, _bufferCallback });
    }

    pub fn writeUtteranceToBufferCallbackToMarkerCallback(_self: *@This(), _utterance: ?*AVSpeechUtterance, _bufferCallback: AVSpeechSynthesizerBufferCallback, _markerCallback: AVSpeechSynthesizerMarkerCallback) void {
        return objc.msgSend(_self, "writeUtterance:toBufferCallback:toMarkerCallback:", void, .{ _utterance, _bufferCallback, _markerCallback });
    }

    pub fn stopSpeakingAtBoundary(_self: *@This(), _boundary: AVSpeechBoundary) objc.BOOL {
        return objc.msgSend(_self, "stopSpeakingAtBoundary:", objc.BOOL, .{_boundary});
    }

    pub fn pauseSpeakingAtBoundary(_self: *@This(), _boundary: AVSpeechBoundary) objc.BOOL {
        return objc.msgSend(_self, "pauseSpeakingAtBoundary:", objc.BOOL, .{_boundary});
    }

    pub fn continueSpeaking(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "continueSpeaking", objc.BOOL, .{});
    }

    pub fn requestPersonalVoiceAuthorizationWithCompletionHandler(_handler: *const fn (AVSpeechSynthesisPersonalVoiceAuthorizationStatus) callconv(.C) void) void {
        return objc.msgSend(Internal.class(), "requestPersonalVoiceAuthorizationWithCompletionHandler:", void, .{_handler});
    }

    pub fn delegate(_self: *@This()) ?*objc.id {
        return objc.msgSend(_self, "delegate", ?*objc.id, .{});
    }

    pub fn setDelegate(_self: *@This(), _delegate: ?*objc.id) void {
        return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
    }

    pub fn isSpeaking(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isSpeaking", objc.BOOL, .{});
    }

    pub fn isPaused(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isPaused", objc.BOOL, .{});
    }

    pub fn outputChannels(_self: *@This()) ?*foundation.Array(?*SessionChannelDescription) {
        return objc.msgSend(_self, "outputChannels", ?*foundation.Array(?*SessionChannelDescription), .{});
    }

    pub fn setOutputChannels(_self: *@This(), _outputChannels: ?*foundation.Array(?*SessionChannelDescription)) void {
        return objc.msgSend(_self, "setOutputChannels:", void, .{_outputChannels});
    }

    pub fn usesApplicationAudioSession(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "usesApplicationAudioSession", objc.BOOL, .{});
    }

    pub fn setUsesApplicationAudioSession(_self: *@This(), _usesApplicationAudioSession: objc.BOOL) void {
        return objc.msgSend(_self, "setUsesApplicationAudioSession:", void, .{_usesApplicationAudioSession});
    }

    pub fn mixToTelephonyUplink(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "mixToTelephonyUplink", objc.BOOL, .{});
    }

    pub fn setMixToTelephonyUplink(_self: *@This(), _mixToTelephonyUplink: objc.BOOL) void {
        return objc.msgSend(_self, "setMixToTelephonyUplink:", void, .{_mixToTelephonyUplink});
    }

    pub fn personalVoiceAuthorizationStatus() AVSpeechSynthesisPersonalVoiceAuthorizationStatus {
        return objc.msgSend(Internal.class(), "personalVoiceAuthorizationStatus", AVSpeechSynthesisPersonalVoiceAuthorizationStatus, .{});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVSpeechSynthesizerDelegate?language=objc
pub const AVSpeechSynthesizerDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn speechSynthesizerDidStartSpeechUtterance(_self: *@This(), _synthesizer: ?*AVSpeechSynthesizer, _utterance: ?*AVSpeechUtterance) void {
        return objc.msgSend(_self, "speechSynthesizer:didStartSpeechUtterance:", void, .{ _synthesizer, _utterance });
    }

    pub fn speechSynthesizerDidFinishSpeechUtterance(_self: *@This(), _synthesizer: ?*AVSpeechSynthesizer, _utterance: ?*AVSpeechUtterance) void {
        return objc.msgSend(_self, "speechSynthesizer:didFinishSpeechUtterance:", void, .{ _synthesizer, _utterance });
    }

    pub fn speechSynthesizerDidPauseSpeechUtterance(_self: *@This(), _synthesizer: ?*AVSpeechSynthesizer, _utterance: ?*AVSpeechUtterance) void {
        return objc.msgSend(_self, "speechSynthesizer:didPauseSpeechUtterance:", void, .{ _synthesizer, _utterance });
    }

    pub fn speechSynthesizerDidContinueSpeechUtterance(_self: *@This(), _synthesizer: ?*AVSpeechSynthesizer, _utterance: ?*AVSpeechUtterance) void {
        return objc.msgSend(_self, "speechSynthesizer:didContinueSpeechUtterance:", void, .{ _synthesizer, _utterance });
    }

    pub fn speechSynthesizerDidCancelSpeechUtterance(_self: *@This(), _synthesizer: ?*AVSpeechSynthesizer, _utterance: ?*AVSpeechUtterance) void {
        return objc.msgSend(_self, "speechSynthesizer:didCancelSpeechUtterance:", void, .{ _synthesizer, _utterance });
    }

    pub fn speechSynthesizerWillSpeakRangeOfSpeechStringUtterance(_self: *@This(), _synthesizer: ?*AVSpeechSynthesizer, _characterRange: foundation.Range, _utterance: ?*AVSpeechUtterance) void {
        return objc.msgSend(_self, "speechSynthesizer:willSpeakRangeOfSpeechString:utterance:", void, .{ _synthesizer, _characterRange, _utterance });
    }

    pub fn speechSynthesizerWillSpeakMarkerUtterance(_self: *@This(), _synthesizer: ?*AVSpeechSynthesizer, _marker: ?*AVSpeechSynthesisMarker, _utterance: ?*AVSpeechUtterance) void {
        return objc.msgSend(_self, "speechSynthesizer:willSpeakMarker:utterance:", void, .{ _synthesizer, _marker, _utterance });
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVSpeechSynthesisMarker?language=objc
pub const AVSpeechSynthesisMarker = opaque {
    pub const Internal = objc.ExternClass("AVSpeechSynthesisMarker", @This(), objc.NSObject, &.{ foundation.SecureCoding, foundation.Copying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn initWithMarkerTypeForTextRangeAtByteSampleOffset(_self: *@This(), _type: AVSpeechSynthesisMarkerMark, _range: foundation.Range, _byteSampleOffset: objc.NSUInteger) *@This() {
        return objc.msgSend(_self, "initWithMarkerType:forTextRange:atByteSampleOffset:", *@This(), .{ _type, _range, _byteSampleOffset });
    }

    pub fn initWithWordRangeAtByteSampleOffset(_self: *@This(), _range: foundation.Range, _byteSampleOffset: objc.NSInteger) *@This() {
        return objc.msgSend(_self, "initWithWordRange:atByteSampleOffset:", *@This(), .{ _range, _byteSampleOffset });
    }

    pub fn initWithSentenceRangeAtByteSampleOffset(_self: *@This(), _range: foundation.Range, _byteSampleOffset: objc.NSInteger) *@This() {
        return objc.msgSend(_self, "initWithSentenceRange:atByteSampleOffset:", *@This(), .{ _range, _byteSampleOffset });
    }

    pub fn initWithParagraphRangeAtByteSampleOffset(_self: *@This(), _range: foundation.Range, _byteSampleOffset: objc.NSInteger) *@This() {
        return objc.msgSend(_self, "initWithParagraphRange:atByteSampleOffset:", *@This(), .{ _range, _byteSampleOffset });
    }

    pub fn initWithPhonemeStringAtByteSampleOffset(_self: *@This(), _phoneme: ?*foundation.String, _byteSampleOffset: objc.NSInteger) *@This() {
        return objc.msgSend(_self, "initWithPhonemeString:atByteSampleOffset:", *@This(), .{ _phoneme, _byteSampleOffset });
    }

    pub fn initWithBookmarkNameAtByteSampleOffset(_self: *@This(), _mark: ?*foundation.String, _byteSampleOffset: objc.NSInteger) *@This() {
        return objc.msgSend(_self, "initWithBookmarkName:atByteSampleOffset:", *@This(), .{ _mark, _byteSampleOffset });
    }

    pub fn mark(_self: *@This()) AVSpeechSynthesisMarkerMark {
        return objc.msgSend(_self, "mark", AVSpeechSynthesisMarkerMark, .{});
    }

    pub fn setMark(_self: *@This(), _mark: AVSpeechSynthesisMarkerMark) void {
        return objc.msgSend(_self, "setMark:", void, .{_mark});
    }

    pub fn byteSampleOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "byteSampleOffset", objc.NSUInteger, .{});
    }

    pub fn setByteSampleOffset(_self: *@This(), _byteSampleOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setByteSampleOffset:", void, .{_byteSampleOffset});
    }

    pub fn textRange(_self: *@This()) foundation.Range {
        return objc.msgSend(_self, "textRange", foundation.Range, .{});
    }

    pub fn setTextRange(_self: *@This(), _textRange: foundation.Range) void {
        return objc.msgSend(_self, "setTextRange:", void, .{_textRange});
    }

    pub fn bookmarkName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "bookmarkName", ?*foundation.String, .{});
    }

    pub fn setBookmarkName(_self: *@This(), _bookmarkName: ?*foundation.String) void {
        return objc.msgSend(_self, "setBookmarkName:", void, .{_bookmarkName});
    }

    pub fn phoneme(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "phoneme", ?*foundation.String, .{});
    }

    pub fn setPhoneme(_self: *@This(), _phoneme: ?*foundation.String) void {
        return objc.msgSend(_self, "setPhoneme:", void, .{_phoneme});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVSpeechSynthesisProviderVoice?language=objc
pub const AVSpeechSynthesisProviderVoice = opaque {
    pub const Internal = objc.ExternClass("AVSpeechSynthesisProviderVoice", @This(), objc.NSObject, &.{ foundation.SecureCoding, foundation.Copying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn initWithNameIdentifierPrimaryLanguagesSupportedLanguages(
        _self: *@This(),
        _name: ?*foundation.String,
        _identifier: ?*foundation.String,
        _primaryLanguages: ?*foundation.Array(?*foundation.String),
        _supportedLanguages: ?*foundation.Array(?*foundation.String),
    ) *@This() {
        return objc.msgSend(_self, "initWithName:identifier:primaryLanguages:supportedLanguages:", *@This(), .{
            _name,
            _identifier,
            _primaryLanguages,
            _supportedLanguages,
        });
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn updateSpeechVoices() void {
        return objc.msgSend(Internal.class(), "updateSpeechVoices", void, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn identifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "identifier", ?*foundation.String, .{});
    }

    pub fn primaryLanguages(_self: *@This()) ?*foundation.Array(?*foundation.String) {
        return objc.msgSend(_self, "primaryLanguages", ?*foundation.Array(?*foundation.String), .{});
    }

    pub fn supportedLanguages(_self: *@This()) ?*foundation.Array(?*foundation.String) {
        return objc.msgSend(_self, "supportedLanguages", ?*foundation.Array(?*foundation.String), .{});
    }

    pub fn voiceSize(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "voiceSize", objc.int64_t, .{});
    }

    pub fn setVoiceSize(_self: *@This(), _voiceSize: objc.int64_t) void {
        return objc.msgSend(_self, "setVoiceSize:", void, .{_voiceSize});
    }

    pub fn version(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "version", ?*foundation.String, .{});
    }

    pub fn setVersion(_self: *@This(), _version: ?*foundation.String) void {
        return objc.msgSend(_self, "setVersion:", void, .{_version});
    }

    pub fn gender(_self: *@This()) AVSpeechSynthesisVoiceGender {
        return objc.msgSend(_self, "gender", AVSpeechSynthesisVoiceGender, .{});
    }

    pub fn setGender(_self: *@This(), _gender: AVSpeechSynthesisVoiceGender) void {
        return objc.msgSend(_self, "setGender:", void, .{_gender});
    }

    pub fn age(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "age", objc.NSInteger, .{});
    }

    pub fn setAge(_self: *@This(), _age: objc.NSInteger) void {
        return objc.msgSend(_self, "setAge:", void, .{_age});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVSpeechSynthesisProviderRequest?language=objc
pub const AVSpeechSynthesisProviderRequest = opaque {
    pub const Internal = objc.ExternClass("AVSpeechSynthesisProviderRequest", @This(), objc.NSObject, &.{ foundation.SecureCoding, foundation.Copying });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn initWithSSMLRepresentationVoice(_self: *@This(), _text: ?*foundation.String, _voice: ?*AVSpeechSynthesisProviderVoice) *@This() {
        return objc.msgSend(_self, "initWithSSMLRepresentation:voice:", *@This(), .{ _text, _voice });
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn ssmlRepresentation(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "ssmlRepresentation", ?*foundation.String, .{});
    }

    pub fn voice(_self: *@This()) ?*AVSpeechSynthesisProviderVoice {
        return objc.msgSend(_self, "voice", ?*AVSpeechSynthesisProviderVoice, .{});
    }
};

/// https://developer.apple.com/documentation/AVFAudio/AVSpeechSynthesisProviderAudioUnit?language=objc
pub const AVSpeechSynthesisProviderAudioUnit = opaque {
    pub const AVSpeechSynthesisProviderOutputBlock = *const fn (?*foundation.Array(?*AVSpeechSynthesisMarker), ?*AVSpeechSynthesisProviderRequest) callconv(.C) void;

    pub const Internal = objc.ExternClass("AVSpeechSynthesisProviderAudioUnit", @This(), audio_toolbox.AUAudioUnit, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn speechVoices(_self: *@This()) ?*foundation.Array(?*AVSpeechSynthesisProviderVoice) {
        return objc.msgSend(_self, "speechVoices", ?*foundation.Array(?*AVSpeechSynthesisProviderVoice), .{});
    }

    pub fn setSpeechVoices(_self: *@This(), _speechVoices: ?*foundation.Array(?*AVSpeechSynthesisProviderVoice)) void {
        return objc.msgSend(_self, "setSpeechVoices:", void, .{_speechVoices});
    }

    pub fn speechSynthesisOutputMetadataBlock(_self: *@This()) AVSpeechSynthesisProviderAudioUnit.AVSpeechSynthesisProviderOutputBlock {
        return objc.msgSend(_self, "speechSynthesisOutputMetadataBlock", AVSpeechSynthesisProviderAudioUnit.AVSpeechSynthesisProviderOutputBlock, .{});
    }

    pub fn setSpeechSynthesisOutputMetadataBlock(_self: *@This(), _speechSynthesisOutputMetadataBlock: AVSpeechSynthesisProviderAudioUnit.AVSpeechSynthesisProviderOutputBlock) void {
        return objc.msgSend(_self, "setSpeechSynthesisOutputMetadataBlock:", void, .{_speechSynthesisOutputMetadataBlock});
    }

    pub fn synthesizeSpeechRequest(_self: *@This(), _speechRequest: ?*AVSpeechSynthesisProviderRequest) void {
        return objc.msgSend(_self, "synthesizeSpeechRequest:", void, .{_speechRequest});
    }

    pub fn cancelSpeechRequest(_self: *@This()) void {
        return objc.msgSend(_self, "cancelSpeechRequest", void, .{});
    }
};

pub const ApplicationRecordPermission = objc.NSInteger;
pub const ApplicationRecordPermission_Undetermined: objc.NSInteger = 1970168948;
pub const ApplicationRecordPermission_Denied: objc.NSInteger = 1684369017;
pub const ApplicationRecordPermission_Granted: objc.NSInteger = 1735552628;

/// https://developer.apple.com/documentation/AVFAudio/AVAudioApplication?language=objc
pub const Application = opaque {
    pub const Internal = objc.ExternClass("AVAudioApplication", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn setInputMutedError(_self: *@This(), _muted: objc.BOOL, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setInputMuted:error:", objc.BOOL, .{ _muted, _outError });
    }

    pub fn setInputMuteStateChangeHandlerError(_self: *@This(), _inputMuteHandler: *const fn (objc.BOOL) callconv(.C) objc.BOOL, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setInputMuteStateChangeHandler:error:", objc.BOOL, .{ _inputMuteHandler, _outError });
    }

    pub fn requestRecordPermissionWithCompletionHandler(_response: *const fn (objc.BOOL) callconv(.C) void) void {
        return objc.msgSend(Internal.class(), "requestRecordPermissionWithCompletionHandler:", void, .{_response});
    }

    pub fn sharedInstance() ?*Application {
        return objc.msgSend(Internal.class(), "sharedInstance", ?*Application, .{});
    }

    pub fn isInputMuted(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isInputMuted", objc.BOOL, .{});
    }

    pub fn recordPermission(_self: *@This()) ApplicationRecordPermission {
        return objc.msgSend(_self, "recordPermission", ApplicationRecordPermission, .{});
    }
};
