// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const foundation = @import("foundation.zig"); // Framework dependency Foundation.
const cloud_kit = @import("cloud_kit.zig"); // Framework dependency CloudKit.

pub const anon321 = enum(objc.NSInteger) {
    NSManagedObjectValidationError = 1550,
    NSManagedObjectConstraintValidationError = 1551,
    NSValidationMultipleErrorsError = 1560,
    NSValidationMissingMandatoryPropertyError = 1570,
    NSValidationRelationshipLacksMinimumCountError = 1580,
    NSValidationRelationshipExceedsMaximumCountError = 1590,
    NSValidationRelationshipDeniedDeleteError = 1600,
    NSValidationNumberTooLargeError = 1610,
    NSValidationNumberTooSmallError = 1620,
    NSValidationDateTooLateError = 1630,
    NSValidationDateTooSoonError = 1640,
    NSValidationInvalidDateError = 1650,
    NSValidationStringTooLongError = 1660,
    NSValidationStringTooShortError = 1670,
    NSValidationStringPatternMatchingError = 1680,
    NSValidationInvalidURIError = 1690,
    NSManagedObjectContextLockingError = 132000,
    NSPersistentStoreCoordinatorLockingError = 132010,
    NSManagedObjectReferentialIntegrityError = 133000,
    NSManagedObjectExternalRelationshipError = 133010,
    NSManagedObjectMergeError = 133020,
    NSManagedObjectConstraintMergeError = 133021,
    NSPersistentStoreInvalidTypeError = 134000,
    NSPersistentStoreTypeMismatchError = 134010,
    NSPersistentStoreIncompatibleSchemaError = 134020,
    NSPersistentStoreSaveError = 134030,
    NSPersistentStoreIncompleteSaveError = 134040,
    NSPersistentStoreSaveConflictsError = 134050,
    NSCoreDataError = 134060,
    NSPersistentStoreOperationError = 134070,
    NSPersistentStoreOpenError = 134080,
    NSPersistentStoreTimeoutError = 134090,
    NSPersistentStoreUnsupportedRequestTypeError = 134091,
    NSPersistentStoreIncompatibleVersionHashError = 134100,
    NSMigrationError = 134110,
    NSMigrationConstraintViolationError = 134111,
    NSMigrationCancelledError = 134120,
    NSMigrationMissingSourceModelError = 134130,
    NSMigrationMissingMappingModelError = 134140,
    NSMigrationManagerSourceStoreError = 134150,
    NSMigrationManagerDestinationStoreError = 134160,
    NSEntityMigrationPolicyError = 134170,
    NSSQLiteError = 134180,
    NSInferredMappingModelError = 134190,
    NSExternalRecordImportError = 134200,
    NSPersistentHistoryTokenExpiredError = 134301,
    NSManagedObjectModelReferenceNotFoundError = 134504,
    NSStagedMigrationFrameworkVersionMismatchError = 134505,
    NSStagedMigrationBackwardMigrationError = 134506,
};

/// https://developer.apple.com/documentation/CoreData/NSPropertyDescription?language=objc
pub const PropertyDescription = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPropertyDescription", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn setValidationPredicatesWithValidationWarnings(self: *@This(), validationPredicates: ?*anyopaque, validationWarnings: ?*anyopaque) void {
        return objc.msgSend(self, "setValidationPredicates:withValidationWarnings:", void, .{validationPredicates, validationWarnings});
    }

    pub fn entity(self: *@This()) ?*EntityDescription {
        return objc.msgSend(self, "entity", ?*EntityDescription, .{});
    }

    pub fn name(self: *@This()) ?*foundation.String {
        return objc.msgSend(self, "name", ?*foundation.String, .{});
    }

    pub fn setName(self: *@This(), name: ?*foundation.String) void {
        return objc.msgSend(self, "setName:", void, .{name});
    }

    pub fn isOptional(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isOptional", objc.BOOL, .{});
    }

    pub fn setOptional(self: *@This(), optional: objc.BOOL) void {
        return objc.msgSend(self, "setOptional:", void, .{optional});
    }

    pub fn isTransient(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isTransient", objc.BOOL, .{});
    }

    pub fn setTransient(self: *@This(), transient: objc.BOOL) void {
        return objc.msgSend(self, "setTransient:", void, .{transient});
    }

    pub fn validationPredicates(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "validationPredicates", ?*anyopaque, .{});
    }

    pub fn validationWarnings(self: *@This()) ?*foundation.Array {
        return objc.msgSend(self, "validationWarnings", ?*foundation.Array, .{});
    }

    pub fn userInfo(self: *@This()) ?*foundation.Dictionary {
        return objc.msgSend(self, "userInfo", ?*foundation.Dictionary, .{});
    }

    pub fn setUserInfo(self: *@This(), userInfo: ?*foundation.Dictionary) void {
        return objc.msgSend(self, "setUserInfo:", void, .{userInfo});
    }

    pub fn isIndexed(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isIndexed", objc.BOOL, .{});
    }

    pub fn setIndexed(self: *@This(), indexed: objc.BOOL) void {
        return objc.msgSend(self, "setIndexed:", void, .{indexed});
    }

    pub fn versionHash(self: *@This()) ?*Data {
        return objc.msgSend(self, "versionHash", ?*Data, .{});
    }

    pub fn versionHashModifier(self: *@This()) ?*foundation.String {
        return objc.msgSend(self, "versionHashModifier", ?*foundation.String, .{});
    }

    pub fn setVersionHashModifier(self: *@This(), versionHashModifier: ?*foundation.String) void {
        return objc.msgSend(self, "setVersionHashModifier:", void, .{versionHashModifier});
    }

    pub fn isIndexedBySpotlight(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isIndexedBySpotlight", objc.BOOL, .{});
    }

    pub fn setIndexedBySpotlight(self: *@This(), indexedBySpotlight: objc.BOOL) void {
        return objc.msgSend(self, "setIndexedBySpotlight:", void, .{indexedBySpotlight});
    }

    pub fn isStoredInExternalRecord(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isStoredInExternalRecord", objc.BOOL, .{});
    }

    pub fn setStoredInExternalRecord(self: *@This(), storedInExternalRecord: objc.BOOL) void {
        return objc.msgSend(self, "setStoredInExternalRecord:", void, .{storedInExternalRecord});
    }

    pub fn renamingIdentifier(self: *@This()) ?*foundation.String {
        return objc.msgSend(self, "renamingIdentifier", ?*foundation.String, .{});
    }

    pub fn setRenamingIdentifier(self: *@This(), renamingIdentifier: ?*foundation.String) void {
        return objc.msgSend(self, "setRenamingIdentifier:", void, .{renamingIdentifier});
    }

};

pub const AttributeType = enum(objc.NSUInteger) {
    UndefinedAttributeType = 0,
    Integer16AttributeType = 100,
    Integer32AttributeType = 200,
    Integer64AttributeType = 300,
    DecimalAttributeType = 400,
    DoubleAttributeType = 500,
    FloatAttributeType = 600,
    StringAttributeType = 700,
    BooleanAttributeType = 800,
    DateAttributeType = 900,
    BinaryDataAttributeType = 1000,
    UUIDAttributeType = 1100,
    URIAttributeType = 1200,
    TransformableAttributeType = 1800,
    ObjectIDAttributeType = 2000,
    CompositeAttributeType = 2100,
};

/// https://developer.apple.com/documentation/CoreData/NSAttributeDescription?language=objc
pub const AttributeDescription = opaque {
    pub const InternalInfo = objc.ExternalClass("NSAttributeDescription", @This(), PropertyDescription, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn attributeType(self: *@This()) AttributeType {
        return objc.msgSend(self, "attributeType", AttributeType, .{});
    }

    pub fn setAttributeType(self: *@This(), attributeType: AttributeType) void {
        return objc.msgSend(self, "setAttributeType:", void, .{attributeType});
    }

    pub fn attributeValueClassName(self: *@This()) ?*foundation.String {
        return objc.msgSend(self, "attributeValueClassName", ?*foundation.String, .{});
    }

    pub fn setAttributeValueClassName(self: *@This(), attributeValueClassName: ?*foundation.String) void {
        return objc.msgSend(self, "setAttributeValueClassName:", void, .{attributeValueClassName});
    }

    pub fn defaultValue(self: *@This()) *objc.Id {
        return objc.msgSend(self, "defaultValue", *objc.Id, .{});
    }

    pub fn setDefaultValue(self: *@This(), defaultValue: *objc.Id) void {
        return objc.msgSend(self, "setDefaultValue:", void, .{defaultValue});
    }

    pub fn versionHash(self: *@This()) ?*Data {
        return objc.msgSend(self, "versionHash", ?*Data, .{});
    }

    pub fn valueTransformerName(self: *@This()) ?*foundation.String {
        return objc.msgSend(self, "valueTransformerName", ?*foundation.String, .{});
    }

    pub fn setValueTransformerName(self: *@This(), valueTransformerName: ?*foundation.String) void {
        return objc.msgSend(self, "setValueTransformerName:", void, .{valueTransformerName});
    }

    pub fn allowsExternalBinaryDataStorage(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsExternalBinaryDataStorage", objc.BOOL, .{});
    }

    pub fn setAllowsExternalBinaryDataStorage(self: *@This(), allowsExternalBinaryDataStorage: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsExternalBinaryDataStorage:", void, .{allowsExternalBinaryDataStorage});
    }

    pub fn preservesValueInHistoryOnDeletion(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "preservesValueInHistoryOnDeletion", objc.BOOL, .{});
    }

    pub fn setPreservesValueInHistoryOnDeletion(self: *@This(), preservesValueInHistoryOnDeletion: objc.BOOL) void {
        return objc.msgSend(self, "setPreservesValueInHistoryOnDeletion:", void, .{preservesValueInHistoryOnDeletion});
    }

    pub fn allowsCloudEncryption(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsCloudEncryption", objc.BOOL, .{});
    }

    pub fn setAllowsCloudEncryption(self: *@This(), allowsCloudEncryption: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsCloudEncryption:", void, .{allowsCloudEncryption});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSDerivedAttributeDescription?language=objc
pub const DerivedAttributeDescription = opaque {
    pub const InternalInfo = objc.ExternalClass("NSDerivedAttributeDescription", @This(), AttributeDescription, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn derivationExpression(self: *@This()) ?*Expression {
        return objc.msgSend(self, "derivationExpression", ?*Expression, .{});
    }

    pub fn setDerivationExpression(self: *@This(), derivationExpression: ?*Expression) void {
        return objc.msgSend(self, "setDerivationExpression:", void, .{derivationExpression});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSCompositeAttributeDescription?language=objc
pub const CompositeAttributeDescription = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCompositeAttributeDescription", @This(), AttributeDescription, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn elements(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "elements", ?*anyopaque, .{});
    }

    pub fn setElements(self: *@This(), elements: ?*anyopaque) void {
        return objc.msgSend(self, "setElements:", void, .{elements});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSEntityDescription?language=objc
pub const EntityDescription = opaque {
    pub const InternalInfo = objc.ExternalClass("NSEntityDescription", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn entityForNameInManagedObjectContext(self: *@This(), entityName: ?*foundation.String, context: ?*ManagedObjectContext) ?*EntityDescription {
        return objc.msgSend(self, "entityForName:inManagedObjectContext:", ?*EntityDescription, .{entityName, context});
    }

    pub fn insertNewObjectForEntityForNameInManagedObjectContext(self: *@This(), entityName: ?*foundation.String, context: ?*ManagedObjectContext) ?*anyopaque {
        return objc.msgSend(self, "insertNewObjectForEntityForName:inManagedObjectContext:", ?*anyopaque, .{entityName, context});
    }

    pub fn relationshipsWithDestinationEntity(self: *@This(), entity: ?*EntityDescription) ?*anyopaque {
        return objc.msgSend(self, "relationshipsWithDestinationEntity:", ?*anyopaque, .{entity});
    }

    pub fn isKindOfEntity(self: *@This(), entity: ?*EntityDescription) objc.BOOL {
        return objc.msgSend(self, "isKindOfEntity:", objc.BOOL, .{entity});
    }

    pub fn managedObjectModel(self: *@This()) ?*ManagedObjectModel {
        return objc.msgSend(self, "managedObjectModel", ?*ManagedObjectModel, .{});
    }

    pub fn managedObjectClassName(self: *@This()) ?*foundation.String {
        return objc.msgSend(self, "managedObjectClassName", ?*foundation.String, .{});
    }

    pub fn setManagedObjectClassName(self: *@This(), managedObjectClassName: ?*foundation.String) void {
        return objc.msgSend(self, "setManagedObjectClassName:", void, .{managedObjectClassName});
    }

    pub fn name(self: *@This()) ?*foundation.String {
        return objc.msgSend(self, "name", ?*foundation.String, .{});
    }

    pub fn setName(self: *@This(), name: ?*foundation.String) void {
        return objc.msgSend(self, "setName:", void, .{name});
    }

    pub fn isAbstract(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAbstract", objc.BOOL, .{});
    }

    pub fn setAbstract(self: *@This(), abstract: objc.BOOL) void {
        return objc.msgSend(self, "setAbstract:", void, .{abstract});
    }

    pub fn subentitiesByName(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "subentitiesByName", ?*anyopaque, .{});
    }

    pub fn subentities(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "subentities", ?*anyopaque, .{});
    }

    pub fn setSubentities(self: *@This(), subentities: ?*anyopaque) void {
        return objc.msgSend(self, "setSubentities:", void, .{subentities});
    }

    pub fn superentity(self: *@This()) ?*EntityDescription {
        return objc.msgSend(self, "superentity", ?*EntityDescription, .{});
    }

    pub fn propertiesByName(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "propertiesByName", ?*anyopaque, .{});
    }

    pub fn properties(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "properties", ?*anyopaque, .{});
    }

    pub fn setProperties(self: *@This(), properties: ?*anyopaque) void {
        return objc.msgSend(self, "setProperties:", void, .{properties});
    }

    pub fn userInfo(self: *@This()) ?*foundation.Dictionary {
        return objc.msgSend(self, "userInfo", ?*foundation.Dictionary, .{});
    }

    pub fn setUserInfo(self: *@This(), userInfo: ?*foundation.Dictionary) void {
        return objc.msgSend(self, "setUserInfo:", void, .{userInfo});
    }

    pub fn attributesByName(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "attributesByName", ?*anyopaque, .{});
    }

    pub fn relationshipsByName(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "relationshipsByName", ?*anyopaque, .{});
    }

    pub fn versionHash(self: *@This()) ?*Data {
        return objc.msgSend(self, "versionHash", ?*Data, .{});
    }

    pub fn versionHashModifier(self: *@This()) ?*foundation.String {
        return objc.msgSend(self, "versionHashModifier", ?*foundation.String, .{});
    }

    pub fn setVersionHashModifier(self: *@This(), versionHashModifier: ?*foundation.String) void {
        return objc.msgSend(self, "setVersionHashModifier:", void, .{versionHashModifier});
    }

    pub fn renamingIdentifier(self: *@This()) ?*foundation.String {
        return objc.msgSend(self, "renamingIdentifier", ?*foundation.String, .{});
    }

    pub fn setRenamingIdentifier(self: *@This(), renamingIdentifier: ?*foundation.String) void {
        return objc.msgSend(self, "setRenamingIdentifier:", void, .{renamingIdentifier});
    }

    pub fn indexes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "indexes", ?*anyopaque, .{});
    }

    pub fn setIndexes(self: *@This(), indexes: ?*anyopaque) void {
        return objc.msgSend(self, "setIndexes:", void, .{indexes});
    }

    pub fn uniquenessConstraints(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "uniquenessConstraints", ?*anyopaque, .{});
    }

    pub fn setUniquenessConstraints(self: *@This(), uniquenessConstraints: ?*anyopaque) void {
        return objc.msgSend(self, "setUniquenessConstraints:", void, .{uniquenessConstraints});
    }

    pub fn compoundIndexes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "compoundIndexes", ?*anyopaque, .{});
    }

    pub fn setCompoundIndexes(self: *@This(), compoundIndexes: ?*anyopaque) void {
        return objc.msgSend(self, "setCompoundIndexes:", void, .{compoundIndexes});
    }

    pub fn coreSpotlightDisplayNameExpression(self: *@This()) ?*Expression {
        return objc.msgSend(self, "coreSpotlightDisplayNameExpression", ?*Expression, .{});
    }

    pub fn setCoreSpotlightDisplayNameExpression(self: *@This(), coreSpotlightDisplayNameExpression: ?*Expression) void {
        return objc.msgSend(self, "setCoreSpotlightDisplayNameExpression:", void, .{coreSpotlightDisplayNameExpression});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSFetchedPropertyDescription?language=objc
pub const FetchedPropertyDescription = opaque {
    pub const InternalInfo = objc.ExternalClass("NSFetchedPropertyDescription", @This(), PropertyDescription, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn fetchRequest(self: *@This()) ?*FetchRequest {
        return objc.msgSend(self, "fetchRequest", ?*FetchRequest, .{});
    }

    pub fn setFetchRequest(self: *@This(), fetchRequest: ?*FetchRequest) void {
        return objc.msgSend(self, "setFetchRequest:", void, .{fetchRequest});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSExpressionDescription?language=objc
pub const ExpressionDescription = opaque {
    pub const InternalInfo = objc.ExternalClass("NSExpressionDescription", @This(), PropertyDescription, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn expression(self: *@This()) ?*Expression {
        return objc.msgSend(self, "expression", ?*Expression, .{});
    }

    pub fn setExpression(self: *@This(), expression: ?*Expression) void {
        return objc.msgSend(self, "setExpression:", void, .{expression});
    }

    pub fn expressionResultType(self: *@This()) AttributeType {
        return objc.msgSend(self, "expressionResultType", AttributeType, .{});
    }

    pub fn setExpressionResultType(self: *@This(), expressionResultType: AttributeType) void {
        return objc.msgSend(self, "setExpressionResultType:", void, .{expressionResultType});
    }

};

pub const DeleteRule = enum(objc.NSUInteger) {
    NoActionDeleteRule = 0,
    NullifyDeleteRule = 1,
    CascadeDeleteRule = 2,
    DenyDeleteRule = 3,
};

/// https://developer.apple.com/documentation/CoreData/NSRelationshipDescription?language=objc
pub const RelationshipDescription = opaque {
    pub const InternalInfo = objc.ExternalClass("NSRelationshipDescription", @This(), PropertyDescription, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn destinationEntity(self: *@This()) ?*EntityDescription {
        return objc.msgSend(self, "destinationEntity", ?*EntityDescription, .{});
    }

    pub fn setDestinationEntity(self: *@This(), destinationEntity: ?*EntityDescription) void {
        return objc.msgSend(self, "setDestinationEntity:", void, .{destinationEntity});
    }

    pub fn inverseRelationship(self: *@This()) ?*RelationshipDescription {
        return objc.msgSend(self, "inverseRelationship", ?*RelationshipDescription, .{});
    }

    pub fn setInverseRelationship(self: *@This(), inverseRelationship: ?*RelationshipDescription) void {
        return objc.msgSend(self, "setInverseRelationship:", void, .{inverseRelationship});
    }

    pub fn maxCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxCount", objc.NSUInteger, .{});
    }

    pub fn setMaxCount(self: *@This(), maxCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaxCount:", void, .{maxCount});
    }

    pub fn minCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "minCount", objc.NSUInteger, .{});
    }

    pub fn setMinCount(self: *@This(), minCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setMinCount:", void, .{minCount});
    }

    pub fn deleteRule(self: *@This()) DeleteRule {
        return objc.msgSend(self, "deleteRule", DeleteRule, .{});
    }

    pub fn setDeleteRule(self: *@This(), deleteRule: DeleteRule) void {
        return objc.msgSend(self, "setDeleteRule:", void, .{deleteRule});
    }

    pub fn isToMany(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isToMany", objc.BOOL, .{});
    }

    pub fn versionHash(self: *@This()) ?*Data {
        return objc.msgSend(self, "versionHash", ?*Data, .{});
    }

    pub fn isOrdered(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isOrdered", objc.BOOL, .{});
    }

    pub fn setOrdered(self: *@This(), ordered: objc.BOOL) void {
        return objc.msgSend(self, "setOrdered:", void, .{ordered});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSFetchIndexDescription?language=objc
pub const FetchIndexDescription = opaque {
    pub const InternalInfo = objc.ExternalClass("NSFetchIndexDescription", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithNameElements(self: *@This(), name: ?*foundation.String, elements: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithName:elements:", *@This(), .{name, elements});
    }

    pub fn name(self: *@This()) ?*foundation.String {
        return objc.msgSend(self, "name", ?*foundation.String, .{});
    }

    pub fn setName(self: *@This(), name: ?*foundation.String) void {
        return objc.msgSend(self, "setName:", void, .{name});
    }

    pub fn elements(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "elements", ?*anyopaque, .{});
    }

    pub fn setElements(self: *@This(), elements: ?*anyopaque) void {
        return objc.msgSend(self, "setElements:", void, .{elements});
    }

    pub fn entity(self: *@This()) ?*EntityDescription {
        return objc.msgSend(self, "entity", ?*EntityDescription, .{});
    }

    pub fn partialIndexPredicate(self: *@This()) ?*Predicate {
        return objc.msgSend(self, "partialIndexPredicate", ?*Predicate, .{});
    }

    pub fn setPartialIndexPredicate(self: *@This(), partialIndexPredicate: ?*Predicate) void {
        return objc.msgSend(self, "setPartialIndexPredicate:", void, .{partialIndexPredicate});
    }

};

pub const FetchIndexElementType = enum(objc.NSUInteger) {
    Binary = 0,
    RTree = 1,
};

/// https://developer.apple.com/documentation/CoreData/NSFetchIndexElementDescription?language=objc
pub const FetchIndexElementDescription = opaque {
    pub const InternalInfo = objc.ExternalClass("NSFetchIndexElementDescription", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithPropertyCollationType(self: *@This(), property: ?*PropertyDescription, collationType: FetchIndexElementType) *@This() {
        return objc.msgSend(self, "initWithProperty:collationType:", *@This(), .{property, collationType});
    }

    pub fn property(self: *@This()) ?*PropertyDescription {
        return objc.msgSend(self, "property", ?*PropertyDescription, .{});
    }

    pub fn propertyName(self: *@This()) ?*foundation.String {
        return objc.msgSend(self, "propertyName", ?*foundation.String, .{});
    }

    pub fn collationType(self: *@This()) FetchIndexElementType {
        return objc.msgSend(self, "collationType", FetchIndexElementType, .{});
    }

    pub fn setCollationType(self: *@This(), collationType: FetchIndexElementType) void {
        return objc.msgSend(self, "setCollationType:", void, .{collationType});
    }

    pub fn isAscending(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAscending", objc.BOOL, .{});
    }

    pub fn setAscending(self: *@This(), ascending: objc.BOOL) void {
        return objc.msgSend(self, "setAscending:", void, .{ascending});
    }

    pub fn indexDescription(self: *@This()) ?*FetchIndexDescription {
        return objc.msgSend(self, "indexDescription", ?*FetchIndexDescription, .{});
    }

};

pub const PersistentStoreRequestType = enum(objc.NSUInteger) {
    FetchRequestType = 1,
    SaveRequestType = 2,
    BatchInsertRequestType = 5,
    BatchUpdateRequestType = 6,
    BatchDeleteRequestType = 7,
};

/// https://developer.apple.com/documentation/CoreData/NSPersistentStoreRequest?language=objc
pub const PersistentStoreRequest = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPersistentStoreRequest", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn affectedStores(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "affectedStores", ?*anyopaque, .{});
    }

    pub fn setAffectedStores(self: *@This(), affectedStores: ?*anyopaque) void {
        return objc.msgSend(self, "setAffectedStores:", void, .{affectedStores});
    }

    pub fn requestType(self: *@This()) PersistentStoreRequestType {
        return objc.msgSend(self, "requestType", PersistentStoreRequestType, .{});
    }

};

pub const SnapshotEventType = enum(objc.NSUInteger) {
    UndoInsertion = 2,
    UndoDeletion = 4,
    UndoUpdate = 8,
    Rollback = 16,
    Refresh = 32,
    MergePolicy = 64,
};

/// https://developer.apple.com/documentation/CoreData/NSManagedObject?language=objc
pub const ManagedObject = opaque {
    pub const InternalInfo = objc.ExternalClass("NSManagedObject", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn entity(self: *@This()) ?*EntityDescription {
        return objc.msgSend(self, "entity", ?*EntityDescription, .{});
    }

    pub fn fetchRequest(self: *@This()) ?*FetchRequest {
        return objc.msgSend(self, "fetchRequest", ?*FetchRequest, .{});
    }

    pub fn initWithEntityInsertIntoManagedObjectContext(self: *@This(), entity: ?*EntityDescription, context: ?*ManagedObjectContext) ?*anyopaque {
        return objc.msgSend(self, "initWithEntity:insertIntoManagedObjectContext:", ?*anyopaque, .{entity, context});
    }

    pub fn initWithContext(self: *@This(), moc: ?*ManagedObjectContext) *@This() {
        return objc.msgSend(self, "initWithContext:", *@This(), .{moc});
    }

    pub fn hasFaultForRelationshipNamed(self: *@This(), key: ?*foundation.String) objc.BOOL {
        return objc.msgSend(self, "hasFaultForRelationshipNamed:", objc.BOOL, .{key});
    }

    pub fn objectIDsForRelationshipNamed(self: *@This(), key: ?*foundation.String) ?*anyopaque {
        return objc.msgSend(self, "objectIDsForRelationshipNamed:", ?*anyopaque, .{key});
    }

    pub fn willAccessValueForKey(self: *@This(), key: ?*foundation.String) void {
        return objc.msgSend(self, "willAccessValueForKey:", void, .{key});
    }

    pub fn didAccessValueForKey(self: *@This(), key: ?*foundation.String) void {
        return objc.msgSend(self, "didAccessValueForKey:", void, .{key});
    }

    pub fn willChangeValueForKey(self: *@This(), key: ?*foundation.String) void {
        return objc.msgSend(self, "willChangeValueForKey:", void, .{key});
    }

    pub fn didChangeValueForKey(self: *@This(), key: ?*foundation.String) void {
        return objc.msgSend(self, "didChangeValueForKey:", void, .{key});
    }

    pub fn willChangeValueForKeyWithSetMutationUsingObjects(self: *@This(), inKey: ?*foundation.String, inMutationKind: foundation.KeyValueSetMutationKind, inObjects: ?*foundation.Set) void {
        return objc.msgSend(self, "willChangeValueForKey:withSetMutation:usingObjects:", void, .{inKey, inMutationKind, inObjects});
    }

    pub fn didChangeValueForKeyWithSetMutationUsingObjects(self: *@This(), inKey: ?*foundation.String, inMutationKind: foundation.KeyValueSetMutationKind, inObjects: ?*foundation.Set) void {
        return objc.msgSend(self, "didChangeValueForKey:withSetMutation:usingObjects:", void, .{inKey, inMutationKind, inObjects});
    }

    pub fn awakeFromFetch(self: *@This()) void {
        return objc.msgSend(self, "awakeFromFetch", void, .{});
    }

    pub fn awakeFromInsert(self: *@This()) void {
        return objc.msgSend(self, "awakeFromInsert", void, .{});
    }

    pub fn awakeFromSnapshotEvents(self: *@This(), flags: SnapshotEventType) void {
        return objc.msgSend(self, "awakeFromSnapshotEvents:", void, .{flags});
    }

    pub fn prepareForDeletion(self: *@This()) void {
        return objc.msgSend(self, "prepareForDeletion", void, .{});
    }

    pub fn willSave(self: *@This()) void {
        return objc.msgSend(self, "willSave", void, .{});
    }

    pub fn didSave(self: *@This()) void {
        return objc.msgSend(self, "didSave", void, .{});
    }

    pub fn willTurnIntoFault(self: *@This()) void {
        return objc.msgSend(self, "willTurnIntoFault", void, .{});
    }

    pub fn didTurnIntoFault(self: *@This()) void {
        return objc.msgSend(self, "didTurnIntoFault", void, .{});
    }

    pub fn valueForKey(self: *@This(), key: ?*foundation.String) *objc.Id {
        return objc.msgSend(self, "valueForKey:", *objc.Id, .{key});
    }

    pub fn setValueForKey(self: *@This(), value: *objc.Id, key: ?*foundation.String) void {
        return objc.msgSend(self, "setValue:forKey:", void, .{value, key});
    }

    pub fn primitiveValueForKey(self: *@This(), key: ?*foundation.String) *objc.Id {
        return objc.msgSend(self, "primitiveValueForKey:", *objc.Id, .{key});
    }

    pub fn setPrimitiveValueForKey(self: *@This(), value: *objc.Id, key: ?*foundation.String) void {
        return objc.msgSend(self, "setPrimitiveValue:forKey:", void, .{value, key});
    }

    pub fn committedValuesForKeys(self: *@This(), keys: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "committedValuesForKeys:", ?*anyopaque, .{keys});
    }

    pub fn changedValues(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "changedValues", ?*anyopaque, .{});
    }

    pub fn changedValuesForCurrentEvent(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "changedValuesForCurrentEvent", ?*anyopaque, .{});
    }

    pub fn validateValueForKeyError(self: *@This(), value: ?**objc.Id, key: ?*String, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "validateValue:forKey:error:", objc.BOOL, .{value, key, @"error"});
    }

    pub fn validateForDelete(self: *@This(), @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "validateForDelete:", objc.BOOL, .{@"error"});
    }

    pub fn validateForInsert(self: *@This(), @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "validateForInsert:", objc.BOOL, .{@"error"});
    }

    pub fn validateForUpdate(self: *@This(), @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "validateForUpdate:", objc.BOOL, .{@"error"});
    }

    pub fn setObservationInfo(self: *@This(), inObservationInfo: ?*anyopaque) void {
        return objc.msgSend(self, "setObservationInfo:", void, .{inObservationInfo});
    }

    pub fn observationInfo(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "observationInfo", ?*anyopaque, .{});
    }

    pub fn contextShouldIgnoreUnmodeledPropertyChanges(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "contextShouldIgnoreUnmodeledPropertyChanges", objc.BOOL, .{});
    }

    pub fn managedObjectContext(self: *@This()) ?*ManagedObjectContext {
        return objc.msgSend(self, "managedObjectContext", ?*ManagedObjectContext, .{});
    }

    pub fn entity(self: *@This()) ?*EntityDescription {
        return objc.msgSend(self, "entity", ?*EntityDescription, .{});
    }

    pub fn objectID(self: *@This()) ?*ManagedObjectID {
        return objc.msgSend(self, "objectID", ?*ManagedObjectID, .{});
    }

    pub fn isInserted(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isInserted", objc.BOOL, .{});
    }

    pub fn isUpdated(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isUpdated", objc.BOOL, .{});
    }

    pub fn isDeleted(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isDeleted", objc.BOOL, .{});
    }

    pub fn hasChanges(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasChanges", objc.BOOL, .{});
    }

    pub fn hasPersistentChangedValues(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasPersistentChangedValues", objc.BOOL, .{});
    }

    pub fn isFault(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isFault", objc.BOOL, .{});
    }

    pub fn faultingState(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "faultingState", objc.NSUInteger, .{});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSManagedObjectID?language=objc
pub const ManagedObjectID = opaque {
    pub const InternalInfo = objc.ExternalClass("NSManagedObjectID", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn URIRepresentation(self: *@This()) ?*URL {
        return objc.msgSend(self, "URIRepresentation", ?*URL, .{});
    }

    pub fn entity(self: *@This()) ?*EntityDescription {
        return objc.msgSend(self, "entity", ?*EntityDescription, .{});
    }

    pub fn persistentStore(self: *@This()) ?*PersistentStore {
        return objc.msgSend(self, "persistentStore", ?*PersistentStore, .{});
    }

    pub fn isTemporaryID(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isTemporaryID", objc.BOOL, .{});
    }

};

pub const FetchRequestResultType = enum(objc.NSUInteger) {
    ManagedObjectResultType = 0,
    ManagedObjectIDResultType = 1,
    DictionaryResultType = 2,
    CountResultType = 4,
};

/// https://developer.apple.com/documentation/CoreData/NSFetchRequestResult?language=objc
pub const FetchRequestResult = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
};

/// https://developer.apple.com/documentation/CoreData/NSFetchRequest?language=objc
pub const FetchRequest = opaque {
    pub const InternalInfo = objc.ExternalClass("NSFetchRequest", @This(), PersistentStoreRequest, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn fetchRequestWithEntityName(self: *@This(), entityName: ?*String) *@This() {
        return objc.msgSend(self, "fetchRequestWithEntityName:", *@This(), .{entityName});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithEntityName(self: *@This(), entityName: ?*String) *@This() {
        return objc.msgSend(self, "initWithEntityName:", *@This(), .{entityName});
    }

    pub fn execute(self: *@This(), @"error": ?*?*Error) ?*anyopaque {
        return objc.msgSend(self, "execute:", ?*anyopaque, .{@"error"});
    }

    pub fn entity(self: *@This()) ?*EntityDescription {
        return objc.msgSend(self, "entity", ?*EntityDescription, .{});
    }

    pub fn setEntity(self: *@This(), entity: ?*EntityDescription) void {
        return objc.msgSend(self, "setEntity:", void, .{entity});
    }

    pub fn entityName(self: *@This()) ?*String {
        return objc.msgSend(self, "entityName", ?*String, .{});
    }

    pub fn predicate(self: *@This()) ?*Predicate {
        return objc.msgSend(self, "predicate", ?*Predicate, .{});
    }

    pub fn setPredicate(self: *@This(), predicate: ?*Predicate) void {
        return objc.msgSend(self, "setPredicate:", void, .{predicate});
    }

    pub fn sortDescriptors(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "sortDescriptors", ?*anyopaque, .{});
    }

    pub fn setSortDescriptors(self: *@This(), sortDescriptors: ?*anyopaque) void {
        return objc.msgSend(self, "setSortDescriptors:", void, .{sortDescriptors});
    }

    pub fn fetchLimit(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "fetchLimit", objc.NSUInteger, .{});
    }

    pub fn setFetchLimit(self: *@This(), fetchLimit: objc.NSUInteger) void {
        return objc.msgSend(self, "setFetchLimit:", void, .{fetchLimit});
    }

    pub fn affectedStores(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "affectedStores", ?*anyopaque, .{});
    }

    pub fn setAffectedStores(self: *@This(), affectedStores: ?*anyopaque) void {
        return objc.msgSend(self, "setAffectedStores:", void, .{affectedStores});
    }

    pub fn resultType(self: *@This()) FetchRequestResultType {
        return objc.msgSend(self, "resultType", FetchRequestResultType, .{});
    }

    pub fn setResultType(self: *@This(), resultType: FetchRequestResultType) void {
        return objc.msgSend(self, "setResultType:", void, .{resultType});
    }

    pub fn includesSubentities(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "includesSubentities", objc.BOOL, .{});
    }

    pub fn setIncludesSubentities(self: *@This(), includesSubentities: objc.BOOL) void {
        return objc.msgSend(self, "setIncludesSubentities:", void, .{includesSubentities});
    }

    pub fn includesPropertyValues(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "includesPropertyValues", objc.BOOL, .{});
    }

    pub fn setIncludesPropertyValues(self: *@This(), includesPropertyValues: objc.BOOL) void {
        return objc.msgSend(self, "setIncludesPropertyValues:", void, .{includesPropertyValues});
    }

    pub fn returnsObjectsAsFaults(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "returnsObjectsAsFaults", objc.BOOL, .{});
    }

    pub fn setReturnsObjectsAsFaults(self: *@This(), returnsObjectsAsFaults: objc.BOOL) void {
        return objc.msgSend(self, "setReturnsObjectsAsFaults:", void, .{returnsObjectsAsFaults});
    }

    pub fn relationshipKeyPathsForPrefetching(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "relationshipKeyPathsForPrefetching", ?*anyopaque, .{});
    }

    pub fn setRelationshipKeyPathsForPrefetching(self: *@This(), relationshipKeyPathsForPrefetching: ?*anyopaque) void {
        return objc.msgSend(self, "setRelationshipKeyPathsForPrefetching:", void, .{relationshipKeyPathsForPrefetching});
    }

    pub fn includesPendingChanges(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "includesPendingChanges", objc.BOOL, .{});
    }

    pub fn setIncludesPendingChanges(self: *@This(), includesPendingChanges: objc.BOOL) void {
        return objc.msgSend(self, "setIncludesPendingChanges:", void, .{includesPendingChanges});
    }

    pub fn returnsDistinctResults(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "returnsDistinctResults", objc.BOOL, .{});
    }

    pub fn setReturnsDistinctResults(self: *@This(), returnsDistinctResults: objc.BOOL) void {
        return objc.msgSend(self, "setReturnsDistinctResults:", void, .{returnsDistinctResults});
    }

    pub fn propertiesToFetch(self: *@This()) ?*Array {
        return objc.msgSend(self, "propertiesToFetch", ?*Array, .{});
    }

    pub fn setPropertiesToFetch(self: *@This(), propertiesToFetch: ?*Array) void {
        return objc.msgSend(self, "setPropertiesToFetch:", void, .{propertiesToFetch});
    }

    pub fn fetchOffset(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "fetchOffset", objc.NSUInteger, .{});
    }

    pub fn setFetchOffset(self: *@This(), fetchOffset: objc.NSUInteger) void {
        return objc.msgSend(self, "setFetchOffset:", void, .{fetchOffset});
    }

    pub fn fetchBatchSize(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "fetchBatchSize", objc.NSUInteger, .{});
    }

    pub fn setFetchBatchSize(self: *@This(), fetchBatchSize: objc.NSUInteger) void {
        return objc.msgSend(self, "setFetchBatchSize:", void, .{fetchBatchSize});
    }

    pub fn shouldRefreshRefetchedObjects(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "shouldRefreshRefetchedObjects", objc.BOOL, .{});
    }

    pub fn setShouldRefreshRefetchedObjects(self: *@This(), shouldRefreshRefetchedObjects: objc.BOOL) void {
        return objc.msgSend(self, "setShouldRefreshRefetchedObjects:", void, .{shouldRefreshRefetchedObjects});
    }

    pub fn propertiesToGroupBy(self: *@This()) ?*Array {
        return objc.msgSend(self, "propertiesToGroupBy", ?*Array, .{});
    }

    pub fn setPropertiesToGroupBy(self: *@This(), propertiesToGroupBy: ?*Array) void {
        return objc.msgSend(self, "setPropertiesToGroupBy:", void, .{propertiesToGroupBy});
    }

    pub fn havingPredicate(self: *@This()) ?*Predicate {
        return objc.msgSend(self, "havingPredicate", ?*Predicate, .{});
    }

    pub fn setHavingPredicate(self: *@This(), havingPredicate: ?*Predicate) void {
        return objc.msgSend(self, "setHavingPredicate:", void, .{havingPredicate});
    }

};

pub const PersistentStoreAsynchronousFetchResultCompletionBlock = *const fn(?*AsynchronousFetchResult) callconv(.C) void;

/// https://developer.apple.com/documentation/CoreData/NSAsynchronousFetchRequest?language=objc
pub const AsynchronousFetchRequest = opaque {
    pub const InternalInfo = objc.ExternalClass("NSAsynchronousFetchRequest", @This(), PersistentStoreRequest, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithFetchRequestCompletionBlock(self: *@This(), request: ?*anyopaque, blk: *const fn(?*anyopaque) callconv(.C) void) *@This() {
        return objc.msgSend(self, "initWithFetchRequest:completionBlock:", *@This(), .{request, blk});
    }

    pub fn fetchRequest(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "fetchRequest", ?*anyopaque, .{});
    }

    pub fn completionBlock(self: *@This()) PersistentStoreAsynchronousFetchResultCompletionBlock {
        return objc.msgSend(self, "completionBlock", PersistentStoreAsynchronousFetchResultCompletionBlock, .{});
    }

    pub fn estimatedResultCount(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "estimatedResultCount", objc.NSInteger, .{});
    }

    pub fn setEstimatedResultCount(self: *@This(), estimatedResultCount: objc.NSInteger) void {
        return objc.msgSend(self, "setEstimatedResultCount:", void, .{estimatedResultCount});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSFetchRequestExpression?language=objc
pub const FetchRequestExpression = opaque {
    pub const InternalInfo = objc.ExternalClass("NSFetchRequestExpression", @This(), Expression, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn expressionForFetchContextCountOnly(self: *@This(), fetch: ?*Expression, context: ?*Expression, countFlag: objc.BOOL) ?*Expression {
        return objc.msgSend(self, "expressionForFetch:context:countOnly:", ?*Expression, .{fetch, context, countFlag});
    }

    pub fn requestExpression(self: *@This()) ?*Expression {
        return objc.msgSend(self, "requestExpression", ?*Expression, .{});
    }

    pub fn contextExpression(self: *@This()) ?*Expression {
        return objc.msgSend(self, "contextExpression", ?*Expression, .{});
    }

    pub fn isCountOnlyRequest(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isCountOnlyRequest", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSManagedObjectModel?language=objc
pub const ManagedObjectModel = opaque {
    pub const InternalInfo = objc.ExternalClass("NSManagedObjectModel", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn mergedModelFromBundles(self: *@This(), bundles: ?*anyopaque) ?*ManagedObjectModel {
        return objc.msgSend(self, "mergedModelFromBundles:", ?*ManagedObjectModel, .{bundles});
    }

    pub fn modelByMergingModels(self: *@This(), models: ?*anyopaque) ?*ManagedObjectModel {
        return objc.msgSend(self, "modelByMergingModels:", ?*ManagedObjectModel, .{models});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithContentsOfURL(self: *@This(), url: ?*URL) *@This() {
        return objc.msgSend(self, "initWithContentsOfURL:", *@This(), .{url});
    }

    pub fn entitiesForConfiguration(self: *@This(), configuration: ?*String) ?*anyopaque {
        return objc.msgSend(self, "entitiesForConfiguration:", ?*anyopaque, .{configuration});
    }

    pub fn setEntitiesForConfiguration(self: *@This(), entities: ?*anyopaque, configuration: ?*String) void {
        return objc.msgSend(self, "setEntities:forConfiguration:", void, .{entities, configuration});
    }

    pub fn setFetchRequestTemplateForName(self: *@This(), fetchRequestTemplate: ?*FetchRequest, name: ?*String) void {
        return objc.msgSend(self, "setFetchRequestTemplate:forName:", void, .{fetchRequestTemplate, name});
    }

    pub fn fetchRequestTemplateForName(self: *@This(), name: ?*String) ?*FetchRequest {
        return objc.msgSend(self, "fetchRequestTemplateForName:", ?*FetchRequest, .{name});
    }

    pub fn fetchRequestFromTemplateWithNameSubstitutionVariables(self: *@This(), name: ?*String, variables: ?*anyopaque) ?*FetchRequest {
        return objc.msgSend(self, "fetchRequestFromTemplateWithName:substitutionVariables:", ?*FetchRequest, .{name, variables});
    }

    pub fn mergedModelFromBundlesForStoreMetadata(self: *@This(), bundles: ?*anyopaque, metadata: ?*anyopaque) ?*ManagedObjectModel {
        return objc.msgSend(self, "mergedModelFromBundles:forStoreMetadata:", ?*ManagedObjectModel, .{bundles, metadata});
    }

    pub fn modelByMergingModelsForStoreMetadata(self: *@This(), models: ?*anyopaque, metadata: ?*anyopaque) ?*ManagedObjectModel {
        return objc.msgSend(self, "modelByMergingModels:forStoreMetadata:", ?*ManagedObjectModel, .{models, metadata});
    }

    pub fn isConfigurationCompatibleWithStoreMetadata(self: *@This(), configuration: ?*String, metadata: ?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "isConfiguration:compatibleWithStoreMetadata:", objc.BOOL, .{configuration, metadata});
    }

    pub fn checksumsForVersionedModelAtURLError(self: *@This(), modelURL: ?*URL, @"error": ?*?*Error) ?*anyopaque {
        return objc.msgSend(self, "checksumsForVersionedModelAtURL:error:", ?*anyopaque, .{modelURL, @"error"});
    }

    pub fn entitiesByName(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "entitiesByName", ?*anyopaque, .{});
    }

    pub fn entities(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "entities", ?*anyopaque, .{});
    }

    pub fn setEntities(self: *@This(), entities: ?*anyopaque) void {
        return objc.msgSend(self, "setEntities:", void, .{entities});
    }

    pub fn configurations(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "configurations", ?*anyopaque, .{});
    }

    pub fn localizationDictionary(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "localizationDictionary", ?*anyopaque, .{});
    }

    pub fn setLocalizationDictionary(self: *@This(), localizationDictionary: ?*anyopaque) void {
        return objc.msgSend(self, "setLocalizationDictionary:", void, .{localizationDictionary});
    }

    pub fn fetchRequestTemplatesByName(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "fetchRequestTemplatesByName", ?*anyopaque, .{});
    }

    pub fn versionIdentifiers(self: *@This()) ?*foundation.Set {
        return objc.msgSend(self, "versionIdentifiers", ?*foundation.Set, .{});
    }

    pub fn setVersionIdentifiers(self: *@This(), versionIdentifiers: ?*foundation.Set) void {
        return objc.msgSend(self, "setVersionIdentifiers:", void, .{versionIdentifiers});
    }

    pub fn entityVersionHashesByName(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "entityVersionHashesByName", ?*anyopaque, .{});
    }

    pub fn versionChecksum(self: *@This()) ?*String {
        return objc.msgSend(self, "versionChecksum", ?*String, .{});
    }

};

pub const ManagedObjectContextConcurrencyType = enum(objc.NSUInteger) {
    ConfinementConcurrencyType = 0,
    PrivateQueueConcurrencyType = 1,
    MainQueueConcurrencyType = 2,
};

/// https://developer.apple.com/documentation/CoreData/NSManagedObjectContext?language=objc
pub const ManagedObjectContext = opaque {
    pub const InternalInfo = objc.ExternalClass("NSManagedObjectContext", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithConcurrencyType(self: *@This(), ct: ManagedObjectContextConcurrencyType) *@This() {
        return objc.msgSend(self, "initWithConcurrencyType:", *@This(), .{ct});
    }

    pub fn performBlock(self: *@This(), block: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "performBlock:", void, .{block});
    }

    pub fn performBlockAndWait(self: *@This(), block: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "performBlockAndWait:", void, .{block});
    }

    pub fn objectRegisteredForID(self: *@This(), objectID: ?*ManagedObjectID) ?*anyopaque {
        return objc.msgSend(self, "objectRegisteredForID:", ?*anyopaque, .{objectID});
    }

    pub fn objectWithID(self: *@This(), objectID: ?*ManagedObjectID) ?*anyopaque {
        return objc.msgSend(self, "objectWithID:", ?*anyopaque, .{objectID});
    }

    pub fn existingObjectWithIDError(self: *@This(), objectID: ?*ManagedObjectID, @"error": ?*?*Error) ?*anyopaque {
        return objc.msgSend(self, "existingObjectWithID:error:", ?*anyopaque, .{objectID, @"error"});
    }

    pub fn executeFetchRequestError(self: *@This(), request: ?*FetchRequest, @"error": ?*?*Error) ?*Array {
        return objc.msgSend(self, "executeFetchRequest:error:", ?*Array, .{request, @"error"});
    }

    pub fn countForFetchRequestError(self: *@This(), request: ?*FetchRequest, @"error": ?*?*Error) objc.NSUInteger {
        return objc.msgSend(self, "countForFetchRequest:error:", objc.NSUInteger, .{request, @"error"});
    }

    pub fn executeRequestError(self: *@This(), request: ?*PersistentStoreRequest, @"error": ?*?*Error) ?*anyopaque {
        return objc.msgSend(self, "executeRequest:error:", ?*anyopaque, .{request, @"error"});
    }

    pub fn insertObject(self: *@This(), object: ?*ManagedObject) void {
        return objc.msgSend(self, "insertObject:", void, .{object});
    }

    pub fn deleteObject(self: *@This(), object: ?*ManagedObject) void {
        return objc.msgSend(self, "deleteObject:", void, .{object});
    }

    pub fn refreshObjectMergeChanges(self: *@This(), object: ?*ManagedObject, flag: objc.BOOL) void {
        return objc.msgSend(self, "refreshObject:mergeChanges:", void, .{object, flag});
    }

    pub fn detectConflictsForObject(self: *@This(), object: ?*ManagedObject) void {
        return objc.msgSend(self, "detectConflictsForObject:", void, .{object});
    }

    pub fn observeValueForKeyPathOfObjectChangeContext(self: *@This(), keyPath: ?*String, object: *objc.Id, change: ?*anyopaque, context: ?*anyopaque, ) void {
        return objc.msgSend(self, "observeValueForKeyPath:ofObject:change:context:", void, .{keyPath, object, change, context, });
    }

    pub fn processPendingChanges(self: *@This()) void {
        return objc.msgSend(self, "processPendingChanges", void, .{});
    }

    pub fn assignObjectToPersistentStore(self: *@This(), object: *objc.Id, store: ?*PersistentStore) void {
        return objc.msgSend(self, "assignObject:toPersistentStore:", void, .{object, store});
    }

    pub fn undo(self: *@This()) void {
        return objc.msgSend(self, "undo", void, .{});
    }

    pub fn redo(self: *@This()) void {
        return objc.msgSend(self, "redo", void, .{});
    }

    pub fn reset(self: *@This()) void {
        return objc.msgSend(self, "reset", void, .{});
    }

    pub fn rollback(self: *@This()) void {
        return objc.msgSend(self, "rollback", void, .{});
    }

    pub fn save(self: *@This(), @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "save:", objc.BOOL, .{@"error"});
    }

    pub fn refreshAllObjects(self: *@This()) void {
        return objc.msgSend(self, "refreshAllObjects", void, .{});
    }

    pub fn lock(self: *@This()) void {
        return objc.msgSend(self, "lock", void, .{});
    }

    pub fn unlock(self: *@This()) void {
        return objc.msgSend(self, "unlock", void, .{});
    }

    pub fn tryLock(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "tryLock", objc.BOOL, .{});
    }

    pub fn shouldHandleInaccessibleFaultForObjectIDTriggeredByProperty(self: *@This(), fault: ?*ManagedObject, oid: ?*ManagedObjectID, property: ?*PropertyDescription) objc.BOOL {
        return objc.msgSend(self, "shouldHandleInaccessibleFault:forObjectID:triggeredByProperty:", objc.BOOL, .{fault, oid, property});
    }

    pub fn obtainPermanentIDsForObjectsError(self: *@This(), objects: ?*anyopaque, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "obtainPermanentIDsForObjects:error:", objc.BOOL, .{objects, @"error"});
    }

    pub fn mergeChangesFromContextDidSaveNotification(self: *@This(), notification: ?*Notification) void {
        return objc.msgSend(self, "mergeChangesFromContextDidSaveNotification:", void, .{notification});
    }

    pub fn mergeChangesFromRemoteContextSaveIntoContexts(self: *@This(), changeNotificationData: ?*Dictionary, contexts: ?*anyopaque) void {
        return objc.msgSend(self, "mergeChangesFromRemoteContextSave:intoContexts:", void, .{changeNotificationData, contexts});
    }

    pub fn setQueryGenerationFromTokenError(self: *@This(), generation: ?*QueryGenerationToken, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "setQueryGenerationFromToken:error:", objc.BOOL, .{generation, @"error"});
    }

    pub fn persistentStoreCoordinator(self: *@This()) ?*PersistentStoreCoordinator {
        return objc.msgSend(self, "persistentStoreCoordinator", ?*PersistentStoreCoordinator, .{});
    }

    pub fn setPersistentStoreCoordinator(self: *@This(), persistentStoreCoordinator: ?*PersistentStoreCoordinator) void {
        return objc.msgSend(self, "setPersistentStoreCoordinator:", void, .{persistentStoreCoordinator});
    }

    pub fn parentContext(self: *@This()) ?*ManagedObjectContext {
        return objc.msgSend(self, "parentContext", ?*ManagedObjectContext, .{});
    }

    pub fn setParentContext(self: *@This(), parentContext: ?*ManagedObjectContext) void {
        return objc.msgSend(self, "setParentContext:", void, .{parentContext});
    }

    pub fn name(self: *@This()) ?*String {
        return objc.msgSend(self, "name", ?*String, .{});
    }

    pub fn setName(self: *@This(), name: ?*String) void {
        return objc.msgSend(self, "setName:", void, .{name});
    }

    pub fn undoManager(self: *@This()) ?*UndoManager {
        return objc.msgSend(self, "undoManager", ?*UndoManager, .{});
    }

    pub fn setUndoManager(self: *@This(), undoManager: ?*UndoManager) void {
        return objc.msgSend(self, "setUndoManager:", void, .{undoManager});
    }

    pub fn hasChanges(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasChanges", objc.BOOL, .{});
    }

    pub fn userInfo(self: *@This()) ?*foundation.MutableDictionary {
        return objc.msgSend(self, "userInfo", ?*foundation.MutableDictionary, .{});
    }

    pub fn concurrencyType(self: *@This()) ManagedObjectContextConcurrencyType {
        return objc.msgSend(self, "concurrencyType", ManagedObjectContextConcurrencyType, .{});
    }

    pub fn insertedObjects(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "insertedObjects", ?*anyopaque, .{});
    }

    pub fn updatedObjects(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "updatedObjects", ?*anyopaque, .{});
    }

    pub fn deletedObjects(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "deletedObjects", ?*anyopaque, .{});
    }

    pub fn registeredObjects(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "registeredObjects", ?*anyopaque, .{});
    }

    pub fn propagatesDeletesAtEndOfEvent(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "propagatesDeletesAtEndOfEvent", objc.BOOL, .{});
    }

    pub fn setPropagatesDeletesAtEndOfEvent(self: *@This(), propagatesDeletesAtEndOfEvent: objc.BOOL) void {
        return objc.msgSend(self, "setPropagatesDeletesAtEndOfEvent:", void, .{propagatesDeletesAtEndOfEvent});
    }

    pub fn retainsRegisteredObjects(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "retainsRegisteredObjects", objc.BOOL, .{});
    }

    pub fn setRetainsRegisteredObjects(self: *@This(), retainsRegisteredObjects: objc.BOOL) void {
        return objc.msgSend(self, "setRetainsRegisteredObjects:", void, .{retainsRegisteredObjects});
    }

    pub fn shouldDeleteInaccessibleFaults(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "shouldDeleteInaccessibleFaults", objc.BOOL, .{});
    }

    pub fn setShouldDeleteInaccessibleFaults(self: *@This(), shouldDeleteInaccessibleFaults: objc.BOOL) void {
        return objc.msgSend(self, "setShouldDeleteInaccessibleFaults:", void, .{shouldDeleteInaccessibleFaults});
    }

    pub fn stalenessInterval(self: *@This()) foundation.TimeInterval {
        return objc.msgSend(self, "stalenessInterval", foundation.TimeInterval, .{});
    }

    pub fn setStalenessInterval(self: *@This(), stalenessInterval: foundation.TimeInterval) void {
        return objc.msgSend(self, "setStalenessInterval:", void, .{stalenessInterval});
    }

    pub fn mergePolicy(self: *@This()) *objc.Id {
        return objc.msgSend(self, "mergePolicy", *objc.Id, .{});
    }

    pub fn setMergePolicy(self: *@This(), mergePolicy: *objc.Id) void {
        return objc.msgSend(self, "setMergePolicy:", void, .{mergePolicy});
    }

    pub fn queryGenerationToken(self: *@This()) ?*QueryGenerationToken {
        return objc.msgSend(self, "queryGenerationToken", ?*QueryGenerationToken, .{});
    }

    pub fn automaticallyMergesChangesFromParent(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "automaticallyMergesChangesFromParent", objc.BOOL, .{});
    }

    pub fn setAutomaticallyMergesChangesFromParent(self: *@This(), automaticallyMergesChangesFromParent: objc.BOOL) void {
        return objc.msgSend(self, "setAutomaticallyMergesChangesFromParent:", void, .{automaticallyMergesChangesFromParent});
    }

    pub fn transactionAuthor(self: *@This()) ?*String {
        return objc.msgSend(self, "transactionAuthor", ?*String, .{});
    }

    pub fn setTransactionAuthor(self: *@This(), transactionAuthor: ?*String) void {
        return objc.msgSend(self, "setTransactionAuthor:", void, .{transactionAuthor});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSPersistentStoreCoordinator?language=objc
pub const PersistentStoreCoordinator = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPersistentStoreCoordinator", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithManagedObjectModel(self: *@This(), model: ?*ManagedObjectModel) *@This() {
        return objc.msgSend(self, "initWithManagedObjectModel:", *@This(), .{model});
    }

    pub fn persistentStoreForURL(self: *@This(), URL: ?*URL) ?*anyopaque {
        return objc.msgSend(self, "persistentStoreForURL:", ?*anyopaque, .{URL});
    }

    pub fn URLForPersistentStore(self: *@This(), store: ?*PersistentStore) ?*URL {
        return objc.msgSend(self, "URLForPersistentStore:", ?*URL, .{store});
    }

    pub fn setURLForPersistentStore(self: *@This(), url: ?*URL, store: ?*PersistentStore) objc.BOOL {
        return objc.msgSend(self, "setURL:forPersistentStore:", objc.BOOL, .{url, store});
    }

    pub fn addPersistentStoreWithTypeConfigurationURLOptionsError(self: *@This(), storeType: ?*String, configuration: ?*String, storeURL: ?*URL, options: ?*Dictionary, @"error": ?*?*Error, ) ?*anyopaque {
        return objc.msgSend(self, "addPersistentStoreWithType:configuration:URL:options:error:", ?*anyopaque, .{storeType, configuration, storeURL, options, @"error", });
    }

    pub fn addPersistentStoreWithDescriptionCompletionHandler(self: *@This(), storeDescription: ?*PersistentStoreDescription, block: *const fn(?*PersistentStoreDescription, ?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "addPersistentStoreWithDescription:completionHandler:", void, .{storeDescription, block});
    }

    pub fn removePersistentStoreError(self: *@This(), store: ?*PersistentStore, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "removePersistentStore:error:", objc.BOOL, .{store, @"error"});
    }

    pub fn setMetadataForPersistentStore(self: *@This(), metadata: ?*anyopaque, store: ?*PersistentStore) void {
        return objc.msgSend(self, "setMetadata:forPersistentStore:", void, .{metadata, store});
    }

    pub fn metadataForPersistentStore(self: *@This(), store: ?*PersistentStore) ?*anyopaque {
        return objc.msgSend(self, "metadataForPersistentStore:", ?*anyopaque, .{store});
    }

    pub fn managedObjectIDForURIRepresentation(self: *@This(), url: ?*URL) ?*ManagedObjectID {
        return objc.msgSend(self, "managedObjectIDForURIRepresentation:", ?*ManagedObjectID, .{url});
    }

    pub fn executeRequestWithContextError(self: *@This(), request: ?*PersistentStoreRequest, context: ?*ManagedObjectContext, @"error": ?*?*Error) *objc.Id {
        return objc.msgSend(self, "executeRequest:withContext:error:", *objc.Id, .{request, context, @"error"});
    }

    pub fn registerStoreClassForStoreType(self: *@This(), storeClass: *objc.Class, storeType: ?*String) void {
        return objc.msgSend(self, "registerStoreClass:forStoreType:", void, .{storeClass, storeType});
    }

    pub fn metadataForPersistentStoreOfTypeURLOptionsError(self: *@This(), storeType: ?*String, url: ?*URL, options: ?*Dictionary, @"error": ?*?*Error, ) ?*anyopaque {
        return objc.msgSend(self, "metadataForPersistentStoreOfType:URL:options:error:", ?*anyopaque, .{storeType, url, options, @"error", });
    }

    pub fn setMetadataForPersistentStoreOfTypeURLOptionsError(self: *@This(), metadata: ?*anyopaque, storeType: ?*String, url: ?*URL, options: ?*Dictionary, @"error": ?*?*Error, ) objc.BOOL {
        return objc.msgSend(self, "setMetadata:forPersistentStoreOfType:URL:options:error:", objc.BOOL, .{metadata, storeType, url, options, @"error", });
    }

    pub fn elementsDerivedFromExternalRecordURL(self: *@This(), fileURL: ?*URL) ?*Dictionary {
        return objc.msgSend(self, "elementsDerivedFromExternalRecordURL:", ?*Dictionary, .{fileURL});
    }

    pub fn importStoreWithIdentifierFromExternalRecordsDirectoryToURLOptionsWithTypeError(self: *@This(), storeIdentifier: ?*String, externalRecordsURL: ?*URL, destinationURL: ?*URL, options: ?*Dictionary, storeType: ?*String, @"error": ?*?*Error, ) ?*PersistentStore {
        return objc.msgSend(self, "importStoreWithIdentifier:fromExternalRecordsDirectory:toURL:options:withType:error:", ?*PersistentStore, .{storeIdentifier, externalRecordsURL, destinationURL, options, storeType, @"error", });
    }

    pub fn migratePersistentStoreToURLOptionsWithTypeError(self: *@This(), store: ?*PersistentStore, URL: ?*URL, options: ?*Dictionary, storeType: ?*String, @"error": ?*?*Error, ) ?*PersistentStore {
        return objc.msgSend(self, "migratePersistentStore:toURL:options:withType:error:", ?*PersistentStore, .{store, URL, options, storeType, @"error", });
    }

    pub fn destroyPersistentStoreAtURLWithTypeOptionsError(self: *@This(), url: ?*URL, storeType: ?*String, options: ?*Dictionary, @"error": ?*?*Error, ) objc.BOOL {
        return objc.msgSend(self, "destroyPersistentStoreAtURL:withType:options:error:", objc.BOOL, .{url, storeType, options, @"error", });
    }

    pub fn replacePersistentStoreAtURLDestinationOptionsWithPersistentStoreFromURLSourceOptionsStoreTypeError(self: *@This(), destinationURL: ?*URL, destinationOptions: ?*Dictionary, sourceURL: ?*URL, sourceOptions: ?*Dictionary, storeType: ?*String, @"error": ?*?*Error, ) objc.BOOL {
        return objc.msgSend(self, "replacePersistentStoreAtURL:destinationOptions:withPersistentStoreFromURL:sourceOptions:storeType:error:", objc.BOOL, .{destinationURL, destinationOptions, sourceURL, sourceOptions, storeType, @"error", });
    }

    pub fn performBlock(self: *@This(), block: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "performBlock:", void, .{block});
    }

    pub fn performBlockAndWait(self: *@This(), block: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "performBlockAndWait:", void, .{block});
    }

    pub fn currentPersistentHistoryTokenFromStores(self: *@This(), stores: ?*Array) ?*PersistentHistoryToken {
        return objc.msgSend(self, "currentPersistentHistoryTokenFromStores:", ?*PersistentHistoryToken, .{stores});
    }

    pub fn finishDeferredLightweightMigration(self: *@This(), @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "finishDeferredLightweightMigration:", objc.BOOL, .{@"error"});
    }

    pub fn finishDeferredLightweightMigrationTask(self: *@This(), @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "finishDeferredLightweightMigrationTask:", objc.BOOL, .{@"error"});
    }

    pub fn managedObjectIDFromUTF8StringLength(self: *@This(), utf8string: ?*i8, len: objc.NSUInteger) ?*ManagedObjectID {
        return objc.msgSend(self, "managedObjectIDFromUTF8String:length:", ?*ManagedObjectID, .{utf8string, len});
    }

    pub fn metadataForPersistentStoreWithURLError(self: *@This(), url: ?*URL, @"error": ?*?*Error) ?*Dictionary {
        return objc.msgSend(self, "metadataForPersistentStoreWithURL:error:", ?*Dictionary, .{url, @"error"});
    }

    pub fn lock(self: *@This()) void {
        return objc.msgSend(self, "lock", void, .{});
    }

    pub fn unlock(self: *@This()) void {
        return objc.msgSend(self, "unlock", void, .{});
    }

    pub fn tryLock(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "tryLock", objc.BOOL, .{});
    }

    pub fn metadataForPersistentStoreOfTypeURLError(self: *@This(), storeType: ?*String, url: ?*URL, @"error": ?*?*Error) ?*anyopaque {
        return objc.msgSend(self, "metadataForPersistentStoreOfType:URL:error:", ?*anyopaque, .{storeType, url, @"error"});
    }

    pub fn setMetadataForPersistentStoreOfTypeURLError(self: *@This(), metadata: ?*anyopaque, storeType: ?*String, url: ?*URL, @"error": ?*?*Error, ) objc.BOOL {
        return objc.msgSend(self, "setMetadata:forPersistentStoreOfType:URL:error:", objc.BOOL, .{metadata, storeType, url, @"error", });
    }

    pub fn removeUbiquitousContentAndPersistentStoreAtURLOptionsError(self: *@This(), storeURL: ?*URL, options: ?*Dictionary, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "removeUbiquitousContentAndPersistentStoreAtURL:options:error:", objc.BOOL, .{storeURL, options, @"error"});
    }

    pub fn managedObjectModel(self: *@This()) ?*ManagedObjectModel {
        return objc.msgSend(self, "managedObjectModel", ?*ManagedObjectModel, .{});
    }

    pub fn persistentStores(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "persistentStores", ?*anyopaque, .{});
    }

    pub fn name(self: *@This()) ?*String {
        return objc.msgSend(self, "name", ?*String, .{});
    }

    pub fn setName(self: *@This(), name: ?*String) void {
        return objc.msgSend(self, "setName:", void, .{name});
    }

    pub fn registeredStoreTypes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "registeredStoreTypes", ?*anyopaque, .{});
    }

};

pub const PersistentStoreUbiquitousTransitionType = enum(objc.NSUInteger) {
    AccountAdded = 1,
    AccountRemoved = 2,
    ContentRemoved = 3,
    InitialImportCompleted = 4,
};

/// https://developer.apple.com/documentation/CoreData/NSPersistentStore?language=objc
pub const PersistentStore = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPersistentStore", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn metadataForPersistentStoreWithURLError(self: *@This(), url: ?*URL, @"error": ?*?*Error) ?*anyopaque {
        return objc.msgSend(self, "metadataForPersistentStoreWithURL:error:", ?*anyopaque, .{url, @"error"});
    }

    pub fn setMetadataForPersistentStoreWithURLError(self: *@This(), metadata: ?*anyopaque, url: ?*URL, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "setMetadata:forPersistentStoreWithURL:error:", objc.BOOL, .{metadata, url, @"error"});
    }

    pub fn migrationManagerClass(self: *@This()) *objc.Class {
        return objc.msgSend(self, "migrationManagerClass", *objc.Class, .{});
    }

    pub fn initWithPersistentStoreCoordinatorConfigurationNameURLOptions(self: *@This(), root: ?*PersistentStoreCoordinator, name: ?*String, url: ?*URL, options: ?*Dictionary, ) *@This() {
        return objc.msgSend(self, "initWithPersistentStoreCoordinator:configurationName:URL:options:", *@This(), .{root, name, url, options, });
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn loadMetadata(self: *@This(), @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "loadMetadata:", objc.BOOL, .{@"error"});
    }

    pub fn didAddToPersistentStoreCoordinator(self: *@This(), coordinator: ?*PersistentStoreCoordinator) void {
        return objc.msgSend(self, "didAddToPersistentStoreCoordinator:", void, .{coordinator});
    }

    pub fn willRemoveFromPersistentStoreCoordinator(self: *@This(), coordinator: ?*PersistentStoreCoordinator) void {
        return objc.msgSend(self, "willRemoveFromPersistentStoreCoordinator:", void, .{coordinator});
    }

    pub fn persistentStoreCoordinator(self: *@This()) ?*PersistentStoreCoordinator {
        return objc.msgSend(self, "persistentStoreCoordinator", ?*PersistentStoreCoordinator, .{});
    }

    pub fn configurationName(self: *@This()) ?*String {
        return objc.msgSend(self, "configurationName", ?*String, .{});
    }

    pub fn options(self: *@This()) ?*Dictionary {
        return objc.msgSend(self, "options", ?*Dictionary, .{});
    }

    pub fn URL(self: *@This()) ?*URL {
        return objc.msgSend(self, "URL", ?*URL, .{});
    }

    pub fn setURL(self: *@This(), URL: ?*URL) void {
        return objc.msgSend(self, "setURL:", void, .{URL});
    }

    pub fn identifier(self: *@This()) ?*String {
        return objc.msgSend(self, "identifier", ?*String, .{});
    }

    pub fn setIdentifier(self: *@This(), identifier: ?*String) void {
        return objc.msgSend(self, "setIdentifier:", void, .{identifier});
    }

    pub fn @"type"(self: *@This()) ?*String {
        return objc.msgSend(self, "type", ?*String, .{});
    }

    pub fn isReadOnly(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isReadOnly", objc.BOOL, .{});
    }

    pub fn setReadOnly(self: *@This(), readOnly: objc.BOOL) void {
        return objc.msgSend(self, "setReadOnly:", void, .{readOnly});
    }

    pub fn metadata(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "metadata", ?*anyopaque, .{});
    }

    pub fn setMetadata(self: *@This(), metadata: ?*anyopaque) void {
        return objc.msgSend(self, "setMetadata:", void, .{metadata});
    }

    pub fn coreSpotlightExporter(self: *@This()) ?*CoreDataCoreSpotlightDelegate {
        return objc.msgSend(self, "coreSpotlightExporter", ?*CoreDataCoreSpotlightDelegate, .{});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSAtomicStoreCacheNode?language=objc
pub const AtomicStoreCacheNode = opaque {
    pub const InternalInfo = objc.ExternalClass("NSAtomicStoreCacheNode", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithObjectID(self: *@This(), moid: ?*ManagedObjectID) *@This() {
        return objc.msgSend(self, "initWithObjectID:", *@This(), .{moid});
    }

    pub fn valueForKey(self: *@This(), key: ?*String) *objc.Id {
        return objc.msgSend(self, "valueForKey:", *objc.Id, .{key});
    }

    pub fn setValueForKey(self: *@This(), value: *objc.Id, key: ?*String) void {
        return objc.msgSend(self, "setValue:forKey:", void, .{value, key});
    }

    pub fn objectID(self: *@This()) ?*ManagedObjectID {
        return objc.msgSend(self, "objectID", ?*ManagedObjectID, .{});
    }

    pub fn propertyCache(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "propertyCache", ?*anyopaque, .{});
    }

    pub fn setPropertyCache(self: *@This(), propertyCache: ?*anyopaque) void {
        return objc.msgSend(self, "setPropertyCache:", void, .{propertyCache});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSAtomicStore?language=objc
pub const AtomicStore = opaque {
    pub const InternalInfo = objc.ExternalClass("NSAtomicStore", @This(), PersistentStore, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithPersistentStoreCoordinatorConfigurationNameURLOptions(self: *@This(), coordinator: ?*PersistentStoreCoordinator, configurationName: ?*String, url: ?*URL, options: ?*Dictionary, ) *@This() {
        return objc.msgSend(self, "initWithPersistentStoreCoordinator:configurationName:URL:options:", *@This(), .{coordinator, configurationName, url, options, });
    }

    pub fn load(self: *@This(), @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "load:", objc.BOOL, .{@"error"});
    }

    pub fn save(self: *@This(), @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "save:", objc.BOOL, .{@"error"});
    }

    pub fn newCacheNodeForManagedObject(self: *@This(), managedObject: ?*ManagedObject) ?*AtomicStoreCacheNode {
        return objc.msgSend(self, "newCacheNodeForManagedObject:", ?*AtomicStoreCacheNode, .{managedObject});
    }

    pub fn updateCacheNodeFromManagedObject(self: *@This(), node: ?*AtomicStoreCacheNode, managedObject: ?*ManagedObject) void {
        return objc.msgSend(self, "updateCacheNode:fromManagedObject:", void, .{node, managedObject});
    }

    pub fn cacheNodes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "cacheNodes", ?*anyopaque, .{});
    }

    pub fn addCacheNodes(self: *@This(), cacheNodes: ?*anyopaque) void {
        return objc.msgSend(self, "addCacheNodes:", void, .{cacheNodes});
    }

    pub fn willRemoveCacheNodes(self: *@This(), cacheNodes: ?*anyopaque) void {
        return objc.msgSend(self, "willRemoveCacheNodes:", void, .{cacheNodes});
    }

    pub fn cacheNodeForObjectID(self: *@This(), objectID: ?*ManagedObjectID) ?*AtomicStoreCacheNode {
        return objc.msgSend(self, "cacheNodeForObjectID:", ?*AtomicStoreCacheNode, .{objectID});
    }

    pub fn objectIDForEntityReferenceObject(self: *@This(), entity: ?*EntityDescription, data: *objc.Id) ?*ManagedObjectID {
        return objc.msgSend(self, "objectIDForEntity:referenceObject:", ?*ManagedObjectID, .{entity, data});
    }

    pub fn newReferenceObjectForManagedObject(self: *@This(), managedObject: ?*ManagedObject) *objc.Id {
        return objc.msgSend(self, "newReferenceObjectForManagedObject:", *objc.Id, .{managedObject});
    }

    pub fn referenceObjectForObjectID(self: *@This(), objectID: ?*ManagedObjectID) *objc.Id {
        return objc.msgSend(self, "referenceObjectForObjectID:", *objc.Id, .{objectID});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSEntityMigrationPolicy?language=objc
pub const EntityMigrationPolicy = opaque {
    pub const InternalInfo = objc.ExternalClass("NSEntityMigrationPolicy", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn beginEntityMappingManagerError(self: *@This(), mapping: ?*EntityMapping, manager: ?*MigrationManager, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "beginEntityMapping:manager:error:", objc.BOOL, .{mapping, manager, @"error"});
    }

    pub fn createDestinationInstancesForSourceInstanceEntityMappingManagerError(self: *@This(), sInstance: ?*ManagedObject, mapping: ?*EntityMapping, manager: ?*MigrationManager, @"error": ?*?*Error, ) objc.BOOL {
        return objc.msgSend(self, "createDestinationInstancesForSourceInstance:entityMapping:manager:error:", objc.BOOL, .{sInstance, mapping, manager, @"error", });
    }

    pub fn endInstanceCreationForEntityMappingManagerError(self: *@This(), mapping: ?*EntityMapping, manager: ?*MigrationManager, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "endInstanceCreationForEntityMapping:manager:error:", objc.BOOL, .{mapping, manager, @"error"});
    }

    pub fn createRelationshipsForDestinationInstanceEntityMappingManagerError(self: *@This(), dInstance: ?*ManagedObject, mapping: ?*EntityMapping, manager: ?*MigrationManager, @"error": ?*?*Error, ) objc.BOOL {
        return objc.msgSend(self, "createRelationshipsForDestinationInstance:entityMapping:manager:error:", objc.BOOL, .{dInstance, mapping, manager, @"error", });
    }

    pub fn endRelationshipCreationForEntityMappingManagerError(self: *@This(), mapping: ?*EntityMapping, manager: ?*MigrationManager, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "endRelationshipCreationForEntityMapping:manager:error:", objc.BOOL, .{mapping, manager, @"error"});
    }

    pub fn performCustomValidationForEntityMappingManagerError(self: *@This(), mapping: ?*EntityMapping, manager: ?*MigrationManager, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "performCustomValidationForEntityMapping:manager:error:", objc.BOOL, .{mapping, manager, @"error"});
    }

    pub fn endEntityMappingManagerError(self: *@This(), mapping: ?*EntityMapping, manager: ?*MigrationManager, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "endEntityMapping:manager:error:", objc.BOOL, .{mapping, manager, @"error"});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSMappingModel?language=objc
pub const MappingModel = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMappingModel", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn mappingModelFromBundlesForSourceModelDestinationModel(self: *@This(), bundles: ?*anyopaque, sourceModel: ?*ManagedObjectModel, destinationModel: ?*ManagedObjectModel) ?*MappingModel {
        return objc.msgSend(self, "mappingModelFromBundles:forSourceModel:destinationModel:", ?*MappingModel, .{bundles, sourceModel, destinationModel});
    }

    pub fn inferredMappingModelForSourceModelDestinationModelError(self: *@This(), sourceModel: ?*ManagedObjectModel, destinationModel: ?*ManagedObjectModel, @"error": ?*?*Error) ?*MappingModel {
        return objc.msgSend(self, "inferredMappingModelForSourceModel:destinationModel:error:", ?*MappingModel, .{sourceModel, destinationModel, @"error"});
    }

    pub fn initWithContentsOfURL(self: *@This(), url: ?*URL) *@This() {
        return objc.msgSend(self, "initWithContentsOfURL:", *@This(), .{url});
    }

    pub fn entityMappings(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "entityMappings", ?*anyopaque, .{});
    }

    pub fn setEntityMappings(self: *@This(), entityMappings: ?*anyopaque) void {
        return objc.msgSend(self, "setEntityMappings:", void, .{entityMappings});
    }

    pub fn entityMappingsByName(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "entityMappingsByName", ?*anyopaque, .{});
    }

};

pub const EntityMappingType = enum(objc.NSUInteger) {
    UndefinedEntityMappingType = 0,
    CustomEntityMappingType = 1,
    AddEntityMappingType = 2,
    RemoveEntityMappingType = 3,
    CopyEntityMappingType = 4,
    TransformEntityMappingType = 5,
};

/// https://developer.apple.com/documentation/CoreData/NSEntityMapping?language=objc
pub const EntityMapping = opaque {
    pub const InternalInfo = objc.ExternalClass("NSEntityMapping", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn name(self: *@This()) ?*String {
        return objc.msgSend(self, "name", ?*String, .{});
    }

    pub fn setName(self: *@This(), name: ?*String) void {
        return objc.msgSend(self, "setName:", void, .{name});
    }

    pub fn mappingType(self: *@This()) EntityMappingType {
        return objc.msgSend(self, "mappingType", EntityMappingType, .{});
    }

    pub fn setMappingType(self: *@This(), mappingType: EntityMappingType) void {
        return objc.msgSend(self, "setMappingType:", void, .{mappingType});
    }

    pub fn sourceEntityName(self: *@This()) ?*String {
        return objc.msgSend(self, "sourceEntityName", ?*String, .{});
    }

    pub fn setSourceEntityName(self: *@This(), sourceEntityName: ?*String) void {
        return objc.msgSend(self, "setSourceEntityName:", void, .{sourceEntityName});
    }

    pub fn sourceEntityVersionHash(self: *@This()) ?*Data {
        return objc.msgSend(self, "sourceEntityVersionHash", ?*Data, .{});
    }

    pub fn setSourceEntityVersionHash(self: *@This(), sourceEntityVersionHash: ?*Data) void {
        return objc.msgSend(self, "setSourceEntityVersionHash:", void, .{sourceEntityVersionHash});
    }

    pub fn destinationEntityName(self: *@This()) ?*String {
        return objc.msgSend(self, "destinationEntityName", ?*String, .{});
    }

    pub fn setDestinationEntityName(self: *@This(), destinationEntityName: ?*String) void {
        return objc.msgSend(self, "setDestinationEntityName:", void, .{destinationEntityName});
    }

    pub fn destinationEntityVersionHash(self: *@This()) ?*Data {
        return objc.msgSend(self, "destinationEntityVersionHash", ?*Data, .{});
    }

    pub fn setDestinationEntityVersionHash(self: *@This(), destinationEntityVersionHash: ?*Data) void {
        return objc.msgSend(self, "setDestinationEntityVersionHash:", void, .{destinationEntityVersionHash});
    }

    pub fn attributeMappings(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "attributeMappings", ?*anyopaque, .{});
    }

    pub fn setAttributeMappings(self: *@This(), attributeMappings: ?*anyopaque) void {
        return objc.msgSend(self, "setAttributeMappings:", void, .{attributeMappings});
    }

    pub fn relationshipMappings(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "relationshipMappings", ?*anyopaque, .{});
    }

    pub fn setRelationshipMappings(self: *@This(), relationshipMappings: ?*anyopaque) void {
        return objc.msgSend(self, "setRelationshipMappings:", void, .{relationshipMappings});
    }

    pub fn sourceExpression(self: *@This()) ?*Expression {
        return objc.msgSend(self, "sourceExpression", ?*Expression, .{});
    }

    pub fn setSourceExpression(self: *@This(), sourceExpression: ?*Expression) void {
        return objc.msgSend(self, "setSourceExpression:", void, .{sourceExpression});
    }

    pub fn userInfo(self: *@This()) ?*Dictionary {
        return objc.msgSend(self, "userInfo", ?*Dictionary, .{});
    }

    pub fn setUserInfo(self: *@This(), userInfo: ?*Dictionary) void {
        return objc.msgSend(self, "setUserInfo:", void, .{userInfo});
    }

    pub fn entityMigrationPolicyClassName(self: *@This()) ?*String {
        return objc.msgSend(self, "entityMigrationPolicyClassName", ?*String, .{});
    }

    pub fn setEntityMigrationPolicyClassName(self: *@This(), entityMigrationPolicyClassName: ?*String) void {
        return objc.msgSend(self, "setEntityMigrationPolicyClassName:", void, .{entityMigrationPolicyClassName});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSPropertyMapping?language=objc
pub const PropertyMapping = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPropertyMapping", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn name(self: *@This()) ?*String {
        return objc.msgSend(self, "name", ?*String, .{});
    }

    pub fn setName(self: *@This(), name: ?*String) void {
        return objc.msgSend(self, "setName:", void, .{name});
    }

    pub fn valueExpression(self: *@This()) ?*Expression {
        return objc.msgSend(self, "valueExpression", ?*Expression, .{});
    }

    pub fn setValueExpression(self: *@This(), valueExpression: ?*Expression) void {
        return objc.msgSend(self, "setValueExpression:", void, .{valueExpression});
    }

    pub fn userInfo(self: *@This()) ?*Dictionary {
        return objc.msgSend(self, "userInfo", ?*Dictionary, .{});
    }

    pub fn setUserInfo(self: *@This(), userInfo: ?*Dictionary) void {
        return objc.msgSend(self, "setUserInfo:", void, .{userInfo});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSMigrationManager?language=objc
pub const MigrationManager = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMigrationManager", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithSourceModelDestinationModel(self: *@This(), sourceModel: ?*ManagedObjectModel, destinationModel: ?*ManagedObjectModel) *@This() {
        return objc.msgSend(self, "initWithSourceModel:destinationModel:", *@This(), .{sourceModel, destinationModel});
    }

    pub fn migrateStoreFromURLTypeOptionsWithMappingModelToDestinationURLDestinationTypeDestinationOptionsError(self: *@This(), sourceURL: ?*URL, sStoreType: ?*String, sOptions: ?*Dictionary, mappings: ?*MappingModel, dURL: ?*URL, dStoreType: ?*String, dOptions: ?*Dictionary, @"error": ?*?*Error, ) objc.BOOL {
        return objc.msgSend(self, "migrateStoreFromURL:type:options:withMappingModel:toDestinationURL:destinationType:destinationOptions:error:", objc.BOOL, .{sourceURL, sStoreType, sOptions, mappings, dURL, dStoreType, dOptions, @"error", });
    }

    pub fn reset(self: *@This()) void {
        return objc.msgSend(self, "reset", void, .{});
    }

    pub fn sourceEntityForEntityMapping(self: *@This(), mEntity: ?*EntityMapping) ?*EntityDescription {
        return objc.msgSend(self, "sourceEntityForEntityMapping:", ?*EntityDescription, .{mEntity});
    }

    pub fn destinationEntityForEntityMapping(self: *@This(), mEntity: ?*EntityMapping) ?*EntityDescription {
        return objc.msgSend(self, "destinationEntityForEntityMapping:", ?*EntityDescription, .{mEntity});
    }

    pub fn associateSourceInstanceWithDestinationInstanceForEntityMapping(self: *@This(), sourceInstance: ?*ManagedObject, destinationInstance: ?*ManagedObject, entityMapping: ?*EntityMapping) void {
        return objc.msgSend(self, "associateSourceInstance:withDestinationInstance:forEntityMapping:", void, .{sourceInstance, destinationInstance, entityMapping});
    }

    pub fn destinationInstancesForEntityMappingNamedSourceInstances(self: *@This(), mappingName: ?*String, sourceInstances: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "destinationInstancesForEntityMappingNamed:sourceInstances:", ?*anyopaque, .{mappingName, sourceInstances});
    }

    pub fn sourceInstancesForEntityMappingNamedDestinationInstances(self: *@This(), mappingName: ?*String, destinationInstances: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "sourceInstancesForEntityMappingNamed:destinationInstances:", ?*anyopaque, .{mappingName, destinationInstances});
    }

    pub fn cancelMigrationWithError(self: *@This(), @"error": ?*Error) void {
        return objc.msgSend(self, "cancelMigrationWithError:", void, .{@"error"});
    }

    pub fn usesStoreSpecificMigrationManager(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "usesStoreSpecificMigrationManager", objc.BOOL, .{});
    }

    pub fn setUsesStoreSpecificMigrationManager(self: *@This(), usesStoreSpecificMigrationManager: objc.BOOL) void {
        return objc.msgSend(self, "setUsesStoreSpecificMigrationManager:", void, .{usesStoreSpecificMigrationManager});
    }

    pub fn mappingModel(self: *@This()) ?*MappingModel {
        return objc.msgSend(self, "mappingModel", ?*MappingModel, .{});
    }

    pub fn sourceModel(self: *@This()) ?*ManagedObjectModel {
        return objc.msgSend(self, "sourceModel", ?*ManagedObjectModel, .{});
    }

    pub fn destinationModel(self: *@This()) ?*ManagedObjectModel {
        return objc.msgSend(self, "destinationModel", ?*ManagedObjectModel, .{});
    }

    pub fn sourceContext(self: *@This()) ?*ManagedObjectContext {
        return objc.msgSend(self, "sourceContext", ?*ManagedObjectContext, .{});
    }

    pub fn destinationContext(self: *@This()) ?*ManagedObjectContext {
        return objc.msgSend(self, "destinationContext", ?*ManagedObjectContext, .{});
    }

    pub fn currentEntityMapping(self: *@This()) ?*EntityMapping {
        return objc.msgSend(self, "currentEntityMapping", ?*EntityMapping, .{});
    }

    pub fn migrationProgress(self: *@This()) f32 {
        return objc.msgSend(self, "migrationProgress", f32, .{});
    }

    pub fn userInfo(self: *@This()) ?*Dictionary {
        return objc.msgSend(self, "userInfo", ?*Dictionary, .{});
    }

    pub fn setUserInfo(self: *@This(), userInfo: ?*Dictionary) void {
        return objc.msgSend(self, "setUserInfo:", void, .{userInfo});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSIncrementalStore?language=objc
pub const IncrementalStore = opaque {
    pub const InternalInfo = objc.ExternalClass("NSIncrementalStore", @This(), PersistentStore, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn loadMetadata(self: *@This(), @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "loadMetadata:", objc.BOOL, .{@"error"});
    }

    pub fn executeRequestWithContextError(self: *@This(), request: ?*PersistentStoreRequest, context: ?*ManagedObjectContext, @"error": ?*?*Error) *objc.Id {
        return objc.msgSend(self, "executeRequest:withContext:error:", *objc.Id, .{request, context, @"error"});
    }

    pub fn newValuesForObjectWithIDWithContextError(self: *@This(), objectID: ?*ManagedObjectID, context: ?*ManagedObjectContext, @"error": ?*?*Error) ?*IncrementalStoreNode {
        return objc.msgSend(self, "newValuesForObjectWithID:withContext:error:", ?*IncrementalStoreNode, .{objectID, context, @"error"});
    }

    pub fn newValueForRelationshipForObjectWithIDWithContextError(self: *@This(), relationship: ?*RelationshipDescription, objectID: ?*ManagedObjectID, context: ?*ManagedObjectContext, @"error": ?*?*Error, ) *objc.Id {
        return objc.msgSend(self, "newValueForRelationship:forObjectWithID:withContext:error:", *objc.Id, .{relationship, objectID, context, @"error", });
    }

    pub fn identifierForNewStoreAtURL(self: *@This(), storeURL: ?*URL) *objc.Id {
        return objc.msgSend(self, "identifierForNewStoreAtURL:", *objc.Id, .{storeURL});
    }

    pub fn obtainPermanentIDsForObjectsError(self: *@This(), array: ?*anyopaque, @"error": ?*?*Error) ?*anyopaque {
        return objc.msgSend(self, "obtainPermanentIDsForObjects:error:", ?*anyopaque, .{array, @"error"});
    }

    pub fn managedObjectContextDidRegisterObjectsWithIDs(self: *@This(), objectIDs: ?*anyopaque) void {
        return objc.msgSend(self, "managedObjectContextDidRegisterObjectsWithIDs:", void, .{objectIDs});
    }

    pub fn managedObjectContextDidUnregisterObjectsWithIDs(self: *@This(), objectIDs: ?*anyopaque) void {
        return objc.msgSend(self, "managedObjectContextDidUnregisterObjectsWithIDs:", void, .{objectIDs});
    }

    pub fn newObjectIDForEntityReferenceObject(self: *@This(), entity: ?*EntityDescription, data: *objc.Id) ?*ManagedObjectID {
        return objc.msgSend(self, "newObjectIDForEntity:referenceObject:", ?*ManagedObjectID, .{entity, data});
    }

    pub fn referenceObjectForObjectID(self: *@This(), objectID: ?*ManagedObjectID) *objc.Id {
        return objc.msgSend(self, "referenceObjectForObjectID:", *objc.Id, .{objectID});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSIncrementalStoreNode?language=objc
pub const IncrementalStoreNode = opaque {
    pub const InternalInfo = objc.ExternalClass("NSIncrementalStoreNode", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithObjectIDWithValuesVersion(self: *@This(), objectID: ?*ManagedObjectID, values: ?*anyopaque, version: objc.uint64_t) *@This() {
        return objc.msgSend(self, "initWithObjectID:withValues:version:", *@This(), .{objectID, values, version});
    }

    pub fn updateWithValuesVersion(self: *@This(), values: ?*anyopaque, version: objc.uint64_t) void {
        return objc.msgSend(self, "updateWithValues:version:", void, .{values, version});
    }

    pub fn valueForPropertyDescription(self: *@This(), prop: ?*PropertyDescription) *objc.Id {
        return objc.msgSend(self, "valueForPropertyDescription:", *objc.Id, .{prop});
    }

    pub fn objectID(self: *@This()) ?*ManagedObjectID {
        return objc.msgSend(self, "objectID", ?*ManagedObjectID, .{});
    }

    pub fn version(self: *@This()) objc.uint64_t {
        return objc.msgSend(self, "version", objc.uint64_t, .{});
    }

};

pub const BatchInsertRequestResultType = enum(objc.NSUInteger) {
    StatusOnly = 0,
    ObjectIDs = 1,
    Count = 2,
};

pub const BatchUpdateRequestResultType = enum(objc.NSUInteger) {
    StatusOnlyResultType = 0,
    UpdatedObjectIDsResultType = 1,
    UpdatedObjectsCountResultType = 2,
};

pub const BatchDeleteRequestResultType = enum(objc.NSUInteger) {
    ResultTypeStatusOnly = 0,
    ResultTypeObjectIDs = 1,
    ResultTypeCount = 2,
};

pub const PersistentHistoryResultType = enum(objc.NSInteger) {
    StatusOnly = 0,
    ObjectIDs = 1,
    Count = 2,
    TransactionsOnly = 3,
    ChangesOnly = 4,
    TransactionsAndChanges = 5,
};

/// https://developer.apple.com/documentation/CoreData/NSPersistentStoreResult?language=objc
pub const PersistentStoreResult = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPersistentStoreResult", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;
};

/// https://developer.apple.com/documentation/CoreData/NSPersistentStoreAsynchronousResult?language=objc
pub const PersistentStoreAsynchronousResult = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPersistentStoreAsynchronousResult", @This(), PersistentStoreResult, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn cancel(self: *@This()) void {
        return objc.msgSend(self, "cancel", void, .{});
    }

    pub fn managedObjectContext(self: *@This()) ?*ManagedObjectContext {
        return objc.msgSend(self, "managedObjectContext", ?*ManagedObjectContext, .{});
    }

    pub fn operationError(self: *@This()) ?*Error {
        return objc.msgSend(self, "operationError", ?*Error, .{});
    }

    pub fn progress(self: *@This()) ?*Progress {
        return objc.msgSend(self, "progress", ?*Progress, .{});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSAsynchronousFetchResult?language=objc
pub const AsynchronousFetchResult = opaque {
    pub const InternalInfo = objc.ExternalClass("NSAsynchronousFetchResult", @This(), PersistentStoreAsynchronousResult, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn fetchRequest(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "fetchRequest", ?*anyopaque, .{});
    }

    pub fn finalResult(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "finalResult", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSBatchInsertResult?language=objc
pub const BatchInsertResult = opaque {
    pub const InternalInfo = objc.ExternalClass("NSBatchInsertResult", @This(), PersistentStoreResult, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn result(self: *@This()) *objc.Id {
        return objc.msgSend(self, "result", *objc.Id, .{});
    }

    pub fn resultType(self: *@This()) BatchInsertRequestResultType {
        return objc.msgSend(self, "resultType", BatchInsertRequestResultType, .{});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSBatchUpdateResult?language=objc
pub const BatchUpdateResult = opaque {
    pub const InternalInfo = objc.ExternalClass("NSBatchUpdateResult", @This(), PersistentStoreResult, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn result(self: *@This()) *objc.Id {
        return objc.msgSend(self, "result", *objc.Id, .{});
    }

    pub fn resultType(self: *@This()) BatchUpdateRequestResultType {
        return objc.msgSend(self, "resultType", BatchUpdateRequestResultType, .{});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSBatchDeleteResult?language=objc
pub const BatchDeleteResult = opaque {
    pub const InternalInfo = objc.ExternalClass("NSBatchDeleteResult", @This(), PersistentStoreResult, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn result(self: *@This()) *objc.Id {
        return objc.msgSend(self, "result", *objc.Id, .{});
    }

    pub fn resultType(self: *@This()) BatchDeleteRequestResultType {
        return objc.msgSend(self, "resultType", BatchDeleteRequestResultType, .{});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSPersistentHistoryResult?language=objc
pub const PersistentHistoryResult = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPersistentHistoryResult", @This(), PersistentStoreResult, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn result(self: *@This()) *objc.Id {
        return objc.msgSend(self, "result", *objc.Id, .{});
    }

    pub fn resultType(self: *@This()) PersistentHistoryResultType {
        return objc.msgSend(self, "resultType", PersistentHistoryResultType, .{});
    }

};

pub const PersistentCloudKitContainerEventResultType = enum(objc.NSInteger) {
    Events = 0,
    CountEvents = 1,
};

/// https://developer.apple.com/documentation/CoreData/NSPersistentCloudKitContainerEventResult?language=objc
pub const PersistentCloudKitContainerEventResult = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPersistentCloudKitContainerEventResult", @This(), PersistentStoreResult, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn result(self: *@This()) *objc.Id {
        return objc.msgSend(self, "result", *objc.Id, .{});
    }

    pub fn resultType(self: *@This()) PersistentCloudKitContainerEventResultType {
        return objc.msgSend(self, "resultType", PersistentCloudKitContainerEventResultType, .{});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSSaveChangesRequest?language=objc
pub const SaveChangesRequest = opaque {
    pub const InternalInfo = objc.ExternalClass("NSSaveChangesRequest", @This(), PersistentStoreRequest, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithInsertedObjectsUpdatedObjectsDeletedObjectsLockedObjects(self: *@This(), insertedObjects: ?*anyopaque, updatedObjects: ?*anyopaque, deletedObjects: ?*anyopaque, lockedObjects: ?*anyopaque, ) *@This() {
        return objc.msgSend(self, "initWithInsertedObjects:updatedObjects:deletedObjects:lockedObjects:", *@This(), .{insertedObjects, updatedObjects, deletedObjects, lockedObjects, });
    }

    pub fn insertedObjects(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "insertedObjects", ?*anyopaque, .{});
    }

    pub fn updatedObjects(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "updatedObjects", ?*anyopaque, .{});
    }

    pub fn deletedObjects(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "deletedObjects", ?*anyopaque, .{});
    }

    pub fn lockedObjects(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "lockedObjects", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSBatchUpdateRequest?language=objc
pub const BatchUpdateRequest = opaque {
    pub const InternalInfo = objc.ExternalClass("NSBatchUpdateRequest", @This(), PersistentStoreRequest, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn batchUpdateRequestWithEntityName(self: *@This(), entityName: ?*String) *@This() {
        return objc.msgSend(self, "batchUpdateRequestWithEntityName:", *@This(), .{entityName});
    }

    pub fn initWithEntityName(self: *@This(), entityName: ?*String) *@This() {
        return objc.msgSend(self, "initWithEntityName:", *@This(), .{entityName});
    }

    pub fn initWithEntity(self: *@This(), entity: ?*EntityDescription) *@This() {
        return objc.msgSend(self, "initWithEntity:", *@This(), .{entity});
    }

    pub fn entityName(self: *@This()) ?*String {
        return objc.msgSend(self, "entityName", ?*String, .{});
    }

    pub fn entity(self: *@This()) ?*EntityDescription {
        return objc.msgSend(self, "entity", ?*EntityDescription, .{});
    }

    pub fn predicate(self: *@This()) ?*Predicate {
        return objc.msgSend(self, "predicate", ?*Predicate, .{});
    }

    pub fn setPredicate(self: *@This(), predicate: ?*Predicate) void {
        return objc.msgSend(self, "setPredicate:", void, .{predicate});
    }

    pub fn includesSubentities(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "includesSubentities", objc.BOOL, .{});
    }

    pub fn setIncludesSubentities(self: *@This(), includesSubentities: objc.BOOL) void {
        return objc.msgSend(self, "setIncludesSubentities:", void, .{includesSubentities});
    }

    pub fn resultType(self: *@This()) BatchUpdateRequestResultType {
        return objc.msgSend(self, "resultType", BatchUpdateRequestResultType, .{});
    }

    pub fn setResultType(self: *@This(), resultType: BatchUpdateRequestResultType) void {
        return objc.msgSend(self, "setResultType:", void, .{resultType});
    }

    pub fn propertiesToUpdate(self: *@This()) ?*Dictionary {
        return objc.msgSend(self, "propertiesToUpdate", ?*Dictionary, .{});
    }

    pub fn setPropertiesToUpdate(self: *@This(), propertiesToUpdate: ?*Dictionary) void {
        return objc.msgSend(self, "setPropertiesToUpdate:", void, .{propertiesToUpdate});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSBatchDeleteRequest?language=objc
pub const BatchDeleteRequest = opaque {
    pub const InternalInfo = objc.ExternalClass("NSBatchDeleteRequest", @This(), PersistentStoreRequest, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithFetchRequest(self: *@This(), fetch: ?*FetchRequest) *@This() {
        return objc.msgSend(self, "initWithFetchRequest:", *@This(), .{fetch});
    }

    pub fn initWithObjectIDs(self: *@This(), objects: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithObjectIDs:", *@This(), .{objects});
    }

    pub fn resultType(self: *@This()) BatchDeleteRequestResultType {
        return objc.msgSend(self, "resultType", BatchDeleteRequestResultType, .{});
    }

    pub fn setResultType(self: *@This(), resultType: BatchDeleteRequestResultType) void {
        return objc.msgSend(self, "setResultType:", void, .{resultType});
    }

    pub fn fetchRequest(self: *@This()) ?*FetchRequest {
        return objc.msgSend(self, "fetchRequest", ?*FetchRequest, .{});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSBatchInsertRequest?language=objc
pub const BatchInsertRequest = opaque {
    pub const InternalInfo = objc.ExternalClass("NSBatchInsertRequest", @This(), PersistentStoreRequest, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn batchInsertRequestWithEntityNameObjects(self: *@This(), entityName: ?*String, dictionaries: ?*anyopaque) *@This() {
        return objc.msgSend(self, "batchInsertRequestWithEntityName:objects:", *@This(), .{entityName, dictionaries});
    }

    pub fn batchInsertRequestWithEntityNameDictionaryHandler(self: *@This(), entityName: ?*String, handler: *const fn(?*anyopaque) callconv(.C) objc.BOOL) *@This() {
        return objc.msgSend(self, "batchInsertRequestWithEntityName:dictionaryHandler:", *@This(), .{entityName, handler});
    }

    pub fn batchInsertRequestWithEntityNameManagedObjectHandler(self: *@This(), entityName: ?*String, handler: *const fn(?*ManagedObject) callconv(.C) objc.BOOL) *@This() {
        return objc.msgSend(self, "batchInsertRequestWithEntityName:managedObjectHandler:", *@This(), .{entityName, handler});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithEntityNameObjects(self: *@This(), entityName: ?*String, dictionaries: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithEntityName:objects:", *@This(), .{entityName, dictionaries});
    }

    pub fn initWithEntityObjects(self: *@This(), entity: ?*EntityDescription, dictionaries: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithEntity:objects:", *@This(), .{entity, dictionaries});
    }

    pub fn initWithEntityDictionaryHandler(self: *@This(), entity: ?*EntityDescription, handler: *const fn(?*anyopaque) callconv(.C) objc.BOOL) *@This() {
        return objc.msgSend(self, "initWithEntity:dictionaryHandler:", *@This(), .{entity, handler});
    }

    pub fn initWithEntityManagedObjectHandler(self: *@This(), entity: ?*EntityDescription, handler: *const fn(?*ManagedObject) callconv(.C) objc.BOOL) *@This() {
        return objc.msgSend(self, "initWithEntity:managedObjectHandler:", *@This(), .{entity, handler});
    }

    pub fn initWithEntityNameDictionaryHandler(self: *@This(), entityName: ?*String, handler: *const fn(?*anyopaque) callconv(.C) objc.BOOL) *@This() {
        return objc.msgSend(self, "initWithEntityName:dictionaryHandler:", *@This(), .{entityName, handler});
    }

    pub fn initWithEntityNameManagedObjectHandler(self: *@This(), entityName: ?*String, handler: *const fn(?*ManagedObject) callconv(.C) objc.BOOL) *@This() {
        return objc.msgSend(self, "initWithEntityName:managedObjectHandler:", *@This(), .{entityName, handler});
    }

    pub fn entityName(self: *@This()) ?*String {
        return objc.msgSend(self, "entityName", ?*String, .{});
    }

    pub fn entity(self: *@This()) ?*EntityDescription {
        return objc.msgSend(self, "entity", ?*EntityDescription, .{});
    }

    pub fn objectsToInsert(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "objectsToInsert", ?*anyopaque, .{});
    }

    pub fn setObjectsToInsert(self: *@This(), objectsToInsert: ?*anyopaque) void {
        return objc.msgSend(self, "setObjectsToInsert:", void, .{objectsToInsert});
    }

    pub fn dictionaryHandler(self: *@This()) *const fn(?*anyopaque) callconv(.C) objc.BOOL {
        return objc.msgSend(self, "dictionaryHandler", *const fn(?*anyopaque) callconv(.C) objc.BOOL, .{});
    }

    pub fn setDictionaryHandler(self: *@This(), dictionaryHandler: *const fn(?*anyopaque) callconv(.C) objc.BOOL) void {
        return objc.msgSend(self, "setDictionaryHandler:", void, .{dictionaryHandler});
    }

    pub fn managedObjectHandler(self: *@This()) *const fn(?*ManagedObject) callconv(.C) objc.BOOL {
        return objc.msgSend(self, "managedObjectHandler", *const fn(?*ManagedObject) callconv(.C) objc.BOOL, .{});
    }

    pub fn setManagedObjectHandler(self: *@This(), managedObjectHandler: *const fn(?*ManagedObject) callconv(.C) objc.BOOL) void {
        return objc.msgSend(self, "setManagedObjectHandler:", void, .{managedObjectHandler});
    }

    pub fn resultType(self: *@This()) BatchInsertRequestResultType {
        return objc.msgSend(self, "resultType", BatchInsertRequestResultType, .{});
    }

    pub fn setResultType(self: *@This(), resultType: BatchInsertRequestResultType) void {
        return objc.msgSend(self, "setResultType:", void, .{resultType});
    }

};

pub const MergePolicyType = enum(objc.NSUInteger) {
    ErrorMergePolicyType = 0,
    ByPropertyStoreTrumpMergePolicyType = 1,
    ByPropertyObjectTrumpMergePolicyType = 2,
    OverwriteMergePolicyType = 3,
    RollbackMergePolicyType = 4,
};

/// https://developer.apple.com/documentation/CoreData/NSMergeConflict?language=objc
pub const MergeConflict = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMergeConflict", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithSourceNewVersionOldVersionCachedSnapshotPersistedSnapshot(self: *@This(), srcObject: ?*ManagedObject, newvers: objc.NSUInteger, oldvers: objc.NSUInteger, cachesnap: ?*anyopaque, persnap: ?*anyopaque, ) *@This() {
        return objc.msgSend(self, "initWithSource:newVersion:oldVersion:cachedSnapshot:persistedSnapshot:", *@This(), .{srcObject, newvers, oldvers, cachesnap, persnap, });
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn sourceObject(self: *@This()) ?*ManagedObject {
        return objc.msgSend(self, "sourceObject", ?*ManagedObject, .{});
    }

    pub fn objectSnapshot(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "objectSnapshot", ?*anyopaque, .{});
    }

    pub fn cachedSnapshot(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "cachedSnapshot", ?*anyopaque, .{});
    }

    pub fn persistedSnapshot(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "persistedSnapshot", ?*anyopaque, .{});
    }

    pub fn newVersionNumber(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "newVersionNumber", objc.NSUInteger, .{});
    }

    pub fn oldVersionNumber(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "oldVersionNumber", objc.NSUInteger, .{});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSConstraintConflict?language=objc
pub const ConstraintConflict = opaque {
    pub const InternalInfo = objc.ExternalClass("NSConstraintConflict", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithConstraintDatabaseObjectDatabaseSnapshotConflictingObjectsConflictingSnapshots(self: *@This(), contraint: ?*anyopaque, databaseObject: ?*ManagedObject, databaseSnapshot: ?*Dictionary, conflictingObjects: ?*anyopaque, conflictingSnapshots: ?*Array, ) *@This() {
        return objc.msgSend(self, "initWithConstraint:databaseObject:databaseSnapshot:conflictingObjects:conflictingSnapshots:", *@This(), .{contraint, databaseObject, databaseSnapshot, conflictingObjects, conflictingSnapshots, });
    }

    pub fn constraint(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "constraint", ?*anyopaque, .{});
    }

    pub fn constraintValues(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "constraintValues", ?*anyopaque, .{});
    }

    pub fn databaseObject(self: *@This()) ?*ManagedObject {
        return objc.msgSend(self, "databaseObject", ?*ManagedObject, .{});
    }

    pub fn databaseSnapshot(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "databaseSnapshot", ?*anyopaque, .{});
    }

    pub fn conflictingObjects(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "conflictingObjects", ?*anyopaque, .{});
    }

    pub fn conflictingSnapshots(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "conflictingSnapshots", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSMergePolicy?language=objc
pub const MergePolicy = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMergePolicy", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithMergeType(self: *@This(), ty: MergePolicyType) *objc.Id {
        return objc.msgSend(self, "initWithMergeType:", *objc.Id, .{ty});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn resolveConflictsError(self: *@This(), list: ?*Array, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "resolveConflicts:error:", objc.BOOL, .{list, @"error"});
    }

    pub fn resolveOptimisticLockingVersionConflictsError(self: *@This(), list: ?*anyopaque, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "resolveOptimisticLockingVersionConflicts:error:", objc.BOOL, .{list, @"error"});
    }

    pub fn resolveConstraintConflictsError(self: *@This(), list: ?*anyopaque, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "resolveConstraintConflicts:error:", objc.BOOL, .{list, @"error"});
    }

    pub fn errorMergePolicy(self: *@This()) ?*MergePolicy {
        return objc.msgSend(self, "errorMergePolicy", ?*MergePolicy, .{});
    }

    pub fn rollbackMergePolicy(self: *@This()) ?*MergePolicy {
        return objc.msgSend(self, "rollbackMergePolicy", ?*MergePolicy, .{});
    }

    pub fn overwriteMergePolicy(self: *@This()) ?*MergePolicy {
        return objc.msgSend(self, "overwriteMergePolicy", ?*MergePolicy, .{});
    }

    pub fn mergeByPropertyObjectTrumpMergePolicy(self: *@This()) ?*MergePolicy {
        return objc.msgSend(self, "mergeByPropertyObjectTrumpMergePolicy", ?*MergePolicy, .{});
    }

    pub fn mergeByPropertyStoreTrumpMergePolicy(self: *@This()) ?*MergePolicy {
        return objc.msgSend(self, "mergeByPropertyStoreTrumpMergePolicy", ?*MergePolicy, .{});
    }

    pub fn mergeType(self: *@This()) MergePolicyType {
        return objc.msgSend(self, "mergeType", MergePolicyType, .{});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSFetchedResultsController?language=objc
pub const FetchedResultsController = opaque {
    pub const InternalInfo = objc.ExternalClass("NSFetchedResultsController", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithFetchRequestManagedObjectContextSectionNameKeyPathCacheName(self: *@This(), fetchRequest: ?*anyopaque, context: ?*ManagedObjectContext, sectionNameKeyPath: ?*String, name: ?*String, ) *@This() {
        return objc.msgSend(self, "initWithFetchRequest:managedObjectContext:sectionNameKeyPath:cacheName:", *@This(), .{fetchRequest, context, sectionNameKeyPath, name, });
    }

    pub fn performFetch(self: *@This(), @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "performFetch:", objc.BOOL, .{@"error"});
    }

    pub fn deleteCacheWithName(self: *@This(), name: ?*String) void {
        return objc.msgSend(self, "deleteCacheWithName:", void, .{name});
    }

    pub fn objectAtIndexPath(self: *@This(), indexPath: ?*foundation.IndexPath) void {
        return objc.msgSend(self, "objectAtIndexPath:", void, .{indexPath});
    }

    pub fn indexPathForObject(self: *@This(), object: void) ?*foundation.IndexPath {
        return objc.msgSend(self, "indexPathForObject:", ?*foundation.IndexPath, .{object});
    }

    pub fn sectionIndexTitleForSectionName(self: *@This(), sectionName: ?*String) ?*String {
        return objc.msgSend(self, "sectionIndexTitleForSectionName:", ?*String, .{sectionName});
    }

    pub fn sectionForSectionIndexTitleAtIndex(self: *@This(), title: ?*String, sectionIndex: objc.NSInteger) objc.NSInteger {
        return objc.msgSend(self, "sectionForSectionIndexTitle:atIndex:", objc.NSInteger, .{title, sectionIndex});
    }

    pub fn fetchRequest(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "fetchRequest", ?*anyopaque, .{});
    }

    pub fn managedObjectContext(self: *@This()) ?*ManagedObjectContext {
        return objc.msgSend(self, "managedObjectContext", ?*ManagedObjectContext, .{});
    }

    pub fn sectionNameKeyPath(self: *@This()) ?*String {
        return objc.msgSend(self, "sectionNameKeyPath", ?*String, .{});
    }

    pub fn cacheName(self: *@This()) ?*String {
        return objc.msgSend(self, "cacheName", ?*String, .{});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn fetchedObjects(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "fetchedObjects", ?*anyopaque, .{});
    }

    pub fn sectionIndexTitles(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "sectionIndexTitles", ?*anyopaque, .{});
    }

    pub fn sections(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "sections", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSFetchedResultsSectionInfo?language=objc
pub const FetchedResultsSectionInfo = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn name(self: *@This()) ?*String {
        return objc.msgSend(self, "name", ?*String, .{});
    }

    pub fn indexTitle(self: *@This()) ?*String {
        return objc.msgSend(self, "indexTitle", ?*String, .{});
    }

    pub fn numberOfObjects(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "numberOfObjects", objc.NSUInteger, .{});
    }

    pub fn objects(self: *@This()) ?*Array {
        return objc.msgSend(self, "objects", ?*Array, .{});
    }

};

pub const FetchedResultsChangeType = enum(objc.NSUInteger) {
    Insert = 1,
    Delete = 2,
    Move = 3,
    Update = 4,
};

/// https://developer.apple.com/documentation/CoreData/NSFetchedResultsControllerDelegate?language=objc
pub const FetchedResultsControllerDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn controllerDidChangeContentWithSnapshot(self: *@This(), controller: ?*FetchedResultsController, snapshot: ?*anyopaque) void {
        return objc.msgSend(self, "controller:didChangeContentWithSnapshot:", void, .{controller, snapshot});
    }

    pub fn controllerDidChangeContentWithDifference(self: *@This(), controller: ?*FetchedResultsController, diff: ?*anyopaque) void {
        return objc.msgSend(self, "controller:didChangeContentWithDifference:", void, .{controller, diff});
    }

    pub fn controllerDidChangeObjectAtIndexPathForChangeTypeNewIndexPath(self: *@This(), controller: ?*FetchedResultsController, anObject: *objc.Id, indexPath: ?*IndexPath, @"type": FetchedResultsChangeType, newIndexPath: ?*IndexPath, ) void {
        return objc.msgSend(self, "controller:didChangeObject:atIndexPath:forChangeType:newIndexPath:", void, .{controller, anObject, indexPath, @"type", newIndexPath, });
    }

    pub fn controllerDidChangeSectionAtIndexForChangeType(self: *@This(), controller: ?*FetchedResultsController, sectionInfo: ?*anyopaque, sectionIndex: objc.NSUInteger, @"type": FetchedResultsChangeType, ) void {
        return objc.msgSend(self, "controller:didChangeSection:atIndex:forChangeType:", void, .{controller, sectionInfo, sectionIndex, @"type", });
    }

    pub fn controllerWillChangeContent(self: *@This(), controller: ?*FetchedResultsController) void {
        return objc.msgSend(self, "controllerWillChangeContent:", void, .{controller});
    }

    pub fn controllerDidChangeContent(self: *@This(), controller: ?*FetchedResultsController) void {
        return objc.msgSend(self, "controllerDidChangeContent:", void, .{controller});
    }

    pub fn controllerSectionIndexTitleForSectionName(self: *@This(), controller: ?*FetchedResultsController, sectionName: ?*String) ?*String {
        return objc.msgSend(self, "controller:sectionIndexTitleForSectionName:", ?*String, .{controller, sectionName});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSQueryGenerationToken?language=objc
pub const QueryGenerationToken = opaque {
    pub const InternalInfo = objc.ExternalClass("NSQueryGenerationToken", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn currentQueryGenerationToken(self: *@This()) ?*QueryGenerationToken {
        return objc.msgSend(self, "currentQueryGenerationToken", ?*QueryGenerationToken, .{});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSPersistentStoreDescription?language=objc
pub const PersistentStoreDescription = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPersistentStoreDescription", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn persistentStoreDescriptionWithURL(self: *@This(), URL: ?*URL) *@This() {
        return objc.msgSend(self, "persistentStoreDescriptionWithURL:", *@This(), .{URL});
    }

    pub fn setOptionForKey(self: *@This(), option: ?*objc.NSObject, key: ?*String) void {
        return objc.msgSend(self, "setOption:forKey:", void, .{option, key});
    }

    pub fn setValueForPragmaNamed(self: *@This(), value: ?*objc.NSObject, name: ?*String) void {
        return objc.msgSend(self, "setValue:forPragmaNamed:", void, .{value, name});
    }

    pub fn initWithURL(self: *@This(), url: ?*URL) *@This() {
        return objc.msgSend(self, "initWithURL:", *@This(), .{url});
    }

    pub fn @"type"(self: *@This()) ?*String {
        return objc.msgSend(self, "type", ?*String, .{});
    }

    pub fn setType(self: *@This(), @"type": ?*String) void {
        return objc.msgSend(self, "setType:", void, .{@"type"});
    }

    pub fn configuration(self: *@This()) ?*String {
        return objc.msgSend(self, "configuration", ?*String, .{});
    }

    pub fn setConfiguration(self: *@This(), configuration: ?*String) void {
        return objc.msgSend(self, "setConfiguration:", void, .{configuration});
    }

    pub fn URL(self: *@This()) ?*URL {
        return objc.msgSend(self, "URL", ?*URL, .{});
    }

    pub fn setURL(self: *@This(), URL: ?*URL) void {
        return objc.msgSend(self, "setURL:", void, .{URL});
    }

    pub fn options(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "options", ?*anyopaque, .{});
    }

    pub fn isReadOnly(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isReadOnly", objc.BOOL, .{});
    }

    pub fn setReadOnly(self: *@This(), readOnly: objc.BOOL) void {
        return objc.msgSend(self, "setReadOnly:", void, .{readOnly});
    }

    pub fn timeout(self: *@This()) foundation.TimeInterval {
        return objc.msgSend(self, "timeout", foundation.TimeInterval, .{});
    }

    pub fn setTimeout(self: *@This(), timeout: foundation.TimeInterval) void {
        return objc.msgSend(self, "setTimeout:", void, .{timeout});
    }

    pub fn sqlitePragmas(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "sqlitePragmas", ?*anyopaque, .{});
    }

    pub fn shouldAddStoreAsynchronously(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "shouldAddStoreAsynchronously", objc.BOOL, .{});
    }

    pub fn setShouldAddStoreAsynchronously(self: *@This(), shouldAddStoreAsynchronously: objc.BOOL) void {
        return objc.msgSend(self, "setShouldAddStoreAsynchronously:", void, .{shouldAddStoreAsynchronously});
    }

    pub fn shouldMigrateStoreAutomatically(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "shouldMigrateStoreAutomatically", objc.BOOL, .{});
    }

    pub fn setShouldMigrateStoreAutomatically(self: *@This(), shouldMigrateStoreAutomatically: objc.BOOL) void {
        return objc.msgSend(self, "setShouldMigrateStoreAutomatically:", void, .{shouldMigrateStoreAutomatically});
    }

    pub fn shouldInferMappingModelAutomatically(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "shouldInferMappingModelAutomatically", objc.BOOL, .{});
    }

    pub fn setShouldInferMappingModelAutomatically(self: *@This(), shouldInferMappingModelAutomatically: objc.BOOL) void {
        return objc.msgSend(self, "setShouldInferMappingModelAutomatically:", void, .{shouldInferMappingModelAutomatically});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSPersistentContainer?language=objc
pub const PersistentContainer = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPersistentContainer", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn persistentContainerWithName(self: *@This(), name: ?*String) *@This() {
        return objc.msgSend(self, "persistentContainerWithName:", *@This(), .{name});
    }

    pub fn persistentContainerWithNameManagedObjectModel(self: *@This(), name: ?*String, model: ?*ManagedObjectModel) *@This() {
        return objc.msgSend(self, "persistentContainerWithName:managedObjectModel:", *@This(), .{name, model});
    }

    pub fn defaultDirectoryURL(self: *@This()) ?*URL {
        return objc.msgSend(self, "defaultDirectoryURL", ?*URL, .{});
    }

    pub fn initWithName(self: *@This(), name: ?*String) *@This() {
        return objc.msgSend(self, "initWithName:", *@This(), .{name});
    }

    pub fn initWithNameManagedObjectModel(self: *@This(), name: ?*String, model: ?*ManagedObjectModel) *@This() {
        return objc.msgSend(self, "initWithName:managedObjectModel:", *@This(), .{name, model});
    }

    pub fn loadPersistentStoresWithCompletionHandler(self: *@This(), block: *const fn(?*PersistentStoreDescription, ?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "loadPersistentStoresWithCompletionHandler:", void, .{block});
    }

    pub fn newBackgroundContext(self: *@This()) ?*ManagedObjectContext {
        return objc.msgSend(self, "newBackgroundContext", ?*ManagedObjectContext, .{});
    }

    pub fn performBackgroundTask(self: *@This(), block: *const fn(?*ManagedObjectContext) callconv(.C) void) void {
        return objc.msgSend(self, "performBackgroundTask:", void, .{block});
    }

    pub fn name(self: *@This()) ?*String {
        return objc.msgSend(self, "name", ?*String, .{});
    }

    pub fn viewContext(self: *@This()) ?*ManagedObjectContext {
        return objc.msgSend(self, "viewContext", ?*ManagedObjectContext, .{});
    }

    pub fn managedObjectModel(self: *@This()) ?*ManagedObjectModel {
        return objc.msgSend(self, "managedObjectModel", ?*ManagedObjectModel, .{});
    }

    pub fn persistentStoreCoordinator(self: *@This()) ?*PersistentStoreCoordinator {
        return objc.msgSend(self, "persistentStoreCoordinator", ?*PersistentStoreCoordinator, .{});
    }

    pub fn persistentStoreDescriptions(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "persistentStoreDescriptions", ?*anyopaque, .{});
    }

    pub fn setPersistentStoreDescriptions(self: *@This(), persistentStoreDescriptions: ?*anyopaque) void {
        return objc.msgSend(self, "setPersistentStoreDescriptions:", void, .{persistentStoreDescriptions});
    }

};

pub const PersistentHistoryChangeType = enum(objc.NSInteger) {
    Insert = 0,
    Update = 1,
    Delete = 2,
};

/// https://developer.apple.com/documentation/CoreData/NSPersistentHistoryChange?language=objc
pub const PersistentHistoryChange = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPersistentHistoryChange", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn entityDescriptionWithContext(self: *@This(), context: ?*ManagedObjectContext) ?*EntityDescription {
        return objc.msgSend(self, "entityDescriptionWithContext:", ?*EntityDescription, .{context});
    }

    pub fn entityDescription(self: *@This()) ?*EntityDescription {
        return objc.msgSend(self, "entityDescription", ?*EntityDescription, .{});
    }

    pub fn fetchRequest(self: *@This()) ?*FetchRequest {
        return objc.msgSend(self, "fetchRequest", ?*FetchRequest, .{});
    }

    pub fn changeID(self: *@This()) objc.int64_t {
        return objc.msgSend(self, "changeID", objc.int64_t, .{});
    }

    pub fn changedObjectID(self: *@This()) ?*ManagedObjectID {
        return objc.msgSend(self, "changedObjectID", ?*ManagedObjectID, .{});
    }

    pub fn changeType(self: *@This()) PersistentHistoryChangeType {
        return objc.msgSend(self, "changeType", PersistentHistoryChangeType, .{});
    }

    pub fn tombstone(self: *@This()) ?*Dictionary {
        return objc.msgSend(self, "tombstone", ?*Dictionary, .{});
    }

    pub fn transaction(self: *@This()) ?*PersistentHistoryTransaction {
        return objc.msgSend(self, "transaction", ?*PersistentHistoryTransaction, .{});
    }

    pub fn updatedProperties(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "updatedProperties", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSPersistentHistoryChangeRequest?language=objc
pub const PersistentHistoryChangeRequest = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPersistentHistoryChangeRequest", @This(), PersistentStoreRequest, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn fetchHistoryAfterDate(self: *@This(), date: ?*foundation.Date) *@This() {
        return objc.msgSend(self, "fetchHistoryAfterDate:", *@This(), .{date});
    }

    pub fn fetchHistoryAfterToken(self: *@This(), token: ?*PersistentHistoryToken) *@This() {
        return objc.msgSend(self, "fetchHistoryAfterToken:", *@This(), .{token});
    }

    pub fn fetchHistoryAfterTransaction(self: *@This(), transaction: ?*PersistentHistoryTransaction) *@This() {
        return objc.msgSend(self, "fetchHistoryAfterTransaction:", *@This(), .{transaction});
    }

    pub fn fetchHistoryWithFetchRequest(self: *@This(), fetchRequest: ?*FetchRequest) *@This() {
        return objc.msgSend(self, "fetchHistoryWithFetchRequest:", *@This(), .{fetchRequest});
    }

    pub fn deleteHistoryBeforeDate(self: *@This(), date: ?*foundation.Date) *@This() {
        return objc.msgSend(self, "deleteHistoryBeforeDate:", *@This(), .{date});
    }

    pub fn deleteHistoryBeforeToken(self: *@This(), token: ?*PersistentHistoryToken) *@This() {
        return objc.msgSend(self, "deleteHistoryBeforeToken:", *@This(), .{token});
    }

    pub fn deleteHistoryBeforeTransaction(self: *@This(), transaction: ?*PersistentHistoryTransaction) *@This() {
        return objc.msgSend(self, "deleteHistoryBeforeTransaction:", *@This(), .{transaction});
    }

    pub fn resultType(self: *@This()) PersistentHistoryResultType {
        return objc.msgSend(self, "resultType", PersistentHistoryResultType, .{});
    }

    pub fn setResultType(self: *@This(), resultType: PersistentHistoryResultType) void {
        return objc.msgSend(self, "setResultType:", void, .{resultType});
    }

    pub fn token(self: *@This()) ?*PersistentHistoryToken {
        return objc.msgSend(self, "token", ?*PersistentHistoryToken, .{});
    }

    pub fn fetchRequest(self: *@This()) ?*FetchRequest {
        return objc.msgSend(self, "fetchRequest", ?*FetchRequest, .{});
    }

    pub fn setFetchRequest(self: *@This(), fetchRequest: ?*FetchRequest) void {
        return objc.msgSend(self, "setFetchRequest:", void, .{fetchRequest});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSPersistentHistoryToken?language=objc
pub const PersistentHistoryToken = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPersistentHistoryToken", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;
};

/// https://developer.apple.com/documentation/CoreData/NSPersistentHistoryTransaction?language=objc
pub const PersistentHistoryTransaction = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPersistentHistoryTransaction", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn entityDescriptionWithContext(self: *@This(), context: ?*ManagedObjectContext) ?*EntityDescription {
        return objc.msgSend(self, "entityDescriptionWithContext:", ?*EntityDescription, .{context});
    }

    pub fn objectIDNotification(self: *@This()) ?*Notification {
        return objc.msgSend(self, "objectIDNotification", ?*Notification, .{});
    }

    pub fn entityDescription(self: *@This()) ?*EntityDescription {
        return objc.msgSend(self, "entityDescription", ?*EntityDescription, .{});
    }

    pub fn fetchRequest(self: *@This()) ?*FetchRequest {
        return objc.msgSend(self, "fetchRequest", ?*FetchRequest, .{});
    }

    pub fn timestamp(self: *@This()) ?*foundation.Date {
        return objc.msgSend(self, "timestamp", ?*foundation.Date, .{});
    }

    pub fn changes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "changes", ?*anyopaque, .{});
    }

    pub fn transactionNumber(self: *@This()) objc.int64_t {
        return objc.msgSend(self, "transactionNumber", objc.int64_t, .{});
    }

    pub fn storeID(self: *@This()) ?*String {
        return objc.msgSend(self, "storeID", ?*String, .{});
    }

    pub fn bundleID(self: *@This()) ?*String {
        return objc.msgSend(self, "bundleID", ?*String, .{});
    }

    pub fn processID(self: *@This()) ?*String {
        return objc.msgSend(self, "processID", ?*String, .{});
    }

    pub fn contextName(self: *@This()) ?*String {
        return objc.msgSend(self, "contextName", ?*String, .{});
    }

    pub fn author(self: *@This()) ?*String {
        return objc.msgSend(self, "author", ?*String, .{});
    }

    pub fn token(self: *@This()) ?*PersistentHistoryToken {
        return objc.msgSend(self, "token", ?*PersistentHistoryToken, .{});
    }

};

pub const PersistentCloudKitContainerSchemaInitializationOptions = enum(objc.NSUInteger) {
    None = 0,
    DryRun = 2,
    PrintSchema = 4,
};

/// https://developer.apple.com/documentation/CoreData/NSPersistentCloudKitContainer?language=objc
pub const PersistentCloudKitContainer = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPersistentCloudKitContainer", @This(), PersistentContainer, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initializeCloudKitSchemaWithOptionsError(self: *@This(), options: PersistentCloudKitContainerSchemaInitializationOptions, @"error": ?*?*Error) objc.BOOL {
        return objc.msgSend(self, "initializeCloudKitSchemaWithOptions:error:", objc.BOOL, .{options, @"error"});
    }

    pub fn recordForManagedObjectID(self: *@This(), managedObjectID: ?*ManagedObjectID) ?*CKRecord {
        return objc.msgSend(self, "recordForManagedObjectID:", ?*CKRecord, .{managedObjectID});
    }

    pub fn recordsForManagedObjectIDs(self: *@This(), managedObjectIDs: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "recordsForManagedObjectIDs:", ?*anyopaque, .{managedObjectIDs});
    }

    pub fn recordIDForManagedObjectID(self: *@This(), managedObjectID: ?*ManagedObjectID) ?*CKRecordID {
        return objc.msgSend(self, "recordIDForManagedObjectID:", ?*CKRecordID, .{managedObjectID});
    }

    pub fn recordIDsForManagedObjectIDs(self: *@This(), managedObjectIDs: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "recordIDsForManagedObjectIDs:", ?*anyopaque, .{managedObjectIDs});
    }

    pub fn canUpdateRecordForManagedObjectWithID(self: *@This(), objectID: ?*ManagedObjectID) objc.BOOL {
        return objc.msgSend(self, "canUpdateRecordForManagedObjectWithID:", objc.BOOL, .{objectID});
    }

    pub fn canDeleteRecordForManagedObjectWithID(self: *@This(), objectID: ?*ManagedObjectID) objc.BOOL {
        return objc.msgSend(self, "canDeleteRecordForManagedObjectWithID:", objc.BOOL, .{objectID});
    }

    pub fn canModifyManagedObjectsInStore(self: *@This(), store: ?*PersistentStore) objc.BOOL {
        return objc.msgSend(self, "canModifyManagedObjectsInStore:", objc.BOOL, .{store});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSPersistentCloudKitContainerOptions?language=objc
pub const PersistentCloudKitContainerOptions = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPersistentCloudKitContainerOptions", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithContainerIdentifier(self: *@This(), containerIdentifier: ?*cloud_kit.NSString) *@This() {
        return objc.msgSend(self, "initWithContainerIdentifier:", *@This(), .{containerIdentifier});
    }

    pub fn containerIdentifier(self: *@This()) ?*cloud_kit.NSString {
        return objc.msgSend(self, "containerIdentifier", ?*cloud_kit.NSString, .{});
    }

    pub fn databaseScope(self: *@This()) cloud_kit.DatabaseScope {
        return objc.msgSend(self, "databaseScope", cloud_kit.DatabaseScope, .{});
    }

    pub fn setDatabaseScope(self: *@This(), databaseScope: cloud_kit.DatabaseScope) void {
        return objc.msgSend(self, "setDatabaseScope:", void, .{databaseScope});
    }

};

pub const PersistentCloudKitContainerEventType = enum(objc.NSInteger) {
    Setup = 0,
    Import = 1,
    Export = 2,
};

/// https://developer.apple.com/documentation/CoreData/NSPersistentCloudKitContainerEvent?language=objc
pub const PersistentCloudKitContainerEvent = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPersistentCloudKitContainerEvent", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn identifier(self: *@This()) ?*foundation.UUID {
        return objc.msgSend(self, "identifier", ?*foundation.UUID, .{});
    }

    pub fn storeIdentifier(self: *@This()) ?*cloud_kit.NSString {
        return objc.msgSend(self, "storeIdentifier", ?*cloud_kit.NSString, .{});
    }

    pub fn @"type"(self: *@This()) PersistentCloudKitContainerEventType {
        return objc.msgSend(self, "type", PersistentCloudKitContainerEventType, .{});
    }

    pub fn startDate(self: *@This()) ?*foundation.Date {
        return objc.msgSend(self, "startDate", ?*foundation.Date, .{});
    }

    pub fn endDate(self: *@This()) ?*foundation.Date {
        return objc.msgSend(self, "endDate", ?*foundation.Date, .{});
    }

    pub fn succeeded(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "succeeded", objc.BOOL, .{});
    }

    pub fn @"error"(self: *@This()) ?*Error {
        return objc.msgSend(self, "error", ?*Error, .{});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSPersistentCloudKitContainerEventRequest?language=objc
pub const PersistentCloudKitContainerEventRequest = opaque {
    pub const InternalInfo = objc.ExternalClass("NSPersistentCloudKitContainerEventRequest", @This(), PersistentStoreRequest, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn fetchEventsAfterDate(self: *@This(), date: ?*foundation.Date) *@This() {
        return objc.msgSend(self, "fetchEventsAfterDate:", *@This(), .{date});
    }

    pub fn fetchEventsAfterEvent(self: *@This(), event: ?*PersistentCloudKitContainerEvent) *@This() {
        return objc.msgSend(self, "fetchEventsAfterEvent:", *@This(), .{event});
    }

    pub fn fetchEventsMatchingFetchRequest(self: *@This(), fetchRequest: ?*FetchRequest) *@This() {
        return objc.msgSend(self, "fetchEventsMatchingFetchRequest:", *@This(), .{fetchRequest});
    }

    pub fn fetchRequestForEvents(self: *@This()) ?*FetchRequest {
        return objc.msgSend(self, "fetchRequestForEvents", ?*FetchRequest, .{});
    }

    pub fn resultType(self: *@This()) PersistentCloudKitContainerEventResultType {
        return objc.msgSend(self, "resultType", PersistentCloudKitContainerEventResultType, .{});
    }

    pub fn setResultType(self: *@This(), resultType: PersistentCloudKitContainerEventResultType) void {
        return objc.msgSend(self, "setResultType:", void, .{resultType});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSStagedMigrationManager?language=objc
pub const StagedMigrationManager = opaque {
    pub const InternalInfo = objc.ExternalClass("NSStagedMigrationManager", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithMigrationStages(self: *@This(), stages: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithMigrationStages:", *@This(), .{stages});
    }

    pub fn stages(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "stages", ?*anyopaque, .{});
    }

    pub fn container(self: *@This()) ?*PersistentContainer {
        return objc.msgSend(self, "container", ?*PersistentContainer, .{});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSMigrationStage?language=objc
pub const MigrationStage = opaque {
    pub const InternalInfo = objc.ExternalClass("NSMigrationStage", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn label(self: *@This()) ?*cloud_kit.NSString {
        return objc.msgSend(self, "label", ?*cloud_kit.NSString, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*cloud_kit.NSString) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSCustomMigrationStage?language=objc
pub const CustomMigrationStage = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCustomMigrationStage", @This(), MigrationStage, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithCurrentModelReferenceNextModelReference(self: *@This(), currentModel: ?*ManagedObjectModelReference, nextModel: ?*ManagedObjectModelReference) *@This() {
        return objc.msgSend(self, "initWithCurrentModelReference:nextModelReference:", *@This(), .{currentModel, nextModel});
    }

    pub fn currentModel(self: *@This()) ?*ManagedObjectModelReference {
        return objc.msgSend(self, "currentModel", ?*ManagedObjectModelReference, .{});
    }

    pub fn nextModel(self: *@This()) ?*ManagedObjectModelReference {
        return objc.msgSend(self, "nextModel", ?*ManagedObjectModelReference, .{});
    }

    pub fn willMigrateHandler(self: *@This()) *const fn(?*StagedMigrationManager, ?*CustomMigrationStage, ?*?*Error) callconv(.C) objc.BOOL {
        return objc.msgSend(self, "willMigrateHandler", *const fn(?*StagedMigrationManager, ?*CustomMigrationStage, ?*?*Error) callconv(.C) objc.BOOL, .{});
    }

    pub fn setWillMigrateHandler(self: *@This(), willMigrateHandler: *const fn(?*StagedMigrationManager, ?*CustomMigrationStage, ?*?*Error) callconv(.C) objc.BOOL) void {
        return objc.msgSend(self, "setWillMigrateHandler:", void, .{willMigrateHandler});
    }

    pub fn didMigrateHandler(self: *@This()) *const fn(?*StagedMigrationManager, ?*CustomMigrationStage, ?*?*Error) callconv(.C) objc.BOOL {
        return objc.msgSend(self, "didMigrateHandler", *const fn(?*StagedMigrationManager, ?*CustomMigrationStage, ?*?*Error) callconv(.C) objc.BOOL, .{});
    }

    pub fn setDidMigrateHandler(self: *@This(), didMigrateHandler: *const fn(?*StagedMigrationManager, ?*CustomMigrationStage, ?*?*Error) callconv(.C) objc.BOOL) void {
        return objc.msgSend(self, "setDidMigrateHandler:", void, .{didMigrateHandler});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSLightweightMigrationStage?language=objc
pub const LightweightMigrationStage = opaque {
    pub const InternalInfo = objc.ExternalClass("NSLightweightMigrationStage", @This(), MigrationStage, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithVersionChecksums(self: *@This(), versionChecksums: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithVersionChecksums:", *@This(), .{versionChecksums});
    }

    pub fn versionChecksums(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "versionChecksums", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSManagedObjectModelReference?language=objc
pub const ManagedObjectModelReference = opaque {
    pub const InternalInfo = objc.ExternalClass("NSManagedObjectModelReference", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithModelVersionChecksum(self: *@This(), model: ?*ManagedObjectModel, versionChecksum: ?*cloud_kit.NSString) *@This() {
        return objc.msgSend(self, "initWithModel:versionChecksum:", *@This(), .{model, versionChecksum});
    }

    pub fn initWithFileURLVersionChecksum(self: *@This(), fileURL: ?*URL, versionChecksum: ?*cloud_kit.NSString) *@This() {
        return objc.msgSend(self, "initWithFileURL:versionChecksum:", *@This(), .{fileURL, versionChecksum});
    }

    pub fn initWithEntityVersionHashesInBundleVersionChecksum(self: *@This(), versionHash: ?*Dictionary, bundle: ?*Bundle, versionChecksum: ?*cloud_kit.NSString) *@This() {
        return objc.msgSend(self, "initWithEntityVersionHashes:inBundle:versionChecksum:", *@This(), .{versionHash, bundle, versionChecksum});
    }

    pub fn initWithNameInBundleVersionChecksum(self: *@This(), modelName: ?*cloud_kit.NSString, bundle: ?*Bundle, versionChecksum: ?*cloud_kit.NSString) *@This() {
        return objc.msgSend(self, "initWithName:inBundle:versionChecksum:", *@This(), .{modelName, bundle, versionChecksum});
    }

    pub fn resolvedModel(self: *@This()) ?*ManagedObjectModel {
        return objc.msgSend(self, "resolvedModel", ?*ManagedObjectModel, .{});
    }

    pub fn versionChecksum(self: *@This()) ?*cloud_kit.NSString {
        return objc.msgSend(self, "versionChecksum", ?*cloud_kit.NSString, .{});
    }

};

/// https://developer.apple.com/documentation/CoreData/NSCoreDataCoreSpotlightDelegate?language=objc
pub const CoreDataCoreSpotlightDelegate = opaque {
    pub const InternalInfo = objc.ExternalClass("NSCoreDataCoreSpotlightDelegate", @This(), Object, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn domainIdentifier(self: *@This()) ?*cloud_kit.NSString {
        return objc.msgSend(self, "domainIdentifier", ?*cloud_kit.NSString, .{});
    }

    pub fn indexName(self: *@This()) ?*String {
        return objc.msgSend(self, "indexName", ?*String, .{});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initForStoreWithDescriptionCoordinator(self: *@This(), description: ?*PersistentStoreDescription, psc: ?*PersistentStoreCoordinator) *@This() {
        return objc.msgSend(self, "initForStoreWithDescription:coordinator:", *@This(), .{description, psc});
    }

    pub fn initForStoreWithDescriptionModel(self: *@This(), description: ?*PersistentStoreDescription, model: ?*ManagedObjectModel) *@This() {
        return objc.msgSend(self, "initForStoreWithDescription:model:", *@This(), .{description, model});
    }

    pub fn startSpotlightIndexing(self: *@This()) void {
        return objc.msgSend(self, "startSpotlightIndexing", void, .{});
    }

    pub fn stopSpotlightIndexing(self: *@This()) void {
        return objc.msgSend(self, "stopSpotlightIndexing", void, .{});
    }

    pub fn deleteSpotlightIndexWithCompletionHandler(self: *@This(), completionHandler: *const fn(?*Error) callconv(.C) void) void {
        return objc.msgSend(self, "deleteSpotlightIndexWithCompletionHandler:", void, .{completionHandler});
    }

    pub fn attributeSetForObject(self: *@This(), object: ?*ManagedObject) ?*CSSearchableItemAttributeSet {
        return objc.msgSend(self, "attributeSetForObject:", ?*CSSearchableItemAttributeSet, .{object});
    }

    pub fn searchableIndexReindexAllSearchableItemsWithAcknowledgementHandler(self: *@This(), searchableIndex: ?*CSSearchableIndex, acknowledgementHandler: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "searchableIndex:reindexAllSearchableItemsWithAcknowledgementHandler:", void, .{searchableIndex, acknowledgementHandler});
    }

    pub fn searchableIndexReindexSearchableItemsWithIdentifiersAcknowledgementHandler(self: *@This(), searchableIndex: ?*CSSearchableIndex, identifiers: ?*anyopaque, acknowledgementHandler: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "searchableIndex:reindexSearchableItemsWithIdentifiers:acknowledgementHandler:", void, .{searchableIndex, identifiers, acknowledgementHandler});
    }

    pub fn isIndexingEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isIndexingEnabled", objc.BOOL, .{});
    }

};

