// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const foundation = @import("foundation.zig"); // Framework dependency Foundation.
const cloud_kit = @import("cloud_kit.zig"); // Framework dependency CloudKit.

pub const anon321 = enum(objc.NSInteger) {
    NSManagedObjectValidationError = 1550,
    NSManagedObjectConstraintValidationError = 1551,
    NSValidationMultipleErrorsError = 1560,
    NSValidationMissingMandatoryPropertyError = 1570,
    NSValidationRelationshipLacksMinimumCountError = 1580,
    NSValidationRelationshipExceedsMaximumCountError = 1590,
    NSValidationRelationshipDeniedDeleteError = 1600,
    NSValidationNumberTooLargeError = 1610,
    NSValidationNumberTooSmallError = 1620,
    NSValidationDateTooLateError = 1630,
    NSValidationDateTooSoonError = 1640,
    NSValidationInvalidDateError = 1650,
    NSValidationStringTooLongError = 1660,
    NSValidationStringTooShortError = 1670,
    NSValidationStringPatternMatchingError = 1680,
    NSValidationInvalidURIError = 1690,
    NSManagedObjectContextLockingError = 132000,
    NSPersistentStoreCoordinatorLockingError = 132010,
    NSManagedObjectReferentialIntegrityError = 133000,
    NSManagedObjectExternalRelationshipError = 133010,
    NSManagedObjectMergeError = 133020,
    NSManagedObjectConstraintMergeError = 133021,
    NSPersistentStoreInvalidTypeError = 134000,
    NSPersistentStoreTypeMismatchError = 134010,
    NSPersistentStoreIncompatibleSchemaError = 134020,
    NSPersistentStoreSaveError = 134030,
    NSPersistentStoreIncompleteSaveError = 134040,
    NSPersistentStoreSaveConflictsError = 134050,
    NSCoreDataError = 134060,
    NSPersistentStoreOperationError = 134070,
    NSPersistentStoreOpenError = 134080,
    NSPersistentStoreTimeoutError = 134090,
    NSPersistentStoreUnsupportedRequestTypeError = 134091,
    NSPersistentStoreIncompatibleVersionHashError = 134100,
    NSMigrationError = 134110,
    NSMigrationConstraintViolationError = 134111,
    NSMigrationCancelledError = 134120,
    NSMigrationMissingSourceModelError = 134130,
    NSMigrationMissingMappingModelError = 134140,
    NSMigrationManagerSourceStoreError = 134150,
    NSMigrationManagerDestinationStoreError = 134160,
    NSEntityMigrationPolicyError = 134170,
    NSSQLiteError = 134180,
    NSInferredMappingModelError = 134190,
    NSExternalRecordImportError = 134200,
    NSPersistentHistoryTokenExpiredError = 134301,
    NSManagedObjectModelReferenceNotFoundError = 134504,
    NSStagedMigrationFrameworkVersionMismatchError = 134505,
    NSStagedMigrationBackwardMigrationError = 134506,
};

/// https://developer.apple.com/documentation/CoreData/NSPropertyDescription?language=objc
pub const PropertyDescription = opaque {
    pub const InternalInfo = objc.ExternClass("NSPropertyDescription", @This(), objc.NSObject, &.{
        foundation.Coding,
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn setValidationPredicatesWithValidationWarnings(_self: *@This(), _validationPredicates: ?*anyopaque, _validationWarnings: ?*anyopaque) void {
        return objc.msgSend(_self, "setValidationPredicates:withValidationWarnings:", void, .{ _validationPredicates, _validationWarnings });
    }

    pub fn entity(_self: *@This()) ?*EntityDescription {
        return objc.msgSend(_self, "entity", ?*EntityDescription, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*foundation.String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn isOptional(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isOptional", objc.BOOL, .{});
    }

    pub fn setOptional(_self: *@This(), _optional: objc.BOOL) void {
        return objc.msgSend(_self, "setOptional:", void, .{_optional});
    }

    pub fn isTransient(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isTransient", objc.BOOL, .{});
    }

    pub fn setTransient(_self: *@This(), _transient: objc.BOOL) void {
        return objc.msgSend(_self, "setTransient:", void, .{_transient});
    }

    pub fn validationPredicates(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "validationPredicates", ?*anyopaque, .{});
    }

    pub fn validationWarnings(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "validationWarnings", ?*foundation.Array, .{});
    }

    pub fn userInfo(_self: *@This()) ?*foundation.Dictionary {
        return objc.msgSend(_self, "userInfo", ?*foundation.Dictionary, .{});
    }

    pub fn setUserInfo(_self: *@This(), _userInfo: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "setUserInfo:", void, .{_userInfo});
    }

    pub fn isIndexed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isIndexed", objc.BOOL, .{});
    }

    pub fn setIndexed(_self: *@This(), _indexed: objc.BOOL) void {
        return objc.msgSend(_self, "setIndexed:", void, .{_indexed});
    }

    pub fn versionHash(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "versionHash", ?*Data, .{});
    }

    pub fn versionHashModifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "versionHashModifier", ?*foundation.String, .{});
    }

    pub fn setVersionHashModifier(_self: *@This(), _versionHashModifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setVersionHashModifier:", void, .{_versionHashModifier});
    }

    pub fn isIndexedBySpotlight(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isIndexedBySpotlight", objc.BOOL, .{});
    }

    pub fn setIndexedBySpotlight(_self: *@This(), _indexedBySpotlight: objc.BOOL) void {
        return objc.msgSend(_self, "setIndexedBySpotlight:", void, .{_indexedBySpotlight});
    }

    pub fn isStoredInExternalRecord(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isStoredInExternalRecord", objc.BOOL, .{});
    }

    pub fn setStoredInExternalRecord(_self: *@This(), _storedInExternalRecord: objc.BOOL) void {
        return objc.msgSend(_self, "setStoredInExternalRecord:", void, .{_storedInExternalRecord});
    }

    pub fn renamingIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "renamingIdentifier", ?*foundation.String, .{});
    }

    pub fn setRenamingIdentifier(_self: *@This(), _renamingIdentifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setRenamingIdentifier:", void, .{_renamingIdentifier});
    }
};

pub const AttributeType = enum(objc.NSUInteger) {
    UndefinedAttributeType = 0,
    Integer16AttributeType = 100,
    Integer32AttributeType = 200,
    Integer64AttributeType = 300,
    DecimalAttributeType = 400,
    DoubleAttributeType = 500,
    FloatAttributeType = 600,
    StringAttributeType = 700,
    BooleanAttributeType = 800,
    DateAttributeType = 900,
    BinaryDataAttributeType = 1000,
    UUIDAttributeType = 1100,
    URIAttributeType = 1200,
    TransformableAttributeType = 1800,
    ObjectIDAttributeType = 2000,
    CompositeAttributeType = 2100,
};

/// https://developer.apple.com/documentation/CoreData/NSAttributeDescription?language=objc
pub const AttributeDescription = opaque {
    pub const InternalInfo = objc.ExternClass("NSAttributeDescription", @This(), PropertyDescription, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn setValidationPredicatesWithValidationWarnings(_self: *@This(), _validationPredicates: ?*anyopaque, _validationWarnings: ?*anyopaque) void {
        return objc.msgSend(_self, "setValidationPredicates:withValidationWarnings:", void, .{ _validationPredicates, _validationWarnings });
    }

    pub fn entity(_self: *@This()) ?*EntityDescription {
        return objc.msgSend(_self, "entity", ?*EntityDescription, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*foundation.String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn isOptional(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isOptional", objc.BOOL, .{});
    }

    pub fn setOptional(_self: *@This(), _optional: objc.BOOL) void {
        return objc.msgSend(_self, "setOptional:", void, .{_optional});
    }

    pub fn isTransient(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isTransient", objc.BOOL, .{});
    }

    pub fn setTransient(_self: *@This(), _transient: objc.BOOL) void {
        return objc.msgSend(_self, "setTransient:", void, .{_transient});
    }

    pub fn validationPredicates(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "validationPredicates", ?*anyopaque, .{});
    }

    pub fn validationWarnings(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "validationWarnings", ?*foundation.Array, .{});
    }

    pub fn userInfo(_self: *@This()) ?*foundation.Dictionary {
        return objc.msgSend(_self, "userInfo", ?*foundation.Dictionary, .{});
    }

    pub fn setUserInfo(_self: *@This(), _userInfo: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "setUserInfo:", void, .{_userInfo});
    }

    pub fn isIndexed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isIndexed", objc.BOOL, .{});
    }

    pub fn setIndexed(_self: *@This(), _indexed: objc.BOOL) void {
        return objc.msgSend(_self, "setIndexed:", void, .{_indexed});
    }

    pub fn versionHash(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "versionHash", ?*Data, .{});
    }

    pub fn versionHashModifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "versionHashModifier", ?*foundation.String, .{});
    }

    pub fn setVersionHashModifier(_self: *@This(), _versionHashModifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setVersionHashModifier:", void, .{_versionHashModifier});
    }

    pub fn isIndexedBySpotlight(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isIndexedBySpotlight", objc.BOOL, .{});
    }

    pub fn setIndexedBySpotlight(_self: *@This(), _indexedBySpotlight: objc.BOOL) void {
        return objc.msgSend(_self, "setIndexedBySpotlight:", void, .{_indexedBySpotlight});
    }

    pub fn isStoredInExternalRecord(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isStoredInExternalRecord", objc.BOOL, .{});
    }

    pub fn setStoredInExternalRecord(_self: *@This(), _storedInExternalRecord: objc.BOOL) void {
        return objc.msgSend(_self, "setStoredInExternalRecord:", void, .{_storedInExternalRecord});
    }

    pub fn renamingIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "renamingIdentifier", ?*foundation.String, .{});
    }

    pub fn setRenamingIdentifier(_self: *@This(), _renamingIdentifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setRenamingIdentifier:", void, .{_renamingIdentifier});
    }

    pub fn attributeType(_self: *@This()) AttributeType {
        return objc.msgSend(_self, "attributeType", AttributeType, .{});
    }

    pub fn setAttributeType(_self: *@This(), _attributeType: AttributeType) void {
        return objc.msgSend(_self, "setAttributeType:", void, .{_attributeType});
    }

    pub fn attributeValueClassName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "attributeValueClassName", ?*foundation.String, .{});
    }

    pub fn setAttributeValueClassName(_self: *@This(), _attributeValueClassName: ?*foundation.String) void {
        return objc.msgSend(_self, "setAttributeValueClassName:", void, .{_attributeValueClassName});
    }

    pub fn defaultValue(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "defaultValue", *objc.Id, .{});
    }

    pub fn setDefaultValue(_self: *@This(), _defaultValue: *objc.Id) void {
        return objc.msgSend(_self, "setDefaultValue:", void, .{_defaultValue});
    }

    pub fn valueTransformerName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "valueTransformerName", ?*foundation.String, .{});
    }

    pub fn setValueTransformerName(_self: *@This(), _valueTransformerName: ?*foundation.String) void {
        return objc.msgSend(_self, "setValueTransformerName:", void, .{_valueTransformerName});
    }

    pub fn allowsExternalBinaryDataStorage(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsExternalBinaryDataStorage", objc.BOOL, .{});
    }

    pub fn setAllowsExternalBinaryDataStorage(_self: *@This(), _allowsExternalBinaryDataStorage: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowsExternalBinaryDataStorage:", void, .{_allowsExternalBinaryDataStorage});
    }

    pub fn preservesValueInHistoryOnDeletion(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "preservesValueInHistoryOnDeletion", objc.BOOL, .{});
    }

    pub fn setPreservesValueInHistoryOnDeletion(_self: *@This(), _preservesValueInHistoryOnDeletion: objc.BOOL) void {
        return objc.msgSend(_self, "setPreservesValueInHistoryOnDeletion:", void, .{_preservesValueInHistoryOnDeletion});
    }

    pub fn allowsCloudEncryption(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsCloudEncryption", objc.BOOL, .{});
    }

    pub fn setAllowsCloudEncryption(_self: *@This(), _allowsCloudEncryption: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowsCloudEncryption:", void, .{_allowsCloudEncryption});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSDerivedAttributeDescription?language=objc
pub const DerivedAttributeDescription = opaque {
    pub const InternalInfo = objc.ExternClass("NSDerivedAttributeDescription", @This(), AttributeDescription, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn setValidationPredicatesWithValidationWarnings(_self: *@This(), _validationPredicates: ?*anyopaque, _validationWarnings: ?*anyopaque) void {
        return objc.msgSend(_self, "setValidationPredicates:withValidationWarnings:", void, .{ _validationPredicates, _validationWarnings });
    }

    pub fn entity(_self: *@This()) ?*EntityDescription {
        return objc.msgSend(_self, "entity", ?*EntityDescription, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*foundation.String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn isOptional(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isOptional", objc.BOOL, .{});
    }

    pub fn setOptional(_self: *@This(), _optional: objc.BOOL) void {
        return objc.msgSend(_self, "setOptional:", void, .{_optional});
    }

    pub fn isTransient(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isTransient", objc.BOOL, .{});
    }

    pub fn setTransient(_self: *@This(), _transient: objc.BOOL) void {
        return objc.msgSend(_self, "setTransient:", void, .{_transient});
    }

    pub fn validationPredicates(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "validationPredicates", ?*anyopaque, .{});
    }

    pub fn validationWarnings(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "validationWarnings", ?*foundation.Array, .{});
    }

    pub fn userInfo(_self: *@This()) ?*foundation.Dictionary {
        return objc.msgSend(_self, "userInfo", ?*foundation.Dictionary, .{});
    }

    pub fn setUserInfo(_self: *@This(), _userInfo: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "setUserInfo:", void, .{_userInfo});
    }

    pub fn isIndexed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isIndexed", objc.BOOL, .{});
    }

    pub fn setIndexed(_self: *@This(), _indexed: objc.BOOL) void {
        return objc.msgSend(_self, "setIndexed:", void, .{_indexed});
    }

    pub fn versionHash(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "versionHash", ?*Data, .{});
    }

    pub fn versionHashModifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "versionHashModifier", ?*foundation.String, .{});
    }

    pub fn setVersionHashModifier(_self: *@This(), _versionHashModifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setVersionHashModifier:", void, .{_versionHashModifier});
    }

    pub fn isIndexedBySpotlight(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isIndexedBySpotlight", objc.BOOL, .{});
    }

    pub fn setIndexedBySpotlight(_self: *@This(), _indexedBySpotlight: objc.BOOL) void {
        return objc.msgSend(_self, "setIndexedBySpotlight:", void, .{_indexedBySpotlight});
    }

    pub fn isStoredInExternalRecord(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isStoredInExternalRecord", objc.BOOL, .{});
    }

    pub fn setStoredInExternalRecord(_self: *@This(), _storedInExternalRecord: objc.BOOL) void {
        return objc.msgSend(_self, "setStoredInExternalRecord:", void, .{_storedInExternalRecord});
    }

    pub fn renamingIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "renamingIdentifier", ?*foundation.String, .{});
    }

    pub fn setRenamingIdentifier(_self: *@This(), _renamingIdentifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setRenamingIdentifier:", void, .{_renamingIdentifier});
    }

    pub fn attributeType(_self: *@This()) AttributeType {
        return objc.msgSend(_self, "attributeType", AttributeType, .{});
    }

    pub fn setAttributeType(_self: *@This(), _attributeType: AttributeType) void {
        return objc.msgSend(_self, "setAttributeType:", void, .{_attributeType});
    }

    pub fn attributeValueClassName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "attributeValueClassName", ?*foundation.String, .{});
    }

    pub fn setAttributeValueClassName(_self: *@This(), _attributeValueClassName: ?*foundation.String) void {
        return objc.msgSend(_self, "setAttributeValueClassName:", void, .{_attributeValueClassName});
    }

    pub fn defaultValue(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "defaultValue", *objc.Id, .{});
    }

    pub fn setDefaultValue(_self: *@This(), _defaultValue: *objc.Id) void {
        return objc.msgSend(_self, "setDefaultValue:", void, .{_defaultValue});
    }

    pub fn valueTransformerName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "valueTransformerName", ?*foundation.String, .{});
    }

    pub fn setValueTransformerName(_self: *@This(), _valueTransformerName: ?*foundation.String) void {
        return objc.msgSend(_self, "setValueTransformerName:", void, .{_valueTransformerName});
    }

    pub fn allowsExternalBinaryDataStorage(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsExternalBinaryDataStorage", objc.BOOL, .{});
    }

    pub fn setAllowsExternalBinaryDataStorage(_self: *@This(), _allowsExternalBinaryDataStorage: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowsExternalBinaryDataStorage:", void, .{_allowsExternalBinaryDataStorage});
    }

    pub fn preservesValueInHistoryOnDeletion(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "preservesValueInHistoryOnDeletion", objc.BOOL, .{});
    }

    pub fn setPreservesValueInHistoryOnDeletion(_self: *@This(), _preservesValueInHistoryOnDeletion: objc.BOOL) void {
        return objc.msgSend(_self, "setPreservesValueInHistoryOnDeletion:", void, .{_preservesValueInHistoryOnDeletion});
    }

    pub fn allowsCloudEncryption(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsCloudEncryption", objc.BOOL, .{});
    }

    pub fn setAllowsCloudEncryption(_self: *@This(), _allowsCloudEncryption: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowsCloudEncryption:", void, .{_allowsCloudEncryption});
    }

    pub fn derivationExpression(_self: *@This()) ?*Expression {
        return objc.msgSend(_self, "derivationExpression", ?*Expression, .{});
    }

    pub fn setDerivationExpression(_self: *@This(), _derivationExpression: ?*Expression) void {
        return objc.msgSend(_self, "setDerivationExpression:", void, .{_derivationExpression});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSCompositeAttributeDescription?language=objc
pub const CompositeAttributeDescription = opaque {
    pub const InternalInfo = objc.ExternClass("NSCompositeAttributeDescription", @This(), AttributeDescription, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn setValidationPredicatesWithValidationWarnings(_self: *@This(), _validationPredicates: ?*anyopaque, _validationWarnings: ?*anyopaque) void {
        return objc.msgSend(_self, "setValidationPredicates:withValidationWarnings:", void, .{ _validationPredicates, _validationWarnings });
    }

    pub fn entity(_self: *@This()) ?*EntityDescription {
        return objc.msgSend(_self, "entity", ?*EntityDescription, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*foundation.String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn isOptional(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isOptional", objc.BOOL, .{});
    }

    pub fn setOptional(_self: *@This(), _optional: objc.BOOL) void {
        return objc.msgSend(_self, "setOptional:", void, .{_optional});
    }

    pub fn isTransient(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isTransient", objc.BOOL, .{});
    }

    pub fn setTransient(_self: *@This(), _transient: objc.BOOL) void {
        return objc.msgSend(_self, "setTransient:", void, .{_transient});
    }

    pub fn validationPredicates(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "validationPredicates", ?*anyopaque, .{});
    }

    pub fn validationWarnings(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "validationWarnings", ?*foundation.Array, .{});
    }

    pub fn userInfo(_self: *@This()) ?*foundation.Dictionary {
        return objc.msgSend(_self, "userInfo", ?*foundation.Dictionary, .{});
    }

    pub fn setUserInfo(_self: *@This(), _userInfo: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "setUserInfo:", void, .{_userInfo});
    }

    pub fn isIndexed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isIndexed", objc.BOOL, .{});
    }

    pub fn setIndexed(_self: *@This(), _indexed: objc.BOOL) void {
        return objc.msgSend(_self, "setIndexed:", void, .{_indexed});
    }

    pub fn versionHash(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "versionHash", ?*Data, .{});
    }

    pub fn versionHashModifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "versionHashModifier", ?*foundation.String, .{});
    }

    pub fn setVersionHashModifier(_self: *@This(), _versionHashModifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setVersionHashModifier:", void, .{_versionHashModifier});
    }

    pub fn isIndexedBySpotlight(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isIndexedBySpotlight", objc.BOOL, .{});
    }

    pub fn setIndexedBySpotlight(_self: *@This(), _indexedBySpotlight: objc.BOOL) void {
        return objc.msgSend(_self, "setIndexedBySpotlight:", void, .{_indexedBySpotlight});
    }

    pub fn isStoredInExternalRecord(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isStoredInExternalRecord", objc.BOOL, .{});
    }

    pub fn setStoredInExternalRecord(_self: *@This(), _storedInExternalRecord: objc.BOOL) void {
        return objc.msgSend(_self, "setStoredInExternalRecord:", void, .{_storedInExternalRecord});
    }

    pub fn renamingIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "renamingIdentifier", ?*foundation.String, .{});
    }

    pub fn setRenamingIdentifier(_self: *@This(), _renamingIdentifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setRenamingIdentifier:", void, .{_renamingIdentifier});
    }

    pub fn attributeType(_self: *@This()) AttributeType {
        return objc.msgSend(_self, "attributeType", AttributeType, .{});
    }

    pub fn setAttributeType(_self: *@This(), _attributeType: AttributeType) void {
        return objc.msgSend(_self, "setAttributeType:", void, .{_attributeType});
    }

    pub fn attributeValueClassName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "attributeValueClassName", ?*foundation.String, .{});
    }

    pub fn setAttributeValueClassName(_self: *@This(), _attributeValueClassName: ?*foundation.String) void {
        return objc.msgSend(_self, "setAttributeValueClassName:", void, .{_attributeValueClassName});
    }

    pub fn defaultValue(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "defaultValue", *objc.Id, .{});
    }

    pub fn setDefaultValue(_self: *@This(), _defaultValue: *objc.Id) void {
        return objc.msgSend(_self, "setDefaultValue:", void, .{_defaultValue});
    }

    pub fn valueTransformerName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "valueTransformerName", ?*foundation.String, .{});
    }

    pub fn setValueTransformerName(_self: *@This(), _valueTransformerName: ?*foundation.String) void {
        return objc.msgSend(_self, "setValueTransformerName:", void, .{_valueTransformerName});
    }

    pub fn allowsExternalBinaryDataStorage(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsExternalBinaryDataStorage", objc.BOOL, .{});
    }

    pub fn setAllowsExternalBinaryDataStorage(_self: *@This(), _allowsExternalBinaryDataStorage: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowsExternalBinaryDataStorage:", void, .{_allowsExternalBinaryDataStorage});
    }

    pub fn preservesValueInHistoryOnDeletion(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "preservesValueInHistoryOnDeletion", objc.BOOL, .{});
    }

    pub fn setPreservesValueInHistoryOnDeletion(_self: *@This(), _preservesValueInHistoryOnDeletion: objc.BOOL) void {
        return objc.msgSend(_self, "setPreservesValueInHistoryOnDeletion:", void, .{_preservesValueInHistoryOnDeletion});
    }

    pub fn allowsCloudEncryption(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsCloudEncryption", objc.BOOL, .{});
    }

    pub fn setAllowsCloudEncryption(_self: *@This(), _allowsCloudEncryption: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowsCloudEncryption:", void, .{_allowsCloudEncryption});
    }

    pub fn elements(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "elements", ?*anyopaque, .{});
    }

    pub fn setElements(_self: *@This(), _elements: ?*anyopaque) void {
        return objc.msgSend(_self, "setElements:", void, .{_elements});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSEntityDescription?language=objc
pub const EntityDescription = opaque {
    pub const InternalInfo = objc.ExternClass("NSEntityDescription", @This(), objc.NSObject, &.{
        foundation.Coding,
        foundation.Copying,
        foundation.FastEnumeration,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn countByEnumeratingWithStateObjectsCount(_self: *@This(), _state: ?*foundation.FastEnumerationState, _buffer: ?**objc.Id, _len: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(_self, "countByEnumeratingWithState:objects:count:", objc.NSUInteger, .{ _state, _buffer, _len });
    }

    pub fn entityForNameInManagedObjectContext(_self: *@This(), _entityName: ?*foundation.String, _context: ?*ManagedObjectContext) ?*EntityDescription {
        return objc.msgSend(_self, "entityForName:inManagedObjectContext:", ?*EntityDescription, .{ _entityName, _context });
    }

    pub fn insertNewObjectForEntityForNameInManagedObjectContext(_self: *@This(), _entityName: ?*foundation.String, _context: ?*ManagedObjectContext) ?*anyopaque {
        return objc.msgSend(_self, "insertNewObjectForEntityForName:inManagedObjectContext:", ?*anyopaque, .{ _entityName, _context });
    }

    pub fn relationshipsWithDestinationEntity(_self: *@This(), _entity: ?*EntityDescription) ?*anyopaque {
        return objc.msgSend(_self, "relationshipsWithDestinationEntity:", ?*anyopaque, .{_entity});
    }

    pub fn isKindOfEntity(_self: *@This(), _entity: ?*EntityDescription) objc.BOOL {
        return objc.msgSend(_self, "isKindOfEntity:", objc.BOOL, .{_entity});
    }

    pub fn managedObjectModel(_self: *@This()) ?*ManagedObjectModel {
        return objc.msgSend(_self, "managedObjectModel", ?*ManagedObjectModel, .{});
    }

    pub fn managedObjectClassName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "managedObjectClassName", ?*foundation.String, .{});
    }

    pub fn setManagedObjectClassName(_self: *@This(), _managedObjectClassName: ?*foundation.String) void {
        return objc.msgSend(_self, "setManagedObjectClassName:", void, .{_managedObjectClassName});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*foundation.String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn isAbstract(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAbstract", objc.BOOL, .{});
    }

    pub fn setAbstract(_self: *@This(), _abstract: objc.BOOL) void {
        return objc.msgSend(_self, "setAbstract:", void, .{_abstract});
    }

    pub fn subentitiesByName(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "subentitiesByName", ?*anyopaque, .{});
    }

    pub fn subentities(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "subentities", ?*anyopaque, .{});
    }

    pub fn setSubentities(_self: *@This(), _subentities: ?*anyopaque) void {
        return objc.msgSend(_self, "setSubentities:", void, .{_subentities});
    }

    pub fn superentity(_self: *@This()) ?*EntityDescription {
        return objc.msgSend(_self, "superentity", ?*EntityDescription, .{});
    }

    pub fn propertiesByName(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "propertiesByName", ?*anyopaque, .{});
    }

    pub fn properties(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "properties", ?*anyopaque, .{});
    }

    pub fn setProperties(_self: *@This(), _properties: ?*anyopaque) void {
        return objc.msgSend(_self, "setProperties:", void, .{_properties});
    }

    pub fn userInfo(_self: *@This()) ?*foundation.Dictionary {
        return objc.msgSend(_self, "userInfo", ?*foundation.Dictionary, .{});
    }

    pub fn setUserInfo(_self: *@This(), _userInfo: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "setUserInfo:", void, .{_userInfo});
    }

    pub fn attributesByName(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "attributesByName", ?*anyopaque, .{});
    }

    pub fn relationshipsByName(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "relationshipsByName", ?*anyopaque, .{});
    }

    pub fn versionHash(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "versionHash", ?*Data, .{});
    }

    pub fn versionHashModifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "versionHashModifier", ?*foundation.String, .{});
    }

    pub fn setVersionHashModifier(_self: *@This(), _versionHashModifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setVersionHashModifier:", void, .{_versionHashModifier});
    }

    pub fn renamingIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "renamingIdentifier", ?*foundation.String, .{});
    }

    pub fn setRenamingIdentifier(_self: *@This(), _renamingIdentifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setRenamingIdentifier:", void, .{_renamingIdentifier});
    }

    pub fn indexes(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "indexes", ?*anyopaque, .{});
    }

    pub fn setIndexes(_self: *@This(), _indexes: ?*anyopaque) void {
        return objc.msgSend(_self, "setIndexes:", void, .{_indexes});
    }

    pub fn uniquenessConstraints(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "uniquenessConstraints", ?*anyopaque, .{});
    }

    pub fn setUniquenessConstraints(_self: *@This(), _uniquenessConstraints: ?*anyopaque) void {
        return objc.msgSend(_self, "setUniquenessConstraints:", void, .{_uniquenessConstraints});
    }

    pub fn compoundIndexes(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "compoundIndexes", ?*anyopaque, .{});
    }

    pub fn setCompoundIndexes(_self: *@This(), _compoundIndexes: ?*anyopaque) void {
        return objc.msgSend(_self, "setCompoundIndexes:", void, .{_compoundIndexes});
    }

    pub fn coreSpotlightDisplayNameExpression(_self: *@This()) ?*Expression {
        return objc.msgSend(_self, "coreSpotlightDisplayNameExpression", ?*Expression, .{});
    }

    pub fn setCoreSpotlightDisplayNameExpression(_self: *@This(), _coreSpotlightDisplayNameExpression: ?*Expression) void {
        return objc.msgSend(_self, "setCoreSpotlightDisplayNameExpression:", void, .{_coreSpotlightDisplayNameExpression});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSFetchedPropertyDescription?language=objc
pub const FetchedPropertyDescription = opaque {
    pub const InternalInfo = objc.ExternClass("NSFetchedPropertyDescription", @This(), PropertyDescription, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn setValidationPredicatesWithValidationWarnings(_self: *@This(), _validationPredicates: ?*anyopaque, _validationWarnings: ?*anyopaque) void {
        return objc.msgSend(_self, "setValidationPredicates:withValidationWarnings:", void, .{ _validationPredicates, _validationWarnings });
    }

    pub fn entity(_self: *@This()) ?*EntityDescription {
        return objc.msgSend(_self, "entity", ?*EntityDescription, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*foundation.String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn isOptional(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isOptional", objc.BOOL, .{});
    }

    pub fn setOptional(_self: *@This(), _optional: objc.BOOL) void {
        return objc.msgSend(_self, "setOptional:", void, .{_optional});
    }

    pub fn isTransient(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isTransient", objc.BOOL, .{});
    }

    pub fn setTransient(_self: *@This(), _transient: objc.BOOL) void {
        return objc.msgSend(_self, "setTransient:", void, .{_transient});
    }

    pub fn validationPredicates(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "validationPredicates", ?*anyopaque, .{});
    }

    pub fn validationWarnings(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "validationWarnings", ?*foundation.Array, .{});
    }

    pub fn userInfo(_self: *@This()) ?*foundation.Dictionary {
        return objc.msgSend(_self, "userInfo", ?*foundation.Dictionary, .{});
    }

    pub fn setUserInfo(_self: *@This(), _userInfo: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "setUserInfo:", void, .{_userInfo});
    }

    pub fn isIndexed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isIndexed", objc.BOOL, .{});
    }

    pub fn setIndexed(_self: *@This(), _indexed: objc.BOOL) void {
        return objc.msgSend(_self, "setIndexed:", void, .{_indexed});
    }

    pub fn versionHash(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "versionHash", ?*Data, .{});
    }

    pub fn versionHashModifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "versionHashModifier", ?*foundation.String, .{});
    }

    pub fn setVersionHashModifier(_self: *@This(), _versionHashModifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setVersionHashModifier:", void, .{_versionHashModifier});
    }

    pub fn isIndexedBySpotlight(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isIndexedBySpotlight", objc.BOOL, .{});
    }

    pub fn setIndexedBySpotlight(_self: *@This(), _indexedBySpotlight: objc.BOOL) void {
        return objc.msgSend(_self, "setIndexedBySpotlight:", void, .{_indexedBySpotlight});
    }

    pub fn isStoredInExternalRecord(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isStoredInExternalRecord", objc.BOOL, .{});
    }

    pub fn setStoredInExternalRecord(_self: *@This(), _storedInExternalRecord: objc.BOOL) void {
        return objc.msgSend(_self, "setStoredInExternalRecord:", void, .{_storedInExternalRecord});
    }

    pub fn renamingIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "renamingIdentifier", ?*foundation.String, .{});
    }

    pub fn setRenamingIdentifier(_self: *@This(), _renamingIdentifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setRenamingIdentifier:", void, .{_renamingIdentifier});
    }

    pub fn fetchRequest(_self: *@This()) ?*FetchRequest {
        return objc.msgSend(_self, "fetchRequest", ?*FetchRequest, .{});
    }

    pub fn setFetchRequest(_self: *@This(), _fetchRequest: ?*FetchRequest) void {
        return objc.msgSend(_self, "setFetchRequest:", void, .{_fetchRequest});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSExpressionDescription?language=objc
pub const ExpressionDescription = opaque {
    pub const InternalInfo = objc.ExternClass("NSExpressionDescription", @This(), PropertyDescription, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn setValidationPredicatesWithValidationWarnings(_self: *@This(), _validationPredicates: ?*anyopaque, _validationWarnings: ?*anyopaque) void {
        return objc.msgSend(_self, "setValidationPredicates:withValidationWarnings:", void, .{ _validationPredicates, _validationWarnings });
    }

    pub fn entity(_self: *@This()) ?*EntityDescription {
        return objc.msgSend(_self, "entity", ?*EntityDescription, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*foundation.String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn isOptional(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isOptional", objc.BOOL, .{});
    }

    pub fn setOptional(_self: *@This(), _optional: objc.BOOL) void {
        return objc.msgSend(_self, "setOptional:", void, .{_optional});
    }

    pub fn isTransient(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isTransient", objc.BOOL, .{});
    }

    pub fn setTransient(_self: *@This(), _transient: objc.BOOL) void {
        return objc.msgSend(_self, "setTransient:", void, .{_transient});
    }

    pub fn validationPredicates(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "validationPredicates", ?*anyopaque, .{});
    }

    pub fn validationWarnings(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "validationWarnings", ?*foundation.Array, .{});
    }

    pub fn userInfo(_self: *@This()) ?*foundation.Dictionary {
        return objc.msgSend(_self, "userInfo", ?*foundation.Dictionary, .{});
    }

    pub fn setUserInfo(_self: *@This(), _userInfo: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "setUserInfo:", void, .{_userInfo});
    }

    pub fn isIndexed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isIndexed", objc.BOOL, .{});
    }

    pub fn setIndexed(_self: *@This(), _indexed: objc.BOOL) void {
        return objc.msgSend(_self, "setIndexed:", void, .{_indexed});
    }

    pub fn versionHash(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "versionHash", ?*Data, .{});
    }

    pub fn versionHashModifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "versionHashModifier", ?*foundation.String, .{});
    }

    pub fn setVersionHashModifier(_self: *@This(), _versionHashModifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setVersionHashModifier:", void, .{_versionHashModifier});
    }

    pub fn isIndexedBySpotlight(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isIndexedBySpotlight", objc.BOOL, .{});
    }

    pub fn setIndexedBySpotlight(_self: *@This(), _indexedBySpotlight: objc.BOOL) void {
        return objc.msgSend(_self, "setIndexedBySpotlight:", void, .{_indexedBySpotlight});
    }

    pub fn isStoredInExternalRecord(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isStoredInExternalRecord", objc.BOOL, .{});
    }

    pub fn setStoredInExternalRecord(_self: *@This(), _storedInExternalRecord: objc.BOOL) void {
        return objc.msgSend(_self, "setStoredInExternalRecord:", void, .{_storedInExternalRecord});
    }

    pub fn renamingIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "renamingIdentifier", ?*foundation.String, .{});
    }

    pub fn setRenamingIdentifier(_self: *@This(), _renamingIdentifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setRenamingIdentifier:", void, .{_renamingIdentifier});
    }

    pub fn expression(_self: *@This()) ?*Expression {
        return objc.msgSend(_self, "expression", ?*Expression, .{});
    }

    pub fn setExpression(_self: *@This(), _expression: ?*Expression) void {
        return objc.msgSend(_self, "setExpression:", void, .{_expression});
    }

    pub fn expressionResultType(_self: *@This()) AttributeType {
        return objc.msgSend(_self, "expressionResultType", AttributeType, .{});
    }

    pub fn setExpressionResultType(_self: *@This(), _expressionResultType: AttributeType) void {
        return objc.msgSend(_self, "setExpressionResultType:", void, .{_expressionResultType});
    }
};

pub const DeleteRule = enum(objc.NSUInteger) {
    NoActionDeleteRule = 0,
    NullifyDeleteRule = 1,
    CascadeDeleteRule = 2,
    DenyDeleteRule = 3,
};

/// https://developer.apple.com/documentation/CoreData/NSRelationshipDescription?language=objc
pub const RelationshipDescription = opaque {
    pub const InternalInfo = objc.ExternClass("NSRelationshipDescription", @This(), PropertyDescription, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn setValidationPredicatesWithValidationWarnings(_self: *@This(), _validationPredicates: ?*anyopaque, _validationWarnings: ?*anyopaque) void {
        return objc.msgSend(_self, "setValidationPredicates:withValidationWarnings:", void, .{ _validationPredicates, _validationWarnings });
    }

    pub fn entity(_self: *@This()) ?*EntityDescription {
        return objc.msgSend(_self, "entity", ?*EntityDescription, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*foundation.String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn isOptional(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isOptional", objc.BOOL, .{});
    }

    pub fn setOptional(_self: *@This(), _optional: objc.BOOL) void {
        return objc.msgSend(_self, "setOptional:", void, .{_optional});
    }

    pub fn isTransient(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isTransient", objc.BOOL, .{});
    }

    pub fn setTransient(_self: *@This(), _transient: objc.BOOL) void {
        return objc.msgSend(_self, "setTransient:", void, .{_transient});
    }

    pub fn validationPredicates(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "validationPredicates", ?*anyopaque, .{});
    }

    pub fn validationWarnings(_self: *@This()) ?*foundation.Array {
        return objc.msgSend(_self, "validationWarnings", ?*foundation.Array, .{});
    }

    pub fn userInfo(_self: *@This()) ?*foundation.Dictionary {
        return objc.msgSend(_self, "userInfo", ?*foundation.Dictionary, .{});
    }

    pub fn setUserInfo(_self: *@This(), _userInfo: ?*foundation.Dictionary) void {
        return objc.msgSend(_self, "setUserInfo:", void, .{_userInfo});
    }

    pub fn isIndexed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isIndexed", objc.BOOL, .{});
    }

    pub fn setIndexed(_self: *@This(), _indexed: objc.BOOL) void {
        return objc.msgSend(_self, "setIndexed:", void, .{_indexed});
    }

    pub fn versionHash(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "versionHash", ?*Data, .{});
    }

    pub fn versionHashModifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "versionHashModifier", ?*foundation.String, .{});
    }

    pub fn setVersionHashModifier(_self: *@This(), _versionHashModifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setVersionHashModifier:", void, .{_versionHashModifier});
    }

    pub fn isIndexedBySpotlight(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isIndexedBySpotlight", objc.BOOL, .{});
    }

    pub fn setIndexedBySpotlight(_self: *@This(), _indexedBySpotlight: objc.BOOL) void {
        return objc.msgSend(_self, "setIndexedBySpotlight:", void, .{_indexedBySpotlight});
    }

    pub fn isStoredInExternalRecord(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isStoredInExternalRecord", objc.BOOL, .{});
    }

    pub fn setStoredInExternalRecord(_self: *@This(), _storedInExternalRecord: objc.BOOL) void {
        return objc.msgSend(_self, "setStoredInExternalRecord:", void, .{_storedInExternalRecord});
    }

    pub fn renamingIdentifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "renamingIdentifier", ?*foundation.String, .{});
    }

    pub fn setRenamingIdentifier(_self: *@This(), _renamingIdentifier: ?*foundation.String) void {
        return objc.msgSend(_self, "setRenamingIdentifier:", void, .{_renamingIdentifier});
    }

    pub fn destinationEntity(_self: *@This()) ?*EntityDescription {
        return objc.msgSend(_self, "destinationEntity", ?*EntityDescription, .{});
    }

    pub fn setDestinationEntity(_self: *@This(), _destinationEntity: ?*EntityDescription) void {
        return objc.msgSend(_self, "setDestinationEntity:", void, .{_destinationEntity});
    }

    pub fn inverseRelationship(_self: *@This()) ?*RelationshipDescription {
        return objc.msgSend(_self, "inverseRelationship", ?*RelationshipDescription, .{});
    }

    pub fn setInverseRelationship(_self: *@This(), _inverseRelationship: ?*RelationshipDescription) void {
        return objc.msgSend(_self, "setInverseRelationship:", void, .{_inverseRelationship});
    }

    pub fn maxCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxCount", objc.NSUInteger, .{});
    }

    pub fn setMaxCount(_self: *@This(), _maxCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaxCount:", void, .{_maxCount});
    }

    pub fn minCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "minCount", objc.NSUInteger, .{});
    }

    pub fn setMinCount(_self: *@This(), _minCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMinCount:", void, .{_minCount});
    }

    pub fn deleteRule(_self: *@This()) DeleteRule {
        return objc.msgSend(_self, "deleteRule", DeleteRule, .{});
    }

    pub fn setDeleteRule(_self: *@This(), _deleteRule: DeleteRule) void {
        return objc.msgSend(_self, "setDeleteRule:", void, .{_deleteRule});
    }

    pub fn isToMany(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isToMany", objc.BOOL, .{});
    }

    pub fn isOrdered(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isOrdered", objc.BOOL, .{});
    }

    pub fn setOrdered(_self: *@This(), _ordered: objc.BOOL) void {
        return objc.msgSend(_self, "setOrdered:", void, .{_ordered});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSFetchIndexDescription?language=objc
pub const FetchIndexDescription = opaque {
    pub const InternalInfo = objc.ExternClass("NSFetchIndexDescription", @This(), objc.NSObject, &.{
        foundation.Coding,
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn initWithNameElements(_self: *@This(), _name: ?*foundation.String, _elements: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithName:elements:", *@This(), .{ _name, _elements });
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*foundation.String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn elements(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "elements", ?*anyopaque, .{});
    }

    pub fn setElements(_self: *@This(), _elements: ?*anyopaque) void {
        return objc.msgSend(_self, "setElements:", void, .{_elements});
    }

    pub fn entity(_self: *@This()) ?*EntityDescription {
        return objc.msgSend(_self, "entity", ?*EntityDescription, .{});
    }

    pub fn partialIndexPredicate(_self: *@This()) ?*Predicate {
        return objc.msgSend(_self, "partialIndexPredicate", ?*Predicate, .{});
    }

    pub fn setPartialIndexPredicate(_self: *@This(), _partialIndexPredicate: ?*Predicate) void {
        return objc.msgSend(_self, "setPartialIndexPredicate:", void, .{_partialIndexPredicate});
    }
};

pub const FetchIndexElementType = enum(objc.NSUInteger) {
    Binary = 0,
    RTree = 1,
};

/// https://developer.apple.com/documentation/CoreData/NSFetchIndexElementDescription?language=objc
pub const FetchIndexElementDescription = opaque {
    pub const InternalInfo = objc.ExternClass("NSFetchIndexElementDescription", @This(), objc.NSObject, &.{
        foundation.Coding,
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn initWithPropertyCollationType(_self: *@This(), _property: ?*PropertyDescription, _collationType: FetchIndexElementType) *@This() {
        return objc.msgSend(_self, "initWithProperty:collationType:", *@This(), .{ _property, _collationType });
    }

    pub fn property(_self: *@This()) ?*PropertyDescription {
        return objc.msgSend(_self, "property", ?*PropertyDescription, .{});
    }

    pub fn propertyName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "propertyName", ?*foundation.String, .{});
    }

    pub fn collationType(_self: *@This()) FetchIndexElementType {
        return objc.msgSend(_self, "collationType", FetchIndexElementType, .{});
    }

    pub fn setCollationType(_self: *@This(), _collationType: FetchIndexElementType) void {
        return objc.msgSend(_self, "setCollationType:", void, .{_collationType});
    }

    pub fn isAscending(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAscending", objc.BOOL, .{});
    }

    pub fn setAscending(_self: *@This(), _ascending: objc.BOOL) void {
        return objc.msgSend(_self, "setAscending:", void, .{_ascending});
    }

    pub fn indexDescription(_self: *@This()) ?*FetchIndexDescription {
        return objc.msgSend(_self, "indexDescription", ?*FetchIndexDescription, .{});
    }
};

pub const PersistentStoreRequestType = enum(objc.NSUInteger) {
    FetchRequestType = 1,
    SaveRequestType = 2,
    BatchInsertRequestType = 5,
    BatchUpdateRequestType = 6,
    BatchDeleteRequestType = 7,
};

/// https://developer.apple.com/documentation/CoreData/NSPersistentStoreRequest?language=objc
pub const PersistentStoreRequest = opaque {
    pub const InternalInfo = objc.ExternClass("NSPersistentStoreRequest", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn affectedStores(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "affectedStores", ?*anyopaque, .{});
    }

    pub fn setAffectedStores(_self: *@This(), _affectedStores: ?*anyopaque) void {
        return objc.msgSend(_self, "setAffectedStores:", void, .{_affectedStores});
    }

    pub fn requestType(_self: *@This()) PersistentStoreRequestType {
        return objc.msgSend(_self, "requestType", PersistentStoreRequestType, .{});
    }
};

pub const SnapshotEventType = enum(objc.NSUInteger) {
    UndoInsertion = 2,
    UndoDeletion = 4,
    UndoUpdate = 8,
    Rollback = 16,
    Refresh = 32,
    MergePolicy = 64,
};

/// https://developer.apple.com/documentation/CoreData/NSManagedObject?language=objc
pub const ManagedObject = opaque {
    pub const InternalInfo = objc.ExternClass("NSManagedObject", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn entity(_self: *@This()) ?*EntityDescription {
        return objc.msgSend(_self, "entity", ?*EntityDescription, .{});
    }

    pub fn fetchRequest(_self: *@This()) ?*FetchRequest {
        return objc.msgSend(_self, "fetchRequest", ?*FetchRequest, .{});
    }

    pub fn initWithEntityInsertIntoManagedObjectContext(_self: *@This(), _entity: ?*EntityDescription, _context: ?*ManagedObjectContext) ?*anyopaque {
        return objc.msgSend(_self, "initWithEntity:insertIntoManagedObjectContext:", ?*anyopaque, .{ _entity, _context });
    }

    pub fn initWithContext(_self: *@This(), _moc: ?*ManagedObjectContext) *@This() {
        return objc.msgSend(_self, "initWithContext:", *@This(), .{_moc});
    }

    pub fn hasFaultForRelationshipNamed(_self: *@This(), _key: ?*foundation.String) objc.BOOL {
        return objc.msgSend(_self, "hasFaultForRelationshipNamed:", objc.BOOL, .{_key});
    }

    pub fn objectIDsForRelationshipNamed(_self: *@This(), _key: ?*foundation.String) ?*anyopaque {
        return objc.msgSend(_self, "objectIDsForRelationshipNamed:", ?*anyopaque, .{_key});
    }

    pub fn willAccessValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willAccessValueForKey:", void, .{_key});
    }

    pub fn didAccessValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didAccessValueForKey:", void, .{_key});
    }

    pub fn willChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "willChangeValueForKey:", void, .{_key});
    }

    pub fn didChangeValueForKey(_self: *@This(), _key: ?*foundation.String) void {
        return objc.msgSend(_self, "didChangeValueForKey:", void, .{_key});
    }

    pub fn willChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _inKey: ?*foundation.String, _inMutationKind: foundation.KeyValueSetMutationKind, _inObjects: ?*foundation.Set) void {
        return objc.msgSend(_self, "willChangeValueForKey:withSetMutation:usingObjects:", void, .{ _inKey, _inMutationKind, _inObjects });
    }

    pub fn didChangeValueForKeyWithSetMutationUsingObjects(_self: *@This(), _inKey: ?*foundation.String, _inMutationKind: foundation.KeyValueSetMutationKind, _inObjects: ?*foundation.Set) void {
        return objc.msgSend(_self, "didChangeValueForKey:withSetMutation:usingObjects:", void, .{ _inKey, _inMutationKind, _inObjects });
    }

    pub fn awakeFromFetch(_self: *@This()) void {
        return objc.msgSend(_self, "awakeFromFetch", void, .{});
    }

    pub fn awakeFromInsert(_self: *@This()) void {
        return objc.msgSend(_self, "awakeFromInsert", void, .{});
    }

    pub fn awakeFromSnapshotEvents(_self: *@This(), _flags: SnapshotEventType) void {
        return objc.msgSend(_self, "awakeFromSnapshotEvents:", void, .{_flags});
    }

    pub fn prepareForDeletion(_self: *@This()) void {
        return objc.msgSend(_self, "prepareForDeletion", void, .{});
    }

    pub fn willSave(_self: *@This()) void {
        return objc.msgSend(_self, "willSave", void, .{});
    }

    pub fn didSave(_self: *@This()) void {
        return objc.msgSend(_self, "didSave", void, .{});
    }

    pub fn willTurnIntoFault(_self: *@This()) void {
        return objc.msgSend(_self, "willTurnIntoFault", void, .{});
    }

    pub fn didTurnIntoFault(_self: *@This()) void {
        return objc.msgSend(_self, "didTurnIntoFault", void, .{});
    }

    pub fn valueForKey(_self: *@This(), _key: ?*foundation.String) *objc.Id {
        return objc.msgSend(_self, "valueForKey:", *objc.Id, .{_key});
    }

    pub fn setValueForKey(_self: *@This(), _value: *objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setValue:forKey:", void, .{ _value, _key });
    }

    pub fn primitiveValueForKey(_self: *@This(), _key: ?*foundation.String) *objc.Id {
        return objc.msgSend(_self, "primitiveValueForKey:", *objc.Id, .{_key});
    }

    pub fn setPrimitiveValueForKey(_self: *@This(), _value: *objc.Id, _key: ?*foundation.String) void {
        return objc.msgSend(_self, "setPrimitiveValue:forKey:", void, .{ _value, _key });
    }

    pub fn committedValuesForKeys(_self: *@This(), _keys: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "committedValuesForKeys:", ?*anyopaque, .{_keys});
    }

    pub fn changedValues(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "changedValues", ?*anyopaque, .{});
    }

    pub fn changedValuesForCurrentEvent(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "changedValuesForCurrentEvent", ?*anyopaque, .{});
    }

    pub fn validateValueForKeyError(_self: *@This(), _value: ?**objc.Id, _key: ?*String, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "validateValue:forKey:error:", objc.BOOL, .{ _value, _key, _error });
    }

    pub fn validateForDelete(_self: *@This(), _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "validateForDelete:", objc.BOOL, .{_error});
    }

    pub fn validateForInsert(_self: *@This(), _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "validateForInsert:", objc.BOOL, .{_error});
    }

    pub fn validateForUpdate(_self: *@This(), _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "validateForUpdate:", objc.BOOL, .{_error});
    }

    pub fn setObservationInfo(_self: *@This(), _inObservationInfo: ?*anyopaque) void {
        return objc.msgSend(_self, "setObservationInfo:", void, .{_inObservationInfo});
    }

    pub fn observationInfo(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "observationInfo", ?*anyopaque, .{});
    }

    pub fn contextShouldIgnoreUnmodeledPropertyChanges(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "contextShouldIgnoreUnmodeledPropertyChanges", objc.BOOL, .{});
    }

    pub fn managedObjectContext(_self: *@This()) ?*ManagedObjectContext {
        return objc.msgSend(_self, "managedObjectContext", ?*ManagedObjectContext, .{});
    }

    pub fn objectID(_self: *@This()) ?*ManagedObjectID {
        return objc.msgSend(_self, "objectID", ?*ManagedObjectID, .{});
    }

    pub fn isInserted(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isInserted", objc.BOOL, .{});
    }

    pub fn isUpdated(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isUpdated", objc.BOOL, .{});
    }

    pub fn isDeleted(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isDeleted", objc.BOOL, .{});
    }

    pub fn hasChanges(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "hasChanges", objc.BOOL, .{});
    }

    pub fn hasPersistentChangedValues(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "hasPersistentChangedValues", objc.BOOL, .{});
    }

    pub fn isFault(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isFault", objc.BOOL, .{});
    }

    pub fn faultingState(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "faultingState", objc.NSUInteger, .{});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSManagedObjectID?language=objc
pub const ManagedObjectID = opaque {
    pub const InternalInfo = objc.ExternClass("NSManagedObjectID", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn uriRepresentation(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "URIRepresentation", ?*URL, .{});
    }

    pub fn entity(_self: *@This()) ?*EntityDescription {
        return objc.msgSend(_self, "entity", ?*EntityDescription, .{});
    }

    pub fn persistentStore(_self: *@This()) ?*PersistentStore {
        return objc.msgSend(_self, "persistentStore", ?*PersistentStore, .{});
    }

    pub fn isTemporaryID(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isTemporaryID", objc.BOOL, .{});
    }
};

pub const FetchRequestResultType = enum(objc.NSUInteger) {
    ManagedObjectResultType = 0,
    ManagedObjectIDResultType = 1,
    DictionaryResultType = 2,
    CountResultType = 4,
};

/// https://developer.apple.com/documentation/CoreData/NSFetchRequestResult?language=objc
pub const FetchRequestResult = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSFetchRequest?language=objc
pub fn FetchRequest(comptime ResultType: type) type {
    return struct {
        pub const InternalInfo = objc.ExternClass("NSFetchRequest", @This(), PersistentStoreRequest, &.{
            foundation.Coding,
            foundation.Copying,
        });
        pub const as = InternalInfo.as;
        pub const retain = InternalInfo.retain;
        pub const release = InternalInfo.release;
        pub const autorelease = InternalInfo.autorelease;
        pub const new = InternalInfo.new;
        pub const alloc = InternalInfo.alloc;
        pub const allocInit = InternalInfo.allocInit;

        pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
            return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
        }

        pub fn hash(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
        }

        pub fn superclass(_self: *@This()) *objc.Class {
            return objc.msgSend(_self, "superclass", *objc.Class, .{});
        }

        pub fn class(_self: *@This()) *objc.Class {
            return objc.msgSend(_self, "class", *objc.Class, .{});
        }

        pub fn self(_self: *@This()) *@This() {
            return objc.msgSend(_self, "self", *@This(), .{});
        }

        pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
            return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
        }

        pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
        }

        pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
        }

        pub fn isProxy(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
        }

        pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
            return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
        }

        pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
            return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn retainCount(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
        }

        pub fn zone(_self: *@This()) ?*objc._NSZone {
            return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
        }

        pub fn description(_self: *@This()) ?*objc.NSString {
            return objc.msgSend(_self, "description", ?*objc.NSString, .{});
        }

        pub fn debugDescription(_self: *@This()) ?*objc.NSString {
            return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
        }

        pub fn load(_self: *@This()) void {
            return objc.msgSend(_self, "load", void, .{});
        }

        pub fn initialize(_self: *@This()) void {
            return objc.msgSend(_self, "initialize", void, .{});
        }

        pub fn init(_self: *@This()) *@This() {
            return objc.msgSend(_self, "init", *@This(), .{});
        }

        pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
            return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
        }

        pub fn dealloc(_self: *@This()) void {
            return objc.msgSend(_self, "dealloc", void, .{});
        }

        pub fn finalize(_self: *@This()) void {
            return objc.msgSend(_self, "finalize", void, .{});
        }

        pub fn copy(_self: *@This()) *objc.Id {
            return objc.msgSend(_self, "copy", *objc.Id, .{});
        }

        pub fn mutableCopy(_self: *@This()) *objc.Id {
            return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
        }

        pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
            return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
        }

        pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
            return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
        }

        pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
            return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
            return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
            return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
            return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
        }

        pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
            return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
        }

        pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
            return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
        }

        pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
            return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
        }

        pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
            return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
        }

        pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
        }

        pub fn retainWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
        }

        pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
            return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
        }

        pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
            return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
        }

        pub fn affectedStores(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "affectedStores", ?*anyopaque, .{});
        }

        pub fn setAffectedStores(_self: *@This(), _affectedStores: ?*anyopaque) void {
            return objc.msgSend(_self, "setAffectedStores:", void, .{_affectedStores});
        }

        pub fn requestType(_self: *@This()) PersistentStoreRequestType {
            return objc.msgSend(_self, "requestType", PersistentStoreRequestType, .{});
        }

        pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
            return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
        }

        pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
            return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
        }

        pub fn fetchRequestWithEntityName(_self: *@This(), _entityName: ?*String) *@This() {
            return objc.msgSend(_self, "fetchRequestWithEntityName:", *@This(), .{_entityName});
        }

        pub fn initWithEntityName(_self: *@This(), _entityName: ?*String) *@This() {
            return objc.msgSend(_self, "initWithEntityName:", *@This(), .{_entityName});
        }

        pub fn execute(_self: *@This(), _error: ?*?*Error) ?*anyopaque {
            return objc.msgSend(_self, "execute:", ?*anyopaque, .{_error});
        }

        pub fn entity(_self: *@This()) ?*EntityDescription {
            return objc.msgSend(_self, "entity", ?*EntityDescription, .{});
        }

        pub fn setEntity(_self: *@This(), _entity: ?*EntityDescription) void {
            return objc.msgSend(_self, "setEntity:", void, .{_entity});
        }

        pub fn entityName(_self: *@This()) ?*String {
            return objc.msgSend(_self, "entityName", ?*String, .{});
        }

        pub fn predicate(_self: *@This()) ?*Predicate {
            return objc.msgSend(_self, "predicate", ?*Predicate, .{});
        }

        pub fn setPredicate(_self: *@This(), _predicate: ?*Predicate) void {
            return objc.msgSend(_self, "setPredicate:", void, .{_predicate});
        }

        pub fn sortDescriptors(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "sortDescriptors", ?*anyopaque, .{});
        }

        pub fn setSortDescriptors(_self: *@This(), _sortDescriptors: ?*anyopaque) void {
            return objc.msgSend(_self, "setSortDescriptors:", void, .{_sortDescriptors});
        }

        pub fn fetchLimit(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "fetchLimit", objc.NSUInteger, .{});
        }

        pub fn setFetchLimit(_self: *@This(), _fetchLimit: objc.NSUInteger) void {
            return objc.msgSend(_self, "setFetchLimit:", void, .{_fetchLimit});
        }

        pub fn resultType(_self: *@This()) FetchRequestResultType {
            return objc.msgSend(_self, "resultType", FetchRequestResultType, .{});
        }

        pub fn setResultType(_self: *@This(), _resultType: FetchRequestResultType) void {
            return objc.msgSend(_self, "setResultType:", void, .{_resultType});
        }

        pub fn includesSubentities(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "includesSubentities", objc.BOOL, .{});
        }

        pub fn setIncludesSubentities(_self: *@This(), _includesSubentities: objc.BOOL) void {
            return objc.msgSend(_self, "setIncludesSubentities:", void, .{_includesSubentities});
        }

        pub fn includesPropertyValues(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "includesPropertyValues", objc.BOOL, .{});
        }

        pub fn setIncludesPropertyValues(_self: *@This(), _includesPropertyValues: objc.BOOL) void {
            return objc.msgSend(_self, "setIncludesPropertyValues:", void, .{_includesPropertyValues});
        }

        pub fn returnsObjectsAsFaults(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "returnsObjectsAsFaults", objc.BOOL, .{});
        }

        pub fn setReturnsObjectsAsFaults(_self: *@This(), _returnsObjectsAsFaults: objc.BOOL) void {
            return objc.msgSend(_self, "setReturnsObjectsAsFaults:", void, .{_returnsObjectsAsFaults});
        }

        pub fn relationshipKeyPathsForPrefetching(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "relationshipKeyPathsForPrefetching", ?*anyopaque, .{});
        }

        pub fn setRelationshipKeyPathsForPrefetching(_self: *@This(), _relationshipKeyPathsForPrefetching: ?*anyopaque) void {
            return objc.msgSend(_self, "setRelationshipKeyPathsForPrefetching:", void, .{_relationshipKeyPathsForPrefetching});
        }

        pub fn includesPendingChanges(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "includesPendingChanges", objc.BOOL, .{});
        }

        pub fn setIncludesPendingChanges(_self: *@This(), _includesPendingChanges: objc.BOOL) void {
            return objc.msgSend(_self, "setIncludesPendingChanges:", void, .{_includesPendingChanges});
        }

        pub fn returnsDistinctResults(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "returnsDistinctResults", objc.BOOL, .{});
        }

        pub fn setReturnsDistinctResults(_self: *@This(), _returnsDistinctResults: objc.BOOL) void {
            return objc.msgSend(_self, "setReturnsDistinctResults:", void, .{_returnsDistinctResults});
        }

        pub fn propertiesToFetch(_self: *@This()) ?*Array {
            return objc.msgSend(_self, "propertiesToFetch", ?*Array, .{});
        }

        pub fn setPropertiesToFetch(_self: *@This(), _propertiesToFetch: ?*Array) void {
            return objc.msgSend(_self, "setPropertiesToFetch:", void, .{_propertiesToFetch});
        }

        pub fn fetchOffset(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "fetchOffset", objc.NSUInteger, .{});
        }

        pub fn setFetchOffset(_self: *@This(), _fetchOffset: objc.NSUInteger) void {
            return objc.msgSend(_self, "setFetchOffset:", void, .{_fetchOffset});
        }

        pub fn fetchBatchSize(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "fetchBatchSize", objc.NSUInteger, .{});
        }

        pub fn setFetchBatchSize(_self: *@This(), _fetchBatchSize: objc.NSUInteger) void {
            return objc.msgSend(_self, "setFetchBatchSize:", void, .{_fetchBatchSize});
        }

        pub fn shouldRefreshRefetchedObjects(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "shouldRefreshRefetchedObjects", objc.BOOL, .{});
        }

        pub fn setShouldRefreshRefetchedObjects(_self: *@This(), _shouldRefreshRefetchedObjects: objc.BOOL) void {
            return objc.msgSend(_self, "setShouldRefreshRefetchedObjects:", void, .{_shouldRefreshRefetchedObjects});
        }

        pub fn propertiesToGroupBy(_self: *@This()) ?*Array {
            return objc.msgSend(_self, "propertiesToGroupBy", ?*Array, .{});
        }

        pub fn setPropertiesToGroupBy(_self: *@This(), _propertiesToGroupBy: ?*Array) void {
            return objc.msgSend(_self, "setPropertiesToGroupBy:", void, .{_propertiesToGroupBy});
        }

        pub fn havingPredicate(_self: *@This()) ?*Predicate {
            return objc.msgSend(_self, "havingPredicate", ?*Predicate, .{});
        }

        pub fn setHavingPredicate(_self: *@This(), _havingPredicate: ?*Predicate) void {
            return objc.msgSend(_self, "setHavingPredicate:", void, .{_havingPredicate});
        }
    };
}

pub const PersistentStoreAsynchronousFetchResultCompletionBlock = *const fn (?*AsynchronousFetchResult) callconv(.C) void;

/// https://developer.apple.com/documentation/CoreData/NSAsynchronousFetchRequest?language=objc
pub fn AsynchronousFetchRequest(comptime ResultType: type) type {
    return struct {
        pub const InternalInfo = objc.ExternClass("NSAsynchronousFetchRequest", @This(), PersistentStoreRequest, &.{});
        pub const as = InternalInfo.as;
        pub const retain = InternalInfo.retain;
        pub const release = InternalInfo.release;
        pub const autorelease = InternalInfo.autorelease;
        pub const new = InternalInfo.new;
        pub const alloc = InternalInfo.alloc;
        pub const allocInit = InternalInfo.allocInit;

        pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
            return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
        }

        pub fn hash(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
        }

        pub fn superclass(_self: *@This()) *objc.Class {
            return objc.msgSend(_self, "superclass", *objc.Class, .{});
        }

        pub fn class(_self: *@This()) *objc.Class {
            return objc.msgSend(_self, "class", *objc.Class, .{});
        }

        pub fn self(_self: *@This()) *@This() {
            return objc.msgSend(_self, "self", *@This(), .{});
        }

        pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
            return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
        }

        pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
        }

        pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
        }

        pub fn isProxy(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
        }

        pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
            return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
        }

        pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
            return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn retainCount(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
        }

        pub fn zone(_self: *@This()) ?*objc._NSZone {
            return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
        }

        pub fn description(_self: *@This()) ?*objc.NSString {
            return objc.msgSend(_self, "description", ?*objc.NSString, .{});
        }

        pub fn debugDescription(_self: *@This()) ?*objc.NSString {
            return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
        }

        pub fn load(_self: *@This()) void {
            return objc.msgSend(_self, "load", void, .{});
        }

        pub fn initialize(_self: *@This()) void {
            return objc.msgSend(_self, "initialize", void, .{});
        }

        pub fn init(_self: *@This()) *@This() {
            return objc.msgSend(_self, "init", *@This(), .{});
        }

        pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
            return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
        }

        pub fn dealloc(_self: *@This()) void {
            return objc.msgSend(_self, "dealloc", void, .{});
        }

        pub fn finalize(_self: *@This()) void {
            return objc.msgSend(_self, "finalize", void, .{});
        }

        pub fn copy(_self: *@This()) *objc.Id {
            return objc.msgSend(_self, "copy", *objc.Id, .{});
        }

        pub fn mutableCopy(_self: *@This()) *objc.Id {
            return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
        }

        pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
            return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
        }

        pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
            return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
        }

        pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
            return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
            return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
            return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
            return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
        }

        pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
            return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
        }

        pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
            return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
        }

        pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
            return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
        }

        pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
            return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
        }

        pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
        }

        pub fn retainWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
        }

        pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
            return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
        }

        pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
            return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
        }

        pub fn affectedStores(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "affectedStores", ?*anyopaque, .{});
        }

        pub fn setAffectedStores(_self: *@This(), _affectedStores: ?*anyopaque) void {
            return objc.msgSend(_self, "setAffectedStores:", void, .{_affectedStores});
        }

        pub fn requestType(_self: *@This()) PersistentStoreRequestType {
            return objc.msgSend(_self, "requestType", PersistentStoreRequestType, .{});
        }

        pub fn initWithFetchRequestCompletionBlock(_self: *@This(), _request: ?*anyopaque, _blk: *const fn (?*anyopaque) callconv(.C) void) *@This() {
            return objc.msgSend(_self, "initWithFetchRequest:completionBlock:", *@This(), .{ _request, _blk });
        }

        pub fn fetchRequest(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "fetchRequest", ?*anyopaque, .{});
        }

        pub fn completionBlock(_self: *@This()) PersistentStoreAsynchronousFetchResultCompletionBlock {
            return objc.msgSend(_self, "completionBlock", PersistentStoreAsynchronousFetchResultCompletionBlock, .{});
        }

        pub fn estimatedResultCount(_self: *@This()) objc.NSInteger {
            return objc.msgSend(_self, "estimatedResultCount", objc.NSInteger, .{});
        }

        pub fn setEstimatedResultCount(_self: *@This(), _estimatedResultCount: objc.NSInteger) void {
            return objc.msgSend(_self, "setEstimatedResultCount:", void, .{_estimatedResultCount});
        }
    };
}

/// https://developer.apple.com/documentation/CoreData/NSFetchRequestExpression?language=objc
pub const FetchRequestExpression = opaque {
    pub const InternalInfo = objc.ExternClass("NSFetchRequestExpression", @This(), Expression, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn expressionWithFormatArgumentArray(_self: *@This(), _expressionFormat: ?*foundation.String, _arguments: ?*foundation.Array) ?*foundation.Expression {
        return objc.msgSend(_self, "expressionWithFormat:argumentArray:", ?*foundation.Expression, .{ _expressionFormat, _arguments });
    }

    pub fn expressionWithFormat(_self: *@This(), _expressionFormat: ?*foundation.String) ?*foundation.Expression {
        return objc.msgSend(_self, "expressionWithFormat:", ?*foundation.Expression, .{_expressionFormat});
    }

    pub fn expressionWithFormatArguments(_self: *@This(), _expressionFormat: ?*foundation.String, _argList: objc.va_list) ?*foundation.Expression {
        return objc.msgSend(_self, "expressionWithFormat:arguments:", ?*foundation.Expression, .{ _expressionFormat, _argList });
    }

    pub fn expressionForConstantValue(_self: *@This(), _obj: *objc.Id) ?*foundation.Expression {
        return objc.msgSend(_self, "expressionForConstantValue:", ?*foundation.Expression, .{_obj});
    }

    pub fn expressionForEvaluatedObject(_self: *@This()) ?*foundation.Expression {
        return objc.msgSend(_self, "expressionForEvaluatedObject", ?*foundation.Expression, .{});
    }

    pub fn expressionForVariable(_self: *@This(), _string: ?*foundation.String) ?*foundation.Expression {
        return objc.msgSend(_self, "expressionForVariable:", ?*foundation.Expression, .{_string});
    }

    pub fn expressionForKeyPath(_self: *@This(), _keyPath: ?*foundation.String) ?*foundation.Expression {
        return objc.msgSend(_self, "expressionForKeyPath:", ?*foundation.Expression, .{_keyPath});
    }

    pub fn expressionForFunctionArguments(_self: *@This(), _name: ?*foundation.String, _parameters: ?*foundation.Array) ?*foundation.Expression {
        return objc.msgSend(_self, "expressionForFunction:arguments:", ?*foundation.Expression, .{ _name, _parameters });
    }

    pub fn expressionForAggregate(_self: *@This(), _subexpressions: ?*anyopaque) ?*foundation.Expression {
        return objc.msgSend(_self, "expressionForAggregate:", ?*foundation.Expression, .{_subexpressions});
    }

    pub fn expressionForUnionSetWith(_self: *@This(), _left: ?*foundation.Expression, _right: ?*foundation.Expression) ?*foundation.Expression {
        return objc.msgSend(_self, "expressionForUnionSet:with:", ?*foundation.Expression, .{ _left, _right });
    }

    pub fn expressionForIntersectSetWith(_self: *@This(), _left: ?*foundation.Expression, _right: ?*foundation.Expression) ?*foundation.Expression {
        return objc.msgSend(_self, "expressionForIntersectSet:with:", ?*foundation.Expression, .{ _left, _right });
    }

    pub fn expressionForMinusSetWith(_self: *@This(), _left: ?*foundation.Expression, _right: ?*foundation.Expression) ?*foundation.Expression {
        return objc.msgSend(_self, "expressionForMinusSet:with:", ?*foundation.Expression, .{ _left, _right });
    }

    pub fn expressionForSubqueryUsingIteratorVariablePredicate(_self: *@This(), _expression: ?*foundation.Expression, _variable: ?*foundation.String, _predicate: ?*foundation.Predicate) ?*foundation.Expression {
        return objc.msgSend(_self, "expressionForSubquery:usingIteratorVariable:predicate:", ?*foundation.Expression, .{ _expression, _variable, _predicate });
    }

    pub fn expressionForFunctionSelectorNameArguments(_self: *@This(), _target: ?*foundation.Expression, _name: ?*foundation.String, _parameters: ?*foundation.Array) ?*foundation.Expression {
        return objc.msgSend(_self, "expressionForFunction:selectorName:arguments:", ?*foundation.Expression, .{ _target, _name, _parameters });
    }

    pub fn expressionForAnyKey(_self: *@This()) ?*foundation.Expression {
        return objc.msgSend(_self, "expressionForAnyKey", ?*foundation.Expression, .{});
    }

    pub fn expressionForBlockArguments(_self: *@This(), _block: *const fn (*objc.Id, ?*anyopaque, ?*foundation.MutableDictionary) callconv(.C) *objc.Id, _arguments: ?*anyopaque) ?*foundation.Expression {
        return objc.msgSend(_self, "expressionForBlock:arguments:", ?*foundation.Expression, .{ _block, _arguments });
    }

    pub fn expressionForConditionalTrueExpressionFalseExpression(_self: *@This(), _predicate: ?*foundation.Predicate, _trueExpression: ?*foundation.Expression, _falseExpression: ?*foundation.Expression) ?*foundation.Expression {
        return objc.msgSend(_self, "expressionForConditional:trueExpression:falseExpression:", ?*foundation.Expression, .{ _predicate, _trueExpression, _falseExpression });
    }

    pub fn initWithExpressionType(_self: *@This(), _type: foundation.ExpressionType) *@This() {
        return objc.msgSend(_self, "initWithExpressionType:", *@This(), .{_type});
    }

    pub fn expressionValueWithObjectContext(_self: *@This(), _object: *objc.Id, _context: ?*foundation.MutableDictionary) *objc.Id {
        return objc.msgSend(_self, "expressionValueWithObject:context:", *objc.Id, .{ _object, _context });
    }

    pub fn allowEvaluation(_self: *@This()) void {
        return objc.msgSend(_self, "allowEvaluation", void, .{});
    }

    pub fn expressionType(_self: *@This()) foundation.ExpressionType {
        return objc.msgSend(_self, "expressionType", foundation.ExpressionType, .{});
    }

    pub fn constantValue(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "constantValue", *objc.Id, .{});
    }

    pub fn keyPath(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "keyPath", ?*foundation.String, .{});
    }

    pub fn function(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "function", ?*foundation.String, .{});
    }

    pub fn variable(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "variable", ?*foundation.String, .{});
    }

    pub fn operand(_self: *@This()) ?*foundation.Expression {
        return objc.msgSend(_self, "operand", ?*foundation.Expression, .{});
    }

    pub fn arguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "arguments", ?*anyopaque, .{});
    }

    pub fn collection(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "collection", *objc.Id, .{});
    }

    pub fn predicate(_self: *@This()) ?*foundation.Predicate {
        return objc.msgSend(_self, "predicate", ?*foundation.Predicate, .{});
    }

    pub fn leftExpression(_self: *@This()) ?*foundation.Expression {
        return objc.msgSend(_self, "leftExpression", ?*foundation.Expression, .{});
    }

    pub fn rightExpression(_self: *@This()) ?*foundation.Expression {
        return objc.msgSend(_self, "rightExpression", ?*foundation.Expression, .{});
    }

    pub fn trueExpression(_self: *@This()) ?*foundation.Expression {
        return objc.msgSend(_self, "trueExpression", ?*foundation.Expression, .{});
    }

    pub fn falseExpression(_self: *@This()) ?*foundation.Expression {
        return objc.msgSend(_self, "falseExpression", ?*foundation.Expression, .{});
    }

    pub fn expressionBlock(_self: *@This()) *const fn (*objc.Id, ?*anyopaque, ?*foundation.MutableDictionary) callconv(.C) *objc.Id {
        return objc.msgSend(_self, "expressionBlock", *const fn (*objc.Id, ?*anyopaque, ?*foundation.MutableDictionary) callconv(.C) *objc.Id, .{});
    }

    pub fn expressionForFetchContextCountOnly(_self: *@This(), _fetch: ?*Expression, _context: ?*Expression, _countFlag: objc.BOOL) ?*Expression {
        return objc.msgSend(_self, "expressionForFetch:context:countOnly:", ?*Expression, .{ _fetch, _context, _countFlag });
    }

    pub fn requestExpression(_self: *@This()) ?*Expression {
        return objc.msgSend(_self, "requestExpression", ?*Expression, .{});
    }

    pub fn contextExpression(_self: *@This()) ?*Expression {
        return objc.msgSend(_self, "contextExpression", ?*Expression, .{});
    }

    pub fn isCountOnlyRequest(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isCountOnlyRequest", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSManagedObjectModel?language=objc
pub const ManagedObjectModel = opaque {
    pub const InternalInfo = objc.ExternClass("NSManagedObjectModel", @This(), objc.NSObject, &.{
        foundation.Coding,
        foundation.Copying,
        foundation.FastEnumeration,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn countByEnumeratingWithStateObjectsCount(_self: *@This(), _state: ?*foundation.FastEnumerationState, _buffer: ?**objc.Id, _len: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(_self, "countByEnumeratingWithState:objects:count:", objc.NSUInteger, .{ _state, _buffer, _len });
    }

    pub fn mergedModelFromBundles(_self: *@This(), _bundles: ?*anyopaque) ?*ManagedObjectModel {
        return objc.msgSend(_self, "mergedModelFromBundles:", ?*ManagedObjectModel, .{_bundles});
    }

    pub fn modelByMergingModels(_self: *@This(), _models: ?*anyopaque) ?*ManagedObjectModel {
        return objc.msgSend(_self, "modelByMergingModels:", ?*ManagedObjectModel, .{_models});
    }

    pub fn initWithContentsOfURL(_self: *@This(), _url: ?*URL) *@This() {
        return objc.msgSend(_self, "initWithContentsOfURL:", *@This(), .{_url});
    }

    pub fn entitiesForConfiguration(_self: *@This(), _configuration: ?*String) ?*anyopaque {
        return objc.msgSend(_self, "entitiesForConfiguration:", ?*anyopaque, .{_configuration});
    }

    pub fn setEntitiesForConfiguration(_self: *@This(), _entities: ?*anyopaque, _configuration: ?*String) void {
        return objc.msgSend(_self, "setEntities:forConfiguration:", void, .{ _entities, _configuration });
    }

    pub fn setFetchRequestTemplateForName(_self: *@This(), _fetchRequestTemplate: ?*FetchRequest, _name: ?*String) void {
        return objc.msgSend(_self, "setFetchRequestTemplate:forName:", void, .{ _fetchRequestTemplate, _name });
    }

    pub fn fetchRequestTemplateForName(_self: *@This(), _name: ?*String) ?*FetchRequest {
        return objc.msgSend(_self, "fetchRequestTemplateForName:", ?*FetchRequest, .{_name});
    }

    pub fn fetchRequestFromTemplateWithNameSubstitutionVariables(_self: *@This(), _name: ?*String, _variables: ?*anyopaque) ?*FetchRequest {
        return objc.msgSend(_self, "fetchRequestFromTemplateWithName:substitutionVariables:", ?*FetchRequest, .{ _name, _variables });
    }

    pub fn mergedModelFromBundlesForStoreMetadata(_self: *@This(), _bundles: ?*anyopaque, _metadata: ?*anyopaque) ?*ManagedObjectModel {
        return objc.msgSend(_self, "mergedModelFromBundles:forStoreMetadata:", ?*ManagedObjectModel, .{ _bundles, _metadata });
    }

    pub fn modelByMergingModelsForStoreMetadata(_self: *@This(), _models: ?*anyopaque, _metadata: ?*anyopaque) ?*ManagedObjectModel {
        return objc.msgSend(_self, "modelByMergingModels:forStoreMetadata:", ?*ManagedObjectModel, .{ _models, _metadata });
    }

    pub fn isConfigurationCompatibleWithStoreMetadata(_self: *@This(), _configuration: ?*String, _metadata: ?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "isConfiguration:compatibleWithStoreMetadata:", objc.BOOL, .{ _configuration, _metadata });
    }

    pub fn checksumsForVersionedModelAtURLError(_self: *@This(), _modelURL: ?*URL, _error: ?*?*Error) ?*anyopaque {
        return objc.msgSend(_self, "checksumsForVersionedModelAtURL:error:", ?*anyopaque, .{ _modelURL, _error });
    }

    pub fn entitiesByName(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "entitiesByName", ?*anyopaque, .{});
    }

    pub fn entities(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "entities", ?*anyopaque, .{});
    }

    pub fn setEntities(_self: *@This(), _entities: ?*anyopaque) void {
        return objc.msgSend(_self, "setEntities:", void, .{_entities});
    }

    pub fn configurations(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "configurations", ?*anyopaque, .{});
    }

    pub fn localizationDictionary(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "localizationDictionary", ?*anyopaque, .{});
    }

    pub fn setLocalizationDictionary(_self: *@This(), _localizationDictionary: ?*anyopaque) void {
        return objc.msgSend(_self, "setLocalizationDictionary:", void, .{_localizationDictionary});
    }

    pub fn fetchRequestTemplatesByName(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "fetchRequestTemplatesByName", ?*anyopaque, .{});
    }

    pub fn versionIdentifiers(_self: *@This()) ?*foundation.Set {
        return objc.msgSend(_self, "versionIdentifiers", ?*foundation.Set, .{});
    }

    pub fn setVersionIdentifiers(_self: *@This(), _versionIdentifiers: ?*foundation.Set) void {
        return objc.msgSend(_self, "setVersionIdentifiers:", void, .{_versionIdentifiers});
    }

    pub fn entityVersionHashesByName(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "entityVersionHashesByName", ?*anyopaque, .{});
    }

    pub fn versionChecksum(_self: *@This()) ?*String {
        return objc.msgSend(_self, "versionChecksum", ?*String, .{});
    }
};

pub const ManagedObjectContextConcurrencyType = enum(objc.NSUInteger) {
    ConfinementConcurrencyType = 0,
    PrivateQueueConcurrencyType = 1,
    MainQueueConcurrencyType = 2,
};

/// https://developer.apple.com/documentation/CoreData/NSManagedObjectContext?language=objc
pub const ManagedObjectContext = opaque {
    pub const InternalInfo = objc.ExternClass("NSManagedObjectContext", @This(), objc.NSObject, &.{
        foundation.Coding,
        foundation.Locking,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn lock(_self: *@This()) void {
        return objc.msgSend(_self, "lock", void, .{});
    }

    pub fn unlock(_self: *@This()) void {
        return objc.msgSend(_self, "unlock", void, .{});
    }

    pub fn initWithConcurrencyType(_self: *@This(), _ct: ManagedObjectContextConcurrencyType) *@This() {
        return objc.msgSend(_self, "initWithConcurrencyType:", *@This(), .{_ct});
    }

    pub fn performBlock(_self: *@This(), _block: *const fn () callconv(.C) void) void {
        return objc.msgSend(_self, "performBlock:", void, .{_block});
    }

    pub fn performBlockAndWait(_self: *@This(), _block: *const fn () callconv(.C) void) void {
        return objc.msgSend(_self, "performBlockAndWait:", void, .{_block});
    }

    pub fn objectRegisteredForID(_self: *@This(), _objectID: ?*ManagedObjectID) ?*anyopaque {
        return objc.msgSend(_self, "objectRegisteredForID:", ?*anyopaque, .{_objectID});
    }

    pub fn objectWithID(_self: *@This(), _objectID: ?*ManagedObjectID) ?*anyopaque {
        return objc.msgSend(_self, "objectWithID:", ?*anyopaque, .{_objectID});
    }

    pub fn existingObjectWithIDError(_self: *@This(), _objectID: ?*ManagedObjectID, _error: ?*?*Error) ?*anyopaque {
        return objc.msgSend(_self, "existingObjectWithID:error:", ?*anyopaque, .{ _objectID, _error });
    }

    pub fn executeFetchRequestError(_self: *@This(), _request: ?*FetchRequest, _error: ?*?*Error) ?*Array {
        return objc.msgSend(_self, "executeFetchRequest:error:", ?*Array, .{ _request, _error });
    }

    pub fn countForFetchRequestError(_self: *@This(), _request: ?*FetchRequest, _error: ?*?*Error) objc.NSUInteger {
        return objc.msgSend(_self, "countForFetchRequest:error:", objc.NSUInteger, .{ _request, _error });
    }

    pub fn executeRequestError(_self: *@This(), _request: ?*PersistentStoreRequest, _error: ?*?*Error) ?*anyopaque {
        return objc.msgSend(_self, "executeRequest:error:", ?*anyopaque, .{ _request, _error });
    }

    pub fn insertObject(_self: *@This(), _object: ?*ManagedObject) void {
        return objc.msgSend(_self, "insertObject:", void, .{_object});
    }

    pub fn deleteObject(_self: *@This(), _object: ?*ManagedObject) void {
        return objc.msgSend(_self, "deleteObject:", void, .{_object});
    }

    pub fn refreshObjectMergeChanges(_self: *@This(), _object: ?*ManagedObject, _flag: objc.BOOL) void {
        return objc.msgSend(_self, "refreshObject:mergeChanges:", void, .{ _object, _flag });
    }

    pub fn detectConflictsForObject(_self: *@This(), _object: ?*ManagedObject) void {
        return objc.msgSend(_self, "detectConflictsForObject:", void, .{_object});
    }

    pub fn observeValueForKeyPathOfObjectChangeContext(
        _self: *@This(),
        _keyPath: ?*String,
        _object: *objc.Id,
        _change: ?*anyopaque,
        _context: ?*anyopaque,
    ) void {
        return objc.msgSend(_self, "observeValueForKeyPath:ofObject:change:context:", void, .{
            _keyPath,
            _object,
            _change,
            _context,
        });
    }

    pub fn processPendingChanges(_self: *@This()) void {
        return objc.msgSend(_self, "processPendingChanges", void, .{});
    }

    pub fn assignObjectToPersistentStore(_self: *@This(), _object: *objc.Id, _store: ?*PersistentStore) void {
        return objc.msgSend(_self, "assignObject:toPersistentStore:", void, .{ _object, _store });
    }

    pub fn undo(_self: *@This()) void {
        return objc.msgSend(_self, "undo", void, .{});
    }

    pub fn redo(_self: *@This()) void {
        return objc.msgSend(_self, "redo", void, .{});
    }

    pub fn reset(_self: *@This()) void {
        return objc.msgSend(_self, "reset", void, .{});
    }

    pub fn rollback(_self: *@This()) void {
        return objc.msgSend(_self, "rollback", void, .{});
    }

    pub fn save(_self: *@This(), _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "save:", objc.BOOL, .{_error});
    }

    pub fn refreshAllObjects(_self: *@This()) void {
        return objc.msgSend(_self, "refreshAllObjects", void, .{});
    }

    pub fn tryLock(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "tryLock", objc.BOOL, .{});
    }

    pub fn shouldHandleInaccessibleFaultForObjectIDTriggeredByProperty(_self: *@This(), _fault: ?*ManagedObject, _oid: ?*ManagedObjectID, _property: ?*PropertyDescription) objc.BOOL {
        return objc.msgSend(_self, "shouldHandleInaccessibleFault:forObjectID:triggeredByProperty:", objc.BOOL, .{ _fault, _oid, _property });
    }

    pub fn obtainPermanentIDsForObjectsError(_self: *@This(), _objects: ?*anyopaque, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "obtainPermanentIDsForObjects:error:", objc.BOOL, .{ _objects, _error });
    }

    pub fn mergeChangesFromContextDidSaveNotification(_self: *@This(), _notification: ?*Notification) void {
        return objc.msgSend(_self, "mergeChangesFromContextDidSaveNotification:", void, .{_notification});
    }

    pub fn mergeChangesFromRemoteContextSaveIntoContexts(_self: *@This(), _changeNotificationData: ?*Dictionary, _contexts: ?*anyopaque) void {
        return objc.msgSend(_self, "mergeChangesFromRemoteContextSave:intoContexts:", void, .{ _changeNotificationData, _contexts });
    }

    pub fn setQueryGenerationFromTokenError(_self: *@This(), _generation: ?*QueryGenerationToken, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "setQueryGenerationFromToken:error:", objc.BOOL, .{ _generation, _error });
    }

    pub fn persistentStoreCoordinator(_self: *@This()) ?*PersistentStoreCoordinator {
        return objc.msgSend(_self, "persistentStoreCoordinator", ?*PersistentStoreCoordinator, .{});
    }

    pub fn setPersistentStoreCoordinator(_self: *@This(), _persistentStoreCoordinator: ?*PersistentStoreCoordinator) void {
        return objc.msgSend(_self, "setPersistentStoreCoordinator:", void, .{_persistentStoreCoordinator});
    }

    pub fn parentContext(_self: *@This()) ?*ManagedObjectContext {
        return objc.msgSend(_self, "parentContext", ?*ManagedObjectContext, .{});
    }

    pub fn setParentContext(_self: *@This(), _parentContext: ?*ManagedObjectContext) void {
        return objc.msgSend(_self, "setParentContext:", void, .{_parentContext});
    }

    pub fn name(_self: *@This()) ?*String {
        return objc.msgSend(_self, "name", ?*String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn undoManager(_self: *@This()) ?*UndoManager {
        return objc.msgSend(_self, "undoManager", ?*UndoManager, .{});
    }

    pub fn setUndoManager(_self: *@This(), _undoManager: ?*UndoManager) void {
        return objc.msgSend(_self, "setUndoManager:", void, .{_undoManager});
    }

    pub fn hasChanges(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "hasChanges", objc.BOOL, .{});
    }

    pub fn userInfo(_self: *@This()) ?*foundation.MutableDictionary {
        return objc.msgSend(_self, "userInfo", ?*foundation.MutableDictionary, .{});
    }

    pub fn concurrencyType(_self: *@This()) ManagedObjectContextConcurrencyType {
        return objc.msgSend(_self, "concurrencyType", ManagedObjectContextConcurrencyType, .{});
    }

    pub fn insertedObjects(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "insertedObjects", ?*anyopaque, .{});
    }

    pub fn updatedObjects(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "updatedObjects", ?*anyopaque, .{});
    }

    pub fn deletedObjects(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "deletedObjects", ?*anyopaque, .{});
    }

    pub fn registeredObjects(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "registeredObjects", ?*anyopaque, .{});
    }

    pub fn propagatesDeletesAtEndOfEvent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "propagatesDeletesAtEndOfEvent", objc.BOOL, .{});
    }

    pub fn setPropagatesDeletesAtEndOfEvent(_self: *@This(), _propagatesDeletesAtEndOfEvent: objc.BOOL) void {
        return objc.msgSend(_self, "setPropagatesDeletesAtEndOfEvent:", void, .{_propagatesDeletesAtEndOfEvent});
    }

    pub fn retainsRegisteredObjects(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainsRegisteredObjects", objc.BOOL, .{});
    }

    pub fn setRetainsRegisteredObjects(_self: *@This(), _retainsRegisteredObjects: objc.BOOL) void {
        return objc.msgSend(_self, "setRetainsRegisteredObjects:", void, .{_retainsRegisteredObjects});
    }

    pub fn shouldDeleteInaccessibleFaults(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldDeleteInaccessibleFaults", objc.BOOL, .{});
    }

    pub fn setShouldDeleteInaccessibleFaults(_self: *@This(), _shouldDeleteInaccessibleFaults: objc.BOOL) void {
        return objc.msgSend(_self, "setShouldDeleteInaccessibleFaults:", void, .{_shouldDeleteInaccessibleFaults});
    }

    pub fn stalenessInterval(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "stalenessInterval", foundation.TimeInterval, .{});
    }

    pub fn setStalenessInterval(_self: *@This(), _stalenessInterval: foundation.TimeInterval) void {
        return objc.msgSend(_self, "setStalenessInterval:", void, .{_stalenessInterval});
    }

    pub fn mergePolicy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mergePolicy", *objc.Id, .{});
    }

    pub fn setMergePolicy(_self: *@This(), _mergePolicy: *objc.Id) void {
        return objc.msgSend(_self, "setMergePolicy:", void, .{_mergePolicy});
    }

    pub fn queryGenerationToken(_self: *@This()) ?*QueryGenerationToken {
        return objc.msgSend(_self, "queryGenerationToken", ?*QueryGenerationToken, .{});
    }

    pub fn automaticallyMergesChangesFromParent(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "automaticallyMergesChangesFromParent", objc.BOOL, .{});
    }

    pub fn setAutomaticallyMergesChangesFromParent(_self: *@This(), _automaticallyMergesChangesFromParent: objc.BOOL) void {
        return objc.msgSend(_self, "setAutomaticallyMergesChangesFromParent:", void, .{_automaticallyMergesChangesFromParent});
    }

    pub fn transactionAuthor(_self: *@This()) ?*String {
        return objc.msgSend(_self, "transactionAuthor", ?*String, .{});
    }

    pub fn setTransactionAuthor(_self: *@This(), _transactionAuthor: ?*String) void {
        return objc.msgSend(_self, "setTransactionAuthor:", void, .{_transactionAuthor});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSPersistentStoreCoordinator?language=objc
pub const PersistentStoreCoordinator = opaque {
    pub const InternalInfo = objc.ExternClass("NSPersistentStoreCoordinator", @This(), objc.NSObject, &.{
        foundation.Locking,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn lock(_self: *@This()) void {
        return objc.msgSend(_self, "lock", void, .{});
    }

    pub fn unlock(_self: *@This()) void {
        return objc.msgSend(_self, "unlock", void, .{});
    }

    pub fn initWithManagedObjectModel(_self: *@This(), _model: ?*ManagedObjectModel) *@This() {
        return objc.msgSend(_self, "initWithManagedObjectModel:", *@This(), .{_model});
    }

    pub fn persistentStoreForURL(_self: *@This(), _URL: ?*URL) ?*anyopaque {
        return objc.msgSend(_self, "persistentStoreForURL:", ?*anyopaque, .{_URL});
    }

    pub fn urlForPersistentStore(_self: *@This(), _store: ?*PersistentStore) ?*URL {
        return objc.msgSend(_self, "URLForPersistentStore:", ?*URL, .{_store});
    }

    pub fn setURLForPersistentStore(_self: *@This(), _url: ?*URL, _store: ?*PersistentStore) objc.BOOL {
        return objc.msgSend(_self, "setURL:forPersistentStore:", objc.BOOL, .{ _url, _store });
    }

    pub fn addPersistentStoreWithTypeConfigurationURLOptionsError(
        _self: *@This(),
        _storeType: ?*String,
        _configuration: ?*String,
        _storeURL: ?*URL,
        _options: ?*Dictionary,
        _error: ?*?*Error,
    ) ?*anyopaque {
        return objc.msgSend(_self, "addPersistentStoreWithType:configuration:URL:options:error:", ?*anyopaque, .{
            _storeType,
            _configuration,
            _storeURL,
            _options,
            _error,
        });
    }

    pub fn addPersistentStoreWithDescriptionCompletionHandler(_self: *@This(), _storeDescription: ?*PersistentStoreDescription, _block: *const fn (?*PersistentStoreDescription, ?*Error) callconv(.C) void) void {
        return objc.msgSend(_self, "addPersistentStoreWithDescription:completionHandler:", void, .{ _storeDescription, _block });
    }

    pub fn removePersistentStoreError(_self: *@This(), _store: ?*PersistentStore, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "removePersistentStore:error:", objc.BOOL, .{ _store, _error });
    }

    pub fn setMetadataForPersistentStore(_self: *@This(), _metadata: ?*anyopaque, _store: ?*PersistentStore) void {
        return objc.msgSend(_self, "setMetadata:forPersistentStore:", void, .{ _metadata, _store });
    }

    pub fn metadataForPersistentStore(_self: *@This(), _store: ?*PersistentStore) ?*anyopaque {
        return objc.msgSend(_self, "metadataForPersistentStore:", ?*anyopaque, .{_store});
    }

    pub fn managedObjectIDForURIRepresentation(_self: *@This(), _url: ?*URL) ?*ManagedObjectID {
        return objc.msgSend(_self, "managedObjectIDForURIRepresentation:", ?*ManagedObjectID, .{_url});
    }

    pub fn executeRequestWithContextError(_self: *@This(), _request: ?*PersistentStoreRequest, _context: ?*ManagedObjectContext, _error: ?*?*Error) *objc.Id {
        return objc.msgSend(_self, "executeRequest:withContext:error:", *objc.Id, .{ _request, _context, _error });
    }

    pub fn registerStoreClassForStoreType(_self: *@This(), _storeClass: *objc.Class, _storeType: ?*String) void {
        return objc.msgSend(_self, "registerStoreClass:forStoreType:", void, .{ _storeClass, _storeType });
    }

    pub fn metadataForPersistentStoreOfTypeURLOptionsError(
        _self: *@This(),
        _storeType: ?*String,
        _url: ?*URL,
        _options: ?*Dictionary,
        _error: ?*?*Error,
    ) ?*anyopaque {
        return objc.msgSend(_self, "metadataForPersistentStoreOfType:URL:options:error:", ?*anyopaque, .{
            _storeType,
            _url,
            _options,
            _error,
        });
    }

    pub fn setMetadataForPersistentStoreOfTypeURLOptionsError(
        _self: *@This(),
        _metadata: ?*anyopaque,
        _storeType: ?*String,
        _url: ?*URL,
        _options: ?*Dictionary,
        _error: ?*?*Error,
    ) objc.BOOL {
        return objc.msgSend(_self, "setMetadata:forPersistentStoreOfType:URL:options:error:", objc.BOOL, .{
            _metadata,
            _storeType,
            _url,
            _options,
            _error,
        });
    }

    pub fn elementsDerivedFromExternalRecordURL(_self: *@This(), _fileURL: ?*URL) ?*Dictionary {
        return objc.msgSend(_self, "elementsDerivedFromExternalRecordURL:", ?*Dictionary, .{_fileURL});
    }

    pub fn importStoreWithIdentifierFromExternalRecordsDirectoryToURLOptionsWithTypeError(
        _self: *@This(),
        _storeIdentifier: ?*String,
        _externalRecordsURL: ?*URL,
        _destinationURL: ?*URL,
        _options: ?*Dictionary,
        _storeType: ?*String,
        _error: ?*?*Error,
    ) ?*PersistentStore {
        return objc.msgSend(_self, "importStoreWithIdentifier:fromExternalRecordsDirectory:toURL:options:withType:error:", ?*PersistentStore, .{
            _storeIdentifier,
            _externalRecordsURL,
            _destinationURL,
            _options,
            _storeType,
            _error,
        });
    }

    pub fn migratePersistentStoreToURLOptionsWithTypeError(
        _self: *@This(),
        _store: ?*PersistentStore,
        _URL: ?*URL,
        _options: ?*Dictionary,
        _storeType: ?*String,
        _error: ?*?*Error,
    ) ?*PersistentStore {
        return objc.msgSend(_self, "migratePersistentStore:toURL:options:withType:error:", ?*PersistentStore, .{
            _store,
            _URL,
            _options,
            _storeType,
            _error,
        });
    }

    pub fn destroyPersistentStoreAtURLWithTypeOptionsError(
        _self: *@This(),
        _url: ?*URL,
        _storeType: ?*String,
        _options: ?*Dictionary,
        _error: ?*?*Error,
    ) objc.BOOL {
        return objc.msgSend(_self, "destroyPersistentStoreAtURL:withType:options:error:", objc.BOOL, .{
            _url,
            _storeType,
            _options,
            _error,
        });
    }

    pub fn replacePersistentStoreAtURLDestinationOptionsWithPersistentStoreFromURLSourceOptionsStoreTypeError(
        _self: *@This(),
        _destinationURL: ?*URL,
        _destinationOptions: ?*Dictionary,
        _sourceURL: ?*URL,
        _sourceOptions: ?*Dictionary,
        _storeType: ?*String,
        _error: ?*?*Error,
    ) objc.BOOL {
        return objc.msgSend(_self, "replacePersistentStoreAtURL:destinationOptions:withPersistentStoreFromURL:sourceOptions:storeType:error:", objc.BOOL, .{
            _destinationURL,
            _destinationOptions,
            _sourceURL,
            _sourceOptions,
            _storeType,
            _error,
        });
    }

    pub fn performBlock(_self: *@This(), _block: *const fn () callconv(.C) void) void {
        return objc.msgSend(_self, "performBlock:", void, .{_block});
    }

    pub fn performBlockAndWait(_self: *@This(), _block: *const fn () callconv(.C) void) void {
        return objc.msgSend(_self, "performBlockAndWait:", void, .{_block});
    }

    pub fn currentPersistentHistoryTokenFromStores(_self: *@This(), _stores: ?*Array) ?*PersistentHistoryToken {
        return objc.msgSend(_self, "currentPersistentHistoryTokenFromStores:", ?*PersistentHistoryToken, .{_stores});
    }

    pub fn finishDeferredLightweightMigration(_self: *@This(), _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "finishDeferredLightweightMigration:", objc.BOOL, .{_error});
    }

    pub fn finishDeferredLightweightMigrationTask(_self: *@This(), _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "finishDeferredLightweightMigrationTask:", objc.BOOL, .{_error});
    }

    pub fn managedObjectIDFromUTF8StringLength(_self: *@This(), _utf8string: ?*i8, _len: objc.NSUInteger) ?*ManagedObjectID {
        return objc.msgSend(_self, "managedObjectIDFromUTF8String:length:", ?*ManagedObjectID, .{ _utf8string, _len });
    }

    pub fn metadataForPersistentStoreWithURLError(_self: *@This(), _url: ?*URL, _error: ?*?*Error) ?*Dictionary {
        return objc.msgSend(_self, "metadataForPersistentStoreWithURL:error:", ?*Dictionary, .{ _url, _error });
    }

    pub fn tryLock(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "tryLock", objc.BOOL, .{});
    }

    pub fn metadataForPersistentStoreOfTypeURLError(_self: *@This(), _storeType: ?*String, _url: ?*URL, _error: ?*?*Error) ?*anyopaque {
        return objc.msgSend(_self, "metadataForPersistentStoreOfType:URL:error:", ?*anyopaque, .{ _storeType, _url, _error });
    }

    pub fn setMetadataForPersistentStoreOfTypeURLError(
        _self: *@This(),
        _metadata: ?*anyopaque,
        _storeType: ?*String,
        _url: ?*URL,
        _error: ?*?*Error,
    ) objc.BOOL {
        return objc.msgSend(_self, "setMetadata:forPersistentStoreOfType:URL:error:", objc.BOOL, .{
            _metadata,
            _storeType,
            _url,
            _error,
        });
    }

    pub fn removeUbiquitousContentAndPersistentStoreAtURLOptionsError(_self: *@This(), _storeURL: ?*URL, _options: ?*Dictionary, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "removeUbiquitousContentAndPersistentStoreAtURL:options:error:", objc.BOOL, .{ _storeURL, _options, _error });
    }

    pub fn managedObjectModel(_self: *@This()) ?*ManagedObjectModel {
        return objc.msgSend(_self, "managedObjectModel", ?*ManagedObjectModel, .{});
    }

    pub fn persistentStores(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "persistentStores", ?*anyopaque, .{});
    }

    pub fn name(_self: *@This()) ?*String {
        return objc.msgSend(_self, "name", ?*String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn registeredStoreTypes(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "registeredStoreTypes", ?*anyopaque, .{});
    }
};

pub const PersistentStoreUbiquitousTransitionType = enum(objc.NSUInteger) {
    AccountAdded = 1,
    AccountRemoved = 2,
    ContentRemoved = 3,
    InitialImportCompleted = 4,
};

/// https://developer.apple.com/documentation/CoreData/NSPersistentStore?language=objc
pub const PersistentStore = opaque {
    pub const InternalInfo = objc.ExternClass("NSPersistentStore", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn metadataForPersistentStoreWithURLError(_self: *@This(), _url: ?*URL, _error: ?*?*Error) ?*anyopaque {
        return objc.msgSend(_self, "metadataForPersistentStoreWithURL:error:", ?*anyopaque, .{ _url, _error });
    }

    pub fn setMetadataForPersistentStoreWithURLError(_self: *@This(), _metadata: ?*anyopaque, _url: ?*URL, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "setMetadata:forPersistentStoreWithURL:error:", objc.BOOL, .{ _metadata, _url, _error });
    }

    pub fn migrationManagerClass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "migrationManagerClass", *objc.Class, .{});
    }

    pub fn initWithPersistentStoreCoordinatorConfigurationNameURLOptions(
        _self: *@This(),
        _root: ?*PersistentStoreCoordinator,
        _name: ?*String,
        _url: ?*URL,
        _options: ?*Dictionary,
    ) *@This() {
        return objc.msgSend(_self, "initWithPersistentStoreCoordinator:configurationName:URL:options:", *@This(), .{
            _root,
            _name,
            _url,
            _options,
        });
    }

    pub fn loadMetadata(_self: *@This(), _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "loadMetadata:", objc.BOOL, .{_error});
    }

    pub fn didAddToPersistentStoreCoordinator(_self: *@This(), _coordinator: ?*PersistentStoreCoordinator) void {
        return objc.msgSend(_self, "didAddToPersistentStoreCoordinator:", void, .{_coordinator});
    }

    pub fn willRemoveFromPersistentStoreCoordinator(_self: *@This(), _coordinator: ?*PersistentStoreCoordinator) void {
        return objc.msgSend(_self, "willRemoveFromPersistentStoreCoordinator:", void, .{_coordinator});
    }

    pub fn persistentStoreCoordinator(_self: *@This()) ?*PersistentStoreCoordinator {
        return objc.msgSend(_self, "persistentStoreCoordinator", ?*PersistentStoreCoordinator, .{});
    }

    pub fn configurationName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "configurationName", ?*String, .{});
    }

    pub fn options(_self: *@This()) ?*Dictionary {
        return objc.msgSend(_self, "options", ?*Dictionary, .{});
    }

    pub fn url(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "URL", ?*URL, .{});
    }

    pub fn setURL(_self: *@This(), _URL: ?*URL) void {
        return objc.msgSend(_self, "setURL:", void, .{_URL});
    }

    pub fn identifier(_self: *@This()) ?*String {
        return objc.msgSend(_self, "identifier", ?*String, .{});
    }

    pub fn setIdentifier(_self: *@This(), _identifier: ?*String) void {
        return objc.msgSend(_self, "setIdentifier:", void, .{_identifier});
    }

    pub fn @"type"(_self: *@This()) ?*String {
        return objc.msgSend(_self, "type", ?*String, .{});
    }

    pub fn isReadOnly(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isReadOnly", objc.BOOL, .{});
    }

    pub fn setReadOnly(_self: *@This(), _readOnly: objc.BOOL) void {
        return objc.msgSend(_self, "setReadOnly:", void, .{_readOnly});
    }

    pub fn metadata(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "metadata", ?*anyopaque, .{});
    }

    pub fn setMetadata(_self: *@This(), _metadata: ?*anyopaque) void {
        return objc.msgSend(_self, "setMetadata:", void, .{_metadata});
    }

    pub fn coreSpotlightExporter(_self: *@This()) ?*CoreDataCoreSpotlightDelegate {
        return objc.msgSend(_self, "coreSpotlightExporter", ?*CoreDataCoreSpotlightDelegate, .{});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSAtomicStoreCacheNode?language=objc
pub const AtomicStoreCacheNode = opaque {
    pub const InternalInfo = objc.ExternClass("NSAtomicStoreCacheNode", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithObjectID(_self: *@This(), _moid: ?*ManagedObjectID) *@This() {
        return objc.msgSend(_self, "initWithObjectID:", *@This(), .{_moid});
    }

    pub fn valueForKey(_self: *@This(), _key: ?*String) *objc.Id {
        return objc.msgSend(_self, "valueForKey:", *objc.Id, .{_key});
    }

    pub fn setValueForKey(_self: *@This(), _value: *objc.Id, _key: ?*String) void {
        return objc.msgSend(_self, "setValue:forKey:", void, .{ _value, _key });
    }

    pub fn objectID(_self: *@This()) ?*ManagedObjectID {
        return objc.msgSend(_self, "objectID", ?*ManagedObjectID, .{});
    }

    pub fn propertyCache(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "propertyCache", ?*anyopaque, .{});
    }

    pub fn setPropertyCache(_self: *@This(), _propertyCache: ?*anyopaque) void {
        return objc.msgSend(_self, "setPropertyCache:", void, .{_propertyCache});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSAtomicStore?language=objc
pub const AtomicStore = opaque {
    pub const InternalInfo = objc.ExternClass("NSAtomicStore", @This(), PersistentStore, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn metadataForPersistentStoreWithURLError(_self: *@This(), _url: ?*URL, _error: ?*?*Error) ?*anyopaque {
        return objc.msgSend(_self, "metadataForPersistentStoreWithURL:error:", ?*anyopaque, .{ _url, _error });
    }

    pub fn setMetadataForPersistentStoreWithURLError(_self: *@This(), _metadata: ?*anyopaque, _url: ?*URL, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "setMetadata:forPersistentStoreWithURL:error:", objc.BOOL, .{ _metadata, _url, _error });
    }

    pub fn migrationManagerClass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "migrationManagerClass", *objc.Class, .{});
    }

    pub fn initWithPersistentStoreCoordinatorConfigurationNameURLOptions(
        _self: *@This(),
        _root: ?*PersistentStoreCoordinator,
        _name: ?*String,
        _url: ?*URL,
        _options: ?*Dictionary,
    ) *@This() {
        return objc.msgSend(_self, "initWithPersistentStoreCoordinator:configurationName:URL:options:", *@This(), .{
            _root,
            _name,
            _url,
            _options,
        });
    }

    pub fn loadMetadata(_self: *@This(), _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "loadMetadata:", objc.BOOL, .{_error});
    }

    pub fn didAddToPersistentStoreCoordinator(_self: *@This(), _coordinator: ?*PersistentStoreCoordinator) void {
        return objc.msgSend(_self, "didAddToPersistentStoreCoordinator:", void, .{_coordinator});
    }

    pub fn willRemoveFromPersistentStoreCoordinator(_self: *@This(), _coordinator: ?*PersistentStoreCoordinator) void {
        return objc.msgSend(_self, "willRemoveFromPersistentStoreCoordinator:", void, .{_coordinator});
    }

    pub fn persistentStoreCoordinator(_self: *@This()) ?*PersistentStoreCoordinator {
        return objc.msgSend(_self, "persistentStoreCoordinator", ?*PersistentStoreCoordinator, .{});
    }

    pub fn configurationName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "configurationName", ?*String, .{});
    }

    pub fn options(_self: *@This()) ?*Dictionary {
        return objc.msgSend(_self, "options", ?*Dictionary, .{});
    }

    pub fn url(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "URL", ?*URL, .{});
    }

    pub fn setURL(_self: *@This(), _URL: ?*URL) void {
        return objc.msgSend(_self, "setURL:", void, .{_URL});
    }

    pub fn identifier(_self: *@This()) ?*String {
        return objc.msgSend(_self, "identifier", ?*String, .{});
    }

    pub fn setIdentifier(_self: *@This(), _identifier: ?*String) void {
        return objc.msgSend(_self, "setIdentifier:", void, .{_identifier});
    }

    pub fn @"type"(_self: *@This()) ?*String {
        return objc.msgSend(_self, "type", ?*String, .{});
    }

    pub fn isReadOnly(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isReadOnly", objc.BOOL, .{});
    }

    pub fn setReadOnly(_self: *@This(), _readOnly: objc.BOOL) void {
        return objc.msgSend(_self, "setReadOnly:", void, .{_readOnly});
    }

    pub fn metadata(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "metadata", ?*anyopaque, .{});
    }

    pub fn setMetadata(_self: *@This(), _metadata: ?*anyopaque) void {
        return objc.msgSend(_self, "setMetadata:", void, .{_metadata});
    }

    pub fn coreSpotlightExporter(_self: *@This()) ?*CoreDataCoreSpotlightDelegate {
        return objc.msgSend(_self, "coreSpotlightExporter", ?*CoreDataCoreSpotlightDelegate, .{});
    }

    pub fn load(_self: *@This(), _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "load:", objc.BOOL, .{_error});
    }

    pub fn save(_self: *@This(), _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "save:", objc.BOOL, .{_error});
    }

    pub fn newCacheNodeForManagedObject(_self: *@This(), _managedObject: ?*ManagedObject) ?*AtomicStoreCacheNode {
        return objc.msgSend(_self, "newCacheNodeForManagedObject:", ?*AtomicStoreCacheNode, .{_managedObject});
    }

    pub fn updateCacheNodeFromManagedObject(_self: *@This(), _node: ?*AtomicStoreCacheNode, _managedObject: ?*ManagedObject) void {
        return objc.msgSend(_self, "updateCacheNode:fromManagedObject:", void, .{ _node, _managedObject });
    }

    pub fn cacheNodes(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "cacheNodes", ?*anyopaque, .{});
    }

    pub fn addCacheNodes(_self: *@This(), _cacheNodes: ?*anyopaque) void {
        return objc.msgSend(_self, "addCacheNodes:", void, .{_cacheNodes});
    }

    pub fn willRemoveCacheNodes(_self: *@This(), _cacheNodes: ?*anyopaque) void {
        return objc.msgSend(_self, "willRemoveCacheNodes:", void, .{_cacheNodes});
    }

    pub fn cacheNodeForObjectID(_self: *@This(), _objectID: ?*ManagedObjectID) ?*AtomicStoreCacheNode {
        return objc.msgSend(_self, "cacheNodeForObjectID:", ?*AtomicStoreCacheNode, .{_objectID});
    }

    pub fn objectIDForEntityReferenceObject(_self: *@This(), _entity: ?*EntityDescription, _data: *objc.Id) ?*ManagedObjectID {
        return objc.msgSend(_self, "objectIDForEntity:referenceObject:", ?*ManagedObjectID, .{ _entity, _data });
    }

    pub fn newReferenceObjectForManagedObject(_self: *@This(), _managedObject: ?*ManagedObject) *objc.Id {
        return objc.msgSend(_self, "newReferenceObjectForManagedObject:", *objc.Id, .{_managedObject});
    }

    pub fn referenceObjectForObjectID(_self: *@This(), _objectID: ?*ManagedObjectID) *objc.Id {
        return objc.msgSend(_self, "referenceObjectForObjectID:", *objc.Id, .{_objectID});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSEntityMigrationPolicy?language=objc
pub const EntityMigrationPolicy = opaque {
    pub const InternalInfo = objc.ExternClass("NSEntityMigrationPolicy", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn beginEntityMappingManagerError(_self: *@This(), _mapping: ?*EntityMapping, _manager: ?*MigrationManager, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "beginEntityMapping:manager:error:", objc.BOOL, .{ _mapping, _manager, _error });
    }

    pub fn createDestinationInstancesForSourceInstanceEntityMappingManagerError(
        _self: *@This(),
        _sInstance: ?*ManagedObject,
        _mapping: ?*EntityMapping,
        _manager: ?*MigrationManager,
        _error: ?*?*Error,
    ) objc.BOOL {
        return objc.msgSend(_self, "createDestinationInstancesForSourceInstance:entityMapping:manager:error:", objc.BOOL, .{
            _sInstance,
            _mapping,
            _manager,
            _error,
        });
    }

    pub fn endInstanceCreationForEntityMappingManagerError(_self: *@This(), _mapping: ?*EntityMapping, _manager: ?*MigrationManager, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "endInstanceCreationForEntityMapping:manager:error:", objc.BOOL, .{ _mapping, _manager, _error });
    }

    pub fn createRelationshipsForDestinationInstanceEntityMappingManagerError(
        _self: *@This(),
        _dInstance: ?*ManagedObject,
        _mapping: ?*EntityMapping,
        _manager: ?*MigrationManager,
        _error: ?*?*Error,
    ) objc.BOOL {
        return objc.msgSend(_self, "createRelationshipsForDestinationInstance:entityMapping:manager:error:", objc.BOOL, .{
            _dInstance,
            _mapping,
            _manager,
            _error,
        });
    }

    pub fn endRelationshipCreationForEntityMappingManagerError(_self: *@This(), _mapping: ?*EntityMapping, _manager: ?*MigrationManager, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "endRelationshipCreationForEntityMapping:manager:error:", objc.BOOL, .{ _mapping, _manager, _error });
    }

    pub fn performCustomValidationForEntityMappingManagerError(_self: *@This(), _mapping: ?*EntityMapping, _manager: ?*MigrationManager, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "performCustomValidationForEntityMapping:manager:error:", objc.BOOL, .{ _mapping, _manager, _error });
    }

    pub fn endEntityMappingManagerError(_self: *@This(), _mapping: ?*EntityMapping, _manager: ?*MigrationManager, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "endEntityMapping:manager:error:", objc.BOOL, .{ _mapping, _manager, _error });
    }
};

/// https://developer.apple.com/documentation/CoreData/NSMappingModel?language=objc
pub const MappingModel = opaque {
    pub const InternalInfo = objc.ExternClass("NSMappingModel", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn mappingModelFromBundlesForSourceModelDestinationModel(_self: *@This(), _bundles: ?*anyopaque, _sourceModel: ?*ManagedObjectModel, _destinationModel: ?*ManagedObjectModel) ?*MappingModel {
        return objc.msgSend(_self, "mappingModelFromBundles:forSourceModel:destinationModel:", ?*MappingModel, .{ _bundles, _sourceModel, _destinationModel });
    }

    pub fn inferredMappingModelForSourceModelDestinationModelError(_self: *@This(), _sourceModel: ?*ManagedObjectModel, _destinationModel: ?*ManagedObjectModel, _error: ?*?*Error) ?*MappingModel {
        return objc.msgSend(_self, "inferredMappingModelForSourceModel:destinationModel:error:", ?*MappingModel, .{ _sourceModel, _destinationModel, _error });
    }

    pub fn initWithContentsOfURL(_self: *@This(), _url: ?*URL) *@This() {
        return objc.msgSend(_self, "initWithContentsOfURL:", *@This(), .{_url});
    }

    pub fn entityMappings(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "entityMappings", ?*anyopaque, .{});
    }

    pub fn setEntityMappings(_self: *@This(), _entityMappings: ?*anyopaque) void {
        return objc.msgSend(_self, "setEntityMappings:", void, .{_entityMappings});
    }

    pub fn entityMappingsByName(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "entityMappingsByName", ?*anyopaque, .{});
    }
};

pub const EntityMappingType = enum(objc.NSUInteger) {
    UndefinedEntityMappingType = 0,
    CustomEntityMappingType = 1,
    AddEntityMappingType = 2,
    RemoveEntityMappingType = 3,
    CopyEntityMappingType = 4,
    TransformEntityMappingType = 5,
};

/// https://developer.apple.com/documentation/CoreData/NSEntityMapping?language=objc
pub const EntityMapping = opaque {
    pub const InternalInfo = objc.ExternClass("NSEntityMapping", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn name(_self: *@This()) ?*String {
        return objc.msgSend(_self, "name", ?*String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn mappingType(_self: *@This()) EntityMappingType {
        return objc.msgSend(_self, "mappingType", EntityMappingType, .{});
    }

    pub fn setMappingType(_self: *@This(), _mappingType: EntityMappingType) void {
        return objc.msgSend(_self, "setMappingType:", void, .{_mappingType});
    }

    pub fn sourceEntityName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "sourceEntityName", ?*String, .{});
    }

    pub fn setSourceEntityName(_self: *@This(), _sourceEntityName: ?*String) void {
        return objc.msgSend(_self, "setSourceEntityName:", void, .{_sourceEntityName});
    }

    pub fn sourceEntityVersionHash(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "sourceEntityVersionHash", ?*Data, .{});
    }

    pub fn setSourceEntityVersionHash(_self: *@This(), _sourceEntityVersionHash: ?*Data) void {
        return objc.msgSend(_self, "setSourceEntityVersionHash:", void, .{_sourceEntityVersionHash});
    }

    pub fn destinationEntityName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "destinationEntityName", ?*String, .{});
    }

    pub fn setDestinationEntityName(_self: *@This(), _destinationEntityName: ?*String) void {
        return objc.msgSend(_self, "setDestinationEntityName:", void, .{_destinationEntityName});
    }

    pub fn destinationEntityVersionHash(_self: *@This()) ?*Data {
        return objc.msgSend(_self, "destinationEntityVersionHash", ?*Data, .{});
    }

    pub fn setDestinationEntityVersionHash(_self: *@This(), _destinationEntityVersionHash: ?*Data) void {
        return objc.msgSend(_self, "setDestinationEntityVersionHash:", void, .{_destinationEntityVersionHash});
    }

    pub fn attributeMappings(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "attributeMappings", ?*anyopaque, .{});
    }

    pub fn setAttributeMappings(_self: *@This(), _attributeMappings: ?*anyopaque) void {
        return objc.msgSend(_self, "setAttributeMappings:", void, .{_attributeMappings});
    }

    pub fn relationshipMappings(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "relationshipMappings", ?*anyopaque, .{});
    }

    pub fn setRelationshipMappings(_self: *@This(), _relationshipMappings: ?*anyopaque) void {
        return objc.msgSend(_self, "setRelationshipMappings:", void, .{_relationshipMappings});
    }

    pub fn sourceExpression(_self: *@This()) ?*Expression {
        return objc.msgSend(_self, "sourceExpression", ?*Expression, .{});
    }

    pub fn setSourceExpression(_self: *@This(), _sourceExpression: ?*Expression) void {
        return objc.msgSend(_self, "setSourceExpression:", void, .{_sourceExpression});
    }

    pub fn userInfo(_self: *@This()) ?*Dictionary {
        return objc.msgSend(_self, "userInfo", ?*Dictionary, .{});
    }

    pub fn setUserInfo(_self: *@This(), _userInfo: ?*Dictionary) void {
        return objc.msgSend(_self, "setUserInfo:", void, .{_userInfo});
    }

    pub fn entityMigrationPolicyClassName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "entityMigrationPolicyClassName", ?*String, .{});
    }

    pub fn setEntityMigrationPolicyClassName(_self: *@This(), _entityMigrationPolicyClassName: ?*String) void {
        return objc.msgSend(_self, "setEntityMigrationPolicyClassName:", void, .{_entityMigrationPolicyClassName});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSPropertyMapping?language=objc
pub const PropertyMapping = opaque {
    pub const InternalInfo = objc.ExternClass("NSPropertyMapping", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn name(_self: *@This()) ?*String {
        return objc.msgSend(_self, "name", ?*String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn valueExpression(_self: *@This()) ?*Expression {
        return objc.msgSend(_self, "valueExpression", ?*Expression, .{});
    }

    pub fn setValueExpression(_self: *@This(), _valueExpression: ?*Expression) void {
        return objc.msgSend(_self, "setValueExpression:", void, .{_valueExpression});
    }

    pub fn userInfo(_self: *@This()) ?*Dictionary {
        return objc.msgSend(_self, "userInfo", ?*Dictionary, .{});
    }

    pub fn setUserInfo(_self: *@This(), _userInfo: ?*Dictionary) void {
        return objc.msgSend(_self, "setUserInfo:", void, .{_userInfo});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSMigrationManager?language=objc
pub const MigrationManager = opaque {
    pub const InternalInfo = objc.ExternClass("NSMigrationManager", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithSourceModelDestinationModel(_self: *@This(), _sourceModel: ?*ManagedObjectModel, _destinationModel: ?*ManagedObjectModel) *@This() {
        return objc.msgSend(_self, "initWithSourceModel:destinationModel:", *@This(), .{ _sourceModel, _destinationModel });
    }

    pub fn migrateStoreFromURLTypeOptionsWithMappingModelToDestinationURLDestinationTypeDestinationOptionsError(
        _self: *@This(),
        _sourceURL: ?*URL,
        _sStoreType: ?*String,
        _sOptions: ?*Dictionary,
        _mappings: ?*MappingModel,
        _dURL: ?*URL,
        _dStoreType: ?*String,
        _dOptions: ?*Dictionary,
        _error: ?*?*Error,
    ) objc.BOOL {
        return objc.msgSend(_self, "migrateStoreFromURL:type:options:withMappingModel:toDestinationURL:destinationType:destinationOptions:error:", objc.BOOL, .{
            _sourceURL,
            _sStoreType,
            _sOptions,
            _mappings,
            _dURL,
            _dStoreType,
            _dOptions,
            _error,
        });
    }

    pub fn reset(_self: *@This()) void {
        return objc.msgSend(_self, "reset", void, .{});
    }

    pub fn sourceEntityForEntityMapping(_self: *@This(), _mEntity: ?*EntityMapping) ?*EntityDescription {
        return objc.msgSend(_self, "sourceEntityForEntityMapping:", ?*EntityDescription, .{_mEntity});
    }

    pub fn destinationEntityForEntityMapping(_self: *@This(), _mEntity: ?*EntityMapping) ?*EntityDescription {
        return objc.msgSend(_self, "destinationEntityForEntityMapping:", ?*EntityDescription, .{_mEntity});
    }

    pub fn associateSourceInstanceWithDestinationInstanceForEntityMapping(_self: *@This(), _sourceInstance: ?*ManagedObject, _destinationInstance: ?*ManagedObject, _entityMapping: ?*EntityMapping) void {
        return objc.msgSend(_self, "associateSourceInstance:withDestinationInstance:forEntityMapping:", void, .{ _sourceInstance, _destinationInstance, _entityMapping });
    }

    pub fn destinationInstancesForEntityMappingNamedSourceInstances(_self: *@This(), _mappingName: ?*String, _sourceInstances: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "destinationInstancesForEntityMappingNamed:sourceInstances:", ?*anyopaque, .{ _mappingName, _sourceInstances });
    }

    pub fn sourceInstancesForEntityMappingNamedDestinationInstances(_self: *@This(), _mappingName: ?*String, _destinationInstances: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "sourceInstancesForEntityMappingNamed:destinationInstances:", ?*anyopaque, .{ _mappingName, _destinationInstances });
    }

    pub fn cancelMigrationWithError(_self: *@This(), _error: ?*Error) void {
        return objc.msgSend(_self, "cancelMigrationWithError:", void, .{_error});
    }

    pub fn usesStoreSpecificMigrationManager(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "usesStoreSpecificMigrationManager", objc.BOOL, .{});
    }

    pub fn setUsesStoreSpecificMigrationManager(_self: *@This(), _usesStoreSpecificMigrationManager: objc.BOOL) void {
        return objc.msgSend(_self, "setUsesStoreSpecificMigrationManager:", void, .{_usesStoreSpecificMigrationManager});
    }

    pub fn mappingModel(_self: *@This()) ?*MappingModel {
        return objc.msgSend(_self, "mappingModel", ?*MappingModel, .{});
    }

    pub fn sourceModel(_self: *@This()) ?*ManagedObjectModel {
        return objc.msgSend(_self, "sourceModel", ?*ManagedObjectModel, .{});
    }

    pub fn destinationModel(_self: *@This()) ?*ManagedObjectModel {
        return objc.msgSend(_self, "destinationModel", ?*ManagedObjectModel, .{});
    }

    pub fn sourceContext(_self: *@This()) ?*ManagedObjectContext {
        return objc.msgSend(_self, "sourceContext", ?*ManagedObjectContext, .{});
    }

    pub fn destinationContext(_self: *@This()) ?*ManagedObjectContext {
        return objc.msgSend(_self, "destinationContext", ?*ManagedObjectContext, .{});
    }

    pub fn currentEntityMapping(_self: *@This()) ?*EntityMapping {
        return objc.msgSend(_self, "currentEntityMapping", ?*EntityMapping, .{});
    }

    pub fn migrationProgress(_self: *@This()) f32 {
        return objc.msgSend(_self, "migrationProgress", f32, .{});
    }

    pub fn userInfo(_self: *@This()) ?*Dictionary {
        return objc.msgSend(_self, "userInfo", ?*Dictionary, .{});
    }

    pub fn setUserInfo(_self: *@This(), _userInfo: ?*Dictionary) void {
        return objc.msgSend(_self, "setUserInfo:", void, .{_userInfo});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSIncrementalStore?language=objc
pub const IncrementalStore = opaque {
    pub const InternalInfo = objc.ExternClass("NSIncrementalStore", @This(), PersistentStore, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn metadataForPersistentStoreWithURLError(_self: *@This(), _url: ?*URL, _error: ?*?*Error) ?*anyopaque {
        return objc.msgSend(_self, "metadataForPersistentStoreWithURL:error:", ?*anyopaque, .{ _url, _error });
    }

    pub fn setMetadataForPersistentStoreWithURLError(_self: *@This(), _metadata: ?*anyopaque, _url: ?*URL, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "setMetadata:forPersistentStoreWithURL:error:", objc.BOOL, .{ _metadata, _url, _error });
    }

    pub fn migrationManagerClass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "migrationManagerClass", *objc.Class, .{});
    }

    pub fn initWithPersistentStoreCoordinatorConfigurationNameURLOptions(
        _self: *@This(),
        _root: ?*PersistentStoreCoordinator,
        _name: ?*String,
        _url: ?*URL,
        _options: ?*Dictionary,
    ) *@This() {
        return objc.msgSend(_self, "initWithPersistentStoreCoordinator:configurationName:URL:options:", *@This(), .{
            _root,
            _name,
            _url,
            _options,
        });
    }

    pub fn loadMetadata(_self: *@This(), _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "loadMetadata:", objc.BOOL, .{_error});
    }

    pub fn didAddToPersistentStoreCoordinator(_self: *@This(), _coordinator: ?*PersistentStoreCoordinator) void {
        return objc.msgSend(_self, "didAddToPersistentStoreCoordinator:", void, .{_coordinator});
    }

    pub fn willRemoveFromPersistentStoreCoordinator(_self: *@This(), _coordinator: ?*PersistentStoreCoordinator) void {
        return objc.msgSend(_self, "willRemoveFromPersistentStoreCoordinator:", void, .{_coordinator});
    }

    pub fn persistentStoreCoordinator(_self: *@This()) ?*PersistentStoreCoordinator {
        return objc.msgSend(_self, "persistentStoreCoordinator", ?*PersistentStoreCoordinator, .{});
    }

    pub fn configurationName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "configurationName", ?*String, .{});
    }

    pub fn options(_self: *@This()) ?*Dictionary {
        return objc.msgSend(_self, "options", ?*Dictionary, .{});
    }

    pub fn url(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "URL", ?*URL, .{});
    }

    pub fn setURL(_self: *@This(), _URL: ?*URL) void {
        return objc.msgSend(_self, "setURL:", void, .{_URL});
    }

    pub fn identifier(_self: *@This()) ?*String {
        return objc.msgSend(_self, "identifier", ?*String, .{});
    }

    pub fn setIdentifier(_self: *@This(), _identifier: ?*String) void {
        return objc.msgSend(_self, "setIdentifier:", void, .{_identifier});
    }

    pub fn @"type"(_self: *@This()) ?*String {
        return objc.msgSend(_self, "type", ?*String, .{});
    }

    pub fn isReadOnly(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isReadOnly", objc.BOOL, .{});
    }

    pub fn setReadOnly(_self: *@This(), _readOnly: objc.BOOL) void {
        return objc.msgSend(_self, "setReadOnly:", void, .{_readOnly});
    }

    pub fn metadata(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "metadata", ?*anyopaque, .{});
    }

    pub fn setMetadata(_self: *@This(), _metadata: ?*anyopaque) void {
        return objc.msgSend(_self, "setMetadata:", void, .{_metadata});
    }

    pub fn coreSpotlightExporter(_self: *@This()) ?*CoreDataCoreSpotlightDelegate {
        return objc.msgSend(_self, "coreSpotlightExporter", ?*CoreDataCoreSpotlightDelegate, .{});
    }

    pub fn executeRequestWithContextError(_self: *@This(), _request: ?*PersistentStoreRequest, _context: ?*ManagedObjectContext, _error: ?*?*Error) *objc.Id {
        return objc.msgSend(_self, "executeRequest:withContext:error:", *objc.Id, .{ _request, _context, _error });
    }

    pub fn newValuesForObjectWithIDWithContextError(_self: *@This(), _objectID: ?*ManagedObjectID, _context: ?*ManagedObjectContext, _error: ?*?*Error) ?*IncrementalStoreNode {
        return objc.msgSend(_self, "newValuesForObjectWithID:withContext:error:", ?*IncrementalStoreNode, .{ _objectID, _context, _error });
    }

    pub fn newValueForRelationshipForObjectWithIDWithContextError(
        _self: *@This(),
        _relationship: ?*RelationshipDescription,
        _objectID: ?*ManagedObjectID,
        _context: ?*ManagedObjectContext,
        _error: ?*?*Error,
    ) *objc.Id {
        return objc.msgSend(_self, "newValueForRelationship:forObjectWithID:withContext:error:", *objc.Id, .{
            _relationship,
            _objectID,
            _context,
            _error,
        });
    }

    pub fn identifierForNewStoreAtURL(_self: *@This(), _storeURL: ?*URL) *objc.Id {
        return objc.msgSend(_self, "identifierForNewStoreAtURL:", *objc.Id, .{_storeURL});
    }

    pub fn obtainPermanentIDsForObjectsError(_self: *@This(), _array: ?*anyopaque, _error: ?*?*Error) ?*anyopaque {
        return objc.msgSend(_self, "obtainPermanentIDsForObjects:error:", ?*anyopaque, .{ _array, _error });
    }

    pub fn managedObjectContextDidRegisterObjectsWithIDs(_self: *@This(), _objectIDs: ?*anyopaque) void {
        return objc.msgSend(_self, "managedObjectContextDidRegisterObjectsWithIDs:", void, .{_objectIDs});
    }

    pub fn managedObjectContextDidUnregisterObjectsWithIDs(_self: *@This(), _objectIDs: ?*anyopaque) void {
        return objc.msgSend(_self, "managedObjectContextDidUnregisterObjectsWithIDs:", void, .{_objectIDs});
    }

    pub fn newObjectIDForEntityReferenceObject(_self: *@This(), _entity: ?*EntityDescription, _data: *objc.Id) ?*ManagedObjectID {
        return objc.msgSend(_self, "newObjectIDForEntity:referenceObject:", ?*ManagedObjectID, .{ _entity, _data });
    }

    pub fn referenceObjectForObjectID(_self: *@This(), _objectID: ?*ManagedObjectID) *objc.Id {
        return objc.msgSend(_self, "referenceObjectForObjectID:", *objc.Id, .{_objectID});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSIncrementalStoreNode?language=objc
pub const IncrementalStoreNode = opaque {
    pub const InternalInfo = objc.ExternClass("NSIncrementalStoreNode", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithObjectIDWithValuesVersion(_self: *@This(), _objectID: ?*ManagedObjectID, _values: ?*anyopaque, _version: objc.uint64_t) *@This() {
        return objc.msgSend(_self, "initWithObjectID:withValues:version:", *@This(), .{ _objectID, _values, _version });
    }

    pub fn updateWithValuesVersion(_self: *@This(), _values: ?*anyopaque, _version: objc.uint64_t) void {
        return objc.msgSend(_self, "updateWithValues:version:", void, .{ _values, _version });
    }

    pub fn valueForPropertyDescription(_self: *@This(), _prop: ?*PropertyDescription) *objc.Id {
        return objc.msgSend(_self, "valueForPropertyDescription:", *objc.Id, .{_prop});
    }

    pub fn objectID(_self: *@This()) ?*ManagedObjectID {
        return objc.msgSend(_self, "objectID", ?*ManagedObjectID, .{});
    }

    pub fn version(_self: *@This()) objc.uint64_t {
        return objc.msgSend(_self, "version", objc.uint64_t, .{});
    }
};

pub const BatchInsertRequestResultType = enum(objc.NSUInteger) {
    StatusOnly = 0,
    ObjectIDs = 1,
    Count = 2,
};

pub const BatchUpdateRequestResultType = enum(objc.NSUInteger) {
    StatusOnlyResultType = 0,
    UpdatedObjectIDsResultType = 1,
    UpdatedObjectsCountResultType = 2,
};

pub const BatchDeleteRequestResultType = enum(objc.NSUInteger) {
    ResultTypeStatusOnly = 0,
    ResultTypeObjectIDs = 1,
    ResultTypeCount = 2,
};

pub const PersistentHistoryResultType = enum(objc.NSInteger) {
    StatusOnly = 0,
    ObjectIDs = 1,
    Count = 2,
    TransactionsOnly = 3,
    ChangesOnly = 4,
    TransactionsAndChanges = 5,
};

/// https://developer.apple.com/documentation/CoreData/NSPersistentStoreResult?language=objc
pub const PersistentStoreResult = opaque {
    pub const InternalInfo = objc.ExternClass("NSPersistentStoreResult", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSPersistentStoreAsynchronousResult?language=objc
pub const PersistentStoreAsynchronousResult = opaque {
    pub const InternalInfo = objc.ExternClass("NSPersistentStoreAsynchronousResult", @This(), PersistentStoreResult, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn cancel(_self: *@This()) void {
        return objc.msgSend(_self, "cancel", void, .{});
    }

    pub fn managedObjectContext(_self: *@This()) ?*ManagedObjectContext {
        return objc.msgSend(_self, "managedObjectContext", ?*ManagedObjectContext, .{});
    }

    pub fn operationError(_self: *@This()) ?*Error {
        return objc.msgSend(_self, "operationError", ?*Error, .{});
    }

    pub fn progress(_self: *@This()) ?*Progress {
        return objc.msgSend(_self, "progress", ?*Progress, .{});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSAsynchronousFetchResult?language=objc
pub fn AsynchronousFetchResult(comptime ResultType: type) type {
    return struct {
        pub const InternalInfo = objc.ExternClass("NSAsynchronousFetchResult", @This(), PersistentStoreAsynchronousResult, &.{});
        pub const as = InternalInfo.as;
        pub const retain = InternalInfo.retain;
        pub const release = InternalInfo.release;
        pub const autorelease = InternalInfo.autorelease;
        pub const new = InternalInfo.new;
        pub const alloc = InternalInfo.alloc;
        pub const allocInit = InternalInfo.allocInit;

        pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
            return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
        }

        pub fn hash(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
        }

        pub fn superclass(_self: *@This()) *objc.Class {
            return objc.msgSend(_self, "superclass", *objc.Class, .{});
        }

        pub fn class(_self: *@This()) *objc.Class {
            return objc.msgSend(_self, "class", *objc.Class, .{});
        }

        pub fn self(_self: *@This()) *@This() {
            return objc.msgSend(_self, "self", *@This(), .{});
        }

        pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
            return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
        }

        pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
        }

        pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
        }

        pub fn isProxy(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
        }

        pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
            return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
        }

        pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
            return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn retainCount(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
        }

        pub fn zone(_self: *@This()) ?*objc._NSZone {
            return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
        }

        pub fn description(_self: *@This()) ?*objc.NSString {
            return objc.msgSend(_self, "description", ?*objc.NSString, .{});
        }

        pub fn debugDescription(_self: *@This()) ?*objc.NSString {
            return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
        }

        pub fn load(_self: *@This()) void {
            return objc.msgSend(_self, "load", void, .{});
        }

        pub fn initialize(_self: *@This()) void {
            return objc.msgSend(_self, "initialize", void, .{});
        }

        pub fn init(_self: *@This()) *@This() {
            return objc.msgSend(_self, "init", *@This(), .{});
        }

        pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
            return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
        }

        pub fn dealloc(_self: *@This()) void {
            return objc.msgSend(_self, "dealloc", void, .{});
        }

        pub fn finalize(_self: *@This()) void {
            return objc.msgSend(_self, "finalize", void, .{});
        }

        pub fn copy(_self: *@This()) *objc.Id {
            return objc.msgSend(_self, "copy", *objc.Id, .{});
        }

        pub fn mutableCopy(_self: *@This()) *objc.Id {
            return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
        }

        pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
            return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
        }

        pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
            return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
        }

        pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
            return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
            return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
            return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
            return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
        }

        pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
            return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
        }

        pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
            return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
        }

        pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
            return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
        }

        pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
            return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
        }

        pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
        }

        pub fn retainWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
        }

        pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
            return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
        }

        pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
            return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
        }

        pub fn cancel(_self: *@This()) void {
            return objc.msgSend(_self, "cancel", void, .{});
        }

        pub fn managedObjectContext(_self: *@This()) ?*ManagedObjectContext {
            return objc.msgSend(_self, "managedObjectContext", ?*ManagedObjectContext, .{});
        }

        pub fn operationError(_self: *@This()) ?*Error {
            return objc.msgSend(_self, "operationError", ?*Error, .{});
        }

        pub fn progress(_self: *@This()) ?*Progress {
            return objc.msgSend(_self, "progress", ?*Progress, .{});
        }

        pub fn fetchRequest(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "fetchRequest", ?*anyopaque, .{});
        }

        pub fn finalResult(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "finalResult", ?*anyopaque, .{});
        }
    };
}

/// https://developer.apple.com/documentation/CoreData/NSBatchInsertResult?language=objc
pub const BatchInsertResult = opaque {
    pub const InternalInfo = objc.ExternClass("NSBatchInsertResult", @This(), PersistentStoreResult, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn result(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "result", *objc.Id, .{});
    }

    pub fn resultType(_self: *@This()) BatchInsertRequestResultType {
        return objc.msgSend(_self, "resultType", BatchInsertRequestResultType, .{});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSBatchUpdateResult?language=objc
pub const BatchUpdateResult = opaque {
    pub const InternalInfo = objc.ExternClass("NSBatchUpdateResult", @This(), PersistentStoreResult, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn result(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "result", *objc.Id, .{});
    }

    pub fn resultType(_self: *@This()) BatchUpdateRequestResultType {
        return objc.msgSend(_self, "resultType", BatchUpdateRequestResultType, .{});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSBatchDeleteResult?language=objc
pub const BatchDeleteResult = opaque {
    pub const InternalInfo = objc.ExternClass("NSBatchDeleteResult", @This(), PersistentStoreResult, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn result(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "result", *objc.Id, .{});
    }

    pub fn resultType(_self: *@This()) BatchDeleteRequestResultType {
        return objc.msgSend(_self, "resultType", BatchDeleteRequestResultType, .{});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSPersistentHistoryResult?language=objc
pub const PersistentHistoryResult = opaque {
    pub const InternalInfo = objc.ExternClass("NSPersistentHistoryResult", @This(), PersistentStoreResult, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn result(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "result", *objc.Id, .{});
    }

    pub fn resultType(_self: *@This()) PersistentHistoryResultType {
        return objc.msgSend(_self, "resultType", PersistentHistoryResultType, .{});
    }
};

pub const PersistentCloudKitContainerEventResultType = enum(objc.NSInteger) {
    Events = 0,
    CountEvents = 1,
};

/// https://developer.apple.com/documentation/CoreData/NSPersistentCloudKitContainerEventResult?language=objc
pub const PersistentCloudKitContainerEventResult = opaque {
    pub const InternalInfo = objc.ExternClass("NSPersistentCloudKitContainerEventResult", @This(), PersistentStoreResult, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn result(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "result", *objc.Id, .{});
    }

    pub fn resultType(_self: *@This()) PersistentCloudKitContainerEventResultType {
        return objc.msgSend(_self, "resultType", PersistentCloudKitContainerEventResultType, .{});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSSaveChangesRequest?language=objc
pub const SaveChangesRequest = opaque {
    pub const InternalInfo = objc.ExternClass("NSSaveChangesRequest", @This(), PersistentStoreRequest, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn affectedStores(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "affectedStores", ?*anyopaque, .{});
    }

    pub fn setAffectedStores(_self: *@This(), _affectedStores: ?*anyopaque) void {
        return objc.msgSend(_self, "setAffectedStores:", void, .{_affectedStores});
    }

    pub fn requestType(_self: *@This()) PersistentStoreRequestType {
        return objc.msgSend(_self, "requestType", PersistentStoreRequestType, .{});
    }

    pub fn initWithInsertedObjectsUpdatedObjectsDeletedObjectsLockedObjects(
        _self: *@This(),
        _insertedObjects: ?*anyopaque,
        _updatedObjects: ?*anyopaque,
        _deletedObjects: ?*anyopaque,
        _lockedObjects: ?*anyopaque,
    ) *@This() {
        return objc.msgSend(_self, "initWithInsertedObjects:updatedObjects:deletedObjects:lockedObjects:", *@This(), .{
            _insertedObjects,
            _updatedObjects,
            _deletedObjects,
            _lockedObjects,
        });
    }

    pub fn insertedObjects(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "insertedObjects", ?*anyopaque, .{});
    }

    pub fn updatedObjects(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "updatedObjects", ?*anyopaque, .{});
    }

    pub fn deletedObjects(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "deletedObjects", ?*anyopaque, .{});
    }

    pub fn lockedObjects(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "lockedObjects", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSBatchUpdateRequest?language=objc
pub const BatchUpdateRequest = opaque {
    pub const InternalInfo = objc.ExternClass("NSBatchUpdateRequest", @This(), PersistentStoreRequest, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn affectedStores(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "affectedStores", ?*anyopaque, .{});
    }

    pub fn setAffectedStores(_self: *@This(), _affectedStores: ?*anyopaque) void {
        return objc.msgSend(_self, "setAffectedStores:", void, .{_affectedStores});
    }

    pub fn requestType(_self: *@This()) PersistentStoreRequestType {
        return objc.msgSend(_self, "requestType", PersistentStoreRequestType, .{});
    }

    pub fn batchUpdateRequestWithEntityName(_self: *@This(), _entityName: ?*String) *@This() {
        return objc.msgSend(_self, "batchUpdateRequestWithEntityName:", *@This(), .{_entityName});
    }

    pub fn initWithEntityName(_self: *@This(), _entityName: ?*String) *@This() {
        return objc.msgSend(_self, "initWithEntityName:", *@This(), .{_entityName});
    }

    pub fn initWithEntity(_self: *@This(), _entity: ?*EntityDescription) *@This() {
        return objc.msgSend(_self, "initWithEntity:", *@This(), .{_entity});
    }

    pub fn entityName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "entityName", ?*String, .{});
    }

    pub fn entity(_self: *@This()) ?*EntityDescription {
        return objc.msgSend(_self, "entity", ?*EntityDescription, .{});
    }

    pub fn predicate(_self: *@This()) ?*Predicate {
        return objc.msgSend(_self, "predicate", ?*Predicate, .{});
    }

    pub fn setPredicate(_self: *@This(), _predicate: ?*Predicate) void {
        return objc.msgSend(_self, "setPredicate:", void, .{_predicate});
    }

    pub fn includesSubentities(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "includesSubentities", objc.BOOL, .{});
    }

    pub fn setIncludesSubentities(_self: *@This(), _includesSubentities: objc.BOOL) void {
        return objc.msgSend(_self, "setIncludesSubentities:", void, .{_includesSubentities});
    }

    pub fn resultType(_self: *@This()) BatchUpdateRequestResultType {
        return objc.msgSend(_self, "resultType", BatchUpdateRequestResultType, .{});
    }

    pub fn setResultType(_self: *@This(), _resultType: BatchUpdateRequestResultType) void {
        return objc.msgSend(_self, "setResultType:", void, .{_resultType});
    }

    pub fn propertiesToUpdate(_self: *@This()) ?*Dictionary {
        return objc.msgSend(_self, "propertiesToUpdate", ?*Dictionary, .{});
    }

    pub fn setPropertiesToUpdate(_self: *@This(), _propertiesToUpdate: ?*Dictionary) void {
        return objc.msgSend(_self, "setPropertiesToUpdate:", void, .{_propertiesToUpdate});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSBatchDeleteRequest?language=objc
pub const BatchDeleteRequest = opaque {
    pub const InternalInfo = objc.ExternClass("NSBatchDeleteRequest", @This(), PersistentStoreRequest, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn affectedStores(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "affectedStores", ?*anyopaque, .{});
    }

    pub fn setAffectedStores(_self: *@This(), _affectedStores: ?*anyopaque) void {
        return objc.msgSend(_self, "setAffectedStores:", void, .{_affectedStores});
    }

    pub fn requestType(_self: *@This()) PersistentStoreRequestType {
        return objc.msgSend(_self, "requestType", PersistentStoreRequestType, .{});
    }

    pub fn initWithFetchRequest(_self: *@This(), _fetch: ?*FetchRequest) *@This() {
        return objc.msgSend(_self, "initWithFetchRequest:", *@This(), .{_fetch});
    }

    pub fn initWithObjectIDs(_self: *@This(), _objects: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithObjectIDs:", *@This(), .{_objects});
    }

    pub fn resultType(_self: *@This()) BatchDeleteRequestResultType {
        return objc.msgSend(_self, "resultType", BatchDeleteRequestResultType, .{});
    }

    pub fn setResultType(_self: *@This(), _resultType: BatchDeleteRequestResultType) void {
        return objc.msgSend(_self, "setResultType:", void, .{_resultType});
    }

    pub fn fetchRequest(_self: *@This()) ?*FetchRequest {
        return objc.msgSend(_self, "fetchRequest", ?*FetchRequest, .{});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSBatchInsertRequest?language=objc
pub const BatchInsertRequest = opaque {
    pub const InternalInfo = objc.ExternClass("NSBatchInsertRequest", @This(), PersistentStoreRequest, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn affectedStores(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "affectedStores", ?*anyopaque, .{});
    }

    pub fn setAffectedStores(_self: *@This(), _affectedStores: ?*anyopaque) void {
        return objc.msgSend(_self, "setAffectedStores:", void, .{_affectedStores});
    }

    pub fn requestType(_self: *@This()) PersistentStoreRequestType {
        return objc.msgSend(_self, "requestType", PersistentStoreRequestType, .{});
    }

    pub fn batchInsertRequestWithEntityNameObjects(_self: *@This(), _entityName: ?*String, _dictionaries: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "batchInsertRequestWithEntityName:objects:", *@This(), .{ _entityName, _dictionaries });
    }

    pub fn batchInsertRequestWithEntityNameDictionaryHandler(_self: *@This(), _entityName: ?*String, _handler: *const fn (?*anyopaque) callconv(.C) objc.BOOL) *@This() {
        return objc.msgSend(_self, "batchInsertRequestWithEntityName:dictionaryHandler:", *@This(), .{ _entityName, _handler });
    }

    pub fn batchInsertRequestWithEntityNameManagedObjectHandler(_self: *@This(), _entityName: ?*String, _handler: *const fn (?*ManagedObject) callconv(.C) objc.BOOL) *@This() {
        return objc.msgSend(_self, "batchInsertRequestWithEntityName:managedObjectHandler:", *@This(), .{ _entityName, _handler });
    }

    pub fn initWithEntityNameObjects(_self: *@This(), _entityName: ?*String, _dictionaries: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithEntityName:objects:", *@This(), .{ _entityName, _dictionaries });
    }

    pub fn initWithEntityObjects(_self: *@This(), _entity: ?*EntityDescription, _dictionaries: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithEntity:objects:", *@This(), .{ _entity, _dictionaries });
    }

    pub fn initWithEntityDictionaryHandler(_self: *@This(), _entity: ?*EntityDescription, _handler: *const fn (?*anyopaque) callconv(.C) objc.BOOL) *@This() {
        return objc.msgSend(_self, "initWithEntity:dictionaryHandler:", *@This(), .{ _entity, _handler });
    }

    pub fn initWithEntityManagedObjectHandler(_self: *@This(), _entity: ?*EntityDescription, _handler: *const fn (?*ManagedObject) callconv(.C) objc.BOOL) *@This() {
        return objc.msgSend(_self, "initWithEntity:managedObjectHandler:", *@This(), .{ _entity, _handler });
    }

    pub fn initWithEntityNameDictionaryHandler(_self: *@This(), _entityName: ?*String, _handler: *const fn (?*anyopaque) callconv(.C) objc.BOOL) *@This() {
        return objc.msgSend(_self, "initWithEntityName:dictionaryHandler:", *@This(), .{ _entityName, _handler });
    }

    pub fn initWithEntityNameManagedObjectHandler(_self: *@This(), _entityName: ?*String, _handler: *const fn (?*ManagedObject) callconv(.C) objc.BOOL) *@This() {
        return objc.msgSend(_self, "initWithEntityName:managedObjectHandler:", *@This(), .{ _entityName, _handler });
    }

    pub fn entityName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "entityName", ?*String, .{});
    }

    pub fn entity(_self: *@This()) ?*EntityDescription {
        return objc.msgSend(_self, "entity", ?*EntityDescription, .{});
    }

    pub fn objectsToInsert(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "objectsToInsert", ?*anyopaque, .{});
    }

    pub fn setObjectsToInsert(_self: *@This(), _objectsToInsert: ?*anyopaque) void {
        return objc.msgSend(_self, "setObjectsToInsert:", void, .{_objectsToInsert});
    }

    pub fn dictionaryHandler(_self: *@This()) *const fn (?*anyopaque) callconv(.C) objc.BOOL {
        return objc.msgSend(_self, "dictionaryHandler", *const fn (?*anyopaque) callconv(.C) objc.BOOL, .{});
    }

    pub fn setDictionaryHandler(_self: *@This(), _dictionaryHandler: *const fn (?*anyopaque) callconv(.C) objc.BOOL) void {
        return objc.msgSend(_self, "setDictionaryHandler:", void, .{_dictionaryHandler});
    }

    pub fn managedObjectHandler(_self: *@This()) *const fn (?*ManagedObject) callconv(.C) objc.BOOL {
        return objc.msgSend(_self, "managedObjectHandler", *const fn (?*ManagedObject) callconv(.C) objc.BOOL, .{});
    }

    pub fn setManagedObjectHandler(_self: *@This(), _managedObjectHandler: *const fn (?*ManagedObject) callconv(.C) objc.BOOL) void {
        return objc.msgSend(_self, "setManagedObjectHandler:", void, .{_managedObjectHandler});
    }

    pub fn resultType(_self: *@This()) BatchInsertRequestResultType {
        return objc.msgSend(_self, "resultType", BatchInsertRequestResultType, .{});
    }

    pub fn setResultType(_self: *@This(), _resultType: BatchInsertRequestResultType) void {
        return objc.msgSend(_self, "setResultType:", void, .{_resultType});
    }
};

pub const MergePolicyType = enum(objc.NSUInteger) {
    ErrorMergePolicyType = 0,
    ByPropertyStoreTrumpMergePolicyType = 1,
    ByPropertyObjectTrumpMergePolicyType = 2,
    OverwriteMergePolicyType = 3,
    RollbackMergePolicyType = 4,
};

/// https://developer.apple.com/documentation/CoreData/NSMergeConflict?language=objc
pub const MergeConflict = opaque {
    pub const InternalInfo = objc.ExternClass("NSMergeConflict", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithSourceNewVersionOldVersionCachedSnapshotPersistedSnapshot(
        _self: *@This(),
        _srcObject: ?*ManagedObject,
        _newvers: objc.NSUInteger,
        _oldvers: objc.NSUInteger,
        _cachesnap: ?*anyopaque,
        _persnap: ?*anyopaque,
    ) *@This() {
        return objc.msgSend(_self, "initWithSource:newVersion:oldVersion:cachedSnapshot:persistedSnapshot:", *@This(), .{
            _srcObject,
            _newvers,
            _oldvers,
            _cachesnap,
            _persnap,
        });
    }

    pub fn sourceObject(_self: *@This()) ?*ManagedObject {
        return objc.msgSend(_self, "sourceObject", ?*ManagedObject, .{});
    }

    pub fn objectSnapshot(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "objectSnapshot", ?*anyopaque, .{});
    }

    pub fn cachedSnapshot(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "cachedSnapshot", ?*anyopaque, .{});
    }

    pub fn persistedSnapshot(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "persistedSnapshot", ?*anyopaque, .{});
    }

    pub fn newVersionNumber(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "newVersionNumber", objc.NSUInteger, .{});
    }

    pub fn oldVersionNumber(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "oldVersionNumber", objc.NSUInteger, .{});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSConstraintConflict?language=objc
pub const ConstraintConflict = opaque {
    pub const InternalInfo = objc.ExternClass("NSConstraintConflict", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithConstraintDatabaseObjectDatabaseSnapshotConflictingObjectsConflictingSnapshots(
        _self: *@This(),
        _contraint: ?*anyopaque,
        _databaseObject: ?*ManagedObject,
        _databaseSnapshot: ?*Dictionary,
        _conflictingObjects: ?*anyopaque,
        _conflictingSnapshots: ?*Array,
    ) *@This() {
        return objc.msgSend(_self, "initWithConstraint:databaseObject:databaseSnapshot:conflictingObjects:conflictingSnapshots:", *@This(), .{
            _contraint,
            _databaseObject,
            _databaseSnapshot,
            _conflictingObjects,
            _conflictingSnapshots,
        });
    }

    pub fn constraint(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "constraint", ?*anyopaque, .{});
    }

    pub fn constraintValues(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "constraintValues", ?*anyopaque, .{});
    }

    pub fn databaseObject(_self: *@This()) ?*ManagedObject {
        return objc.msgSend(_self, "databaseObject", ?*ManagedObject, .{});
    }

    pub fn databaseSnapshot(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "databaseSnapshot", ?*anyopaque, .{});
    }

    pub fn conflictingObjects(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "conflictingObjects", ?*anyopaque, .{});
    }

    pub fn conflictingSnapshots(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "conflictingSnapshots", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSMergePolicy?language=objc
pub const MergePolicy = opaque {
    pub const InternalInfo = objc.ExternClass("NSMergePolicy", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithMergeType(_self: *@This(), _ty: MergePolicyType) *objc.Id {
        return objc.msgSend(_self, "initWithMergeType:", *objc.Id, .{_ty});
    }

    pub fn resolveConflictsError(_self: *@This(), _list: ?*Array, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "resolveConflicts:error:", objc.BOOL, .{ _list, _error });
    }

    pub fn resolveOptimisticLockingVersionConflictsError(_self: *@This(), _list: ?*anyopaque, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "resolveOptimisticLockingVersionConflicts:error:", objc.BOOL, .{ _list, _error });
    }

    pub fn resolveConstraintConflictsError(_self: *@This(), _list: ?*anyopaque, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "resolveConstraintConflicts:error:", objc.BOOL, .{ _list, _error });
    }

    pub fn errorMergePolicy(_self: *@This()) ?*MergePolicy {
        return objc.msgSend(_self, "errorMergePolicy", ?*MergePolicy, .{});
    }

    pub fn rollbackMergePolicy(_self: *@This()) ?*MergePolicy {
        return objc.msgSend(_self, "rollbackMergePolicy", ?*MergePolicy, .{});
    }

    pub fn overwriteMergePolicy(_self: *@This()) ?*MergePolicy {
        return objc.msgSend(_self, "overwriteMergePolicy", ?*MergePolicy, .{});
    }

    pub fn mergeByPropertyObjectTrumpMergePolicy(_self: *@This()) ?*MergePolicy {
        return objc.msgSend(_self, "mergeByPropertyObjectTrumpMergePolicy", ?*MergePolicy, .{});
    }

    pub fn mergeByPropertyStoreTrumpMergePolicy(_self: *@This()) ?*MergePolicy {
        return objc.msgSend(_self, "mergeByPropertyStoreTrumpMergePolicy", ?*MergePolicy, .{});
    }

    pub fn mergeType(_self: *@This()) MergePolicyType {
        return objc.msgSend(_self, "mergeType", MergePolicyType, .{});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSFetchedResultsController?language=objc
pub fn FetchedResultsController(comptime ResultType: type) type {
    return struct {
        pub const InternalInfo = objc.ExternClass("NSFetchedResultsController", @This(), objc.NSObject, &.{});
        pub const as = InternalInfo.as;
        pub const retain = InternalInfo.retain;
        pub const release = InternalInfo.release;
        pub const autorelease = InternalInfo.autorelease;
        pub const new = InternalInfo.new;
        pub const alloc = InternalInfo.alloc;
        pub const allocInit = InternalInfo.allocInit;

        pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
            return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
        }

        pub fn hash(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
        }

        pub fn superclass(_self: *@This()) *objc.Class {
            return objc.msgSend(_self, "superclass", *objc.Class, .{});
        }

        pub fn class(_self: *@This()) *objc.Class {
            return objc.msgSend(_self, "class", *objc.Class, .{});
        }

        pub fn self(_self: *@This()) *@This() {
            return objc.msgSend(_self, "self", *@This(), .{});
        }

        pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
            return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
        }

        pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
        }

        pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
            return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
        }

        pub fn isProxy(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
        }

        pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
            return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
        }

        pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
            return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn retainCount(_self: *@This()) objc.NSUInteger {
            return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
        }

        pub fn zone(_self: *@This()) ?*objc._NSZone {
            return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
        }

        pub fn description(_self: *@This()) ?*objc.NSString {
            return objc.msgSend(_self, "description", ?*objc.NSString, .{});
        }

        pub fn debugDescription(_self: *@This()) ?*objc.NSString {
            return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
        }

        pub fn load(_self: *@This()) void {
            return objc.msgSend(_self, "load", void, .{});
        }

        pub fn initialize(_self: *@This()) void {
            return objc.msgSend(_self, "initialize", void, .{});
        }

        pub fn init(_self: *@This()) *@This() {
            return objc.msgSend(_self, "init", *@This(), .{});
        }

        pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
            return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
        }

        pub fn dealloc(_self: *@This()) void {
            return objc.msgSend(_self, "dealloc", void, .{});
        }

        pub fn finalize(_self: *@This()) void {
            return objc.msgSend(_self, "finalize", void, .{});
        }

        pub fn copy(_self: *@This()) *objc.Id {
            return objc.msgSend(_self, "copy", *objc.Id, .{});
        }

        pub fn mutableCopy(_self: *@This()) *objc.Id {
            return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
        }

        pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
            return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
        }

        pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
            return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
        }

        pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
            return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
        }

        pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
            return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
            return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
        }

        pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
            return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
        }

        pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
            return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
        }

        pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
            return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
        }

        pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
            return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
        }

        pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
            return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
        }

        pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
        }

        pub fn retainWeakReference(_self: *@This()) objc.BOOL {
            return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
        }

        pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
            return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
        }

        pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
            return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
        }

        pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
            return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
        }

        pub fn initWithFetchRequestManagedObjectContextSectionNameKeyPathCacheName(
            _self: *@This(),
            _fetchRequest: ?*anyopaque,
            _context: ?*ManagedObjectContext,
            _sectionNameKeyPath: ?*String,
            _name: ?*String,
        ) *@This() {
            return objc.msgSend(_self, "initWithFetchRequest:managedObjectContext:sectionNameKeyPath:cacheName:", *@This(), .{
                _fetchRequest,
                _context,
                _sectionNameKeyPath,
                _name,
            });
        }

        pub fn performFetch(_self: *@This(), _error: ?*?*Error) objc.BOOL {
            return objc.msgSend(_self, "performFetch:", objc.BOOL, .{_error});
        }

        pub fn deleteCacheWithName(_self: *@This(), _name: ?*String) void {
            return objc.msgSend(_self, "deleteCacheWithName:", void, .{_name});
        }

        pub fn objectAtIndexPath(_self: *@This(), _indexPath: ?*foundation.IndexPath) ResultType {
            return objc.msgSend(_self, "objectAtIndexPath:", ResultType, .{_indexPath});
        }

        pub fn indexPathForObject(_self: *@This(), _object: ResultType) ?*foundation.IndexPath {
            return objc.msgSend(_self, "indexPathForObject:", ?*foundation.IndexPath, .{_object});
        }

        pub fn sectionIndexTitleForSectionName(_self: *@This(), _sectionName: ?*String) ?*String {
            return objc.msgSend(_self, "sectionIndexTitleForSectionName:", ?*String, .{_sectionName});
        }

        pub fn sectionForSectionIndexTitleAtIndex(_self: *@This(), _title: ?*String, _sectionIndex: objc.NSInteger) objc.NSInteger {
            return objc.msgSend(_self, "sectionForSectionIndexTitle:atIndex:", objc.NSInteger, .{ _title, _sectionIndex });
        }

        pub fn fetchRequest(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "fetchRequest", ?*anyopaque, .{});
        }

        pub fn managedObjectContext(_self: *@This()) ?*ManagedObjectContext {
            return objc.msgSend(_self, "managedObjectContext", ?*ManagedObjectContext, .{});
        }

        pub fn sectionNameKeyPath(_self: *@This()) ?*String {
            return objc.msgSend(_self, "sectionNameKeyPath", ?*String, .{});
        }

        pub fn cacheName(_self: *@This()) ?*String {
            return objc.msgSend(_self, "cacheName", ?*String, .{});
        }

        pub fn delegate(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "delegate", ?*anyopaque, .{});
        }

        pub fn setDelegate(_self: *@This(), _delegate: ?*anyopaque) void {
            return objc.msgSend(_self, "setDelegate:", void, .{_delegate});
        }

        pub fn fetchedObjects(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "fetchedObjects", ?*anyopaque, .{});
        }

        pub fn sectionIndexTitles(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "sectionIndexTitles", ?*anyopaque, .{});
        }

        pub fn sections(_self: *@This()) ?*anyopaque {
            return objc.msgSend(_self, "sections", ?*anyopaque, .{});
        }
    };
}

/// https://developer.apple.com/documentation/CoreData/NSFetchedResultsSectionInfo?language=objc
pub const FetchedResultsSectionInfo = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn name(_self: *@This()) ?*String {
        return objc.msgSend(_self, "name", ?*String, .{});
    }

    pub fn indexTitle(_self: *@This()) ?*String {
        return objc.msgSend(_self, "indexTitle", ?*String, .{});
    }

    pub fn numberOfObjects(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "numberOfObjects", objc.NSUInteger, .{});
    }

    pub fn objects(_self: *@This()) ?*Array {
        return objc.msgSend(_self, "objects", ?*Array, .{});
    }
};

pub const FetchedResultsChangeType = enum(objc.NSUInteger) {
    Insert = 1,
    Delete = 2,
    Move = 3,
    Update = 4,
};

/// https://developer.apple.com/documentation/CoreData/NSFetchedResultsControllerDelegate?language=objc
pub const FetchedResultsControllerDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn controllerDidChangeContentWithSnapshot(_self: *@This(), _controller: ?*FetchedResultsController, _snapshot: ?*anyopaque) void {
        return objc.msgSend(_self, "controller:didChangeContentWithSnapshot:", void, .{ _controller, _snapshot });
    }

    pub fn controllerDidChangeContentWithDifference(_self: *@This(), _controller: ?*FetchedResultsController, _diff: ?*anyopaque) void {
        return objc.msgSend(_self, "controller:didChangeContentWithDifference:", void, .{ _controller, _diff });
    }

    pub fn controllerDidChangeObjectAtIndexPathForChangeTypeNewIndexPath(
        _self: *@This(),
        _controller: ?*FetchedResultsController,
        _anObject: *objc.Id,
        _indexPath: ?*IndexPath,
        _type: FetchedResultsChangeType,
        _newIndexPath: ?*IndexPath,
    ) void {
        return objc.msgSend(_self, "controller:didChangeObject:atIndexPath:forChangeType:newIndexPath:", void, .{
            _controller,
            _anObject,
            _indexPath,
            _type,
            _newIndexPath,
        });
    }

    pub fn controllerDidChangeSectionAtIndexForChangeType(
        _self: *@This(),
        _controller: ?*FetchedResultsController,
        _sectionInfo: ?*anyopaque,
        _sectionIndex: objc.NSUInteger,
        _type: FetchedResultsChangeType,
    ) void {
        return objc.msgSend(_self, "controller:didChangeSection:atIndex:forChangeType:", void, .{
            _controller,
            _sectionInfo,
            _sectionIndex,
            _type,
        });
    }

    pub fn controllerWillChangeContent(_self: *@This(), _controller: ?*FetchedResultsController) void {
        return objc.msgSend(_self, "controllerWillChangeContent:", void, .{_controller});
    }

    pub fn controllerDidChangeContent(_self: *@This(), _controller: ?*FetchedResultsController) void {
        return objc.msgSend(_self, "controllerDidChangeContent:", void, .{_controller});
    }

    pub fn controllerSectionIndexTitleForSectionName(_self: *@This(), _controller: ?*FetchedResultsController, _sectionName: ?*String) ?*String {
        return objc.msgSend(_self, "controller:sectionIndexTitleForSectionName:", ?*String, .{ _controller, _sectionName });
    }
};

/// https://developer.apple.com/documentation/CoreData/NSQueryGenerationToken?language=objc
pub const QueryGenerationToken = opaque {
    pub const InternalInfo = objc.ExternClass("NSQueryGenerationToken", @This(), objc.NSObject, &.{
        foundation.Copying,
        foundation.SecureCoding,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn currentQueryGenerationToken(_self: *@This()) ?*QueryGenerationToken {
        return objc.msgSend(_self, "currentQueryGenerationToken", ?*QueryGenerationToken, .{});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSPersistentStoreDescription?language=objc
pub const PersistentStoreDescription = opaque {
    pub const InternalInfo = objc.ExternClass("NSPersistentStoreDescription", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn persistentStoreDescriptionWithURL(_self: *@This(), _URL: ?*URL) *@This() {
        return objc.msgSend(_self, "persistentStoreDescriptionWithURL:", *@This(), .{_URL});
    }

    pub fn setOptionForKey(_self: *@This(), _option: ?*objc.NSObject, _key: ?*String) void {
        return objc.msgSend(_self, "setOption:forKey:", void, .{ _option, _key });
    }

    pub fn setValueForPragmaNamed(_self: *@This(), _value: ?*objc.NSObject, _name: ?*String) void {
        return objc.msgSend(_self, "setValue:forPragmaNamed:", void, .{ _value, _name });
    }

    pub fn initWithURL(_self: *@This(), _url: ?*URL) *@This() {
        return objc.msgSend(_self, "initWithURL:", *@This(), .{_url});
    }

    pub fn @"type"(_self: *@This()) ?*String {
        return objc.msgSend(_self, "type", ?*String, .{});
    }

    pub fn setType(_self: *@This(), _type: ?*String) void {
        return objc.msgSend(_self, "setType:", void, .{_type});
    }

    pub fn configuration(_self: *@This()) ?*String {
        return objc.msgSend(_self, "configuration", ?*String, .{});
    }

    pub fn setConfiguration(_self: *@This(), _configuration: ?*String) void {
        return objc.msgSend(_self, "setConfiguration:", void, .{_configuration});
    }

    pub fn url(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "URL", ?*URL, .{});
    }

    pub fn setURL(_self: *@This(), _URL: ?*URL) void {
        return objc.msgSend(_self, "setURL:", void, .{_URL});
    }

    pub fn options(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "options", ?*anyopaque, .{});
    }

    pub fn isReadOnly(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isReadOnly", objc.BOOL, .{});
    }

    pub fn setReadOnly(_self: *@This(), _readOnly: objc.BOOL) void {
        return objc.msgSend(_self, "setReadOnly:", void, .{_readOnly});
    }

    pub fn timeout(_self: *@This()) foundation.TimeInterval {
        return objc.msgSend(_self, "timeout", foundation.TimeInterval, .{});
    }

    pub fn setTimeout(_self: *@This(), _timeout: foundation.TimeInterval) void {
        return objc.msgSend(_self, "setTimeout:", void, .{_timeout});
    }

    pub fn sqlitePragmas(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "sqlitePragmas", ?*anyopaque, .{});
    }

    pub fn shouldAddStoreAsynchronously(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldAddStoreAsynchronously", objc.BOOL, .{});
    }

    pub fn setShouldAddStoreAsynchronously(_self: *@This(), _shouldAddStoreAsynchronously: objc.BOOL) void {
        return objc.msgSend(_self, "setShouldAddStoreAsynchronously:", void, .{_shouldAddStoreAsynchronously});
    }

    pub fn shouldMigrateStoreAutomatically(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldMigrateStoreAutomatically", objc.BOOL, .{});
    }

    pub fn setShouldMigrateStoreAutomatically(_self: *@This(), _shouldMigrateStoreAutomatically: objc.BOOL) void {
        return objc.msgSend(_self, "setShouldMigrateStoreAutomatically:", void, .{_shouldMigrateStoreAutomatically});
    }

    pub fn shouldInferMappingModelAutomatically(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldInferMappingModelAutomatically", objc.BOOL, .{});
    }

    pub fn setShouldInferMappingModelAutomatically(_self: *@This(), _shouldInferMappingModelAutomatically: objc.BOOL) void {
        return objc.msgSend(_self, "setShouldInferMappingModelAutomatically:", void, .{_shouldInferMappingModelAutomatically});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSPersistentContainer?language=objc
pub const PersistentContainer = opaque {
    pub const InternalInfo = objc.ExternClass("NSPersistentContainer", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn persistentContainerWithName(_self: *@This(), _name: ?*String) *@This() {
        return objc.msgSend(_self, "persistentContainerWithName:", *@This(), .{_name});
    }

    pub fn persistentContainerWithNameManagedObjectModel(_self: *@This(), _name: ?*String, _model: ?*ManagedObjectModel) *@This() {
        return objc.msgSend(_self, "persistentContainerWithName:managedObjectModel:", *@This(), .{ _name, _model });
    }

    pub fn defaultDirectoryURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "defaultDirectoryURL", ?*URL, .{});
    }

    pub fn initWithName(_self: *@This(), _name: ?*String) *@This() {
        return objc.msgSend(_self, "initWithName:", *@This(), .{_name});
    }

    pub fn initWithNameManagedObjectModel(_self: *@This(), _name: ?*String, _model: ?*ManagedObjectModel) *@This() {
        return objc.msgSend(_self, "initWithName:managedObjectModel:", *@This(), .{ _name, _model });
    }

    pub fn loadPersistentStoresWithCompletionHandler(_self: *@This(), _block: *const fn (?*PersistentStoreDescription, ?*Error) callconv(.C) void) void {
        return objc.msgSend(_self, "loadPersistentStoresWithCompletionHandler:", void, .{_block});
    }

    pub fn newBackgroundContext(_self: *@This()) ?*ManagedObjectContext {
        return objc.msgSend(_self, "newBackgroundContext", ?*ManagedObjectContext, .{});
    }

    pub fn performBackgroundTask(_self: *@This(), _block: *const fn (?*ManagedObjectContext) callconv(.C) void) void {
        return objc.msgSend(_self, "performBackgroundTask:", void, .{_block});
    }

    pub fn name(_self: *@This()) ?*String {
        return objc.msgSend(_self, "name", ?*String, .{});
    }

    pub fn viewContext(_self: *@This()) ?*ManagedObjectContext {
        return objc.msgSend(_self, "viewContext", ?*ManagedObjectContext, .{});
    }

    pub fn managedObjectModel(_self: *@This()) ?*ManagedObjectModel {
        return objc.msgSend(_self, "managedObjectModel", ?*ManagedObjectModel, .{});
    }

    pub fn persistentStoreCoordinator(_self: *@This()) ?*PersistentStoreCoordinator {
        return objc.msgSend(_self, "persistentStoreCoordinator", ?*PersistentStoreCoordinator, .{});
    }

    pub fn persistentStoreDescriptions(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "persistentStoreDescriptions", ?*anyopaque, .{});
    }

    pub fn setPersistentStoreDescriptions(_self: *@This(), _persistentStoreDescriptions: ?*anyopaque) void {
        return objc.msgSend(_self, "setPersistentStoreDescriptions:", void, .{_persistentStoreDescriptions});
    }
};

pub const PersistentHistoryChangeType = enum(objc.NSInteger) {
    Insert = 0,
    Update = 1,
    Delete = 2,
};

/// https://developer.apple.com/documentation/CoreData/NSPersistentHistoryChange?language=objc
pub const PersistentHistoryChange = opaque {
    pub const InternalInfo = objc.ExternClass("NSPersistentHistoryChange", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn entityDescriptionWithContext(_self: *@This(), _context: ?*ManagedObjectContext) ?*EntityDescription {
        return objc.msgSend(_self, "entityDescriptionWithContext:", ?*EntityDescription, .{_context});
    }

    pub fn entityDescription(_self: *@This()) ?*EntityDescription {
        return objc.msgSend(_self, "entityDescription", ?*EntityDescription, .{});
    }

    pub fn fetchRequest(_self: *@This()) ?*FetchRequest {
        return objc.msgSend(_self, "fetchRequest", ?*FetchRequest, .{});
    }

    pub fn changeID(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "changeID", objc.int64_t, .{});
    }

    pub fn changedObjectID(_self: *@This()) ?*ManagedObjectID {
        return objc.msgSend(_self, "changedObjectID", ?*ManagedObjectID, .{});
    }

    pub fn changeType(_self: *@This()) PersistentHistoryChangeType {
        return objc.msgSend(_self, "changeType", PersistentHistoryChangeType, .{});
    }

    pub fn tombstone(_self: *@This()) ?*Dictionary {
        return objc.msgSend(_self, "tombstone", ?*Dictionary, .{});
    }

    pub fn transaction(_self: *@This()) ?*PersistentHistoryTransaction {
        return objc.msgSend(_self, "transaction", ?*PersistentHistoryTransaction, .{});
    }

    pub fn updatedProperties(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "updatedProperties", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSPersistentHistoryChangeRequest?language=objc
pub const PersistentHistoryChangeRequest = opaque {
    pub const InternalInfo = objc.ExternClass("NSPersistentHistoryChangeRequest", @This(), PersistentStoreRequest, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn affectedStores(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "affectedStores", ?*anyopaque, .{});
    }

    pub fn setAffectedStores(_self: *@This(), _affectedStores: ?*anyopaque) void {
        return objc.msgSend(_self, "setAffectedStores:", void, .{_affectedStores});
    }

    pub fn requestType(_self: *@This()) PersistentStoreRequestType {
        return objc.msgSend(_self, "requestType", PersistentStoreRequestType, .{});
    }

    pub fn fetchHistoryAfterDate(_self: *@This(), _date: ?*foundation.Date) *@This() {
        return objc.msgSend(_self, "fetchHistoryAfterDate:", *@This(), .{_date});
    }

    pub fn fetchHistoryAfterToken(_self: *@This(), _token: ?*PersistentHistoryToken) *@This() {
        return objc.msgSend(_self, "fetchHistoryAfterToken:", *@This(), .{_token});
    }

    pub fn fetchHistoryAfterTransaction(_self: *@This(), _transaction: ?*PersistentHistoryTransaction) *@This() {
        return objc.msgSend(_self, "fetchHistoryAfterTransaction:", *@This(), .{_transaction});
    }

    pub fn fetchHistoryWithFetchRequest(_self: *@This(), _fetchRequest: ?*FetchRequest) *@This() {
        return objc.msgSend(_self, "fetchHistoryWithFetchRequest:", *@This(), .{_fetchRequest});
    }

    pub fn deleteHistoryBeforeDate(_self: *@This(), _date: ?*foundation.Date) *@This() {
        return objc.msgSend(_self, "deleteHistoryBeforeDate:", *@This(), .{_date});
    }

    pub fn deleteHistoryBeforeToken(_self: *@This(), _token: ?*PersistentHistoryToken) *@This() {
        return objc.msgSend(_self, "deleteHistoryBeforeToken:", *@This(), .{_token});
    }

    pub fn deleteHistoryBeforeTransaction(_self: *@This(), _transaction: ?*PersistentHistoryTransaction) *@This() {
        return objc.msgSend(_self, "deleteHistoryBeforeTransaction:", *@This(), .{_transaction});
    }

    pub fn resultType(_self: *@This()) PersistentHistoryResultType {
        return objc.msgSend(_self, "resultType", PersistentHistoryResultType, .{});
    }

    pub fn setResultType(_self: *@This(), _resultType: PersistentHistoryResultType) void {
        return objc.msgSend(_self, "setResultType:", void, .{_resultType});
    }

    pub fn token(_self: *@This()) ?*PersistentHistoryToken {
        return objc.msgSend(_self, "token", ?*PersistentHistoryToken, .{});
    }

    pub fn fetchRequest(_self: *@This()) ?*FetchRequest {
        return objc.msgSend(_self, "fetchRequest", ?*FetchRequest, .{});
    }

    pub fn setFetchRequest(_self: *@This(), _fetchRequest: ?*FetchRequest) void {
        return objc.msgSend(_self, "setFetchRequest:", void, .{_fetchRequest});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSPersistentHistoryToken?language=objc
pub const PersistentHistoryToken = opaque {
    pub const InternalInfo = objc.ExternClass("NSPersistentHistoryToken", @This(), objc.NSObject, &.{
        foundation.Copying,
        foundation.SecureCoding,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsSecureCoding", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSPersistentHistoryTransaction?language=objc
pub const PersistentHistoryTransaction = opaque {
    pub const InternalInfo = objc.ExternClass("NSPersistentHistoryTransaction", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn entityDescriptionWithContext(_self: *@This(), _context: ?*ManagedObjectContext) ?*EntityDescription {
        return objc.msgSend(_self, "entityDescriptionWithContext:", ?*EntityDescription, .{_context});
    }

    pub fn objectIDNotification(_self: *@This()) ?*Notification {
        return objc.msgSend(_self, "objectIDNotification", ?*Notification, .{});
    }

    pub fn entityDescription(_self: *@This()) ?*EntityDescription {
        return objc.msgSend(_self, "entityDescription", ?*EntityDescription, .{});
    }

    pub fn fetchRequest(_self: *@This()) ?*FetchRequest {
        return objc.msgSend(_self, "fetchRequest", ?*FetchRequest, .{});
    }

    pub fn timestamp(_self: *@This()) ?*foundation.Date {
        return objc.msgSend(_self, "timestamp", ?*foundation.Date, .{});
    }

    pub fn changes(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "changes", ?*anyopaque, .{});
    }

    pub fn transactionNumber(_self: *@This()) objc.int64_t {
        return objc.msgSend(_self, "transactionNumber", objc.int64_t, .{});
    }

    pub fn storeID(_self: *@This()) ?*String {
        return objc.msgSend(_self, "storeID", ?*String, .{});
    }

    pub fn bundleID(_self: *@This()) ?*String {
        return objc.msgSend(_self, "bundleID", ?*String, .{});
    }

    pub fn processID(_self: *@This()) ?*String {
        return objc.msgSend(_self, "processID", ?*String, .{});
    }

    pub fn contextName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "contextName", ?*String, .{});
    }

    pub fn author(_self: *@This()) ?*String {
        return objc.msgSend(_self, "author", ?*String, .{});
    }

    pub fn token(_self: *@This()) ?*PersistentHistoryToken {
        return objc.msgSend(_self, "token", ?*PersistentHistoryToken, .{});
    }
};

pub const PersistentCloudKitContainerSchemaInitializationOptions = enum(objc.NSUInteger) {
    None = 0,
    DryRun = 2,
    PrintSchema = 4,
};

/// https://developer.apple.com/documentation/CoreData/NSPersistentCloudKitContainer?language=objc
pub const PersistentCloudKitContainer = opaque {
    pub const InternalInfo = objc.ExternClass("NSPersistentCloudKitContainer", @This(), PersistentContainer, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn persistentContainerWithName(_self: *@This(), _name: ?*String) *@This() {
        return objc.msgSend(_self, "persistentContainerWithName:", *@This(), .{_name});
    }

    pub fn persistentContainerWithNameManagedObjectModel(_self: *@This(), _name: ?*String, _model: ?*ManagedObjectModel) *@This() {
        return objc.msgSend(_self, "persistentContainerWithName:managedObjectModel:", *@This(), .{ _name, _model });
    }

    pub fn defaultDirectoryURL(_self: *@This()) ?*URL {
        return objc.msgSend(_self, "defaultDirectoryURL", ?*URL, .{});
    }

    pub fn initWithName(_self: *@This(), _name: ?*String) *@This() {
        return objc.msgSend(_self, "initWithName:", *@This(), .{_name});
    }

    pub fn initWithNameManagedObjectModel(_self: *@This(), _name: ?*String, _model: ?*ManagedObjectModel) *@This() {
        return objc.msgSend(_self, "initWithName:managedObjectModel:", *@This(), .{ _name, _model });
    }

    pub fn loadPersistentStoresWithCompletionHandler(_self: *@This(), _block: *const fn (?*PersistentStoreDescription, ?*Error) callconv(.C) void) void {
        return objc.msgSend(_self, "loadPersistentStoresWithCompletionHandler:", void, .{_block});
    }

    pub fn newBackgroundContext(_self: *@This()) ?*ManagedObjectContext {
        return objc.msgSend(_self, "newBackgroundContext", ?*ManagedObjectContext, .{});
    }

    pub fn performBackgroundTask(_self: *@This(), _block: *const fn (?*ManagedObjectContext) callconv(.C) void) void {
        return objc.msgSend(_self, "performBackgroundTask:", void, .{_block});
    }

    pub fn name(_self: *@This()) ?*String {
        return objc.msgSend(_self, "name", ?*String, .{});
    }

    pub fn viewContext(_self: *@This()) ?*ManagedObjectContext {
        return objc.msgSend(_self, "viewContext", ?*ManagedObjectContext, .{});
    }

    pub fn managedObjectModel(_self: *@This()) ?*ManagedObjectModel {
        return objc.msgSend(_self, "managedObjectModel", ?*ManagedObjectModel, .{});
    }

    pub fn persistentStoreCoordinator(_self: *@This()) ?*PersistentStoreCoordinator {
        return objc.msgSend(_self, "persistentStoreCoordinator", ?*PersistentStoreCoordinator, .{});
    }

    pub fn persistentStoreDescriptions(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "persistentStoreDescriptions", ?*anyopaque, .{});
    }

    pub fn setPersistentStoreDescriptions(_self: *@This(), _persistentStoreDescriptions: ?*anyopaque) void {
        return objc.msgSend(_self, "setPersistentStoreDescriptions:", void, .{_persistentStoreDescriptions});
    }

    pub fn initializeCloudKitSchemaWithOptionsError(_self: *@This(), _options: PersistentCloudKitContainerSchemaInitializationOptions, _error: ?*?*Error) objc.BOOL {
        return objc.msgSend(_self, "initializeCloudKitSchemaWithOptions:error:", objc.BOOL, .{ _options, _error });
    }

    pub fn recordForManagedObjectID(_self: *@This(), _managedObjectID: ?*ManagedObjectID) ?*CKRecord {
        return objc.msgSend(_self, "recordForManagedObjectID:", ?*CKRecord, .{_managedObjectID});
    }

    pub fn recordsForManagedObjectIDs(_self: *@This(), _managedObjectIDs: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "recordsForManagedObjectIDs:", ?*anyopaque, .{_managedObjectIDs});
    }

    pub fn recordIDForManagedObjectID(_self: *@This(), _managedObjectID: ?*ManagedObjectID) ?*CKRecordID {
        return objc.msgSend(_self, "recordIDForManagedObjectID:", ?*CKRecordID, .{_managedObjectID});
    }

    pub fn recordIDsForManagedObjectIDs(_self: *@This(), _managedObjectIDs: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "recordIDsForManagedObjectIDs:", ?*anyopaque, .{_managedObjectIDs});
    }

    pub fn canUpdateRecordForManagedObjectWithID(_self: *@This(), _objectID: ?*ManagedObjectID) objc.BOOL {
        return objc.msgSend(_self, "canUpdateRecordForManagedObjectWithID:", objc.BOOL, .{_objectID});
    }

    pub fn canDeleteRecordForManagedObjectWithID(_self: *@This(), _objectID: ?*ManagedObjectID) objc.BOOL {
        return objc.msgSend(_self, "canDeleteRecordForManagedObjectWithID:", objc.BOOL, .{_objectID});
    }

    pub fn canModifyManagedObjectsInStore(_self: *@This(), _store: ?*PersistentStore) objc.BOOL {
        return objc.msgSend(_self, "canModifyManagedObjectsInStore:", objc.BOOL, .{_store});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSPersistentCloudKitContainerOptions?language=objc
pub const PersistentCloudKitContainerOptions = opaque {
    pub const InternalInfo = objc.ExternClass("NSPersistentCloudKitContainerOptions", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithContainerIdentifier(_self: *@This(), _containerIdentifier: ?*cloud_kit.NSString) *@This() {
        return objc.msgSend(_self, "initWithContainerIdentifier:", *@This(), .{_containerIdentifier});
    }

    pub fn containerIdentifier(_self: *@This()) ?*cloud_kit.NSString {
        return objc.msgSend(_self, "containerIdentifier", ?*cloud_kit.NSString, .{});
    }

    pub fn databaseScope(_self: *@This()) cloud_kit.DatabaseScope {
        return objc.msgSend(_self, "databaseScope", cloud_kit.DatabaseScope, .{});
    }

    pub fn setDatabaseScope(_self: *@This(), _databaseScope: cloud_kit.DatabaseScope) void {
        return objc.msgSend(_self, "setDatabaseScope:", void, .{_databaseScope});
    }
};

pub const PersistentCloudKitContainerEventType = enum(objc.NSInteger) {
    Setup = 0,
    Import = 1,
    Export = 2,
};

/// https://developer.apple.com/documentation/CoreData/NSPersistentCloudKitContainerEvent?language=objc
pub const PersistentCloudKitContainerEvent = opaque {
    pub const InternalInfo = objc.ExternClass("NSPersistentCloudKitContainerEvent", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn identifier(_self: *@This()) ?*foundation.UUID {
        return objc.msgSend(_self, "identifier", ?*foundation.UUID, .{});
    }

    pub fn storeIdentifier(_self: *@This()) ?*cloud_kit.NSString {
        return objc.msgSend(_self, "storeIdentifier", ?*cloud_kit.NSString, .{});
    }

    pub fn @"type"(_self: *@This()) PersistentCloudKitContainerEventType {
        return objc.msgSend(_self, "type", PersistentCloudKitContainerEventType, .{});
    }

    pub fn startDate(_self: *@This()) ?*foundation.Date {
        return objc.msgSend(_self, "startDate", ?*foundation.Date, .{});
    }

    pub fn endDate(_self: *@This()) ?*foundation.Date {
        return objc.msgSend(_self, "endDate", ?*foundation.Date, .{});
    }

    pub fn succeeded(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "succeeded", objc.BOOL, .{});
    }

    pub fn @"error"(_self: *@This()) ?*Error {
        return objc.msgSend(_self, "error", ?*Error, .{});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSPersistentCloudKitContainerEventRequest?language=objc
pub const PersistentCloudKitContainerEventRequest = opaque {
    pub const InternalInfo = objc.ExternClass("NSPersistentCloudKitContainerEventRequest", @This(), PersistentStoreRequest, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn affectedStores(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "affectedStores", ?*anyopaque, .{});
    }

    pub fn setAffectedStores(_self: *@This(), _affectedStores: ?*anyopaque) void {
        return objc.msgSend(_self, "setAffectedStores:", void, .{_affectedStores});
    }

    pub fn requestType(_self: *@This()) PersistentStoreRequestType {
        return objc.msgSend(_self, "requestType", PersistentStoreRequestType, .{});
    }

    pub fn fetchEventsAfterDate(_self: *@This(), _date: ?*foundation.Date) *@This() {
        return objc.msgSend(_self, "fetchEventsAfterDate:", *@This(), .{_date});
    }

    pub fn fetchEventsAfterEvent(_self: *@This(), _event: ?*PersistentCloudKitContainerEvent) *@This() {
        return objc.msgSend(_self, "fetchEventsAfterEvent:", *@This(), .{_event});
    }

    pub fn fetchEventsMatchingFetchRequest(_self: *@This(), _fetchRequest: ?*FetchRequest) *@This() {
        return objc.msgSend(_self, "fetchEventsMatchingFetchRequest:", *@This(), .{_fetchRequest});
    }

    pub fn fetchRequestForEvents(_self: *@This()) ?*FetchRequest {
        return objc.msgSend(_self, "fetchRequestForEvents", ?*FetchRequest, .{});
    }

    pub fn resultType(_self: *@This()) PersistentCloudKitContainerEventResultType {
        return objc.msgSend(_self, "resultType", PersistentCloudKitContainerEventResultType, .{});
    }

    pub fn setResultType(_self: *@This(), _resultType: PersistentCloudKitContainerEventResultType) void {
        return objc.msgSend(_self, "setResultType:", void, .{_resultType});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSStagedMigrationManager?language=objc
pub const StagedMigrationManager = opaque {
    pub const InternalInfo = objc.ExternClass("NSStagedMigrationManager", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithMigrationStages(_self: *@This(), _stages: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithMigrationStages:", *@This(), .{_stages});
    }

    pub fn stages(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "stages", ?*anyopaque, .{});
    }

    pub fn container(_self: *@This()) ?*PersistentContainer {
        return objc.msgSend(_self, "container", ?*PersistentContainer, .{});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSMigrationStage?language=objc
pub const MigrationStage = opaque {
    pub const InternalInfo = objc.ExternClass("NSMigrationStage", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn label(_self: *@This()) ?*cloud_kit.NSString {
        return objc.msgSend(_self, "label", ?*cloud_kit.NSString, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*cloud_kit.NSString) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSCustomMigrationStage?language=objc
pub const CustomMigrationStage = opaque {
    pub const InternalInfo = objc.ExternClass("NSCustomMigrationStage", @This(), MigrationStage, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn label(_self: *@This()) ?*cloud_kit.NSString {
        return objc.msgSend(_self, "label", ?*cloud_kit.NSString, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*cloud_kit.NSString) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn initWithCurrentModelReferenceNextModelReference(_self: *@This(), _currentModel: ?*ManagedObjectModelReference, _nextModel: ?*ManagedObjectModelReference) *@This() {
        return objc.msgSend(_self, "initWithCurrentModelReference:nextModelReference:", *@This(), .{ _currentModel, _nextModel });
    }

    pub fn currentModel(_self: *@This()) ?*ManagedObjectModelReference {
        return objc.msgSend(_self, "currentModel", ?*ManagedObjectModelReference, .{});
    }

    pub fn nextModel(_self: *@This()) ?*ManagedObjectModelReference {
        return objc.msgSend(_self, "nextModel", ?*ManagedObjectModelReference, .{});
    }

    pub fn willMigrateHandler(_self: *@This()) *const fn (?*StagedMigrationManager, ?*CustomMigrationStage, ?*?*Error) callconv(.C) objc.BOOL {
        return objc.msgSend(_self, "willMigrateHandler", *const fn (?*StagedMigrationManager, ?*CustomMigrationStage, ?*?*Error) callconv(.C) objc.BOOL, .{});
    }

    pub fn setWillMigrateHandler(_self: *@This(), _willMigrateHandler: *const fn (?*StagedMigrationManager, ?*CustomMigrationStage, ?*?*Error) callconv(.C) objc.BOOL) void {
        return objc.msgSend(_self, "setWillMigrateHandler:", void, .{_willMigrateHandler});
    }

    pub fn didMigrateHandler(_self: *@This()) *const fn (?*StagedMigrationManager, ?*CustomMigrationStage, ?*?*Error) callconv(.C) objc.BOOL {
        return objc.msgSend(_self, "didMigrateHandler", *const fn (?*StagedMigrationManager, ?*CustomMigrationStage, ?*?*Error) callconv(.C) objc.BOOL, .{});
    }

    pub fn setDidMigrateHandler(_self: *@This(), _didMigrateHandler: *const fn (?*StagedMigrationManager, ?*CustomMigrationStage, ?*?*Error) callconv(.C) objc.BOOL) void {
        return objc.msgSend(_self, "setDidMigrateHandler:", void, .{_didMigrateHandler});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSLightweightMigrationStage?language=objc
pub const LightweightMigrationStage = opaque {
    pub const InternalInfo = objc.ExternClass("NSLightweightMigrationStage", @This(), MigrationStage, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn label(_self: *@This()) ?*cloud_kit.NSString {
        return objc.msgSend(_self, "label", ?*cloud_kit.NSString, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*cloud_kit.NSString) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn initWithVersionChecksums(_self: *@This(), _versionChecksums: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithVersionChecksums:", *@This(), .{_versionChecksums});
    }

    pub fn versionChecksums(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "versionChecksums", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSManagedObjectModelReference?language=objc
pub const ManagedObjectModelReference = opaque {
    pub const InternalInfo = objc.ExternClass("NSManagedObjectModelReference", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithModelVersionChecksum(_self: *@This(), _model: ?*ManagedObjectModel, _versionChecksum: ?*cloud_kit.NSString) *@This() {
        return objc.msgSend(_self, "initWithModel:versionChecksum:", *@This(), .{ _model, _versionChecksum });
    }

    pub fn initWithFileURLVersionChecksum(_self: *@This(), _fileURL: ?*URL, _versionChecksum: ?*cloud_kit.NSString) *@This() {
        return objc.msgSend(_self, "initWithFileURL:versionChecksum:", *@This(), .{ _fileURL, _versionChecksum });
    }

    pub fn initWithEntityVersionHashesInBundleVersionChecksum(_self: *@This(), _versionHash: ?*Dictionary, _bundle: ?*Bundle, _versionChecksum: ?*cloud_kit.NSString) *@This() {
        return objc.msgSend(_self, "initWithEntityVersionHashes:inBundle:versionChecksum:", *@This(), .{ _versionHash, _bundle, _versionChecksum });
    }

    pub fn initWithNameInBundleVersionChecksum(_self: *@This(), _modelName: ?*cloud_kit.NSString, _bundle: ?*Bundle, _versionChecksum: ?*cloud_kit.NSString) *@This() {
        return objc.msgSend(_self, "initWithName:inBundle:versionChecksum:", *@This(), .{ _modelName, _bundle, _versionChecksum });
    }

    pub fn resolvedModel(_self: *@This()) ?*ManagedObjectModel {
        return objc.msgSend(_self, "resolvedModel", ?*ManagedObjectModel, .{});
    }

    pub fn versionChecksum(_self: *@This()) ?*cloud_kit.NSString {
        return objc.msgSend(_self, "versionChecksum", ?*cloud_kit.NSString, .{});
    }
};

/// https://developer.apple.com/documentation/CoreData/NSCoreDataCoreSpotlightDelegate?language=objc
pub const CoreDataCoreSpotlightDelegate = opaque {
    pub const InternalInfo = objc.ExternClass("NSCoreDataCoreSpotlightDelegate", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn domainIdentifier(_self: *@This()) ?*cloud_kit.NSString {
        return objc.msgSend(_self, "domainIdentifier", ?*cloud_kit.NSString, .{});
    }

    pub fn indexName(_self: *@This()) ?*String {
        return objc.msgSend(_self, "indexName", ?*String, .{});
    }

    pub fn initForStoreWithDescriptionCoordinator(_self: *@This(), _description: ?*PersistentStoreDescription, _psc: ?*PersistentStoreCoordinator) *@This() {
        return objc.msgSend(_self, "initForStoreWithDescription:coordinator:", *@This(), .{ _description, _psc });
    }

    pub fn initForStoreWithDescriptionModel(_self: *@This(), _description: ?*PersistentStoreDescription, _model: ?*ManagedObjectModel) *@This() {
        return objc.msgSend(_self, "initForStoreWithDescription:model:", *@This(), .{ _description, _model });
    }

    pub fn startSpotlightIndexing(_self: *@This()) void {
        return objc.msgSend(_self, "startSpotlightIndexing", void, .{});
    }

    pub fn stopSpotlightIndexing(_self: *@This()) void {
        return objc.msgSend(_self, "stopSpotlightIndexing", void, .{});
    }

    pub fn deleteSpotlightIndexWithCompletionHandler(_self: *@This(), _completionHandler: *const fn (?*Error) callconv(.C) void) void {
        return objc.msgSend(_self, "deleteSpotlightIndexWithCompletionHandler:", void, .{_completionHandler});
    }

    pub fn attributeSetForObject(_self: *@This(), _object: ?*ManagedObject) ?*CSSearchableItemAttributeSet {
        return objc.msgSend(_self, "attributeSetForObject:", ?*CSSearchableItemAttributeSet, .{_object});
    }

    pub fn searchableIndexReindexAllSearchableItemsWithAcknowledgementHandler(_self: *@This(), _searchableIndex: ?*CSSearchableIndex, _acknowledgementHandler: *const fn () callconv(.C) void) void {
        return objc.msgSend(_self, "searchableIndex:reindexAllSearchableItemsWithAcknowledgementHandler:", void, .{ _searchableIndex, _acknowledgementHandler });
    }

    pub fn searchableIndexReindexSearchableItemsWithIdentifiersAcknowledgementHandler(_self: *@This(), _searchableIndex: ?*CSSearchableIndex, _identifiers: ?*anyopaque, _acknowledgementHandler: *const fn () callconv(.C) void) void {
        return objc.msgSend(_self, "searchableIndex:reindexSearchableItemsWithIdentifiers:acknowledgementHandler:", void, .{ _searchableIndex, _identifiers, _acknowledgementHandler });
    }

    pub fn isIndexingEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isIndexingEnabled", objc.BOOL, .{});
    }
};
