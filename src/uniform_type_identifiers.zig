// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const foundation = @import("foundation.zig"); // Framework dependency Foundation.

/// https://developer.apple.com/documentation/UniformTypeIdentifiers/UTType?language=objc
pub const Type = opaque {
    pub const Internal = objc.ExternClass("UTType", @This(), objc.NSObject, &.{ foundation.Copying, foundation.SecureCoding });
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) ?objc.Id {
        return objc.msgSend(_self, "copyWithZone:", ?objc.Id, .{_zone});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn typeWithIdentifier(_identifier: ?*foundation.String) *@This() {
        return objc.msgSend(Internal.class(), "typeWithIdentifier:", *@This(), .{_identifier});
    }

    pub fn typeWithFilenameExtension(_filenameExtension: ?*foundation.String) *@This() {
        return objc.msgSend(Internal.class(), "typeWithFilenameExtension:", *@This(), .{_filenameExtension});
    }

    pub fn typeWithFilenameExtensionConformingToType(_filenameExtension: ?*foundation.String, _supertype: ?*Type) *@This() {
        return objc.msgSend(Internal.class(), "typeWithFilenameExtension:conformingToType:", *@This(), .{ _filenameExtension, _supertype });
    }

    pub fn typeWithMIMEType(_mimeType: ?*foundation.String) *@This() {
        return objc.msgSend(Internal.class(), "typeWithMIMEType:", *@This(), .{_mimeType});
    }

    pub fn typeWithMIMETypeConformingToType(_mimeType: ?*foundation.String, _supertype: ?*Type) *@This() {
        return objc.msgSend(Internal.class(), "typeWithMIMEType:conformingToType:", *@This(), .{ _mimeType, _supertype });
    }

    pub fn identifier(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "identifier", ?*foundation.String, .{});
    }

    pub fn preferredFilenameExtension(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "preferredFilenameExtension", ?*foundation.String, .{});
    }

    pub fn preferredMIMEType(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "preferredMIMEType", ?*foundation.String, .{});
    }

    pub fn localizedDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "localizedDescription", ?*foundation.String, .{});
    }

    pub fn version(_self: *@This()) ?*foundation.Number {
        return objc.msgSend(_self, "version", ?*foundation.Number, .{});
    }

    pub fn referenceURL(_self: *@This()) ?*foundation.URL {
        return objc.msgSend(_self, "referenceURL", ?*foundation.URL, .{});
    }

    pub fn isDynamic(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isDynamic", objc.BOOL, .{});
    }

    pub fn isDeclared(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isDeclared", objc.BOOL, .{});
    }

    pub fn isPublicType(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isPublicType", objc.BOOL, .{});
    }

    pub fn conformsToType(_self: *@This(), _type: ?*Type) objc.BOOL {
        return objc.msgSend(_self, "conformsToType:", objc.BOOL, .{_type});
    }

    pub fn isSupertypeOfType(_self: *@This(), _type: ?*Type) objc.BOOL {
        return objc.msgSend(_self, "isSupertypeOfType:", objc.BOOL, .{_type});
    }

    pub fn isSubtypeOfType(_self: *@This(), _type: ?*Type) objc.BOOL {
        return objc.msgSend(_self, "isSubtypeOfType:", objc.BOOL, .{_type});
    }

    pub fn supertypes(_self: *@This()) ?*foundation.Set(?*Type) {
        return objc.msgSend(_self, "supertypes", ?*foundation.Set(?*Type), .{});
    }

    pub fn typeWithTagTagClassConformingToType(_tag: ?*foundation.String, _tagClass: ?*foundation.String, _supertype: ?*Type) *@This() {
        return objc.msgSend(Internal.class(), "typeWithTag:tagClass:conformingToType:", *@This(), .{ _tag, _tagClass, _supertype });
    }

    pub fn typesWithTagTagClassConformingToType(_tag: ?*foundation.String, _tagClass: ?*foundation.String, _supertype: ?*Type) ?*foundation.Array(?*Type) {
        return objc.msgSend(Internal.class(), "typesWithTag:tagClass:conformingToType:", ?*foundation.Array(?*Type), .{ _tag, _tagClass, _supertype });
    }

    pub fn tags(_self: *@This()) ?*foundation.Dictionary(?*foundation.String, ?*foundation.Array(?*foundation.String)) {
        return objc.msgSend(_self, "tags", ?*foundation.Dictionary(?*foundation.String, ?*foundation.Array(?*foundation.String)), .{});
    }

    pub fn exportedTypeWithIdentifier(_identifier: ?*foundation.String) ?*Type {
        return objc.msgSend(Internal.class(), "exportedTypeWithIdentifier:", ?*Type, .{_identifier});
    }

    pub fn exportedTypeWithIdentifierConformingToType(_identifier: ?*foundation.String, _parentType: ?*Type) ?*Type {
        return objc.msgSend(Internal.class(), "exportedTypeWithIdentifier:conformingToType:", ?*Type, .{ _identifier, _parentType });
    }

    pub fn importedTypeWithIdentifier(_identifier: ?*foundation.String) ?*Type {
        return objc.msgSend(Internal.class(), "importedTypeWithIdentifier:", ?*Type, .{_identifier});
    }

    pub fn importedTypeWithIdentifierConformingToType(_identifier: ?*foundation.String, _parentType: ?*Type) ?*Type {
        return objc.msgSend(Internal.class(), "importedTypeWithIdentifier:conformingToType:", ?*Type, .{ _identifier, _parentType });
    }
};
