// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const cf = @import("cf.zig"); // Framework dependency CoreFoundation.
const ns = @import("ns.zig"); // Framework dependency Foundation.

pub const Origin = extern struct {
    x: objc.NSUInteger,
    y: objc.NSUInteger,
    z: objc.NSUInteger,
};

pub extern "Metal" fn OriginMake(x: objc.NSUInteger, y: objc.NSUInteger, z: objc.NSUInteger) callconv(.C) Origin;

pub const Size = extern struct {
    width: objc.NSUInteger,
    height: objc.NSUInteger,
    depth: objc.NSUInteger,
};

pub extern "Metal" fn SizeMake(width: objc.NSUInteger, height: objc.NSUInteger, depth: objc.NSUInteger) callconv(.C) Size;

pub const Region = extern struct {
    origin: Origin,
    size: Size,
};

pub extern "Metal" fn RegionMake1D(x: objc.NSUInteger, width: objc.NSUInteger) callconv(.C) Region;

pub extern "Metal" fn RegionMake2D(x: objc.NSUInteger, y: objc.NSUInteger, width: objc.NSUInteger, height: objc.NSUInteger, ) callconv(.C) Region;

pub extern "Metal" fn RegionMake3D(x: objc.NSUInteger, y: objc.NSUInteger, z: objc.NSUInteger, width: objc.NSUInteger, height: objc.NSUInteger, depth: objc.NSUInteger, ) callconv(.C) Region;

pub const SamplePosition = extern struct {
    x: f32,
    y: f32,
};

pub extern "Metal" fn SamplePositionMake(x: f32, y: f32) callconv(.C) SamplePosition;

pub const Coordinate2D = SamplePosition;

pub extern "Metal" fn Coordinate2DMake(x: f32, y: f32) callconv(.C) Coordinate2D;

pub const ResourceID = extern struct {
    _impl: objc.uint64_t,
};

pub const ResourceUsage = enum(objc.NSUInteger) {
    Read = 1,
    Write = 2,
    Sample = 4,
};

pub const BarrierScope = enum(objc.NSUInteger) {
    Buffers = 1,
    Textures = 2,
    RenderTargets = 4,
};

/// https://developer.apple.com/documentation/Metal/MTLCommandEncoder?language=objc
pub const CommandEncoder = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn endEncoding(self: *@This()) void {
        return objc.msgSend(self, "endEncoding", void, .{});
    }

    pub fn insertDebugSignpost(self: *@This(), string: ?*ns.String) void {
        return objc.msgSend(self, "insertDebugSignpost:", void, .{string});
    }

    pub fn pushDebugGroup(self: *@This(), string: ?*ns.String) void {
        return objc.msgSend(self, "pushDebugGroup:", void, .{string});
    }

    pub fn popDebugGroup(self: *@This()) void {
        return objc.msgSend(self, "popDebugGroup", void, .{});
    }

    pub fn device(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "device", ?*anyopaque, .{});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*ns.String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLAllocation?language=objc
pub const Allocation = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn allocatedSize(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "allocatedSize", objc.NSUInteger, .{});
    }

};

pub const PurgeableState = enum(objc.NSUInteger) {
    KeepCurrent = 1,
    NonVolatile = 2,
    Volatile = 3,
    Empty = 4,
};

pub const CPUCacheMode = enum(objc.NSUInteger) {
    DefaultCache = 0,
    WriteCombined = 1,
};

pub const StorageMode = enum(objc.NSUInteger) {
    Shared = 0,
    Managed = 1,
    Private = 2,
    Memoryless = 3,
};

pub const HazardTrackingMode = enum(objc.NSUInteger) {
    Default = 0,
    Untracked = 1,
    Tracked = 2,
};

pub const ResourceOptions = enum(objc.NSUInteger) {
    CPUCacheModeDefaultCache = 0,
    CPUCacheModeWriteCombined = 1,
    StorageModeShared = 0,
    StorageModeManaged = 16,
    StorageModePrivate = 32,
    StorageModeMemoryless = 48,
    HazardTrackingModeDefault = 0,
    HazardTrackingModeUntracked = 256,
    HazardTrackingModeTracked = 512,
    CPUCacheModeDefault = 0,
    CPUCacheModeWriteCombined = 1,
};

/// https://developer.apple.com/documentation/Metal/MTLResource?language=objc
pub const Resource = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{Allocation, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn setPurgeableState(self: *@This(), state: PurgeableState) PurgeableState {
        return objc.msgSend(self, "setPurgeableState:", PurgeableState, .{state});
    }

    pub fn makeAliasable(self: *@This()) void {
        return objc.msgSend(self, "makeAliasable", void, .{});
    }

    pub fn isAliasable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAliasable", objc.BOOL, .{});
    }

    pub fn setOwnerWithIdentity(self: *@This(), task_id_token: objc.task_id_token_t) objc.kern_return_t {
        return objc.msgSend(self, "setOwnerWithIdentity:", objc.kern_return_t, .{task_id_token});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*ns.String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

    pub fn device(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "device", ?*anyopaque, .{});
    }

    pub fn cpuCacheMode(self: *@This()) CPUCacheMode {
        return objc.msgSend(self, "cpuCacheMode", CPUCacheMode, .{});
    }

    pub fn storageMode(self: *@This()) StorageMode {
        return objc.msgSend(self, "storageMode", StorageMode, .{});
    }

    pub fn hazardTrackingMode(self: *@This()) HazardTrackingMode {
        return objc.msgSend(self, "hazardTrackingMode", HazardTrackingMode, .{});
    }

    pub fn resourceOptions(self: *@This()) ResourceOptions {
        return objc.msgSend(self, "resourceOptions", ResourceOptions, .{});
    }

    pub fn heap(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "heap", ?*anyopaque, .{});
    }

    pub fn heapOffset(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "heapOffset", objc.NSUInteger, .{});
    }

    pub fn allocatedSize(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "allocatedSize", objc.NSUInteger, .{});
    }

};

pub const PixelFormat = enum(objc.NSUInteger) {
    Invalid = 0,
    A8Unorm = 1,
    R8Unorm = 10,
    R8Unorm_sRGB = 11,
    R8Snorm = 12,
    R8Uint = 13,
    R8Sint = 14,
    R16Unorm = 20,
    R16Snorm = 22,
    R16Uint = 23,
    R16Sint = 24,
    R16Float = 25,
    RG8Unorm = 30,
    RG8Unorm_sRGB = 31,
    RG8Snorm = 32,
    RG8Uint = 33,
    RG8Sint = 34,
    B5G6R5Unorm = 40,
    A1BGR5Unorm = 41,
    ABGR4Unorm = 42,
    BGR5A1Unorm = 43,
    R32Uint = 53,
    R32Sint = 54,
    R32Float = 55,
    RG16Unorm = 60,
    RG16Snorm = 62,
    RG16Uint = 63,
    RG16Sint = 64,
    RG16Float = 65,
    RGBA8Unorm = 70,
    RGBA8Unorm_sRGB = 71,
    RGBA8Snorm = 72,
    RGBA8Uint = 73,
    RGBA8Sint = 74,
    BGRA8Unorm = 80,
    BGRA8Unorm_sRGB = 81,
    RGB10A2Unorm = 90,
    RGB10A2Uint = 91,
    RG11B10Float = 92,
    RGB9E5Float = 93,
    BGR10A2Unorm = 94,
    BGR10_XR = 554,
    BGR10_XR_sRGB = 555,
    RG32Uint = 103,
    RG32Sint = 104,
    RG32Float = 105,
    RGBA16Unorm = 110,
    RGBA16Snorm = 112,
    RGBA16Uint = 113,
    RGBA16Sint = 114,
    RGBA16Float = 115,
    BGRA10_XR = 552,
    BGRA10_XR_sRGB = 553,
    RGBA32Uint = 123,
    RGBA32Sint = 124,
    RGBA32Float = 125,
    BC1_RGBA = 130,
    BC1_RGBA_sRGB = 131,
    BC2_RGBA = 132,
    BC2_RGBA_sRGB = 133,
    BC3_RGBA = 134,
    BC3_RGBA_sRGB = 135,
    BC4_RUnorm = 140,
    BC4_RSnorm = 141,
    BC5_RGUnorm = 142,
    BC5_RGSnorm = 143,
    BC6H_RGBFloat = 150,
    BC6H_RGBUfloat = 151,
    BC7_RGBAUnorm = 152,
    BC7_RGBAUnorm_sRGB = 153,
    PVRTC_RGB_2BPP = 160,
    PVRTC_RGB_2BPP_sRGB = 161,
    PVRTC_RGB_4BPP = 162,
    PVRTC_RGB_4BPP_sRGB = 163,
    PVRTC_RGBA_2BPP = 164,
    PVRTC_RGBA_2BPP_sRGB = 165,
    PVRTC_RGBA_4BPP = 166,
    PVRTC_RGBA_4BPP_sRGB = 167,
    EAC_R11Unorm = 170,
    EAC_R11Snorm = 172,
    EAC_RG11Unorm = 174,
    EAC_RG11Snorm = 176,
    EAC_RGBA8 = 178,
    EAC_RGBA8_sRGB = 179,
    ETC2_RGB8 = 180,
    ETC2_RGB8_sRGB = 181,
    ETC2_RGB8A1 = 182,
    ETC2_RGB8A1_sRGB = 183,
    ASTC_4x4_sRGB = 186,
    ASTC_5x4_sRGB = 187,
    ASTC_5x5_sRGB = 188,
    ASTC_6x5_sRGB = 189,
    ASTC_6x6_sRGB = 190,
    ASTC_8x5_sRGB = 192,
    ASTC_8x6_sRGB = 193,
    ASTC_8x8_sRGB = 194,
    ASTC_10x5_sRGB = 195,
    ASTC_10x6_sRGB = 196,
    ASTC_10x8_sRGB = 197,
    ASTC_10x10_sRGB = 198,
    ASTC_12x10_sRGB = 199,
    ASTC_12x12_sRGB = 200,
    ASTC_4x4_LDR = 204,
    ASTC_5x4_LDR = 205,
    ASTC_5x5_LDR = 206,
    ASTC_6x5_LDR = 207,
    ASTC_6x6_LDR = 208,
    ASTC_8x5_LDR = 210,
    ASTC_8x6_LDR = 211,
    ASTC_8x8_LDR = 212,
    ASTC_10x5_LDR = 213,
    ASTC_10x6_LDR = 214,
    ASTC_10x8_LDR = 215,
    ASTC_10x10_LDR = 216,
    ASTC_12x10_LDR = 217,
    ASTC_12x12_LDR = 218,
    ASTC_4x4_HDR = 222,
    ASTC_5x4_HDR = 223,
    ASTC_5x5_HDR = 224,
    ASTC_6x5_HDR = 225,
    ASTC_6x6_HDR = 226,
    ASTC_8x5_HDR = 228,
    ASTC_8x6_HDR = 229,
    ASTC_8x8_HDR = 230,
    ASTC_10x5_HDR = 231,
    ASTC_10x6_HDR = 232,
    ASTC_10x8_HDR = 233,
    ASTC_10x10_HDR = 234,
    ASTC_12x10_HDR = 235,
    ASTC_12x12_HDR = 236,
    GBGR422 = 240,
    BGRG422 = 241,
    Depth16Unorm = 250,
    Depth32Float = 252,
    Stencil8 = 253,
    Depth24Unorm_Stencil8 = 255,
    Depth32Float_Stencil8 = 260,
    X32_Stencil8 = 261,
    X24_Stencil8 = 262,
};

/// https://developer.apple.com/documentation/Metal/MTLBuffer?language=objc
pub const Buffer = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{Resource, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn contents(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "contents", ?*anyopaque, .{});
    }

    pub fn didModifyRange(self: *@This(), range: ns.Range) void {
        return objc.msgSend(self, "didModifyRange:", void, .{range});
    }

    pub fn newTextureWithDescriptorOffsetBytesPerRow(self: *@This(), descriptor: ?*TextureDescriptor, offset: objc.NSUInteger, bytesPerRow: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(self, "newTextureWithDescriptor:offset:bytesPerRow:", ?*anyopaque, .{descriptor, offset, bytesPerRow});
    }

    pub fn addDebugMarkerRange(self: *@This(), marker: ?*ns.String, range: ns.Range) void {
        return objc.msgSend(self, "addDebugMarker:range:", void, .{marker, range});
    }

    pub fn removeAllDebugMarkers(self: *@This()) void {
        return objc.msgSend(self, "removeAllDebugMarkers", void, .{});
    }

    pub fn newRemoteBufferViewForDevice(self: *@This(), device: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "newRemoteBufferViewForDevice:", ?*anyopaque, .{device});
    }

    pub fn length(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "length", objc.NSUInteger, .{});
    }

    pub fn remoteStorageBuffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "remoteStorageBuffer", ?*anyopaque, .{});
    }

    pub fn gpuAddress(self: *@This()) objc.uint64_t {
        return objc.msgSend(self, "gpuAddress", objc.uint64_t, .{});
    }

};

pub const TextureType = enum(objc.NSUInteger) {
    1D = 0,
    1DArray = 1,
    2D = 2,
    2DArray = 3,
    2DMultisample = 4,
    Cube = 5,
    CubeArray = 6,
    3D = 7,
    2DMultisampleArray = 8,
    TextureBuffer = 9,
};

pub const TextureSwizzle = enum(objc.uint8_t) {
    Zero = 0,
    One = 1,
    Red = 2,
    Green = 3,
    Blue = 4,
    Alpha = 5,
};

pub const TextureSwizzleChannels = extern struct {
    red: TextureSwizzle,
    green: TextureSwizzle,
    blue: TextureSwizzle,
    alpha: TextureSwizzle,
};

pub extern "Metal" fn TextureSwizzleChannelsMake(r: TextureSwizzle, g: TextureSwizzle, b: TextureSwizzle, a: TextureSwizzle, ) callconv(.C) TextureSwizzleChannels;

/// https://developer.apple.com/documentation/Metal/MTLSharedTextureHandle?language=objc
pub const SharedTextureHandle = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLSharedTextureHandle", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn device(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "device", ?*anyopaque, .{});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

};

pub const SharedTextureHandlePrivate = extern struct {};

pub const TextureUsage = enum(objc.NSUInteger) {
    Unknown = 0,
    ShaderRead = 1,
    ShaderWrite = 2,
    RenderTarget = 4,
    PixelFormatView = 16,
    ShaderAtomic = 32,
};

pub const TextureCompressionType = enum(objc.NSInteger) {
    Lossless = 0,
    Lossy = 1,
};

/// https://developer.apple.com/documentation/Metal/MTLTextureDescriptor?language=objc
pub const TextureDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLTextureDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn texture2DDescriptorWithPixelFormatWidthHeightMipmapped(self: *@This(), pixelFormat: PixelFormat, width: objc.NSUInteger, height: objc.NSUInteger, mipmapped: objc.BOOL, ) ?*TextureDescriptor {
        return objc.msgSend(self, "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", ?*TextureDescriptor, .{pixelFormat, width, height, mipmapped, });
    }

    pub fn textureCubeDescriptorWithPixelFormatSizeMipmapped(self: *@This(), pixelFormat: PixelFormat, size: objc.NSUInteger, mipmapped: objc.BOOL) ?*TextureDescriptor {
        return objc.msgSend(self, "textureCubeDescriptorWithPixelFormat:size:mipmapped:", ?*TextureDescriptor, .{pixelFormat, size, mipmapped});
    }

    pub fn textureBufferDescriptorWithPixelFormatWidthResourceOptionsUsage(self: *@This(), pixelFormat: PixelFormat, width: objc.NSUInteger, resourceOptions: ResourceOptions, usage: TextureUsage, ) ?*TextureDescriptor {
        return objc.msgSend(self, "textureBufferDescriptorWithPixelFormat:width:resourceOptions:usage:", ?*TextureDescriptor, .{pixelFormat, width, resourceOptions, usage, });
    }

    pub fn textureType(self: *@This()) TextureType {
        return objc.msgSend(self, "textureType", TextureType, .{});
    }

    pub fn setTextureType(self: *@This(), textureType: TextureType) void {
        return objc.msgSend(self, "setTextureType:", void, .{textureType});
    }

    pub fn pixelFormat(self: *@This()) PixelFormat {
        return objc.msgSend(self, "pixelFormat", PixelFormat, .{});
    }

    pub fn setPixelFormat(self: *@This(), pixelFormat: PixelFormat) void {
        return objc.msgSend(self, "setPixelFormat:", void, .{pixelFormat});
    }

    pub fn width(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "width", objc.NSUInteger, .{});
    }

    pub fn setWidth(self: *@This(), width: objc.NSUInteger) void {
        return objc.msgSend(self, "setWidth:", void, .{width});
    }

    pub fn height(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "height", objc.NSUInteger, .{});
    }

    pub fn setHeight(self: *@This(), height: objc.NSUInteger) void {
        return objc.msgSend(self, "setHeight:", void, .{height});
    }

    pub fn depth(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "depth", objc.NSUInteger, .{});
    }

    pub fn setDepth(self: *@This(), depth: objc.NSUInteger) void {
        return objc.msgSend(self, "setDepth:", void, .{depth});
    }

    pub fn mipmapLevelCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "mipmapLevelCount", objc.NSUInteger, .{});
    }

    pub fn setMipmapLevelCount(self: *@This(), mipmapLevelCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setMipmapLevelCount:", void, .{mipmapLevelCount});
    }

    pub fn sampleCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "sampleCount", objc.NSUInteger, .{});
    }

    pub fn setSampleCount(self: *@This(), sampleCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setSampleCount:", void, .{sampleCount});
    }

    pub fn arrayLength(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "arrayLength", objc.NSUInteger, .{});
    }

    pub fn setArrayLength(self: *@This(), arrayLength: objc.NSUInteger) void {
        return objc.msgSend(self, "setArrayLength:", void, .{arrayLength});
    }

    pub fn resourceOptions(self: *@This()) ResourceOptions {
        return objc.msgSend(self, "resourceOptions", ResourceOptions, .{});
    }

    pub fn setResourceOptions(self: *@This(), resourceOptions: ResourceOptions) void {
        return objc.msgSend(self, "setResourceOptions:", void, .{resourceOptions});
    }

    pub fn cpuCacheMode(self: *@This()) CPUCacheMode {
        return objc.msgSend(self, "cpuCacheMode", CPUCacheMode, .{});
    }

    pub fn setCpuCacheMode(self: *@This(), cpuCacheMode: CPUCacheMode) void {
        return objc.msgSend(self, "setCpuCacheMode:", void, .{cpuCacheMode});
    }

    pub fn storageMode(self: *@This()) StorageMode {
        return objc.msgSend(self, "storageMode", StorageMode, .{});
    }

    pub fn setStorageMode(self: *@This(), storageMode: StorageMode) void {
        return objc.msgSend(self, "setStorageMode:", void, .{storageMode});
    }

    pub fn hazardTrackingMode(self: *@This()) HazardTrackingMode {
        return objc.msgSend(self, "hazardTrackingMode", HazardTrackingMode, .{});
    }

    pub fn setHazardTrackingMode(self: *@This(), hazardTrackingMode: HazardTrackingMode) void {
        return objc.msgSend(self, "setHazardTrackingMode:", void, .{hazardTrackingMode});
    }

    pub fn usage(self: *@This()) TextureUsage {
        return objc.msgSend(self, "usage", TextureUsage, .{});
    }

    pub fn setUsage(self: *@This(), usage: TextureUsage) void {
        return objc.msgSend(self, "setUsage:", void, .{usage});
    }

    pub fn allowGPUOptimizedContents(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowGPUOptimizedContents", objc.BOOL, .{});
    }

    pub fn setAllowGPUOptimizedContents(self: *@This(), allowGPUOptimizedContents: objc.BOOL) void {
        return objc.msgSend(self, "setAllowGPUOptimizedContents:", void, .{allowGPUOptimizedContents});
    }

    pub fn compressionType(self: *@This()) TextureCompressionType {
        return objc.msgSend(self, "compressionType", TextureCompressionType, .{});
    }

    pub fn setCompressionType(self: *@This(), compressionType: TextureCompressionType) void {
        return objc.msgSend(self, "setCompressionType:", void, .{compressionType});
    }

    pub fn swizzle(self: *@This()) TextureSwizzleChannels {
        return objc.msgSend(self, "swizzle", TextureSwizzleChannels, .{});
    }

    pub fn setSwizzle(self: *@This(), swizzle: TextureSwizzleChannels) void {
        return objc.msgSend(self, "setSwizzle:", void, .{swizzle});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLTexture?language=objc
pub const Texture = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{Resource, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn getBytesBytesPerRowBytesPerImageFromRegionMipmapLevelSlice(self: *@This(), pixelBytes: ?*anyopaque, bytesPerRow: objc.NSUInteger, bytesPerImage: objc.NSUInteger, region: Region, level: objc.NSUInteger, slice: objc.NSUInteger, ) void {
        return objc.msgSend(self, "getBytes:bytesPerRow:bytesPerImage:fromRegion:mipmapLevel:slice:", void, .{pixelBytes, bytesPerRow, bytesPerImage, region, level, slice, });
    }

    pub fn replaceRegionMipmapLevelSliceWithBytesBytesPerRowBytesPerImage(self: *@This(), region: Region, level: objc.NSUInteger, slice: objc.NSUInteger, pixelBytes: ?*anyopaque, bytesPerRow: objc.NSUInteger, bytesPerImage: objc.NSUInteger, ) void {
        return objc.msgSend(self, "replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:", void, .{region, level, slice, pixelBytes, bytesPerRow, bytesPerImage, });
    }

    pub fn getBytesBytesPerRowFromRegionMipmapLevel(self: *@This(), pixelBytes: ?*anyopaque, bytesPerRow: objc.NSUInteger, region: Region, level: objc.NSUInteger, ) void {
        return objc.msgSend(self, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", void, .{pixelBytes, bytesPerRow, region, level, });
    }

    pub fn replaceRegionMipmapLevelWithBytesBytesPerRow(self: *@This(), region: Region, level: objc.NSUInteger, pixelBytes: ?*anyopaque, bytesPerRow: objc.NSUInteger, ) void {
        return objc.msgSend(self, "replaceRegion:mipmapLevel:withBytes:bytesPerRow:", void, .{region, level, pixelBytes, bytesPerRow, });
    }

    pub fn newTextureViewWithPixelFormat(self: *@This(), pixelFormat: PixelFormat) ?*anyopaque {
        return objc.msgSend(self, "newTextureViewWithPixelFormat:", ?*anyopaque, .{pixelFormat});
    }

    pub fn newTextureViewWithPixelFormatTextureTypeLevelsSlices(self: *@This(), pixelFormat: PixelFormat, textureType: TextureType, levelRange: ns.Range, sliceRange: ns.Range, ) ?*anyopaque {
        return objc.msgSend(self, "newTextureViewWithPixelFormat:textureType:levels:slices:", ?*anyopaque, .{pixelFormat, textureType, levelRange, sliceRange, });
    }

    pub fn newSharedTextureHandle(self: *@This()) ?*SharedTextureHandle {
        return objc.msgSend(self, "newSharedTextureHandle", ?*SharedTextureHandle, .{});
    }

    pub fn newRemoteTextureViewForDevice(self: *@This(), device: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "newRemoteTextureViewForDevice:", ?*anyopaque, .{device});
    }

    pub fn newTextureViewWithPixelFormatTextureTypeLevelsSlicesSwizzle(self: *@This(), pixelFormat: PixelFormat, textureType: TextureType, levelRange: ns.Range, sliceRange: ns.Range, swizzle: TextureSwizzleChannels, ) ?*anyopaque {
        return objc.msgSend(self, "newTextureViewWithPixelFormat:textureType:levels:slices:swizzle:", ?*anyopaque, .{pixelFormat, textureType, levelRange, sliceRange, swizzle, });
    }

    pub fn rootResource(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "rootResource", ?*anyopaque, .{});
    }

    pub fn parentTexture(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "parentTexture", ?*anyopaque, .{});
    }

    pub fn parentRelativeLevel(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "parentRelativeLevel", objc.NSUInteger, .{});
    }

    pub fn parentRelativeSlice(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "parentRelativeSlice", objc.NSUInteger, .{});
    }

    pub fn buffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "buffer", ?*anyopaque, .{});
    }

    pub fn bufferOffset(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "bufferOffset", objc.NSUInteger, .{});
    }

    pub fn bufferBytesPerRow(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "bufferBytesPerRow", objc.NSUInteger, .{});
    }

    pub fn iosurface(self: *@This())  {
        return objc.msgSend(self, "iosurface", , .{});
    }

    pub fn iosurfacePlane(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "iosurfacePlane", objc.NSUInteger, .{});
    }

    pub fn textureType(self: *@This()) TextureType {
        return objc.msgSend(self, "textureType", TextureType, .{});
    }

    pub fn pixelFormat(self: *@This()) PixelFormat {
        return objc.msgSend(self, "pixelFormat", PixelFormat, .{});
    }

    pub fn width(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "width", objc.NSUInteger, .{});
    }

    pub fn height(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "height", objc.NSUInteger, .{});
    }

    pub fn depth(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "depth", objc.NSUInteger, .{});
    }

    pub fn mipmapLevelCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "mipmapLevelCount", objc.NSUInteger, .{});
    }

    pub fn sampleCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "sampleCount", objc.NSUInteger, .{});
    }

    pub fn arrayLength(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "arrayLength", objc.NSUInteger, .{});
    }

    pub fn usage(self: *@This()) TextureUsage {
        return objc.msgSend(self, "usage", TextureUsage, .{});
    }

    pub fn isShareable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isShareable", objc.BOOL, .{});
    }

    pub fn isFramebufferOnly(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isFramebufferOnly", objc.BOOL, .{});
    }

    pub fn firstMipmapInTail(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "firstMipmapInTail", objc.NSUInteger, .{});
    }

    pub fn tailSizeInBytes(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "tailSizeInBytes", objc.NSUInteger, .{});
    }

    pub fn isSparse(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isSparse", objc.BOOL, .{});
    }

    pub fn allowGPUOptimizedContents(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowGPUOptimizedContents", objc.BOOL, .{});
    }

    pub fn compressionType(self: *@This()) TextureCompressionType {
        return objc.msgSend(self, "compressionType", TextureCompressionType, .{});
    }

    pub fn gpuResourceID(self: *@This()) ResourceID {
        return objc.msgSend(self, "gpuResourceID", ResourceID, .{});
    }

    pub fn remoteStorageTexture(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "remoteStorageTexture", ?*anyopaque, .{});
    }

    pub fn swizzle(self: *@This()) TextureSwizzleChannels {
        return objc.msgSend(self, "swizzle", TextureSwizzleChannels, .{});
    }

};

pub const DataType = enum(objc.NSUInteger) {
    None = 0,
    Struct = 1,
    Array = 2,
    Float = 3,
    Float2 = 4,
    Float3 = 5,
    Float4 = 6,
    Float2x2 = 7,
    Float2x3 = 8,
    Float2x4 = 9,
    Float3x2 = 10,
    Float3x3 = 11,
    Float3x4 = 12,
    Float4x2 = 13,
    Float4x3 = 14,
    Float4x4 = 15,
    Half = 16,
    Half2 = 17,
    Half3 = 18,
    Half4 = 19,
    Half2x2 = 20,
    Half2x3 = 21,
    Half2x4 = 22,
    Half3x2 = 23,
    Half3x3 = 24,
    Half3x4 = 25,
    Half4x2 = 26,
    Half4x3 = 27,
    Half4x4 = 28,
    Int = 29,
    Int2 = 30,
    Int3 = 31,
    Int4 = 32,
    UInt = 33,
    UInt2 = 34,
    UInt3 = 35,
    UInt4 = 36,
    Short = 37,
    Short2 = 38,
    Short3 = 39,
    Short4 = 40,
    UShort = 41,
    UShort2 = 42,
    UShort3 = 43,
    UShort4 = 44,
    Char = 45,
    Char2 = 46,
    Char3 = 47,
    Char4 = 48,
    UChar = 49,
    UChar2 = 50,
    UChar3 = 51,
    UChar4 = 52,
    Bool = 53,
    Bool2 = 54,
    Bool3 = 55,
    Bool4 = 56,
    Texture = 58,
    Sampler = 59,
    Pointer = 60,
    R8Unorm = 62,
    R8Snorm = 63,
    R16Unorm = 64,
    R16Snorm = 65,
    RG8Unorm = 66,
    RG8Snorm = 67,
    RG16Unorm = 68,
    RG16Snorm = 69,
    RGBA8Unorm = 70,
    RGBA8Unorm_sRGB = 71,
    RGBA8Snorm = 72,
    RGBA16Unorm = 73,
    RGBA16Snorm = 74,
    RGB10A2Unorm = 75,
    RG11B10Float = 76,
    RGB9E5Float = 77,
    RenderPipeline = 78,
    ComputePipeline = 79,
    IndirectCommandBuffer = 80,
    Long = 81,
    Long2 = 82,
    Long3 = 83,
    Long4 = 84,
    ULong = 85,
    ULong2 = 86,
    ULong3 = 87,
    ULong4 = 88,
    VisibleFunctionTable = 115,
    IntersectionFunctionTable = 116,
    PrimitiveAccelerationStructure = 117,
    InstanceAccelerationStructure = 118,
    BFloat = 121,
    BFloat2 = 122,
    BFloat3 = 123,
    BFloat4 = 124,
};

pub const BindingType = enum(objc.NSInteger) {
    Buffer = 0,
    ThreadgroupMemory = 1,
    Texture = 2,
    Sampler = 3,
    ImageblockData = 16,
    Imageblock = 17,
    VisibleFunctionTable = 24,
    PrimitiveAccelerationStructure = 25,
    InstanceAccelerationStructure = 26,
    IntersectionFunctionTable = 27,
    ObjectPayload = 34,
};

pub const ArgumentType = enum(objc.NSUInteger) {
    Buffer = 0,
    ThreadgroupMemory = 1,
    Texture = 2,
    Sampler = 3,
    ImageblockData = 16,
    Imageblock = 17,
    VisibleFunctionTable = 24,
    PrimitiveAccelerationStructure = 25,
    InstanceAccelerationStructure = 26,
    IntersectionFunctionTable = 27,
};

pub const BindingAccess = enum(objc.NSUInteger) {
    ReadOnly = 0,
    ReadWrite = 1,
    WriteOnly = 2,
    ArgumentAccessReadOnly = 0,
    ArgumentAccessReadWrite = 1,
    ArgumentAccessWriteOnly = 2,
};

pub const ArgumentAccess = BindingAccess;

/// https://developer.apple.com/documentation/Metal/MTLType?language=objc
pub const Type = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLType", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn dataType(self: *@This()) DataType {
        return objc.msgSend(self, "dataType", DataType, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLStructMember?language=objc
pub const StructMember = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLStructMember", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn structType(self: *@This()) ?*StructType {
        return objc.msgSend(self, "structType", ?*StructType, .{});
    }

    pub fn arrayType(self: *@This()) ?*ArrayType {
        return objc.msgSend(self, "arrayType", ?*ArrayType, .{});
    }

    pub fn textureReferenceType(self: *@This()) ?*TextureReferenceType {
        return objc.msgSend(self, "textureReferenceType", ?*TextureReferenceType, .{});
    }

    pub fn pointerType(self: *@This()) ?*PointerType {
        return objc.msgSend(self, "pointerType", ?*PointerType, .{});
    }

    pub fn name(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "name", ?*ns.String, .{});
    }

    pub fn offset(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "offset", objc.NSUInteger, .{});
    }

    pub fn dataType(self: *@This()) DataType {
        return objc.msgSend(self, "dataType", DataType, .{});
    }

    pub fn argumentIndex(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "argumentIndex", objc.NSUInteger, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLStructType?language=objc
pub const StructType = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLStructType", @This(), Type, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn memberByName(self: *@This(), name: ?*ns.String) ?*StructMember {
        return objc.msgSend(self, "memberByName:", ?*StructMember, .{name});
    }

    pub fn members(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "members", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLArrayType?language=objc
pub const ArrayType = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLArrayType", @This(), Type, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn elementStructType(self: *@This()) ?*StructType {
        return objc.msgSend(self, "elementStructType", ?*StructType, .{});
    }

    pub fn elementArrayType(self: *@This()) ?*ArrayType {
        return objc.msgSend(self, "elementArrayType", ?*ArrayType, .{});
    }

    pub fn elementTextureReferenceType(self: *@This()) ?*TextureReferenceType {
        return objc.msgSend(self, "elementTextureReferenceType", ?*TextureReferenceType, .{});
    }

    pub fn elementPointerType(self: *@This()) ?*PointerType {
        return objc.msgSend(self, "elementPointerType", ?*PointerType, .{});
    }

    pub fn elementType(self: *@This()) DataType {
        return objc.msgSend(self, "elementType", DataType, .{});
    }

    pub fn arrayLength(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "arrayLength", objc.NSUInteger, .{});
    }

    pub fn stride(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "stride", objc.NSUInteger, .{});
    }

    pub fn argumentIndexStride(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "argumentIndexStride", objc.NSUInteger, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLPointerType?language=objc
pub const PointerType = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLPointerType", @This(), Type, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn elementStructType(self: *@This()) ?*StructType {
        return objc.msgSend(self, "elementStructType", ?*StructType, .{});
    }

    pub fn elementArrayType(self: *@This()) ?*ArrayType {
        return objc.msgSend(self, "elementArrayType", ?*ArrayType, .{});
    }

    pub fn elementType(self: *@This()) DataType {
        return objc.msgSend(self, "elementType", DataType, .{});
    }

    pub fn access(self: *@This()) BindingAccess {
        return objc.msgSend(self, "access", BindingAccess, .{});
    }

    pub fn alignment(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "alignment", objc.NSUInteger, .{});
    }

    pub fn dataSize(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "dataSize", objc.NSUInteger, .{});
    }

    pub fn elementIsArgumentBuffer(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "elementIsArgumentBuffer", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLTextureReferenceType?language=objc
pub const TextureReferenceType = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLTextureReferenceType", @This(), Type, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn textureDataType(self: *@This()) DataType {
        return objc.msgSend(self, "textureDataType", DataType, .{});
    }

    pub fn textureType(self: *@This()) TextureType {
        return objc.msgSend(self, "textureType", TextureType, .{});
    }

    pub fn access(self: *@This()) BindingAccess {
        return objc.msgSend(self, "access", BindingAccess, .{});
    }

    pub fn isDepthTexture(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isDepthTexture", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLArgument?language=objc
pub const Argument = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLArgument", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn name(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "name", ?*ns.String, .{});
    }

    pub fn @"type"(self: *@This()) ArgumentType {
        return objc.msgSend(self, "type", ArgumentType, .{});
    }

    pub fn access(self: *@This()) BindingAccess {
        return objc.msgSend(self, "access", BindingAccess, .{});
    }

    pub fn index(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "index", objc.NSUInteger, .{});
    }

    pub fn isActive(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isActive", objc.BOOL, .{});
    }

    pub fn bufferAlignment(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "bufferAlignment", objc.NSUInteger, .{});
    }

    pub fn bufferDataSize(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "bufferDataSize", objc.NSUInteger, .{});
    }

    pub fn bufferDataType(self: *@This()) DataType {
        return objc.msgSend(self, "bufferDataType", DataType, .{});
    }

    pub fn bufferStructType(self: *@This()) ?*StructType {
        return objc.msgSend(self, "bufferStructType", ?*StructType, .{});
    }

    pub fn bufferPointerType(self: *@This()) ?*PointerType {
        return objc.msgSend(self, "bufferPointerType", ?*PointerType, .{});
    }

    pub fn threadgroupMemoryAlignment(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "threadgroupMemoryAlignment", objc.NSUInteger, .{});
    }

    pub fn threadgroupMemoryDataSize(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "threadgroupMemoryDataSize", objc.NSUInteger, .{});
    }

    pub fn textureType(self: *@This()) TextureType {
        return objc.msgSend(self, "textureType", TextureType, .{});
    }

    pub fn textureDataType(self: *@This()) DataType {
        return objc.msgSend(self, "textureDataType", DataType, .{});
    }

    pub fn isDepthTexture(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isDepthTexture", objc.BOOL, .{});
    }

    pub fn arrayLength(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "arrayLength", objc.NSUInteger, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLBinding?language=objc
pub const Binding = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn name(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "name", ?*ns.String, .{});
    }

    pub fn @"type"(self: *@This()) BindingType {
        return objc.msgSend(self, "type", BindingType, .{});
    }

    pub fn access(self: *@This()) BindingAccess {
        return objc.msgSend(self, "access", BindingAccess, .{});
    }

    pub fn index(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "index", objc.NSUInteger, .{});
    }

    pub fn isUsed(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isUsed", objc.BOOL, .{});
    }

    pub fn isArgument(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isArgument", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLBufferBinding?language=objc
pub const BufferBinding = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{Binding, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn bufferAlignment(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "bufferAlignment", objc.NSUInteger, .{});
    }

    pub fn bufferDataSize(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "bufferDataSize", objc.NSUInteger, .{});
    }

    pub fn bufferDataType(self: *@This()) DataType {
        return objc.msgSend(self, "bufferDataType", DataType, .{});
    }

    pub fn bufferStructType(self: *@This()) ?*StructType {
        return objc.msgSend(self, "bufferStructType", ?*StructType, .{});
    }

    pub fn bufferPointerType(self: *@This()) ?*PointerType {
        return objc.msgSend(self, "bufferPointerType", ?*PointerType, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLThreadgroupBinding?language=objc
pub const ThreadgroupBinding = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{Binding, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn threadgroupMemoryAlignment(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "threadgroupMemoryAlignment", objc.NSUInteger, .{});
    }

    pub fn threadgroupMemoryDataSize(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "threadgroupMemoryDataSize", objc.NSUInteger, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLTextureBinding?language=objc
pub const TextureBinding = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{Binding, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn textureType(self: *@This()) TextureType {
        return objc.msgSend(self, "textureType", TextureType, .{});
    }

    pub fn textureDataType(self: *@This()) DataType {
        return objc.msgSend(self, "textureDataType", DataType, .{});
    }

    pub fn isDepthTexture(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isDepthTexture", objc.BOOL, .{});
    }

    pub fn arrayLength(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "arrayLength", objc.NSUInteger, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLObjectPayloadBinding?language=objc
pub const ObjectPayloadBinding = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{Binding, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn objectPayloadAlignment(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "objectPayloadAlignment", objc.NSUInteger, .{});
    }

    pub fn objectPayloadDataSize(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "objectPayloadDataSize", objc.NSUInteger, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLFunctionConstantValues?language=objc
pub const FunctionConstantValues = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLFunctionConstantValues", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn setConstantValueTypeAtIndex(self: *@This(), value: ?*anyopaque, @"type": DataType, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setConstantValue:type:atIndex:", void, .{value, @"type", index});
    }

    pub fn setConstantValuesTypeWithRange(self: *@This(), values: ?*anyopaque, @"type": DataType, range: ns.Range) void {
        return objc.msgSend(self, "setConstantValues:type:withRange:", void, .{values, @"type", range});
    }

    pub fn setConstantValueTypeWithName(self: *@This(), value: ?*anyopaque, @"type": DataType, name: ?*ns.String) void {
        return objc.msgSend(self, "setConstantValue:type:withName:", void, .{value, @"type", name});
    }

    pub fn reset(self: *@This()) void {
        return objc.msgSend(self, "reset", void, .{});
    }

};

pub const FunctionOptions = enum(objc.NSUInteger) {
    None = 0,
    CompileToBinary = 1,
    StoreFunctionInMetalPipelinesScript = 2,
    StoreFunctionInMetalScript = 2,
    FailOnBinaryArchiveMiss = 4,
};

/// https://developer.apple.com/documentation/Metal/MTLFunctionDescriptor?language=objc
pub const FunctionDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLFunctionDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn functionDescriptor(self: *@This()) ?*FunctionDescriptor {
        return objc.msgSend(self, "functionDescriptor", ?*FunctionDescriptor, .{});
    }

    pub fn name(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "name", ?*ns.String, .{});
    }

    pub fn setName(self: *@This(), name: ?*ns.String) void {
        return objc.msgSend(self, "setName:", void, .{name});
    }

    pub fn specializedName(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "specializedName", ?*ns.String, .{});
    }

    pub fn setSpecializedName(self: *@This(), specializedName: ?*ns.String) void {
        return objc.msgSend(self, "setSpecializedName:", void, .{specializedName});
    }

    pub fn constantValues(self: *@This()) ?*FunctionConstantValues {
        return objc.msgSend(self, "constantValues", ?*FunctionConstantValues, .{});
    }

    pub fn setConstantValues(self: *@This(), constantValues: ?*FunctionConstantValues) void {
        return objc.msgSend(self, "setConstantValues:", void, .{constantValues});
    }

    pub fn options(self: *@This()) FunctionOptions {
        return objc.msgSend(self, "options", FunctionOptions, .{});
    }

    pub fn setOptions(self: *@This(), options: FunctionOptions) void {
        return objc.msgSend(self, "setOptions:", void, .{options});
    }

    pub fn binaryArchives(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "binaryArchives", ?*anyopaque, .{});
    }

    pub fn setBinaryArchives(self: *@This(), binaryArchives: ?*anyopaque) void {
        return objc.msgSend(self, "setBinaryArchives:", void, .{binaryArchives});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLIntersectionFunctionDescriptor?language=objc
pub const IntersectionFunctionDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLIntersectionFunctionDescriptor", @This(), FunctionDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;
};

pub const AutoreleasedArgument = ?*Argument;

pub const PatchType = enum(objc.NSUInteger) {
    None = 0,
    Triangle = 1,
    Quad = 2,
};

/// https://developer.apple.com/documentation/Metal/MTLVertexAttribute?language=objc
pub const VertexAttribute = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLVertexAttribute", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn name(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "name", ?*ns.String, .{});
    }

    pub fn attributeIndex(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "attributeIndex", objc.NSUInteger, .{});
    }

    pub fn attributeType(self: *@This()) DataType {
        return objc.msgSend(self, "attributeType", DataType, .{});
    }

    pub fn isActive(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isActive", objc.BOOL, .{});
    }

    pub fn isPatchData(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isPatchData", objc.BOOL, .{});
    }

    pub fn isPatchControlPointData(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isPatchControlPointData", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLAttribute?language=objc
pub const Attribute = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLAttribute", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn name(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "name", ?*ns.String, .{});
    }

    pub fn attributeIndex(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "attributeIndex", objc.NSUInteger, .{});
    }

    pub fn attributeType(self: *@This()) DataType {
        return objc.msgSend(self, "attributeType", DataType, .{});
    }

    pub fn isActive(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isActive", objc.BOOL, .{});
    }

    pub fn isPatchData(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isPatchData", objc.BOOL, .{});
    }

    pub fn isPatchControlPointData(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isPatchControlPointData", objc.BOOL, .{});
    }

};

pub const FunctionType = enum(objc.NSUInteger) {
    Vertex = 1,
    Fragment = 2,
    Kernel = 3,
    Visible = 5,
    Intersection = 6,
    Mesh = 7,
    Object = 8,
};

/// https://developer.apple.com/documentation/Metal/MTLFunctionConstant?language=objc
pub const FunctionConstant = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLFunctionConstant", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn name(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "name", ?*ns.String, .{});
    }

    pub fn @"type"(self: *@This()) DataType {
        return objc.msgSend(self, "type", DataType, .{});
    }

    pub fn index(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "index", objc.NSUInteger, .{});
    }

    pub fn required(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "required", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLFunction?language=objc
pub const Function = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn newArgumentEncoderWithBufferIndex(self: *@This(), bufferIndex: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(self, "newArgumentEncoderWithBufferIndex:", ?*anyopaque, .{bufferIndex});
    }

    pub fn newArgumentEncoderWithBufferIndexReflection(self: *@This(), bufferIndex: objc.NSUInteger, reflection: ?*?*Argument) ?*anyopaque {
        return objc.msgSend(self, "newArgumentEncoderWithBufferIndex:reflection:", ?*anyopaque, .{bufferIndex, reflection});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*ns.String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

    pub fn device(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "device", ?*anyopaque, .{});
    }

    pub fn functionType(self: *@This()) FunctionType {
        return objc.msgSend(self, "functionType", FunctionType, .{});
    }

    pub fn patchType(self: *@This()) PatchType {
        return objc.msgSend(self, "patchType", PatchType, .{});
    }

    pub fn patchControlPointCount(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "patchControlPointCount", objc.NSInteger, .{});
    }

    pub fn vertexAttributes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "vertexAttributes", ?*anyopaque, .{});
    }

    pub fn stageInputAttributes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "stageInputAttributes", ?*anyopaque, .{});
    }

    pub fn name(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "name", ?*ns.String, .{});
    }

    pub fn functionConstantsDictionary(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "functionConstantsDictionary", ?*anyopaque, .{});
    }

    pub fn options(self: *@This()) FunctionOptions {
        return objc.msgSend(self, "options", FunctionOptions, .{});
    }

};

pub const LanguageVersion = enum(objc.NSUInteger) {
    1_0 = 65536,
    1_1 = 65537,
    1_2 = 65538,
    2_0 = 131072,
    2_1 = 131073,
    2_2 = 131074,
    2_3 = 131075,
    2_4 = 131076,
    3_0 = 196608,
    3_1 = 196609,
    3_2 = 196610,
};

pub const LibraryType = enum(objc.NSInteger) {
    Executable = 0,
    Dynamic = 1,
};

pub const LibraryOptimizationLevel = enum(objc.NSInteger) {
    Default = 0,
    Size = 1,
};

pub const CompileSymbolVisibility = enum(objc.NSInteger) {
    Default = 0,
    Hidden = 1,
};

pub const MathMode = enum(objc.NSInteger) {
    Safe = 0,
    Relaxed = 1,
    Fast = 2,
};

pub const MathFloatingPointFunctions = enum(objc.NSInteger) {
    Fast = 0,
    Precise = 1,
};

/// https://developer.apple.com/documentation/Metal/MTLCompileOptions?language=objc
pub const CompileOptions = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLCompileOptions", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn preprocessorMacros(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "preprocessorMacros", ?*anyopaque, .{});
    }

    pub fn setPreprocessorMacros(self: *@This(), preprocessorMacros: ?*anyopaque) void {
        return objc.msgSend(self, "setPreprocessorMacros:", void, .{preprocessorMacros});
    }

    pub fn fastMathEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "fastMathEnabled", objc.BOOL, .{});
    }

    pub fn setFastMathEnabled(self: *@This(), fastMathEnabled: objc.BOOL) void {
        return objc.msgSend(self, "setFastMathEnabled:", void, .{fastMathEnabled});
    }

    pub fn mathMode(self: *@This()) MathMode {
        return objc.msgSend(self, "mathMode", MathMode, .{});
    }

    pub fn setMathMode(self: *@This(), mathMode: MathMode) void {
        return objc.msgSend(self, "setMathMode:", void, .{mathMode});
    }

    pub fn mathFloatingPointFunctions(self: *@This()) MathFloatingPointFunctions {
        return objc.msgSend(self, "mathFloatingPointFunctions", MathFloatingPointFunctions, .{});
    }

    pub fn setMathFloatingPointFunctions(self: *@This(), mathFloatingPointFunctions: MathFloatingPointFunctions) void {
        return objc.msgSend(self, "setMathFloatingPointFunctions:", void, .{mathFloatingPointFunctions});
    }

    pub fn languageVersion(self: *@This()) LanguageVersion {
        return objc.msgSend(self, "languageVersion", LanguageVersion, .{});
    }

    pub fn setLanguageVersion(self: *@This(), languageVersion: LanguageVersion) void {
        return objc.msgSend(self, "setLanguageVersion:", void, .{languageVersion});
    }

    pub fn libraryType(self: *@This()) LibraryType {
        return objc.msgSend(self, "libraryType", LibraryType, .{});
    }

    pub fn setLibraryType(self: *@This(), libraryType: LibraryType) void {
        return objc.msgSend(self, "setLibraryType:", void, .{libraryType});
    }

    pub fn installName(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "installName", ?*ns.String, .{});
    }

    pub fn setInstallName(self: *@This(), installName: ?*ns.String) void {
        return objc.msgSend(self, "setInstallName:", void, .{installName});
    }

    pub fn libraries(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "libraries", ?*anyopaque, .{});
    }

    pub fn setLibraries(self: *@This(), libraries: ?*anyopaque) void {
        return objc.msgSend(self, "setLibraries:", void, .{libraries});
    }

    pub fn preserveInvariance(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "preserveInvariance", objc.BOOL, .{});
    }

    pub fn setPreserveInvariance(self: *@This(), preserveInvariance: objc.BOOL) void {
        return objc.msgSend(self, "setPreserveInvariance:", void, .{preserveInvariance});
    }

    pub fn optimizationLevel(self: *@This()) LibraryOptimizationLevel {
        return objc.msgSend(self, "optimizationLevel", LibraryOptimizationLevel, .{});
    }

    pub fn setOptimizationLevel(self: *@This(), optimizationLevel: LibraryOptimizationLevel) void {
        return objc.msgSend(self, "setOptimizationLevel:", void, .{optimizationLevel});
    }

    pub fn compileSymbolVisibility(self: *@This()) CompileSymbolVisibility {
        return objc.msgSend(self, "compileSymbolVisibility", CompileSymbolVisibility, .{});
    }

    pub fn setCompileSymbolVisibility(self: *@This(), compileSymbolVisibility: CompileSymbolVisibility) void {
        return objc.msgSend(self, "setCompileSymbolVisibility:", void, .{compileSymbolVisibility});
    }

    pub fn allowReferencingUndefinedSymbols(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowReferencingUndefinedSymbols", objc.BOOL, .{});
    }

    pub fn setAllowReferencingUndefinedSymbols(self: *@This(), allowReferencingUndefinedSymbols: objc.BOOL) void {
        return objc.msgSend(self, "setAllowReferencingUndefinedSymbols:", void, .{allowReferencingUndefinedSymbols});
    }

    pub fn maxTotalThreadsPerThreadgroup(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxTotalThreadsPerThreadgroup", objc.NSUInteger, .{});
    }

    pub fn setMaxTotalThreadsPerThreadgroup(self: *@This(), maxTotalThreadsPerThreadgroup: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaxTotalThreadsPerThreadgroup:", void, .{maxTotalThreadsPerThreadgroup});
    }

    pub fn enableLogging(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "enableLogging", objc.BOOL, .{});
    }

    pub fn setEnableLogging(self: *@This(), enableLogging: objc.BOOL) void {
        return objc.msgSend(self, "setEnableLogging:", void, .{enableLogging});
    }

};

pub const LibraryError = enum(objc.NSUInteger) {
    Unsupported = 1,
    Internal = 2,
    CompileFailure = 3,
    CompileWarning = 4,
    FunctionNotFound = 5,
    FileNotFound = 6,
};

/// https://developer.apple.com/documentation/Metal/MTLLibrary?language=objc
pub const Library = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn newFunctionWithName(self: *@This(), functionName: ?*ns.String) ?*anyopaque {
        return objc.msgSend(self, "newFunctionWithName:", ?*anyopaque, .{functionName});
    }

    pub fn newFunctionWithNameConstantValuesError(self: *@This(), name: ?*ns.String, constantValues: ?*FunctionConstantValues, @"error": ?*?*ns.Error) ?*anyopaque {
        return objc.msgSend(self, "newFunctionWithName:constantValues:error:", ?*anyopaque, .{name, constantValues, @"error"});
    }

    pub fn newFunctionWithNameConstantValuesCompletionHandler(self: *@This(), name: ?*ns.String, constantValues: ?*FunctionConstantValues, completionHandler: *const fn(?*anyopaque, ?*ns.Error) callconv(.C) void) void {
        return objc.msgSend(self, "newFunctionWithName:constantValues:completionHandler:", void, .{name, constantValues, completionHandler});
    }

    pub fn newFunctionWithDescriptorCompletionHandler(self: *@This(), descriptor: ?*FunctionDescriptor, completionHandler: *const fn(?*anyopaque, ?*ns.Error) callconv(.C) void) void {
        return objc.msgSend(self, "newFunctionWithDescriptor:completionHandler:", void, .{descriptor, completionHandler});
    }

    pub fn newFunctionWithDescriptorError(self: *@This(), descriptor: ?*FunctionDescriptor, @"error": ?*?*ns.Error) ?*anyopaque {
        return objc.msgSend(self, "newFunctionWithDescriptor:error:", ?*anyopaque, .{descriptor, @"error"});
    }

    pub fn newIntersectionFunctionWithDescriptorCompletionHandler(self: *@This(), descriptor: ?*IntersectionFunctionDescriptor, completionHandler: *const fn(?*anyopaque, ?*ns.Error) callconv(.C) void) void {
        return objc.msgSend(self, "newIntersectionFunctionWithDescriptor:completionHandler:", void, .{descriptor, completionHandler});
    }

    pub fn newIntersectionFunctionWithDescriptorError(self: *@This(), descriptor: ?*IntersectionFunctionDescriptor, @"error": ?*?*ns.Error) ?*anyopaque {
        return objc.msgSend(self, "newIntersectionFunctionWithDescriptor:error:", ?*anyopaque, .{descriptor, @"error"});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*ns.String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

    pub fn device(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "device", ?*anyopaque, .{});
    }

    pub fn functionNames(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "functionNames", ?*anyopaque, .{});
    }

    pub fn @"type"(self: *@This()) LibraryType {
        return objc.msgSend(self, "type", LibraryType, .{});
    }

    pub fn installName(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "installName", ?*ns.String, .{});
    }

};

pub const CommonCounter = ?*const ns.String;

pub const CommonCounterSet = ?*const ns.String;

pub const CounterResultTimestamp = extern struct {
    timestamp: objc.uint64_t,
};

pub const CounterResultStageUtilization = extern struct {
    totalCycles: objc.uint64_t,
    vertexCycles: objc.uint64_t,
    tessellationCycles: objc.uint64_t,
    postTessellationVertexCycles: objc.uint64_t,
    fragmentCycles: objc.uint64_t,
    renderTargetCycles: objc.uint64_t,
};

pub const CounterResultStatistic = extern struct {
    tessellationInputPatches: objc.uint64_t,
    vertexInvocations: objc.uint64_t,
    postTessellationVertexInvocations: objc.uint64_t,
    clipperInvocations: objc.uint64_t,
    clipperPrimitivesOut: objc.uint64_t,
    fragmentInvocations: objc.uint64_t,
    fragmentsPassed: objc.uint64_t,
    computeKernelInvocations: objc.uint64_t,
};

/// https://developer.apple.com/documentation/Metal/MTLCounter?language=objc
pub const Counter = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn name(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "name", ?*ns.String, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLCounterSet?language=objc
pub const CounterSet = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn name(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "name", ?*ns.String, .{});
    }

    pub fn counters(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "counters", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLCounterSampleBufferDescriptor?language=objc
pub const CounterSampleBufferDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLCounterSampleBufferDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn counterSet(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "counterSet", ?*anyopaque, .{});
    }

    pub fn setCounterSet(self: *@This(), counterSet: ?*anyopaque) void {
        return objc.msgSend(self, "setCounterSet:", void, .{counterSet});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*ns.String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

    pub fn storageMode(self: *@This()) StorageMode {
        return objc.msgSend(self, "storageMode", StorageMode, .{});
    }

    pub fn setStorageMode(self: *@This(), storageMode: StorageMode) void {
        return objc.msgSend(self, "setStorageMode:", void, .{storageMode});
    }

    pub fn sampleCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "sampleCount", objc.NSUInteger, .{});
    }

    pub fn setSampleCount(self: *@This(), sampleCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setSampleCount:", void, .{sampleCount});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLCounterSampleBuffer?language=objc
pub const CounterSampleBuffer = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn resolveCounterRange(self: *@This(), range: ns.Range) ?*ns.Data {
        return objc.msgSend(self, "resolveCounterRange:", ?*ns.Data, .{range});
    }

    pub fn device(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "device", ?*anyopaque, .{});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn sampleCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "sampleCount", objc.NSUInteger, .{});
    }

};

pub const CounterSampleBufferError = enum(objc.NSInteger) {
    OutOfMemory = 0,
    Invalid = 1,
    Internal = 2,
};

pub const IOCompressionMethod = enum(objc.NSInteger) {
    Zlib = 0,
    LZFSE = 1,
    LZ4 = 2,
    LZMA = 3,
    LZBitmap = 4,
};

pub extern "Metal" fn CreateSystemDefaultDevice() callconv(.C) ?*anyopaque;

pub extern "Metal" fn CopyAllDevices() callconv(.C) ?*anyopaque;

pub const DeviceNotificationName = ?*ns.String;

pub const DeviceNotificationHandler = *const fn(?*anyopaque, DeviceNotificationName) callconv(.C) void;

pub extern "Metal" fn CopyAllDevicesWithObserver(observer: ?*?*anyopaque, handler: DeviceNotificationHandler) callconv(.C) ?*anyopaque;

pub extern "Metal" fn RemoveDeviceObserver(observer: ?*anyopaque) callconv(.C) void;

pub const FeatureSet = enum(objc.NSUInteger) {
    _iOS_GPUFamily1_v1 = 0,
    _iOS_GPUFamily2_v1 = 1,
    _iOS_GPUFamily1_v2 = 2,
    _iOS_GPUFamily2_v2 = 3,
    _iOS_GPUFamily3_v1 = 4,
    _iOS_GPUFamily1_v3 = 5,
    _iOS_GPUFamily2_v3 = 6,
    _iOS_GPUFamily3_v2 = 7,
    _iOS_GPUFamily1_v4 = 8,
    _iOS_GPUFamily2_v4 = 9,
    _iOS_GPUFamily3_v3 = 10,
    _iOS_GPUFamily4_v1 = 11,
    _iOS_GPUFamily1_v5 = 12,
    _iOS_GPUFamily2_v5 = 13,
    _iOS_GPUFamily3_v4 = 14,
    _iOS_GPUFamily4_v2 = 15,
    _iOS_GPUFamily5_v1 = 16,
    _macOS_GPUFamily1_v1 = 10000,
    _OSX_GPUFamily1_v1 = 10000,
    _macOS_GPUFamily1_v2 = 10001,
    _OSX_GPUFamily1_v2 = 10001,
    _macOS_ReadWriteTextureTier2 = 10002,
    _OSX_ReadWriteTextureTier2 = 10002,
    _macOS_GPUFamily1_v3 = 10003,
    _macOS_GPUFamily1_v4 = 10004,
    _macOS_GPUFamily2_v1 = 10005,
    _tvOS_GPUFamily1_v1 = 30000,
    _TVOS_GPUFamily1_v1 = 30000,
    _tvOS_GPUFamily1_v2 = 30001,
    _tvOS_GPUFamily1_v3 = 30002,
    _tvOS_GPUFamily2_v1 = 30003,
    _tvOS_GPUFamily1_v4 = 30004,
    _tvOS_GPUFamily2_v2 = 30005,
};

pub const GPUFamily = enum(objc.NSInteger) {
    Apple1 = 1001,
    Apple2 = 1002,
    Apple3 = 1003,
    Apple4 = 1004,
    Apple5 = 1005,
    Apple6 = 1006,
    Apple7 = 1007,
    Apple8 = 1008,
    Apple9 = 1009,
    Mac1 = 2001,
    Mac2 = 2002,
    Common1 = 3001,
    Common2 = 3002,
    Common3 = 3003,
    MacCatalyst1 = 4001,
    MacCatalyst2 = 4002,
    Metal3 = 5001,
};

pub const DeviceLocation = enum(objc.NSUInteger) {
    BuiltIn = 0,
    Slot = 1,
    External = 2,
    Unspecified = -1,
};

pub const PipelineOption = enum(objc.NSUInteger) {
    None = 0,
    ArgumentInfo = 1,
    BindingInfo = 1,
    BufferTypeInfo = 2,
    FailOnBinaryArchiveMiss = 4,
};

pub const ReadWriteTextureTier = enum(objc.NSUInteger) {
    None = 0,
    1 = 1,
    2 = 2,
};

pub const ArgumentBuffersTier = enum(objc.NSUInteger) {
    1 = 0,
    2 = 1,
};

pub const SparseTextureRegionAlignmentMode = enum(objc.NSUInteger) {
    Outward = 0,
    Inward = 1,
};

pub const SparsePageSize = enum(objc.NSInteger) {
    16 = 101,
    64 = 102,
    256 = 103,
};

pub const AccelerationStructureSizes = extern struct {
    accelerationStructureSize: objc.NSUInteger,
    buildScratchBufferSize: objc.NSUInteger,
    refitScratchBufferSize: objc.NSUInteger,
};

pub const CounterSamplingPoint = enum(objc.NSUInteger) {
    AtStageBoundary = 0,
    AtDrawBoundary = 1,
    AtDispatchBoundary = 2,
    AtTileDispatchBoundary = 3,
    AtBlitBoundary = 4,
};

pub const SizeAndAlign = extern struct {
    size: objc.NSUInteger,
    @"align": objc.NSUInteger,
};

pub const AutoreleasedRenderPipelineReflection = ?*RenderPipelineReflection;

pub const AutoreleasedComputePipelineReflection = ?*ComputePipelineReflection;

pub const NewLibraryCompletionHandler = *const fn(?*anyopaque, ?*ns.Error) callconv(.C) void;

pub const NewRenderPipelineStateCompletionHandler = *const fn(?*anyopaque, ?*ns.Error) callconv(.C) void;

pub const NewRenderPipelineStateWithReflectionCompletionHandler = *const fn(?*anyopaque, ?*RenderPipelineReflection, ?*ns.Error) callconv(.C) void;

pub const NewComputePipelineStateCompletionHandler = *const fn(?*anyopaque, ?*ns.Error) callconv(.C) void;

pub const NewComputePipelineStateWithReflectionCompletionHandler = *const fn(?*anyopaque, ?*ComputePipelineReflection, ?*ns.Error) callconv(.C) void;

/// https://developer.apple.com/documentation/Metal/MTLArgumentDescriptor?language=objc
pub const ArgumentDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLArgumentDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn argumentDescriptor(self: *@This()) ?*ArgumentDescriptor {
        return objc.msgSend(self, "argumentDescriptor", ?*ArgumentDescriptor, .{});
    }

    pub fn dataType(self: *@This()) DataType {
        return objc.msgSend(self, "dataType", DataType, .{});
    }

    pub fn setDataType(self: *@This(), dataType: DataType) void {
        return objc.msgSend(self, "setDataType:", void, .{dataType});
    }

    pub fn index(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "index", objc.NSUInteger, .{});
    }

    pub fn setIndex(self: *@This(), index: objc.NSUInteger) void {
        return objc.msgSend(self, "setIndex:", void, .{index});
    }

    pub fn arrayLength(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "arrayLength", objc.NSUInteger, .{});
    }

    pub fn setArrayLength(self: *@This(), arrayLength: objc.NSUInteger) void {
        return objc.msgSend(self, "setArrayLength:", void, .{arrayLength});
    }

    pub fn access(self: *@This()) BindingAccess {
        return objc.msgSend(self, "access", BindingAccess, .{});
    }

    pub fn setAccess(self: *@This(), access: BindingAccess) void {
        return objc.msgSend(self, "setAccess:", void, .{access});
    }

    pub fn textureType(self: *@This()) TextureType {
        return objc.msgSend(self, "textureType", TextureType, .{});
    }

    pub fn setTextureType(self: *@This(), textureType: TextureType) void {
        return objc.msgSend(self, "setTextureType:", void, .{textureType});
    }

    pub fn constantBlockAlignment(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "constantBlockAlignment", objc.NSUInteger, .{});
    }

    pub fn setConstantBlockAlignment(self: *@This(), constantBlockAlignment: objc.NSUInteger) void {
        return objc.msgSend(self, "setConstantBlockAlignment:", void, .{constantBlockAlignment});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLArchitecture?language=objc
pub const Architecture = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLArchitecture", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn name(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "name", ?*ns.String, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLDevice?language=objc
pub const Device = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn name(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "name", ?*ns.String, .{});
    }

    pub fn registryID(self: *@This()) objc.uint64_t {
        return objc.msgSend(self, "registryID", objc.uint64_t, .{});
    }

    pub fn architecture(self: *@This()) ?*Architecture {
        return objc.msgSend(self, "architecture", ?*Architecture, .{});
    }

    pub fn maxThreadsPerThreadgroup(self: *@This()) Size {
        return objc.msgSend(self, "maxThreadsPerThreadgroup", Size, .{});
    }

    pub fn isLowPower(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isLowPower", objc.BOOL, .{});
    }

    pub fn isHeadless(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isHeadless", objc.BOOL, .{});
    }

    pub fn isRemovable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isRemovable", objc.BOOL, .{});
    }

    pub fn hasUnifiedMemory(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasUnifiedMemory", objc.BOOL, .{});
    }

    pub fn recommendedMaxWorkingSetSize(self: *@This()) objc.uint64_t {
        return objc.msgSend(self, "recommendedMaxWorkingSetSize", objc.uint64_t, .{});
    }

    pub fn location(self: *@This()) DeviceLocation {
        return objc.msgSend(self, "location", DeviceLocation, .{});
    }

    pub fn locationNumber(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "locationNumber", objc.NSUInteger, .{});
    }

    pub fn maxTransferRate(self: *@This()) objc.uint64_t {
        return objc.msgSend(self, "maxTransferRate", objc.uint64_t, .{});
    }

    pub fn isDepth24Stencil8PixelFormatSupported(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isDepth24Stencil8PixelFormatSupported", objc.BOOL, .{});
    }

    pub fn readWriteTextureSupport(self: *@This()) ReadWriteTextureTier {
        return objc.msgSend(self, "readWriteTextureSupport", ReadWriteTextureTier, .{});
    }

    pub fn argumentBuffersSupport(self: *@This()) ArgumentBuffersTier {
        return objc.msgSend(self, "argumentBuffersSupport", ArgumentBuffersTier, .{});
    }

    pub fn areRasterOrderGroupsSupported(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "areRasterOrderGroupsSupported", objc.BOOL, .{});
    }

    pub fn supports32BitFloatFiltering(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supports32BitFloatFiltering", objc.BOOL, .{});
    }

    pub fn supports32BitMSAA(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supports32BitMSAA", objc.BOOL, .{});
    }

    pub fn supportsQueryTextureLOD(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportsQueryTextureLOD", objc.BOOL, .{});
    }

    pub fn supportsBCTextureCompression(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportsBCTextureCompression", objc.BOOL, .{});
    }

    pub fn supportsPullModelInterpolation(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportsPullModelInterpolation", objc.BOOL, .{});
    }

    pub fn areBarycentricCoordsSupported(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "areBarycentricCoordsSupported", objc.BOOL, .{});
    }

    pub fn supportsShaderBarycentricCoordinates(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportsShaderBarycentricCoordinates", objc.BOOL, .{});
    }

    pub fn currentAllocatedSize(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "currentAllocatedSize", objc.NSUInteger, .{});
    }

    pub fn newLogStateWithDescriptorError(self: *@This(), descriptor: ?*LogStateDescriptor, @"error": ?*?*ns.Error) ?*anyopaque {
        return objc.msgSend(self, "newLogStateWithDescriptor:error:", ?*anyopaque, .{descriptor, @"error"});
    }

    pub fn newCommandQueue(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "newCommandQueue", ?*anyopaque, .{});
    }

    pub fn newCommandQueueWithMaxCommandBufferCount(self: *@This(), maxCommandBufferCount: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(self, "newCommandQueueWithMaxCommandBufferCount:", ?*anyopaque, .{maxCommandBufferCount});
    }

    pub fn newCommandQueueWithDescriptor(self: *@This(), descriptor: ?*CommandQueueDescriptor) ?*anyopaque {
        return objc.msgSend(self, "newCommandQueueWithDescriptor:", ?*anyopaque, .{descriptor});
    }

    pub fn heapTextureSizeAndAlignWithDescriptor(self: *@This(), desc: ?*TextureDescriptor) SizeAndAlign {
        return objc.msgSend(self, "heapTextureSizeAndAlignWithDescriptor:", SizeAndAlign, .{desc});
    }

    pub fn heapBufferSizeAndAlignWithLengthOptions(self: *@This(), length: objc.NSUInteger, options: ResourceOptions) SizeAndAlign {
        return objc.msgSend(self, "heapBufferSizeAndAlignWithLength:options:", SizeAndAlign, .{length, options});
    }

    pub fn newHeapWithDescriptor(self: *@This(), descriptor: ?*HeapDescriptor) ?*anyopaque {
        return objc.msgSend(self, "newHeapWithDescriptor:", ?*anyopaque, .{descriptor});
    }

    pub fn newBufferWithLengthOptions(self: *@This(), length: objc.NSUInteger, options: ResourceOptions) ?*anyopaque {
        return objc.msgSend(self, "newBufferWithLength:options:", ?*anyopaque, .{length, options});
    }

    pub fn newBufferWithBytesLengthOptions(self: *@This(), pointer: ?*anyopaque, length: objc.NSUInteger, options: ResourceOptions) ?*anyopaque {
        return objc.msgSend(self, "newBufferWithBytes:length:options:", ?*anyopaque, .{pointer, length, options});
    }

    pub fn newBufferWithBytesNoCopyLengthOptionsDeallocator(self: *@This(), pointer: ?*anyopaque, length: objc.NSUInteger, options: ResourceOptions, deallocator: *const fn(?*anyopaque, objc.NSUInteger) callconv(.C) void, ) ?*anyopaque {
        return objc.msgSend(self, "newBufferWithBytesNoCopy:length:options:deallocator:", ?*anyopaque, .{pointer, length, options, deallocator, });
    }

    pub fn newDepthStencilStateWithDescriptor(self: *@This(), descriptor: ?*DepthStencilDescriptor) ?*anyopaque {
        return objc.msgSend(self, "newDepthStencilStateWithDescriptor:", ?*anyopaque, .{descriptor});
    }

    pub fn newTextureWithDescriptor(self: *@This(), descriptor: ?*TextureDescriptor) ?*anyopaque {
        return objc.msgSend(self, "newTextureWithDescriptor:", ?*anyopaque, .{descriptor});
    }

    pub fn newTextureWithDescriptorIosurfacePlane(self: *@This(), descriptor: ?*TextureDescriptor, iosurface: , plane: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(self, "newTextureWithDescriptor:iosurface:plane:", ?*anyopaque, .{descriptor, iosurface, plane});
    }

    pub fn newSharedTextureWithDescriptor(self: *@This(), descriptor: ?*TextureDescriptor) ?*anyopaque {
        return objc.msgSend(self, "newSharedTextureWithDescriptor:", ?*anyopaque, .{descriptor});
    }

    pub fn newSharedTextureWithHandle(self: *@This(), sharedHandle: ?*SharedTextureHandle) ?*anyopaque {
        return objc.msgSend(self, "newSharedTextureWithHandle:", ?*anyopaque, .{sharedHandle});
    }

    pub fn newSamplerStateWithDescriptor(self: *@This(), descriptor: ?*SamplerDescriptor) ?*anyopaque {
        return objc.msgSend(self, "newSamplerStateWithDescriptor:", ?*anyopaque, .{descriptor});
    }

    pub fn newDefaultLibrary(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "newDefaultLibrary", ?*anyopaque, .{});
    }

    pub fn newDefaultLibraryWithBundleError(self: *@This(), bundle: ?*ns.Bundle, @"error": ?*?*ns.Error) ?*anyopaque {
        return objc.msgSend(self, "newDefaultLibraryWithBundle:error:", ?*anyopaque, .{bundle, @"error"});
    }

    pub fn newLibraryWithFileError(self: *@This(), filepath: ?*ns.String, @"error": ?*?*ns.Error) ?*anyopaque {
        return objc.msgSend(self, "newLibraryWithFile:error:", ?*anyopaque, .{filepath, @"error"});
    }

    pub fn newLibraryWithURLError(self: *@This(), url: ?*ns.URL, @"error": ?*?*ns.Error) ?*anyopaque {
        return objc.msgSend(self, "newLibraryWithURL:error:", ?*anyopaque, .{url, @"error"});
    }

    pub fn newLibraryWithDataError(self: *@This(), data: objc.dispatch_data_t, @"error": ?*?*ns.Error) ?*anyopaque {
        return objc.msgSend(self, "newLibraryWithData:error:", ?*anyopaque, .{data, @"error"});
    }

    pub fn newLibraryWithSourceOptionsError(self: *@This(), source: ?*ns.String, options: ?*CompileOptions, @"error": ?*?*ns.Error) ?*anyopaque {
        return objc.msgSend(self, "newLibraryWithSource:options:error:", ?*anyopaque, .{source, options, @"error"});
    }

    pub fn newLibraryWithSourceOptionsCompletionHandler(self: *@This(), source: ?*ns.String, options: ?*CompileOptions, completionHandler: NewLibraryCompletionHandler) void {
        return objc.msgSend(self, "newLibraryWithSource:options:completionHandler:", void, .{source, options, completionHandler});
    }

    pub fn newLibraryWithStitchedDescriptorError(self: *@This(), descriptor: ?*StitchedLibraryDescriptor, @"error": ?*?*ns.Error) ?*anyopaque {
        return objc.msgSend(self, "newLibraryWithStitchedDescriptor:error:", ?*anyopaque, .{descriptor, @"error"});
    }

    pub fn newLibraryWithStitchedDescriptorCompletionHandler(self: *@This(), descriptor: ?*StitchedLibraryDescriptor, completionHandler: NewLibraryCompletionHandler) void {
        return objc.msgSend(self, "newLibraryWithStitchedDescriptor:completionHandler:", void, .{descriptor, completionHandler});
    }

    pub fn newRenderPipelineStateWithDescriptorError(self: *@This(), descriptor: ?*RenderPipelineDescriptor, @"error": ?*?*ns.Error) ?*anyopaque {
        return objc.msgSend(self, "newRenderPipelineStateWithDescriptor:error:", ?*anyopaque, .{descriptor, @"error"});
    }

    pub fn newRenderPipelineStateWithDescriptorOptionsReflectionError(self: *@This(), descriptor: ?*RenderPipelineDescriptor, options: PipelineOption, reflection: ?*?*RenderPipelineReflection, @"error": ?*?*ns.Error, ) ?*anyopaque {
        return objc.msgSend(self, "newRenderPipelineStateWithDescriptor:options:reflection:error:", ?*anyopaque, .{descriptor, options, reflection, @"error", });
    }

    pub fn newRenderPipelineStateWithDescriptorCompletionHandler(self: *@This(), descriptor: ?*RenderPipelineDescriptor, completionHandler: NewRenderPipelineStateCompletionHandler) void {
        return objc.msgSend(self, "newRenderPipelineStateWithDescriptor:completionHandler:", void, .{descriptor, completionHandler});
    }

    pub fn newRenderPipelineStateWithDescriptorOptionsCompletionHandler(self: *@This(), descriptor: ?*RenderPipelineDescriptor, options: PipelineOption, completionHandler: NewRenderPipelineStateWithReflectionCompletionHandler) void {
        return objc.msgSend(self, "newRenderPipelineStateWithDescriptor:options:completionHandler:", void, .{descriptor, options, completionHandler});
    }

    pub fn newComputePipelineStateWithFunctionError(self: *@This(), computeFunction: ?*anyopaque, @"error": ?*?*ns.Error) ?*anyopaque {
        return objc.msgSend(self, "newComputePipelineStateWithFunction:error:", ?*anyopaque, .{computeFunction, @"error"});
    }

    pub fn newComputePipelineStateWithFunctionOptionsReflectionError(self: *@This(), computeFunction: ?*anyopaque, options: PipelineOption, reflection: ?*?*ComputePipelineReflection, @"error": ?*?*ns.Error, ) ?*anyopaque {
        return objc.msgSend(self, "newComputePipelineStateWithFunction:options:reflection:error:", ?*anyopaque, .{computeFunction, options, reflection, @"error", });
    }

    pub fn newComputePipelineStateWithFunctionCompletionHandler(self: *@This(), computeFunction: ?*anyopaque, completionHandler: NewComputePipelineStateCompletionHandler) void {
        return objc.msgSend(self, "newComputePipelineStateWithFunction:completionHandler:", void, .{computeFunction, completionHandler});
    }

    pub fn newComputePipelineStateWithFunctionOptionsCompletionHandler(self: *@This(), computeFunction: ?*anyopaque, options: PipelineOption, completionHandler: NewComputePipelineStateWithReflectionCompletionHandler) void {
        return objc.msgSend(self, "newComputePipelineStateWithFunction:options:completionHandler:", void, .{computeFunction, options, completionHandler});
    }

    pub fn newComputePipelineStateWithDescriptorOptionsReflectionError(self: *@This(), descriptor: ?*ComputePipelineDescriptor, options: PipelineOption, reflection: ?*?*ComputePipelineReflection, @"error": ?*?*ns.Error, ) ?*anyopaque {
        return objc.msgSend(self, "newComputePipelineStateWithDescriptor:options:reflection:error:", ?*anyopaque, .{descriptor, options, reflection, @"error", });
    }

    pub fn newComputePipelineStateWithDescriptorOptionsCompletionHandler(self: *@This(), descriptor: ?*ComputePipelineDescriptor, options: PipelineOption, completionHandler: NewComputePipelineStateWithReflectionCompletionHandler) void {
        return objc.msgSend(self, "newComputePipelineStateWithDescriptor:options:completionHandler:", void, .{descriptor, options, completionHandler});
    }

    pub fn newFence(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "newFence", ?*anyopaque, .{});
    }

    pub fn supportsFeatureSet(self: *@This(), featureSet: FeatureSet) objc.BOOL {
        return objc.msgSend(self, "supportsFeatureSet:", objc.BOOL, .{featureSet});
    }

    pub fn supportsFamily(self: *@This(), gpuFamily: GPUFamily) objc.BOOL {
        return objc.msgSend(self, "supportsFamily:", objc.BOOL, .{gpuFamily});
    }

    pub fn supportsTextureSampleCount(self: *@This(), sampleCount: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(self, "supportsTextureSampleCount:", objc.BOOL, .{sampleCount});
    }

    pub fn minimumLinearTextureAlignmentForPixelFormat(self: *@This(), format: PixelFormat) objc.NSUInteger {
        return objc.msgSend(self, "minimumLinearTextureAlignmentForPixelFormat:", objc.NSUInteger, .{format});
    }

    pub fn minimumTextureBufferAlignmentForPixelFormat(self: *@This(), format: PixelFormat) objc.NSUInteger {
        return objc.msgSend(self, "minimumTextureBufferAlignmentForPixelFormat:", objc.NSUInteger, .{format});
    }

    pub fn newRenderPipelineStateWithTileDescriptorOptionsReflectionError(self: *@This(), descriptor: ?*TileRenderPipelineDescriptor, options: PipelineOption, reflection: ?*?*RenderPipelineReflection, @"error": ?*?*ns.Error, ) ?*anyopaque {
        return objc.msgSend(self, "newRenderPipelineStateWithTileDescriptor:options:reflection:error:", ?*anyopaque, .{descriptor, options, reflection, @"error", });
    }

    pub fn newRenderPipelineStateWithTileDescriptorOptionsCompletionHandler(self: *@This(), descriptor: ?*TileRenderPipelineDescriptor, options: PipelineOption, completionHandler: NewRenderPipelineStateWithReflectionCompletionHandler) void {
        return objc.msgSend(self, "newRenderPipelineStateWithTileDescriptor:options:completionHandler:", void, .{descriptor, options, completionHandler});
    }

    pub fn newRenderPipelineStateWithMeshDescriptorOptionsReflectionError(self: *@This(), descriptor: ?*MeshRenderPipelineDescriptor, options: PipelineOption, reflection: ?*?*RenderPipelineReflection, @"error": ?*?*ns.Error, ) ?*anyopaque {
        return objc.msgSend(self, "newRenderPipelineStateWithMeshDescriptor:options:reflection:error:", ?*anyopaque, .{descriptor, options, reflection, @"error", });
    }

    pub fn newRenderPipelineStateWithMeshDescriptorOptionsCompletionHandler(self: *@This(), descriptor: ?*MeshRenderPipelineDescriptor, options: PipelineOption, completionHandler: NewRenderPipelineStateWithReflectionCompletionHandler) void {
        return objc.msgSend(self, "newRenderPipelineStateWithMeshDescriptor:options:completionHandler:", void, .{descriptor, options, completionHandler});
    }

    pub fn maxThreadgroupMemoryLength(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxThreadgroupMemoryLength", objc.NSUInteger, .{});
    }

    pub fn maxArgumentBufferSamplerCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxArgumentBufferSamplerCount", objc.NSUInteger, .{});
    }

    pub fn areProgrammableSamplePositionsSupported(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "areProgrammableSamplePositionsSupported", objc.BOOL, .{});
    }

    pub fn getDefaultSamplePositionsCount(self: *@This(), positions: ?*SamplePosition, count: objc.NSUInteger) void {
        return objc.msgSend(self, "getDefaultSamplePositions:count:", void, .{positions, count});
    }

    pub fn newArgumentEncoderWithArguments(self: *@This(), arguments: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "newArgumentEncoderWithArguments:", ?*anyopaque, .{arguments});
    }

    pub fn supportsRasterizationRateMapWithLayerCount(self: *@This(), layerCount: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(self, "supportsRasterizationRateMapWithLayerCount:", objc.BOOL, .{layerCount});
    }

    pub fn newRasterizationRateMapWithDescriptor(self: *@This(), descriptor: ?*RasterizationRateMapDescriptor) ?*anyopaque {
        return objc.msgSend(self, "newRasterizationRateMapWithDescriptor:", ?*anyopaque, .{descriptor});
    }

    pub fn newIndirectCommandBufferWithDescriptorMaxCommandCountOptions(self: *@This(), descriptor: ?*IndirectCommandBufferDescriptor, maxCount: objc.NSUInteger, options: ResourceOptions) ?*anyopaque {
        return objc.msgSend(self, "newIndirectCommandBufferWithDescriptor:maxCommandCount:options:", ?*anyopaque, .{descriptor, maxCount, options});
    }

    pub fn newEvent(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "newEvent", ?*anyopaque, .{});
    }

    pub fn newSharedEvent(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "newSharedEvent", ?*anyopaque, .{});
    }

    pub fn newSharedEventWithHandle(self: *@This(), sharedEventHandle: ?*SharedEventHandle) ?*anyopaque {
        return objc.msgSend(self, "newSharedEventWithHandle:", ?*anyopaque, .{sharedEventHandle});
    }

    pub fn peerGroupID(self: *@This()) objc.uint64_t {
        return objc.msgSend(self, "peerGroupID", objc.uint64_t, .{});
    }

    pub fn peerIndex(self: *@This()) objc.uint32_t {
        return objc.msgSend(self, "peerIndex", objc.uint32_t, .{});
    }

    pub fn peerCount(self: *@This()) objc.uint32_t {
        return objc.msgSend(self, "peerCount", objc.uint32_t, .{});
    }

    pub fn newIOHandleWithURLError(self: *@This(), url: ?*ns.URL, @"error": ?*?*ns.Error) ?*anyopaque {
        return objc.msgSend(self, "newIOHandleWithURL:error:", ?*anyopaque, .{url, @"error"});
    }

    pub fn newIOCommandQueueWithDescriptorError(self: *@This(), descriptor: ?*IOCommandQueueDescriptor, @"error": ?*?*ns.Error) ?*anyopaque {
        return objc.msgSend(self, "newIOCommandQueueWithDescriptor:error:", ?*anyopaque, .{descriptor, @"error"});
    }

    pub fn newIOHandleWithURLCompressionMethodError(self: *@This(), url: ?*ns.URL, compressionMethod: IOCompressionMethod, @"error": ?*?*ns.Error) ?*anyopaque {
        return objc.msgSend(self, "newIOHandleWithURL:compressionMethod:error:", ?*anyopaque, .{url, compressionMethod, @"error"});
    }

    pub fn newIOFileHandleWithURLError(self: *@This(), url: ?*ns.URL, @"error": ?*?*ns.Error) ?*anyopaque {
        return objc.msgSend(self, "newIOFileHandleWithURL:error:", ?*anyopaque, .{url, @"error"});
    }

    pub fn newIOFileHandleWithURLCompressionMethodError(self: *@This(), url: ?*ns.URL, compressionMethod: IOCompressionMethod, @"error": ?*?*ns.Error) ?*anyopaque {
        return objc.msgSend(self, "newIOFileHandleWithURL:compressionMethod:error:", ?*anyopaque, .{url, compressionMethod, @"error"});
    }

    pub fn sparseTileSizeWithTextureTypePixelFormatSampleCount(self: *@This(), textureType: TextureType, pixelFormat: PixelFormat, sampleCount: objc.NSUInteger) Size {
        return objc.msgSend(self, "sparseTileSizeWithTextureType:pixelFormat:sampleCount:", Size, .{textureType, pixelFormat, sampleCount});
    }

    pub fn sparseTileSizeInBytes(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "sparseTileSizeInBytes", objc.NSUInteger, .{});
    }

    pub fn convertSparsePixelRegionsToTileRegionsWithTileSizeAlignmentModeNumRegions(self: *@This(), pixelRegions: ?*Region, tileRegions: ?*Region, tileSize: Size, mode: SparseTextureRegionAlignmentMode, numRegions: objc.NSUInteger, ) void {
        return objc.msgSend(self, "convertSparsePixelRegions:toTileRegions:withTileSize:alignmentMode:numRegions:", void, .{pixelRegions, tileRegions, tileSize, mode, numRegions, });
    }

    pub fn convertSparseTileRegionsToPixelRegionsWithTileSizeNumRegions(self: *@This(), tileRegions: ?*Region, pixelRegions: ?*Region, tileSize: Size, numRegions: objc.NSUInteger, ) void {
        return objc.msgSend(self, "convertSparseTileRegions:toPixelRegions:withTileSize:numRegions:", void, .{tileRegions, pixelRegions, tileSize, numRegions, });
    }

    pub fn sparseTileSizeInBytesForSparsePageSize(self: *@This(), sparsePageSize: SparsePageSize) objc.NSUInteger {
        return objc.msgSend(self, "sparseTileSizeInBytesForSparsePageSize:", objc.NSUInteger, .{sparsePageSize});
    }

    pub fn sparseTileSizeWithTextureTypePixelFormatSampleCountSparsePageSize(self: *@This(), textureType: TextureType, pixelFormat: PixelFormat, sampleCount: objc.NSUInteger, sparsePageSize: SparsePageSize, ) Size {
        return objc.msgSend(self, "sparseTileSizeWithTextureType:pixelFormat:sampleCount:sparsePageSize:", Size, .{textureType, pixelFormat, sampleCount, sparsePageSize, });
    }

    pub fn maxBufferLength(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxBufferLength", objc.NSUInteger, .{});
    }

    pub fn counterSets(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "counterSets", ?*anyopaque, .{});
    }

    pub fn newCounterSampleBufferWithDescriptorError(self: *@This(), descriptor: ?*CounterSampleBufferDescriptor, @"error": ?*?*ns.Error) ?*anyopaque {
        return objc.msgSend(self, "newCounterSampleBufferWithDescriptor:error:", ?*anyopaque, .{descriptor, @"error"});
    }

    pub fn sampleTimestampsGpuTimestamp(self: *@This(), cpuTimestamp: ?*Timestamp, gpuTimestamp: ?*Timestamp) void {
        return objc.msgSend(self, "sampleTimestamps:gpuTimestamp:", void, .{cpuTimestamp, gpuTimestamp});
    }

    pub fn newArgumentEncoderWithBufferBinding(self: *@This(), bufferBinding: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "newArgumentEncoderWithBufferBinding:", ?*anyopaque, .{bufferBinding});
    }

    pub fn supportsCounterSampling(self: *@This(), samplingPoint: CounterSamplingPoint) objc.BOOL {
        return objc.msgSend(self, "supportsCounterSampling:", objc.BOOL, .{samplingPoint});
    }

    pub fn supportsVertexAmplificationCount(self: *@This(), count: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(self, "supportsVertexAmplificationCount:", objc.BOOL, .{count});
    }

    pub fn supportsDynamicLibraries(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportsDynamicLibraries", objc.BOOL, .{});
    }

    pub fn supportsRenderDynamicLibraries(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportsRenderDynamicLibraries", objc.BOOL, .{});
    }

    pub fn newDynamicLibraryError(self: *@This(), library: ?*anyopaque, @"error": ?*?*ns.Error) ?*anyopaque {
        return objc.msgSend(self, "newDynamicLibrary:error:", ?*anyopaque, .{library, @"error"});
    }

    pub fn newDynamicLibraryWithURLError(self: *@This(), url: ?*ns.URL, @"error": ?*?*ns.Error) ?*anyopaque {
        return objc.msgSend(self, "newDynamicLibraryWithURL:error:", ?*anyopaque, .{url, @"error"});
    }

    pub fn newBinaryArchiveWithDescriptorError(self: *@This(), descriptor: ?*BinaryArchiveDescriptor, @"error": ?*?*ns.Error) ?*anyopaque {
        return objc.msgSend(self, "newBinaryArchiveWithDescriptor:error:", ?*anyopaque, .{descriptor, @"error"});
    }

    pub fn supportsRaytracing(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportsRaytracing", objc.BOOL, .{});
    }

    pub fn accelerationStructureSizesWithDescriptor(self: *@This(), descriptor: ?*AccelerationStructureDescriptor) AccelerationStructureSizes {
        return objc.msgSend(self, "accelerationStructureSizesWithDescriptor:", AccelerationStructureSizes, .{descriptor});
    }

    pub fn newAccelerationStructureWithSize(self: *@This(), size: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(self, "newAccelerationStructureWithSize:", ?*anyopaque, .{size});
    }

    pub fn newAccelerationStructureWithDescriptor(self: *@This(), descriptor: ?*AccelerationStructureDescriptor) ?*anyopaque {
        return objc.msgSend(self, "newAccelerationStructureWithDescriptor:", ?*anyopaque, .{descriptor});
    }

    pub fn heapAccelerationStructureSizeAndAlignWithSize(self: *@This(), size: objc.NSUInteger) SizeAndAlign {
        return objc.msgSend(self, "heapAccelerationStructureSizeAndAlignWithSize:", SizeAndAlign, .{size});
    }

    pub fn heapAccelerationStructureSizeAndAlignWithDescriptor(self: *@This(), descriptor: ?*AccelerationStructureDescriptor) SizeAndAlign {
        return objc.msgSend(self, "heapAccelerationStructureSizeAndAlignWithDescriptor:", SizeAndAlign, .{descriptor});
    }

    pub fn supportsFunctionPointers(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportsFunctionPointers", objc.BOOL, .{});
    }

    pub fn supportsFunctionPointersFromRender(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportsFunctionPointersFromRender", objc.BOOL, .{});
    }

    pub fn supportsRaytracingFromRender(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportsRaytracingFromRender", objc.BOOL, .{});
    }

    pub fn supportsPrimitiveMotionBlur(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportsPrimitiveMotionBlur", objc.BOOL, .{});
    }

    pub fn shouldMaximizeConcurrentCompilation(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "shouldMaximizeConcurrentCompilation", objc.BOOL, .{});
    }

    pub fn setShouldMaximizeConcurrentCompilation(self: *@This(), shouldMaximizeConcurrentCompilation: objc.BOOL) void {
        return objc.msgSend(self, "setShouldMaximizeConcurrentCompilation:", void, .{shouldMaximizeConcurrentCompilation});
    }

    pub fn maximumConcurrentCompilationTaskCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maximumConcurrentCompilationTaskCount", objc.NSUInteger, .{});
    }

    pub fn newResidencySetWithDescriptorError(self: *@This(), desc: ?*ResidencySetDescriptor, @"error": ?*?*ns.Error) ?*anyopaque {
        return objc.msgSend(self, "newResidencySetWithDescriptor:error:", ?*anyopaque, .{desc, @"error"});
    }

};

pub const Timestamp = objc.uint64_t;

/// https://developer.apple.com/documentation/Metal/MTLFence?language=objc
pub const Fence = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn device(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "device", ?*anyopaque, .{});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*ns.String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLResourceStatePassSampleBufferAttachmentDescriptor?language=objc
pub const ResourceStatePassSampleBufferAttachmentDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLResourceStatePassSampleBufferAttachmentDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn sampleBuffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "sampleBuffer", ?*anyopaque, .{});
    }

    pub fn setSampleBuffer(self: *@This(), sampleBuffer: ?*anyopaque) void {
        return objc.msgSend(self, "setSampleBuffer:", void, .{sampleBuffer});
    }

    pub fn startOfEncoderSampleIndex(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "startOfEncoderSampleIndex", objc.NSUInteger, .{});
    }

    pub fn setStartOfEncoderSampleIndex(self: *@This(), startOfEncoderSampleIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setStartOfEncoderSampleIndex:", void, .{startOfEncoderSampleIndex});
    }

    pub fn endOfEncoderSampleIndex(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "endOfEncoderSampleIndex", objc.NSUInteger, .{});
    }

    pub fn setEndOfEncoderSampleIndex(self: *@This(), endOfEncoderSampleIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setEndOfEncoderSampleIndex:", void, .{endOfEncoderSampleIndex});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLResourceStatePassSampleBufferAttachmentDescriptorArray?language=objc
pub const ResourceStatePassSampleBufferAttachmentDescriptorArray = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLResourceStatePassSampleBufferAttachmentDescriptorArray", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn objectAtIndexedSubscript(self: *@This(), attachmentIndex: objc.NSUInteger) ?*ResourceStatePassSampleBufferAttachmentDescriptor {
        return objc.msgSend(self, "objectAtIndexedSubscript:", ?*ResourceStatePassSampleBufferAttachmentDescriptor, .{attachmentIndex});
    }

    pub fn setObjectAtIndexedSubscript(self: *@This(), attachment: ?*ResourceStatePassSampleBufferAttachmentDescriptor, attachmentIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setObject:atIndexedSubscript:", void, .{attachment, attachmentIndex});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLResourceStatePassDescriptor?language=objc
pub const ResourceStatePassDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLResourceStatePassDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn resourceStatePassDescriptor(self: *@This()) ?*ResourceStatePassDescriptor {
        return objc.msgSend(self, "resourceStatePassDescriptor", ?*ResourceStatePassDescriptor, .{});
    }

    pub fn sampleBufferAttachments(self: *@This()) ?*ResourceStatePassSampleBufferAttachmentDescriptorArray {
        return objc.msgSend(self, "sampleBufferAttachments", ?*ResourceStatePassSampleBufferAttachmentDescriptorArray, .{});
    }

};

pub const SparseTextureMappingMode = enum(objc.NSUInteger) {
    Map = 0,
    Unmap = 1,
};

pub const MapIndirectArguments = extern struct {
    regionOriginX: objc.uint32_t,
    regionOriginY: objc.uint32_t,
    regionOriginZ: objc.uint32_t,
    regionSizeWidth: objc.uint32_t,
    regionSizeHeight: objc.uint32_t,
    regionSizeDepth: objc.uint32_t,
    mipMapLevel: objc.uint32_t,
    sliceId: objc.uint32_t,
};

/// https://developer.apple.com/documentation/Metal/MTLResourceStateCommandEncoder?language=objc
pub const ResourceStateCommandEncoder = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{CommandEncoder, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn updateTextureMappingsModeRegionsMipLevelsSlicesNumRegions(self: *@This(), texture: ?*anyopaque, mode: SparseTextureMappingMode, regions: ?*Region, mipLevels: ?*objc.NSUInteger, slices: ?*objc.NSUInteger, numRegions: objc.NSUInteger, ) void {
        return objc.msgSend(self, "updateTextureMappings:mode:regions:mipLevels:slices:numRegions:", void, .{texture, mode, regions, mipLevels, slices, numRegions, });
    }

    pub fn updateTextureMappingModeRegionMipLevelSlice(self: *@This(), texture: ?*anyopaque, mode: SparseTextureMappingMode, region: Region, mipLevel: objc.NSUInteger, slice: objc.NSUInteger, ) void {
        return objc.msgSend(self, "updateTextureMapping:mode:region:mipLevel:slice:", void, .{texture, mode, region, mipLevel, slice, });
    }

    pub fn updateTextureMappingModeIndirectBufferIndirectBufferOffset(self: *@This(), texture: ?*anyopaque, mode: SparseTextureMappingMode, indirectBuffer: ?*anyopaque, indirectBufferOffset: objc.NSUInteger, ) void {
        return objc.msgSend(self, "updateTextureMapping:mode:indirectBuffer:indirectBufferOffset:", void, .{texture, mode, indirectBuffer, indirectBufferOffset, });
    }

    pub fn updateFence(self: *@This(), fence: ?*anyopaque) void {
        return objc.msgSend(self, "updateFence:", void, .{fence});
    }

    pub fn waitForFence(self: *@This(), fence: ?*anyopaque) void {
        return objc.msgSend(self, "waitForFence:", void, .{fence});
    }

    pub fn moveTextureMappingsFromTextureSourceSliceSourceLevelSourceOriginSourceSizeToTextureDestinationSliceDestinationLevelDestinationOrigin(self: *@This(), sourceTexture: ?*anyopaque, sourceSlice: objc.NSUInteger, sourceLevel: objc.NSUInteger, sourceOrigin: Origin, sourceSize: Size, destinationTexture: ?*anyopaque, destinationSlice: objc.NSUInteger, destinationLevel: objc.NSUInteger, destinationOrigin: Origin, ) void {
        return objc.msgSend(self, "moveTextureMappingsFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", void, .{sourceTexture, sourceSlice, sourceLevel, sourceOrigin, sourceSize, destinationTexture, destinationSlice, destinationLevel, destinationOrigin, });
    }

};

pub const ClearColor = extern struct {
    red: f64,
    green: f64,
    blue: f64,
    alpha: f64,
};

pub extern "Metal" fn ClearColorMake(red: f64, green: f64, blue: f64, alpha: f64, ) callconv(.C) ClearColor;

pub const LoadAction = enum(objc.NSUInteger) {
    DontCare = 0,
    Load = 1,
    Clear = 2,
};

pub const StoreAction = enum(objc.NSUInteger) {
    DontCare = 0,
    Store = 1,
    MultisampleResolve = 2,
    StoreAndMultisampleResolve = 3,
    Unknown = 4,
    CustomSampleDepthStore = 5,
};

pub const StoreActionOptions = enum(objc.NSUInteger) {
    None = 0,
    CustomSamplePositions = 1,
};

/// https://developer.apple.com/documentation/Metal/MTLRenderPassAttachmentDescriptor?language=objc
pub const RenderPassAttachmentDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLRenderPassAttachmentDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn texture(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "texture", ?*anyopaque, .{});
    }

    pub fn setTexture(self: *@This(), texture: ?*anyopaque) void {
        return objc.msgSend(self, "setTexture:", void, .{texture});
    }

    pub fn level(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "level", objc.NSUInteger, .{});
    }

    pub fn setLevel(self: *@This(), level: objc.NSUInteger) void {
        return objc.msgSend(self, "setLevel:", void, .{level});
    }

    pub fn slice(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "slice", objc.NSUInteger, .{});
    }

    pub fn setSlice(self: *@This(), slice: objc.NSUInteger) void {
        return objc.msgSend(self, "setSlice:", void, .{slice});
    }

    pub fn depthPlane(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "depthPlane", objc.NSUInteger, .{});
    }

    pub fn setDepthPlane(self: *@This(), depthPlane: objc.NSUInteger) void {
        return objc.msgSend(self, "setDepthPlane:", void, .{depthPlane});
    }

    pub fn resolveTexture(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "resolveTexture", ?*anyopaque, .{});
    }

    pub fn setResolveTexture(self: *@This(), resolveTexture: ?*anyopaque) void {
        return objc.msgSend(self, "setResolveTexture:", void, .{resolveTexture});
    }

    pub fn resolveLevel(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "resolveLevel", objc.NSUInteger, .{});
    }

    pub fn setResolveLevel(self: *@This(), resolveLevel: objc.NSUInteger) void {
        return objc.msgSend(self, "setResolveLevel:", void, .{resolveLevel});
    }

    pub fn resolveSlice(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "resolveSlice", objc.NSUInteger, .{});
    }

    pub fn setResolveSlice(self: *@This(), resolveSlice: objc.NSUInteger) void {
        return objc.msgSend(self, "setResolveSlice:", void, .{resolveSlice});
    }

    pub fn resolveDepthPlane(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "resolveDepthPlane", objc.NSUInteger, .{});
    }

    pub fn setResolveDepthPlane(self: *@This(), resolveDepthPlane: objc.NSUInteger) void {
        return objc.msgSend(self, "setResolveDepthPlane:", void, .{resolveDepthPlane});
    }

    pub fn loadAction(self: *@This()) LoadAction {
        return objc.msgSend(self, "loadAction", LoadAction, .{});
    }

    pub fn setLoadAction(self: *@This(), loadAction: LoadAction) void {
        return objc.msgSend(self, "setLoadAction:", void, .{loadAction});
    }

    pub fn storeAction(self: *@This()) StoreAction {
        return objc.msgSend(self, "storeAction", StoreAction, .{});
    }

    pub fn setStoreAction(self: *@This(), storeAction: StoreAction) void {
        return objc.msgSend(self, "setStoreAction:", void, .{storeAction});
    }

    pub fn storeActionOptions(self: *@This()) StoreActionOptions {
        return objc.msgSend(self, "storeActionOptions", StoreActionOptions, .{});
    }

    pub fn setStoreActionOptions(self: *@This(), storeActionOptions: StoreActionOptions) void {
        return objc.msgSend(self, "setStoreActionOptions:", void, .{storeActionOptions});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLRenderPassColorAttachmentDescriptor?language=objc
pub const RenderPassColorAttachmentDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLRenderPassColorAttachmentDescriptor", @This(), RenderPassAttachmentDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn clearColor(self: *@This()) ClearColor {
        return objc.msgSend(self, "clearColor", ClearColor, .{});
    }

    pub fn setClearColor(self: *@This(), clearColor: ClearColor) void {
        return objc.msgSend(self, "setClearColor:", void, .{clearColor});
    }

};

pub const MultisampleDepthResolveFilter = enum(objc.NSUInteger) {
    Sample0 = 0,
    Min = 1,
    Max = 2,
};

/// https://developer.apple.com/documentation/Metal/MTLRenderPassDepthAttachmentDescriptor?language=objc
pub const RenderPassDepthAttachmentDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLRenderPassDepthAttachmentDescriptor", @This(), RenderPassAttachmentDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn clearDepth(self: *@This()) f64 {
        return objc.msgSend(self, "clearDepth", f64, .{});
    }

    pub fn setClearDepth(self: *@This(), clearDepth: f64) void {
        return objc.msgSend(self, "setClearDepth:", void, .{clearDepth});
    }

    pub fn depthResolveFilter(self: *@This()) MultisampleDepthResolveFilter {
        return objc.msgSend(self, "depthResolveFilter", MultisampleDepthResolveFilter, .{});
    }

    pub fn setDepthResolveFilter(self: *@This(), depthResolveFilter: MultisampleDepthResolveFilter) void {
        return objc.msgSend(self, "setDepthResolveFilter:", void, .{depthResolveFilter});
    }

};

pub const MultisampleStencilResolveFilter = enum(objc.NSUInteger) {
    Sample0 = 0,
    DepthResolvedSample = 1,
};

/// https://developer.apple.com/documentation/Metal/MTLRenderPassStencilAttachmentDescriptor?language=objc
pub const RenderPassStencilAttachmentDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLRenderPassStencilAttachmentDescriptor", @This(), RenderPassAttachmentDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn clearStencil(self: *@This()) objc.uint32_t {
        return objc.msgSend(self, "clearStencil", objc.uint32_t, .{});
    }

    pub fn setClearStencil(self: *@This(), clearStencil: objc.uint32_t) void {
        return objc.msgSend(self, "setClearStencil:", void, .{clearStencil});
    }

    pub fn stencilResolveFilter(self: *@This()) MultisampleStencilResolveFilter {
        return objc.msgSend(self, "stencilResolveFilter", MultisampleStencilResolveFilter, .{});
    }

    pub fn setStencilResolveFilter(self: *@This(), stencilResolveFilter: MultisampleStencilResolveFilter) void {
        return objc.msgSend(self, "setStencilResolveFilter:", void, .{stencilResolveFilter});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLRenderPassColorAttachmentDescriptorArray?language=objc
pub const RenderPassColorAttachmentDescriptorArray = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLRenderPassColorAttachmentDescriptorArray", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn objectAtIndexedSubscript(self: *@This(), attachmentIndex: objc.NSUInteger) ?*RenderPassColorAttachmentDescriptor {
        return objc.msgSend(self, "objectAtIndexedSubscript:", ?*RenderPassColorAttachmentDescriptor, .{attachmentIndex});
    }

    pub fn setObjectAtIndexedSubscript(self: *@This(), attachment: ?*RenderPassColorAttachmentDescriptor, attachmentIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setObject:atIndexedSubscript:", void, .{attachment, attachmentIndex});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLRenderPassSampleBufferAttachmentDescriptor?language=objc
pub const RenderPassSampleBufferAttachmentDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLRenderPassSampleBufferAttachmentDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn sampleBuffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "sampleBuffer", ?*anyopaque, .{});
    }

    pub fn setSampleBuffer(self: *@This(), sampleBuffer: ?*anyopaque) void {
        return objc.msgSend(self, "setSampleBuffer:", void, .{sampleBuffer});
    }

    pub fn startOfVertexSampleIndex(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "startOfVertexSampleIndex", objc.NSUInteger, .{});
    }

    pub fn setStartOfVertexSampleIndex(self: *@This(), startOfVertexSampleIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setStartOfVertexSampleIndex:", void, .{startOfVertexSampleIndex});
    }

    pub fn endOfVertexSampleIndex(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "endOfVertexSampleIndex", objc.NSUInteger, .{});
    }

    pub fn setEndOfVertexSampleIndex(self: *@This(), endOfVertexSampleIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setEndOfVertexSampleIndex:", void, .{endOfVertexSampleIndex});
    }

    pub fn startOfFragmentSampleIndex(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "startOfFragmentSampleIndex", objc.NSUInteger, .{});
    }

    pub fn setStartOfFragmentSampleIndex(self: *@This(), startOfFragmentSampleIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setStartOfFragmentSampleIndex:", void, .{startOfFragmentSampleIndex});
    }

    pub fn endOfFragmentSampleIndex(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "endOfFragmentSampleIndex", objc.NSUInteger, .{});
    }

    pub fn setEndOfFragmentSampleIndex(self: *@This(), endOfFragmentSampleIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setEndOfFragmentSampleIndex:", void, .{endOfFragmentSampleIndex});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLRenderPassSampleBufferAttachmentDescriptorArray?language=objc
pub const RenderPassSampleBufferAttachmentDescriptorArray = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLRenderPassSampleBufferAttachmentDescriptorArray", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn objectAtIndexedSubscript(self: *@This(), attachmentIndex: objc.NSUInteger) ?*RenderPassSampleBufferAttachmentDescriptor {
        return objc.msgSend(self, "objectAtIndexedSubscript:", ?*RenderPassSampleBufferAttachmentDescriptor, .{attachmentIndex});
    }

    pub fn setObjectAtIndexedSubscript(self: *@This(), attachment: ?*RenderPassSampleBufferAttachmentDescriptor, attachmentIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setObject:atIndexedSubscript:", void, .{attachment, attachmentIndex});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLRenderPassDescriptor?language=objc
pub const RenderPassDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLRenderPassDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn renderPassDescriptor(self: *@This()) ?*RenderPassDescriptor {
        return objc.msgSend(self, "renderPassDescriptor", ?*RenderPassDescriptor, .{});
    }

    pub fn setSamplePositionsCount(self: *@This(), positions: ?*SamplePosition, count: objc.NSUInteger) void {
        return objc.msgSend(self, "setSamplePositions:count:", void, .{positions, count});
    }

    pub fn getSamplePositionsCount(self: *@This(), positions: ?*SamplePosition, count: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(self, "getSamplePositions:count:", objc.NSUInteger, .{positions, count});
    }

    pub fn colorAttachments(self: *@This()) ?*RenderPassColorAttachmentDescriptorArray {
        return objc.msgSend(self, "colorAttachments", ?*RenderPassColorAttachmentDescriptorArray, .{});
    }

    pub fn depthAttachment(self: *@This()) ?*RenderPassDepthAttachmentDescriptor {
        return objc.msgSend(self, "depthAttachment", ?*RenderPassDepthAttachmentDescriptor, .{});
    }

    pub fn setDepthAttachment(self: *@This(), depthAttachment: ?*RenderPassDepthAttachmentDescriptor) void {
        return objc.msgSend(self, "setDepthAttachment:", void, .{depthAttachment});
    }

    pub fn stencilAttachment(self: *@This()) ?*RenderPassStencilAttachmentDescriptor {
        return objc.msgSend(self, "stencilAttachment", ?*RenderPassStencilAttachmentDescriptor, .{});
    }

    pub fn setStencilAttachment(self: *@This(), stencilAttachment: ?*RenderPassStencilAttachmentDescriptor) void {
        return objc.msgSend(self, "setStencilAttachment:", void, .{stencilAttachment});
    }

    pub fn visibilityResultBuffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "visibilityResultBuffer", ?*anyopaque, .{});
    }

    pub fn setVisibilityResultBuffer(self: *@This(), visibilityResultBuffer: ?*anyopaque) void {
        return objc.msgSend(self, "setVisibilityResultBuffer:", void, .{visibilityResultBuffer});
    }

    pub fn renderTargetArrayLength(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "renderTargetArrayLength", objc.NSUInteger, .{});
    }

    pub fn setRenderTargetArrayLength(self: *@This(), renderTargetArrayLength: objc.NSUInteger) void {
        return objc.msgSend(self, "setRenderTargetArrayLength:", void, .{renderTargetArrayLength});
    }

    pub fn imageblockSampleLength(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "imageblockSampleLength", objc.NSUInteger, .{});
    }

    pub fn setImageblockSampleLength(self: *@This(), imageblockSampleLength: objc.NSUInteger) void {
        return objc.msgSend(self, "setImageblockSampleLength:", void, .{imageblockSampleLength});
    }

    pub fn threadgroupMemoryLength(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "threadgroupMemoryLength", objc.NSUInteger, .{});
    }

    pub fn setThreadgroupMemoryLength(self: *@This(), threadgroupMemoryLength: objc.NSUInteger) void {
        return objc.msgSend(self, "setThreadgroupMemoryLength:", void, .{threadgroupMemoryLength});
    }

    pub fn tileWidth(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "tileWidth", objc.NSUInteger, .{});
    }

    pub fn setTileWidth(self: *@This(), tileWidth: objc.NSUInteger) void {
        return objc.msgSend(self, "setTileWidth:", void, .{tileWidth});
    }

    pub fn tileHeight(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "tileHeight", objc.NSUInteger, .{});
    }

    pub fn setTileHeight(self: *@This(), tileHeight: objc.NSUInteger) void {
        return objc.msgSend(self, "setTileHeight:", void, .{tileHeight});
    }

    pub fn defaultRasterSampleCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "defaultRasterSampleCount", objc.NSUInteger, .{});
    }

    pub fn setDefaultRasterSampleCount(self: *@This(), defaultRasterSampleCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setDefaultRasterSampleCount:", void, .{defaultRasterSampleCount});
    }

    pub fn renderTargetWidth(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "renderTargetWidth", objc.NSUInteger, .{});
    }

    pub fn setRenderTargetWidth(self: *@This(), renderTargetWidth: objc.NSUInteger) void {
        return objc.msgSend(self, "setRenderTargetWidth:", void, .{renderTargetWidth});
    }

    pub fn renderTargetHeight(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "renderTargetHeight", objc.NSUInteger, .{});
    }

    pub fn setRenderTargetHeight(self: *@This(), renderTargetHeight: objc.NSUInteger) void {
        return objc.msgSend(self, "setRenderTargetHeight:", void, .{renderTargetHeight});
    }

    pub fn rasterizationRateMap(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "rasterizationRateMap", ?*anyopaque, .{});
    }

    pub fn setRasterizationRateMap(self: *@This(), rasterizationRateMap: ?*anyopaque) void {
        return objc.msgSend(self, "setRasterizationRateMap:", void, .{rasterizationRateMap});
    }

    pub fn sampleBufferAttachments(self: *@This()) ?*RenderPassSampleBufferAttachmentDescriptorArray {
        return objc.msgSend(self, "sampleBufferAttachments", ?*RenderPassSampleBufferAttachmentDescriptorArray, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLBlitPassSampleBufferAttachmentDescriptor?language=objc
pub const BlitPassSampleBufferAttachmentDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLBlitPassSampleBufferAttachmentDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn sampleBuffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "sampleBuffer", ?*anyopaque, .{});
    }

    pub fn setSampleBuffer(self: *@This(), sampleBuffer: ?*anyopaque) void {
        return objc.msgSend(self, "setSampleBuffer:", void, .{sampleBuffer});
    }

    pub fn startOfEncoderSampleIndex(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "startOfEncoderSampleIndex", objc.NSUInteger, .{});
    }

    pub fn setStartOfEncoderSampleIndex(self: *@This(), startOfEncoderSampleIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setStartOfEncoderSampleIndex:", void, .{startOfEncoderSampleIndex});
    }

    pub fn endOfEncoderSampleIndex(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "endOfEncoderSampleIndex", objc.NSUInteger, .{});
    }

    pub fn setEndOfEncoderSampleIndex(self: *@This(), endOfEncoderSampleIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setEndOfEncoderSampleIndex:", void, .{endOfEncoderSampleIndex});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLBlitPassSampleBufferAttachmentDescriptorArray?language=objc
pub const BlitPassSampleBufferAttachmentDescriptorArray = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLBlitPassSampleBufferAttachmentDescriptorArray", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn objectAtIndexedSubscript(self: *@This(), attachmentIndex: objc.NSUInteger) ?*BlitPassSampleBufferAttachmentDescriptor {
        return objc.msgSend(self, "objectAtIndexedSubscript:", ?*BlitPassSampleBufferAttachmentDescriptor, .{attachmentIndex});
    }

    pub fn setObjectAtIndexedSubscript(self: *@This(), attachment: ?*BlitPassSampleBufferAttachmentDescriptor, attachmentIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setObject:atIndexedSubscript:", void, .{attachment, attachmentIndex});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLBlitPassDescriptor?language=objc
pub const BlitPassDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLBlitPassDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn blitPassDescriptor(self: *@This()) ?*BlitPassDescriptor {
        return objc.msgSend(self, "blitPassDescriptor", ?*BlitPassDescriptor, .{});
    }

    pub fn sampleBufferAttachments(self: *@This()) ?*BlitPassSampleBufferAttachmentDescriptorArray {
        return objc.msgSend(self, "sampleBufferAttachments", ?*BlitPassSampleBufferAttachmentDescriptorArray, .{});
    }

};

pub const BlitOption = enum(objc.NSUInteger) {
    None = 0,
    DepthFromDepthStencil = 1,
    StencilFromDepthStencil = 2,
    RowLinearPVRTC = 4,
};

/// https://developer.apple.com/documentation/Metal/MTLBlitCommandEncoder?language=objc
pub const BlitCommandEncoder = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{CommandEncoder, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn synchronizeResource(self: *@This(), resource: ?*anyopaque) void {
        return objc.msgSend(self, "synchronizeResource:", void, .{resource});
    }

    pub fn synchronizeTextureSliceLevel(self: *@This(), texture: ?*anyopaque, slice: objc.NSUInteger, level: objc.NSUInteger) void {
        return objc.msgSend(self, "synchronizeTexture:slice:level:", void, .{texture, slice, level});
    }

    pub fn copyFromTextureSourceSliceSourceLevelSourceOriginSourceSizeToTextureDestinationSliceDestinationLevelDestinationOrigin(self: *@This(), sourceTexture: ?*anyopaque, sourceSlice: objc.NSUInteger, sourceLevel: objc.NSUInteger, sourceOrigin: Origin, sourceSize: Size, destinationTexture: ?*anyopaque, destinationSlice: objc.NSUInteger, destinationLevel: objc.NSUInteger, destinationOrigin: Origin, ) void {
        return objc.msgSend(self, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", void, .{sourceTexture, sourceSlice, sourceLevel, sourceOrigin, sourceSize, destinationTexture, destinationSlice, destinationLevel, destinationOrigin, });
    }

    pub fn copyFromBufferSourceOffsetSourceBytesPerRowSourceBytesPerImageSourceSizeToTextureDestinationSliceDestinationLevelDestinationOrigin(self: *@This(), sourceBuffer: ?*anyopaque, sourceOffset: objc.NSUInteger, sourceBytesPerRow: objc.NSUInteger, sourceBytesPerImage: objc.NSUInteger, sourceSize: Size, destinationTexture: ?*anyopaque, destinationSlice: objc.NSUInteger, destinationLevel: objc.NSUInteger, destinationOrigin: Origin, ) void {
        return objc.msgSend(self, "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", void, .{sourceBuffer, sourceOffset, sourceBytesPerRow, sourceBytesPerImage, sourceSize, destinationTexture, destinationSlice, destinationLevel, destinationOrigin, });
    }

    pub fn copyFromBufferSourceOffsetSourceBytesPerRowSourceBytesPerImageSourceSizeToTextureDestinationSliceDestinationLevelDestinationOriginOptions(self: *@This(), sourceBuffer: ?*anyopaque, sourceOffset: objc.NSUInteger, sourceBytesPerRow: objc.NSUInteger, sourceBytesPerImage: objc.NSUInteger, sourceSize: Size, destinationTexture: ?*anyopaque, destinationSlice: objc.NSUInteger, destinationLevel: objc.NSUInteger, destinationOrigin: Origin, options: BlitOption, ) void {
        return objc.msgSend(self, "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:", void, .{sourceBuffer, sourceOffset, sourceBytesPerRow, sourceBytesPerImage, sourceSize, destinationTexture, destinationSlice, destinationLevel, destinationOrigin, options, });
    }

    pub fn copyFromTextureSourceSliceSourceLevelSourceOriginSourceSizeToBufferDestinationOffsetDestinationBytesPerRowDestinationBytesPerImage(self: *@This(), sourceTexture: ?*anyopaque, sourceSlice: objc.NSUInteger, sourceLevel: objc.NSUInteger, sourceOrigin: Origin, sourceSize: Size, destinationBuffer: ?*anyopaque, destinationOffset: objc.NSUInteger, destinationBytesPerRow: objc.NSUInteger, destinationBytesPerImage: objc.NSUInteger, ) void {
        return objc.msgSend(self, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:", void, .{sourceTexture, sourceSlice, sourceLevel, sourceOrigin, sourceSize, destinationBuffer, destinationOffset, destinationBytesPerRow, destinationBytesPerImage, });
    }

    pub fn copyFromTextureSourceSliceSourceLevelSourceOriginSourceSizeToBufferDestinationOffsetDestinationBytesPerRowDestinationBytesPerImageOptions(self: *@This(), sourceTexture: ?*anyopaque, sourceSlice: objc.NSUInteger, sourceLevel: objc.NSUInteger, sourceOrigin: Origin, sourceSize: Size, destinationBuffer: ?*anyopaque, destinationOffset: objc.NSUInteger, destinationBytesPerRow: objc.NSUInteger, destinationBytesPerImage: objc.NSUInteger, options: BlitOption, ) void {
        return objc.msgSend(self, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:options:", void, .{sourceTexture, sourceSlice, sourceLevel, sourceOrigin, sourceSize, destinationBuffer, destinationOffset, destinationBytesPerRow, destinationBytesPerImage, options, });
    }

    pub fn generateMipmapsForTexture(self: *@This(), texture: ?*anyopaque) void {
        return objc.msgSend(self, "generateMipmapsForTexture:", void, .{texture});
    }

    pub fn fillBufferRangeValue(self: *@This(), buffer: ?*anyopaque, range: ns.Range, value: objc.uint8_t) void {
        return objc.msgSend(self, "fillBuffer:range:value:", void, .{buffer, range, value});
    }

    pub fn copyFromTextureSourceSliceSourceLevelToTextureDestinationSliceDestinationLevelSliceCountLevelCount(self: *@This(), sourceTexture: ?*anyopaque, sourceSlice: objc.NSUInteger, sourceLevel: objc.NSUInteger, destinationTexture: ?*anyopaque, destinationSlice: objc.NSUInteger, destinationLevel: objc.NSUInteger, sliceCount: objc.NSUInteger, levelCount: objc.NSUInteger, ) void {
        return objc.msgSend(self, "copyFromTexture:sourceSlice:sourceLevel:toTexture:destinationSlice:destinationLevel:sliceCount:levelCount:", void, .{sourceTexture, sourceSlice, sourceLevel, destinationTexture, destinationSlice, destinationLevel, sliceCount, levelCount, });
    }

    pub fn copyFromTextureToTexture(self: *@This(), sourceTexture: ?*anyopaque, destinationTexture: ?*anyopaque) void {
        return objc.msgSend(self, "copyFromTexture:toTexture:", void, .{sourceTexture, destinationTexture});
    }

    pub fn copyFromBufferSourceOffsetToBufferDestinationOffsetSize(self: *@This(), sourceBuffer: ?*anyopaque, sourceOffset: objc.NSUInteger, destinationBuffer: ?*anyopaque, destinationOffset: objc.NSUInteger, size: objc.NSUInteger, ) void {
        return objc.msgSend(self, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", void, .{sourceBuffer, sourceOffset, destinationBuffer, destinationOffset, size, });
    }

    pub fn updateFence(self: *@This(), fence: ?*anyopaque) void {
        return objc.msgSend(self, "updateFence:", void, .{fence});
    }

    pub fn waitForFence(self: *@This(), fence: ?*anyopaque) void {
        return objc.msgSend(self, "waitForFence:", void, .{fence});
    }

    pub fn getTextureAccessCountersRegionMipLevelSliceResetCountersCountersBufferCountersBufferOffset(self: *@This(), texture: ?*anyopaque, region: Region, mipLevel: objc.NSUInteger, slice: objc.NSUInteger, resetCounters: objc.BOOL, countersBuffer: ?*anyopaque, countersBufferOffset: objc.NSUInteger, ) void {
        return objc.msgSend(self, "getTextureAccessCounters:region:mipLevel:slice:resetCounters:countersBuffer:countersBufferOffset:", void, .{texture, region, mipLevel, slice, resetCounters, countersBuffer, countersBufferOffset, });
    }

    pub fn resetTextureAccessCountersRegionMipLevelSlice(self: *@This(), texture: ?*anyopaque, region: Region, mipLevel: objc.NSUInteger, slice: objc.NSUInteger, ) void {
        return objc.msgSend(self, "resetTextureAccessCounters:region:mipLevel:slice:", void, .{texture, region, mipLevel, slice, });
    }

    pub fn optimizeContentsForGPUAccess(self: *@This(), texture: ?*anyopaque) void {
        return objc.msgSend(self, "optimizeContentsForGPUAccess:", void, .{texture});
    }

    pub fn optimizeContentsForGPUAccessSliceLevel(self: *@This(), texture: ?*anyopaque, slice: objc.NSUInteger, level: objc.NSUInteger) void {
        return objc.msgSend(self, "optimizeContentsForGPUAccess:slice:level:", void, .{texture, slice, level});
    }

    pub fn optimizeContentsForCPUAccess(self: *@This(), texture: ?*anyopaque) void {
        return objc.msgSend(self, "optimizeContentsForCPUAccess:", void, .{texture});
    }

    pub fn optimizeContentsForCPUAccessSliceLevel(self: *@This(), texture: ?*anyopaque, slice: objc.NSUInteger, level: objc.NSUInteger) void {
        return objc.msgSend(self, "optimizeContentsForCPUAccess:slice:level:", void, .{texture, slice, level});
    }

    pub fn resetCommandsInBufferWithRange(self: *@This(), buffer: ?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "resetCommandsInBuffer:withRange:", void, .{buffer, range});
    }

    pub fn copyIndirectCommandBufferSourceRangeDestinationDestinationIndex(self: *@This(), source: ?*anyopaque, sourceRange: ns.Range, destination: ?*anyopaque, destinationIndex: objc.NSUInteger, ) void {
        return objc.msgSend(self, "copyIndirectCommandBuffer:sourceRange:destination:destinationIndex:", void, .{source, sourceRange, destination, destinationIndex, });
    }

    pub fn optimizeIndirectCommandBufferWithRange(self: *@This(), indirectCommandBuffer: ?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "optimizeIndirectCommandBuffer:withRange:", void, .{indirectCommandBuffer, range});
    }

    pub fn sampleCountersInBufferAtSampleIndexWithBarrier(self: *@This(), sampleBuffer: ?*anyopaque, sampleIndex: objc.NSUInteger, barrier: objc.BOOL) void {
        return objc.msgSend(self, "sampleCountersInBuffer:atSampleIndex:withBarrier:", void, .{sampleBuffer, sampleIndex, barrier});
    }

    pub fn resolveCountersInRangeDestinationBufferDestinationOffset(self: *@This(), sampleBuffer: ?*anyopaque, range: ns.Range, destinationBuffer: ?*anyopaque, destinationOffset: objc.NSUInteger, ) void {
        return objc.msgSend(self, "resolveCounters:inRange:destinationBuffer:destinationOffset:", void, .{sampleBuffer, range, destinationBuffer, destinationOffset, });
    }

};

pub const CommandBufferStatus = enum(objc.NSUInteger) {
    NotEnqueued = 0,
    Enqueued = 1,
    Committed = 2,
    Scheduled = 3,
    Completed = 4,
    Error = 5,
};

pub const CommandBufferError = enum(objc.NSUInteger) {
    None = 0,
    Internal = 1,
    Timeout = 2,
    PageFault = 3,
    Blacklisted = 4,
    AccessRevoked = 4,
    NotPermitted = 7,
    OutOfMemory = 8,
    InvalidResource = 9,
    Memoryless = 10,
    DeviceRemoved = 11,
    StackOverflow = 12,
};

pub const CommandBufferErrorOption = enum(objc.NSUInteger) {
    None = 0,
    EncoderExecutionStatus = 1,
};

pub const CommandEncoderErrorState = enum(objc.NSInteger) {
    Unknown = 0,
    Completed = 1,
    Affected = 2,
    Pending = 3,
    Faulted = 4,
};

/// https://developer.apple.com/documentation/Metal/MTLCommandBufferDescriptor?language=objc
pub const CommandBufferDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLCommandBufferDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn retainedReferences(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "retainedReferences", objc.BOOL, .{});
    }

    pub fn setRetainedReferences(self: *@This(), retainedReferences: objc.BOOL) void {
        return objc.msgSend(self, "setRetainedReferences:", void, .{retainedReferences});
    }

    pub fn errorOptions(self: *@This()) CommandBufferErrorOption {
        return objc.msgSend(self, "errorOptions", CommandBufferErrorOption, .{});
    }

    pub fn setErrorOptions(self: *@This(), errorOptions: CommandBufferErrorOption) void {
        return objc.msgSend(self, "setErrorOptions:", void, .{errorOptions});
    }

    pub fn logState(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "logState", ?*anyopaque, .{});
    }

    pub fn setLogState(self: *@This(), logState: ?*anyopaque) void {
        return objc.msgSend(self, "setLogState:", void, .{logState});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLCommandBufferEncoderInfo?language=objc
pub const CommandBufferEncoderInfo = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn debugSignposts(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "debugSignposts", ?*anyopaque, .{});
    }

    pub fn errorState(self: *@This()) CommandEncoderErrorState {
        return objc.msgSend(self, "errorState", CommandEncoderErrorState, .{});
    }

};

pub const CommandBufferHandler = *const fn(?*anyopaque) callconv(.C) void;

pub const DispatchType = enum(objc.NSUInteger) {
    Serial = 0,
    Concurrent = 1,
};

/// https://developer.apple.com/documentation/Metal/MTLCommandBuffer?language=objc
pub const CommandBuffer = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn enqueue(self: *@This()) void {
        return objc.msgSend(self, "enqueue", void, .{});
    }

    pub fn commit(self: *@This()) void {
        return objc.msgSend(self, "commit", void, .{});
    }

    pub fn addScheduledHandler(self: *@This(), block: CommandBufferHandler) void {
        return objc.msgSend(self, "addScheduledHandler:", void, .{block});
    }

    pub fn presentDrawable(self: *@This(), drawable: ?*anyopaque) void {
        return objc.msgSend(self, "presentDrawable:", void, .{drawable});
    }

    pub fn presentDrawableAtTime(self: *@This(), drawable: ?*anyopaque, presentationTime: cf.TimeInterval) void {
        return objc.msgSend(self, "presentDrawable:atTime:", void, .{drawable, presentationTime});
    }

    pub fn presentDrawableAfterMinimumDuration(self: *@This(), drawable: ?*anyopaque, duration: cf.TimeInterval) void {
        return objc.msgSend(self, "presentDrawable:afterMinimumDuration:", void, .{drawable, duration});
    }

    pub fn waitUntilScheduled(self: *@This()) void {
        return objc.msgSend(self, "waitUntilScheduled", void, .{});
    }

    pub fn addCompletedHandler(self: *@This(), block: CommandBufferHandler) void {
        return objc.msgSend(self, "addCompletedHandler:", void, .{block});
    }

    pub fn waitUntilCompleted(self: *@This()) void {
        return objc.msgSend(self, "waitUntilCompleted", void, .{});
    }

    pub fn blitCommandEncoder(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "blitCommandEncoder", ?*anyopaque, .{});
    }

    pub fn renderCommandEncoderWithDescriptor(self: *@This(), renderPassDescriptor: ?*RenderPassDescriptor) ?*anyopaque {
        return objc.msgSend(self, "renderCommandEncoderWithDescriptor:", ?*anyopaque, .{renderPassDescriptor});
    }

    pub fn computeCommandEncoderWithDescriptor(self: *@This(), computePassDescriptor: ?*ComputePassDescriptor) ?*anyopaque {
        return objc.msgSend(self, "computeCommandEncoderWithDescriptor:", ?*anyopaque, .{computePassDescriptor});
    }

    pub fn blitCommandEncoderWithDescriptor(self: *@This(), blitPassDescriptor: ?*BlitPassDescriptor) ?*anyopaque {
        return objc.msgSend(self, "blitCommandEncoderWithDescriptor:", ?*anyopaque, .{blitPassDescriptor});
    }

    pub fn computeCommandEncoder(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "computeCommandEncoder", ?*anyopaque, .{});
    }

    pub fn computeCommandEncoderWithDispatchType(self: *@This(), dispatchType: DispatchType) ?*anyopaque {
        return objc.msgSend(self, "computeCommandEncoderWithDispatchType:", ?*anyopaque, .{dispatchType});
    }

    pub fn encodeWaitForEventValue(self: *@This(), event: ?*anyopaque, value: objc.uint64_t) void {
        return objc.msgSend(self, "encodeWaitForEvent:value:", void, .{event, value});
    }

    pub fn encodeSignalEventValue(self: *@This(), event: ?*anyopaque, value: objc.uint64_t) void {
        return objc.msgSend(self, "encodeSignalEvent:value:", void, .{event, value});
    }

    pub fn parallelRenderCommandEncoderWithDescriptor(self: *@This(), renderPassDescriptor: ?*RenderPassDescriptor) ?*anyopaque {
        return objc.msgSend(self, "parallelRenderCommandEncoderWithDescriptor:", ?*anyopaque, .{renderPassDescriptor});
    }

    pub fn resourceStateCommandEncoder(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "resourceStateCommandEncoder", ?*anyopaque, .{});
    }

    pub fn resourceStateCommandEncoderWithDescriptor(self: *@This(), resourceStatePassDescriptor: ?*ResourceStatePassDescriptor) ?*anyopaque {
        return objc.msgSend(self, "resourceStateCommandEncoderWithDescriptor:", ?*anyopaque, .{resourceStatePassDescriptor});
    }

    pub fn accelerationStructureCommandEncoder(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "accelerationStructureCommandEncoder", ?*anyopaque, .{});
    }

    pub fn accelerationStructureCommandEncoderWithDescriptor(self: *@This(), descriptor: ?*AccelerationStructurePassDescriptor) ?*anyopaque {
        return objc.msgSend(self, "accelerationStructureCommandEncoderWithDescriptor:", ?*anyopaque, .{descriptor});
    }

    pub fn pushDebugGroup(self: *@This(), string: ?*ns.String) void {
        return objc.msgSend(self, "pushDebugGroup:", void, .{string});
    }

    pub fn popDebugGroup(self: *@This()) void {
        return objc.msgSend(self, "popDebugGroup", void, .{});
    }

    pub fn useResidencySet(self: *@This(), residencySet: ?*anyopaque) void {
        return objc.msgSend(self, "useResidencySet:", void, .{residencySet});
    }

    pub fn useResidencySetsCount(self: *@This(), residencySets: ?*?*anyopaque, count: objc.NSUInteger) void {
        return objc.msgSend(self, "useResidencySets:count:", void, .{residencySets, count});
    }

    pub fn device(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "device", ?*anyopaque, .{});
    }

    pub fn commandQueue(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "commandQueue", ?*anyopaque, .{});
    }

    pub fn retainedReferences(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "retainedReferences", objc.BOOL, .{});
    }

    pub fn errorOptions(self: *@This()) CommandBufferErrorOption {
        return objc.msgSend(self, "errorOptions", CommandBufferErrorOption, .{});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*ns.String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

    pub fn kernelStartTime(self: *@This()) cf.TimeInterval {
        return objc.msgSend(self, "kernelStartTime", cf.TimeInterval, .{});
    }

    pub fn kernelEndTime(self: *@This()) cf.TimeInterval {
        return objc.msgSend(self, "kernelEndTime", cf.TimeInterval, .{});
    }

    pub fn logs(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "logs", ?*anyopaque, .{});
    }

    pub fn GPUStartTime(self: *@This()) cf.TimeInterval {
        return objc.msgSend(self, "GPUStartTime", cf.TimeInterval, .{});
    }

    pub fn GPUEndTime(self: *@This()) cf.TimeInterval {
        return objc.msgSend(self, "GPUEndTime", cf.TimeInterval, .{});
    }

    pub fn status(self: *@This()) CommandBufferStatus {
        return objc.msgSend(self, "status", CommandBufferStatus, .{});
    }

    pub fn @"error"(self: *@This()) ?*ns.Error {
        return objc.msgSend(self, "error", ?*ns.Error, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLComputePassSampleBufferAttachmentDescriptor?language=objc
pub const ComputePassSampleBufferAttachmentDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLComputePassSampleBufferAttachmentDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn sampleBuffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "sampleBuffer", ?*anyopaque, .{});
    }

    pub fn setSampleBuffer(self: *@This(), sampleBuffer: ?*anyopaque) void {
        return objc.msgSend(self, "setSampleBuffer:", void, .{sampleBuffer});
    }

    pub fn startOfEncoderSampleIndex(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "startOfEncoderSampleIndex", objc.NSUInteger, .{});
    }

    pub fn setStartOfEncoderSampleIndex(self: *@This(), startOfEncoderSampleIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setStartOfEncoderSampleIndex:", void, .{startOfEncoderSampleIndex});
    }

    pub fn endOfEncoderSampleIndex(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "endOfEncoderSampleIndex", objc.NSUInteger, .{});
    }

    pub fn setEndOfEncoderSampleIndex(self: *@This(), endOfEncoderSampleIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setEndOfEncoderSampleIndex:", void, .{endOfEncoderSampleIndex});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLComputePassSampleBufferAttachmentDescriptorArray?language=objc
pub const ComputePassSampleBufferAttachmentDescriptorArray = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLComputePassSampleBufferAttachmentDescriptorArray", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn objectAtIndexedSubscript(self: *@This(), attachmentIndex: objc.NSUInteger) ?*ComputePassSampleBufferAttachmentDescriptor {
        return objc.msgSend(self, "objectAtIndexedSubscript:", ?*ComputePassSampleBufferAttachmentDescriptor, .{attachmentIndex});
    }

    pub fn setObjectAtIndexedSubscript(self: *@This(), attachment: ?*ComputePassSampleBufferAttachmentDescriptor, attachmentIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setObject:atIndexedSubscript:", void, .{attachment, attachmentIndex});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLComputePassDescriptor?language=objc
pub const ComputePassDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLComputePassDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn computePassDescriptor(self: *@This()) ?*ComputePassDescriptor {
        return objc.msgSend(self, "computePassDescriptor", ?*ComputePassDescriptor, .{});
    }

    pub fn dispatchType(self: *@This()) DispatchType {
        return objc.msgSend(self, "dispatchType", DispatchType, .{});
    }

    pub fn setDispatchType(self: *@This(), dispatchType: DispatchType) void {
        return objc.msgSend(self, "setDispatchType:", void, .{dispatchType});
    }

    pub fn sampleBufferAttachments(self: *@This()) ?*ComputePassSampleBufferAttachmentDescriptorArray {
        return objc.msgSend(self, "sampleBufferAttachments", ?*ComputePassSampleBufferAttachmentDescriptorArray, .{});
    }

};

pub const DispatchThreadgroupsIndirectArguments = extern struct {
    threadgroupsPerGrid: [3] objc.uint32_t,
};

pub const StageInRegionIndirectArguments = extern struct {
    stageInOrigin: [3] objc.uint32_t,
    stageInSize: [3] objc.uint32_t,
};

/// https://developer.apple.com/documentation/Metal/MTLComputeCommandEncoder?language=objc
pub const ComputeCommandEncoder = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{CommandEncoder, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn setComputePipelineState(self: *@This(), state: ?*anyopaque) void {
        return objc.msgSend(self, "setComputePipelineState:", void, .{state});
    }

    pub fn setBytesLengthAtIndex(self: *@This(), bytes: ?*anyopaque, length: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setBytes:length:atIndex:", void, .{bytes, length, index});
    }

    pub fn setBufferOffsetAtIndex(self: *@This(), buffer: ?*anyopaque, offset: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setBuffer:offset:atIndex:", void, .{buffer, offset, index});
    }

    pub fn setBufferOffsetAtIndex(self: *@This(), offset: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setBufferOffset:atIndex:", void, .{offset, index});
    }

    pub fn setBuffersOffsetsWithRange(self: *@This(), buffers: ?*?*anyopaque, offsets: ?*objc.NSUInteger, range: ns.Range) void {
        return objc.msgSend(self, "setBuffers:offsets:withRange:", void, .{buffers, offsets, range});
    }

    pub fn setBufferOffsetAttributeStrideAtIndex(self: *@This(), buffer: ?*anyopaque, offset: objc.NSUInteger, stride: objc.NSUInteger, index: objc.NSUInteger, ) void {
        return objc.msgSend(self, "setBuffer:offset:attributeStride:atIndex:", void, .{buffer, offset, stride, index, });
    }

    pub fn setBuffersOffsetsAttributeStridesWithRange(self: *@This(), buffers: ?*?*anyopaque, offsets: ?*objc.NSUInteger, strides: ?*objc.NSUInteger, range: ns.Range, ) void {
        return objc.msgSend(self, "setBuffers:offsets:attributeStrides:withRange:", void, .{buffers, offsets, strides, range, });
    }

    pub fn setBufferOffsetAttributeStrideAtIndex(self: *@This(), offset: objc.NSUInteger, stride: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setBufferOffset:attributeStride:atIndex:", void, .{offset, stride, index});
    }

    pub fn setBytesLengthAttributeStrideAtIndex(self: *@This(), bytes: ?*anyopaque, length: objc.NSUInteger, stride: objc.NSUInteger, index: objc.NSUInteger, ) void {
        return objc.msgSend(self, "setBytes:length:attributeStride:atIndex:", void, .{bytes, length, stride, index, });
    }

    pub fn setVisibleFunctionTableAtBufferIndex(self: *@This(), visibleFunctionTable: ?*anyopaque, bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setVisibleFunctionTable:atBufferIndex:", void, .{visibleFunctionTable, bufferIndex});
    }

    pub fn setVisibleFunctionTablesWithBufferRange(self: *@This(), visibleFunctionTables: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setVisibleFunctionTables:withBufferRange:", void, .{visibleFunctionTables, range});
    }

    pub fn setIntersectionFunctionTableAtBufferIndex(self: *@This(), intersectionFunctionTable: ?*anyopaque, bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setIntersectionFunctionTable:atBufferIndex:", void, .{intersectionFunctionTable, bufferIndex});
    }

    pub fn setIntersectionFunctionTablesWithBufferRange(self: *@This(), intersectionFunctionTables: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setIntersectionFunctionTables:withBufferRange:", void, .{intersectionFunctionTables, range});
    }

    pub fn setAccelerationStructureAtBufferIndex(self: *@This(), accelerationStructure: ?*anyopaque, bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setAccelerationStructure:atBufferIndex:", void, .{accelerationStructure, bufferIndex});
    }

    pub fn setTextureAtIndex(self: *@This(), texture: ?*anyopaque, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setTexture:atIndex:", void, .{texture, index});
    }

    pub fn setTexturesWithRange(self: *@This(), textures: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setTextures:withRange:", void, .{textures, range});
    }

    pub fn setSamplerStateAtIndex(self: *@This(), sampler: ?*anyopaque, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setSamplerState:atIndex:", void, .{sampler, index});
    }

    pub fn setSamplerStatesWithRange(self: *@This(), samplers: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setSamplerStates:withRange:", void, .{samplers, range});
    }

    pub fn setSamplerStateLodMinClampLodMaxClampAtIndex(self: *@This(), sampler: ?*anyopaque, lodMinClamp: f32, lodMaxClamp: f32, index: objc.NSUInteger, ) void {
        return objc.msgSend(self, "setSamplerState:lodMinClamp:lodMaxClamp:atIndex:", void, .{sampler, lodMinClamp, lodMaxClamp, index, });
    }

    pub fn setSamplerStatesLodMinClampsLodMaxClampsWithRange(self: *@This(), samplers: ?*?*anyopaque, lodMinClamps: ?*f32, lodMaxClamps: ?*f32, range: ns.Range, ) void {
        return objc.msgSend(self, "setSamplerStates:lodMinClamps:lodMaxClamps:withRange:", void, .{samplers, lodMinClamps, lodMaxClamps, range, });
    }

    pub fn setThreadgroupMemoryLengthAtIndex(self: *@This(), length: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setThreadgroupMemoryLength:atIndex:", void, .{length, index});
    }

    pub fn setImageblockWidthHeight(self: *@This(), width: objc.NSUInteger, height: objc.NSUInteger) void {
        return objc.msgSend(self, "setImageblockWidth:height:", void, .{width, height});
    }

    pub fn setStageInRegion(self: *@This(), region: Region) void {
        return objc.msgSend(self, "setStageInRegion:", void, .{region});
    }

    pub fn setStageInRegionWithIndirectBufferIndirectBufferOffset(self: *@This(), indirectBuffer: ?*anyopaque, indirectBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(self, "setStageInRegionWithIndirectBuffer:indirectBufferOffset:", void, .{indirectBuffer, indirectBufferOffset});
    }

    pub fn dispatchThreadgroupsThreadsPerThreadgroup(self: *@This(), threadgroupsPerGrid: Size, threadsPerThreadgroup: Size) void {
        return objc.msgSend(self, "dispatchThreadgroups:threadsPerThreadgroup:", void, .{threadgroupsPerGrid, threadsPerThreadgroup});
    }

    pub fn dispatchThreadgroupsWithIndirectBufferIndirectBufferOffsetThreadsPerThreadgroup(self: *@This(), indirectBuffer: ?*anyopaque, indirectBufferOffset: objc.NSUInteger, threadsPerThreadgroup: Size) void {
        return objc.msgSend(self, "dispatchThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerThreadgroup:", void, .{indirectBuffer, indirectBufferOffset, threadsPerThreadgroup});
    }

    pub fn dispatchThreadsThreadsPerThreadgroup(self: *@This(), threadsPerGrid: Size, threadsPerThreadgroup: Size) void {
        return objc.msgSend(self, "dispatchThreads:threadsPerThreadgroup:", void, .{threadsPerGrid, threadsPerThreadgroup});
    }

    pub fn updateFence(self: *@This(), fence: ?*anyopaque) void {
        return objc.msgSend(self, "updateFence:", void, .{fence});
    }

    pub fn waitForFence(self: *@This(), fence: ?*anyopaque) void {
        return objc.msgSend(self, "waitForFence:", void, .{fence});
    }

    pub fn useResourceUsage(self: *@This(), resource: ?*anyopaque, usage: ResourceUsage) void {
        return objc.msgSend(self, "useResource:usage:", void, .{resource, usage});
    }

    pub fn useResourcesCountUsage(self: *@This(), resources: ?*?*anyopaque, count: objc.NSUInteger, usage: ResourceUsage) void {
        return objc.msgSend(self, "useResources:count:usage:", void, .{resources, count, usage});
    }

    pub fn useHeap(self: *@This(), heap: ?*anyopaque) void {
        return objc.msgSend(self, "useHeap:", void, .{heap});
    }

    pub fn useHeapsCount(self: *@This(), heaps: ?*?*anyopaque, count: objc.NSUInteger) void {
        return objc.msgSend(self, "useHeaps:count:", void, .{heaps, count});
    }

    pub fn executeCommandsInBufferWithRange(self: *@This(), indirectCommandBuffer: ?*anyopaque, executionRange: ns.Range) void {
        return objc.msgSend(self, "executeCommandsInBuffer:withRange:", void, .{indirectCommandBuffer, executionRange});
    }

    pub fn executeCommandsInBufferIndirectBufferIndirectBufferOffset(self: *@This(), indirectCommandbuffer: ?*anyopaque, indirectRangeBuffer: ?*anyopaque, indirectBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(self, "executeCommandsInBuffer:indirectBuffer:indirectBufferOffset:", void, .{indirectCommandbuffer, indirectRangeBuffer, indirectBufferOffset});
    }

    pub fn memoryBarrierWithScope(self: *@This(), scope: BarrierScope) void {
        return objc.msgSend(self, "memoryBarrierWithScope:", void, .{scope});
    }

    pub fn memoryBarrierWithResourcesCount(self: *@This(), resources: ?*?*anyopaque, count: objc.NSUInteger) void {
        return objc.msgSend(self, "memoryBarrierWithResources:count:", void, .{resources, count});
    }

    pub fn sampleCountersInBufferAtSampleIndexWithBarrier(self: *@This(), sampleBuffer: ?*anyopaque, sampleIndex: objc.NSUInteger, barrier: objc.BOOL) void {
        return objc.msgSend(self, "sampleCountersInBuffer:atSampleIndex:withBarrier:", void, .{sampleBuffer, sampleIndex, barrier});
    }

    pub fn dispatchType(self: *@This()) DispatchType {
        return objc.msgSend(self, "dispatchType", DispatchType, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLCommandQueue?language=objc
pub const CommandQueue = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn commandBuffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "commandBuffer", ?*anyopaque, .{});
    }

    pub fn commandBufferWithDescriptor(self: *@This(), descriptor: ?*CommandBufferDescriptor) ?*anyopaque {
        return objc.msgSend(self, "commandBufferWithDescriptor:", ?*anyopaque, .{descriptor});
    }

    pub fn commandBufferWithUnretainedReferences(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "commandBufferWithUnretainedReferences", ?*anyopaque, .{});
    }

    pub fn insertDebugCaptureBoundary(self: *@This()) void {
        return objc.msgSend(self, "insertDebugCaptureBoundary", void, .{});
    }

    pub fn addResidencySet(self: *@This(), residencySet: ?*anyopaque) void {
        return objc.msgSend(self, "addResidencySet:", void, .{residencySet});
    }

    pub fn addResidencySetsCount(self: *@This(), residencySets: ?*?*anyopaque, count: objc.NSUInteger) void {
        return objc.msgSend(self, "addResidencySets:count:", void, .{residencySets, count});
    }

    pub fn removeResidencySet(self: *@This(), residencySet: ?*anyopaque) void {
        return objc.msgSend(self, "removeResidencySet:", void, .{residencySet});
    }

    pub fn removeResidencySetsCount(self: *@This(), residencySets: ?*?*anyopaque, count: objc.NSUInteger) void {
        return objc.msgSend(self, "removeResidencySets:count:", void, .{residencySets, count});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*ns.String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

    pub fn device(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "device", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLCommandQueueDescriptor?language=objc
pub const CommandQueueDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLCommandQueueDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn maxCommandBufferCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxCommandBufferCount", objc.NSUInteger, .{});
    }

    pub fn setMaxCommandBufferCount(self: *@This(), maxCommandBufferCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaxCommandBufferCount:", void, .{maxCommandBufferCount});
    }

    pub fn logState(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "logState", ?*anyopaque, .{});
    }

    pub fn setLogState(self: *@This(), logState: ?*anyopaque) void {
        return objc.msgSend(self, "setLogState:", void, .{logState});
    }

};

pub const NSDeviceCertification = objc.NSInteger;

pub const NSProcessPerformanceProfile = objc.NSInteger;

pub const CompareFunction = enum(objc.NSUInteger) {
    Never = 0,
    Less = 1,
    Equal = 2,
    LessEqual = 3,
    Greater = 4,
    NotEqual = 5,
    GreaterEqual = 6,
    Always = 7,
};

pub const StencilOperation = enum(objc.NSUInteger) {
    Keep = 0,
    Zero = 1,
    Replace = 2,
    IncrementClamp = 3,
    DecrementClamp = 4,
    Invert = 5,
    IncrementWrap = 6,
    DecrementWrap = 7,
};

/// https://developer.apple.com/documentation/Metal/MTLStencilDescriptor?language=objc
pub const StencilDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLStencilDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn stencilCompareFunction(self: *@This()) CompareFunction {
        return objc.msgSend(self, "stencilCompareFunction", CompareFunction, .{});
    }

    pub fn setStencilCompareFunction(self: *@This(), stencilCompareFunction: CompareFunction) void {
        return objc.msgSend(self, "setStencilCompareFunction:", void, .{stencilCompareFunction});
    }

    pub fn stencilFailureOperation(self: *@This()) StencilOperation {
        return objc.msgSend(self, "stencilFailureOperation", StencilOperation, .{});
    }

    pub fn setStencilFailureOperation(self: *@This(), stencilFailureOperation: StencilOperation) void {
        return objc.msgSend(self, "setStencilFailureOperation:", void, .{stencilFailureOperation});
    }

    pub fn depthFailureOperation(self: *@This()) StencilOperation {
        return objc.msgSend(self, "depthFailureOperation", StencilOperation, .{});
    }

    pub fn setDepthFailureOperation(self: *@This(), depthFailureOperation: StencilOperation) void {
        return objc.msgSend(self, "setDepthFailureOperation:", void, .{depthFailureOperation});
    }

    pub fn depthStencilPassOperation(self: *@This()) StencilOperation {
        return objc.msgSend(self, "depthStencilPassOperation", StencilOperation, .{});
    }

    pub fn setDepthStencilPassOperation(self: *@This(), depthStencilPassOperation: StencilOperation) void {
        return objc.msgSend(self, "setDepthStencilPassOperation:", void, .{depthStencilPassOperation});
    }

    pub fn readMask(self: *@This()) objc.uint32_t {
        return objc.msgSend(self, "readMask", objc.uint32_t, .{});
    }

    pub fn setReadMask(self: *@This(), readMask: objc.uint32_t) void {
        return objc.msgSend(self, "setReadMask:", void, .{readMask});
    }

    pub fn writeMask(self: *@This()) objc.uint32_t {
        return objc.msgSend(self, "writeMask", objc.uint32_t, .{});
    }

    pub fn setWriteMask(self: *@This(), writeMask: objc.uint32_t) void {
        return objc.msgSend(self, "setWriteMask:", void, .{writeMask});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLDepthStencilDescriptor?language=objc
pub const DepthStencilDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLDepthStencilDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn depthCompareFunction(self: *@This()) CompareFunction {
        return objc.msgSend(self, "depthCompareFunction", CompareFunction, .{});
    }

    pub fn setDepthCompareFunction(self: *@This(), depthCompareFunction: CompareFunction) void {
        return objc.msgSend(self, "setDepthCompareFunction:", void, .{depthCompareFunction});
    }

    pub fn isDepthWriteEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isDepthWriteEnabled", objc.BOOL, .{});
    }

    pub fn setDepthWriteEnabled(self: *@This(), depthWriteEnabled: objc.BOOL) void {
        return objc.msgSend(self, "setDepthWriteEnabled:", void, .{depthWriteEnabled});
    }

    pub fn frontFaceStencil(self: *@This()) ?*StencilDescriptor {
        return objc.msgSend(self, "frontFaceStencil", ?*StencilDescriptor, .{});
    }

    pub fn setFrontFaceStencil(self: *@This(), frontFaceStencil: ?*StencilDescriptor) void {
        return objc.msgSend(self, "setFrontFaceStencil:", void, .{frontFaceStencil});
    }

    pub fn backFaceStencil(self: *@This()) ?*StencilDescriptor {
        return objc.msgSend(self, "backFaceStencil", ?*StencilDescriptor, .{});
    }

    pub fn setBackFaceStencil(self: *@This(), backFaceStencil: ?*StencilDescriptor) void {
        return objc.msgSend(self, "setBackFaceStencil:", void, .{backFaceStencil});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*ns.String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLDepthStencilState?language=objc
pub const DepthStencilState = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn device(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "device", ?*anyopaque, .{});
    }

};

pub const DrawablePresentedHandler = *const fn(?*anyopaque) callconv(.C) void;

/// https://developer.apple.com/documentation/Metal/MTLDrawable?language=objc
pub const Drawable = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn present(self: *@This()) void {
        return objc.msgSend(self, "present", void, .{});
    }

    pub fn presentAtTime(self: *@This(), presentationTime: cf.TimeInterval) void {
        return objc.msgSend(self, "presentAtTime:", void, .{presentationTime});
    }

    pub fn presentAfterMinimumDuration(self: *@This(), duration: cf.TimeInterval) void {
        return objc.msgSend(self, "presentAfterMinimumDuration:", void, .{duration});
    }

    pub fn addPresentedHandler(self: *@This(), block: DrawablePresentedHandler) void {
        return objc.msgSend(self, "addPresentedHandler:", void, .{block});
    }

    pub fn presentedTime(self: *@This()) cf.TimeInterval {
        return objc.msgSend(self, "presentedTime", cf.TimeInterval, .{});
    }

    pub fn drawableID(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "drawableID", objc.NSUInteger, .{});
    }

};

pub const VertexFormat = enum(objc.NSUInteger) {
    Invalid = 0,
    UChar2 = 1,
    UChar3 = 2,
    UChar4 = 3,
    Char2 = 4,
    Char3 = 5,
    Char4 = 6,
    UChar2Normalized = 7,
    UChar3Normalized = 8,
    UChar4Normalized = 9,
    Char2Normalized = 10,
    Char3Normalized = 11,
    Char4Normalized = 12,
    UShort2 = 13,
    UShort3 = 14,
    UShort4 = 15,
    Short2 = 16,
    Short3 = 17,
    Short4 = 18,
    UShort2Normalized = 19,
    UShort3Normalized = 20,
    UShort4Normalized = 21,
    Short2Normalized = 22,
    Short3Normalized = 23,
    Short4Normalized = 24,
    Half2 = 25,
    Half3 = 26,
    Half4 = 27,
    Float = 28,
    Float2 = 29,
    Float3 = 30,
    Float4 = 31,
    Int = 32,
    Int2 = 33,
    Int3 = 34,
    Int4 = 35,
    UInt = 36,
    UInt2 = 37,
    UInt3 = 38,
    UInt4 = 39,
    Int1010102Normalized = 40,
    UInt1010102Normalized = 41,
    UChar4Normalized_BGRA = 42,
    UChar = 45,
    Char = 46,
    UCharNormalized = 47,
    CharNormalized = 48,
    UShort = 49,
    Short = 50,
    UShortNormalized = 51,
    ShortNormalized = 52,
    Half = 53,
    FloatRG11B10 = 54,
    FloatRGB9E5 = 55,
};

pub const VertexStepFunction = enum(objc.NSUInteger) {
    Constant = 0,
    PerVertex = 1,
    PerInstance = 2,
    PerPatch = 3,
    PerPatchControlPoint = 4,
};

/// https://developer.apple.com/documentation/Metal/MTLVertexBufferLayoutDescriptor?language=objc
pub const VertexBufferLayoutDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLVertexBufferLayoutDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn stride(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "stride", objc.NSUInteger, .{});
    }

    pub fn setStride(self: *@This(), stride: objc.NSUInteger) void {
        return objc.msgSend(self, "setStride:", void, .{stride});
    }

    pub fn stepFunction(self: *@This()) VertexStepFunction {
        return objc.msgSend(self, "stepFunction", VertexStepFunction, .{});
    }

    pub fn setStepFunction(self: *@This(), stepFunction: VertexStepFunction) void {
        return objc.msgSend(self, "setStepFunction:", void, .{stepFunction});
    }

    pub fn stepRate(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "stepRate", objc.NSUInteger, .{});
    }

    pub fn setStepRate(self: *@This(), stepRate: objc.NSUInteger) void {
        return objc.msgSend(self, "setStepRate:", void, .{stepRate});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLVertexBufferLayoutDescriptorArray?language=objc
pub const VertexBufferLayoutDescriptorArray = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLVertexBufferLayoutDescriptorArray", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn objectAtIndexedSubscript(self: *@This(), index: objc.NSUInteger) ?*VertexBufferLayoutDescriptor {
        return objc.msgSend(self, "objectAtIndexedSubscript:", ?*VertexBufferLayoutDescriptor, .{index});
    }

    pub fn setObjectAtIndexedSubscript(self: *@This(), bufferDesc: ?*VertexBufferLayoutDescriptor, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setObject:atIndexedSubscript:", void, .{bufferDesc, index});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLVertexAttributeDescriptor?language=objc
pub const VertexAttributeDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLVertexAttributeDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn format(self: *@This()) VertexFormat {
        return objc.msgSend(self, "format", VertexFormat, .{});
    }

    pub fn setFormat(self: *@This(), format: VertexFormat) void {
        return objc.msgSend(self, "setFormat:", void, .{format});
    }

    pub fn offset(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "offset", objc.NSUInteger, .{});
    }

    pub fn setOffset(self: *@This(), offset: objc.NSUInteger) void {
        return objc.msgSend(self, "setOffset:", void, .{offset});
    }

    pub fn bufferIndex(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "bufferIndex", objc.NSUInteger, .{});
    }

    pub fn setBufferIndex(self: *@This(), bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setBufferIndex:", void, .{bufferIndex});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLVertexAttributeDescriptorArray?language=objc
pub const VertexAttributeDescriptorArray = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLVertexAttributeDescriptorArray", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn objectAtIndexedSubscript(self: *@This(), index: objc.NSUInteger) ?*VertexAttributeDescriptor {
        return objc.msgSend(self, "objectAtIndexedSubscript:", ?*VertexAttributeDescriptor, .{index});
    }

    pub fn setObjectAtIndexedSubscript(self: *@This(), attributeDesc: ?*VertexAttributeDescriptor, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setObject:atIndexedSubscript:", void, .{attributeDesc, index});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLVertexDescriptor?language=objc
pub const VertexDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLVertexDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn vertexDescriptor(self: *@This()) ?*VertexDescriptor {
        return objc.msgSend(self, "vertexDescriptor", ?*VertexDescriptor, .{});
    }

    pub fn reset(self: *@This()) void {
        return objc.msgSend(self, "reset", void, .{});
    }

    pub fn layouts(self: *@This()) ?*VertexBufferLayoutDescriptorArray {
        return objc.msgSend(self, "layouts", ?*VertexBufferLayoutDescriptorArray, .{});
    }

    pub fn attributes(self: *@This()) ?*VertexAttributeDescriptorArray {
        return objc.msgSend(self, "attributes", ?*VertexAttributeDescriptorArray, .{});
    }

};

pub const AttributeFormat = enum(objc.NSUInteger) {
    Invalid = 0,
    UChar2 = 1,
    UChar3 = 2,
    UChar4 = 3,
    Char2 = 4,
    Char3 = 5,
    Char4 = 6,
    UChar2Normalized = 7,
    UChar3Normalized = 8,
    UChar4Normalized = 9,
    Char2Normalized = 10,
    Char3Normalized = 11,
    Char4Normalized = 12,
    UShort2 = 13,
    UShort3 = 14,
    UShort4 = 15,
    Short2 = 16,
    Short3 = 17,
    Short4 = 18,
    UShort2Normalized = 19,
    UShort3Normalized = 20,
    UShort4Normalized = 21,
    Short2Normalized = 22,
    Short3Normalized = 23,
    Short4Normalized = 24,
    Half2 = 25,
    Half3 = 26,
    Half4 = 27,
    Float = 28,
    Float2 = 29,
    Float3 = 30,
    Float4 = 31,
    Int = 32,
    Int2 = 33,
    Int3 = 34,
    Int4 = 35,
    UInt = 36,
    UInt2 = 37,
    UInt3 = 38,
    UInt4 = 39,
    Int1010102Normalized = 40,
    UInt1010102Normalized = 41,
    UChar4Normalized_BGRA = 42,
    UChar = 45,
    Char = 46,
    UCharNormalized = 47,
    CharNormalized = 48,
    UShort = 49,
    Short = 50,
    UShortNormalized = 51,
    ShortNormalized = 52,
    Half = 53,
    FloatRG11B10 = 54,
    FloatRGB9E5 = 55,
};

pub const IndexType = enum(objc.NSUInteger) {
    UInt16 = 0,
    UInt32 = 1,
};

pub const StepFunction = enum(objc.NSUInteger) {
    Constant = 0,
    PerVertex = 1,
    PerInstance = 2,
    PerPatch = 3,
    PerPatchControlPoint = 4,
    ThreadPositionInGridX = 5,
    ThreadPositionInGridY = 6,
    ThreadPositionInGridXIndexed = 7,
    ThreadPositionInGridYIndexed = 8,
};

/// https://developer.apple.com/documentation/Metal/MTLBufferLayoutDescriptor?language=objc
pub const BufferLayoutDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLBufferLayoutDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn stride(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "stride", objc.NSUInteger, .{});
    }

    pub fn setStride(self: *@This(), stride: objc.NSUInteger) void {
        return objc.msgSend(self, "setStride:", void, .{stride});
    }

    pub fn stepFunction(self: *@This()) StepFunction {
        return objc.msgSend(self, "stepFunction", StepFunction, .{});
    }

    pub fn setStepFunction(self: *@This(), stepFunction: StepFunction) void {
        return objc.msgSend(self, "setStepFunction:", void, .{stepFunction});
    }

    pub fn stepRate(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "stepRate", objc.NSUInteger, .{});
    }

    pub fn setStepRate(self: *@This(), stepRate: objc.NSUInteger) void {
        return objc.msgSend(self, "setStepRate:", void, .{stepRate});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLBufferLayoutDescriptorArray?language=objc
pub const BufferLayoutDescriptorArray = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLBufferLayoutDescriptorArray", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn objectAtIndexedSubscript(self: *@This(), index: objc.NSUInteger) ?*BufferLayoutDescriptor {
        return objc.msgSend(self, "objectAtIndexedSubscript:", ?*BufferLayoutDescriptor, .{index});
    }

    pub fn setObjectAtIndexedSubscript(self: *@This(), bufferDesc: ?*BufferLayoutDescriptor, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setObject:atIndexedSubscript:", void, .{bufferDesc, index});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLAttributeDescriptor?language=objc
pub const AttributeDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLAttributeDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn format(self: *@This()) AttributeFormat {
        return objc.msgSend(self, "format", AttributeFormat, .{});
    }

    pub fn setFormat(self: *@This(), format: AttributeFormat) void {
        return objc.msgSend(self, "setFormat:", void, .{format});
    }

    pub fn offset(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "offset", objc.NSUInteger, .{});
    }

    pub fn setOffset(self: *@This(), offset: objc.NSUInteger) void {
        return objc.msgSend(self, "setOffset:", void, .{offset});
    }

    pub fn bufferIndex(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "bufferIndex", objc.NSUInteger, .{});
    }

    pub fn setBufferIndex(self: *@This(), bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setBufferIndex:", void, .{bufferIndex});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLAttributeDescriptorArray?language=objc
pub const AttributeDescriptorArray = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLAttributeDescriptorArray", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn objectAtIndexedSubscript(self: *@This(), index: objc.NSUInteger) ?*AttributeDescriptor {
        return objc.msgSend(self, "objectAtIndexedSubscript:", ?*AttributeDescriptor, .{index});
    }

    pub fn setObjectAtIndexedSubscript(self: *@This(), attributeDesc: ?*AttributeDescriptor, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setObject:atIndexedSubscript:", void, .{attributeDesc, index});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLStageInputOutputDescriptor?language=objc
pub const StageInputOutputDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLStageInputOutputDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn stageInputOutputDescriptor(self: *@This()) ?*StageInputOutputDescriptor {
        return objc.msgSend(self, "stageInputOutputDescriptor", ?*StageInputOutputDescriptor, .{});
    }

    pub fn reset(self: *@This()) void {
        return objc.msgSend(self, "reset", void, .{});
    }

    pub fn layouts(self: *@This()) ?*BufferLayoutDescriptorArray {
        return objc.msgSend(self, "layouts", ?*BufferLayoutDescriptorArray, .{});
    }

    pub fn attributes(self: *@This()) ?*AttributeDescriptorArray {
        return objc.msgSend(self, "attributes", ?*AttributeDescriptorArray, .{});
    }

    pub fn indexType(self: *@This()) IndexType {
        return objc.msgSend(self, "indexType", IndexType, .{});
    }

    pub fn setIndexType(self: *@This(), indexType: IndexType) void {
        return objc.msgSend(self, "setIndexType:", void, .{indexType});
    }

    pub fn indexBufferIndex(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "indexBufferIndex", objc.NSUInteger, .{});
    }

    pub fn setIndexBufferIndex(self: *@This(), indexBufferIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setIndexBufferIndex:", void, .{indexBufferIndex});
    }

};

pub const Mutability = enum(objc.NSUInteger) {
    Default = 0,
    Mutable = 1,
    Immutable = 2,
};

pub const ShaderValidation = enum(objc.NSInteger) {
    Default = 0,
    Enabled = 1,
    Disabled = 2,
};

/// https://developer.apple.com/documentation/Metal/MTLPipelineBufferDescriptor?language=objc
pub const PipelineBufferDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLPipelineBufferDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn mutability(self: *@This()) Mutability {
        return objc.msgSend(self, "mutability", Mutability, .{});
    }

    pub fn setMutability(self: *@This(), mutability: Mutability) void {
        return objc.msgSend(self, "setMutability:", void, .{mutability});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLPipelineBufferDescriptorArray?language=objc
pub const PipelineBufferDescriptorArray = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLPipelineBufferDescriptorArray", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn objectAtIndexedSubscript(self: *@This(), bufferIndex: objc.NSUInteger) ?*PipelineBufferDescriptor {
        return objc.msgSend(self, "objectAtIndexedSubscript:", ?*PipelineBufferDescriptor, .{bufferIndex});
    }

    pub fn setObjectAtIndexedSubscript(self: *@This(), buffer: ?*PipelineBufferDescriptor, bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setObject:atIndexedSubscript:", void, .{buffer, bufferIndex});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLLinkedFunctions?language=objc
pub const LinkedFunctions = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLLinkedFunctions", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn linkedFunctions(self: *@This()) ?*LinkedFunctions {
        return objc.msgSend(self, "linkedFunctions", ?*LinkedFunctions, .{});
    }

    pub fn functions(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "functions", ?*anyopaque, .{});
    }

    pub fn setFunctions(self: *@This(), functions: ?*anyopaque) void {
        return objc.msgSend(self, "setFunctions:", void, .{functions});
    }

    pub fn binaryFunctions(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "binaryFunctions", ?*anyopaque, .{});
    }

    pub fn setBinaryFunctions(self: *@This(), binaryFunctions: ?*anyopaque) void {
        return objc.msgSend(self, "setBinaryFunctions:", void, .{binaryFunctions});
    }

    pub fn groups(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "groups", ?*anyopaque, .{});
    }

    pub fn setGroups(self: *@This(), groups: ?*anyopaque) void {
        return objc.msgSend(self, "setGroups:", void, .{groups});
    }

    pub fn privateFunctions(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "privateFunctions", ?*anyopaque, .{});
    }

    pub fn setPrivateFunctions(self: *@This(), privateFunctions: ?*anyopaque) void {
        return objc.msgSend(self, "setPrivateFunctions:", void, .{privateFunctions});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLComputePipelineReflection?language=objc
pub const ComputePipelineReflection = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLComputePipelineReflection", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn bindings(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "bindings", ?*anyopaque, .{});
    }

    pub fn arguments(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "arguments", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLComputePipelineDescriptor?language=objc
pub const ComputePipelineDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLComputePipelineDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn reset(self: *@This()) void {
        return objc.msgSend(self, "reset", void, .{});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*ns.String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

    pub fn computeFunction(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "computeFunction", ?*anyopaque, .{});
    }

    pub fn setComputeFunction(self: *@This(), computeFunction: ?*anyopaque) void {
        return objc.msgSend(self, "setComputeFunction:", void, .{computeFunction});
    }

    pub fn threadGroupSizeIsMultipleOfThreadExecutionWidth(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "threadGroupSizeIsMultipleOfThreadExecutionWidth", objc.BOOL, .{});
    }

    pub fn setThreadGroupSizeIsMultipleOfThreadExecutionWidth(self: *@This(), threadGroupSizeIsMultipleOfThreadExecutionWidth: objc.BOOL) void {
        return objc.msgSend(self, "setThreadGroupSizeIsMultipleOfThreadExecutionWidth:", void, .{threadGroupSizeIsMultipleOfThreadExecutionWidth});
    }

    pub fn maxTotalThreadsPerThreadgroup(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxTotalThreadsPerThreadgroup", objc.NSUInteger, .{});
    }

    pub fn setMaxTotalThreadsPerThreadgroup(self: *@This(), maxTotalThreadsPerThreadgroup: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaxTotalThreadsPerThreadgroup:", void, .{maxTotalThreadsPerThreadgroup});
    }

    pub fn stageInputDescriptor(self: *@This()) ?*StageInputOutputDescriptor {
        return objc.msgSend(self, "stageInputDescriptor", ?*StageInputOutputDescriptor, .{});
    }

    pub fn setStageInputDescriptor(self: *@This(), stageInputDescriptor: ?*StageInputOutputDescriptor) void {
        return objc.msgSend(self, "setStageInputDescriptor:", void, .{stageInputDescriptor});
    }

    pub fn buffers(self: *@This()) ?*PipelineBufferDescriptorArray {
        return objc.msgSend(self, "buffers", ?*PipelineBufferDescriptorArray, .{});
    }

    pub fn supportIndirectCommandBuffers(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportIndirectCommandBuffers", objc.BOOL, .{});
    }

    pub fn setSupportIndirectCommandBuffers(self: *@This(), supportIndirectCommandBuffers: objc.BOOL) void {
        return objc.msgSend(self, "setSupportIndirectCommandBuffers:", void, .{supportIndirectCommandBuffers});
    }

    pub fn insertLibraries(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "insertLibraries", ?*anyopaque, .{});
    }

    pub fn setInsertLibraries(self: *@This(), insertLibraries: ?*anyopaque) void {
        return objc.msgSend(self, "setInsertLibraries:", void, .{insertLibraries});
    }

    pub fn preloadedLibraries(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "preloadedLibraries", ?*anyopaque, .{});
    }

    pub fn setPreloadedLibraries(self: *@This(), preloadedLibraries: ?*anyopaque) void {
        return objc.msgSend(self, "setPreloadedLibraries:", void, .{preloadedLibraries});
    }

    pub fn binaryArchives(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "binaryArchives", ?*anyopaque, .{});
    }

    pub fn setBinaryArchives(self: *@This(), binaryArchives: ?*anyopaque) void {
        return objc.msgSend(self, "setBinaryArchives:", void, .{binaryArchives});
    }

    pub fn linkedFunctions(self: *@This()) ?*LinkedFunctions {
        return objc.msgSend(self, "linkedFunctions", ?*LinkedFunctions, .{});
    }

    pub fn setLinkedFunctions(self: *@This(), linkedFunctions: ?*LinkedFunctions) void {
        return objc.msgSend(self, "setLinkedFunctions:", void, .{linkedFunctions});
    }

    pub fn supportAddingBinaryFunctions(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportAddingBinaryFunctions", objc.BOOL, .{});
    }

    pub fn setSupportAddingBinaryFunctions(self: *@This(), supportAddingBinaryFunctions: objc.BOOL) void {
        return objc.msgSend(self, "setSupportAddingBinaryFunctions:", void, .{supportAddingBinaryFunctions});
    }

    pub fn maxCallStackDepth(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxCallStackDepth", objc.NSUInteger, .{});
    }

    pub fn setMaxCallStackDepth(self: *@This(), maxCallStackDepth: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaxCallStackDepth:", void, .{maxCallStackDepth});
    }

    pub fn shaderValidation(self: *@This()) ShaderValidation {
        return objc.msgSend(self, "shaderValidation", ShaderValidation, .{});
    }

    pub fn setShaderValidation(self: *@This(), shaderValidation: ShaderValidation) void {
        return objc.msgSend(self, "setShaderValidation:", void, .{shaderValidation});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLComputePipelineState?language=objc
pub const ComputePipelineState = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn imageblockMemoryLengthForDimensions(self: *@This(), imageblockDimensions: Size) objc.NSUInteger {
        return objc.msgSend(self, "imageblockMemoryLengthForDimensions:", objc.NSUInteger, .{imageblockDimensions});
    }

    pub fn functionHandleWithFunction(self: *@This(), function: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "functionHandleWithFunction:", ?*anyopaque, .{function});
    }

    pub fn newComputePipelineStateWithAdditionalBinaryFunctionsError(self: *@This(), functions: ?*anyopaque, @"error": ?*?*ns.Error) ?*anyopaque {
        return objc.msgSend(self, "newComputePipelineStateWithAdditionalBinaryFunctions:error:", ?*anyopaque, .{functions, @"error"});
    }

    pub fn newVisibleFunctionTableWithDescriptor(self: *@This(), descriptor: ?*VisibleFunctionTableDescriptor) ?*anyopaque {
        return objc.msgSend(self, "newVisibleFunctionTableWithDescriptor:", ?*anyopaque, .{descriptor});
    }

    pub fn newIntersectionFunctionTableWithDescriptor(self: *@This(), descriptor: ?*IntersectionFunctionTableDescriptor) ?*anyopaque {
        return objc.msgSend(self, "newIntersectionFunctionTableWithDescriptor:", ?*anyopaque, .{descriptor});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn device(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "device", ?*anyopaque, .{});
    }

    pub fn maxTotalThreadsPerThreadgroup(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxTotalThreadsPerThreadgroup", objc.NSUInteger, .{});
    }

    pub fn threadExecutionWidth(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "threadExecutionWidth", objc.NSUInteger, .{});
    }

    pub fn staticThreadgroupMemoryLength(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "staticThreadgroupMemoryLength", objc.NSUInteger, .{});
    }

    pub fn supportIndirectCommandBuffers(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportIndirectCommandBuffers", objc.BOOL, .{});
    }

    pub fn gpuResourceID(self: *@This()) ResourceID {
        return objc.msgSend(self, "gpuResourceID", ResourceID, .{});
    }

    pub fn shaderValidation(self: *@This()) ShaderValidation {
        return objc.msgSend(self, "shaderValidation", ShaderValidation, .{});
    }

};

pub const PrimitiveType = enum(objc.NSUInteger) {
    Point = 0,
    Line = 1,
    LineStrip = 2,
    Triangle = 3,
    TriangleStrip = 4,
};

pub const VisibilityResultMode = enum(objc.NSUInteger) {
    Disabled = 0,
    Boolean = 1,
    Counting = 2,
};

pub const ScissorRect = extern struct {
    x: objc.NSUInteger,
    y: objc.NSUInteger,
    width: objc.NSUInteger,
    height: objc.NSUInteger,
};

pub const Viewport = extern struct {
    originX: f64,
    originY: f64,
    width: f64,
    height: f64,
    znear: f64,
    zfar: f64,
};

pub const CullMode = enum(objc.NSUInteger) {
    None = 0,
    Front = 1,
    Back = 2,
};

pub const Winding = enum(objc.NSUInteger) {
    Clockwise = 0,
    CounterClockwise = 1,
};

pub const DepthClipMode = enum(objc.NSUInteger) {
    Clip = 0,
    Clamp = 1,
};

pub const TriangleFillMode = enum(objc.NSUInteger) {
    Fill = 0,
    Lines = 1,
};

pub const DrawPrimitivesIndirectArguments = extern struct {
    vertexCount: objc.uint32_t,
    instanceCount: objc.uint32_t,
    vertexStart: objc.uint32_t,
    baseInstance: objc.uint32_t,
};

pub const DrawIndexedPrimitivesIndirectArguments = extern struct {
    indexCount: objc.uint32_t,
    instanceCount: objc.uint32_t,
    indexStart: objc.uint32_t,
    baseVertex: objc.int32_t,
    baseInstance: objc.uint32_t,
};

pub const VertexAmplificationViewMapping = extern struct {
    viewportArrayIndexOffset: objc.uint32_t,
    renderTargetArrayIndexOffset: objc.uint32_t,
};

pub const DrawPatchIndirectArguments = extern struct {
    patchCount: objc.uint32_t,
    instanceCount: objc.uint32_t,
    patchStart: objc.uint32_t,
    baseInstance: objc.uint32_t,
};

pub const QuadTessellationFactorsHalf = extern struct {
    edgeTessellationFactor: [4] objc.uint16_t,
    insideTessellationFactor: [2] objc.uint16_t,
};

pub const TriangleTessellationFactorsHalf = extern struct {
    edgeTessellationFactor: [3] objc.uint16_t,
    insideTessellationFactor: objc.uint16_t,
};

pub const RenderStages = enum(objc.NSUInteger) {
    Vertex = 1,
    Fragment = 2,
    Tile = 4,
    Object = 8,
    Mesh = 16,
};

/// https://developer.apple.com/documentation/Metal/MTLRenderCommandEncoder?language=objc
pub const RenderCommandEncoder = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{CommandEncoder, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn setRenderPipelineState(self: *@This(), pipelineState: ?*anyopaque) void {
        return objc.msgSend(self, "setRenderPipelineState:", void, .{pipelineState});
    }

    pub fn setVertexBytesLengthAtIndex(self: *@This(), bytes: ?*anyopaque, length: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setVertexBytes:length:atIndex:", void, .{bytes, length, index});
    }

    pub fn setVertexBufferOffsetAtIndex(self: *@This(), buffer: ?*anyopaque, offset: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setVertexBuffer:offset:atIndex:", void, .{buffer, offset, index});
    }

    pub fn setVertexBufferOffsetAtIndex(self: *@This(), offset: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setVertexBufferOffset:atIndex:", void, .{offset, index});
    }

    pub fn setVertexBuffersOffsetsWithRange(self: *@This(), buffers: ?*?*anyopaque, offsets: ?*objc.NSUInteger, range: ns.Range) void {
        return objc.msgSend(self, "setVertexBuffers:offsets:withRange:", void, .{buffers, offsets, range});
    }

    pub fn setVertexBufferOffsetAttributeStrideAtIndex(self: *@This(), buffer: ?*anyopaque, offset: objc.NSUInteger, stride: objc.NSUInteger, index: objc.NSUInteger, ) void {
        return objc.msgSend(self, "setVertexBuffer:offset:attributeStride:atIndex:", void, .{buffer, offset, stride, index, });
    }

    pub fn setVertexBuffersOffsetsAttributeStridesWithRange(self: *@This(), buffers: ?*?*anyopaque, offsets: ?*objc.NSUInteger, strides: ?*objc.NSUInteger, range: ns.Range, ) void {
        return objc.msgSend(self, "setVertexBuffers:offsets:attributeStrides:withRange:", void, .{buffers, offsets, strides, range, });
    }

    pub fn setVertexBufferOffsetAttributeStrideAtIndex(self: *@This(), offset: objc.NSUInteger, stride: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setVertexBufferOffset:attributeStride:atIndex:", void, .{offset, stride, index});
    }

    pub fn setVertexBytesLengthAttributeStrideAtIndex(self: *@This(), bytes: ?*anyopaque, length: objc.NSUInteger, stride: objc.NSUInteger, index: objc.NSUInteger, ) void {
        return objc.msgSend(self, "setVertexBytes:length:attributeStride:atIndex:", void, .{bytes, length, stride, index, });
    }

    pub fn setVertexTextureAtIndex(self: *@This(), texture: ?*anyopaque, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setVertexTexture:atIndex:", void, .{texture, index});
    }

    pub fn setVertexTexturesWithRange(self: *@This(), textures: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setVertexTextures:withRange:", void, .{textures, range});
    }

    pub fn setVertexSamplerStateAtIndex(self: *@This(), sampler: ?*anyopaque, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setVertexSamplerState:atIndex:", void, .{sampler, index});
    }

    pub fn setVertexSamplerStatesWithRange(self: *@This(), samplers: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setVertexSamplerStates:withRange:", void, .{samplers, range});
    }

    pub fn setVertexSamplerStateLodMinClampLodMaxClampAtIndex(self: *@This(), sampler: ?*anyopaque, lodMinClamp: f32, lodMaxClamp: f32, index: objc.NSUInteger, ) void {
        return objc.msgSend(self, "setVertexSamplerState:lodMinClamp:lodMaxClamp:atIndex:", void, .{sampler, lodMinClamp, lodMaxClamp, index, });
    }

    pub fn setVertexSamplerStatesLodMinClampsLodMaxClampsWithRange(self: *@This(), samplers: ?*?*anyopaque, lodMinClamps: ?*f32, lodMaxClamps: ?*f32, range: ns.Range, ) void {
        return objc.msgSend(self, "setVertexSamplerStates:lodMinClamps:lodMaxClamps:withRange:", void, .{samplers, lodMinClamps, lodMaxClamps, range, });
    }

    pub fn setVertexVisibleFunctionTableAtBufferIndex(self: *@This(), functionTable: ?*anyopaque, bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setVertexVisibleFunctionTable:atBufferIndex:", void, .{functionTable, bufferIndex});
    }

    pub fn setVertexVisibleFunctionTablesWithBufferRange(self: *@This(), functionTables: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setVertexVisibleFunctionTables:withBufferRange:", void, .{functionTables, range});
    }

    pub fn setVertexIntersectionFunctionTableAtBufferIndex(self: *@This(), intersectionFunctionTable: ?*anyopaque, bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setVertexIntersectionFunctionTable:atBufferIndex:", void, .{intersectionFunctionTable, bufferIndex});
    }

    pub fn setVertexIntersectionFunctionTablesWithBufferRange(self: *@This(), intersectionFunctionTables: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setVertexIntersectionFunctionTables:withBufferRange:", void, .{intersectionFunctionTables, range});
    }

    pub fn setVertexAccelerationStructureAtBufferIndex(self: *@This(), accelerationStructure: ?*anyopaque, bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setVertexAccelerationStructure:atBufferIndex:", void, .{accelerationStructure, bufferIndex});
    }

    pub fn setViewport(self: *@This(), viewport: Viewport) void {
        return objc.msgSend(self, "setViewport:", void, .{viewport});
    }

    pub fn setViewportsCount(self: *@This(), viewports: ?*Viewport, count: objc.NSUInteger) void {
        return objc.msgSend(self, "setViewports:count:", void, .{viewports, count});
    }

    pub fn setFrontFacingWinding(self: *@This(), frontFacingWinding: Winding) void {
        return objc.msgSend(self, "setFrontFacingWinding:", void, .{frontFacingWinding});
    }

    pub fn setVertexAmplificationCountViewMappings(self: *@This(), count: objc.NSUInteger, viewMappings: ?*VertexAmplificationViewMapping) void {
        return objc.msgSend(self, "setVertexAmplificationCount:viewMappings:", void, .{count, viewMappings});
    }

    pub fn setCullMode(self: *@This(), cullMode: CullMode) void {
        return objc.msgSend(self, "setCullMode:", void, .{cullMode});
    }

    pub fn setDepthClipMode(self: *@This(), depthClipMode: DepthClipMode) void {
        return objc.msgSend(self, "setDepthClipMode:", void, .{depthClipMode});
    }

    pub fn setDepthBiasSlopeScaleClamp(self: *@This(), depthBias: f32, slopeScale: f32, clamp: f32) void {
        return objc.msgSend(self, "setDepthBias:slopeScale:clamp:", void, .{depthBias, slopeScale, clamp});
    }

    pub fn setScissorRect(self: *@This(), rect: ScissorRect) void {
        return objc.msgSend(self, "setScissorRect:", void, .{rect});
    }

    pub fn setScissorRectsCount(self: *@This(), scissorRects: ?*ScissorRect, count: objc.NSUInteger) void {
        return objc.msgSend(self, "setScissorRects:count:", void, .{scissorRects, count});
    }

    pub fn setTriangleFillMode(self: *@This(), fillMode: TriangleFillMode) void {
        return objc.msgSend(self, "setTriangleFillMode:", void, .{fillMode});
    }

    pub fn setFragmentBytesLengthAtIndex(self: *@This(), bytes: ?*anyopaque, length: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setFragmentBytes:length:atIndex:", void, .{bytes, length, index});
    }

    pub fn setFragmentBufferOffsetAtIndex(self: *@This(), buffer: ?*anyopaque, offset: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setFragmentBuffer:offset:atIndex:", void, .{buffer, offset, index});
    }

    pub fn setFragmentBufferOffsetAtIndex(self: *@This(), offset: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setFragmentBufferOffset:atIndex:", void, .{offset, index});
    }

    pub fn setFragmentBuffersOffsetsWithRange(self: *@This(), buffers: ?*?*anyopaque, offsets: ?*objc.NSUInteger, range: ns.Range) void {
        return objc.msgSend(self, "setFragmentBuffers:offsets:withRange:", void, .{buffers, offsets, range});
    }

    pub fn setFragmentTextureAtIndex(self: *@This(), texture: ?*anyopaque, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setFragmentTexture:atIndex:", void, .{texture, index});
    }

    pub fn setFragmentTexturesWithRange(self: *@This(), textures: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setFragmentTextures:withRange:", void, .{textures, range});
    }

    pub fn setFragmentSamplerStateAtIndex(self: *@This(), sampler: ?*anyopaque, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setFragmentSamplerState:atIndex:", void, .{sampler, index});
    }

    pub fn setFragmentSamplerStatesWithRange(self: *@This(), samplers: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setFragmentSamplerStates:withRange:", void, .{samplers, range});
    }

    pub fn setFragmentSamplerStateLodMinClampLodMaxClampAtIndex(self: *@This(), sampler: ?*anyopaque, lodMinClamp: f32, lodMaxClamp: f32, index: objc.NSUInteger, ) void {
        return objc.msgSend(self, "setFragmentSamplerState:lodMinClamp:lodMaxClamp:atIndex:", void, .{sampler, lodMinClamp, lodMaxClamp, index, });
    }

    pub fn setFragmentSamplerStatesLodMinClampsLodMaxClampsWithRange(self: *@This(), samplers: ?*?*anyopaque, lodMinClamps: ?*f32, lodMaxClamps: ?*f32, range: ns.Range, ) void {
        return objc.msgSend(self, "setFragmentSamplerStates:lodMinClamps:lodMaxClamps:withRange:", void, .{samplers, lodMinClamps, lodMaxClamps, range, });
    }

    pub fn setFragmentVisibleFunctionTableAtBufferIndex(self: *@This(), functionTable: ?*anyopaque, bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setFragmentVisibleFunctionTable:atBufferIndex:", void, .{functionTable, bufferIndex});
    }

    pub fn setFragmentVisibleFunctionTablesWithBufferRange(self: *@This(), functionTables: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setFragmentVisibleFunctionTables:withBufferRange:", void, .{functionTables, range});
    }

    pub fn setFragmentIntersectionFunctionTableAtBufferIndex(self: *@This(), intersectionFunctionTable: ?*anyopaque, bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setFragmentIntersectionFunctionTable:atBufferIndex:", void, .{intersectionFunctionTable, bufferIndex});
    }

    pub fn setFragmentIntersectionFunctionTablesWithBufferRange(self: *@This(), intersectionFunctionTables: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setFragmentIntersectionFunctionTables:withBufferRange:", void, .{intersectionFunctionTables, range});
    }

    pub fn setFragmentAccelerationStructureAtBufferIndex(self: *@This(), accelerationStructure: ?*anyopaque, bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setFragmentAccelerationStructure:atBufferIndex:", void, .{accelerationStructure, bufferIndex});
    }

    pub fn setBlendColorRedGreenBlueAlpha(self: *@This(), red: f32, green: f32, blue: f32, alpha: f32, ) void {
        return objc.msgSend(self, "setBlendColorRed:green:blue:alpha:", void, .{red, green, blue, alpha, });
    }

    pub fn setDepthStencilState(self: *@This(), depthStencilState: ?*anyopaque) void {
        return objc.msgSend(self, "setDepthStencilState:", void, .{depthStencilState});
    }

    pub fn setStencilReferenceValue(self: *@This(), referenceValue: objc.uint32_t) void {
        return objc.msgSend(self, "setStencilReferenceValue:", void, .{referenceValue});
    }

    pub fn setStencilFrontReferenceValueBackReferenceValue(self: *@This(), frontReferenceValue: objc.uint32_t, backReferenceValue: objc.uint32_t) void {
        return objc.msgSend(self, "setStencilFrontReferenceValue:backReferenceValue:", void, .{frontReferenceValue, backReferenceValue});
    }

    pub fn setVisibilityResultModeOffset(self: *@This(), mode: VisibilityResultMode, offset: objc.NSUInteger) void {
        return objc.msgSend(self, "setVisibilityResultMode:offset:", void, .{mode, offset});
    }

    pub fn setColorStoreActionAtIndex(self: *@This(), storeAction: StoreAction, colorAttachmentIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setColorStoreAction:atIndex:", void, .{storeAction, colorAttachmentIndex});
    }

    pub fn setDepthStoreAction(self: *@This(), storeAction: StoreAction) void {
        return objc.msgSend(self, "setDepthStoreAction:", void, .{storeAction});
    }

    pub fn setStencilStoreAction(self: *@This(), storeAction: StoreAction) void {
        return objc.msgSend(self, "setStencilStoreAction:", void, .{storeAction});
    }

    pub fn setColorStoreActionOptionsAtIndex(self: *@This(), storeActionOptions: StoreActionOptions, colorAttachmentIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setColorStoreActionOptions:atIndex:", void, .{storeActionOptions, colorAttachmentIndex});
    }

    pub fn setDepthStoreActionOptions(self: *@This(), storeActionOptions: StoreActionOptions) void {
        return objc.msgSend(self, "setDepthStoreActionOptions:", void, .{storeActionOptions});
    }

    pub fn setStencilStoreActionOptions(self: *@This(), storeActionOptions: StoreActionOptions) void {
        return objc.msgSend(self, "setStencilStoreActionOptions:", void, .{storeActionOptions});
    }

    pub fn setObjectBytesLengthAtIndex(self: *@This(), bytes: ?*anyopaque, length: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setObjectBytes:length:atIndex:", void, .{bytes, length, index});
    }

    pub fn setObjectBufferOffsetAtIndex(self: *@This(), buffer: ?*anyopaque, offset: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setObjectBuffer:offset:atIndex:", void, .{buffer, offset, index});
    }

    pub fn setObjectBufferOffsetAtIndex(self: *@This(), offset: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setObjectBufferOffset:atIndex:", void, .{offset, index});
    }

    pub fn setObjectBuffersOffsetsWithRange(self: *@This(), buffers: ?*?*anyopaque, offsets: ?*objc.NSUInteger, range: ns.Range) void {
        return objc.msgSend(self, "setObjectBuffers:offsets:withRange:", void, .{buffers, offsets, range});
    }

    pub fn setObjectTextureAtIndex(self: *@This(), texture: ?*anyopaque, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setObjectTexture:atIndex:", void, .{texture, index});
    }

    pub fn setObjectTexturesWithRange(self: *@This(), textures: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setObjectTextures:withRange:", void, .{textures, range});
    }

    pub fn setObjectSamplerStateAtIndex(self: *@This(), sampler: ?*anyopaque, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setObjectSamplerState:atIndex:", void, .{sampler, index});
    }

    pub fn setObjectSamplerStatesWithRange(self: *@This(), samplers: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setObjectSamplerStates:withRange:", void, .{samplers, range});
    }

    pub fn setObjectSamplerStateLodMinClampLodMaxClampAtIndex(self: *@This(), sampler: ?*anyopaque, lodMinClamp: f32, lodMaxClamp: f32, index: objc.NSUInteger, ) void {
        return objc.msgSend(self, "setObjectSamplerState:lodMinClamp:lodMaxClamp:atIndex:", void, .{sampler, lodMinClamp, lodMaxClamp, index, });
    }

    pub fn setObjectSamplerStatesLodMinClampsLodMaxClampsWithRange(self: *@This(), samplers: ?*?*anyopaque, lodMinClamps: ?*f32, lodMaxClamps: ?*f32, range: ns.Range, ) void {
        return objc.msgSend(self, "setObjectSamplerStates:lodMinClamps:lodMaxClamps:withRange:", void, .{samplers, lodMinClamps, lodMaxClamps, range, });
    }

    pub fn setObjectThreadgroupMemoryLengthAtIndex(self: *@This(), length: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setObjectThreadgroupMemoryLength:atIndex:", void, .{length, index});
    }

    pub fn setMeshBytesLengthAtIndex(self: *@This(), bytes: ?*anyopaque, length: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setMeshBytes:length:atIndex:", void, .{bytes, length, index});
    }

    pub fn setMeshBufferOffsetAtIndex(self: *@This(), buffer: ?*anyopaque, offset: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setMeshBuffer:offset:atIndex:", void, .{buffer, offset, index});
    }

    pub fn setMeshBufferOffsetAtIndex(self: *@This(), offset: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setMeshBufferOffset:atIndex:", void, .{offset, index});
    }

    pub fn setMeshBuffersOffsetsWithRange(self: *@This(), buffers: ?*?*anyopaque, offsets: ?*objc.NSUInteger, range: ns.Range) void {
        return objc.msgSend(self, "setMeshBuffers:offsets:withRange:", void, .{buffers, offsets, range});
    }

    pub fn setMeshTextureAtIndex(self: *@This(), texture: ?*anyopaque, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setMeshTexture:atIndex:", void, .{texture, index});
    }

    pub fn setMeshTexturesWithRange(self: *@This(), textures: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setMeshTextures:withRange:", void, .{textures, range});
    }

    pub fn setMeshSamplerStateAtIndex(self: *@This(), sampler: ?*anyopaque, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setMeshSamplerState:atIndex:", void, .{sampler, index});
    }

    pub fn setMeshSamplerStatesWithRange(self: *@This(), samplers: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setMeshSamplerStates:withRange:", void, .{samplers, range});
    }

    pub fn setMeshSamplerStateLodMinClampLodMaxClampAtIndex(self: *@This(), sampler: ?*anyopaque, lodMinClamp: f32, lodMaxClamp: f32, index: objc.NSUInteger, ) void {
        return objc.msgSend(self, "setMeshSamplerState:lodMinClamp:lodMaxClamp:atIndex:", void, .{sampler, lodMinClamp, lodMaxClamp, index, });
    }

    pub fn setMeshSamplerStatesLodMinClampsLodMaxClampsWithRange(self: *@This(), samplers: ?*?*anyopaque, lodMinClamps: ?*f32, lodMaxClamps: ?*f32, range: ns.Range, ) void {
        return objc.msgSend(self, "setMeshSamplerStates:lodMinClamps:lodMaxClamps:withRange:", void, .{samplers, lodMinClamps, lodMaxClamps, range, });
    }

    pub fn drawMeshThreadgroupsThreadsPerObjectThreadgroupThreadsPerMeshThreadgroup(self: *@This(), threadgroupsPerGrid: Size, threadsPerObjectThreadgroup: Size, threadsPerMeshThreadgroup: Size) void {
        return objc.msgSend(self, "drawMeshThreadgroups:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:", void, .{threadgroupsPerGrid, threadsPerObjectThreadgroup, threadsPerMeshThreadgroup});
    }

    pub fn drawMeshThreadsThreadsPerObjectThreadgroupThreadsPerMeshThreadgroup(self: *@This(), threadsPerGrid: Size, threadsPerObjectThreadgroup: Size, threadsPerMeshThreadgroup: Size) void {
        return objc.msgSend(self, "drawMeshThreads:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:", void, .{threadsPerGrid, threadsPerObjectThreadgroup, threadsPerMeshThreadgroup});
    }

    pub fn drawMeshThreadgroupsWithIndirectBufferIndirectBufferOffsetThreadsPerObjectThreadgroupThreadsPerMeshThreadgroup(self: *@This(), indirectBuffer: ?*anyopaque, indirectBufferOffset: objc.NSUInteger, threadsPerObjectThreadgroup: Size, threadsPerMeshThreadgroup: Size, ) void {
        return objc.msgSend(self, "drawMeshThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:", void, .{indirectBuffer, indirectBufferOffset, threadsPerObjectThreadgroup, threadsPerMeshThreadgroup, });
    }

    pub fn drawPrimitivesVertexStartVertexCountInstanceCount(self: *@This(), primitiveType: PrimitiveType, vertexStart: objc.NSUInteger, vertexCount: objc.NSUInteger, instanceCount: objc.NSUInteger, ) void {
        return objc.msgSend(self, "drawPrimitives:vertexStart:vertexCount:instanceCount:", void, .{primitiveType, vertexStart, vertexCount, instanceCount, });
    }

    pub fn drawPrimitivesVertexStartVertexCount(self: *@This(), primitiveType: PrimitiveType, vertexStart: objc.NSUInteger, vertexCount: objc.NSUInteger) void {
        return objc.msgSend(self, "drawPrimitives:vertexStart:vertexCount:", void, .{primitiveType, vertexStart, vertexCount});
    }

    pub fn drawIndexedPrimitivesIndexCountIndexTypeIndexBufferIndexBufferOffsetInstanceCount(self: *@This(), primitiveType: PrimitiveType, indexCount: objc.NSUInteger, indexType: IndexType, indexBuffer: ?*anyopaque, indexBufferOffset: objc.NSUInteger, instanceCount: objc.NSUInteger, ) void {
        return objc.msgSend(self, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:", void, .{primitiveType, indexCount, indexType, indexBuffer, indexBufferOffset, instanceCount, });
    }

    pub fn drawIndexedPrimitivesIndexCountIndexTypeIndexBufferIndexBufferOffset(self: *@This(), primitiveType: PrimitiveType, indexCount: objc.NSUInteger, indexType: IndexType, indexBuffer: ?*anyopaque, indexBufferOffset: objc.NSUInteger, ) void {
        return objc.msgSend(self, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:", void, .{primitiveType, indexCount, indexType, indexBuffer, indexBufferOffset, });
    }

    pub fn drawPrimitivesVertexStartVertexCountInstanceCountBaseInstance(self: *@This(), primitiveType: PrimitiveType, vertexStart: objc.NSUInteger, vertexCount: objc.NSUInteger, instanceCount: objc.NSUInteger, baseInstance: objc.NSUInteger, ) void {
        return objc.msgSend(self, "drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:", void, .{primitiveType, vertexStart, vertexCount, instanceCount, baseInstance, });
    }

    pub fn drawIndexedPrimitivesIndexCountIndexTypeIndexBufferIndexBufferOffsetInstanceCountBaseVertexBaseInstance(self: *@This(), primitiveType: PrimitiveType, indexCount: objc.NSUInteger, indexType: IndexType, indexBuffer: ?*anyopaque, indexBufferOffset: objc.NSUInteger, instanceCount: objc.NSUInteger, baseVertex: objc.NSInteger, baseInstance: objc.NSUInteger, ) void {
        return objc.msgSend(self, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:", void, .{primitiveType, indexCount, indexType, indexBuffer, indexBufferOffset, instanceCount, baseVertex, baseInstance, });
    }

    pub fn drawPrimitivesIndirectBufferIndirectBufferOffset(self: *@This(), primitiveType: PrimitiveType, indirectBuffer: ?*anyopaque, indirectBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(self, "drawPrimitives:indirectBuffer:indirectBufferOffset:", void, .{primitiveType, indirectBuffer, indirectBufferOffset});
    }

    pub fn drawIndexedPrimitivesIndexTypeIndexBufferIndexBufferOffsetIndirectBufferIndirectBufferOffset(self: *@This(), primitiveType: PrimitiveType, indexType: IndexType, indexBuffer: ?*anyopaque, indexBufferOffset: objc.NSUInteger, indirectBuffer: ?*anyopaque, indirectBufferOffset: objc.NSUInteger, ) void {
        return objc.msgSend(self, "drawIndexedPrimitives:indexType:indexBuffer:indexBufferOffset:indirectBuffer:indirectBufferOffset:", void, .{primitiveType, indexType, indexBuffer, indexBufferOffset, indirectBuffer, indirectBufferOffset, });
    }

    pub fn textureBarrier(self: *@This()) void {
        return objc.msgSend(self, "textureBarrier", void, .{});
    }

    pub fn updateFenceAfterStages(self: *@This(), fence: ?*anyopaque, stages: RenderStages) void {
        return objc.msgSend(self, "updateFence:afterStages:", void, .{fence, stages});
    }

    pub fn waitForFenceBeforeStages(self: *@This(), fence: ?*anyopaque, stages: RenderStages) void {
        return objc.msgSend(self, "waitForFence:beforeStages:", void, .{fence, stages});
    }

    pub fn setTessellationFactorBufferOffsetInstanceStride(self: *@This(), buffer: ?*anyopaque, offset: objc.NSUInteger, instanceStride: objc.NSUInteger) void {
        return objc.msgSend(self, "setTessellationFactorBuffer:offset:instanceStride:", void, .{buffer, offset, instanceStride});
    }

    pub fn setTessellationFactorScale(self: *@This(), scale: f32) void {
        return objc.msgSend(self, "setTessellationFactorScale:", void, .{scale});
    }

    pub fn drawPatchesPatchStartPatchCountPatchIndexBufferPatchIndexBufferOffsetInstanceCountBaseInstance(self: *@This(), numberOfPatchControlPoints: objc.NSUInteger, patchStart: objc.NSUInteger, patchCount: objc.NSUInteger, patchIndexBuffer: ?*anyopaque, patchIndexBufferOffset: objc.NSUInteger, instanceCount: objc.NSUInteger, baseInstance: objc.NSUInteger, ) void {
        return objc.msgSend(self, "drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:", void, .{numberOfPatchControlPoints, patchStart, patchCount, patchIndexBuffer, patchIndexBufferOffset, instanceCount, baseInstance, });
    }

    pub fn drawPatchesPatchIndexBufferPatchIndexBufferOffsetIndirectBufferIndirectBufferOffset(self: *@This(), numberOfPatchControlPoints: objc.NSUInteger, patchIndexBuffer: ?*anyopaque, patchIndexBufferOffset: objc.NSUInteger, indirectBuffer: ?*anyopaque, indirectBufferOffset: objc.NSUInteger, ) void {
        return objc.msgSend(self, "drawPatches:patchIndexBuffer:patchIndexBufferOffset:indirectBuffer:indirectBufferOffset:", void, .{numberOfPatchControlPoints, patchIndexBuffer, patchIndexBufferOffset, indirectBuffer, indirectBufferOffset, });
    }

    pub fn drawIndexedPatchesPatchStartPatchCountPatchIndexBufferPatchIndexBufferOffsetControlPointIndexBufferControlPointIndexBufferOffsetInstanceCountBaseInstance(self: *@This(), numberOfPatchControlPoints: objc.NSUInteger, patchStart: objc.NSUInteger, patchCount: objc.NSUInteger, patchIndexBuffer: ?*anyopaque, patchIndexBufferOffset: objc.NSUInteger, controlPointIndexBuffer: ?*anyopaque, controlPointIndexBufferOffset: objc.NSUInteger, instanceCount: objc.NSUInteger, baseInstance: objc.NSUInteger, ) void {
        return objc.msgSend(self, "drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:", void, .{numberOfPatchControlPoints, patchStart, patchCount, patchIndexBuffer, patchIndexBufferOffset, controlPointIndexBuffer, controlPointIndexBufferOffset, instanceCount, baseInstance, });
    }

    pub fn drawIndexedPatchesPatchIndexBufferPatchIndexBufferOffsetControlPointIndexBufferControlPointIndexBufferOffsetIndirectBufferIndirectBufferOffset(self: *@This(), numberOfPatchControlPoints: objc.NSUInteger, patchIndexBuffer: ?*anyopaque, patchIndexBufferOffset: objc.NSUInteger, controlPointIndexBuffer: ?*anyopaque, controlPointIndexBufferOffset: objc.NSUInteger, indirectBuffer: ?*anyopaque, indirectBufferOffset: objc.NSUInteger, ) void {
        return objc.msgSend(self, "drawIndexedPatches:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:indirectBuffer:indirectBufferOffset:", void, .{numberOfPatchControlPoints, patchIndexBuffer, patchIndexBufferOffset, controlPointIndexBuffer, controlPointIndexBufferOffset, indirectBuffer, indirectBufferOffset, });
    }

    pub fn setTileBytesLengthAtIndex(self: *@This(), bytes: ?*anyopaque, length: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setTileBytes:length:atIndex:", void, .{bytes, length, index});
    }

    pub fn setTileBufferOffsetAtIndex(self: *@This(), buffer: ?*anyopaque, offset: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setTileBuffer:offset:atIndex:", void, .{buffer, offset, index});
    }

    pub fn setTileBufferOffsetAtIndex(self: *@This(), offset: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setTileBufferOffset:atIndex:", void, .{offset, index});
    }

    pub fn setTileBuffersOffsetsWithRange(self: *@This(), buffers: ?*?*anyopaque, offsets: ?*objc.NSUInteger, range: ns.Range) void {
        return objc.msgSend(self, "setTileBuffers:offsets:withRange:", void, .{buffers, offsets, range});
    }

    pub fn setTileTextureAtIndex(self: *@This(), texture: ?*anyopaque, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setTileTexture:atIndex:", void, .{texture, index});
    }

    pub fn setTileTexturesWithRange(self: *@This(), textures: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setTileTextures:withRange:", void, .{textures, range});
    }

    pub fn setTileSamplerStateAtIndex(self: *@This(), sampler: ?*anyopaque, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setTileSamplerState:atIndex:", void, .{sampler, index});
    }

    pub fn setTileSamplerStatesWithRange(self: *@This(), samplers: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setTileSamplerStates:withRange:", void, .{samplers, range});
    }

    pub fn setTileSamplerStateLodMinClampLodMaxClampAtIndex(self: *@This(), sampler: ?*anyopaque, lodMinClamp: f32, lodMaxClamp: f32, index: objc.NSUInteger, ) void {
        return objc.msgSend(self, "setTileSamplerState:lodMinClamp:lodMaxClamp:atIndex:", void, .{sampler, lodMinClamp, lodMaxClamp, index, });
    }

    pub fn setTileSamplerStatesLodMinClampsLodMaxClampsWithRange(self: *@This(), samplers: ?*?*anyopaque, lodMinClamps: ?*f32, lodMaxClamps: ?*f32, range: ns.Range, ) void {
        return objc.msgSend(self, "setTileSamplerStates:lodMinClamps:lodMaxClamps:withRange:", void, .{samplers, lodMinClamps, lodMaxClamps, range, });
    }

    pub fn setTileVisibleFunctionTableAtBufferIndex(self: *@This(), functionTable: ?*anyopaque, bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setTileVisibleFunctionTable:atBufferIndex:", void, .{functionTable, bufferIndex});
    }

    pub fn setTileVisibleFunctionTablesWithBufferRange(self: *@This(), functionTables: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setTileVisibleFunctionTables:withBufferRange:", void, .{functionTables, range});
    }

    pub fn setTileIntersectionFunctionTableAtBufferIndex(self: *@This(), intersectionFunctionTable: ?*anyopaque, bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setTileIntersectionFunctionTable:atBufferIndex:", void, .{intersectionFunctionTable, bufferIndex});
    }

    pub fn setTileIntersectionFunctionTablesWithBufferRange(self: *@This(), intersectionFunctionTables: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setTileIntersectionFunctionTables:withBufferRange:", void, .{intersectionFunctionTables, range});
    }

    pub fn setTileAccelerationStructureAtBufferIndex(self: *@This(), accelerationStructure: ?*anyopaque, bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setTileAccelerationStructure:atBufferIndex:", void, .{accelerationStructure, bufferIndex});
    }

    pub fn dispatchThreadsPerTile(self: *@This(), threadsPerTile: Size) void {
        return objc.msgSend(self, "dispatchThreadsPerTile:", void, .{threadsPerTile});
    }

    pub fn setThreadgroupMemoryLengthOffsetAtIndex(self: *@This(), length: objc.NSUInteger, offset: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setThreadgroupMemoryLength:offset:atIndex:", void, .{length, offset, index});
    }

    pub fn useResourceUsage(self: *@This(), resource: ?*anyopaque, usage: ResourceUsage) void {
        return objc.msgSend(self, "useResource:usage:", void, .{resource, usage});
    }

    pub fn useResourcesCountUsage(self: *@This(), resources: ?*?*anyopaque, count: objc.NSUInteger, usage: ResourceUsage) void {
        return objc.msgSend(self, "useResources:count:usage:", void, .{resources, count, usage});
    }

    pub fn useResourceUsageStages(self: *@This(), resource: ?*anyopaque, usage: ResourceUsage, stages: RenderStages) void {
        return objc.msgSend(self, "useResource:usage:stages:", void, .{resource, usage, stages});
    }

    pub fn useResourcesCountUsageStages(self: *@This(), resources: ?*?*anyopaque, count: objc.NSUInteger, usage: ResourceUsage, stages: RenderStages, ) void {
        return objc.msgSend(self, "useResources:count:usage:stages:", void, .{resources, count, usage, stages, });
    }

    pub fn useHeap(self: *@This(), heap: ?*anyopaque) void {
        return objc.msgSend(self, "useHeap:", void, .{heap});
    }

    pub fn useHeapsCount(self: *@This(), heaps: ?*?*anyopaque, count: objc.NSUInteger) void {
        return objc.msgSend(self, "useHeaps:count:", void, .{heaps, count});
    }

    pub fn useHeapStages(self: *@This(), heap: ?*anyopaque, stages: RenderStages) void {
        return objc.msgSend(self, "useHeap:stages:", void, .{heap, stages});
    }

    pub fn useHeapsCountStages(self: *@This(), heaps: ?*?*anyopaque, count: objc.NSUInteger, stages: RenderStages) void {
        return objc.msgSend(self, "useHeaps:count:stages:", void, .{heaps, count, stages});
    }

    pub fn executeCommandsInBufferWithRange(self: *@This(), indirectCommandBuffer: ?*anyopaque, executionRange: ns.Range) void {
        return objc.msgSend(self, "executeCommandsInBuffer:withRange:", void, .{indirectCommandBuffer, executionRange});
    }

    pub fn executeCommandsInBufferIndirectBufferIndirectBufferOffset(self: *@This(), indirectCommandbuffer: ?*anyopaque, indirectRangeBuffer: ?*anyopaque, indirectBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(self, "executeCommandsInBuffer:indirectBuffer:indirectBufferOffset:", void, .{indirectCommandbuffer, indirectRangeBuffer, indirectBufferOffset});
    }

    pub fn memoryBarrierWithScopeAfterStagesBeforeStages(self: *@This(), scope: BarrierScope, after: RenderStages, before: RenderStages) void {
        return objc.msgSend(self, "memoryBarrierWithScope:afterStages:beforeStages:", void, .{scope, after, before});
    }

    pub fn memoryBarrierWithResourcesCountAfterStagesBeforeStages(self: *@This(), resources: ?*?*anyopaque, count: objc.NSUInteger, after: RenderStages, before: RenderStages, ) void {
        return objc.msgSend(self, "memoryBarrierWithResources:count:afterStages:beforeStages:", void, .{resources, count, after, before, });
    }

    pub fn sampleCountersInBufferAtSampleIndexWithBarrier(self: *@This(), sampleBuffer: ?*anyopaque, sampleIndex: objc.NSUInteger, barrier: objc.BOOL) void {
        return objc.msgSend(self, "sampleCountersInBuffer:atSampleIndex:withBarrier:", void, .{sampleBuffer, sampleIndex, barrier});
    }

    pub fn tileWidth(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "tileWidth", objc.NSUInteger, .{});
    }

    pub fn tileHeight(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "tileHeight", objc.NSUInteger, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLFunctionHandle?language=objc
pub const FunctionHandle = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn functionType(self: *@This()) FunctionType {
        return objc.msgSend(self, "functionType", FunctionType, .{});
    }

    pub fn name(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "name", ?*ns.String, .{});
    }

    pub fn device(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "device", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLVisibleFunctionTableDescriptor?language=objc
pub const VisibleFunctionTableDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLVisibleFunctionTableDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn visibleFunctionTableDescriptor(self: *@This()) ?*VisibleFunctionTableDescriptor {
        return objc.msgSend(self, "visibleFunctionTableDescriptor", ?*VisibleFunctionTableDescriptor, .{});
    }

    pub fn functionCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "functionCount", objc.NSUInteger, .{});
    }

    pub fn setFunctionCount(self: *@This(), functionCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setFunctionCount:", void, .{functionCount});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLVisibleFunctionTable?language=objc
pub const VisibleFunctionTable = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{Resource, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn setFunctionAtIndex(self: *@This(), function: ?*anyopaque, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setFunction:atIndex:", void, .{function, index});
    }

    pub fn setFunctionsWithRange(self: *@This(), functions: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setFunctions:withRange:", void, .{functions, range});
    }

    pub fn gpuResourceID(self: *@This()) ResourceID {
        return objc.msgSend(self, "gpuResourceID", ResourceID, .{});
    }

};

pub const BlendFactor = enum(objc.NSUInteger) {
    Zero = 0,
    One = 1,
    SourceColor = 2,
    OneMinusSourceColor = 3,
    SourceAlpha = 4,
    OneMinusSourceAlpha = 5,
    DestinationColor = 6,
    OneMinusDestinationColor = 7,
    DestinationAlpha = 8,
    OneMinusDestinationAlpha = 9,
    SourceAlphaSaturated = 10,
    BlendColor = 11,
    OneMinusBlendColor = 12,
    BlendAlpha = 13,
    OneMinusBlendAlpha = 14,
    Source1Color = 15,
    OneMinusSource1Color = 16,
    Source1Alpha = 17,
    OneMinusSource1Alpha = 18,
};

pub const BlendOperation = enum(objc.NSUInteger) {
    Add = 0,
    Subtract = 1,
    ReverseSubtract = 2,
    Min = 3,
    Max = 4,
};

pub const ColorWriteMask = enum(objc.NSUInteger) {
    None = 0,
    Red = 8,
    Green = 4,
    Blue = 2,
    Alpha = 1,
    All = 15,
};

pub const PrimitiveTopologyClass = enum(objc.NSUInteger) {
    Unspecified = 0,
    Point = 1,
    Line = 2,
    Triangle = 3,
};

pub const TessellationPartitionMode = enum(objc.NSUInteger) {
    Pow2 = 0,
    Integer = 1,
    FractionalOdd = 2,
    FractionalEven = 3,
};

pub const TessellationFactorStepFunction = enum(objc.NSUInteger) {
    Constant = 0,
    PerPatch = 1,
    PerInstance = 2,
    PerPatchAndPerInstance = 3,
};

pub const TessellationFactorFormat = enum(objc.NSUInteger) {
    Half = 0,
};

pub const TessellationControlPointIndexType = enum(objc.NSUInteger) {
    None = 0,
    UInt16 = 1,
    UInt32 = 2,
};

/// https://developer.apple.com/documentation/Metal/MTLRenderPipelineColorAttachmentDescriptor?language=objc
pub const RenderPipelineColorAttachmentDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLRenderPipelineColorAttachmentDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn pixelFormat(self: *@This()) PixelFormat {
        return objc.msgSend(self, "pixelFormat", PixelFormat, .{});
    }

    pub fn setPixelFormat(self: *@This(), pixelFormat: PixelFormat) void {
        return objc.msgSend(self, "setPixelFormat:", void, .{pixelFormat});
    }

    pub fn isBlendingEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isBlendingEnabled", objc.BOOL, .{});
    }

    pub fn setBlendingEnabled(self: *@This(), blendingEnabled: objc.BOOL) void {
        return objc.msgSend(self, "setBlendingEnabled:", void, .{blendingEnabled});
    }

    pub fn sourceRGBBlendFactor(self: *@This()) BlendFactor {
        return objc.msgSend(self, "sourceRGBBlendFactor", BlendFactor, .{});
    }

    pub fn setSourceRGBBlendFactor(self: *@This(), sourceRGBBlendFactor: BlendFactor) void {
        return objc.msgSend(self, "setSourceRGBBlendFactor:", void, .{sourceRGBBlendFactor});
    }

    pub fn destinationRGBBlendFactor(self: *@This()) BlendFactor {
        return objc.msgSend(self, "destinationRGBBlendFactor", BlendFactor, .{});
    }

    pub fn setDestinationRGBBlendFactor(self: *@This(), destinationRGBBlendFactor: BlendFactor) void {
        return objc.msgSend(self, "setDestinationRGBBlendFactor:", void, .{destinationRGBBlendFactor});
    }

    pub fn rgbBlendOperation(self: *@This()) BlendOperation {
        return objc.msgSend(self, "rgbBlendOperation", BlendOperation, .{});
    }

    pub fn setRgbBlendOperation(self: *@This(), rgbBlendOperation: BlendOperation) void {
        return objc.msgSend(self, "setRgbBlendOperation:", void, .{rgbBlendOperation});
    }

    pub fn sourceAlphaBlendFactor(self: *@This()) BlendFactor {
        return objc.msgSend(self, "sourceAlphaBlendFactor", BlendFactor, .{});
    }

    pub fn setSourceAlphaBlendFactor(self: *@This(), sourceAlphaBlendFactor: BlendFactor) void {
        return objc.msgSend(self, "setSourceAlphaBlendFactor:", void, .{sourceAlphaBlendFactor});
    }

    pub fn destinationAlphaBlendFactor(self: *@This()) BlendFactor {
        return objc.msgSend(self, "destinationAlphaBlendFactor", BlendFactor, .{});
    }

    pub fn setDestinationAlphaBlendFactor(self: *@This(), destinationAlphaBlendFactor: BlendFactor) void {
        return objc.msgSend(self, "setDestinationAlphaBlendFactor:", void, .{destinationAlphaBlendFactor});
    }

    pub fn alphaBlendOperation(self: *@This()) BlendOperation {
        return objc.msgSend(self, "alphaBlendOperation", BlendOperation, .{});
    }

    pub fn setAlphaBlendOperation(self: *@This(), alphaBlendOperation: BlendOperation) void {
        return objc.msgSend(self, "setAlphaBlendOperation:", void, .{alphaBlendOperation});
    }

    pub fn writeMask(self: *@This()) ColorWriteMask {
        return objc.msgSend(self, "writeMask", ColorWriteMask, .{});
    }

    pub fn setWriteMask(self: *@This(), writeMask: ColorWriteMask) void {
        return objc.msgSend(self, "setWriteMask:", void, .{writeMask});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLRenderPipelineReflection?language=objc
pub const RenderPipelineReflection = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLRenderPipelineReflection", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn vertexBindings(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "vertexBindings", ?*anyopaque, .{});
    }

    pub fn fragmentBindings(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "fragmentBindings", ?*anyopaque, .{});
    }

    pub fn tileBindings(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "tileBindings", ?*anyopaque, .{});
    }

    pub fn objectBindings(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "objectBindings", ?*anyopaque, .{});
    }

    pub fn meshBindings(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "meshBindings", ?*anyopaque, .{});
    }

    pub fn vertexArguments(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "vertexArguments", ?*anyopaque, .{});
    }

    pub fn fragmentArguments(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "fragmentArguments", ?*anyopaque, .{});
    }

    pub fn tileArguments(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "tileArguments", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLRenderPipelineDescriptor?language=objc
pub const RenderPipelineDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLRenderPipelineDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn reset(self: *@This()) void {
        return objc.msgSend(self, "reset", void, .{});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*ns.String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

    pub fn vertexFunction(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "vertexFunction", ?*anyopaque, .{});
    }

    pub fn setVertexFunction(self: *@This(), vertexFunction: ?*anyopaque) void {
        return objc.msgSend(self, "setVertexFunction:", void, .{vertexFunction});
    }

    pub fn fragmentFunction(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "fragmentFunction", ?*anyopaque, .{});
    }

    pub fn setFragmentFunction(self: *@This(), fragmentFunction: ?*anyopaque) void {
        return objc.msgSend(self, "setFragmentFunction:", void, .{fragmentFunction});
    }

    pub fn vertexDescriptor(self: *@This()) ?*VertexDescriptor {
        return objc.msgSend(self, "vertexDescriptor", ?*VertexDescriptor, .{});
    }

    pub fn setVertexDescriptor(self: *@This(), vertexDescriptor: ?*VertexDescriptor) void {
        return objc.msgSend(self, "setVertexDescriptor:", void, .{vertexDescriptor});
    }

    pub fn sampleCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "sampleCount", objc.NSUInteger, .{});
    }

    pub fn setSampleCount(self: *@This(), sampleCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setSampleCount:", void, .{sampleCount});
    }

    pub fn rasterSampleCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "rasterSampleCount", objc.NSUInteger, .{});
    }

    pub fn setRasterSampleCount(self: *@This(), rasterSampleCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setRasterSampleCount:", void, .{rasterSampleCount});
    }

    pub fn isAlphaToCoverageEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAlphaToCoverageEnabled", objc.BOOL, .{});
    }

    pub fn setAlphaToCoverageEnabled(self: *@This(), alphaToCoverageEnabled: objc.BOOL) void {
        return objc.msgSend(self, "setAlphaToCoverageEnabled:", void, .{alphaToCoverageEnabled});
    }

    pub fn isAlphaToOneEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAlphaToOneEnabled", objc.BOOL, .{});
    }

    pub fn setAlphaToOneEnabled(self: *@This(), alphaToOneEnabled: objc.BOOL) void {
        return objc.msgSend(self, "setAlphaToOneEnabled:", void, .{alphaToOneEnabled});
    }

    pub fn isRasterizationEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isRasterizationEnabled", objc.BOOL, .{});
    }

    pub fn setRasterizationEnabled(self: *@This(), rasterizationEnabled: objc.BOOL) void {
        return objc.msgSend(self, "setRasterizationEnabled:", void, .{rasterizationEnabled});
    }

    pub fn maxVertexAmplificationCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxVertexAmplificationCount", objc.NSUInteger, .{});
    }

    pub fn setMaxVertexAmplificationCount(self: *@This(), maxVertexAmplificationCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaxVertexAmplificationCount:", void, .{maxVertexAmplificationCount});
    }

    pub fn colorAttachments(self: *@This()) ?*RenderPipelineColorAttachmentDescriptorArray {
        return objc.msgSend(self, "colorAttachments", ?*RenderPipelineColorAttachmentDescriptorArray, .{});
    }

    pub fn depthAttachmentPixelFormat(self: *@This()) PixelFormat {
        return objc.msgSend(self, "depthAttachmentPixelFormat", PixelFormat, .{});
    }

    pub fn setDepthAttachmentPixelFormat(self: *@This(), depthAttachmentPixelFormat: PixelFormat) void {
        return objc.msgSend(self, "setDepthAttachmentPixelFormat:", void, .{depthAttachmentPixelFormat});
    }

    pub fn stencilAttachmentPixelFormat(self: *@This()) PixelFormat {
        return objc.msgSend(self, "stencilAttachmentPixelFormat", PixelFormat, .{});
    }

    pub fn setStencilAttachmentPixelFormat(self: *@This(), stencilAttachmentPixelFormat: PixelFormat) void {
        return objc.msgSend(self, "setStencilAttachmentPixelFormat:", void, .{stencilAttachmentPixelFormat});
    }

    pub fn inputPrimitiveTopology(self: *@This()) PrimitiveTopologyClass {
        return objc.msgSend(self, "inputPrimitiveTopology", PrimitiveTopologyClass, .{});
    }

    pub fn setInputPrimitiveTopology(self: *@This(), inputPrimitiveTopology: PrimitiveTopologyClass) void {
        return objc.msgSend(self, "setInputPrimitiveTopology:", void, .{inputPrimitiveTopology});
    }

    pub fn tessellationPartitionMode(self: *@This()) TessellationPartitionMode {
        return objc.msgSend(self, "tessellationPartitionMode", TessellationPartitionMode, .{});
    }

    pub fn setTessellationPartitionMode(self: *@This(), tessellationPartitionMode: TessellationPartitionMode) void {
        return objc.msgSend(self, "setTessellationPartitionMode:", void, .{tessellationPartitionMode});
    }

    pub fn maxTessellationFactor(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxTessellationFactor", objc.NSUInteger, .{});
    }

    pub fn setMaxTessellationFactor(self: *@This(), maxTessellationFactor: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaxTessellationFactor:", void, .{maxTessellationFactor});
    }

    pub fn isTessellationFactorScaleEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isTessellationFactorScaleEnabled", objc.BOOL, .{});
    }

    pub fn setTessellationFactorScaleEnabled(self: *@This(), tessellationFactorScaleEnabled: objc.BOOL) void {
        return objc.msgSend(self, "setTessellationFactorScaleEnabled:", void, .{tessellationFactorScaleEnabled});
    }

    pub fn tessellationFactorFormat(self: *@This()) TessellationFactorFormat {
        return objc.msgSend(self, "tessellationFactorFormat", TessellationFactorFormat, .{});
    }

    pub fn setTessellationFactorFormat(self: *@This(), tessellationFactorFormat: TessellationFactorFormat) void {
        return objc.msgSend(self, "setTessellationFactorFormat:", void, .{tessellationFactorFormat});
    }

    pub fn tessellationControlPointIndexType(self: *@This()) TessellationControlPointIndexType {
        return objc.msgSend(self, "tessellationControlPointIndexType", TessellationControlPointIndexType, .{});
    }

    pub fn setTessellationControlPointIndexType(self: *@This(), tessellationControlPointIndexType: TessellationControlPointIndexType) void {
        return objc.msgSend(self, "setTessellationControlPointIndexType:", void, .{tessellationControlPointIndexType});
    }

    pub fn tessellationFactorStepFunction(self: *@This()) TessellationFactorStepFunction {
        return objc.msgSend(self, "tessellationFactorStepFunction", TessellationFactorStepFunction, .{});
    }

    pub fn setTessellationFactorStepFunction(self: *@This(), tessellationFactorStepFunction: TessellationFactorStepFunction) void {
        return objc.msgSend(self, "setTessellationFactorStepFunction:", void, .{tessellationFactorStepFunction});
    }

    pub fn tessellationOutputWindingOrder(self: *@This()) Winding {
        return objc.msgSend(self, "tessellationOutputWindingOrder", Winding, .{});
    }

    pub fn setTessellationOutputWindingOrder(self: *@This(), tessellationOutputWindingOrder: Winding) void {
        return objc.msgSend(self, "setTessellationOutputWindingOrder:", void, .{tessellationOutputWindingOrder});
    }

    pub fn vertexBuffers(self: *@This()) ?*PipelineBufferDescriptorArray {
        return objc.msgSend(self, "vertexBuffers", ?*PipelineBufferDescriptorArray, .{});
    }

    pub fn fragmentBuffers(self: *@This()) ?*PipelineBufferDescriptorArray {
        return objc.msgSend(self, "fragmentBuffers", ?*PipelineBufferDescriptorArray, .{});
    }

    pub fn supportIndirectCommandBuffers(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportIndirectCommandBuffers", objc.BOOL, .{});
    }

    pub fn setSupportIndirectCommandBuffers(self: *@This(), supportIndirectCommandBuffers: objc.BOOL) void {
        return objc.msgSend(self, "setSupportIndirectCommandBuffers:", void, .{supportIndirectCommandBuffers});
    }

    pub fn binaryArchives(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "binaryArchives", ?*anyopaque, .{});
    }

    pub fn setBinaryArchives(self: *@This(), binaryArchives: ?*anyopaque) void {
        return objc.msgSend(self, "setBinaryArchives:", void, .{binaryArchives});
    }

    pub fn vertexPreloadedLibraries(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "vertexPreloadedLibraries", ?*anyopaque, .{});
    }

    pub fn setVertexPreloadedLibraries(self: *@This(), vertexPreloadedLibraries: ?*anyopaque) void {
        return objc.msgSend(self, "setVertexPreloadedLibraries:", void, .{vertexPreloadedLibraries});
    }

    pub fn fragmentPreloadedLibraries(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "fragmentPreloadedLibraries", ?*anyopaque, .{});
    }

    pub fn setFragmentPreloadedLibraries(self: *@This(), fragmentPreloadedLibraries: ?*anyopaque) void {
        return objc.msgSend(self, "setFragmentPreloadedLibraries:", void, .{fragmentPreloadedLibraries});
    }

    pub fn vertexLinkedFunctions(self: *@This()) ?*LinkedFunctions {
        return objc.msgSend(self, "vertexLinkedFunctions", ?*LinkedFunctions, .{});
    }

    pub fn setVertexLinkedFunctions(self: *@This(), vertexLinkedFunctions: ?*LinkedFunctions) void {
        return objc.msgSend(self, "setVertexLinkedFunctions:", void, .{vertexLinkedFunctions});
    }

    pub fn fragmentLinkedFunctions(self: *@This()) ?*LinkedFunctions {
        return objc.msgSend(self, "fragmentLinkedFunctions", ?*LinkedFunctions, .{});
    }

    pub fn setFragmentLinkedFunctions(self: *@This(), fragmentLinkedFunctions: ?*LinkedFunctions) void {
        return objc.msgSend(self, "setFragmentLinkedFunctions:", void, .{fragmentLinkedFunctions});
    }

    pub fn supportAddingVertexBinaryFunctions(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportAddingVertexBinaryFunctions", objc.BOOL, .{});
    }

    pub fn setSupportAddingVertexBinaryFunctions(self: *@This(), supportAddingVertexBinaryFunctions: objc.BOOL) void {
        return objc.msgSend(self, "setSupportAddingVertexBinaryFunctions:", void, .{supportAddingVertexBinaryFunctions});
    }

    pub fn supportAddingFragmentBinaryFunctions(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportAddingFragmentBinaryFunctions", objc.BOOL, .{});
    }

    pub fn setSupportAddingFragmentBinaryFunctions(self: *@This(), supportAddingFragmentBinaryFunctions: objc.BOOL) void {
        return objc.msgSend(self, "setSupportAddingFragmentBinaryFunctions:", void, .{supportAddingFragmentBinaryFunctions});
    }

    pub fn maxVertexCallStackDepth(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxVertexCallStackDepth", objc.NSUInteger, .{});
    }

    pub fn setMaxVertexCallStackDepth(self: *@This(), maxVertexCallStackDepth: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaxVertexCallStackDepth:", void, .{maxVertexCallStackDepth});
    }

    pub fn maxFragmentCallStackDepth(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxFragmentCallStackDepth", objc.NSUInteger, .{});
    }

    pub fn setMaxFragmentCallStackDepth(self: *@This(), maxFragmentCallStackDepth: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaxFragmentCallStackDepth:", void, .{maxFragmentCallStackDepth});
    }

    pub fn shaderValidation(self: *@This()) ShaderValidation {
        return objc.msgSend(self, "shaderValidation", ShaderValidation, .{});
    }

    pub fn setShaderValidation(self: *@This(), shaderValidation: ShaderValidation) void {
        return objc.msgSend(self, "setShaderValidation:", void, .{shaderValidation});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLRenderPipelineFunctionsDescriptor?language=objc
pub const RenderPipelineFunctionsDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLRenderPipelineFunctionsDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn vertexAdditionalBinaryFunctions(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "vertexAdditionalBinaryFunctions", ?*anyopaque, .{});
    }

    pub fn setVertexAdditionalBinaryFunctions(self: *@This(), vertexAdditionalBinaryFunctions: ?*anyopaque) void {
        return objc.msgSend(self, "setVertexAdditionalBinaryFunctions:", void, .{vertexAdditionalBinaryFunctions});
    }

    pub fn fragmentAdditionalBinaryFunctions(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "fragmentAdditionalBinaryFunctions", ?*anyopaque, .{});
    }

    pub fn setFragmentAdditionalBinaryFunctions(self: *@This(), fragmentAdditionalBinaryFunctions: ?*anyopaque) void {
        return objc.msgSend(self, "setFragmentAdditionalBinaryFunctions:", void, .{fragmentAdditionalBinaryFunctions});
    }

    pub fn tileAdditionalBinaryFunctions(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "tileAdditionalBinaryFunctions", ?*anyopaque, .{});
    }

    pub fn setTileAdditionalBinaryFunctions(self: *@This(), tileAdditionalBinaryFunctions: ?*anyopaque) void {
        return objc.msgSend(self, "setTileAdditionalBinaryFunctions:", void, .{tileAdditionalBinaryFunctions});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLRenderPipelineState?language=objc
pub const RenderPipelineState = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn imageblockMemoryLengthForDimensions(self: *@This(), imageblockDimensions: Size) objc.NSUInteger {
        return objc.msgSend(self, "imageblockMemoryLengthForDimensions:", objc.NSUInteger, .{imageblockDimensions});
    }

    pub fn functionHandleWithFunctionStage(self: *@This(), function: ?*anyopaque, stage: RenderStages) ?*anyopaque {
        return objc.msgSend(self, "functionHandleWithFunction:stage:", ?*anyopaque, .{function, stage});
    }

    pub fn newVisibleFunctionTableWithDescriptorStage(self: *@This(), descriptor: ?*VisibleFunctionTableDescriptor, stage: RenderStages) ?*anyopaque {
        return objc.msgSend(self, "newVisibleFunctionTableWithDescriptor:stage:", ?*anyopaque, .{descriptor, stage});
    }

    pub fn newIntersectionFunctionTableWithDescriptorStage(self: *@This(), descriptor: ?*IntersectionFunctionTableDescriptor, stage: RenderStages) ?*anyopaque {
        return objc.msgSend(self, "newIntersectionFunctionTableWithDescriptor:stage:", ?*anyopaque, .{descriptor, stage});
    }

    pub fn newRenderPipelineStateWithAdditionalBinaryFunctionsError(self: *@This(), additionalBinaryFunctions: ?*RenderPipelineFunctionsDescriptor, @"error": ?*?*ns.Error) ?*anyopaque {
        return objc.msgSend(self, "newRenderPipelineStateWithAdditionalBinaryFunctions:error:", ?*anyopaque, .{additionalBinaryFunctions, @"error"});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn device(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "device", ?*anyopaque, .{});
    }

    pub fn maxTotalThreadsPerThreadgroup(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxTotalThreadsPerThreadgroup", objc.NSUInteger, .{});
    }

    pub fn threadgroupSizeMatchesTileSize(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "threadgroupSizeMatchesTileSize", objc.BOOL, .{});
    }

    pub fn imageblockSampleLength(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "imageblockSampleLength", objc.NSUInteger, .{});
    }

    pub fn supportIndirectCommandBuffers(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportIndirectCommandBuffers", objc.BOOL, .{});
    }

    pub fn maxTotalThreadsPerObjectThreadgroup(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxTotalThreadsPerObjectThreadgroup", objc.NSUInteger, .{});
    }

    pub fn maxTotalThreadsPerMeshThreadgroup(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxTotalThreadsPerMeshThreadgroup", objc.NSUInteger, .{});
    }

    pub fn objectThreadExecutionWidth(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "objectThreadExecutionWidth", objc.NSUInteger, .{});
    }

    pub fn meshThreadExecutionWidth(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "meshThreadExecutionWidth", objc.NSUInteger, .{});
    }

    pub fn maxTotalThreadgroupsPerMeshGrid(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxTotalThreadgroupsPerMeshGrid", objc.NSUInteger, .{});
    }

    pub fn gpuResourceID(self: *@This()) ResourceID {
        return objc.msgSend(self, "gpuResourceID", ResourceID, .{});
    }

    pub fn shaderValidation(self: *@This()) ShaderValidation {
        return objc.msgSend(self, "shaderValidation", ShaderValidation, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLRenderPipelineColorAttachmentDescriptorArray?language=objc
pub const RenderPipelineColorAttachmentDescriptorArray = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLRenderPipelineColorAttachmentDescriptorArray", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn objectAtIndexedSubscript(self: *@This(), attachmentIndex: objc.NSUInteger) ?*RenderPipelineColorAttachmentDescriptor {
        return objc.msgSend(self, "objectAtIndexedSubscript:", ?*RenderPipelineColorAttachmentDescriptor, .{attachmentIndex});
    }

    pub fn setObjectAtIndexedSubscript(self: *@This(), attachment: ?*RenderPipelineColorAttachmentDescriptor, attachmentIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setObject:atIndexedSubscript:", void, .{attachment, attachmentIndex});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLTileRenderPipelineColorAttachmentDescriptor?language=objc
pub const TileRenderPipelineColorAttachmentDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLTileRenderPipelineColorAttachmentDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn pixelFormat(self: *@This()) PixelFormat {
        return objc.msgSend(self, "pixelFormat", PixelFormat, .{});
    }

    pub fn setPixelFormat(self: *@This(), pixelFormat: PixelFormat) void {
        return objc.msgSend(self, "setPixelFormat:", void, .{pixelFormat});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLTileRenderPipelineColorAttachmentDescriptorArray?language=objc
pub const TileRenderPipelineColorAttachmentDescriptorArray = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLTileRenderPipelineColorAttachmentDescriptorArray", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn objectAtIndexedSubscript(self: *@This(), attachmentIndex: objc.NSUInteger) ?*TileRenderPipelineColorAttachmentDescriptor {
        return objc.msgSend(self, "objectAtIndexedSubscript:", ?*TileRenderPipelineColorAttachmentDescriptor, .{attachmentIndex});
    }

    pub fn setObjectAtIndexedSubscript(self: *@This(), attachment: ?*TileRenderPipelineColorAttachmentDescriptor, attachmentIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setObject:atIndexedSubscript:", void, .{attachment, attachmentIndex});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLTileRenderPipelineDescriptor?language=objc
pub const TileRenderPipelineDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLTileRenderPipelineDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn reset(self: *@This()) void {
        return objc.msgSend(self, "reset", void, .{});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*ns.String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

    pub fn tileFunction(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "tileFunction", ?*anyopaque, .{});
    }

    pub fn setTileFunction(self: *@This(), tileFunction: ?*anyopaque) void {
        return objc.msgSend(self, "setTileFunction:", void, .{tileFunction});
    }

    pub fn rasterSampleCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "rasterSampleCount", objc.NSUInteger, .{});
    }

    pub fn setRasterSampleCount(self: *@This(), rasterSampleCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setRasterSampleCount:", void, .{rasterSampleCount});
    }

    pub fn colorAttachments(self: *@This()) ?*TileRenderPipelineColorAttachmentDescriptorArray {
        return objc.msgSend(self, "colorAttachments", ?*TileRenderPipelineColorAttachmentDescriptorArray, .{});
    }

    pub fn threadgroupSizeMatchesTileSize(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "threadgroupSizeMatchesTileSize", objc.BOOL, .{});
    }

    pub fn setThreadgroupSizeMatchesTileSize(self: *@This(), threadgroupSizeMatchesTileSize: objc.BOOL) void {
        return objc.msgSend(self, "setThreadgroupSizeMatchesTileSize:", void, .{threadgroupSizeMatchesTileSize});
    }

    pub fn tileBuffers(self: *@This()) ?*PipelineBufferDescriptorArray {
        return objc.msgSend(self, "tileBuffers", ?*PipelineBufferDescriptorArray, .{});
    }

    pub fn maxTotalThreadsPerThreadgroup(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxTotalThreadsPerThreadgroup", objc.NSUInteger, .{});
    }

    pub fn setMaxTotalThreadsPerThreadgroup(self: *@This(), maxTotalThreadsPerThreadgroup: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaxTotalThreadsPerThreadgroup:", void, .{maxTotalThreadsPerThreadgroup});
    }

    pub fn binaryArchives(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "binaryArchives", ?*anyopaque, .{});
    }

    pub fn setBinaryArchives(self: *@This(), binaryArchives: ?*anyopaque) void {
        return objc.msgSend(self, "setBinaryArchives:", void, .{binaryArchives});
    }

    pub fn preloadedLibraries(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "preloadedLibraries", ?*anyopaque, .{});
    }

    pub fn setPreloadedLibraries(self: *@This(), preloadedLibraries: ?*anyopaque) void {
        return objc.msgSend(self, "setPreloadedLibraries:", void, .{preloadedLibraries});
    }

    pub fn linkedFunctions(self: *@This()) ?*LinkedFunctions {
        return objc.msgSend(self, "linkedFunctions", ?*LinkedFunctions, .{});
    }

    pub fn setLinkedFunctions(self: *@This(), linkedFunctions: ?*LinkedFunctions) void {
        return objc.msgSend(self, "setLinkedFunctions:", void, .{linkedFunctions});
    }

    pub fn supportAddingBinaryFunctions(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportAddingBinaryFunctions", objc.BOOL, .{});
    }

    pub fn setSupportAddingBinaryFunctions(self: *@This(), supportAddingBinaryFunctions: objc.BOOL) void {
        return objc.msgSend(self, "setSupportAddingBinaryFunctions:", void, .{supportAddingBinaryFunctions});
    }

    pub fn maxCallStackDepth(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxCallStackDepth", objc.NSUInteger, .{});
    }

    pub fn setMaxCallStackDepth(self: *@This(), maxCallStackDepth: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaxCallStackDepth:", void, .{maxCallStackDepth});
    }

    pub fn shaderValidation(self: *@This()) ShaderValidation {
        return objc.msgSend(self, "shaderValidation", ShaderValidation, .{});
    }

    pub fn setShaderValidation(self: *@This(), shaderValidation: ShaderValidation) void {
        return objc.msgSend(self, "setShaderValidation:", void, .{shaderValidation});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLMeshRenderPipelineDescriptor?language=objc
pub const MeshRenderPipelineDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLMeshRenderPipelineDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn reset(self: *@This()) void {
        return objc.msgSend(self, "reset", void, .{});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*ns.String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

    pub fn objectFunction(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "objectFunction", ?*anyopaque, .{});
    }

    pub fn setObjectFunction(self: *@This(), objectFunction: ?*anyopaque) void {
        return objc.msgSend(self, "setObjectFunction:", void, .{objectFunction});
    }

    pub fn meshFunction(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "meshFunction", ?*anyopaque, .{});
    }

    pub fn setMeshFunction(self: *@This(), meshFunction: ?*anyopaque) void {
        return objc.msgSend(self, "setMeshFunction:", void, .{meshFunction});
    }

    pub fn fragmentFunction(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "fragmentFunction", ?*anyopaque, .{});
    }

    pub fn setFragmentFunction(self: *@This(), fragmentFunction: ?*anyopaque) void {
        return objc.msgSend(self, "setFragmentFunction:", void, .{fragmentFunction});
    }

    pub fn maxTotalThreadsPerObjectThreadgroup(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxTotalThreadsPerObjectThreadgroup", objc.NSUInteger, .{});
    }

    pub fn setMaxTotalThreadsPerObjectThreadgroup(self: *@This(), maxTotalThreadsPerObjectThreadgroup: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaxTotalThreadsPerObjectThreadgroup:", void, .{maxTotalThreadsPerObjectThreadgroup});
    }

    pub fn maxTotalThreadsPerMeshThreadgroup(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxTotalThreadsPerMeshThreadgroup", objc.NSUInteger, .{});
    }

    pub fn setMaxTotalThreadsPerMeshThreadgroup(self: *@This(), maxTotalThreadsPerMeshThreadgroup: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaxTotalThreadsPerMeshThreadgroup:", void, .{maxTotalThreadsPerMeshThreadgroup});
    }

    pub fn objectThreadgroupSizeIsMultipleOfThreadExecutionWidth(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "objectThreadgroupSizeIsMultipleOfThreadExecutionWidth", objc.BOOL, .{});
    }

    pub fn setObjectThreadgroupSizeIsMultipleOfThreadExecutionWidth(self: *@This(), objectThreadgroupSizeIsMultipleOfThreadExecutionWidth: objc.BOOL) void {
        return objc.msgSend(self, "setObjectThreadgroupSizeIsMultipleOfThreadExecutionWidth:", void, .{objectThreadgroupSizeIsMultipleOfThreadExecutionWidth});
    }

    pub fn meshThreadgroupSizeIsMultipleOfThreadExecutionWidth(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "meshThreadgroupSizeIsMultipleOfThreadExecutionWidth", objc.BOOL, .{});
    }

    pub fn setMeshThreadgroupSizeIsMultipleOfThreadExecutionWidth(self: *@This(), meshThreadgroupSizeIsMultipleOfThreadExecutionWidth: objc.BOOL) void {
        return objc.msgSend(self, "setMeshThreadgroupSizeIsMultipleOfThreadExecutionWidth:", void, .{meshThreadgroupSizeIsMultipleOfThreadExecutionWidth});
    }

    pub fn payloadMemoryLength(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "payloadMemoryLength", objc.NSUInteger, .{});
    }

    pub fn setPayloadMemoryLength(self: *@This(), payloadMemoryLength: objc.NSUInteger) void {
        return objc.msgSend(self, "setPayloadMemoryLength:", void, .{payloadMemoryLength});
    }

    pub fn maxTotalThreadgroupsPerMeshGrid(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxTotalThreadgroupsPerMeshGrid", objc.NSUInteger, .{});
    }

    pub fn setMaxTotalThreadgroupsPerMeshGrid(self: *@This(), maxTotalThreadgroupsPerMeshGrid: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaxTotalThreadgroupsPerMeshGrid:", void, .{maxTotalThreadgroupsPerMeshGrid});
    }

    pub fn objectBuffers(self: *@This()) ?*PipelineBufferDescriptorArray {
        return objc.msgSend(self, "objectBuffers", ?*PipelineBufferDescriptorArray, .{});
    }

    pub fn meshBuffers(self: *@This()) ?*PipelineBufferDescriptorArray {
        return objc.msgSend(self, "meshBuffers", ?*PipelineBufferDescriptorArray, .{});
    }

    pub fn fragmentBuffers(self: *@This()) ?*PipelineBufferDescriptorArray {
        return objc.msgSend(self, "fragmentBuffers", ?*PipelineBufferDescriptorArray, .{});
    }

    pub fn rasterSampleCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "rasterSampleCount", objc.NSUInteger, .{});
    }

    pub fn setRasterSampleCount(self: *@This(), rasterSampleCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setRasterSampleCount:", void, .{rasterSampleCount});
    }

    pub fn isAlphaToCoverageEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAlphaToCoverageEnabled", objc.BOOL, .{});
    }

    pub fn setAlphaToCoverageEnabled(self: *@This(), alphaToCoverageEnabled: objc.BOOL) void {
        return objc.msgSend(self, "setAlphaToCoverageEnabled:", void, .{alphaToCoverageEnabled});
    }

    pub fn isAlphaToOneEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isAlphaToOneEnabled", objc.BOOL, .{});
    }

    pub fn setAlphaToOneEnabled(self: *@This(), alphaToOneEnabled: objc.BOOL) void {
        return objc.msgSend(self, "setAlphaToOneEnabled:", void, .{alphaToOneEnabled});
    }

    pub fn isRasterizationEnabled(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isRasterizationEnabled", objc.BOOL, .{});
    }

    pub fn setRasterizationEnabled(self: *@This(), rasterizationEnabled: objc.BOOL) void {
        return objc.msgSend(self, "setRasterizationEnabled:", void, .{rasterizationEnabled});
    }

    pub fn maxVertexAmplificationCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxVertexAmplificationCount", objc.NSUInteger, .{});
    }

    pub fn setMaxVertexAmplificationCount(self: *@This(), maxVertexAmplificationCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaxVertexAmplificationCount:", void, .{maxVertexAmplificationCount});
    }

    pub fn colorAttachments(self: *@This()) ?*RenderPipelineColorAttachmentDescriptorArray {
        return objc.msgSend(self, "colorAttachments", ?*RenderPipelineColorAttachmentDescriptorArray, .{});
    }

    pub fn depthAttachmentPixelFormat(self: *@This()) PixelFormat {
        return objc.msgSend(self, "depthAttachmentPixelFormat", PixelFormat, .{});
    }

    pub fn setDepthAttachmentPixelFormat(self: *@This(), depthAttachmentPixelFormat: PixelFormat) void {
        return objc.msgSend(self, "setDepthAttachmentPixelFormat:", void, .{depthAttachmentPixelFormat});
    }

    pub fn stencilAttachmentPixelFormat(self: *@This()) PixelFormat {
        return objc.msgSend(self, "stencilAttachmentPixelFormat", PixelFormat, .{});
    }

    pub fn setStencilAttachmentPixelFormat(self: *@This(), stencilAttachmentPixelFormat: PixelFormat) void {
        return objc.msgSend(self, "setStencilAttachmentPixelFormat:", void, .{stencilAttachmentPixelFormat});
    }

    pub fn supportIndirectCommandBuffers(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportIndirectCommandBuffers", objc.BOOL, .{});
    }

    pub fn setSupportIndirectCommandBuffers(self: *@This(), supportIndirectCommandBuffers: objc.BOOL) void {
        return objc.msgSend(self, "setSupportIndirectCommandBuffers:", void, .{supportIndirectCommandBuffers});
    }

    pub fn binaryArchives(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "binaryArchives", ?*anyopaque, .{});
    }

    pub fn setBinaryArchives(self: *@This(), binaryArchives: ?*anyopaque) void {
        return objc.msgSend(self, "setBinaryArchives:", void, .{binaryArchives});
    }

    pub fn objectLinkedFunctions(self: *@This()) ?*LinkedFunctions {
        return objc.msgSend(self, "objectLinkedFunctions", ?*LinkedFunctions, .{});
    }

    pub fn setObjectLinkedFunctions(self: *@This(), objectLinkedFunctions: ?*LinkedFunctions) void {
        return objc.msgSend(self, "setObjectLinkedFunctions:", void, .{objectLinkedFunctions});
    }

    pub fn meshLinkedFunctions(self: *@This()) ?*LinkedFunctions {
        return objc.msgSend(self, "meshLinkedFunctions", ?*LinkedFunctions, .{});
    }

    pub fn setMeshLinkedFunctions(self: *@This(), meshLinkedFunctions: ?*LinkedFunctions) void {
        return objc.msgSend(self, "setMeshLinkedFunctions:", void, .{meshLinkedFunctions});
    }

    pub fn fragmentLinkedFunctions(self: *@This()) ?*LinkedFunctions {
        return objc.msgSend(self, "fragmentLinkedFunctions", ?*LinkedFunctions, .{});
    }

    pub fn setFragmentLinkedFunctions(self: *@This(), fragmentLinkedFunctions: ?*LinkedFunctions) void {
        return objc.msgSend(self, "setFragmentLinkedFunctions:", void, .{fragmentLinkedFunctions});
    }

    pub fn shaderValidation(self: *@This()) ShaderValidation {
        return objc.msgSend(self, "shaderValidation", ShaderValidation, .{});
    }

    pub fn setShaderValidation(self: *@This(), shaderValidation: ShaderValidation) void {
        return objc.msgSend(self, "setShaderValidation:", void, .{shaderValidation});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLParallelRenderCommandEncoder?language=objc
pub const ParallelRenderCommandEncoder = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{CommandEncoder, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn renderCommandEncoder(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "renderCommandEncoder", ?*anyopaque, .{});
    }

    pub fn setColorStoreActionAtIndex(self: *@This(), storeAction: StoreAction, colorAttachmentIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setColorStoreAction:atIndex:", void, .{storeAction, colorAttachmentIndex});
    }

    pub fn setDepthStoreAction(self: *@This(), storeAction: StoreAction) void {
        return objc.msgSend(self, "setDepthStoreAction:", void, .{storeAction});
    }

    pub fn setStencilStoreAction(self: *@This(), storeAction: StoreAction) void {
        return objc.msgSend(self, "setStencilStoreAction:", void, .{storeAction});
    }

    pub fn setColorStoreActionOptionsAtIndex(self: *@This(), storeActionOptions: StoreActionOptions, colorAttachmentIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setColorStoreActionOptions:atIndex:", void, .{storeActionOptions, colorAttachmentIndex});
    }

    pub fn setDepthStoreActionOptions(self: *@This(), storeActionOptions: StoreActionOptions) void {
        return objc.msgSend(self, "setDepthStoreActionOptions:", void, .{storeActionOptions});
    }

    pub fn setStencilStoreActionOptions(self: *@This(), storeActionOptions: StoreActionOptions) void {
        return objc.msgSend(self, "setStencilStoreActionOptions:", void, .{storeActionOptions});
    }

};

pub const SamplerMinMagFilter = enum(objc.NSUInteger) {
    Nearest = 0,
    Linear = 1,
};

pub const SamplerMipFilter = enum(objc.NSUInteger) {
    NotMipmapped = 0,
    Nearest = 1,
    Linear = 2,
};

pub const SamplerAddressMode = enum(objc.NSUInteger) {
    ClampToEdge = 0,
    MirrorClampToEdge = 1,
    Repeat = 2,
    MirrorRepeat = 3,
    ClampToZero = 4,
    ClampToBorderColor = 5,
};

pub const SamplerBorderColor = enum(objc.NSUInteger) {
    TransparentBlack = 0,
    OpaqueBlack = 1,
    OpaqueWhite = 2,
};

/// https://developer.apple.com/documentation/Metal/MTLSamplerDescriptor?language=objc
pub const SamplerDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLSamplerDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn minFilter(self: *@This()) SamplerMinMagFilter {
        return objc.msgSend(self, "minFilter", SamplerMinMagFilter, .{});
    }

    pub fn setMinFilter(self: *@This(), minFilter: SamplerMinMagFilter) void {
        return objc.msgSend(self, "setMinFilter:", void, .{minFilter});
    }

    pub fn magFilter(self: *@This()) SamplerMinMagFilter {
        return objc.msgSend(self, "magFilter", SamplerMinMagFilter, .{});
    }

    pub fn setMagFilter(self: *@This(), magFilter: SamplerMinMagFilter) void {
        return objc.msgSend(self, "setMagFilter:", void, .{magFilter});
    }

    pub fn mipFilter(self: *@This()) SamplerMipFilter {
        return objc.msgSend(self, "mipFilter", SamplerMipFilter, .{});
    }

    pub fn setMipFilter(self: *@This(), mipFilter: SamplerMipFilter) void {
        return objc.msgSend(self, "setMipFilter:", void, .{mipFilter});
    }

    pub fn maxAnisotropy(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxAnisotropy", objc.NSUInteger, .{});
    }

    pub fn setMaxAnisotropy(self: *@This(), maxAnisotropy: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaxAnisotropy:", void, .{maxAnisotropy});
    }

    pub fn sAddressMode(self: *@This()) SamplerAddressMode {
        return objc.msgSend(self, "sAddressMode", SamplerAddressMode, .{});
    }

    pub fn setSAddressMode(self: *@This(), sAddressMode: SamplerAddressMode) void {
        return objc.msgSend(self, "setSAddressMode:", void, .{sAddressMode});
    }

    pub fn tAddressMode(self: *@This()) SamplerAddressMode {
        return objc.msgSend(self, "tAddressMode", SamplerAddressMode, .{});
    }

    pub fn setTAddressMode(self: *@This(), tAddressMode: SamplerAddressMode) void {
        return objc.msgSend(self, "setTAddressMode:", void, .{tAddressMode});
    }

    pub fn rAddressMode(self: *@This()) SamplerAddressMode {
        return objc.msgSend(self, "rAddressMode", SamplerAddressMode, .{});
    }

    pub fn setRAddressMode(self: *@This(), rAddressMode: SamplerAddressMode) void {
        return objc.msgSend(self, "setRAddressMode:", void, .{rAddressMode});
    }

    pub fn borderColor(self: *@This()) SamplerBorderColor {
        return objc.msgSend(self, "borderColor", SamplerBorderColor, .{});
    }

    pub fn setBorderColor(self: *@This(), borderColor: SamplerBorderColor) void {
        return objc.msgSend(self, "setBorderColor:", void, .{borderColor});
    }

    pub fn normalizedCoordinates(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "normalizedCoordinates", objc.BOOL, .{});
    }

    pub fn setNormalizedCoordinates(self: *@This(), normalizedCoordinates: objc.BOOL) void {
        return objc.msgSend(self, "setNormalizedCoordinates:", void, .{normalizedCoordinates});
    }

    pub fn lodMinClamp(self: *@This()) f32 {
        return objc.msgSend(self, "lodMinClamp", f32, .{});
    }

    pub fn setLodMinClamp(self: *@This(), lodMinClamp: f32) void {
        return objc.msgSend(self, "setLodMinClamp:", void, .{lodMinClamp});
    }

    pub fn lodMaxClamp(self: *@This()) f32 {
        return objc.msgSend(self, "lodMaxClamp", f32, .{});
    }

    pub fn setLodMaxClamp(self: *@This(), lodMaxClamp: f32) void {
        return objc.msgSend(self, "setLodMaxClamp:", void, .{lodMaxClamp});
    }

    pub fn lodAverage(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "lodAverage", objc.BOOL, .{});
    }

    pub fn setLodAverage(self: *@This(), lodAverage: objc.BOOL) void {
        return objc.msgSend(self, "setLodAverage:", void, .{lodAverage});
    }

    pub fn compareFunction(self: *@This()) CompareFunction {
        return objc.msgSend(self, "compareFunction", CompareFunction, .{});
    }

    pub fn setCompareFunction(self: *@This(), compareFunction: CompareFunction) void {
        return objc.msgSend(self, "setCompareFunction:", void, .{compareFunction});
    }

    pub fn supportArgumentBuffers(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportArgumentBuffers", objc.BOOL, .{});
    }

    pub fn setSupportArgumentBuffers(self: *@This(), supportArgumentBuffers: objc.BOOL) void {
        return objc.msgSend(self, "setSupportArgumentBuffers:", void, .{supportArgumentBuffers});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*ns.String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLSamplerState?language=objc
pub const SamplerState = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn device(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "device", ?*anyopaque, .{});
    }

    pub fn gpuResourceID(self: *@This()) ResourceID {
        return objc.msgSend(self, "gpuResourceID", ResourceID, .{});
    }

};

pub const _MTLPackedFloat3 = extern struct {};

pub const anon115 = extern union {
    elements: [3] f32,
};

pub const anon129 = extern struct {
    x: f32,
    y: f32,
    z: f32,
};

pub extern "Metal" fn PackedFloat3Make(x: f32, y: f32, z: f32) callconv(.C) PackedFloat3;

pub const PackedFloatQuaternion = extern struct {
    x: f32,
    y: f32,
    z: f32,
    w: f32,
};

pub extern "Metal" fn PackedFloatQuaternionMake(x: f32, y: f32, z: f32, w: f32, ) callconv(.C) PackedFloatQuaternion;

pub const _MTLPackedFloat4x3 = extern struct {
    columns: [4] PackedFloat3,
};

pub const _MTLAxisAlignedBoundingBox = extern struct {
    min: PackedFloat3,
    max: PackedFloat3,
};

pub const ComponentTransform = extern struct {
    scale: PackedFloat3,
    shear: PackedFloat3,
    pivot: PackedFloat3,
    rotation: PackedFloatQuaternion,
    translation: PackedFloat3,
};

pub const AccelerationStructureUsage = enum(objc.NSUInteger) {
    None = 0,
    Refit = 1,
    PreferFastBuild = 2,
    ExtendedLimits = 4,
};

pub const AccelerationStructureInstanceOptions = enum(objc.uint32_t) {
    None = 0,
    DisableTriangleCulling = 1,
    TriangleFrontFacingWindingCounterClockwise = 2,
    Opaque = 4,
    NonOpaque = 8,
};

pub const MatrixLayout = enum(objc.NSInteger) {
    ColumnMajor = 0,
    RowMajor = 1,
};

/// https://developer.apple.com/documentation/Metal/MTLAccelerationStructureDescriptor?language=objc
pub const AccelerationStructureDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLAccelerationStructureDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn usage(self: *@This()) AccelerationStructureUsage {
        return objc.msgSend(self, "usage", AccelerationStructureUsage, .{});
    }

    pub fn setUsage(self: *@This(), usage: AccelerationStructureUsage) void {
        return objc.msgSend(self, "setUsage:", void, .{usage});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLAccelerationStructureGeometryDescriptor?language=objc
pub const AccelerationStructureGeometryDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLAccelerationStructureGeometryDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn intersectionFunctionTableOffset(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "intersectionFunctionTableOffset", objc.NSUInteger, .{});
    }

    pub fn setIntersectionFunctionTableOffset(self: *@This(), intersectionFunctionTableOffset: objc.NSUInteger) void {
        return objc.msgSend(self, "setIntersectionFunctionTableOffset:", void, .{intersectionFunctionTableOffset});
    }

    pub fn opaque(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "opaque", objc.BOOL, .{});
    }

    pub fn setOpaque(self: *@This(), opaque: objc.BOOL) void {
        return objc.msgSend(self, "setOpaque:", void, .{opaque});
    }

    pub fn allowDuplicateIntersectionFunctionInvocation(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowDuplicateIntersectionFunctionInvocation", objc.BOOL, .{});
    }

    pub fn setAllowDuplicateIntersectionFunctionInvocation(self: *@This(), allowDuplicateIntersectionFunctionInvocation: objc.BOOL) void {
        return objc.msgSend(self, "setAllowDuplicateIntersectionFunctionInvocation:", void, .{allowDuplicateIntersectionFunctionInvocation});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*ns.String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

    pub fn primitiveDataBuffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "primitiveDataBuffer", ?*anyopaque, .{});
    }

    pub fn setPrimitiveDataBuffer(self: *@This(), primitiveDataBuffer: ?*anyopaque) void {
        return objc.msgSend(self, "setPrimitiveDataBuffer:", void, .{primitiveDataBuffer});
    }

    pub fn primitiveDataBufferOffset(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "primitiveDataBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setPrimitiveDataBufferOffset(self: *@This(), primitiveDataBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(self, "setPrimitiveDataBufferOffset:", void, .{primitiveDataBufferOffset});
    }

    pub fn primitiveDataStride(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "primitiveDataStride", objc.NSUInteger, .{});
    }

    pub fn setPrimitiveDataStride(self: *@This(), primitiveDataStride: objc.NSUInteger) void {
        return objc.msgSend(self, "setPrimitiveDataStride:", void, .{primitiveDataStride});
    }

    pub fn primitiveDataElementSize(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "primitiveDataElementSize", objc.NSUInteger, .{});
    }

    pub fn setPrimitiveDataElementSize(self: *@This(), primitiveDataElementSize: objc.NSUInteger) void {
        return objc.msgSend(self, "setPrimitiveDataElementSize:", void, .{primitiveDataElementSize});
    }

};

pub const MotionBorderMode = enum(objc.uint32_t) {
    Clamp = 0,
    Vanish = 1,
};

/// https://developer.apple.com/documentation/Metal/MTLPrimitiveAccelerationStructureDescriptor?language=objc
pub const PrimitiveAccelerationStructureDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLPrimitiveAccelerationStructureDescriptor", @This(), AccelerationStructureDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn descriptor(self: *@This()) *@This() {
        return objc.msgSend(self, "descriptor", *@This(), .{});
    }

    pub fn geometryDescriptors(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "geometryDescriptors", ?*anyopaque, .{});
    }

    pub fn setGeometryDescriptors(self: *@This(), geometryDescriptors: ?*anyopaque) void {
        return objc.msgSend(self, "setGeometryDescriptors:", void, .{geometryDescriptors});
    }

    pub fn motionStartBorderMode(self: *@This()) MotionBorderMode {
        return objc.msgSend(self, "motionStartBorderMode", MotionBorderMode, .{});
    }

    pub fn setMotionStartBorderMode(self: *@This(), motionStartBorderMode: MotionBorderMode) void {
        return objc.msgSend(self, "setMotionStartBorderMode:", void, .{motionStartBorderMode});
    }

    pub fn motionEndBorderMode(self: *@This()) MotionBorderMode {
        return objc.msgSend(self, "motionEndBorderMode", MotionBorderMode, .{});
    }

    pub fn setMotionEndBorderMode(self: *@This(), motionEndBorderMode: MotionBorderMode) void {
        return objc.msgSend(self, "setMotionEndBorderMode:", void, .{motionEndBorderMode});
    }

    pub fn motionStartTime(self: *@This()) f32 {
        return objc.msgSend(self, "motionStartTime", f32, .{});
    }

    pub fn setMotionStartTime(self: *@This(), motionStartTime: f32) void {
        return objc.msgSend(self, "setMotionStartTime:", void, .{motionStartTime});
    }

    pub fn motionEndTime(self: *@This()) f32 {
        return objc.msgSend(self, "motionEndTime", f32, .{});
    }

    pub fn setMotionEndTime(self: *@This(), motionEndTime: f32) void {
        return objc.msgSend(self, "setMotionEndTime:", void, .{motionEndTime});
    }

    pub fn motionKeyframeCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "motionKeyframeCount", objc.NSUInteger, .{});
    }

    pub fn setMotionKeyframeCount(self: *@This(), motionKeyframeCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setMotionKeyframeCount:", void, .{motionKeyframeCount});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLAccelerationStructureTriangleGeometryDescriptor?language=objc
pub const AccelerationStructureTriangleGeometryDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLAccelerationStructureTriangleGeometryDescriptor", @This(), AccelerationStructureGeometryDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn descriptor(self: *@This()) *@This() {
        return objc.msgSend(self, "descriptor", *@This(), .{});
    }

    pub fn vertexBuffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "vertexBuffer", ?*anyopaque, .{});
    }

    pub fn setVertexBuffer(self: *@This(), vertexBuffer: ?*anyopaque) void {
        return objc.msgSend(self, "setVertexBuffer:", void, .{vertexBuffer});
    }

    pub fn vertexBufferOffset(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "vertexBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setVertexBufferOffset(self: *@This(), vertexBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(self, "setVertexBufferOffset:", void, .{vertexBufferOffset});
    }

    pub fn vertexFormat(self: *@This()) AttributeFormat {
        return objc.msgSend(self, "vertexFormat", AttributeFormat, .{});
    }

    pub fn setVertexFormat(self: *@This(), vertexFormat: AttributeFormat) void {
        return objc.msgSend(self, "setVertexFormat:", void, .{vertexFormat});
    }

    pub fn vertexStride(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "vertexStride", objc.NSUInteger, .{});
    }

    pub fn setVertexStride(self: *@This(), vertexStride: objc.NSUInteger) void {
        return objc.msgSend(self, "setVertexStride:", void, .{vertexStride});
    }

    pub fn indexBuffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "indexBuffer", ?*anyopaque, .{});
    }

    pub fn setIndexBuffer(self: *@This(), indexBuffer: ?*anyopaque) void {
        return objc.msgSend(self, "setIndexBuffer:", void, .{indexBuffer});
    }

    pub fn indexBufferOffset(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "indexBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setIndexBufferOffset(self: *@This(), indexBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(self, "setIndexBufferOffset:", void, .{indexBufferOffset});
    }

    pub fn indexType(self: *@This()) IndexType {
        return objc.msgSend(self, "indexType", IndexType, .{});
    }

    pub fn setIndexType(self: *@This(), indexType: IndexType) void {
        return objc.msgSend(self, "setIndexType:", void, .{indexType});
    }

    pub fn triangleCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "triangleCount", objc.NSUInteger, .{});
    }

    pub fn setTriangleCount(self: *@This(), triangleCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setTriangleCount:", void, .{triangleCount});
    }

    pub fn transformationMatrixBuffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "transformationMatrixBuffer", ?*anyopaque, .{});
    }

    pub fn setTransformationMatrixBuffer(self: *@This(), transformationMatrixBuffer: ?*anyopaque) void {
        return objc.msgSend(self, "setTransformationMatrixBuffer:", void, .{transformationMatrixBuffer});
    }

    pub fn transformationMatrixBufferOffset(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "transformationMatrixBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setTransformationMatrixBufferOffset(self: *@This(), transformationMatrixBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(self, "setTransformationMatrixBufferOffset:", void, .{transformationMatrixBufferOffset});
    }

    pub fn transformationMatrixLayout(self: *@This()) MatrixLayout {
        return objc.msgSend(self, "transformationMatrixLayout", MatrixLayout, .{});
    }

    pub fn setTransformationMatrixLayout(self: *@This(), transformationMatrixLayout: MatrixLayout) void {
        return objc.msgSend(self, "setTransformationMatrixLayout:", void, .{transformationMatrixLayout});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLAccelerationStructureBoundingBoxGeometryDescriptor?language=objc
pub const AccelerationStructureBoundingBoxGeometryDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLAccelerationStructureBoundingBoxGeometryDescriptor", @This(), AccelerationStructureGeometryDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn descriptor(self: *@This()) *@This() {
        return objc.msgSend(self, "descriptor", *@This(), .{});
    }

    pub fn boundingBoxBuffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "boundingBoxBuffer", ?*anyopaque, .{});
    }

    pub fn setBoundingBoxBuffer(self: *@This(), boundingBoxBuffer: ?*anyopaque) void {
        return objc.msgSend(self, "setBoundingBoxBuffer:", void, .{boundingBoxBuffer});
    }

    pub fn boundingBoxBufferOffset(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "boundingBoxBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setBoundingBoxBufferOffset(self: *@This(), boundingBoxBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(self, "setBoundingBoxBufferOffset:", void, .{boundingBoxBufferOffset});
    }

    pub fn boundingBoxStride(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "boundingBoxStride", objc.NSUInteger, .{});
    }

    pub fn setBoundingBoxStride(self: *@This(), boundingBoxStride: objc.NSUInteger) void {
        return objc.msgSend(self, "setBoundingBoxStride:", void, .{boundingBoxStride});
    }

    pub fn boundingBoxCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "boundingBoxCount", objc.NSUInteger, .{});
    }

    pub fn setBoundingBoxCount(self: *@This(), boundingBoxCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setBoundingBoxCount:", void, .{boundingBoxCount});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLMotionKeyframeData?language=objc
pub const MotionKeyframeData = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLMotionKeyframeData", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn data(self: *@This()) *@This() {
        return objc.msgSend(self, "data", *@This(), .{});
    }

    pub fn buffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "buffer", ?*anyopaque, .{});
    }

    pub fn setBuffer(self: *@This(), buffer: ?*anyopaque) void {
        return objc.msgSend(self, "setBuffer:", void, .{buffer});
    }

    pub fn offset(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "offset", objc.NSUInteger, .{});
    }

    pub fn setOffset(self: *@This(), offset: objc.NSUInteger) void {
        return objc.msgSend(self, "setOffset:", void, .{offset});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLAccelerationStructureMotionTriangleGeometryDescriptor?language=objc
pub const AccelerationStructureMotionTriangleGeometryDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLAccelerationStructureMotionTriangleGeometryDescriptor", @This(), AccelerationStructureGeometryDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn descriptor(self: *@This()) *@This() {
        return objc.msgSend(self, "descriptor", *@This(), .{});
    }

    pub fn vertexBuffers(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "vertexBuffers", ?*anyopaque, .{});
    }

    pub fn setVertexBuffers(self: *@This(), vertexBuffers: ?*anyopaque) void {
        return objc.msgSend(self, "setVertexBuffers:", void, .{vertexBuffers});
    }

    pub fn vertexFormat(self: *@This()) AttributeFormat {
        return objc.msgSend(self, "vertexFormat", AttributeFormat, .{});
    }

    pub fn setVertexFormat(self: *@This(), vertexFormat: AttributeFormat) void {
        return objc.msgSend(self, "setVertexFormat:", void, .{vertexFormat});
    }

    pub fn vertexStride(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "vertexStride", objc.NSUInteger, .{});
    }

    pub fn setVertexStride(self: *@This(), vertexStride: objc.NSUInteger) void {
        return objc.msgSend(self, "setVertexStride:", void, .{vertexStride});
    }

    pub fn indexBuffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "indexBuffer", ?*anyopaque, .{});
    }

    pub fn setIndexBuffer(self: *@This(), indexBuffer: ?*anyopaque) void {
        return objc.msgSend(self, "setIndexBuffer:", void, .{indexBuffer});
    }

    pub fn indexBufferOffset(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "indexBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setIndexBufferOffset(self: *@This(), indexBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(self, "setIndexBufferOffset:", void, .{indexBufferOffset});
    }

    pub fn indexType(self: *@This()) IndexType {
        return objc.msgSend(self, "indexType", IndexType, .{});
    }

    pub fn setIndexType(self: *@This(), indexType: IndexType) void {
        return objc.msgSend(self, "setIndexType:", void, .{indexType});
    }

    pub fn triangleCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "triangleCount", objc.NSUInteger, .{});
    }

    pub fn setTriangleCount(self: *@This(), triangleCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setTriangleCount:", void, .{triangleCount});
    }

    pub fn transformationMatrixBuffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "transformationMatrixBuffer", ?*anyopaque, .{});
    }

    pub fn setTransformationMatrixBuffer(self: *@This(), transformationMatrixBuffer: ?*anyopaque) void {
        return objc.msgSend(self, "setTransformationMatrixBuffer:", void, .{transformationMatrixBuffer});
    }

    pub fn transformationMatrixBufferOffset(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "transformationMatrixBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setTransformationMatrixBufferOffset(self: *@This(), transformationMatrixBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(self, "setTransformationMatrixBufferOffset:", void, .{transformationMatrixBufferOffset});
    }

    pub fn transformationMatrixLayout(self: *@This()) MatrixLayout {
        return objc.msgSend(self, "transformationMatrixLayout", MatrixLayout, .{});
    }

    pub fn setTransformationMatrixLayout(self: *@This(), transformationMatrixLayout: MatrixLayout) void {
        return objc.msgSend(self, "setTransformationMatrixLayout:", void, .{transformationMatrixLayout});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLAccelerationStructureMotionBoundingBoxGeometryDescriptor?language=objc
pub const AccelerationStructureMotionBoundingBoxGeometryDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLAccelerationStructureMotionBoundingBoxGeometryDescriptor", @This(), AccelerationStructureGeometryDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn descriptor(self: *@This()) *@This() {
        return objc.msgSend(self, "descriptor", *@This(), .{});
    }

    pub fn boundingBoxBuffers(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "boundingBoxBuffers", ?*anyopaque, .{});
    }

    pub fn setBoundingBoxBuffers(self: *@This(), boundingBoxBuffers: ?*anyopaque) void {
        return objc.msgSend(self, "setBoundingBoxBuffers:", void, .{boundingBoxBuffers});
    }

    pub fn boundingBoxStride(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "boundingBoxStride", objc.NSUInteger, .{});
    }

    pub fn setBoundingBoxStride(self: *@This(), boundingBoxStride: objc.NSUInteger) void {
        return objc.msgSend(self, "setBoundingBoxStride:", void, .{boundingBoxStride});
    }

    pub fn boundingBoxCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "boundingBoxCount", objc.NSUInteger, .{});
    }

    pub fn setBoundingBoxCount(self: *@This(), boundingBoxCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setBoundingBoxCount:", void, .{boundingBoxCount});
    }

};

pub const CurveType = enum(objc.NSInteger) {
    Round = 0,
    Flat = 1,
};

pub const CurveBasis = enum(objc.NSInteger) {
    BSpline = 0,
    CatmullRom = 1,
    Linear = 2,
    Bezier = 3,
};

pub const CurveEndCaps = enum(objc.NSInteger) {
    None = 0,
    Disk = 1,
    Sphere = 2,
};

/// https://developer.apple.com/documentation/Metal/MTLAccelerationStructureCurveGeometryDescriptor?language=objc
pub const AccelerationStructureCurveGeometryDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLAccelerationStructureCurveGeometryDescriptor", @This(), AccelerationStructureGeometryDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn descriptor(self: *@This()) *@This() {
        return objc.msgSend(self, "descriptor", *@This(), .{});
    }

    pub fn controlPointBuffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "controlPointBuffer", ?*anyopaque, .{});
    }

    pub fn setControlPointBuffer(self: *@This(), controlPointBuffer: ?*anyopaque) void {
        return objc.msgSend(self, "setControlPointBuffer:", void, .{controlPointBuffer});
    }

    pub fn controlPointBufferOffset(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "controlPointBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setControlPointBufferOffset(self: *@This(), controlPointBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(self, "setControlPointBufferOffset:", void, .{controlPointBufferOffset});
    }

    pub fn controlPointCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "controlPointCount", objc.NSUInteger, .{});
    }

    pub fn setControlPointCount(self: *@This(), controlPointCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setControlPointCount:", void, .{controlPointCount});
    }

    pub fn controlPointStride(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "controlPointStride", objc.NSUInteger, .{});
    }

    pub fn setControlPointStride(self: *@This(), controlPointStride: objc.NSUInteger) void {
        return objc.msgSend(self, "setControlPointStride:", void, .{controlPointStride});
    }

    pub fn controlPointFormat(self: *@This()) AttributeFormat {
        return objc.msgSend(self, "controlPointFormat", AttributeFormat, .{});
    }

    pub fn setControlPointFormat(self: *@This(), controlPointFormat: AttributeFormat) void {
        return objc.msgSend(self, "setControlPointFormat:", void, .{controlPointFormat});
    }

    pub fn radiusBuffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "radiusBuffer", ?*anyopaque, .{});
    }

    pub fn setRadiusBuffer(self: *@This(), radiusBuffer: ?*anyopaque) void {
        return objc.msgSend(self, "setRadiusBuffer:", void, .{radiusBuffer});
    }

    pub fn radiusBufferOffset(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "radiusBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setRadiusBufferOffset(self: *@This(), radiusBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(self, "setRadiusBufferOffset:", void, .{radiusBufferOffset});
    }

    pub fn radiusFormat(self: *@This()) AttributeFormat {
        return objc.msgSend(self, "radiusFormat", AttributeFormat, .{});
    }

    pub fn setRadiusFormat(self: *@This(), radiusFormat: AttributeFormat) void {
        return objc.msgSend(self, "setRadiusFormat:", void, .{radiusFormat});
    }

    pub fn radiusStride(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "radiusStride", objc.NSUInteger, .{});
    }

    pub fn setRadiusStride(self: *@This(), radiusStride: objc.NSUInteger) void {
        return objc.msgSend(self, "setRadiusStride:", void, .{radiusStride});
    }

    pub fn indexBuffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "indexBuffer", ?*anyopaque, .{});
    }

    pub fn setIndexBuffer(self: *@This(), indexBuffer: ?*anyopaque) void {
        return objc.msgSend(self, "setIndexBuffer:", void, .{indexBuffer});
    }

    pub fn indexBufferOffset(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "indexBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setIndexBufferOffset(self: *@This(), indexBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(self, "setIndexBufferOffset:", void, .{indexBufferOffset});
    }

    pub fn indexType(self: *@This()) IndexType {
        return objc.msgSend(self, "indexType", IndexType, .{});
    }

    pub fn setIndexType(self: *@This(), indexType: IndexType) void {
        return objc.msgSend(self, "setIndexType:", void, .{indexType});
    }

    pub fn segmentCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "segmentCount", objc.NSUInteger, .{});
    }

    pub fn setSegmentCount(self: *@This(), segmentCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setSegmentCount:", void, .{segmentCount});
    }

    pub fn segmentControlPointCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "segmentControlPointCount", objc.NSUInteger, .{});
    }

    pub fn setSegmentControlPointCount(self: *@This(), segmentControlPointCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setSegmentControlPointCount:", void, .{segmentControlPointCount});
    }

    pub fn curveType(self: *@This()) CurveType {
        return objc.msgSend(self, "curveType", CurveType, .{});
    }

    pub fn setCurveType(self: *@This(), curveType: CurveType) void {
        return objc.msgSend(self, "setCurveType:", void, .{curveType});
    }

    pub fn curveBasis(self: *@This()) CurveBasis {
        return objc.msgSend(self, "curveBasis", CurveBasis, .{});
    }

    pub fn setCurveBasis(self: *@This(), curveBasis: CurveBasis) void {
        return objc.msgSend(self, "setCurveBasis:", void, .{curveBasis});
    }

    pub fn curveEndCaps(self: *@This()) CurveEndCaps {
        return objc.msgSend(self, "curveEndCaps", CurveEndCaps, .{});
    }

    pub fn setCurveEndCaps(self: *@This(), curveEndCaps: CurveEndCaps) void {
        return objc.msgSend(self, "setCurveEndCaps:", void, .{curveEndCaps});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLAccelerationStructureMotionCurveGeometryDescriptor?language=objc
pub const AccelerationStructureMotionCurveGeometryDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLAccelerationStructureMotionCurveGeometryDescriptor", @This(), AccelerationStructureGeometryDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn descriptor(self: *@This()) *@This() {
        return objc.msgSend(self, "descriptor", *@This(), .{});
    }

    pub fn controlPointBuffers(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "controlPointBuffers", ?*anyopaque, .{});
    }

    pub fn setControlPointBuffers(self: *@This(), controlPointBuffers: ?*anyopaque) void {
        return objc.msgSend(self, "setControlPointBuffers:", void, .{controlPointBuffers});
    }

    pub fn controlPointCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "controlPointCount", objc.NSUInteger, .{});
    }

    pub fn setControlPointCount(self: *@This(), controlPointCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setControlPointCount:", void, .{controlPointCount});
    }

    pub fn controlPointStride(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "controlPointStride", objc.NSUInteger, .{});
    }

    pub fn setControlPointStride(self: *@This(), controlPointStride: objc.NSUInteger) void {
        return objc.msgSend(self, "setControlPointStride:", void, .{controlPointStride});
    }

    pub fn controlPointFormat(self: *@This()) AttributeFormat {
        return objc.msgSend(self, "controlPointFormat", AttributeFormat, .{});
    }

    pub fn setControlPointFormat(self: *@This(), controlPointFormat: AttributeFormat) void {
        return objc.msgSend(self, "setControlPointFormat:", void, .{controlPointFormat});
    }

    pub fn radiusBuffers(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "radiusBuffers", ?*anyopaque, .{});
    }

    pub fn setRadiusBuffers(self: *@This(), radiusBuffers: ?*anyopaque) void {
        return objc.msgSend(self, "setRadiusBuffers:", void, .{radiusBuffers});
    }

    pub fn radiusFormat(self: *@This()) AttributeFormat {
        return objc.msgSend(self, "radiusFormat", AttributeFormat, .{});
    }

    pub fn setRadiusFormat(self: *@This(), radiusFormat: AttributeFormat) void {
        return objc.msgSend(self, "setRadiusFormat:", void, .{radiusFormat});
    }

    pub fn radiusStride(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "radiusStride", objc.NSUInteger, .{});
    }

    pub fn setRadiusStride(self: *@This(), radiusStride: objc.NSUInteger) void {
        return objc.msgSend(self, "setRadiusStride:", void, .{radiusStride});
    }

    pub fn indexBuffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "indexBuffer", ?*anyopaque, .{});
    }

    pub fn setIndexBuffer(self: *@This(), indexBuffer: ?*anyopaque) void {
        return objc.msgSend(self, "setIndexBuffer:", void, .{indexBuffer});
    }

    pub fn indexBufferOffset(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "indexBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setIndexBufferOffset(self: *@This(), indexBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(self, "setIndexBufferOffset:", void, .{indexBufferOffset});
    }

    pub fn indexType(self: *@This()) IndexType {
        return objc.msgSend(self, "indexType", IndexType, .{});
    }

    pub fn setIndexType(self: *@This(), indexType: IndexType) void {
        return objc.msgSend(self, "setIndexType:", void, .{indexType});
    }

    pub fn segmentCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "segmentCount", objc.NSUInteger, .{});
    }

    pub fn setSegmentCount(self: *@This(), segmentCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setSegmentCount:", void, .{segmentCount});
    }

    pub fn segmentControlPointCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "segmentControlPointCount", objc.NSUInteger, .{});
    }

    pub fn setSegmentControlPointCount(self: *@This(), segmentControlPointCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setSegmentControlPointCount:", void, .{segmentControlPointCount});
    }

    pub fn curveType(self: *@This()) CurveType {
        return objc.msgSend(self, "curveType", CurveType, .{});
    }

    pub fn setCurveType(self: *@This(), curveType: CurveType) void {
        return objc.msgSend(self, "setCurveType:", void, .{curveType});
    }

    pub fn curveBasis(self: *@This()) CurveBasis {
        return objc.msgSend(self, "curveBasis", CurveBasis, .{});
    }

    pub fn setCurveBasis(self: *@This(), curveBasis: CurveBasis) void {
        return objc.msgSend(self, "setCurveBasis:", void, .{curveBasis});
    }

    pub fn curveEndCaps(self: *@This()) CurveEndCaps {
        return objc.msgSend(self, "curveEndCaps", CurveEndCaps, .{});
    }

    pub fn setCurveEndCaps(self: *@This(), curveEndCaps: CurveEndCaps) void {
        return objc.msgSend(self, "setCurveEndCaps:", void, .{curveEndCaps});
    }

};

pub const AccelerationStructureInstanceDescriptor = extern struct {
    transformationMatrix: PackedFloat4x3,
    options: AccelerationStructureInstanceOptions,
    mask: objc.uint32_t,
    intersectionFunctionTableOffset: objc.uint32_t,
    accelerationStructureIndex: objc.uint32_t,
};

pub const AccelerationStructureUserIDInstanceDescriptor = extern struct {
    transformationMatrix: PackedFloat4x3,
    options: AccelerationStructureInstanceOptions,
    mask: objc.uint32_t,
    intersectionFunctionTableOffset: objc.uint32_t,
    accelerationStructureIndex: objc.uint32_t,
    userID: objc.uint32_t,
};

pub const AccelerationStructureInstanceDescriptorType = enum(objc.NSUInteger) {
    Default = 0,
    UserID = 1,
    Motion = 2,
    Indirect = 3,
    IndirectMotion = 4,
};

pub const AccelerationStructureMotionInstanceDescriptor = extern struct {
    options: AccelerationStructureInstanceOptions,
    mask: objc.uint32_t,
    intersectionFunctionTableOffset: objc.uint32_t,
    accelerationStructureIndex: objc.uint32_t,
    userID: objc.uint32_t,
    motionTransformsStartIndex: objc.uint32_t,
    motionTransformsCount: objc.uint32_t,
    motionStartBorderMode: MotionBorderMode,
    motionEndBorderMode: MotionBorderMode,
    motionStartTime: f32,
    motionEndTime: f32,
};

pub const IndirectAccelerationStructureInstanceDescriptor = extern struct {
    transformationMatrix: PackedFloat4x3,
    options: AccelerationStructureInstanceOptions,
    mask: objc.uint32_t,
    intersectionFunctionTableOffset: objc.uint32_t,
    userID: objc.uint32_t,
    accelerationStructureID: ResourceID,
};

pub const IndirectAccelerationStructureMotionInstanceDescriptor = extern struct {
    options: AccelerationStructureInstanceOptions,
    mask: objc.uint32_t,
    intersectionFunctionTableOffset: objc.uint32_t,
    userID: objc.uint32_t,
    accelerationStructureID: ResourceID,
    motionTransformsStartIndex: objc.uint32_t,
    motionTransformsCount: objc.uint32_t,
    motionStartBorderMode: MotionBorderMode,
    motionEndBorderMode: MotionBorderMode,
    motionStartTime: f32,
    motionEndTime: f32,
};

pub const TransformType = enum(objc.NSInteger) {
    PackedFloat4x3 = 0,
    Component = 1,
};

/// https://developer.apple.com/documentation/Metal/MTLInstanceAccelerationStructureDescriptor?language=objc
pub const InstanceAccelerationStructureDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLInstanceAccelerationStructureDescriptor", @This(), AccelerationStructureDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn descriptor(self: *@This()) *@This() {
        return objc.msgSend(self, "descriptor", *@This(), .{});
    }

    pub fn instanceDescriptorBuffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "instanceDescriptorBuffer", ?*anyopaque, .{});
    }

    pub fn setInstanceDescriptorBuffer(self: *@This(), instanceDescriptorBuffer: ?*anyopaque) void {
        return objc.msgSend(self, "setInstanceDescriptorBuffer:", void, .{instanceDescriptorBuffer});
    }

    pub fn instanceDescriptorBufferOffset(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "instanceDescriptorBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setInstanceDescriptorBufferOffset(self: *@This(), instanceDescriptorBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(self, "setInstanceDescriptorBufferOffset:", void, .{instanceDescriptorBufferOffset});
    }

    pub fn instanceDescriptorStride(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "instanceDescriptorStride", objc.NSUInteger, .{});
    }

    pub fn setInstanceDescriptorStride(self: *@This(), instanceDescriptorStride: objc.NSUInteger) void {
        return objc.msgSend(self, "setInstanceDescriptorStride:", void, .{instanceDescriptorStride});
    }

    pub fn instanceCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "instanceCount", objc.NSUInteger, .{});
    }

    pub fn setInstanceCount(self: *@This(), instanceCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setInstanceCount:", void, .{instanceCount});
    }

    pub fn instancedAccelerationStructures(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "instancedAccelerationStructures", ?*anyopaque, .{});
    }

    pub fn setInstancedAccelerationStructures(self: *@This(), instancedAccelerationStructures: ?*anyopaque) void {
        return objc.msgSend(self, "setInstancedAccelerationStructures:", void, .{instancedAccelerationStructures});
    }

    pub fn instanceDescriptorType(self: *@This()) AccelerationStructureInstanceDescriptorType {
        return objc.msgSend(self, "instanceDescriptorType", AccelerationStructureInstanceDescriptorType, .{});
    }

    pub fn setInstanceDescriptorType(self: *@This(), instanceDescriptorType: AccelerationStructureInstanceDescriptorType) void {
        return objc.msgSend(self, "setInstanceDescriptorType:", void, .{instanceDescriptorType});
    }

    pub fn motionTransformBuffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "motionTransformBuffer", ?*anyopaque, .{});
    }

    pub fn setMotionTransformBuffer(self: *@This(), motionTransformBuffer: ?*anyopaque) void {
        return objc.msgSend(self, "setMotionTransformBuffer:", void, .{motionTransformBuffer});
    }

    pub fn motionTransformBufferOffset(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "motionTransformBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setMotionTransformBufferOffset(self: *@This(), motionTransformBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(self, "setMotionTransformBufferOffset:", void, .{motionTransformBufferOffset});
    }

    pub fn motionTransformCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "motionTransformCount", objc.NSUInteger, .{});
    }

    pub fn setMotionTransformCount(self: *@This(), motionTransformCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setMotionTransformCount:", void, .{motionTransformCount});
    }

    pub fn instanceTransformationMatrixLayout(self: *@This()) MatrixLayout {
        return objc.msgSend(self, "instanceTransformationMatrixLayout", MatrixLayout, .{});
    }

    pub fn setInstanceTransformationMatrixLayout(self: *@This(), instanceTransformationMatrixLayout: MatrixLayout) void {
        return objc.msgSend(self, "setInstanceTransformationMatrixLayout:", void, .{instanceTransformationMatrixLayout});
    }

    pub fn motionTransformType(self: *@This()) TransformType {
        return objc.msgSend(self, "motionTransformType", TransformType, .{});
    }

    pub fn setMotionTransformType(self: *@This(), motionTransformType: TransformType) void {
        return objc.msgSend(self, "setMotionTransformType:", void, .{motionTransformType});
    }

    pub fn motionTransformStride(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "motionTransformStride", objc.NSUInteger, .{});
    }

    pub fn setMotionTransformStride(self: *@This(), motionTransformStride: objc.NSUInteger) void {
        return objc.msgSend(self, "setMotionTransformStride:", void, .{motionTransformStride});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLIndirectInstanceAccelerationStructureDescriptor?language=objc
pub const IndirectInstanceAccelerationStructureDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLIndirectInstanceAccelerationStructureDescriptor", @This(), AccelerationStructureDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn descriptor(self: *@This()) *@This() {
        return objc.msgSend(self, "descriptor", *@This(), .{});
    }

    pub fn instanceDescriptorBuffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "instanceDescriptorBuffer", ?*anyopaque, .{});
    }

    pub fn setInstanceDescriptorBuffer(self: *@This(), instanceDescriptorBuffer: ?*anyopaque) void {
        return objc.msgSend(self, "setInstanceDescriptorBuffer:", void, .{instanceDescriptorBuffer});
    }

    pub fn instanceDescriptorBufferOffset(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "instanceDescriptorBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setInstanceDescriptorBufferOffset(self: *@This(), instanceDescriptorBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(self, "setInstanceDescriptorBufferOffset:", void, .{instanceDescriptorBufferOffset});
    }

    pub fn instanceDescriptorStride(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "instanceDescriptorStride", objc.NSUInteger, .{});
    }

    pub fn setInstanceDescriptorStride(self: *@This(), instanceDescriptorStride: objc.NSUInteger) void {
        return objc.msgSend(self, "setInstanceDescriptorStride:", void, .{instanceDescriptorStride});
    }

    pub fn maxInstanceCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxInstanceCount", objc.NSUInteger, .{});
    }

    pub fn setMaxInstanceCount(self: *@This(), maxInstanceCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaxInstanceCount:", void, .{maxInstanceCount});
    }

    pub fn instanceCountBuffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "instanceCountBuffer", ?*anyopaque, .{});
    }

    pub fn setInstanceCountBuffer(self: *@This(), instanceCountBuffer: ?*anyopaque) void {
        return objc.msgSend(self, "setInstanceCountBuffer:", void, .{instanceCountBuffer});
    }

    pub fn instanceCountBufferOffset(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "instanceCountBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setInstanceCountBufferOffset(self: *@This(), instanceCountBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(self, "setInstanceCountBufferOffset:", void, .{instanceCountBufferOffset});
    }

    pub fn instanceDescriptorType(self: *@This()) AccelerationStructureInstanceDescriptorType {
        return objc.msgSend(self, "instanceDescriptorType", AccelerationStructureInstanceDescriptorType, .{});
    }

    pub fn setInstanceDescriptorType(self: *@This(), instanceDescriptorType: AccelerationStructureInstanceDescriptorType) void {
        return objc.msgSend(self, "setInstanceDescriptorType:", void, .{instanceDescriptorType});
    }

    pub fn motionTransformBuffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "motionTransformBuffer", ?*anyopaque, .{});
    }

    pub fn setMotionTransformBuffer(self: *@This(), motionTransformBuffer: ?*anyopaque) void {
        return objc.msgSend(self, "setMotionTransformBuffer:", void, .{motionTransformBuffer});
    }

    pub fn motionTransformBufferOffset(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "motionTransformBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setMotionTransformBufferOffset(self: *@This(), motionTransformBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(self, "setMotionTransformBufferOffset:", void, .{motionTransformBufferOffset});
    }

    pub fn maxMotionTransformCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxMotionTransformCount", objc.NSUInteger, .{});
    }

    pub fn setMaxMotionTransformCount(self: *@This(), maxMotionTransformCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaxMotionTransformCount:", void, .{maxMotionTransformCount});
    }

    pub fn motionTransformCountBuffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "motionTransformCountBuffer", ?*anyopaque, .{});
    }

    pub fn setMotionTransformCountBuffer(self: *@This(), motionTransformCountBuffer: ?*anyopaque) void {
        return objc.msgSend(self, "setMotionTransformCountBuffer:", void, .{motionTransformCountBuffer});
    }

    pub fn motionTransformCountBufferOffset(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "motionTransformCountBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setMotionTransformCountBufferOffset(self: *@This(), motionTransformCountBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(self, "setMotionTransformCountBufferOffset:", void, .{motionTransformCountBufferOffset});
    }

    pub fn instanceTransformationMatrixLayout(self: *@This()) MatrixLayout {
        return objc.msgSend(self, "instanceTransformationMatrixLayout", MatrixLayout, .{});
    }

    pub fn setInstanceTransformationMatrixLayout(self: *@This(), instanceTransformationMatrixLayout: MatrixLayout) void {
        return objc.msgSend(self, "setInstanceTransformationMatrixLayout:", void, .{instanceTransformationMatrixLayout});
    }

    pub fn motionTransformType(self: *@This()) TransformType {
        return objc.msgSend(self, "motionTransformType", TransformType, .{});
    }

    pub fn setMotionTransformType(self: *@This(), motionTransformType: TransformType) void {
        return objc.msgSend(self, "setMotionTransformType:", void, .{motionTransformType});
    }

    pub fn motionTransformStride(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "motionTransformStride", objc.NSUInteger, .{});
    }

    pub fn setMotionTransformStride(self: *@This(), motionTransformStride: objc.NSUInteger) void {
        return objc.msgSend(self, "setMotionTransformStride:", void, .{motionTransformStride});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLAccelerationStructure?language=objc
pub const AccelerationStructure = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{Resource, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn size(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "size", objc.NSUInteger, .{});
    }

    pub fn gpuResourceID(self: *@This()) ResourceID {
        return objc.msgSend(self, "gpuResourceID", ResourceID, .{});
    }

};

pub const HeapType = enum(objc.NSInteger) {
    Automatic = 0,
    Placement = 1,
    Sparse = 2,
};

/// https://developer.apple.com/documentation/Metal/MTLHeapDescriptor?language=objc
pub const HeapDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLHeapDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn size(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "size", objc.NSUInteger, .{});
    }

    pub fn setSize(self: *@This(), size: objc.NSUInteger) void {
        return objc.msgSend(self, "setSize:", void, .{size});
    }

    pub fn storageMode(self: *@This()) StorageMode {
        return objc.msgSend(self, "storageMode", StorageMode, .{});
    }

    pub fn setStorageMode(self: *@This(), storageMode: StorageMode) void {
        return objc.msgSend(self, "setStorageMode:", void, .{storageMode});
    }

    pub fn cpuCacheMode(self: *@This()) CPUCacheMode {
        return objc.msgSend(self, "cpuCacheMode", CPUCacheMode, .{});
    }

    pub fn setCpuCacheMode(self: *@This(), cpuCacheMode: CPUCacheMode) void {
        return objc.msgSend(self, "setCpuCacheMode:", void, .{cpuCacheMode});
    }

    pub fn sparsePageSize(self: *@This()) SparsePageSize {
        return objc.msgSend(self, "sparsePageSize", SparsePageSize, .{});
    }

    pub fn setSparsePageSize(self: *@This(), sparsePageSize: SparsePageSize) void {
        return objc.msgSend(self, "setSparsePageSize:", void, .{sparsePageSize});
    }

    pub fn hazardTrackingMode(self: *@This()) HazardTrackingMode {
        return objc.msgSend(self, "hazardTrackingMode", HazardTrackingMode, .{});
    }

    pub fn setHazardTrackingMode(self: *@This(), hazardTrackingMode: HazardTrackingMode) void {
        return objc.msgSend(self, "setHazardTrackingMode:", void, .{hazardTrackingMode});
    }

    pub fn resourceOptions(self: *@This()) ResourceOptions {
        return objc.msgSend(self, "resourceOptions", ResourceOptions, .{});
    }

    pub fn setResourceOptions(self: *@This(), resourceOptions: ResourceOptions) void {
        return objc.msgSend(self, "setResourceOptions:", void, .{resourceOptions});
    }

    pub fn @"type"(self: *@This()) HeapType {
        return objc.msgSend(self, "type", HeapType, .{});
    }

    pub fn setType(self: *@This(), @"type": HeapType) void {
        return objc.msgSend(self, "setType:", void, .{@"type"});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLHeap?language=objc
pub const Heap = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{Allocation, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn maxAvailableSizeWithAlignment(self: *@This(), alignment: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(self, "maxAvailableSizeWithAlignment:", objc.NSUInteger, .{alignment});
    }

    pub fn newBufferWithLengthOptions(self: *@This(), length: objc.NSUInteger, options: ResourceOptions) ?*anyopaque {
        return objc.msgSend(self, "newBufferWithLength:options:", ?*anyopaque, .{length, options});
    }

    pub fn newTextureWithDescriptor(self: *@This(), descriptor: ?*TextureDescriptor) ?*anyopaque {
        return objc.msgSend(self, "newTextureWithDescriptor:", ?*anyopaque, .{descriptor});
    }

    pub fn setPurgeableState(self: *@This(), state: PurgeableState) PurgeableState {
        return objc.msgSend(self, "setPurgeableState:", PurgeableState, .{state});
    }

    pub fn newBufferWithLengthOptionsOffset(self: *@This(), length: objc.NSUInteger, options: ResourceOptions, offset: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(self, "newBufferWithLength:options:offset:", ?*anyopaque, .{length, options, offset});
    }

    pub fn newTextureWithDescriptorOffset(self: *@This(), descriptor: ?*TextureDescriptor, offset: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(self, "newTextureWithDescriptor:offset:", ?*anyopaque, .{descriptor, offset});
    }

    pub fn newAccelerationStructureWithSize(self: *@This(), size: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(self, "newAccelerationStructureWithSize:", ?*anyopaque, .{size});
    }

    pub fn newAccelerationStructureWithDescriptor(self: *@This(), descriptor: ?*AccelerationStructureDescriptor) ?*anyopaque {
        return objc.msgSend(self, "newAccelerationStructureWithDescriptor:", ?*anyopaque, .{descriptor});
    }

    pub fn newAccelerationStructureWithSizeOffset(self: *@This(), size: objc.NSUInteger, offset: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(self, "newAccelerationStructureWithSize:offset:", ?*anyopaque, .{size, offset});
    }

    pub fn newAccelerationStructureWithDescriptorOffset(self: *@This(), descriptor: ?*AccelerationStructureDescriptor, offset: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(self, "newAccelerationStructureWithDescriptor:offset:", ?*anyopaque, .{descriptor, offset});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*ns.String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

    pub fn device(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "device", ?*anyopaque, .{});
    }

    pub fn storageMode(self: *@This()) StorageMode {
        return objc.msgSend(self, "storageMode", StorageMode, .{});
    }

    pub fn cpuCacheMode(self: *@This()) CPUCacheMode {
        return objc.msgSend(self, "cpuCacheMode", CPUCacheMode, .{});
    }

    pub fn hazardTrackingMode(self: *@This()) HazardTrackingMode {
        return objc.msgSend(self, "hazardTrackingMode", HazardTrackingMode, .{});
    }

    pub fn resourceOptions(self: *@This()) ResourceOptions {
        return objc.msgSend(self, "resourceOptions", ResourceOptions, .{});
    }

    pub fn size(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "size", objc.NSUInteger, .{});
    }

    pub fn usedSize(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "usedSize", objc.NSUInteger, .{});
    }

    pub fn currentAllocatedSize(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "currentAllocatedSize", objc.NSUInteger, .{});
    }

    pub fn @"type"(self: *@This()) HeapType {
        return objc.msgSend(self, "type", HeapType, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLArgumentEncoder?language=objc
pub const ArgumentEncoder = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn setArgumentBufferOffset(self: *@This(), argumentBuffer: ?*anyopaque, offset: objc.NSUInteger) void {
        return objc.msgSend(self, "setArgumentBuffer:offset:", void, .{argumentBuffer, offset});
    }

    pub fn setArgumentBufferStartOffsetArrayElement(self: *@This(), argumentBuffer: ?*anyopaque, startOffset: objc.NSUInteger, arrayElement: objc.NSUInteger) void {
        return objc.msgSend(self, "setArgumentBuffer:startOffset:arrayElement:", void, .{argumentBuffer, startOffset, arrayElement});
    }

    pub fn setBufferOffsetAtIndex(self: *@This(), buffer: ?*anyopaque, offset: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setBuffer:offset:atIndex:", void, .{buffer, offset, index});
    }

    pub fn setBuffersOffsetsWithRange(self: *@This(), buffers: ?*?*anyopaque, offsets: ?*objc.NSUInteger, range: ns.Range) void {
        return objc.msgSend(self, "setBuffers:offsets:withRange:", void, .{buffers, offsets, range});
    }

    pub fn setTextureAtIndex(self: *@This(), texture: ?*anyopaque, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setTexture:atIndex:", void, .{texture, index});
    }

    pub fn setTexturesWithRange(self: *@This(), textures: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setTextures:withRange:", void, .{textures, range});
    }

    pub fn setSamplerStateAtIndex(self: *@This(), sampler: ?*anyopaque, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setSamplerState:atIndex:", void, .{sampler, index});
    }

    pub fn setSamplerStatesWithRange(self: *@This(), samplers: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setSamplerStates:withRange:", void, .{samplers, range});
    }

    pub fn constantDataAtIndex(self: *@This(), index: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(self, "constantDataAtIndex:", ?*anyopaque, .{index});
    }

    pub fn setRenderPipelineStateAtIndex(self: *@This(), pipeline: ?*anyopaque, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setRenderPipelineState:atIndex:", void, .{pipeline, index});
    }

    pub fn setRenderPipelineStatesWithRange(self: *@This(), pipelines: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setRenderPipelineStates:withRange:", void, .{pipelines, range});
    }

    pub fn setComputePipelineStateAtIndex(self: *@This(), pipeline: ?*anyopaque, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setComputePipelineState:atIndex:", void, .{pipeline, index});
    }

    pub fn setComputePipelineStatesWithRange(self: *@This(), pipelines: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setComputePipelineStates:withRange:", void, .{pipelines, range});
    }

    pub fn setIndirectCommandBufferAtIndex(self: *@This(), indirectCommandBuffer: ?*anyopaque, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setIndirectCommandBuffer:atIndex:", void, .{indirectCommandBuffer, index});
    }

    pub fn setIndirectCommandBuffersWithRange(self: *@This(), buffers: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setIndirectCommandBuffers:withRange:", void, .{buffers, range});
    }

    pub fn setAccelerationStructureAtIndex(self: *@This(), accelerationStructure: ?*anyopaque, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setAccelerationStructure:atIndex:", void, .{accelerationStructure, index});
    }

    pub fn newArgumentEncoderForBufferAtIndex(self: *@This(), index: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(self, "newArgumentEncoderForBufferAtIndex:", ?*anyopaque, .{index});
    }

    pub fn setVisibleFunctionTableAtIndex(self: *@This(), visibleFunctionTable: ?*anyopaque, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setVisibleFunctionTable:atIndex:", void, .{visibleFunctionTable, index});
    }

    pub fn setVisibleFunctionTablesWithRange(self: *@This(), visibleFunctionTables: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setVisibleFunctionTables:withRange:", void, .{visibleFunctionTables, range});
    }

    pub fn setIntersectionFunctionTableAtIndex(self: *@This(), intersectionFunctionTable: ?*anyopaque, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setIntersectionFunctionTable:atIndex:", void, .{intersectionFunctionTable, index});
    }

    pub fn setIntersectionFunctionTablesWithRange(self: *@This(), intersectionFunctionTables: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setIntersectionFunctionTables:withRange:", void, .{intersectionFunctionTables, range});
    }

    pub fn device(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "device", ?*anyopaque, .{});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*ns.String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

    pub fn encodedLength(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "encodedLength", objc.NSUInteger, .{});
    }

    pub fn alignment(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "alignment", objc.NSUInteger, .{});
    }

};

pub const CaptureError = enum(objc.NSInteger) {
    NotSupported = 1,
    AlreadyCapturing = 2,
    InvalidDescriptor = 3,
};

pub const CaptureDestination = enum(objc.NSInteger) {
    DeveloperTools = 1,
    GPUTraceDocument = 2,
};

/// https://developer.apple.com/documentation/Metal/MTLCaptureDescriptor?language=objc
pub const CaptureDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLCaptureDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn captureObject(self: *@This()) *objc.Id {
        return objc.msgSend(self, "captureObject", *objc.Id, .{});
    }

    pub fn setCaptureObject(self: *@This(), captureObject: *objc.Id) void {
        return objc.msgSend(self, "setCaptureObject:", void, .{captureObject});
    }

    pub fn destination(self: *@This()) CaptureDestination {
        return objc.msgSend(self, "destination", CaptureDestination, .{});
    }

    pub fn setDestination(self: *@This(), destination: CaptureDestination) void {
        return objc.msgSend(self, "setDestination:", void, .{destination});
    }

    pub fn outputURL(self: *@This()) ?*ns.URL {
        return objc.msgSend(self, "outputURL", ?*ns.URL, .{});
    }

    pub fn setOutputURL(self: *@This(), outputURL: ?*ns.URL) void {
        return objc.msgSend(self, "setOutputURL:", void, .{outputURL});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLCaptureManager?language=objc
pub const CaptureManager = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLCaptureManager", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn sharedCaptureManager(self: *@This()) ?*CaptureManager {
        return objc.msgSend(self, "sharedCaptureManager", ?*CaptureManager, .{});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn newCaptureScopeWithDevice(self: *@This(), device: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "newCaptureScopeWithDevice:", ?*anyopaque, .{device});
    }

    pub fn newCaptureScopeWithCommandQueue(self: *@This(), commandQueue: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "newCaptureScopeWithCommandQueue:", ?*anyopaque, .{commandQueue});
    }

    pub fn supportsDestination(self: *@This(), destination: CaptureDestination) objc.BOOL {
        return objc.msgSend(self, "supportsDestination:", objc.BOOL, .{destination});
    }

    pub fn startCaptureWithDescriptorError(self: *@This(), descriptor: ?*CaptureDescriptor, @"error": ?*?*ns.Error) objc.BOOL {
        return objc.msgSend(self, "startCaptureWithDescriptor:error:", objc.BOOL, .{descriptor, @"error"});
    }

    pub fn startCaptureWithDevice(self: *@This(), device: ?*anyopaque) void {
        return objc.msgSend(self, "startCaptureWithDevice:", void, .{device});
    }

    pub fn startCaptureWithCommandQueue(self: *@This(), commandQueue: ?*anyopaque) void {
        return objc.msgSend(self, "startCaptureWithCommandQueue:", void, .{commandQueue});
    }

    pub fn startCaptureWithScope(self: *@This(), captureScope: ?*anyopaque) void {
        return objc.msgSend(self, "startCaptureWithScope:", void, .{captureScope});
    }

    pub fn stopCapture(self: *@This()) void {
        return objc.msgSend(self, "stopCapture", void, .{});
    }

    pub fn defaultCaptureScope(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "defaultCaptureScope", ?*anyopaque, .{});
    }

    pub fn setDefaultCaptureScope(self: *@This(), defaultCaptureScope: ?*anyopaque) void {
        return objc.msgSend(self, "setDefaultCaptureScope:", void, .{defaultCaptureScope});
    }

    pub fn isCapturing(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isCapturing", objc.BOOL, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLCaptureScope?language=objc
pub const CaptureScope = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn beginScope(self: *@This()) void {
        return objc.msgSend(self, "beginScope", void, .{});
    }

    pub fn endScope(self: *@This()) void {
        return objc.msgSend(self, "endScope", void, .{});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*ns.String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

    pub fn device(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "device", ?*anyopaque, .{});
    }

    pub fn commandQueue(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "commandQueue", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLIndirectRenderCommand?language=objc
pub const IndirectRenderCommand = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn setRenderPipelineState(self: *@This(), pipelineState: ?*anyopaque) void {
        return objc.msgSend(self, "setRenderPipelineState:", void, .{pipelineState});
    }

    pub fn setVertexBufferOffsetAtIndex(self: *@This(), buffer: ?*anyopaque, offset: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setVertexBuffer:offset:atIndex:", void, .{buffer, offset, index});
    }

    pub fn setFragmentBufferOffsetAtIndex(self: *@This(), buffer: ?*anyopaque, offset: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setFragmentBuffer:offset:atIndex:", void, .{buffer, offset, index});
    }

    pub fn setVertexBufferOffsetAttributeStrideAtIndex(self: *@This(), buffer: ?*anyopaque, offset: objc.NSUInteger, stride: objc.NSUInteger, index: objc.NSUInteger, ) void {
        return objc.msgSend(self, "setVertexBuffer:offset:attributeStride:atIndex:", void, .{buffer, offset, stride, index, });
    }

    pub fn drawPatchesPatchStartPatchCountPatchIndexBufferPatchIndexBufferOffsetInstanceCountBaseInstanceTessellationFactorBufferTessellationFactorBufferOffsetTessellationFactorBufferInstanceStride(self: *@This(), numberOfPatchControlPoints: objc.NSUInteger, patchStart: objc.NSUInteger, patchCount: objc.NSUInteger, patchIndexBuffer: ?*anyopaque, patchIndexBufferOffset: objc.NSUInteger, instanceCount: objc.NSUInteger, baseInstance: objc.NSUInteger, buffer: ?*anyopaque, offset: objc.NSUInteger, instanceStride: objc.NSUInteger, ) void {
        return objc.msgSend(self, "drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:", void, .{numberOfPatchControlPoints, patchStart, patchCount, patchIndexBuffer, patchIndexBufferOffset, instanceCount, baseInstance, buffer, offset, instanceStride, });
    }

    pub fn drawIndexedPatchesPatchStartPatchCountPatchIndexBufferPatchIndexBufferOffsetControlPointIndexBufferControlPointIndexBufferOffsetInstanceCountBaseInstanceTessellationFactorBufferTessellationFactorBufferOffsetTessellationFactorBufferInstanceStride(self: *@This(), numberOfPatchControlPoints: objc.NSUInteger, patchStart: objc.NSUInteger, patchCount: objc.NSUInteger, patchIndexBuffer: ?*anyopaque, patchIndexBufferOffset: objc.NSUInteger, controlPointIndexBuffer: ?*anyopaque, controlPointIndexBufferOffset: objc.NSUInteger, instanceCount: objc.NSUInteger, baseInstance: objc.NSUInteger, buffer: ?*anyopaque, offset: objc.NSUInteger, instanceStride: objc.NSUInteger, ) void {
        return objc.msgSend(self, "drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:", void, .{numberOfPatchControlPoints, patchStart, patchCount, patchIndexBuffer, patchIndexBufferOffset, controlPointIndexBuffer, controlPointIndexBufferOffset, instanceCount, baseInstance, buffer, offset, instanceStride, });
    }

    pub fn drawPrimitivesVertexStartVertexCountInstanceCountBaseInstance(self: *@This(), primitiveType: PrimitiveType, vertexStart: objc.NSUInteger, vertexCount: objc.NSUInteger, instanceCount: objc.NSUInteger, baseInstance: objc.NSUInteger, ) void {
        return objc.msgSend(self, "drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:", void, .{primitiveType, vertexStart, vertexCount, instanceCount, baseInstance, });
    }

    pub fn drawIndexedPrimitivesIndexCountIndexTypeIndexBufferIndexBufferOffsetInstanceCountBaseVertexBaseInstance(self: *@This(), primitiveType: PrimitiveType, indexCount: objc.NSUInteger, indexType: IndexType, indexBuffer: ?*anyopaque, indexBufferOffset: objc.NSUInteger, instanceCount: objc.NSUInteger, baseVertex: objc.NSInteger, baseInstance: objc.NSUInteger, ) void {
        return objc.msgSend(self, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:", void, .{primitiveType, indexCount, indexType, indexBuffer, indexBufferOffset, instanceCount, baseVertex, baseInstance, });
    }

    pub fn setObjectThreadgroupMemoryLengthAtIndex(self: *@This(), length: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setObjectThreadgroupMemoryLength:atIndex:", void, .{length, index});
    }

    pub fn setObjectBufferOffsetAtIndex(self: *@This(), buffer: ?*anyopaque, offset: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setObjectBuffer:offset:atIndex:", void, .{buffer, offset, index});
    }

    pub fn setMeshBufferOffsetAtIndex(self: *@This(), buffer: ?*anyopaque, offset: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setMeshBuffer:offset:atIndex:", void, .{buffer, offset, index});
    }

    pub fn drawMeshThreadgroupsThreadsPerObjectThreadgroupThreadsPerMeshThreadgroup(self: *@This(), threadgroupsPerGrid: Size, threadsPerObjectThreadgroup: Size, threadsPerMeshThreadgroup: Size) void {
        return objc.msgSend(self, "drawMeshThreadgroups:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:", void, .{threadgroupsPerGrid, threadsPerObjectThreadgroup, threadsPerMeshThreadgroup});
    }

    pub fn drawMeshThreadsThreadsPerObjectThreadgroupThreadsPerMeshThreadgroup(self: *@This(), threadsPerGrid: Size, threadsPerObjectThreadgroup: Size, threadsPerMeshThreadgroup: Size) void {
        return objc.msgSend(self, "drawMeshThreads:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:", void, .{threadsPerGrid, threadsPerObjectThreadgroup, threadsPerMeshThreadgroup});
    }

    pub fn setBarrier(self: *@This()) void {
        return objc.msgSend(self, "setBarrier", void, .{});
    }

    pub fn clearBarrier(self: *@This()) void {
        return objc.msgSend(self, "clearBarrier", void, .{});
    }

    pub fn reset(self: *@This()) void {
        return objc.msgSend(self, "reset", void, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLIndirectComputeCommand?language=objc
pub const IndirectComputeCommand = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn setComputePipelineState(self: *@This(), pipelineState: ?*anyopaque) void {
        return objc.msgSend(self, "setComputePipelineState:", void, .{pipelineState});
    }

    pub fn setKernelBufferOffsetAtIndex(self: *@This(), buffer: ?*anyopaque, offset: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setKernelBuffer:offset:atIndex:", void, .{buffer, offset, index});
    }

    pub fn setKernelBufferOffsetAttributeStrideAtIndex(self: *@This(), buffer: ?*anyopaque, offset: objc.NSUInteger, stride: objc.NSUInteger, index: objc.NSUInteger, ) void {
        return objc.msgSend(self, "setKernelBuffer:offset:attributeStride:atIndex:", void, .{buffer, offset, stride, index, });
    }

    pub fn concurrentDispatchThreadgroupsThreadsPerThreadgroup(self: *@This(), threadgroupsPerGrid: Size, threadsPerThreadgroup: Size) void {
        return objc.msgSend(self, "concurrentDispatchThreadgroups:threadsPerThreadgroup:", void, .{threadgroupsPerGrid, threadsPerThreadgroup});
    }

    pub fn concurrentDispatchThreadsThreadsPerThreadgroup(self: *@This(), threadsPerGrid: Size, threadsPerThreadgroup: Size) void {
        return objc.msgSend(self, "concurrentDispatchThreads:threadsPerThreadgroup:", void, .{threadsPerGrid, threadsPerThreadgroup});
    }

    pub fn setBarrier(self: *@This()) void {
        return objc.msgSend(self, "setBarrier", void, .{});
    }

    pub fn clearBarrier(self: *@This()) void {
        return objc.msgSend(self, "clearBarrier", void, .{});
    }

    pub fn setImageblockWidthHeight(self: *@This(), width: objc.NSUInteger, height: objc.NSUInteger) void {
        return objc.msgSend(self, "setImageblockWidth:height:", void, .{width, height});
    }

    pub fn reset(self: *@This()) void {
        return objc.msgSend(self, "reset", void, .{});
    }

    pub fn setThreadgroupMemoryLengthAtIndex(self: *@This(), length: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setThreadgroupMemoryLength:atIndex:", void, .{length, index});
    }

    pub fn setStageInRegion(self: *@This(), region: Region) void {
        return objc.msgSend(self, "setStageInRegion:", void, .{region});
    }

};

pub const IndirectCommandType = enum(objc.NSUInteger) {
    Draw = 1,
    DrawIndexed = 2,
    DrawPatches = 4,
    DrawIndexedPatches = 8,
    ConcurrentDispatch = 32,
    ConcurrentDispatchThreads = 64,
    DrawMeshThreadgroups = 128,
    DrawMeshThreads = 256,
};

pub const IndirectCommandBufferExecutionRange = extern struct {
    location: objc.uint32_t,
    length: objc.uint32_t,
};

pub extern "Metal" fn IndirectCommandBufferExecutionRangeMake(location: objc.uint32_t, length: objc.uint32_t) callconv(.C) IndirectCommandBufferExecutionRange;

/// https://developer.apple.com/documentation/Metal/MTLIndirectCommandBufferDescriptor?language=objc
pub const IndirectCommandBufferDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLIndirectCommandBufferDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn commandTypes(self: *@This()) IndirectCommandType {
        return objc.msgSend(self, "commandTypes", IndirectCommandType, .{});
    }

    pub fn setCommandTypes(self: *@This(), commandTypes: IndirectCommandType) void {
        return objc.msgSend(self, "setCommandTypes:", void, .{commandTypes});
    }

    pub fn inheritPipelineState(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "inheritPipelineState", objc.BOOL, .{});
    }

    pub fn setInheritPipelineState(self: *@This(), inheritPipelineState: objc.BOOL) void {
        return objc.msgSend(self, "setInheritPipelineState:", void, .{inheritPipelineState});
    }

    pub fn inheritBuffers(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "inheritBuffers", objc.BOOL, .{});
    }

    pub fn setInheritBuffers(self: *@This(), inheritBuffers: objc.BOOL) void {
        return objc.msgSend(self, "setInheritBuffers:", void, .{inheritBuffers});
    }

    pub fn maxVertexBufferBindCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxVertexBufferBindCount", objc.NSUInteger, .{});
    }

    pub fn setMaxVertexBufferBindCount(self: *@This(), maxVertexBufferBindCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaxVertexBufferBindCount:", void, .{maxVertexBufferBindCount});
    }

    pub fn maxFragmentBufferBindCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxFragmentBufferBindCount", objc.NSUInteger, .{});
    }

    pub fn setMaxFragmentBufferBindCount(self: *@This(), maxFragmentBufferBindCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaxFragmentBufferBindCount:", void, .{maxFragmentBufferBindCount});
    }

    pub fn maxKernelBufferBindCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxKernelBufferBindCount", objc.NSUInteger, .{});
    }

    pub fn setMaxKernelBufferBindCount(self: *@This(), maxKernelBufferBindCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaxKernelBufferBindCount:", void, .{maxKernelBufferBindCount});
    }

    pub fn maxKernelThreadgroupMemoryBindCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxKernelThreadgroupMemoryBindCount", objc.NSUInteger, .{});
    }

    pub fn setMaxKernelThreadgroupMemoryBindCount(self: *@This(), maxKernelThreadgroupMemoryBindCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaxKernelThreadgroupMemoryBindCount:", void, .{maxKernelThreadgroupMemoryBindCount});
    }

    pub fn maxObjectBufferBindCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxObjectBufferBindCount", objc.NSUInteger, .{});
    }

    pub fn setMaxObjectBufferBindCount(self: *@This(), maxObjectBufferBindCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaxObjectBufferBindCount:", void, .{maxObjectBufferBindCount});
    }

    pub fn maxMeshBufferBindCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxMeshBufferBindCount", objc.NSUInteger, .{});
    }

    pub fn setMaxMeshBufferBindCount(self: *@This(), maxMeshBufferBindCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaxMeshBufferBindCount:", void, .{maxMeshBufferBindCount});
    }

    pub fn maxObjectThreadgroupMemoryBindCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxObjectThreadgroupMemoryBindCount", objc.NSUInteger, .{});
    }

    pub fn setMaxObjectThreadgroupMemoryBindCount(self: *@This(), maxObjectThreadgroupMemoryBindCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaxObjectThreadgroupMemoryBindCount:", void, .{maxObjectThreadgroupMemoryBindCount});
    }

    pub fn supportRayTracing(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportRayTracing", objc.BOOL, .{});
    }

    pub fn setSupportRayTracing(self: *@This(), supportRayTracing: objc.BOOL) void {
        return objc.msgSend(self, "setSupportRayTracing:", void, .{supportRayTracing});
    }

    pub fn supportDynamicAttributeStride(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "supportDynamicAttributeStride", objc.BOOL, .{});
    }

    pub fn setSupportDynamicAttributeStride(self: *@This(), supportDynamicAttributeStride: objc.BOOL) void {
        return objc.msgSend(self, "setSupportDynamicAttributeStride:", void, .{supportDynamicAttributeStride});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLIndirectCommandBuffer?language=objc
pub const IndirectCommandBuffer = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{Resource, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn resetWithRange(self: *@This(), range: ns.Range) void {
        return objc.msgSend(self, "resetWithRange:", void, .{range});
    }

    pub fn indirectRenderCommandAtIndex(self: *@This(), commandIndex: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(self, "indirectRenderCommandAtIndex:", ?*anyopaque, .{commandIndex});
    }

    pub fn indirectComputeCommandAtIndex(self: *@This(), commandIndex: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(self, "indirectComputeCommandAtIndex:", ?*anyopaque, .{commandIndex});
    }

    pub fn size(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "size", objc.NSUInteger, .{});
    }

    pub fn gpuResourceID(self: *@This()) ResourceID {
        return objc.msgSend(self, "gpuResourceID", ResourceID, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLEvent?language=objc
pub const Event = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn device(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "device", ?*anyopaque, .{});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*ns.String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLSharedEventListener?language=objc
pub const SharedEventListener = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLSharedEventListener", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithDispatchQueue(self: *@This(), dispatchQueue: objc.dispatch_queue_t) *@This() {
        return objc.msgSend(self, "initWithDispatchQueue:", *@This(), .{dispatchQueue});
    }

    pub fn dispatchQueue(self: *@This()) objc.dispatch_queue_t {
        return objc.msgSend(self, "dispatchQueue", objc.dispatch_queue_t, .{});
    }

};

pub const SharedEventNotificationBlock = *const fn(?*anyopaque, objc.uint64_t) callconv(.C) void;

/// https://developer.apple.com/documentation/Metal/MTLSharedEvent?language=objc
pub const SharedEvent = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{Event, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn notifyListenerAtValueBlock(self: *@This(), listener: ?*SharedEventListener, value: objc.uint64_t, block: SharedEventNotificationBlock) void {
        return objc.msgSend(self, "notifyListener:atValue:block:", void, .{listener, value, block});
    }

    pub fn newSharedEventHandle(self: *@This()) ?*SharedEventHandle {
        return objc.msgSend(self, "newSharedEventHandle", ?*SharedEventHandle, .{});
    }

    pub fn waitUntilSignaledValueTimeoutMS(self: *@This(), value: objc.uint64_t, milliseconds: objc.uint64_t) objc.BOOL {
        return objc.msgSend(self, "waitUntilSignaledValue:timeoutMS:", objc.BOOL, .{value, milliseconds});
    }

    pub fn signaledValue(self: *@This()) objc.uint64_t {
        return objc.msgSend(self, "signaledValue", objc.uint64_t, .{});
    }

    pub fn setSignaledValue(self: *@This(), signaledValue: objc.uint64_t) void {
        return objc.msgSend(self, "setSignaledValue:", void, .{signaledValue});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLSharedEventHandle?language=objc
pub const SharedEventHandle = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLSharedEventHandle", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

};

pub const SharedEventHandlePrivate = extern struct {};

pub const FunctionLogType = enum(objc.NSUInteger) {
    Validation = 0,
};

/// https://developer.apple.com/documentation/Metal/MTLLogContainer?language=objc
pub const LogContainer = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, ns.FastEnumeration, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
};

/// https://developer.apple.com/documentation/Metal/MTLFunctionLogDebugLocation?language=objc
pub const FunctionLogDebugLocation = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn functionName(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "functionName", ?*ns.String, .{});
    }

    pub fn URL(self: *@This()) ?*ns.URL {
        return objc.msgSend(self, "URL", ?*ns.URL, .{});
    }

    pub fn line(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "line", objc.NSUInteger, .{});
    }

    pub fn column(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "column", objc.NSUInteger, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLFunctionLog?language=objc
pub const FunctionLog = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn @"type"(self: *@This()) FunctionLogType {
        return objc.msgSend(self, "type", FunctionLogType, .{});
    }

    pub fn encoderLabel(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "encoderLabel", ?*ns.String, .{});
    }

    pub fn function(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "function", ?*anyopaque, .{});
    }

    pub fn debugLocation(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "debugLocation", ?*anyopaque, .{});
    }

};

pub const AccelerationStructureRefitOptions = enum(objc.NSUInteger) {
    VertexData = 1,
    PerPrimitiveData = 2,
};

/// https://developer.apple.com/documentation/Metal/MTLAccelerationStructureCommandEncoder?language=objc
pub const AccelerationStructureCommandEncoder = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{CommandEncoder, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn buildAccelerationStructureDescriptorScratchBufferScratchBufferOffset(self: *@This(), accelerationStructure: ?*anyopaque, descriptor: ?*AccelerationStructureDescriptor, scratchBuffer: ?*anyopaque, scratchBufferOffset: objc.NSUInteger, ) void {
        return objc.msgSend(self, "buildAccelerationStructure:descriptor:scratchBuffer:scratchBufferOffset:", void, .{accelerationStructure, descriptor, scratchBuffer, scratchBufferOffset, });
    }

    pub fn refitAccelerationStructureDescriptorDestinationScratchBufferScratchBufferOffset(self: *@This(), sourceAccelerationStructure: ?*anyopaque, descriptor: ?*AccelerationStructureDescriptor, destinationAccelerationStructure: ?*anyopaque, scratchBuffer: ?*anyopaque, scratchBufferOffset: objc.NSUInteger, ) void {
        return objc.msgSend(self, "refitAccelerationStructure:descriptor:destination:scratchBuffer:scratchBufferOffset:", void, .{sourceAccelerationStructure, descriptor, destinationAccelerationStructure, scratchBuffer, scratchBufferOffset, });
    }

    pub fn refitAccelerationStructureDescriptorDestinationScratchBufferScratchBufferOffsetOptions(self: *@This(), sourceAccelerationStructure: ?*anyopaque, descriptor: ?*AccelerationStructureDescriptor, destinationAccelerationStructure: ?*anyopaque, scratchBuffer: ?*anyopaque, scratchBufferOffset: objc.NSUInteger, options: AccelerationStructureRefitOptions, ) void {
        return objc.msgSend(self, "refitAccelerationStructure:descriptor:destination:scratchBuffer:scratchBufferOffset:options:", void, .{sourceAccelerationStructure, descriptor, destinationAccelerationStructure, scratchBuffer, scratchBufferOffset, options, });
    }

    pub fn copyAccelerationStructureToAccelerationStructure(self: *@This(), sourceAccelerationStructure: ?*anyopaque, destinationAccelerationStructure: ?*anyopaque) void {
        return objc.msgSend(self, "copyAccelerationStructure:toAccelerationStructure:", void, .{sourceAccelerationStructure, destinationAccelerationStructure});
    }

    pub fn writeCompactedAccelerationStructureSizeToBufferOffset(self: *@This(), accelerationStructure: ?*anyopaque, buffer: ?*anyopaque, offset: objc.NSUInteger) void {
        return objc.msgSend(self, "writeCompactedAccelerationStructureSize:toBuffer:offset:", void, .{accelerationStructure, buffer, offset});
    }

    pub fn writeCompactedAccelerationStructureSizeToBufferOffsetSizeDataType(self: *@This(), accelerationStructure: ?*anyopaque, buffer: ?*anyopaque, offset: objc.NSUInteger, sizeDataType: DataType, ) void {
        return objc.msgSend(self, "writeCompactedAccelerationStructureSize:toBuffer:offset:sizeDataType:", void, .{accelerationStructure, buffer, offset, sizeDataType, });
    }

    pub fn copyAndCompactAccelerationStructureToAccelerationStructure(self: *@This(), sourceAccelerationStructure: ?*anyopaque, destinationAccelerationStructure: ?*anyopaque) void {
        return objc.msgSend(self, "copyAndCompactAccelerationStructure:toAccelerationStructure:", void, .{sourceAccelerationStructure, destinationAccelerationStructure});
    }

    pub fn updateFence(self: *@This(), fence: ?*anyopaque) void {
        return objc.msgSend(self, "updateFence:", void, .{fence});
    }

    pub fn waitForFence(self: *@This(), fence: ?*anyopaque) void {
        return objc.msgSend(self, "waitForFence:", void, .{fence});
    }

    pub fn useResourceUsage(self: *@This(), resource: ?*anyopaque, usage: ResourceUsage) void {
        return objc.msgSend(self, "useResource:usage:", void, .{resource, usage});
    }

    pub fn useResourcesCountUsage(self: *@This(), resources: ?*?*anyopaque, count: objc.NSUInteger, usage: ResourceUsage) void {
        return objc.msgSend(self, "useResources:count:usage:", void, .{resources, count, usage});
    }

    pub fn useHeap(self: *@This(), heap: ?*anyopaque) void {
        return objc.msgSend(self, "useHeap:", void, .{heap});
    }

    pub fn useHeapsCount(self: *@This(), heaps: ?*?*anyopaque, count: objc.NSUInteger) void {
        return objc.msgSend(self, "useHeaps:count:", void, .{heaps, count});
    }

    pub fn sampleCountersInBufferAtSampleIndexWithBarrier(self: *@This(), sampleBuffer: ?*anyopaque, sampleIndex: objc.NSUInteger, barrier: objc.BOOL) void {
        return objc.msgSend(self, "sampleCountersInBuffer:atSampleIndex:withBarrier:", void, .{sampleBuffer, sampleIndex, barrier});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLAccelerationStructurePassSampleBufferAttachmentDescriptor?language=objc
pub const AccelerationStructurePassSampleBufferAttachmentDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLAccelerationStructurePassSampleBufferAttachmentDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn sampleBuffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "sampleBuffer", ?*anyopaque, .{});
    }

    pub fn setSampleBuffer(self: *@This(), sampleBuffer: ?*anyopaque) void {
        return objc.msgSend(self, "setSampleBuffer:", void, .{sampleBuffer});
    }

    pub fn startOfEncoderSampleIndex(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "startOfEncoderSampleIndex", objc.NSUInteger, .{});
    }

    pub fn setStartOfEncoderSampleIndex(self: *@This(), startOfEncoderSampleIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setStartOfEncoderSampleIndex:", void, .{startOfEncoderSampleIndex});
    }

    pub fn endOfEncoderSampleIndex(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "endOfEncoderSampleIndex", objc.NSUInteger, .{});
    }

    pub fn setEndOfEncoderSampleIndex(self: *@This(), endOfEncoderSampleIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setEndOfEncoderSampleIndex:", void, .{endOfEncoderSampleIndex});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLAccelerationStructurePassSampleBufferAttachmentDescriptorArray?language=objc
pub const AccelerationStructurePassSampleBufferAttachmentDescriptorArray = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLAccelerationStructurePassSampleBufferAttachmentDescriptorArray", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn objectAtIndexedSubscript(self: *@This(), attachmentIndex: objc.NSUInteger) ?*AccelerationStructurePassSampleBufferAttachmentDescriptor {
        return objc.msgSend(self, "objectAtIndexedSubscript:", ?*AccelerationStructurePassSampleBufferAttachmentDescriptor, .{attachmentIndex});
    }

    pub fn setObjectAtIndexedSubscript(self: *@This(), attachment: ?*AccelerationStructurePassSampleBufferAttachmentDescriptor, attachmentIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setObject:atIndexedSubscript:", void, .{attachment, attachmentIndex});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLAccelerationStructurePassDescriptor?language=objc
pub const AccelerationStructurePassDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLAccelerationStructurePassDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn accelerationStructurePassDescriptor(self: *@This()) ?*AccelerationStructurePassDescriptor {
        return objc.msgSend(self, "accelerationStructurePassDescriptor", ?*AccelerationStructurePassDescriptor, .{});
    }

    pub fn sampleBufferAttachments(self: *@This()) ?*AccelerationStructurePassSampleBufferAttachmentDescriptorArray {
        return objc.msgSend(self, "sampleBufferAttachments", ?*AccelerationStructurePassSampleBufferAttachmentDescriptorArray, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLRasterizationRateSampleArray?language=objc
pub const RasterizationRateSampleArray = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLRasterizationRateSampleArray", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn objectAtIndexedSubscript(self: *@This(), index: objc.NSUInteger) ?*ns.Number {
        return objc.msgSend(self, "objectAtIndexedSubscript:", ?*ns.Number, .{index});
    }

    pub fn setObjectAtIndexedSubscript(self: *@This(), value: ?*NSNumber, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setObject:atIndexedSubscript:", void, .{value, index});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLRasterizationRateLayerDescriptor?language=objc
pub const RasterizationRateLayerDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLRasterizationRateLayerDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithSampleCount(self: *@This(), sampleCount: Size) *@This() {
        return objc.msgSend(self, "initWithSampleCount:", *@This(), .{sampleCount});
    }

    pub fn initWithSampleCountHorizontalVertical(self: *@This(), sampleCount: Size, horizontal: ?*f32, vertical: ?*f32) *@This() {
        return objc.msgSend(self, "initWithSampleCount:horizontal:vertical:", *@This(), .{sampleCount, horizontal, vertical});
    }

    pub fn sampleCount(self: *@This()) Size {
        return objc.msgSend(self, "sampleCount", Size, .{});
    }

    pub fn maxSampleCount(self: *@This()) Size {
        return objc.msgSend(self, "maxSampleCount", Size, .{});
    }

    pub fn horizontalSampleStorage(self: *@This()) ?*f32 {
        return objc.msgSend(self, "horizontalSampleStorage", ?*f32, .{});
    }

    pub fn verticalSampleStorage(self: *@This()) ?*f32 {
        return objc.msgSend(self, "verticalSampleStorage", ?*f32, .{});
    }

    pub fn horizontal(self: *@This()) ?*RasterizationRateSampleArray {
        return objc.msgSend(self, "horizontal", ?*RasterizationRateSampleArray, .{});
    }

    pub fn vertical(self: *@This()) ?*RasterizationRateSampleArray {
        return objc.msgSend(self, "vertical", ?*RasterizationRateSampleArray, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLRasterizationRateLayerArray?language=objc
pub const RasterizationRateLayerArray = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLRasterizationRateLayerArray", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn objectAtIndexedSubscript(self: *@This(), layerIndex: objc.NSUInteger) ?*RasterizationRateLayerDescriptor {
        return objc.msgSend(self, "objectAtIndexedSubscript:", ?*RasterizationRateLayerDescriptor, .{layerIndex});
    }

    pub fn setObjectAtIndexedSubscript(self: *@This(), layer: ?*RasterizationRateLayerDescriptor, layerIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setObject:atIndexedSubscript:", void, .{layer, layerIndex});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLRasterizationRateMapDescriptor?language=objc
pub const RasterizationRateMapDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLRasterizationRateMapDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn rasterizationRateMapDescriptorWithScreenSize(self: *@This(), screenSize: Size) ?*RasterizationRateMapDescriptor {
        return objc.msgSend(self, "rasterizationRateMapDescriptorWithScreenSize:", ?*RasterizationRateMapDescriptor, .{screenSize});
    }

    pub fn rasterizationRateMapDescriptorWithScreenSizeLayer(self: *@This(), screenSize: Size, layer: ?*RasterizationRateLayerDescriptor) ?*RasterizationRateMapDescriptor {
        return objc.msgSend(self, "rasterizationRateMapDescriptorWithScreenSize:layer:", ?*RasterizationRateMapDescriptor, .{screenSize, layer});
    }

    pub fn rasterizationRateMapDescriptorWithScreenSizeLayerCountLayers(self: *@This(), screenSize: Size, layerCount: objc.NSUInteger, layers: ?*?*const RasterizationRateLayerDescriptor) ?*RasterizationRateMapDescriptor {
        return objc.msgSend(self, "rasterizationRateMapDescriptorWithScreenSize:layerCount:layers:", ?*RasterizationRateMapDescriptor, .{screenSize, layerCount, layers});
    }

    pub fn layerAtIndex(self: *@This(), layerIndex: objc.NSUInteger) ?*RasterizationRateLayerDescriptor {
        return objc.msgSend(self, "layerAtIndex:", ?*RasterizationRateLayerDescriptor, .{layerIndex});
    }

    pub fn setLayerAtIndex(self: *@This(), layer: ?*RasterizationRateLayerDescriptor, layerIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setLayer:atIndex:", void, .{layer, layerIndex});
    }

    pub fn layers(self: *@This()) ?*RasterizationRateLayerArray {
        return objc.msgSend(self, "layers", ?*RasterizationRateLayerArray, .{});
    }

    pub fn screenSize(self: *@This()) Size {
        return objc.msgSend(self, "screenSize", Size, .{});
    }

    pub fn setScreenSize(self: *@This(), screenSize: Size) void {
        return objc.msgSend(self, "setScreenSize:", void, .{screenSize});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*ns.String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

    pub fn layerCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "layerCount", objc.NSUInteger, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLRasterizationRateMap?language=objc
pub const RasterizationRateMap = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn copyParameterDataToBufferOffset(self: *@This(), buffer: ?*anyopaque, offset: objc.NSUInteger) void {
        return objc.msgSend(self, "copyParameterDataToBuffer:offset:", void, .{buffer, offset});
    }

    pub fn physicalSizeForLayer(self: *@This(), layerIndex: objc.NSUInteger) Size {
        return objc.msgSend(self, "physicalSizeForLayer:", Size, .{layerIndex});
    }

    pub fn mapScreenToPhysicalCoordinatesForLayer(self: *@This(), screenCoordinates: Coordinate2D, layerIndex: objc.NSUInteger) Coordinate2D {
        return objc.msgSend(self, "mapScreenToPhysicalCoordinates:forLayer:", Coordinate2D, .{screenCoordinates, layerIndex});
    }

    pub fn mapPhysicalToScreenCoordinatesForLayer(self: *@This(), physicalCoordinates: Coordinate2D, layerIndex: objc.NSUInteger) Coordinate2D {
        return objc.msgSend(self, "mapPhysicalToScreenCoordinates:forLayer:", Coordinate2D, .{physicalCoordinates, layerIndex});
    }

    pub fn device(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "device", ?*anyopaque, .{});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn screenSize(self: *@This()) Size {
        return objc.msgSend(self, "screenSize", Size, .{});
    }

    pub fn physicalGranularity(self: *@This()) Size {
        return objc.msgSend(self, "physicalGranularity", Size, .{});
    }

    pub fn layerCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "layerCount", objc.NSUInteger, .{});
    }

    pub fn parameterBufferSizeAndAlign(self: *@This()) SizeAndAlign {
        return objc.msgSend(self, "parameterBufferSizeAndAlign", SizeAndAlign, .{});
    }

};

pub const DynamicLibraryError = enum(objc.NSUInteger) {
    None = 0,
    InvalidFile = 1,
    CompilationFailure = 2,
    UnresolvedInstallName = 3,
    DependencyLoadFailure = 4,
    Unsupported = 5,
};

/// https://developer.apple.com/documentation/Metal/MTLDynamicLibrary?language=objc
pub const DynamicLibrary = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn serializeToURLError(self: *@This(), url: ?*ns.URL, @"error": ?*?*ns.Error) objc.BOOL {
        return objc.msgSend(self, "serializeToURL:error:", objc.BOOL, .{url, @"error"});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*ns.String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

    pub fn device(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "device", ?*anyopaque, .{});
    }

    pub fn installName(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "installName", ?*ns.String, .{});
    }

};

pub const LogLevel = enum(objc.NSInteger) {
    Undefined = 0,
    Debug = 1,
    Info = 2,
    Notice = 3,
    Error = 4,
    Fault = 5,
};

/// https://developer.apple.com/documentation/Metal/MTLLogState?language=objc
pub const LogState = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn addLogHandler(self: *@This(), block: *const fn(?*ns.String, ?*ns.String, LogLevel, ?*ns.String, ) callconv(.C) void) void {
        return objc.msgSend(self, "addLogHandler:", void, .{block});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLLogStateDescriptor?language=objc
pub const LogStateDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLLogStateDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn level(self: *@This()) LogLevel {
        return objc.msgSend(self, "level", LogLevel, .{});
    }

    pub fn setLevel(self: *@This(), level: LogLevel) void {
        return objc.msgSend(self, "setLevel:", void, .{level});
    }

    pub fn bufferSize(self: *@This()) objc.NSInteger {
        return objc.msgSend(self, "bufferSize", objc.NSInteger, .{});
    }

    pub fn setBufferSize(self: *@This(), bufferSize: objc.NSInteger) void {
        return objc.msgSend(self, "setBufferSize:", void, .{bufferSize});
    }

};

pub const LogStateError = enum(objc.NSUInteger) {
    InvalidSize = 1,
    Invalid = 2,
};

pub const BinaryArchiveError = enum(objc.NSUInteger) {
    None = 0,
    InvalidFile = 1,
    UnexpectedElement = 2,
    CompilationFailure = 3,
    InternalError = 4,
};

/// https://developer.apple.com/documentation/Metal/MTLBinaryArchiveDescriptor?language=objc
pub const BinaryArchiveDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLBinaryArchiveDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn url(self: *@This()) ?*ns.URL {
        return objc.msgSend(self, "url", ?*ns.URL, .{});
    }

    pub fn setUrl(self: *@This(), url: ?*ns.URL) void {
        return objc.msgSend(self, "setUrl:", void, .{url});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLBinaryArchive?language=objc
pub const BinaryArchive = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn addComputePipelineFunctionsWithDescriptorError(self: *@This(), descriptor: ?*ComputePipelineDescriptor, @"error": ?*?*ns.Error) objc.BOOL {
        return objc.msgSend(self, "addComputePipelineFunctionsWithDescriptor:error:", objc.BOOL, .{descriptor, @"error"});
    }

    pub fn addRenderPipelineFunctionsWithDescriptorError(self: *@This(), descriptor: ?*RenderPipelineDescriptor, @"error": ?*?*ns.Error) objc.BOOL {
        return objc.msgSend(self, "addRenderPipelineFunctionsWithDescriptor:error:", objc.BOOL, .{descriptor, @"error"});
    }

    pub fn addTileRenderPipelineFunctionsWithDescriptorError(self: *@This(), descriptor: ?*TileRenderPipelineDescriptor, @"error": ?*?*ns.Error) objc.BOOL {
        return objc.msgSend(self, "addTileRenderPipelineFunctionsWithDescriptor:error:", objc.BOOL, .{descriptor, @"error"});
    }

    pub fn addMeshRenderPipelineFunctionsWithDescriptorError(self: *@This(), descriptor: ?*MeshRenderPipelineDescriptor, @"error": ?*?*ns.Error) objc.BOOL {
        return objc.msgSend(self, "addMeshRenderPipelineFunctionsWithDescriptor:error:", objc.BOOL, .{descriptor, @"error"});
    }

    pub fn addLibraryWithDescriptorError(self: *@This(), descriptor: ?*StitchedLibraryDescriptor, @"error": ?*?*ns.Error) objc.BOOL {
        return objc.msgSend(self, "addLibraryWithDescriptor:error:", objc.BOOL, .{descriptor, @"error"});
    }

    pub fn serializeToURLError(self: *@This(), url: ?*ns.URL, @"error": ?*?*ns.Error) objc.BOOL {
        return objc.msgSend(self, "serializeToURL:error:", objc.BOOL, .{url, @"error"});
    }

    pub fn addFunctionWithDescriptorLibraryError(self: *@This(), descriptor: ?*FunctionDescriptor, library: ?*anyopaque, @"error": ?*?*ns.Error) objc.BOOL {
        return objc.msgSend(self, "addFunctionWithDescriptor:library:error:", objc.BOOL, .{descriptor, library, @"error"});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*ns.String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

    pub fn device(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "device", ?*anyopaque, .{});
    }

};

pub const IntersectionFunctionSignature = enum(objc.NSUInteger) {
    None = 0,
    Instancing = 1,
    TriangleData = 2,
    WorldSpaceData = 4,
    InstanceMotion = 8,
    PrimitiveMotion = 16,
    ExtendedLimits = 32,
    MaxLevels = 64,
    CurveData = 128,
};

/// https://developer.apple.com/documentation/Metal/MTLIntersectionFunctionTableDescriptor?language=objc
pub const IntersectionFunctionTableDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLIntersectionFunctionTableDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn intersectionFunctionTableDescriptor(self: *@This()) ?*IntersectionFunctionTableDescriptor {
        return objc.msgSend(self, "intersectionFunctionTableDescriptor", ?*IntersectionFunctionTableDescriptor, .{});
    }

    pub fn functionCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "functionCount", objc.NSUInteger, .{});
    }

    pub fn setFunctionCount(self: *@This(), functionCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setFunctionCount:", void, .{functionCount});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLIntersectionFunctionTable?language=objc
pub const IntersectionFunctionTable = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{Resource, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn setBufferOffsetAtIndex(self: *@This(), buffer: ?*anyopaque, offset: objc.NSUInteger, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setBuffer:offset:atIndex:", void, .{buffer, offset, index});
    }

    pub fn setBuffersOffsetsWithRange(self: *@This(), buffers: ?*?*anyopaque, offsets: ?*objc.NSUInteger, range: ns.Range) void {
        return objc.msgSend(self, "setBuffers:offsets:withRange:", void, .{buffers, offsets, range});
    }

    pub fn setFunctionAtIndex(self: *@This(), function: ?*anyopaque, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setFunction:atIndex:", void, .{function, index});
    }

    pub fn setFunctionsWithRange(self: *@This(), functions: ?*?*anyopaque, range: ns.Range) void {
        return objc.msgSend(self, "setFunctions:withRange:", void, .{functions, range});
    }

    pub fn setOpaqueTriangleIntersectionFunctionWithSignatureAtIndex(self: *@This(), signature: IntersectionFunctionSignature, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setOpaqueTriangleIntersectionFunctionWithSignature:atIndex:", void, .{signature, index});
    }

    pub fn setOpaqueTriangleIntersectionFunctionWithSignatureWithRange(self: *@This(), signature: IntersectionFunctionSignature, range: ns.Range) void {
        return objc.msgSend(self, "setOpaqueTriangleIntersectionFunctionWithSignature:withRange:", void, .{signature, range});
    }

    pub fn setOpaqueCurveIntersectionFunctionWithSignatureAtIndex(self: *@This(), signature: IntersectionFunctionSignature, index: objc.NSUInteger) void {
        return objc.msgSend(self, "setOpaqueCurveIntersectionFunctionWithSignature:atIndex:", void, .{signature, index});
    }

    pub fn setOpaqueCurveIntersectionFunctionWithSignatureWithRange(self: *@This(), signature: IntersectionFunctionSignature, range: ns.Range) void {
        return objc.msgSend(self, "setOpaqueCurveIntersectionFunctionWithSignature:withRange:", void, .{signature, range});
    }

    pub fn setVisibleFunctionTableAtBufferIndex(self: *@This(), functionTable: ?*anyopaque, bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setVisibleFunctionTable:atBufferIndex:", void, .{functionTable, bufferIndex});
    }

    pub fn setVisibleFunctionTablesWithBufferRange(self: *@This(), functionTables: ?*?*anyopaque, bufferRange: ns.Range) void {
        return objc.msgSend(self, "setVisibleFunctionTables:withBufferRange:", void, .{functionTables, bufferRange});
    }

    pub fn gpuResourceID(self: *@This()) ResourceID {
        return objc.msgSend(self, "gpuResourceID", ResourceID, .{});
    }

};

pub const StitchedLibraryOptions = enum(objc.NSUInteger) {
    None = 0,
    FailOnBinaryArchiveMiss = 1,
    StoreLibraryInMetalPipelinesScript = 2,
};

/// https://developer.apple.com/documentation/Metal/MTLFunctionStitchingAttribute?language=objc
pub const FunctionStitchingAttribute = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
};

/// https://developer.apple.com/documentation/Metal/MTLFunctionStitchingAttributeAlwaysInline?language=objc
pub const FunctionStitchingAttributeAlwaysInline = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLFunctionStitchingAttributeAlwaysInline", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;
};

/// https://developer.apple.com/documentation/Metal/MTLFunctionStitchingNode?language=objc
pub const FunctionStitchingNode = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, ns.Copying, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
};

/// https://developer.apple.com/documentation/Metal/MTLFunctionStitchingInputNode?language=objc
pub const FunctionStitchingInputNode = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLFunctionStitchingInputNode", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithArgumentIndex(self: *@This(), argument: objc.NSUInteger) *@This() {
        return objc.msgSend(self, "initWithArgumentIndex:", *@This(), .{argument});
    }

    pub fn argumentIndex(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "argumentIndex", objc.NSUInteger, .{});
    }

    pub fn setArgumentIndex(self: *@This(), argumentIndex: objc.NSUInteger) void {
        return objc.msgSend(self, "setArgumentIndex:", void, .{argumentIndex});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLFunctionStitchingFunctionNode?language=objc
pub const FunctionStitchingFunctionNode = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLFunctionStitchingFunctionNode", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithNameArgumentsControlDependencies(self: *@This(), name: ?*ns.String, arguments: ?*anyopaque, controlDependencies: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithName:arguments:controlDependencies:", *@This(), .{name, arguments, controlDependencies});
    }

    pub fn name(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "name", ?*ns.String, .{});
    }

    pub fn setName(self: *@This(), name: ?*ns.String) void {
        return objc.msgSend(self, "setName:", void, .{name});
    }

    pub fn arguments(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "arguments", ?*anyopaque, .{});
    }

    pub fn setArguments(self: *@This(), arguments: ?*anyopaque) void {
        return objc.msgSend(self, "setArguments:", void, .{arguments});
    }

    pub fn controlDependencies(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "controlDependencies", ?*anyopaque, .{});
    }

    pub fn setControlDependencies(self: *@This(), controlDependencies: ?*anyopaque) void {
        return objc.msgSend(self, "setControlDependencies:", void, .{controlDependencies});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLFunctionStitchingGraph?language=objc
pub const FunctionStitchingGraph = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLFunctionStitchingGraph", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithFunctionNameNodesOutputNodeAttributes(self: *@This(), functionName: ?*ns.String, nodes: ?*anyopaque, outputNode: ?*FunctionStitchingFunctionNode, attributes: ?*anyopaque, ) *@This() {
        return objc.msgSend(self, "initWithFunctionName:nodes:outputNode:attributes:", *@This(), .{functionName, nodes, outputNode, attributes, });
    }

    pub fn functionName(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "functionName", ?*ns.String, .{});
    }

    pub fn setFunctionName(self: *@This(), functionName: ?*ns.String) void {
        return objc.msgSend(self, "setFunctionName:", void, .{functionName});
    }

    pub fn nodes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "nodes", ?*anyopaque, .{});
    }

    pub fn setNodes(self: *@This(), nodes: ?*anyopaque) void {
        return objc.msgSend(self, "setNodes:", void, .{nodes});
    }

    pub fn outputNode(self: *@This()) ?*FunctionStitchingFunctionNode {
        return objc.msgSend(self, "outputNode", ?*FunctionStitchingFunctionNode, .{});
    }

    pub fn setOutputNode(self: *@This(), outputNode: ?*FunctionStitchingFunctionNode) void {
        return objc.msgSend(self, "setOutputNode:", void, .{outputNode});
    }

    pub fn attributes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "attributes", ?*anyopaque, .{});
    }

    pub fn setAttributes(self: *@This(), attributes: ?*anyopaque) void {
        return objc.msgSend(self, "setAttributes:", void, .{attributes});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLStitchedLibraryDescriptor?language=objc
pub const StitchedLibraryDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLStitchedLibraryDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn functionGraphs(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "functionGraphs", ?*anyopaque, .{});
    }

    pub fn setFunctionGraphs(self: *@This(), functionGraphs: ?*anyopaque) void {
        return objc.msgSend(self, "setFunctionGraphs:", void, .{functionGraphs});
    }

    pub fn functions(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "functions", ?*anyopaque, .{});
    }

    pub fn setFunctions(self: *@This(), functions: ?*anyopaque) void {
        return objc.msgSend(self, "setFunctions:", void, .{functions});
    }

    pub fn binaryArchives(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "binaryArchives", ?*anyopaque, .{});
    }

    pub fn setBinaryArchives(self: *@This(), binaryArchives: ?*anyopaque) void {
        return objc.msgSend(self, "setBinaryArchives:", void, .{binaryArchives});
    }

    pub fn options(self: *@This()) StitchedLibraryOptions {
        return objc.msgSend(self, "options", StitchedLibraryOptions, .{});
    }

    pub fn setOptions(self: *@This(), options: StitchedLibraryOptions) void {
        return objc.msgSend(self, "setOptions:", void, .{options});
    }

};

pub const IOPriority = enum(objc.NSInteger) {
    High = 0,
    Normal = 1,
    Low = 2,
};

pub const IOCommandQueueType = enum(objc.NSInteger) {
    Concurrent = 0,
    Serial = 1,
};

pub const IOError = enum(objc.NSInteger) {
    URLInvalid = 1,
    Internal = 2,
};

/// https://developer.apple.com/documentation/Metal/MTLIOCommandQueue?language=objc
pub const IOCommandQueue = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn enqueueBarrier(self: *@This()) void {
        return objc.msgSend(self, "enqueueBarrier", void, .{});
    }

    pub fn commandBuffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "commandBuffer", ?*anyopaque, .{});
    }

    pub fn commandBufferWithUnretainedReferences(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "commandBufferWithUnretainedReferences", ?*anyopaque, .{});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*ns.String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLIOScratchBuffer?language=objc
pub const IOScratchBuffer = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn buffer(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "buffer", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLIOScratchBufferAllocator?language=objc
pub const IOScratchBufferAllocator = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn newScratchBufferWithMinimumSize(self: *@This(), minimumSize: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(self, "newScratchBufferWithMinimumSize:", ?*anyopaque, .{minimumSize});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLIOCommandQueueDescriptor?language=objc
pub const IOCommandQueueDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLIOCommandQueueDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn maxCommandBufferCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxCommandBufferCount", objc.NSUInteger, .{});
    }

    pub fn setMaxCommandBufferCount(self: *@This(), maxCommandBufferCount: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaxCommandBufferCount:", void, .{maxCommandBufferCount});
    }

    pub fn priority(self: *@This()) IOPriority {
        return objc.msgSend(self, "priority", IOPriority, .{});
    }

    pub fn setPriority(self: *@This(), priority: IOPriority) void {
        return objc.msgSend(self, "setPriority:", void, .{priority});
    }

    pub fn @"type"(self: *@This()) IOCommandQueueType {
        return objc.msgSend(self, "type", IOCommandQueueType, .{});
    }

    pub fn setType(self: *@This(), @"type": IOCommandQueueType) void {
        return objc.msgSend(self, "setType:", void, .{@"type"});
    }

    pub fn maxCommandsInFlight(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "maxCommandsInFlight", objc.NSUInteger, .{});
    }

    pub fn setMaxCommandsInFlight(self: *@This(), maxCommandsInFlight: objc.NSUInteger) void {
        return objc.msgSend(self, "setMaxCommandsInFlight:", void, .{maxCommandsInFlight});
    }

    pub fn scratchBufferAllocator(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "scratchBufferAllocator", ?*anyopaque, .{});
    }

    pub fn setScratchBufferAllocator(self: *@This(), scratchBufferAllocator: ?*anyopaque) void {
        return objc.msgSend(self, "setScratchBufferAllocator:", void, .{scratchBufferAllocator});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLIOFileHandle?language=objc
pub const IOFileHandle = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*ns.String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

};

pub const IOStatus = enum(objc.NSInteger) {
    Pending = 0,
    Cancelled = 1,
    Error = 2,
    Complete = 3,
};

pub const IOCommandBufferHandler = *const fn(?*anyopaque) callconv(.C) void;

/// https://developer.apple.com/documentation/Metal/MTLIOCommandBuffer?language=objc
pub const IOCommandBuffer = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn addCompletedHandler(self: *@This(), block: IOCommandBufferHandler) void {
        return objc.msgSend(self, "addCompletedHandler:", void, .{block});
    }

    pub fn loadBytesSizeSourceHandleSourceHandleOffset(self: *@This(), pointer: ?*anyopaque, size: objc.NSUInteger, sourceHandle: ?*anyopaque, sourceHandleOffset: objc.NSUInteger, ) void {
        return objc.msgSend(self, "loadBytes:size:sourceHandle:sourceHandleOffset:", void, .{pointer, size, sourceHandle, sourceHandleOffset, });
    }

    pub fn loadBufferOffsetSizeSourceHandleSourceHandleOffset(self: *@This(), buffer: ?*anyopaque, offset: objc.NSUInteger, size: objc.NSUInteger, sourceHandle: ?*anyopaque, sourceHandleOffset: objc.NSUInteger, ) void {
        return objc.msgSend(self, "loadBuffer:offset:size:sourceHandle:sourceHandleOffset:", void, .{buffer, offset, size, sourceHandle, sourceHandleOffset, });
    }

    pub fn loadTextureSliceLevelSizeSourceBytesPerRowSourceBytesPerImageDestinationOriginSourceHandleSourceHandleOffset(self: *@This(), texture: ?*anyopaque, slice: objc.NSUInteger, level: objc.NSUInteger, size: Size, sourceBytesPerRow: objc.NSUInteger, sourceBytesPerImage: objc.NSUInteger, destinationOrigin: Origin, sourceHandle: ?*anyopaque, sourceHandleOffset: objc.NSUInteger, ) void {
        return objc.msgSend(self, "loadTexture:slice:level:size:sourceBytesPerRow:sourceBytesPerImage:destinationOrigin:sourceHandle:sourceHandleOffset:", void, .{texture, slice, level, size, sourceBytesPerRow, sourceBytesPerImage, destinationOrigin, sourceHandle, sourceHandleOffset, });
    }

    pub fn copyStatusToBufferOffset(self: *@This(), buffer: ?*anyopaque, offset: objc.NSUInteger) void {
        return objc.msgSend(self, "copyStatusToBuffer:offset:", void, .{buffer, offset});
    }

    pub fn commit(self: *@This()) void {
        return objc.msgSend(self, "commit", void, .{});
    }

    pub fn waitUntilCompleted(self: *@This()) void {
        return objc.msgSend(self, "waitUntilCompleted", void, .{});
    }

    pub fn tryCancel(self: *@This()) void {
        return objc.msgSend(self, "tryCancel", void, .{});
    }

    pub fn addBarrier(self: *@This()) void {
        return objc.msgSend(self, "addBarrier", void, .{});
    }

    pub fn pushDebugGroup(self: *@This(), string: ?*ns.String) void {
        return objc.msgSend(self, "pushDebugGroup:", void, .{string});
    }

    pub fn popDebugGroup(self: *@This()) void {
        return objc.msgSend(self, "popDebugGroup", void, .{});
    }

    pub fn enqueue(self: *@This()) void {
        return objc.msgSend(self, "enqueue", void, .{});
    }

    pub fn waitForEventValue(self: *@This(), event: ?*anyopaque, value: objc.uint64_t) void {
        return objc.msgSend(self, "waitForEvent:value:", void, .{event, value});
    }

    pub fn signalEventValue(self: *@This(), event: ?*anyopaque, value: objc.uint64_t) void {
        return objc.msgSend(self, "signalEvent:value:", void, .{event, value});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*ns.String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

    pub fn status(self: *@This()) IOStatus {
        return objc.msgSend(self, "status", IOStatus, .{});
    }

    pub fn @"error"(self: *@This()) ?*ns.Error {
        return objc.msgSend(self, "error", ?*ns.Error, .{});
    }

};

pub const IOCompressionStatus = enum(objc.NSInteger) {
    Complete = 0,
    Error = 1,
};

pub const IOCompressionContext = ?*anyopaque;

pub extern "Metal" fn IOCompressionContextDefaultChunkSize() callconv(.C) objc.size_t;

pub extern "Metal" fn IOCreateCompressionContext(path: ?*i8, @"type": IOCompressionMethod, chunkSize: objc.size_t) callconv(.C) IOCompressionContext;

pub extern "Metal" fn IOCompressionContextAppendData(context: IOCompressionContext, data: ?*anyopaque, size: objc.size_t) callconv(.C) void;

pub extern "Metal" fn IOFlushAndDestroyCompressionContext(context: IOCompressionContext) callconv(.C) IOCompressionStatus;

/// https://developer.apple.com/documentation/Metal/MTLResidencySetDescriptor?language=objc
pub const ResidencySetDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("MTLResidencySetDescriptor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn setLabel(self: *@This(), label: ?*ns.String) void {
        return objc.msgSend(self, "setLabel:", void, .{label});
    }

    pub fn initialCapacity(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "initialCapacity", objc.NSUInteger, .{});
    }

    pub fn setInitialCapacity(self: *@This(), initialCapacity: objc.NSUInteger) void {
        return objc.msgSend(self, "setInitialCapacity:", void, .{initialCapacity});
    }

};

/// https://developer.apple.com/documentation/Metal/MTLResidencySet?language=objc
pub const ResidencySet = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn requestResidency(self: *@This()) void {
        return objc.msgSend(self, "requestResidency", void, .{});
    }

    pub fn endResidency(self: *@This()) void {
        return objc.msgSend(self, "endResidency", void, .{});
    }

    pub fn addAllocation(self: *@This(), allocation: ?*anyopaque) void {
        return objc.msgSend(self, "addAllocation:", void, .{allocation});
    }

    pub fn addAllocationsCount(self: *@This(), allocations: ?*?*anyopaque, count: objc.NSUInteger) void {
        return objc.msgSend(self, "addAllocations:count:", void, .{allocations, count});
    }

    pub fn removeAllocation(self: *@This(), allocation: ?*anyopaque) void {
        return objc.msgSend(self, "removeAllocation:", void, .{allocation});
    }

    pub fn removeAllocationsCount(self: *@This(), allocations: ?*?*anyopaque, count: objc.NSUInteger) void {
        return objc.msgSend(self, "removeAllocations:count:", void, .{allocations, count});
    }

    pub fn removeAllAllocations(self: *@This()) void {
        return objc.msgSend(self, "removeAllAllocations", void, .{});
    }

    pub fn containsAllocation(self: *@This(), anAllocation: ?*anyopaque) objc.BOOL {
        return objc.msgSend(self, "containsAllocation:", objc.BOOL, .{anAllocation});
    }

    pub fn commit(self: *@This()) void {
        return objc.msgSend(self, "commit", void, .{});
    }

    pub fn device(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "device", ?*anyopaque, .{});
    }

    pub fn label(self: *@This()) ?*ns.String {
        return objc.msgSend(self, "label", ?*ns.String, .{});
    }

    pub fn allocatedSize(self: *@This()) objc.uint64_t {
        return objc.msgSend(self, "allocatedSize", objc.uint64_t, .{});
    }

    pub fn allAllocations(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "allAllocations", ?*anyopaque, .{});
    }

    pub fn allocationCount(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "allocationCount", objc.NSUInteger, .{});
    }

};

