// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const foundation = @import("foundation.zig"); // Framework dependency Foundation.
const io_surface = @import("io_surface.zig"); // Framework dependency IOSurface.

pub const Origin = extern struct {
    x: objc.NSUInteger,
    y: objc.NSUInteger,
    z: objc.NSUInteger,
};

extern "Metal" fn MTLOriginMake(x: objc.NSUInteger, y: objc.NSUInteger, z: objc.NSUInteger) callconv(.C) Origin;
pub const originMake = MTLOriginMake;

pub const Size = extern struct {
    width: objc.NSUInteger,
    height: objc.NSUInteger,
    depth: objc.NSUInteger,
};

extern "Metal" fn MTLSizeMake(width: objc.NSUInteger, height: objc.NSUInteger, depth: objc.NSUInteger) callconv(.C) Size;
pub const sizeMake = MTLSizeMake;

pub const Region = extern struct {
    origin: Origin,
    size: Size,
};

extern "Metal" fn MTLRegionMake1D(x: objc.NSUInteger, width: objc.NSUInteger) callconv(.C) Region;
pub const regionMake1D = MTLRegionMake1D;

extern "Metal" fn MTLRegionMake2D(
    x: objc.NSUInteger,
    y: objc.NSUInteger,
    width: objc.NSUInteger,
    height: objc.NSUInteger,
) callconv(.C) Region;
pub const regionMake2D = MTLRegionMake2D;

extern "Metal" fn MTLRegionMake3D(
    x: objc.NSUInteger,
    y: objc.NSUInteger,
    z: objc.NSUInteger,
    width: objc.NSUInteger,
    height: objc.NSUInteger,
    depth: objc.NSUInteger,
) callconv(.C) Region;
pub const regionMake3D = MTLRegionMake3D;

pub const SamplePosition = extern struct {
    x: f32,
    y: f32,
};

extern "Metal" fn MTLSamplePositionMake(x: f32, y: f32) callconv(.C) SamplePosition;
pub const samplePositionMake = MTLSamplePositionMake;

pub const Coordinate2D = SamplePosition;

extern "Metal" fn MTLCoordinate2DMake(x: f32, y: f32) callconv(.C) Coordinate2D;
pub const coordinate2DMake = MTLCoordinate2DMake;

pub const ResourceID = extern struct {
    _impl: objc.uint64_t,
};

pub const ResourceUsage = enum(objc.NSUInteger) {
    Read = 1,
    Write = 2,
    Sample = 4,
};

pub const BarrierScope = enum(objc.NSUInteger) {
    Buffers = 1,
    Textures = 2,
    RenderTargets = 4,
};

/// https://developer.apple.com/documentation/Metal/MTLCommandEncoder?language=objc
pub const CommandEncoder = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn endEncoding(_self: *@This()) void {
        return objc.msgSend(_self, "endEncoding", void, .{});
    }

    pub fn insertDebugSignpost(_self: *@This(), _string: ?*foundation.String) void {
        return objc.msgSend(_self, "insertDebugSignpost:", void, .{_string});
    }

    pub fn pushDebugGroup(_self: *@This(), _string: ?*foundation.String) void {
        return objc.msgSend(_self, "pushDebugGroup:", void, .{_string});
    }

    pub fn popDebugGroup(_self: *@This()) void {
        return objc.msgSend(_self, "popDebugGroup", void, .{});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLAllocation?language=objc
pub const Allocation = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn allocatedSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "allocatedSize", objc.NSUInteger, .{});
    }
};

pub const PurgeableState = enum(objc.NSUInteger) {
    KeepCurrent = 1,
    NonVolatile = 2,
    Volatile = 3,
    Empty = 4,
};

pub const CPUCacheMode = enum(objc.NSUInteger) {
    DefaultCache = 0,
    WriteCombined = 1,
};

pub const StorageMode = enum(objc.NSUInteger) {
    Shared = 0,
    Managed = 1,
    Private = 2,
    Memoryless = 3,
};

pub const HazardTrackingMode = enum(objc.NSUInteger) {
    Default = 0,
    Untracked = 1,
    Tracked = 2,
};

pub const ResourceOptions = enum(objc.NSUInteger) {
    CPUCacheModeDefaultCache = 0,
    CPUCacheModeWriteCombined = 1,
    StorageModeShared = 0,
    StorageModeManaged = 16,
    StorageModePrivate = 32,
    StorageModeMemoryless = 48,
    HazardTrackingModeDefault = 0,
    HazardTrackingModeUntracked = 256,
    HazardTrackingModeTracked = 512,
    CPUCacheModeDefault = 0,
    CPUCacheModeWriteCombined = 1,
};

/// https://developer.apple.com/documentation/Metal/MTLResource?language=objc
pub const Resource = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        Allocation,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn allocatedSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "allocatedSize", objc.NSUInteger, .{});
    }

    pub fn setPurgeableState(_self: *@This(), _state: PurgeableState) PurgeableState {
        return objc.msgSend(_self, "setPurgeableState:", PurgeableState, .{_state});
    }

    pub fn makeAliasable(_self: *@This()) void {
        return objc.msgSend(_self, "makeAliasable", void, .{});
    }

    pub fn isAliasable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAliasable", objc.BOOL, .{});
    }

    pub fn setOwnerWithIdentity(_self: *@This(), _task_id_token: objc.task_id_token_t) objc.kern_return_t {
        return objc.msgSend(_self, "setOwnerWithIdentity:", objc.kern_return_t, .{_task_id_token});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn cpuCacheMode(_self: *@This()) CPUCacheMode {
        return objc.msgSend(_self, "cpuCacheMode", CPUCacheMode, .{});
    }

    pub fn storageMode(_self: *@This()) StorageMode {
        return objc.msgSend(_self, "storageMode", StorageMode, .{});
    }

    pub fn hazardTrackingMode(_self: *@This()) HazardTrackingMode {
        return objc.msgSend(_self, "hazardTrackingMode", HazardTrackingMode, .{});
    }

    pub fn resourceOptions(_self: *@This()) ResourceOptions {
        return objc.msgSend(_self, "resourceOptions", ResourceOptions, .{});
    }

    pub fn heap(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "heap", ?*anyopaque, .{});
    }

    pub fn heapOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "heapOffset", objc.NSUInteger, .{});
    }
};

pub const PixelFormat = enum(objc.NSUInteger) {
    Invalid = 0,
    A8Unorm = 1,
    R8Unorm = 10,
    R8Unorm_sRGB = 11,
    R8Snorm = 12,
    R8Uint = 13,
    R8Sint = 14,
    R16Unorm = 20,
    R16Snorm = 22,
    R16Uint = 23,
    R16Sint = 24,
    R16Float = 25,
    RG8Unorm = 30,
    RG8Unorm_sRGB = 31,
    RG8Snorm = 32,
    RG8Uint = 33,
    RG8Sint = 34,
    B5G6R5Unorm = 40,
    A1BGR5Unorm = 41,
    ABGR4Unorm = 42,
    BGR5A1Unorm = 43,
    R32Uint = 53,
    R32Sint = 54,
    R32Float = 55,
    RG16Unorm = 60,
    RG16Snorm = 62,
    RG16Uint = 63,
    RG16Sint = 64,
    RG16Float = 65,
    RGBA8Unorm = 70,
    RGBA8Unorm_sRGB = 71,
    RGBA8Snorm = 72,
    RGBA8Uint = 73,
    RGBA8Sint = 74,
    BGRA8Unorm = 80,
    BGRA8Unorm_sRGB = 81,
    RGB10A2Unorm = 90,
    RGB10A2Uint = 91,
    RG11B10Float = 92,
    RGB9E5Float = 93,
    BGR10A2Unorm = 94,
    BGR10_XR = 554,
    BGR10_XR_sRGB = 555,
    RG32Uint = 103,
    RG32Sint = 104,
    RG32Float = 105,
    RGBA16Unorm = 110,
    RGBA16Snorm = 112,
    RGBA16Uint = 113,
    RGBA16Sint = 114,
    RGBA16Float = 115,
    BGRA10_XR = 552,
    BGRA10_XR_sRGB = 553,
    RGBA32Uint = 123,
    RGBA32Sint = 124,
    RGBA32Float = 125,
    BC1_RGBA = 130,
    BC1_RGBA_sRGB = 131,
    BC2_RGBA = 132,
    BC2_RGBA_sRGB = 133,
    BC3_RGBA = 134,
    BC3_RGBA_sRGB = 135,
    BC4_RUnorm = 140,
    BC4_RSnorm = 141,
    BC5_RGUnorm = 142,
    BC5_RGSnorm = 143,
    BC6H_RGBFloat = 150,
    BC6H_RGBUfloat = 151,
    BC7_RGBAUnorm = 152,
    BC7_RGBAUnorm_sRGB = 153,
    PVRTC_RGB_2BPP = 160,
    PVRTC_RGB_2BPP_sRGB = 161,
    PVRTC_RGB_4BPP = 162,
    PVRTC_RGB_4BPP_sRGB = 163,
    PVRTC_RGBA_2BPP = 164,
    PVRTC_RGBA_2BPP_sRGB = 165,
    PVRTC_RGBA_4BPP = 166,
    PVRTC_RGBA_4BPP_sRGB = 167,
    EAC_R11Unorm = 170,
    EAC_R11Snorm = 172,
    EAC_RG11Unorm = 174,
    EAC_RG11Snorm = 176,
    EAC_RGBA8 = 178,
    EAC_RGBA8_sRGB = 179,
    ETC2_RGB8 = 180,
    ETC2_RGB8_sRGB = 181,
    ETC2_RGB8A1 = 182,
    ETC2_RGB8A1_sRGB = 183,
    ASTC_4x4_sRGB = 186,
    ASTC_5x4_sRGB = 187,
    ASTC_5x5_sRGB = 188,
    ASTC_6x5_sRGB = 189,
    ASTC_6x6_sRGB = 190,
    ASTC_8x5_sRGB = 192,
    ASTC_8x6_sRGB = 193,
    ASTC_8x8_sRGB = 194,
    ASTC_10x5_sRGB = 195,
    ASTC_10x6_sRGB = 196,
    ASTC_10x8_sRGB = 197,
    ASTC_10x10_sRGB = 198,
    ASTC_12x10_sRGB = 199,
    ASTC_12x12_sRGB = 200,
    ASTC_4x4_LDR = 204,
    ASTC_5x4_LDR = 205,
    ASTC_5x5_LDR = 206,
    ASTC_6x5_LDR = 207,
    ASTC_6x6_LDR = 208,
    ASTC_8x5_LDR = 210,
    ASTC_8x6_LDR = 211,
    ASTC_8x8_LDR = 212,
    ASTC_10x5_LDR = 213,
    ASTC_10x6_LDR = 214,
    ASTC_10x8_LDR = 215,
    ASTC_10x10_LDR = 216,
    ASTC_12x10_LDR = 217,
    ASTC_12x12_LDR = 218,
    ASTC_4x4_HDR = 222,
    ASTC_5x4_HDR = 223,
    ASTC_5x5_HDR = 224,
    ASTC_6x5_HDR = 225,
    ASTC_6x6_HDR = 226,
    ASTC_8x5_HDR = 228,
    ASTC_8x6_HDR = 229,
    ASTC_8x8_HDR = 230,
    ASTC_10x5_HDR = 231,
    ASTC_10x6_HDR = 232,
    ASTC_10x8_HDR = 233,
    ASTC_10x10_HDR = 234,
    ASTC_12x10_HDR = 235,
    ASTC_12x12_HDR = 236,
    GBGR422 = 240,
    BGRG422 = 241,
    Depth16Unorm = 250,
    Depth32Float = 252,
    Stencil8 = 253,
    Depth24Unorm_Stencil8 = 255,
    Depth32Float_Stencil8 = 260,
    X32_Stencil8 = 261,
    X24_Stencil8 = 262,
};

/// https://developer.apple.com/documentation/Metal/MTLBuffer?language=objc
pub const Buffer = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        Resource,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn allocatedSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "allocatedSize", objc.NSUInteger, .{});
    }

    pub fn setPurgeableState(_self: *@This(), _state: PurgeableState) PurgeableState {
        return objc.msgSend(_self, "setPurgeableState:", PurgeableState, .{_state});
    }

    pub fn makeAliasable(_self: *@This()) void {
        return objc.msgSend(_self, "makeAliasable", void, .{});
    }

    pub fn isAliasable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAliasable", objc.BOOL, .{});
    }

    pub fn setOwnerWithIdentity(_self: *@This(), _task_id_token: objc.task_id_token_t) objc.kern_return_t {
        return objc.msgSend(_self, "setOwnerWithIdentity:", objc.kern_return_t, .{_task_id_token});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn cpuCacheMode(_self: *@This()) CPUCacheMode {
        return objc.msgSend(_self, "cpuCacheMode", CPUCacheMode, .{});
    }

    pub fn storageMode(_self: *@This()) StorageMode {
        return objc.msgSend(_self, "storageMode", StorageMode, .{});
    }

    pub fn hazardTrackingMode(_self: *@This()) HazardTrackingMode {
        return objc.msgSend(_self, "hazardTrackingMode", HazardTrackingMode, .{});
    }

    pub fn resourceOptions(_self: *@This()) ResourceOptions {
        return objc.msgSend(_self, "resourceOptions", ResourceOptions, .{});
    }

    pub fn heap(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "heap", ?*anyopaque, .{});
    }

    pub fn heapOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "heapOffset", objc.NSUInteger, .{});
    }

    pub fn contents(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "contents", ?*anyopaque, .{});
    }

    pub fn didModifyRange(_self: *@This(), _range: foundation.Range) void {
        return objc.msgSend(_self, "didModifyRange:", void, .{_range});
    }

    pub fn newTextureWithDescriptorOffsetBytesPerRow(_self: *@This(), _descriptor: ?*TextureDescriptor, _offset: objc.NSUInteger, _bytesPerRow: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(_self, "newTextureWithDescriptor:offset:bytesPerRow:", ?*anyopaque, .{ _descriptor, _offset, _bytesPerRow });
    }

    pub fn addDebugMarkerRange(_self: *@This(), _marker: ?*foundation.String, _range: foundation.Range) void {
        return objc.msgSend(_self, "addDebugMarker:range:", void, .{ _marker, _range });
    }

    pub fn removeAllDebugMarkers(_self: *@This()) void {
        return objc.msgSend(_self, "removeAllDebugMarkers", void, .{});
    }

    pub fn newRemoteBufferViewForDevice(_self: *@This(), _device: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "newRemoteBufferViewForDevice:", ?*anyopaque, .{_device});
    }

    pub fn length(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "length", objc.NSUInteger, .{});
    }

    pub fn remoteStorageBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "remoteStorageBuffer", ?*anyopaque, .{});
    }

    pub fn gpuAddress(_self: *@This()) objc.uint64_t {
        return objc.msgSend(_self, "gpuAddress", objc.uint64_t, .{});
    }
};

pub const TextureType = enum(objc.NSUInteger) {
    1D = 0,
    1DArray = 1,
    2D = 2,
    2DArray = 3,
    2DMultisample = 4,
    Cube = 5,
    CubeArray = 6,
    3D = 7,
    2DMultisampleArray = 8,
    TextureBuffer = 9,
};

pub const TextureSwizzle = enum(objc.uint8_t) {
    Zero = 0,
    One = 1,
    Red = 2,
    Green = 3,
    Blue = 4,
    Alpha = 5,
};

pub const TextureSwizzleChannels = extern struct {
    red: TextureSwizzle,
    green: TextureSwizzle,
    blue: TextureSwizzle,
    alpha: TextureSwizzle,
};

extern "Metal" fn MTLTextureSwizzleChannelsMake(
    r: TextureSwizzle,
    g: TextureSwizzle,
    b: TextureSwizzle,
    a: TextureSwizzle,
) callconv(.C) TextureSwizzleChannels;
pub const textureSwizzleChannelsMake = MTLTextureSwizzleChannelsMake;

/// https://developer.apple.com/documentation/Metal/MTLSharedTextureHandle?language=objc
pub const SharedTextureHandle = opaque {
    pub const InternalInfo = objc.ExternClass("MTLSharedTextureHandle", @This(), objc.NSObject, &.{
        foundation.SecureCoding,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }
};

pub const SharedTextureHandlePrivate = extern struct {};

pub const TextureUsage = enum(objc.NSUInteger) {
    Unknown = 0,
    ShaderRead = 1,
    ShaderWrite = 2,
    RenderTarget = 4,
    PixelFormatView = 16,
    ShaderAtomic = 32,
};

pub const TextureCompressionType = enum(objc.NSInteger) {
    Lossless = 0,
    Lossy = 1,
};

/// https://developer.apple.com/documentation/Metal/MTLTextureDescriptor?language=objc
pub const TextureDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLTextureDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn texture2DDescriptorWithPixelFormatWidthHeightMipmapped(
        _self: *@This(),
        _pixelFormat: PixelFormat,
        _width: objc.NSUInteger,
        _height: objc.NSUInteger,
        _mipmapped: objc.BOOL,
    ) ?*TextureDescriptor {
        return objc.msgSend(_self, "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", ?*TextureDescriptor, .{
            _pixelFormat,
            _width,
            _height,
            _mipmapped,
        });
    }

    pub fn textureCubeDescriptorWithPixelFormatSizeMipmapped(_self: *@This(), _pixelFormat: PixelFormat, _size: objc.NSUInteger, _mipmapped: objc.BOOL) ?*TextureDescriptor {
        return objc.msgSend(_self, "textureCubeDescriptorWithPixelFormat:size:mipmapped:", ?*TextureDescriptor, .{ _pixelFormat, _size, _mipmapped });
    }

    pub fn textureBufferDescriptorWithPixelFormatWidthResourceOptionsUsage(
        _self: *@This(),
        _pixelFormat: PixelFormat,
        _width: objc.NSUInteger,
        _resourceOptions: ResourceOptions,
        _usage: TextureUsage,
    ) ?*TextureDescriptor {
        return objc.msgSend(_self, "textureBufferDescriptorWithPixelFormat:width:resourceOptions:usage:", ?*TextureDescriptor, .{
            _pixelFormat,
            _width,
            _resourceOptions,
            _usage,
        });
    }

    pub fn textureType(_self: *@This()) TextureType {
        return objc.msgSend(_self, "textureType", TextureType, .{});
    }

    pub fn setTextureType(_self: *@This(), _textureType: TextureType) void {
        return objc.msgSend(_self, "setTextureType:", void, .{_textureType});
    }

    pub fn pixelFormat(_self: *@This()) PixelFormat {
        return objc.msgSend(_self, "pixelFormat", PixelFormat, .{});
    }

    pub fn setPixelFormat(_self: *@This(), _pixelFormat: PixelFormat) void {
        return objc.msgSend(_self, "setPixelFormat:", void, .{_pixelFormat});
    }

    pub fn width(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "width", objc.NSUInteger, .{});
    }

    pub fn setWidth(_self: *@This(), _width: objc.NSUInteger) void {
        return objc.msgSend(_self, "setWidth:", void, .{_width});
    }

    pub fn height(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "height", objc.NSUInteger, .{});
    }

    pub fn setHeight(_self: *@This(), _height: objc.NSUInteger) void {
        return objc.msgSend(_self, "setHeight:", void, .{_height});
    }

    pub fn depth(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "depth", objc.NSUInteger, .{});
    }

    pub fn setDepth(_self: *@This(), _depth: objc.NSUInteger) void {
        return objc.msgSend(_self, "setDepth:", void, .{_depth});
    }

    pub fn mipmapLevelCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "mipmapLevelCount", objc.NSUInteger, .{});
    }

    pub fn setMipmapLevelCount(_self: *@This(), _mipmapLevelCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMipmapLevelCount:", void, .{_mipmapLevelCount});
    }

    pub fn sampleCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "sampleCount", objc.NSUInteger, .{});
    }

    pub fn setSampleCount(_self: *@This(), _sampleCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setSampleCount:", void, .{_sampleCount});
    }

    pub fn arrayLength(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "arrayLength", objc.NSUInteger, .{});
    }

    pub fn setArrayLength(_self: *@This(), _arrayLength: objc.NSUInteger) void {
        return objc.msgSend(_self, "setArrayLength:", void, .{_arrayLength});
    }

    pub fn resourceOptions(_self: *@This()) ResourceOptions {
        return objc.msgSend(_self, "resourceOptions", ResourceOptions, .{});
    }

    pub fn setResourceOptions(_self: *@This(), _resourceOptions: ResourceOptions) void {
        return objc.msgSend(_self, "setResourceOptions:", void, .{_resourceOptions});
    }

    pub fn cpuCacheMode(_self: *@This()) CPUCacheMode {
        return objc.msgSend(_self, "cpuCacheMode", CPUCacheMode, .{});
    }

    pub fn setCpuCacheMode(_self: *@This(), _cpuCacheMode: CPUCacheMode) void {
        return objc.msgSend(_self, "setCpuCacheMode:", void, .{_cpuCacheMode});
    }

    pub fn storageMode(_self: *@This()) StorageMode {
        return objc.msgSend(_self, "storageMode", StorageMode, .{});
    }

    pub fn setStorageMode(_self: *@This(), _storageMode: StorageMode) void {
        return objc.msgSend(_self, "setStorageMode:", void, .{_storageMode});
    }

    pub fn hazardTrackingMode(_self: *@This()) HazardTrackingMode {
        return objc.msgSend(_self, "hazardTrackingMode", HazardTrackingMode, .{});
    }

    pub fn setHazardTrackingMode(_self: *@This(), _hazardTrackingMode: HazardTrackingMode) void {
        return objc.msgSend(_self, "setHazardTrackingMode:", void, .{_hazardTrackingMode});
    }

    pub fn usage(_self: *@This()) TextureUsage {
        return objc.msgSend(_self, "usage", TextureUsage, .{});
    }

    pub fn setUsage(_self: *@This(), _usage: TextureUsage) void {
        return objc.msgSend(_self, "setUsage:", void, .{_usage});
    }

    pub fn allowGPUOptimizedContents(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowGPUOptimizedContents", objc.BOOL, .{});
    }

    pub fn setAllowGPUOptimizedContents(_self: *@This(), _allowGPUOptimizedContents: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowGPUOptimizedContents:", void, .{_allowGPUOptimizedContents});
    }

    pub fn compressionType(_self: *@This()) TextureCompressionType {
        return objc.msgSend(_self, "compressionType", TextureCompressionType, .{});
    }

    pub fn setCompressionType(_self: *@This(), _compressionType: TextureCompressionType) void {
        return objc.msgSend(_self, "setCompressionType:", void, .{_compressionType});
    }

    pub fn swizzle(_self: *@This()) TextureSwizzleChannels {
        return objc.msgSend(_self, "swizzle", TextureSwizzleChannels, .{});
    }

    pub fn setSwizzle(_self: *@This(), _swizzle: TextureSwizzleChannels) void {
        return objc.msgSend(_self, "setSwizzle:", void, .{_swizzle});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLTexture?language=objc
pub const Texture = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        Resource,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn allocatedSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "allocatedSize", objc.NSUInteger, .{});
    }

    pub fn setPurgeableState(_self: *@This(), _state: PurgeableState) PurgeableState {
        return objc.msgSend(_self, "setPurgeableState:", PurgeableState, .{_state});
    }

    pub fn makeAliasable(_self: *@This()) void {
        return objc.msgSend(_self, "makeAliasable", void, .{});
    }

    pub fn isAliasable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAliasable", objc.BOOL, .{});
    }

    pub fn setOwnerWithIdentity(_self: *@This(), _task_id_token: objc.task_id_token_t) objc.kern_return_t {
        return objc.msgSend(_self, "setOwnerWithIdentity:", objc.kern_return_t, .{_task_id_token});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn cpuCacheMode(_self: *@This()) CPUCacheMode {
        return objc.msgSend(_self, "cpuCacheMode", CPUCacheMode, .{});
    }

    pub fn storageMode(_self: *@This()) StorageMode {
        return objc.msgSend(_self, "storageMode", StorageMode, .{});
    }

    pub fn hazardTrackingMode(_self: *@This()) HazardTrackingMode {
        return objc.msgSend(_self, "hazardTrackingMode", HazardTrackingMode, .{});
    }

    pub fn resourceOptions(_self: *@This()) ResourceOptions {
        return objc.msgSend(_self, "resourceOptions", ResourceOptions, .{});
    }

    pub fn heap(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "heap", ?*anyopaque, .{});
    }

    pub fn heapOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "heapOffset", objc.NSUInteger, .{});
    }

    pub fn getBytesBytesPerRowBytesPerImageFromRegionMipmapLevelSlice(
        _self: *@This(),
        _pixelBytes: ?*anyopaque,
        _bytesPerRow: objc.NSUInteger,
        _bytesPerImage: objc.NSUInteger,
        _region: Region,
        _level: objc.NSUInteger,
        _slice: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "getBytes:bytesPerRow:bytesPerImage:fromRegion:mipmapLevel:slice:", void, .{
            _pixelBytes,
            _bytesPerRow,
            _bytesPerImage,
            _region,
            _level,
            _slice,
        });
    }

    pub fn replaceRegionMipmapLevelSliceWithBytesBytesPerRowBytesPerImage(
        _self: *@This(),
        _region: Region,
        _level: objc.NSUInteger,
        _slice: objc.NSUInteger,
        _pixelBytes: ?*anyopaque,
        _bytesPerRow: objc.NSUInteger,
        _bytesPerImage: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:", void, .{
            _region,
            _level,
            _slice,
            _pixelBytes,
            _bytesPerRow,
            _bytesPerImage,
        });
    }

    pub fn getBytesBytesPerRowFromRegionMipmapLevel(
        _self: *@This(),
        _pixelBytes: ?*anyopaque,
        _bytesPerRow: objc.NSUInteger,
        _region: Region,
        _level: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", void, .{
            _pixelBytes,
            _bytesPerRow,
            _region,
            _level,
        });
    }

    pub fn replaceRegionMipmapLevelWithBytesBytesPerRow(
        _self: *@This(),
        _region: Region,
        _level: objc.NSUInteger,
        _pixelBytes: ?*anyopaque,
        _bytesPerRow: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "replaceRegion:mipmapLevel:withBytes:bytesPerRow:", void, .{
            _region,
            _level,
            _pixelBytes,
            _bytesPerRow,
        });
    }

    pub fn newTextureViewWithPixelFormat(_self: *@This(), _pixelFormat: PixelFormat) ?*anyopaque {
        return objc.msgSend(_self, "newTextureViewWithPixelFormat:", ?*anyopaque, .{_pixelFormat});
    }

    pub fn newTextureViewWithPixelFormatTextureTypeLevelsSlices(
        _self: *@This(),
        _pixelFormat: PixelFormat,
        _textureType: TextureType,
        _levelRange: foundation.Range,
        _sliceRange: foundation.Range,
    ) ?*anyopaque {
        return objc.msgSend(_self, "newTextureViewWithPixelFormat:textureType:levels:slices:", ?*anyopaque, .{
            _pixelFormat,
            _textureType,
            _levelRange,
            _sliceRange,
        });
    }

    pub fn newSharedTextureHandle(_self: *@This()) ?*SharedTextureHandle {
        return objc.msgSend(_self, "newSharedTextureHandle", ?*SharedTextureHandle, .{});
    }

    pub fn newRemoteTextureViewForDevice(_self: *@This(), _device: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "newRemoteTextureViewForDevice:", ?*anyopaque, .{_device});
    }

    pub fn newTextureViewWithPixelFormatTextureTypeLevelsSlicesSwizzle(
        _self: *@This(),
        _pixelFormat: PixelFormat,
        _textureType: TextureType,
        _levelRange: foundation.Range,
        _sliceRange: foundation.Range,
        _swizzle: TextureSwizzleChannels,
    ) ?*anyopaque {
        return objc.msgSend(_self, "newTextureViewWithPixelFormat:textureType:levels:slices:swizzle:", ?*anyopaque, .{
            _pixelFormat,
            _textureType,
            _levelRange,
            _sliceRange,
            _swizzle,
        });
    }

    pub fn rootResource(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "rootResource", ?*anyopaque, .{});
    }

    pub fn parentTexture(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "parentTexture", ?*anyopaque, .{});
    }

    pub fn parentRelativeLevel(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "parentRelativeLevel", objc.NSUInteger, .{});
    }

    pub fn parentRelativeSlice(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "parentRelativeSlice", objc.NSUInteger, .{});
    }

    pub fn buffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "buffer", ?*anyopaque, .{});
    }

    pub fn bufferOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "bufferOffset", objc.NSUInteger, .{});
    }

    pub fn bufferBytesPerRow(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "bufferBytesPerRow", objc.NSUInteger, .{});
    }

    pub fn iosurface(_self: *@This()) io_surface.Ref {
        return objc.msgSend(_self, "iosurface", io_surface.Ref, .{});
    }

    pub fn iosurfacePlane(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "iosurfacePlane", objc.NSUInteger, .{});
    }

    pub fn textureType(_self: *@This()) TextureType {
        return objc.msgSend(_self, "textureType", TextureType, .{});
    }

    pub fn pixelFormat(_self: *@This()) PixelFormat {
        return objc.msgSend(_self, "pixelFormat", PixelFormat, .{});
    }

    pub fn width(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "width", objc.NSUInteger, .{});
    }

    pub fn height(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "height", objc.NSUInteger, .{});
    }

    pub fn depth(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "depth", objc.NSUInteger, .{});
    }

    pub fn mipmapLevelCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "mipmapLevelCount", objc.NSUInteger, .{});
    }

    pub fn sampleCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "sampleCount", objc.NSUInteger, .{});
    }

    pub fn arrayLength(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "arrayLength", objc.NSUInteger, .{});
    }

    pub fn usage(_self: *@This()) TextureUsage {
        return objc.msgSend(_self, "usage", TextureUsage, .{});
    }

    pub fn isShareable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isShareable", objc.BOOL, .{});
    }

    pub fn isFramebufferOnly(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isFramebufferOnly", objc.BOOL, .{});
    }

    pub fn firstMipmapInTail(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "firstMipmapInTail", objc.NSUInteger, .{});
    }

    pub fn tailSizeInBytes(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "tailSizeInBytes", objc.NSUInteger, .{});
    }

    pub fn isSparse(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isSparse", objc.BOOL, .{});
    }

    pub fn allowGPUOptimizedContents(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowGPUOptimizedContents", objc.BOOL, .{});
    }

    pub fn compressionType(_self: *@This()) TextureCompressionType {
        return objc.msgSend(_self, "compressionType", TextureCompressionType, .{});
    }

    pub fn gpuResourceID(_self: *@This()) ResourceID {
        return objc.msgSend(_self, "gpuResourceID", ResourceID, .{});
    }

    pub fn remoteStorageTexture(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "remoteStorageTexture", ?*anyopaque, .{});
    }

    pub fn swizzle(_self: *@This()) TextureSwizzleChannels {
        return objc.msgSend(_self, "swizzle", TextureSwizzleChannels, .{});
    }
};

pub const DataType = enum(objc.NSUInteger) {
    None = 0,
    Struct = 1,
    Array = 2,
    Float = 3,
    Float2 = 4,
    Float3 = 5,
    Float4 = 6,
    Float2x2 = 7,
    Float2x3 = 8,
    Float2x4 = 9,
    Float3x2 = 10,
    Float3x3 = 11,
    Float3x4 = 12,
    Float4x2 = 13,
    Float4x3 = 14,
    Float4x4 = 15,
    Half = 16,
    Half2 = 17,
    Half3 = 18,
    Half4 = 19,
    Half2x2 = 20,
    Half2x3 = 21,
    Half2x4 = 22,
    Half3x2 = 23,
    Half3x3 = 24,
    Half3x4 = 25,
    Half4x2 = 26,
    Half4x3 = 27,
    Half4x4 = 28,
    Int = 29,
    Int2 = 30,
    Int3 = 31,
    Int4 = 32,
    UInt = 33,
    UInt2 = 34,
    UInt3 = 35,
    UInt4 = 36,
    Short = 37,
    Short2 = 38,
    Short3 = 39,
    Short4 = 40,
    UShort = 41,
    UShort2 = 42,
    UShort3 = 43,
    UShort4 = 44,
    Char = 45,
    Char2 = 46,
    Char3 = 47,
    Char4 = 48,
    UChar = 49,
    UChar2 = 50,
    UChar3 = 51,
    UChar4 = 52,
    Bool = 53,
    Bool2 = 54,
    Bool3 = 55,
    Bool4 = 56,
    Texture = 58,
    Sampler = 59,
    Pointer = 60,
    R8Unorm = 62,
    R8Snorm = 63,
    R16Unorm = 64,
    R16Snorm = 65,
    RG8Unorm = 66,
    RG8Snorm = 67,
    RG16Unorm = 68,
    RG16Snorm = 69,
    RGBA8Unorm = 70,
    RGBA8Unorm_sRGB = 71,
    RGBA8Snorm = 72,
    RGBA16Unorm = 73,
    RGBA16Snorm = 74,
    RGB10A2Unorm = 75,
    RG11B10Float = 76,
    RGB9E5Float = 77,
    RenderPipeline = 78,
    ComputePipeline = 79,
    IndirectCommandBuffer = 80,
    Long = 81,
    Long2 = 82,
    Long3 = 83,
    Long4 = 84,
    ULong = 85,
    ULong2 = 86,
    ULong3 = 87,
    ULong4 = 88,
    VisibleFunctionTable = 115,
    IntersectionFunctionTable = 116,
    PrimitiveAccelerationStructure = 117,
    InstanceAccelerationStructure = 118,
    BFloat = 121,
    BFloat2 = 122,
    BFloat3 = 123,
    BFloat4 = 124,
};

pub const BindingType = enum(objc.NSInteger) {
    Buffer = 0,
    ThreadgroupMemory = 1,
    Texture = 2,
    Sampler = 3,
    ImageblockData = 16,
    Imageblock = 17,
    VisibleFunctionTable = 24,
    PrimitiveAccelerationStructure = 25,
    InstanceAccelerationStructure = 26,
    IntersectionFunctionTable = 27,
    ObjectPayload = 34,
};

pub const ArgumentType = enum(objc.NSUInteger) {
    Buffer = 0,
    ThreadgroupMemory = 1,
    Texture = 2,
    Sampler = 3,
    ImageblockData = 16,
    Imageblock = 17,
    VisibleFunctionTable = 24,
    PrimitiveAccelerationStructure = 25,
    InstanceAccelerationStructure = 26,
    IntersectionFunctionTable = 27,
};

pub const BindingAccess = enum(objc.NSUInteger) {
    ReadOnly = 0,
    ReadWrite = 1,
    WriteOnly = 2,
    ArgumentAccessReadOnly = 0,
    ArgumentAccessReadWrite = 1,
    ArgumentAccessWriteOnly = 2,
};

pub const ArgumentAccess = BindingAccess;

/// https://developer.apple.com/documentation/Metal/MTLType?language=objc
pub const Type = opaque {
    pub const InternalInfo = objc.ExternClass("MTLType", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn dataType(_self: *@This()) DataType {
        return objc.msgSend(_self, "dataType", DataType, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLStructMember?language=objc
pub const StructMember = opaque {
    pub const InternalInfo = objc.ExternClass("MTLStructMember", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn structType(_self: *@This()) ?*StructType {
        return objc.msgSend(_self, "structType", ?*StructType, .{});
    }

    pub fn arrayType(_self: *@This()) ?*ArrayType {
        return objc.msgSend(_self, "arrayType", ?*ArrayType, .{});
    }

    pub fn textureReferenceType(_self: *@This()) ?*TextureReferenceType {
        return objc.msgSend(_self, "textureReferenceType", ?*TextureReferenceType, .{});
    }

    pub fn pointerType(_self: *@This()) ?*PointerType {
        return objc.msgSend(_self, "pointerType", ?*PointerType, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn offset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "offset", objc.NSUInteger, .{});
    }

    pub fn dataType(_self: *@This()) DataType {
        return objc.msgSend(_self, "dataType", DataType, .{});
    }

    pub fn argumentIndex(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "argumentIndex", objc.NSUInteger, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLStructType?language=objc
pub const StructType = opaque {
    pub const InternalInfo = objc.ExternClass("MTLStructType", @This(), Type, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn dataType(_self: *@This()) DataType {
        return objc.msgSend(_self, "dataType", DataType, .{});
    }

    pub fn memberByName(_self: *@This(), _name: ?*foundation.String) ?*StructMember {
        return objc.msgSend(_self, "memberByName:", ?*StructMember, .{_name});
    }

    pub fn members(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "members", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLArrayType?language=objc
pub const ArrayType = opaque {
    pub const InternalInfo = objc.ExternClass("MTLArrayType", @This(), Type, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn dataType(_self: *@This()) DataType {
        return objc.msgSend(_self, "dataType", DataType, .{});
    }

    pub fn elementStructType(_self: *@This()) ?*StructType {
        return objc.msgSend(_self, "elementStructType", ?*StructType, .{});
    }

    pub fn elementArrayType(_self: *@This()) ?*ArrayType {
        return objc.msgSend(_self, "elementArrayType", ?*ArrayType, .{});
    }

    pub fn elementTextureReferenceType(_self: *@This()) ?*TextureReferenceType {
        return objc.msgSend(_self, "elementTextureReferenceType", ?*TextureReferenceType, .{});
    }

    pub fn elementPointerType(_self: *@This()) ?*PointerType {
        return objc.msgSend(_self, "elementPointerType", ?*PointerType, .{});
    }

    pub fn elementType(_self: *@This()) DataType {
        return objc.msgSend(_self, "elementType", DataType, .{});
    }

    pub fn arrayLength(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "arrayLength", objc.NSUInteger, .{});
    }

    pub fn stride(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "stride", objc.NSUInteger, .{});
    }

    pub fn argumentIndexStride(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "argumentIndexStride", objc.NSUInteger, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLPointerType?language=objc
pub const PointerType = opaque {
    pub const InternalInfo = objc.ExternClass("MTLPointerType", @This(), Type, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn dataType(_self: *@This()) DataType {
        return objc.msgSend(_self, "dataType", DataType, .{});
    }

    pub fn elementStructType(_self: *@This()) ?*StructType {
        return objc.msgSend(_self, "elementStructType", ?*StructType, .{});
    }

    pub fn elementArrayType(_self: *@This()) ?*ArrayType {
        return objc.msgSend(_self, "elementArrayType", ?*ArrayType, .{});
    }

    pub fn elementType(_self: *@This()) DataType {
        return objc.msgSend(_self, "elementType", DataType, .{});
    }

    pub fn access(_self: *@This()) BindingAccess {
        return objc.msgSend(_self, "access", BindingAccess, .{});
    }

    pub fn alignment(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "alignment", objc.NSUInteger, .{});
    }

    pub fn dataSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "dataSize", objc.NSUInteger, .{});
    }

    pub fn elementIsArgumentBuffer(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "elementIsArgumentBuffer", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLTextureReferenceType?language=objc
pub const TextureReferenceType = opaque {
    pub const InternalInfo = objc.ExternClass("MTLTextureReferenceType", @This(), Type, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn dataType(_self: *@This()) DataType {
        return objc.msgSend(_self, "dataType", DataType, .{});
    }

    pub fn textureDataType(_self: *@This()) DataType {
        return objc.msgSend(_self, "textureDataType", DataType, .{});
    }

    pub fn textureType(_self: *@This()) TextureType {
        return objc.msgSend(_self, "textureType", TextureType, .{});
    }

    pub fn access(_self: *@This()) BindingAccess {
        return objc.msgSend(_self, "access", BindingAccess, .{});
    }

    pub fn isDepthTexture(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isDepthTexture", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLArgument?language=objc
pub const Argument = opaque {
    pub const InternalInfo = objc.ExternClass("MTLArgument", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn @"type"(_self: *@This()) ArgumentType {
        return objc.msgSend(_self, "type", ArgumentType, .{});
    }

    pub fn access(_self: *@This()) BindingAccess {
        return objc.msgSend(_self, "access", BindingAccess, .{});
    }

    pub fn index(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "index", objc.NSUInteger, .{});
    }

    pub fn isActive(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isActive", objc.BOOL, .{});
    }

    pub fn bufferAlignment(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "bufferAlignment", objc.NSUInteger, .{});
    }

    pub fn bufferDataSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "bufferDataSize", objc.NSUInteger, .{});
    }

    pub fn bufferDataType(_self: *@This()) DataType {
        return objc.msgSend(_self, "bufferDataType", DataType, .{});
    }

    pub fn bufferStructType(_self: *@This()) ?*StructType {
        return objc.msgSend(_self, "bufferStructType", ?*StructType, .{});
    }

    pub fn bufferPointerType(_self: *@This()) ?*PointerType {
        return objc.msgSend(_self, "bufferPointerType", ?*PointerType, .{});
    }

    pub fn threadgroupMemoryAlignment(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "threadgroupMemoryAlignment", objc.NSUInteger, .{});
    }

    pub fn threadgroupMemoryDataSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "threadgroupMemoryDataSize", objc.NSUInteger, .{});
    }

    pub fn textureType(_self: *@This()) TextureType {
        return objc.msgSend(_self, "textureType", TextureType, .{});
    }

    pub fn textureDataType(_self: *@This()) DataType {
        return objc.msgSend(_self, "textureDataType", DataType, .{});
    }

    pub fn isDepthTexture(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isDepthTexture", objc.BOOL, .{});
    }

    pub fn arrayLength(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "arrayLength", objc.NSUInteger, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLBinding?language=objc
pub const Binding = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn @"type"(_self: *@This()) BindingType {
        return objc.msgSend(_self, "type", BindingType, .{});
    }

    pub fn access(_self: *@This()) BindingAccess {
        return objc.msgSend(_self, "access", BindingAccess, .{});
    }

    pub fn index(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "index", objc.NSUInteger, .{});
    }

    pub fn isUsed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isUsed", objc.BOOL, .{});
    }

    pub fn isArgument(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isArgument", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLBufferBinding?language=objc
pub const BufferBinding = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        Binding,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn @"type"(_self: *@This()) BindingType {
        return objc.msgSend(_self, "type", BindingType, .{});
    }

    pub fn access(_self: *@This()) BindingAccess {
        return objc.msgSend(_self, "access", BindingAccess, .{});
    }

    pub fn index(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "index", objc.NSUInteger, .{});
    }

    pub fn isUsed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isUsed", objc.BOOL, .{});
    }

    pub fn isArgument(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isArgument", objc.BOOL, .{});
    }

    pub fn bufferAlignment(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "bufferAlignment", objc.NSUInteger, .{});
    }

    pub fn bufferDataSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "bufferDataSize", objc.NSUInteger, .{});
    }

    pub fn bufferDataType(_self: *@This()) DataType {
        return objc.msgSend(_self, "bufferDataType", DataType, .{});
    }

    pub fn bufferStructType(_self: *@This()) ?*StructType {
        return objc.msgSend(_self, "bufferStructType", ?*StructType, .{});
    }

    pub fn bufferPointerType(_self: *@This()) ?*PointerType {
        return objc.msgSend(_self, "bufferPointerType", ?*PointerType, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLThreadgroupBinding?language=objc
pub const ThreadgroupBinding = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        Binding,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn @"type"(_self: *@This()) BindingType {
        return objc.msgSend(_self, "type", BindingType, .{});
    }

    pub fn access(_self: *@This()) BindingAccess {
        return objc.msgSend(_self, "access", BindingAccess, .{});
    }

    pub fn index(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "index", objc.NSUInteger, .{});
    }

    pub fn isUsed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isUsed", objc.BOOL, .{});
    }

    pub fn isArgument(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isArgument", objc.BOOL, .{});
    }

    pub fn threadgroupMemoryAlignment(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "threadgroupMemoryAlignment", objc.NSUInteger, .{});
    }

    pub fn threadgroupMemoryDataSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "threadgroupMemoryDataSize", objc.NSUInteger, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLTextureBinding?language=objc
pub const TextureBinding = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        Binding,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn @"type"(_self: *@This()) BindingType {
        return objc.msgSend(_self, "type", BindingType, .{});
    }

    pub fn access(_self: *@This()) BindingAccess {
        return objc.msgSend(_self, "access", BindingAccess, .{});
    }

    pub fn index(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "index", objc.NSUInteger, .{});
    }

    pub fn isUsed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isUsed", objc.BOOL, .{});
    }

    pub fn isArgument(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isArgument", objc.BOOL, .{});
    }

    pub fn textureType(_self: *@This()) TextureType {
        return objc.msgSend(_self, "textureType", TextureType, .{});
    }

    pub fn textureDataType(_self: *@This()) DataType {
        return objc.msgSend(_self, "textureDataType", DataType, .{});
    }

    pub fn isDepthTexture(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isDepthTexture", objc.BOOL, .{});
    }

    pub fn arrayLength(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "arrayLength", objc.NSUInteger, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLObjectPayloadBinding?language=objc
pub const ObjectPayloadBinding = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        Binding,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn @"type"(_self: *@This()) BindingType {
        return objc.msgSend(_self, "type", BindingType, .{});
    }

    pub fn access(_self: *@This()) BindingAccess {
        return objc.msgSend(_self, "access", BindingAccess, .{});
    }

    pub fn index(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "index", objc.NSUInteger, .{});
    }

    pub fn isUsed(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isUsed", objc.BOOL, .{});
    }

    pub fn isArgument(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isArgument", objc.BOOL, .{});
    }

    pub fn objectPayloadAlignment(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "objectPayloadAlignment", objc.NSUInteger, .{});
    }

    pub fn objectPayloadDataSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "objectPayloadDataSize", objc.NSUInteger, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLFunctionConstantValues?language=objc
pub const FunctionConstantValues = opaque {
    pub const InternalInfo = objc.ExternClass("MTLFunctionConstantValues", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn setConstantValueTypeAtIndex(_self: *@This(), _value: ?*anyopaque, _type: DataType, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setConstantValue:type:atIndex:", void, .{ _value, _type, _index });
    }

    pub fn setConstantValuesTypeWithRange(_self: *@This(), _values: ?*anyopaque, _type: DataType, _range: foundation.Range) void {
        return objc.msgSend(_self, "setConstantValues:type:withRange:", void, .{ _values, _type, _range });
    }

    pub fn setConstantValueTypeWithName(_self: *@This(), _value: ?*anyopaque, _type: DataType, _name: ?*foundation.String) void {
        return objc.msgSend(_self, "setConstantValue:type:withName:", void, .{ _value, _type, _name });
    }

    pub fn reset(_self: *@This()) void {
        return objc.msgSend(_self, "reset", void, .{});
    }
};

pub const FunctionOptions = enum(objc.NSUInteger) {
    None = 0,
    CompileToBinary = 1,
    StoreFunctionInMetalPipelinesScript = 2,
    StoreFunctionInMetalScript = 2,
    FailOnBinaryArchiveMiss = 4,
};

/// https://developer.apple.com/documentation/Metal/MTLFunctionDescriptor?language=objc
pub const FunctionDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLFunctionDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn functionDescriptor(_self: *@This()) ?*FunctionDescriptor {
        return objc.msgSend(_self, "functionDescriptor", ?*FunctionDescriptor, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*foundation.String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn specializedName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "specializedName", ?*foundation.String, .{});
    }

    pub fn setSpecializedName(_self: *@This(), _specializedName: ?*foundation.String) void {
        return objc.msgSend(_self, "setSpecializedName:", void, .{_specializedName});
    }

    pub fn constantValues(_self: *@This()) ?*FunctionConstantValues {
        return objc.msgSend(_self, "constantValues", ?*FunctionConstantValues, .{});
    }

    pub fn setConstantValues(_self: *@This(), _constantValues: ?*FunctionConstantValues) void {
        return objc.msgSend(_self, "setConstantValues:", void, .{_constantValues});
    }

    pub fn options(_self: *@This()) FunctionOptions {
        return objc.msgSend(_self, "options", FunctionOptions, .{});
    }

    pub fn setOptions(_self: *@This(), _options: FunctionOptions) void {
        return objc.msgSend(_self, "setOptions:", void, .{_options});
    }

    pub fn binaryArchives(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "binaryArchives", ?*anyopaque, .{});
    }

    pub fn setBinaryArchives(_self: *@This(), _binaryArchives: ?*anyopaque) void {
        return objc.msgSend(_self, "setBinaryArchives:", void, .{_binaryArchives});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLIntersectionFunctionDescriptor?language=objc
pub const IntersectionFunctionDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLIntersectionFunctionDescriptor", @This(), FunctionDescriptor, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn functionDescriptor(_self: *@This()) ?*FunctionDescriptor {
        return objc.msgSend(_self, "functionDescriptor", ?*FunctionDescriptor, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*foundation.String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn specializedName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "specializedName", ?*foundation.String, .{});
    }

    pub fn setSpecializedName(_self: *@This(), _specializedName: ?*foundation.String) void {
        return objc.msgSend(_self, "setSpecializedName:", void, .{_specializedName});
    }

    pub fn constantValues(_self: *@This()) ?*FunctionConstantValues {
        return objc.msgSend(_self, "constantValues", ?*FunctionConstantValues, .{});
    }

    pub fn setConstantValues(_self: *@This(), _constantValues: ?*FunctionConstantValues) void {
        return objc.msgSend(_self, "setConstantValues:", void, .{_constantValues});
    }

    pub fn options(_self: *@This()) FunctionOptions {
        return objc.msgSend(_self, "options", FunctionOptions, .{});
    }

    pub fn setOptions(_self: *@This(), _options: FunctionOptions) void {
        return objc.msgSend(_self, "setOptions:", void, .{_options});
    }

    pub fn binaryArchives(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "binaryArchives", ?*anyopaque, .{});
    }

    pub fn setBinaryArchives(_self: *@This(), _binaryArchives: ?*anyopaque) void {
        return objc.msgSend(_self, "setBinaryArchives:", void, .{_binaryArchives});
    }
};

pub const AutoreleasedArgument = ?*Argument;

pub const PatchType = enum(objc.NSUInteger) {
    None = 0,
    Triangle = 1,
    Quad = 2,
};

/// https://developer.apple.com/documentation/Metal/MTLVertexAttribute?language=objc
pub const VertexAttribute = opaque {
    pub const InternalInfo = objc.ExternClass("MTLVertexAttribute", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn attributeIndex(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "attributeIndex", objc.NSUInteger, .{});
    }

    pub fn attributeType(_self: *@This()) DataType {
        return objc.msgSend(_self, "attributeType", DataType, .{});
    }

    pub fn isActive(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isActive", objc.BOOL, .{});
    }

    pub fn isPatchData(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isPatchData", objc.BOOL, .{});
    }

    pub fn isPatchControlPointData(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isPatchControlPointData", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLAttribute?language=objc
pub const Attribute = opaque {
    pub const InternalInfo = objc.ExternClass("MTLAttribute", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn attributeIndex(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "attributeIndex", objc.NSUInteger, .{});
    }

    pub fn attributeType(_self: *@This()) DataType {
        return objc.msgSend(_self, "attributeType", DataType, .{});
    }

    pub fn isActive(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isActive", objc.BOOL, .{});
    }

    pub fn isPatchData(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isPatchData", objc.BOOL, .{});
    }

    pub fn isPatchControlPointData(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isPatchControlPointData", objc.BOOL, .{});
    }
};

pub const FunctionType = enum(objc.NSUInteger) {
    Vertex = 1,
    Fragment = 2,
    Kernel = 3,
    Visible = 5,
    Intersection = 6,
    Mesh = 7,
    Object = 8,
};

/// https://developer.apple.com/documentation/Metal/MTLFunctionConstant?language=objc
pub const FunctionConstant = opaque {
    pub const InternalInfo = objc.ExternClass("MTLFunctionConstant", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn @"type"(_self: *@This()) DataType {
        return objc.msgSend(_self, "type", DataType, .{});
    }

    pub fn index(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "index", objc.NSUInteger, .{});
    }

    pub fn required(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "required", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLFunction?language=objc
pub const Function = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn newArgumentEncoderWithBufferIndex(_self: *@This(), _bufferIndex: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(_self, "newArgumentEncoderWithBufferIndex:", ?*anyopaque, .{_bufferIndex});
    }

    pub fn newArgumentEncoderWithBufferIndexReflection(_self: *@This(), _bufferIndex: objc.NSUInteger, _reflection: ?*?*Argument) ?*anyopaque {
        return objc.msgSend(_self, "newArgumentEncoderWithBufferIndex:reflection:", ?*anyopaque, .{ _bufferIndex, _reflection });
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn functionType(_self: *@This()) FunctionType {
        return objc.msgSend(_self, "functionType", FunctionType, .{});
    }

    pub fn patchType(_self: *@This()) PatchType {
        return objc.msgSend(_self, "patchType", PatchType, .{});
    }

    pub fn patchControlPointCount(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "patchControlPointCount", objc.NSInteger, .{});
    }

    pub fn vertexAttributes(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "vertexAttributes", ?*anyopaque, .{});
    }

    pub fn stageInputAttributes(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "stageInputAttributes", ?*anyopaque, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn functionConstantsDictionary(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "functionConstantsDictionary", ?*anyopaque, .{});
    }

    pub fn options(_self: *@This()) FunctionOptions {
        return objc.msgSend(_self, "options", FunctionOptions, .{});
    }
};

pub const LanguageVersion = enum(objc.NSUInteger) {
    1_0 = 65536,
    1_1 = 65537,
    1_2 = 65538,
    2_0 = 131072,
    2_1 = 131073,
    2_2 = 131074,
    2_3 = 131075,
    2_4 = 131076,
    3_0 = 196608,
    3_1 = 196609,
    3_2 = 196610,
};

pub const LibraryType = enum(objc.NSInteger) {
    Executable = 0,
    Dynamic = 1,
};

pub const LibraryOptimizationLevel = enum(objc.NSInteger) {
    Default = 0,
    Size = 1,
};

pub const CompileSymbolVisibility = enum(objc.NSInteger) {
    Default = 0,
    Hidden = 1,
};

pub const MathMode = enum(objc.NSInteger) {
    Safe = 0,
    Relaxed = 1,
    Fast = 2,
};

pub const MathFloatingPointFunctions = enum(objc.NSInteger) {
    Fast = 0,
    Precise = 1,
};

/// https://developer.apple.com/documentation/Metal/MTLCompileOptions?language=objc
pub const CompileOptions = opaque {
    pub const InternalInfo = objc.ExternClass("MTLCompileOptions", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn preprocessorMacros(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "preprocessorMacros", ?*anyopaque, .{});
    }

    pub fn setPreprocessorMacros(_self: *@This(), _preprocessorMacros: ?*anyopaque) void {
        return objc.msgSend(_self, "setPreprocessorMacros:", void, .{_preprocessorMacros});
    }

    pub fn fastMathEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "fastMathEnabled", objc.BOOL, .{});
    }

    pub fn setFastMathEnabled(_self: *@This(), _fastMathEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setFastMathEnabled:", void, .{_fastMathEnabled});
    }

    pub fn mathMode(_self: *@This()) MathMode {
        return objc.msgSend(_self, "mathMode", MathMode, .{});
    }

    pub fn setMathMode(_self: *@This(), _mathMode: MathMode) void {
        return objc.msgSend(_self, "setMathMode:", void, .{_mathMode});
    }

    pub fn mathFloatingPointFunctions(_self: *@This()) MathFloatingPointFunctions {
        return objc.msgSend(_self, "mathFloatingPointFunctions", MathFloatingPointFunctions, .{});
    }

    pub fn setMathFloatingPointFunctions(_self: *@This(), _mathFloatingPointFunctions: MathFloatingPointFunctions) void {
        return objc.msgSend(_self, "setMathFloatingPointFunctions:", void, .{_mathFloatingPointFunctions});
    }

    pub fn languageVersion(_self: *@This()) LanguageVersion {
        return objc.msgSend(_self, "languageVersion", LanguageVersion, .{});
    }

    pub fn setLanguageVersion(_self: *@This(), _languageVersion: LanguageVersion) void {
        return objc.msgSend(_self, "setLanguageVersion:", void, .{_languageVersion});
    }

    pub fn libraryType(_self: *@This()) LibraryType {
        return objc.msgSend(_self, "libraryType", LibraryType, .{});
    }

    pub fn setLibraryType(_self: *@This(), _libraryType: LibraryType) void {
        return objc.msgSend(_self, "setLibraryType:", void, .{_libraryType});
    }

    pub fn installName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "installName", ?*foundation.String, .{});
    }

    pub fn setInstallName(_self: *@This(), _installName: ?*foundation.String) void {
        return objc.msgSend(_self, "setInstallName:", void, .{_installName});
    }

    pub fn libraries(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "libraries", ?*anyopaque, .{});
    }

    pub fn setLibraries(_self: *@This(), _libraries: ?*anyopaque) void {
        return objc.msgSend(_self, "setLibraries:", void, .{_libraries});
    }

    pub fn preserveInvariance(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "preserveInvariance", objc.BOOL, .{});
    }

    pub fn setPreserveInvariance(_self: *@This(), _preserveInvariance: objc.BOOL) void {
        return objc.msgSend(_self, "setPreserveInvariance:", void, .{_preserveInvariance});
    }

    pub fn optimizationLevel(_self: *@This()) LibraryOptimizationLevel {
        return objc.msgSend(_self, "optimizationLevel", LibraryOptimizationLevel, .{});
    }

    pub fn setOptimizationLevel(_self: *@This(), _optimizationLevel: LibraryOptimizationLevel) void {
        return objc.msgSend(_self, "setOptimizationLevel:", void, .{_optimizationLevel});
    }

    pub fn compileSymbolVisibility(_self: *@This()) CompileSymbolVisibility {
        return objc.msgSend(_self, "compileSymbolVisibility", CompileSymbolVisibility, .{});
    }

    pub fn setCompileSymbolVisibility(_self: *@This(), _compileSymbolVisibility: CompileSymbolVisibility) void {
        return objc.msgSend(_self, "setCompileSymbolVisibility:", void, .{_compileSymbolVisibility});
    }

    pub fn allowReferencingUndefinedSymbols(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowReferencingUndefinedSymbols", objc.BOOL, .{});
    }

    pub fn setAllowReferencingUndefinedSymbols(_self: *@This(), _allowReferencingUndefinedSymbols: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowReferencingUndefinedSymbols:", void, .{_allowReferencingUndefinedSymbols});
    }

    pub fn maxTotalThreadsPerThreadgroup(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxTotalThreadsPerThreadgroup", objc.NSUInteger, .{});
    }

    pub fn setMaxTotalThreadsPerThreadgroup(_self: *@This(), _maxTotalThreadsPerThreadgroup: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaxTotalThreadsPerThreadgroup:", void, .{_maxTotalThreadsPerThreadgroup});
    }

    pub fn enableLogging(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "enableLogging", objc.BOOL, .{});
    }

    pub fn setEnableLogging(_self: *@This(), _enableLogging: objc.BOOL) void {
        return objc.msgSend(_self, "setEnableLogging:", void, .{_enableLogging});
    }
};

pub const LibraryError = enum(objc.NSUInteger) {
    Unsupported = 1,
    Internal = 2,
    CompileFailure = 3,
    CompileWarning = 4,
    FunctionNotFound = 5,
    FileNotFound = 6,
};

/// https://developer.apple.com/documentation/Metal/MTLLibrary?language=objc
pub const Library = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn newFunctionWithName(_self: *@This(), _functionName: ?*foundation.String) ?*anyopaque {
        return objc.msgSend(_self, "newFunctionWithName:", ?*anyopaque, .{_functionName});
    }

    pub fn newFunctionWithNameConstantValuesError(_self: *@This(), _name: ?*foundation.String, _constantValues: ?*FunctionConstantValues, _error: ?*?*foundation.Error) ?*anyopaque {
        return objc.msgSend(_self, "newFunctionWithName:constantValues:error:", ?*anyopaque, .{ _name, _constantValues, _error });
    }

    pub fn newFunctionWithNameConstantValuesCompletionHandler(_self: *@This(), _name: ?*foundation.String, _constantValues: ?*FunctionConstantValues, _completionHandler: *const fn (?*anyopaque, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(_self, "newFunctionWithName:constantValues:completionHandler:", void, .{ _name, _constantValues, _completionHandler });
    }

    pub fn newFunctionWithDescriptorCompletionHandler(_self: *@This(), _descriptor: ?*FunctionDescriptor, _completionHandler: *const fn (?*anyopaque, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(_self, "newFunctionWithDescriptor:completionHandler:", void, .{ _descriptor, _completionHandler });
    }

    pub fn newFunctionWithDescriptorError(_self: *@This(), _descriptor: ?*FunctionDescriptor, _error: ?*?*foundation.Error) ?*anyopaque {
        return objc.msgSend(_self, "newFunctionWithDescriptor:error:", ?*anyopaque, .{ _descriptor, _error });
    }

    pub fn newIntersectionFunctionWithDescriptorCompletionHandler(_self: *@This(), _descriptor: ?*IntersectionFunctionDescriptor, _completionHandler: *const fn (?*anyopaque, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(_self, "newIntersectionFunctionWithDescriptor:completionHandler:", void, .{ _descriptor, _completionHandler });
    }

    pub fn newIntersectionFunctionWithDescriptorError(_self: *@This(), _descriptor: ?*IntersectionFunctionDescriptor, _error: ?*?*foundation.Error) ?*anyopaque {
        return objc.msgSend(_self, "newIntersectionFunctionWithDescriptor:error:", ?*anyopaque, .{ _descriptor, _error });
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn functionNames(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "functionNames", ?*anyopaque, .{});
    }

    pub fn @"type"(_self: *@This()) LibraryType {
        return objc.msgSend(_self, "type", LibraryType, .{});
    }

    pub fn installName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "installName", ?*foundation.String, .{});
    }
};

pub const CommonCounter = ?*const foundation.String;

pub const CommonCounterSet = ?*const foundation.String;

pub const CounterResultTimestamp = extern struct {
    timestamp: objc.uint64_t,
};

pub const CounterResultStageUtilization = extern struct {
    totalCycles: objc.uint64_t,
    vertexCycles: objc.uint64_t,
    tessellationCycles: objc.uint64_t,
    postTessellationVertexCycles: objc.uint64_t,
    fragmentCycles: objc.uint64_t,
    renderTargetCycles: objc.uint64_t,
};

pub const CounterResultStatistic = extern struct {
    tessellationInputPatches: objc.uint64_t,
    vertexInvocations: objc.uint64_t,
    postTessellationVertexInvocations: objc.uint64_t,
    clipperInvocations: objc.uint64_t,
    clipperPrimitivesOut: objc.uint64_t,
    fragmentInvocations: objc.uint64_t,
    fragmentsPassed: objc.uint64_t,
    computeKernelInvocations: objc.uint64_t,
};

/// https://developer.apple.com/documentation/Metal/MTLCounter?language=objc
pub const Counter = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLCounterSet?language=objc
pub const CounterSet = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn counters(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "counters", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLCounterSampleBufferDescriptor?language=objc
pub const CounterSampleBufferDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLCounterSampleBufferDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn counterSet(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "counterSet", ?*anyopaque, .{});
    }

    pub fn setCounterSet(_self: *@This(), _counterSet: ?*anyopaque) void {
        return objc.msgSend(_self, "setCounterSet:", void, .{_counterSet});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn storageMode(_self: *@This()) StorageMode {
        return objc.msgSend(_self, "storageMode", StorageMode, .{});
    }

    pub fn setStorageMode(_self: *@This(), _storageMode: StorageMode) void {
        return objc.msgSend(_self, "setStorageMode:", void, .{_storageMode});
    }

    pub fn sampleCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "sampleCount", objc.NSUInteger, .{});
    }

    pub fn setSampleCount(_self: *@This(), _sampleCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setSampleCount:", void, .{_sampleCount});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLCounterSampleBuffer?language=objc
pub const CounterSampleBuffer = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn resolveCounterRange(_self: *@This(), _range: foundation.Range) ?*foundation.Data {
        return objc.msgSend(_self, "resolveCounterRange:", ?*foundation.Data, .{_range});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn sampleCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "sampleCount", objc.NSUInteger, .{});
    }
};

pub const CounterSampleBufferError = enum(objc.NSInteger) {
    OutOfMemory = 0,
    Invalid = 1,
    Internal = 2,
};

pub const IOCompressionMethod = enum(objc.NSInteger) {
    Zlib = 0,
    LZFSE = 1,
    LZ4 = 2,
    LZMA = 3,
    LZBitmap = 4,
};

extern "Metal" fn MTLCreateSystemDefaultDevice() callconv(.C) ?*anyopaque;
pub const createSystemDefaultDevice = MTLCreateSystemDefaultDevice;

extern "Metal" fn MTLCopyAllDevices() callconv(.C) ?*anyopaque;
pub const copyAllDevices = MTLCopyAllDevices;

pub const DeviceNotificationName = ?*foundation.String;

pub const DeviceNotificationHandler = *const fn (?*anyopaque, DeviceNotificationName) callconv(.C) void;

extern "Metal" fn MTLCopyAllDevicesWithObserver(observer: ?*?*anyopaque, handler: DeviceNotificationHandler) callconv(.C) ?*anyopaque;
pub const copyAllDevicesWithObserver = MTLCopyAllDevicesWithObserver;

extern "Metal" fn MTLRemoveDeviceObserver(observer: ?*anyopaque) callconv(.C) void;
pub const removeDeviceObserver = MTLRemoveDeviceObserver;

pub const FeatureSet = enum(objc.NSUInteger) {
    _iOS_GPUFamily1_v1 = 0,
    _iOS_GPUFamily2_v1 = 1,
    _iOS_GPUFamily1_v2 = 2,
    _iOS_GPUFamily2_v2 = 3,
    _iOS_GPUFamily3_v1 = 4,
    _iOS_GPUFamily1_v3 = 5,
    _iOS_GPUFamily2_v3 = 6,
    _iOS_GPUFamily3_v2 = 7,
    _iOS_GPUFamily1_v4 = 8,
    _iOS_GPUFamily2_v4 = 9,
    _iOS_GPUFamily3_v3 = 10,
    _iOS_GPUFamily4_v1 = 11,
    _iOS_GPUFamily1_v5 = 12,
    _iOS_GPUFamily2_v5 = 13,
    _iOS_GPUFamily3_v4 = 14,
    _iOS_GPUFamily4_v2 = 15,
    _iOS_GPUFamily5_v1 = 16,
    _macOS_GPUFamily1_v1 = 10000,
    _OSX_GPUFamily1_v1 = 10000,
    _macOS_GPUFamily1_v2 = 10001,
    _OSX_GPUFamily1_v2 = 10001,
    _macOS_ReadWriteTextureTier2 = 10002,
    _OSX_ReadWriteTextureTier2 = 10002,
    _macOS_GPUFamily1_v3 = 10003,
    _macOS_GPUFamily1_v4 = 10004,
    _macOS_GPUFamily2_v1 = 10005,
    _tvOS_GPUFamily1_v1 = 30000,
    _TVOS_GPUFamily1_v1 = 30000,
    _tvOS_GPUFamily1_v2 = 30001,
    _tvOS_GPUFamily1_v3 = 30002,
    _tvOS_GPUFamily2_v1 = 30003,
    _tvOS_GPUFamily1_v4 = 30004,
    _tvOS_GPUFamily2_v2 = 30005,
};

pub const GPUFamily = enum(objc.NSInteger) {
    Apple1 = 1001,
    Apple2 = 1002,
    Apple3 = 1003,
    Apple4 = 1004,
    Apple5 = 1005,
    Apple6 = 1006,
    Apple7 = 1007,
    Apple8 = 1008,
    Apple9 = 1009,
    Mac1 = 2001,
    Mac2 = 2002,
    Common1 = 3001,
    Common2 = 3002,
    Common3 = 3003,
    MacCatalyst1 = 4001,
    MacCatalyst2 = 4002,
    Metal3 = 5001,
};

pub const DeviceLocation = enum(objc.NSUInteger) {
    BuiltIn = 0,
    Slot = 1,
    External = 2,
    Unspecified = -1,
};

pub const PipelineOption = enum(objc.NSUInteger) {
    None = 0,
    ArgumentInfo = 1,
    BindingInfo = 1,
    BufferTypeInfo = 2,
    FailOnBinaryArchiveMiss = 4,
};

pub const ReadWriteTextureTier = enum(objc.NSUInteger) {
    None = 0,
    1 = 1,
    2 = 2,
};

pub const ArgumentBuffersTier = enum(objc.NSUInteger) {
    1 = 0,
    2 = 1,
};

pub const SparseTextureRegionAlignmentMode = enum(objc.NSUInteger) {
    Outward = 0,
    Inward = 1,
};

pub const SparsePageSize = enum(objc.NSInteger) {
    16 = 101,
    64 = 102,
    256 = 103,
};

pub const AccelerationStructureSizes = extern struct {
    accelerationStructureSize: objc.NSUInteger,
    buildScratchBufferSize: objc.NSUInteger,
    refitScratchBufferSize: objc.NSUInteger,
};

pub const CounterSamplingPoint = enum(objc.NSUInteger) {
    AtStageBoundary = 0,
    AtDrawBoundary = 1,
    AtDispatchBoundary = 2,
    AtTileDispatchBoundary = 3,
    AtBlitBoundary = 4,
};

pub const SizeAndAlign = extern struct {
    size: objc.NSUInteger,
    @"align": objc.NSUInteger,
};

pub const AutoreleasedRenderPipelineReflection = ?*RenderPipelineReflection;

pub const AutoreleasedComputePipelineReflection = ?*ComputePipelineReflection;

pub const NewLibraryCompletionHandler = *const fn (?*anyopaque, ?*foundation.Error) callconv(.C) void;

pub const NewRenderPipelineStateCompletionHandler = *const fn (?*anyopaque, ?*foundation.Error) callconv(.C) void;

pub const NewRenderPipelineStateWithReflectionCompletionHandler = *const fn (?*anyopaque, ?*RenderPipelineReflection, ?*foundation.Error) callconv(.C) void;

pub const NewComputePipelineStateCompletionHandler = *const fn (?*anyopaque, ?*foundation.Error) callconv(.C) void;

pub const NewComputePipelineStateWithReflectionCompletionHandler = *const fn (?*anyopaque, ?*ComputePipelineReflection, ?*foundation.Error) callconv(.C) void;

/// https://developer.apple.com/documentation/Metal/MTLArgumentDescriptor?language=objc
pub const ArgumentDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLArgumentDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn argumentDescriptor(_self: *@This()) ?*ArgumentDescriptor {
        return objc.msgSend(_self, "argumentDescriptor", ?*ArgumentDescriptor, .{});
    }

    pub fn dataType(_self: *@This()) DataType {
        return objc.msgSend(_self, "dataType", DataType, .{});
    }

    pub fn setDataType(_self: *@This(), _dataType: DataType) void {
        return objc.msgSend(_self, "setDataType:", void, .{_dataType});
    }

    pub fn index(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "index", objc.NSUInteger, .{});
    }

    pub fn setIndex(_self: *@This(), _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setIndex:", void, .{_index});
    }

    pub fn arrayLength(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "arrayLength", objc.NSUInteger, .{});
    }

    pub fn setArrayLength(_self: *@This(), _arrayLength: objc.NSUInteger) void {
        return objc.msgSend(_self, "setArrayLength:", void, .{_arrayLength});
    }

    pub fn access(_self: *@This()) BindingAccess {
        return objc.msgSend(_self, "access", BindingAccess, .{});
    }

    pub fn setAccess(_self: *@This(), _access: BindingAccess) void {
        return objc.msgSend(_self, "setAccess:", void, .{_access});
    }

    pub fn textureType(_self: *@This()) TextureType {
        return objc.msgSend(_self, "textureType", TextureType, .{});
    }

    pub fn setTextureType(_self: *@This(), _textureType: TextureType) void {
        return objc.msgSend(_self, "setTextureType:", void, .{_textureType});
    }

    pub fn constantBlockAlignment(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "constantBlockAlignment", objc.NSUInteger, .{});
    }

    pub fn setConstantBlockAlignment(_self: *@This(), _constantBlockAlignment: objc.NSUInteger) void {
        return objc.msgSend(_self, "setConstantBlockAlignment:", void, .{_constantBlockAlignment});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLArchitecture?language=objc
pub const Architecture = opaque {
    pub const InternalInfo = objc.ExternClass("MTLArchitecture", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLDevice?language=objc
pub const Device = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn registryID(_self: *@This()) objc.uint64_t {
        return objc.msgSend(_self, "registryID", objc.uint64_t, .{});
    }

    pub fn architecture(_self: *@This()) ?*Architecture {
        return objc.msgSend(_self, "architecture", ?*Architecture, .{});
    }

    pub fn maxThreadsPerThreadgroup(_self: *@This()) Size {
        return objc.msgSend(_self, "maxThreadsPerThreadgroup", Size, .{});
    }

    pub fn isLowPower(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isLowPower", objc.BOOL, .{});
    }

    pub fn isHeadless(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isHeadless", objc.BOOL, .{});
    }

    pub fn isRemovable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRemovable", objc.BOOL, .{});
    }

    pub fn hasUnifiedMemory(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "hasUnifiedMemory", objc.BOOL, .{});
    }

    pub fn recommendedMaxWorkingSetSize(_self: *@This()) objc.uint64_t {
        return objc.msgSend(_self, "recommendedMaxWorkingSetSize", objc.uint64_t, .{});
    }

    pub fn location(_self: *@This()) DeviceLocation {
        return objc.msgSend(_self, "location", DeviceLocation, .{});
    }

    pub fn locationNumber(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "locationNumber", objc.NSUInteger, .{});
    }

    pub fn maxTransferRate(_self: *@This()) objc.uint64_t {
        return objc.msgSend(_self, "maxTransferRate", objc.uint64_t, .{});
    }

    pub fn isDepth24Stencil8PixelFormatSupported(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isDepth24Stencil8PixelFormatSupported", objc.BOOL, .{});
    }

    pub fn readWriteTextureSupport(_self: *@This()) ReadWriteTextureTier {
        return objc.msgSend(_self, "readWriteTextureSupport", ReadWriteTextureTier, .{});
    }

    pub fn argumentBuffersSupport(_self: *@This()) ArgumentBuffersTier {
        return objc.msgSend(_self, "argumentBuffersSupport", ArgumentBuffersTier, .{});
    }

    pub fn areRasterOrderGroupsSupported(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "areRasterOrderGroupsSupported", objc.BOOL, .{});
    }

    pub fn supports32BitFloatFiltering(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supports32BitFloatFiltering", objc.BOOL, .{});
    }

    pub fn supports32BitMSAA(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supports32BitMSAA", objc.BOOL, .{});
    }

    pub fn supportsQueryTextureLOD(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsQueryTextureLOD", objc.BOOL, .{});
    }

    pub fn supportsBCTextureCompression(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsBCTextureCompression", objc.BOOL, .{});
    }

    pub fn supportsPullModelInterpolation(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsPullModelInterpolation", objc.BOOL, .{});
    }

    pub fn areBarycentricCoordsSupported(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "areBarycentricCoordsSupported", objc.BOOL, .{});
    }

    pub fn supportsShaderBarycentricCoordinates(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsShaderBarycentricCoordinates", objc.BOOL, .{});
    }

    pub fn currentAllocatedSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "currentAllocatedSize", objc.NSUInteger, .{});
    }

    pub fn newLogStateWithDescriptorError(_self: *@This(), _descriptor: ?*LogStateDescriptor, _error: ?*?*foundation.Error) ?*anyopaque {
        return objc.msgSend(_self, "newLogStateWithDescriptor:error:", ?*anyopaque, .{ _descriptor, _error });
    }

    pub fn newCommandQueue(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "newCommandQueue", ?*anyopaque, .{});
    }

    pub fn newCommandQueueWithMaxCommandBufferCount(_self: *@This(), _maxCommandBufferCount: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(_self, "newCommandQueueWithMaxCommandBufferCount:", ?*anyopaque, .{_maxCommandBufferCount});
    }

    pub fn newCommandQueueWithDescriptor(_self: *@This(), _descriptor: ?*CommandQueueDescriptor) ?*anyopaque {
        return objc.msgSend(_self, "newCommandQueueWithDescriptor:", ?*anyopaque, .{_descriptor});
    }

    pub fn heapTextureSizeAndAlignWithDescriptor(_self: *@This(), _desc: ?*TextureDescriptor) SizeAndAlign {
        return objc.msgSend(_self, "heapTextureSizeAndAlignWithDescriptor:", SizeAndAlign, .{_desc});
    }

    pub fn heapBufferSizeAndAlignWithLengthOptions(_self: *@This(), _length: objc.NSUInteger, _options: ResourceOptions) SizeAndAlign {
        return objc.msgSend(_self, "heapBufferSizeAndAlignWithLength:options:", SizeAndAlign, .{ _length, _options });
    }

    pub fn newHeapWithDescriptor(_self: *@This(), _descriptor: ?*HeapDescriptor) ?*anyopaque {
        return objc.msgSend(_self, "newHeapWithDescriptor:", ?*anyopaque, .{_descriptor});
    }

    pub fn newBufferWithLengthOptions(_self: *@This(), _length: objc.NSUInteger, _options: ResourceOptions) ?*anyopaque {
        return objc.msgSend(_self, "newBufferWithLength:options:", ?*anyopaque, .{ _length, _options });
    }

    pub fn newBufferWithBytesLengthOptions(_self: *@This(), _pointer: ?*anyopaque, _length: objc.NSUInteger, _options: ResourceOptions) ?*anyopaque {
        return objc.msgSend(_self, "newBufferWithBytes:length:options:", ?*anyopaque, .{ _pointer, _length, _options });
    }

    pub fn newBufferWithBytesNoCopyLengthOptionsDeallocator(
        _self: *@This(),
        _pointer: ?*anyopaque,
        _length: objc.NSUInteger,
        _options: ResourceOptions,
        _deallocator: *const fn (?*anyopaque, objc.NSUInteger) callconv(.C) void,
    ) ?*anyopaque {
        return objc.msgSend(_self, "newBufferWithBytesNoCopy:length:options:deallocator:", ?*anyopaque, .{
            _pointer,
            _length,
            _options,
            _deallocator,
        });
    }

    pub fn newDepthStencilStateWithDescriptor(_self: *@This(), _descriptor: ?*DepthStencilDescriptor) ?*anyopaque {
        return objc.msgSend(_self, "newDepthStencilStateWithDescriptor:", ?*anyopaque, .{_descriptor});
    }

    pub fn newTextureWithDescriptor(_self: *@This(), _descriptor: ?*TextureDescriptor) ?*anyopaque {
        return objc.msgSend(_self, "newTextureWithDescriptor:", ?*anyopaque, .{_descriptor});
    }

    pub fn newTextureWithDescriptorIosurfacePlane(_self: *@This(), _descriptor: ?*TextureDescriptor, _iosurface: io_surface.Ref, _plane: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(_self, "newTextureWithDescriptor:iosurface:plane:", ?*anyopaque, .{ _descriptor, _iosurface, _plane });
    }

    pub fn newSharedTextureWithDescriptor(_self: *@This(), _descriptor: ?*TextureDescriptor) ?*anyopaque {
        return objc.msgSend(_self, "newSharedTextureWithDescriptor:", ?*anyopaque, .{_descriptor});
    }

    pub fn newSharedTextureWithHandle(_self: *@This(), _sharedHandle: ?*SharedTextureHandle) ?*anyopaque {
        return objc.msgSend(_self, "newSharedTextureWithHandle:", ?*anyopaque, .{_sharedHandle});
    }

    pub fn newSamplerStateWithDescriptor(_self: *@This(), _descriptor: ?*SamplerDescriptor) ?*anyopaque {
        return objc.msgSend(_self, "newSamplerStateWithDescriptor:", ?*anyopaque, .{_descriptor});
    }

    pub fn newDefaultLibrary(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "newDefaultLibrary", ?*anyopaque, .{});
    }

    pub fn newDefaultLibraryWithBundleError(_self: *@This(), _bundle: ?*foundation.Bundle, _error: ?*?*foundation.Error) ?*anyopaque {
        return objc.msgSend(_self, "newDefaultLibraryWithBundle:error:", ?*anyopaque, .{ _bundle, _error });
    }

    pub fn newLibraryWithFileError(_self: *@This(), _filepath: ?*foundation.String, _error: ?*?*foundation.Error) ?*anyopaque {
        return objc.msgSend(_self, "newLibraryWithFile:error:", ?*anyopaque, .{ _filepath, _error });
    }

    pub fn newLibraryWithURLError(_self: *@This(), _url: ?*foundation.URL, _error: ?*?*foundation.Error) ?*anyopaque {
        return objc.msgSend(_self, "newLibraryWithURL:error:", ?*anyopaque, .{ _url, _error });
    }

    pub fn newLibraryWithDataError(_self: *@This(), _data: objc.dispatch_data_t, _error: ?*?*foundation.Error) ?*anyopaque {
        return objc.msgSend(_self, "newLibraryWithData:error:", ?*anyopaque, .{ _data, _error });
    }

    pub fn newLibraryWithSourceOptionsError(_self: *@This(), _source: ?*foundation.String, _options: ?*CompileOptions, _error: ?*?*foundation.Error) ?*anyopaque {
        return objc.msgSend(_self, "newLibraryWithSource:options:error:", ?*anyopaque, .{ _source, _options, _error });
    }

    pub fn newLibraryWithSourceOptionsCompletionHandler(_self: *@This(), _source: ?*foundation.String, _options: ?*CompileOptions, _completionHandler: NewLibraryCompletionHandler) void {
        return objc.msgSend(_self, "newLibraryWithSource:options:completionHandler:", void, .{ _source, _options, _completionHandler });
    }

    pub fn newLibraryWithStitchedDescriptorError(_self: *@This(), _descriptor: ?*StitchedLibraryDescriptor, _error: ?*?*foundation.Error) ?*anyopaque {
        return objc.msgSend(_self, "newLibraryWithStitchedDescriptor:error:", ?*anyopaque, .{ _descriptor, _error });
    }

    pub fn newLibraryWithStitchedDescriptorCompletionHandler(_self: *@This(), _descriptor: ?*StitchedLibraryDescriptor, _completionHandler: NewLibraryCompletionHandler) void {
        return objc.msgSend(_self, "newLibraryWithStitchedDescriptor:completionHandler:", void, .{ _descriptor, _completionHandler });
    }

    pub fn newRenderPipelineStateWithDescriptorError(_self: *@This(), _descriptor: ?*RenderPipelineDescriptor, _error: ?*?*foundation.Error) ?*anyopaque {
        return objc.msgSend(_self, "newRenderPipelineStateWithDescriptor:error:", ?*anyopaque, .{ _descriptor, _error });
    }

    pub fn newRenderPipelineStateWithDescriptorOptionsReflectionError(
        _self: *@This(),
        _descriptor: ?*RenderPipelineDescriptor,
        _options: PipelineOption,
        _reflection: ?*?*RenderPipelineReflection,
        _error: ?*?*foundation.Error,
    ) ?*anyopaque {
        return objc.msgSend(_self, "newRenderPipelineStateWithDescriptor:options:reflection:error:", ?*anyopaque, .{
            _descriptor,
            _options,
            _reflection,
            _error,
        });
    }

    pub fn newRenderPipelineStateWithDescriptorCompletionHandler(_self: *@This(), _descriptor: ?*RenderPipelineDescriptor, _completionHandler: NewRenderPipelineStateCompletionHandler) void {
        return objc.msgSend(_self, "newRenderPipelineStateWithDescriptor:completionHandler:", void, .{ _descriptor, _completionHandler });
    }

    pub fn newRenderPipelineStateWithDescriptorOptionsCompletionHandler(_self: *@This(), _descriptor: ?*RenderPipelineDescriptor, _options: PipelineOption, _completionHandler: NewRenderPipelineStateWithReflectionCompletionHandler) void {
        return objc.msgSend(_self, "newRenderPipelineStateWithDescriptor:options:completionHandler:", void, .{ _descriptor, _options, _completionHandler });
    }

    pub fn newComputePipelineStateWithFunctionError(_self: *@This(), _computeFunction: ?*anyopaque, _error: ?*?*foundation.Error) ?*anyopaque {
        return objc.msgSend(_self, "newComputePipelineStateWithFunction:error:", ?*anyopaque, .{ _computeFunction, _error });
    }

    pub fn newComputePipelineStateWithFunctionOptionsReflectionError(
        _self: *@This(),
        _computeFunction: ?*anyopaque,
        _options: PipelineOption,
        _reflection: ?*?*ComputePipelineReflection,
        _error: ?*?*foundation.Error,
    ) ?*anyopaque {
        return objc.msgSend(_self, "newComputePipelineStateWithFunction:options:reflection:error:", ?*anyopaque, .{
            _computeFunction,
            _options,
            _reflection,
            _error,
        });
    }

    pub fn newComputePipelineStateWithFunctionCompletionHandler(_self: *@This(), _computeFunction: ?*anyopaque, _completionHandler: NewComputePipelineStateCompletionHandler) void {
        return objc.msgSend(_self, "newComputePipelineStateWithFunction:completionHandler:", void, .{ _computeFunction, _completionHandler });
    }

    pub fn newComputePipelineStateWithFunctionOptionsCompletionHandler(_self: *@This(), _computeFunction: ?*anyopaque, _options: PipelineOption, _completionHandler: NewComputePipelineStateWithReflectionCompletionHandler) void {
        return objc.msgSend(_self, "newComputePipelineStateWithFunction:options:completionHandler:", void, .{ _computeFunction, _options, _completionHandler });
    }

    pub fn newComputePipelineStateWithDescriptorOptionsReflectionError(
        _self: *@This(),
        _descriptor: ?*ComputePipelineDescriptor,
        _options: PipelineOption,
        _reflection: ?*?*ComputePipelineReflection,
        _error: ?*?*foundation.Error,
    ) ?*anyopaque {
        return objc.msgSend(_self, "newComputePipelineStateWithDescriptor:options:reflection:error:", ?*anyopaque, .{
            _descriptor,
            _options,
            _reflection,
            _error,
        });
    }

    pub fn newComputePipelineStateWithDescriptorOptionsCompletionHandler(_self: *@This(), _descriptor: ?*ComputePipelineDescriptor, _options: PipelineOption, _completionHandler: NewComputePipelineStateWithReflectionCompletionHandler) void {
        return objc.msgSend(_self, "newComputePipelineStateWithDescriptor:options:completionHandler:", void, .{ _descriptor, _options, _completionHandler });
    }

    pub fn newFence(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "newFence", ?*anyopaque, .{});
    }

    pub fn supportsFeatureSet(_self: *@This(), _featureSet: FeatureSet) objc.BOOL {
        return objc.msgSend(_self, "supportsFeatureSet:", objc.BOOL, .{_featureSet});
    }

    pub fn supportsFamily(_self: *@This(), _gpuFamily: GPUFamily) objc.BOOL {
        return objc.msgSend(_self, "supportsFamily:", objc.BOOL, .{_gpuFamily});
    }

    pub fn supportsTextureSampleCount(_self: *@This(), _sampleCount: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(_self, "supportsTextureSampleCount:", objc.BOOL, .{_sampleCount});
    }

    pub fn minimumLinearTextureAlignmentForPixelFormat(_self: *@This(), _format: PixelFormat) objc.NSUInteger {
        return objc.msgSend(_self, "minimumLinearTextureAlignmentForPixelFormat:", objc.NSUInteger, .{_format});
    }

    pub fn minimumTextureBufferAlignmentForPixelFormat(_self: *@This(), _format: PixelFormat) objc.NSUInteger {
        return objc.msgSend(_self, "minimumTextureBufferAlignmentForPixelFormat:", objc.NSUInteger, .{_format});
    }

    pub fn newRenderPipelineStateWithTileDescriptorOptionsReflectionError(
        _self: *@This(),
        _descriptor: ?*TileRenderPipelineDescriptor,
        _options: PipelineOption,
        _reflection: ?*?*RenderPipelineReflection,
        _error: ?*?*foundation.Error,
    ) ?*anyopaque {
        return objc.msgSend(_self, "newRenderPipelineStateWithTileDescriptor:options:reflection:error:", ?*anyopaque, .{
            _descriptor,
            _options,
            _reflection,
            _error,
        });
    }

    pub fn newRenderPipelineStateWithTileDescriptorOptionsCompletionHandler(_self: *@This(), _descriptor: ?*TileRenderPipelineDescriptor, _options: PipelineOption, _completionHandler: NewRenderPipelineStateWithReflectionCompletionHandler) void {
        return objc.msgSend(_self, "newRenderPipelineStateWithTileDescriptor:options:completionHandler:", void, .{ _descriptor, _options, _completionHandler });
    }

    pub fn newRenderPipelineStateWithMeshDescriptorOptionsReflectionError(
        _self: *@This(),
        _descriptor: ?*MeshRenderPipelineDescriptor,
        _options: PipelineOption,
        _reflection: ?*?*RenderPipelineReflection,
        _error: ?*?*foundation.Error,
    ) ?*anyopaque {
        return objc.msgSend(_self, "newRenderPipelineStateWithMeshDescriptor:options:reflection:error:", ?*anyopaque, .{
            _descriptor,
            _options,
            _reflection,
            _error,
        });
    }

    pub fn newRenderPipelineStateWithMeshDescriptorOptionsCompletionHandler(_self: *@This(), _descriptor: ?*MeshRenderPipelineDescriptor, _options: PipelineOption, _completionHandler: NewRenderPipelineStateWithReflectionCompletionHandler) void {
        return objc.msgSend(_self, "newRenderPipelineStateWithMeshDescriptor:options:completionHandler:", void, .{ _descriptor, _options, _completionHandler });
    }

    pub fn maxThreadgroupMemoryLength(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxThreadgroupMemoryLength", objc.NSUInteger, .{});
    }

    pub fn maxArgumentBufferSamplerCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxArgumentBufferSamplerCount", objc.NSUInteger, .{});
    }

    pub fn areProgrammableSamplePositionsSupported(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "areProgrammableSamplePositionsSupported", objc.BOOL, .{});
    }

    pub fn getDefaultSamplePositionsCount(_self: *@This(), _positions: ?*SamplePosition, _count: objc.NSUInteger) void {
        return objc.msgSend(_self, "getDefaultSamplePositions:count:", void, .{ _positions, _count });
    }

    pub fn newArgumentEncoderWithArguments(_self: *@This(), _arguments: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "newArgumentEncoderWithArguments:", ?*anyopaque, .{_arguments});
    }

    pub fn supportsRasterizationRateMapWithLayerCount(_self: *@This(), _layerCount: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(_self, "supportsRasterizationRateMapWithLayerCount:", objc.BOOL, .{_layerCount});
    }

    pub fn newRasterizationRateMapWithDescriptor(_self: *@This(), _descriptor: ?*RasterizationRateMapDescriptor) ?*anyopaque {
        return objc.msgSend(_self, "newRasterizationRateMapWithDescriptor:", ?*anyopaque, .{_descriptor});
    }

    pub fn newIndirectCommandBufferWithDescriptorMaxCommandCountOptions(_self: *@This(), _descriptor: ?*IndirectCommandBufferDescriptor, _maxCount: objc.NSUInteger, _options: ResourceOptions) ?*anyopaque {
        return objc.msgSend(_self, "newIndirectCommandBufferWithDescriptor:maxCommandCount:options:", ?*anyopaque, .{ _descriptor, _maxCount, _options });
    }

    pub fn newEvent(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "newEvent", ?*anyopaque, .{});
    }

    pub fn newSharedEvent(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "newSharedEvent", ?*anyopaque, .{});
    }

    pub fn newSharedEventWithHandle(_self: *@This(), _sharedEventHandle: ?*SharedEventHandle) ?*anyopaque {
        return objc.msgSend(_self, "newSharedEventWithHandle:", ?*anyopaque, .{_sharedEventHandle});
    }

    pub fn peerGroupID(_self: *@This()) objc.uint64_t {
        return objc.msgSend(_self, "peerGroupID", objc.uint64_t, .{});
    }

    pub fn peerIndex(_self: *@This()) objc.uint32_t {
        return objc.msgSend(_self, "peerIndex", objc.uint32_t, .{});
    }

    pub fn peerCount(_self: *@This()) objc.uint32_t {
        return objc.msgSend(_self, "peerCount", objc.uint32_t, .{});
    }

    pub fn newIOHandleWithURLError(_self: *@This(), _url: ?*foundation.URL, _error: ?*?*foundation.Error) ?*anyopaque {
        return objc.msgSend(_self, "newIOHandleWithURL:error:", ?*anyopaque, .{ _url, _error });
    }

    pub fn newIOCommandQueueWithDescriptorError(_self: *@This(), _descriptor: ?*IOCommandQueueDescriptor, _error: ?*?*foundation.Error) ?*anyopaque {
        return objc.msgSend(_self, "newIOCommandQueueWithDescriptor:error:", ?*anyopaque, .{ _descriptor, _error });
    }

    pub fn newIOHandleWithURLCompressionMethodError(_self: *@This(), _url: ?*foundation.URL, _compressionMethod: IOCompressionMethod, _error: ?*?*foundation.Error) ?*anyopaque {
        return objc.msgSend(_self, "newIOHandleWithURL:compressionMethod:error:", ?*anyopaque, .{ _url, _compressionMethod, _error });
    }

    pub fn newIOFileHandleWithURLError(_self: *@This(), _url: ?*foundation.URL, _error: ?*?*foundation.Error) ?*anyopaque {
        return objc.msgSend(_self, "newIOFileHandleWithURL:error:", ?*anyopaque, .{ _url, _error });
    }

    pub fn newIOFileHandleWithURLCompressionMethodError(_self: *@This(), _url: ?*foundation.URL, _compressionMethod: IOCompressionMethod, _error: ?*?*foundation.Error) ?*anyopaque {
        return objc.msgSend(_self, "newIOFileHandleWithURL:compressionMethod:error:", ?*anyopaque, .{ _url, _compressionMethod, _error });
    }

    pub fn sparseTileSizeWithTextureTypePixelFormatSampleCount(_self: *@This(), _textureType: TextureType, _pixelFormat: PixelFormat, _sampleCount: objc.NSUInteger) Size {
        return objc.msgSend(_self, "sparseTileSizeWithTextureType:pixelFormat:sampleCount:", Size, .{ _textureType, _pixelFormat, _sampleCount });
    }

    pub fn sparseTileSizeInBytes(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "sparseTileSizeInBytes", objc.NSUInteger, .{});
    }

    pub fn convertSparsePixelRegionsToTileRegionsWithTileSizeAlignmentModeNumRegions(
        _self: *@This(),
        _pixelRegions: ?*Region,
        _tileRegions: ?*Region,
        _tileSize: Size,
        _mode: SparseTextureRegionAlignmentMode,
        _numRegions: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "convertSparsePixelRegions:toTileRegions:withTileSize:alignmentMode:numRegions:", void, .{
            _pixelRegions,
            _tileRegions,
            _tileSize,
            _mode,
            _numRegions,
        });
    }

    pub fn convertSparseTileRegionsToPixelRegionsWithTileSizeNumRegions(
        _self: *@This(),
        _tileRegions: ?*Region,
        _pixelRegions: ?*Region,
        _tileSize: Size,
        _numRegions: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "convertSparseTileRegions:toPixelRegions:withTileSize:numRegions:", void, .{
            _tileRegions,
            _pixelRegions,
            _tileSize,
            _numRegions,
        });
    }

    pub fn sparseTileSizeInBytesForSparsePageSize(_self: *@This(), _sparsePageSize: SparsePageSize) objc.NSUInteger {
        return objc.msgSend(_self, "sparseTileSizeInBytesForSparsePageSize:", objc.NSUInteger, .{_sparsePageSize});
    }

    pub fn sparseTileSizeWithTextureTypePixelFormatSampleCountSparsePageSize(
        _self: *@This(),
        _textureType: TextureType,
        _pixelFormat: PixelFormat,
        _sampleCount: objc.NSUInteger,
        _sparsePageSize: SparsePageSize,
    ) Size {
        return objc.msgSend(_self, "sparseTileSizeWithTextureType:pixelFormat:sampleCount:sparsePageSize:", Size, .{
            _textureType,
            _pixelFormat,
            _sampleCount,
            _sparsePageSize,
        });
    }

    pub fn maxBufferLength(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxBufferLength", objc.NSUInteger, .{});
    }

    pub fn counterSets(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "counterSets", ?*anyopaque, .{});
    }

    pub fn newCounterSampleBufferWithDescriptorError(_self: *@This(), _descriptor: ?*CounterSampleBufferDescriptor, _error: ?*?*foundation.Error) ?*anyopaque {
        return objc.msgSend(_self, "newCounterSampleBufferWithDescriptor:error:", ?*anyopaque, .{ _descriptor, _error });
    }

    pub fn sampleTimestampsGpuTimestamp(_self: *@This(), _cpuTimestamp: ?*Timestamp, _gpuTimestamp: ?*Timestamp) void {
        return objc.msgSend(_self, "sampleTimestamps:gpuTimestamp:", void, .{ _cpuTimestamp, _gpuTimestamp });
    }

    pub fn newArgumentEncoderWithBufferBinding(_self: *@This(), _bufferBinding: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "newArgumentEncoderWithBufferBinding:", ?*anyopaque, .{_bufferBinding});
    }

    pub fn supportsCounterSampling(_self: *@This(), _samplingPoint: CounterSamplingPoint) objc.BOOL {
        return objc.msgSend(_self, "supportsCounterSampling:", objc.BOOL, .{_samplingPoint});
    }

    pub fn supportsVertexAmplificationCount(_self: *@This(), _count: objc.NSUInteger) objc.BOOL {
        return objc.msgSend(_self, "supportsVertexAmplificationCount:", objc.BOOL, .{_count});
    }

    pub fn supportsDynamicLibraries(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsDynamicLibraries", objc.BOOL, .{});
    }

    pub fn supportsRenderDynamicLibraries(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsRenderDynamicLibraries", objc.BOOL, .{});
    }

    pub fn newDynamicLibraryError(_self: *@This(), _library: ?*anyopaque, _error: ?*?*foundation.Error) ?*anyopaque {
        return objc.msgSend(_self, "newDynamicLibrary:error:", ?*anyopaque, .{ _library, _error });
    }

    pub fn newDynamicLibraryWithURLError(_self: *@This(), _url: ?*foundation.URL, _error: ?*?*foundation.Error) ?*anyopaque {
        return objc.msgSend(_self, "newDynamicLibraryWithURL:error:", ?*anyopaque, .{ _url, _error });
    }

    pub fn newBinaryArchiveWithDescriptorError(_self: *@This(), _descriptor: ?*BinaryArchiveDescriptor, _error: ?*?*foundation.Error) ?*anyopaque {
        return objc.msgSend(_self, "newBinaryArchiveWithDescriptor:error:", ?*anyopaque, .{ _descriptor, _error });
    }

    pub fn supportsRaytracing(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsRaytracing", objc.BOOL, .{});
    }

    pub fn accelerationStructureSizesWithDescriptor(_self: *@This(), _descriptor: ?*AccelerationStructureDescriptor) AccelerationStructureSizes {
        return objc.msgSend(_self, "accelerationStructureSizesWithDescriptor:", AccelerationStructureSizes, .{_descriptor});
    }

    pub fn newAccelerationStructureWithSize(_self: *@This(), _size: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(_self, "newAccelerationStructureWithSize:", ?*anyopaque, .{_size});
    }

    pub fn newAccelerationStructureWithDescriptor(_self: *@This(), _descriptor: ?*AccelerationStructureDescriptor) ?*anyopaque {
        return objc.msgSend(_self, "newAccelerationStructureWithDescriptor:", ?*anyopaque, .{_descriptor});
    }

    pub fn heapAccelerationStructureSizeAndAlignWithSize(_self: *@This(), _size: objc.NSUInteger) SizeAndAlign {
        return objc.msgSend(_self, "heapAccelerationStructureSizeAndAlignWithSize:", SizeAndAlign, .{_size});
    }

    pub fn heapAccelerationStructureSizeAndAlignWithDescriptor(_self: *@This(), _descriptor: ?*AccelerationStructureDescriptor) SizeAndAlign {
        return objc.msgSend(_self, "heapAccelerationStructureSizeAndAlignWithDescriptor:", SizeAndAlign, .{_descriptor});
    }

    pub fn supportsFunctionPointers(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsFunctionPointers", objc.BOOL, .{});
    }

    pub fn supportsFunctionPointersFromRender(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsFunctionPointersFromRender", objc.BOOL, .{});
    }

    pub fn supportsRaytracingFromRender(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsRaytracingFromRender", objc.BOOL, .{});
    }

    pub fn supportsPrimitiveMotionBlur(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsPrimitiveMotionBlur", objc.BOOL, .{});
    }

    pub fn shouldMaximizeConcurrentCompilation(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "shouldMaximizeConcurrentCompilation", objc.BOOL, .{});
    }

    pub fn setShouldMaximizeConcurrentCompilation(_self: *@This(), _shouldMaximizeConcurrentCompilation: objc.BOOL) void {
        return objc.msgSend(_self, "setShouldMaximizeConcurrentCompilation:", void, .{_shouldMaximizeConcurrentCompilation});
    }

    pub fn maximumConcurrentCompilationTaskCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maximumConcurrentCompilationTaskCount", objc.NSUInteger, .{});
    }

    pub fn newResidencySetWithDescriptorError(_self: *@This(), _desc: ?*ResidencySetDescriptor, _error: ?*?*foundation.Error) ?*anyopaque {
        return objc.msgSend(_self, "newResidencySetWithDescriptor:error:", ?*anyopaque, .{ _desc, _error });
    }
};

pub const Timestamp = objc.uint64_t;

/// https://developer.apple.com/documentation/Metal/MTLFence?language=objc
pub const Fence = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLResourceStatePassSampleBufferAttachmentDescriptor?language=objc
pub const ResourceStatePassSampleBufferAttachmentDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLResourceStatePassSampleBufferAttachmentDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn sampleBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "sampleBuffer", ?*anyopaque, .{});
    }

    pub fn setSampleBuffer(_self: *@This(), _sampleBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setSampleBuffer:", void, .{_sampleBuffer});
    }

    pub fn startOfEncoderSampleIndex(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "startOfEncoderSampleIndex", objc.NSUInteger, .{});
    }

    pub fn setStartOfEncoderSampleIndex(_self: *@This(), _startOfEncoderSampleIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setStartOfEncoderSampleIndex:", void, .{_startOfEncoderSampleIndex});
    }

    pub fn endOfEncoderSampleIndex(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "endOfEncoderSampleIndex", objc.NSUInteger, .{});
    }

    pub fn setEndOfEncoderSampleIndex(_self: *@This(), _endOfEncoderSampleIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setEndOfEncoderSampleIndex:", void, .{_endOfEncoderSampleIndex});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLResourceStatePassSampleBufferAttachmentDescriptorArray?language=objc
pub const ResourceStatePassSampleBufferAttachmentDescriptorArray = opaque {
    pub const InternalInfo = objc.ExternClass("MTLResourceStatePassSampleBufferAttachmentDescriptorArray", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn objectAtIndexedSubscript(_self: *@This(), _attachmentIndex: objc.NSUInteger) ?*ResourceStatePassSampleBufferAttachmentDescriptor {
        return objc.msgSend(_self, "objectAtIndexedSubscript:", ?*ResourceStatePassSampleBufferAttachmentDescriptor, .{_attachmentIndex});
    }

    pub fn setObjectAtIndexedSubscript(_self: *@This(), _attachment: ?*ResourceStatePassSampleBufferAttachmentDescriptor, _attachmentIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setObject:atIndexedSubscript:", void, .{ _attachment, _attachmentIndex });
    }
};

/// https://developer.apple.com/documentation/Metal/MTLResourceStatePassDescriptor?language=objc
pub const ResourceStatePassDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLResourceStatePassDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn resourceStatePassDescriptor(_self: *@This()) ?*ResourceStatePassDescriptor {
        return objc.msgSend(_self, "resourceStatePassDescriptor", ?*ResourceStatePassDescriptor, .{});
    }

    pub fn sampleBufferAttachments(_self: *@This()) ?*ResourceStatePassSampleBufferAttachmentDescriptorArray {
        return objc.msgSend(_self, "sampleBufferAttachments", ?*ResourceStatePassSampleBufferAttachmentDescriptorArray, .{});
    }
};

pub const SparseTextureMappingMode = enum(objc.NSUInteger) {
    Map = 0,
    Unmap = 1,
};

pub const MapIndirectArguments = extern struct {
    regionOriginX: objc.uint32_t,
    regionOriginY: objc.uint32_t,
    regionOriginZ: objc.uint32_t,
    regionSizeWidth: objc.uint32_t,
    regionSizeHeight: objc.uint32_t,
    regionSizeDepth: objc.uint32_t,
    mipMapLevel: objc.uint32_t,
    sliceId: objc.uint32_t,
};

/// https://developer.apple.com/documentation/Metal/MTLResourceStateCommandEncoder?language=objc
pub const ResourceStateCommandEncoder = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        CommandEncoder,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn endEncoding(_self: *@This()) void {
        return objc.msgSend(_self, "endEncoding", void, .{});
    }

    pub fn insertDebugSignpost(_self: *@This(), _string: ?*foundation.String) void {
        return objc.msgSend(_self, "insertDebugSignpost:", void, .{_string});
    }

    pub fn pushDebugGroup(_self: *@This(), _string: ?*foundation.String) void {
        return objc.msgSend(_self, "pushDebugGroup:", void, .{_string});
    }

    pub fn popDebugGroup(_self: *@This()) void {
        return objc.msgSend(_self, "popDebugGroup", void, .{});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn updateTextureMappingsModeRegionsMipLevelsSlicesNumRegions(
        _self: *@This(),
        _texture: ?*anyopaque,
        _mode: SparseTextureMappingMode,
        _regions: ?*Region,
        _mipLevels: ?*objc.NSUInteger,
        _slices: ?*objc.NSUInteger,
        _numRegions: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "updateTextureMappings:mode:regions:mipLevels:slices:numRegions:", void, .{
            _texture,
            _mode,
            _regions,
            _mipLevels,
            _slices,
            _numRegions,
        });
    }

    pub fn updateTextureMappingModeRegionMipLevelSlice(
        _self: *@This(),
        _texture: ?*anyopaque,
        _mode: SparseTextureMappingMode,
        _region: Region,
        _mipLevel: objc.NSUInteger,
        _slice: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "updateTextureMapping:mode:region:mipLevel:slice:", void, .{
            _texture,
            _mode,
            _region,
            _mipLevel,
            _slice,
        });
    }

    pub fn updateTextureMappingModeIndirectBufferIndirectBufferOffset(
        _self: *@This(),
        _texture: ?*anyopaque,
        _mode: SparseTextureMappingMode,
        _indirectBuffer: ?*anyopaque,
        _indirectBufferOffset: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "updateTextureMapping:mode:indirectBuffer:indirectBufferOffset:", void, .{
            _texture,
            _mode,
            _indirectBuffer,
            _indirectBufferOffset,
        });
    }

    pub fn updateFence(_self: *@This(), _fence: ?*anyopaque) void {
        return objc.msgSend(_self, "updateFence:", void, .{_fence});
    }

    pub fn waitForFence(_self: *@This(), _fence: ?*anyopaque) void {
        return objc.msgSend(_self, "waitForFence:", void, .{_fence});
    }

    pub fn moveTextureMappingsFromTextureSourceSliceSourceLevelSourceOriginSourceSizeToTextureDestinationSliceDestinationLevelDestinationOrigin(
        _self: *@This(),
        _sourceTexture: ?*anyopaque,
        _sourceSlice: objc.NSUInteger,
        _sourceLevel: objc.NSUInteger,
        _sourceOrigin: Origin,
        _sourceSize: Size,
        _destinationTexture: ?*anyopaque,
        _destinationSlice: objc.NSUInteger,
        _destinationLevel: objc.NSUInteger,
        _destinationOrigin: Origin,
    ) void {
        return objc.msgSend(_self, "moveTextureMappingsFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", void, .{
            _sourceTexture,
            _sourceSlice,
            _sourceLevel,
            _sourceOrigin,
            _sourceSize,
            _destinationTexture,
            _destinationSlice,
            _destinationLevel,
            _destinationOrigin,
        });
    }
};

pub const ClearColor = extern struct {
    red: f64,
    green: f64,
    blue: f64,
    alpha: f64,
};

extern "Metal" fn MTLClearColorMake(
    red: f64,
    green: f64,
    blue: f64,
    alpha: f64,
) callconv(.C) ClearColor;
pub const clearColorMake = MTLClearColorMake;

pub const LoadAction = enum(objc.NSUInteger) {
    DontCare = 0,
    Load = 1,
    Clear = 2,
};

pub const StoreAction = enum(objc.NSUInteger) {
    DontCare = 0,
    Store = 1,
    MultisampleResolve = 2,
    StoreAndMultisampleResolve = 3,
    Unknown = 4,
    CustomSampleDepthStore = 5,
};

pub const StoreActionOptions = enum(objc.NSUInteger) {
    None = 0,
    CustomSamplePositions = 1,
};

/// https://developer.apple.com/documentation/Metal/MTLRenderPassAttachmentDescriptor?language=objc
pub const RenderPassAttachmentDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLRenderPassAttachmentDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn texture(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "texture", ?*anyopaque, .{});
    }

    pub fn setTexture(_self: *@This(), _texture: ?*anyopaque) void {
        return objc.msgSend(_self, "setTexture:", void, .{_texture});
    }

    pub fn level(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "level", objc.NSUInteger, .{});
    }

    pub fn setLevel(_self: *@This(), _level: objc.NSUInteger) void {
        return objc.msgSend(_self, "setLevel:", void, .{_level});
    }

    pub fn slice(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "slice", objc.NSUInteger, .{});
    }

    pub fn setSlice(_self: *@This(), _slice: objc.NSUInteger) void {
        return objc.msgSend(_self, "setSlice:", void, .{_slice});
    }

    pub fn depthPlane(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "depthPlane", objc.NSUInteger, .{});
    }

    pub fn setDepthPlane(_self: *@This(), _depthPlane: objc.NSUInteger) void {
        return objc.msgSend(_self, "setDepthPlane:", void, .{_depthPlane});
    }

    pub fn resolveTexture(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "resolveTexture", ?*anyopaque, .{});
    }

    pub fn setResolveTexture(_self: *@This(), _resolveTexture: ?*anyopaque) void {
        return objc.msgSend(_self, "setResolveTexture:", void, .{_resolveTexture});
    }

    pub fn resolveLevel(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "resolveLevel", objc.NSUInteger, .{});
    }

    pub fn setResolveLevel(_self: *@This(), _resolveLevel: objc.NSUInteger) void {
        return objc.msgSend(_self, "setResolveLevel:", void, .{_resolveLevel});
    }

    pub fn resolveSlice(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "resolveSlice", objc.NSUInteger, .{});
    }

    pub fn setResolveSlice(_self: *@This(), _resolveSlice: objc.NSUInteger) void {
        return objc.msgSend(_self, "setResolveSlice:", void, .{_resolveSlice});
    }

    pub fn resolveDepthPlane(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "resolveDepthPlane", objc.NSUInteger, .{});
    }

    pub fn setResolveDepthPlane(_self: *@This(), _resolveDepthPlane: objc.NSUInteger) void {
        return objc.msgSend(_self, "setResolveDepthPlane:", void, .{_resolveDepthPlane});
    }

    pub fn loadAction(_self: *@This()) LoadAction {
        return objc.msgSend(_self, "loadAction", LoadAction, .{});
    }

    pub fn setLoadAction(_self: *@This(), _loadAction: LoadAction) void {
        return objc.msgSend(_self, "setLoadAction:", void, .{_loadAction});
    }

    pub fn storeAction(_self: *@This()) StoreAction {
        return objc.msgSend(_self, "storeAction", StoreAction, .{});
    }

    pub fn setStoreAction(_self: *@This(), _storeAction: StoreAction) void {
        return objc.msgSend(_self, "setStoreAction:", void, .{_storeAction});
    }

    pub fn storeActionOptions(_self: *@This()) StoreActionOptions {
        return objc.msgSend(_self, "storeActionOptions", StoreActionOptions, .{});
    }

    pub fn setStoreActionOptions(_self: *@This(), _storeActionOptions: StoreActionOptions) void {
        return objc.msgSend(_self, "setStoreActionOptions:", void, .{_storeActionOptions});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLRenderPassColorAttachmentDescriptor?language=objc
pub const RenderPassColorAttachmentDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLRenderPassColorAttachmentDescriptor", @This(), RenderPassAttachmentDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn texture(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "texture", ?*anyopaque, .{});
    }

    pub fn setTexture(_self: *@This(), _texture: ?*anyopaque) void {
        return objc.msgSend(_self, "setTexture:", void, .{_texture});
    }

    pub fn level(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "level", objc.NSUInteger, .{});
    }

    pub fn setLevel(_self: *@This(), _level: objc.NSUInteger) void {
        return objc.msgSend(_self, "setLevel:", void, .{_level});
    }

    pub fn slice(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "slice", objc.NSUInteger, .{});
    }

    pub fn setSlice(_self: *@This(), _slice: objc.NSUInteger) void {
        return objc.msgSend(_self, "setSlice:", void, .{_slice});
    }

    pub fn depthPlane(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "depthPlane", objc.NSUInteger, .{});
    }

    pub fn setDepthPlane(_self: *@This(), _depthPlane: objc.NSUInteger) void {
        return objc.msgSend(_self, "setDepthPlane:", void, .{_depthPlane});
    }

    pub fn resolveTexture(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "resolveTexture", ?*anyopaque, .{});
    }

    pub fn setResolveTexture(_self: *@This(), _resolveTexture: ?*anyopaque) void {
        return objc.msgSend(_self, "setResolveTexture:", void, .{_resolveTexture});
    }

    pub fn resolveLevel(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "resolveLevel", objc.NSUInteger, .{});
    }

    pub fn setResolveLevel(_self: *@This(), _resolveLevel: objc.NSUInteger) void {
        return objc.msgSend(_self, "setResolveLevel:", void, .{_resolveLevel});
    }

    pub fn resolveSlice(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "resolveSlice", objc.NSUInteger, .{});
    }

    pub fn setResolveSlice(_self: *@This(), _resolveSlice: objc.NSUInteger) void {
        return objc.msgSend(_self, "setResolveSlice:", void, .{_resolveSlice});
    }

    pub fn resolveDepthPlane(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "resolveDepthPlane", objc.NSUInteger, .{});
    }

    pub fn setResolveDepthPlane(_self: *@This(), _resolveDepthPlane: objc.NSUInteger) void {
        return objc.msgSend(_self, "setResolveDepthPlane:", void, .{_resolveDepthPlane});
    }

    pub fn loadAction(_self: *@This()) LoadAction {
        return objc.msgSend(_self, "loadAction", LoadAction, .{});
    }

    pub fn setLoadAction(_self: *@This(), _loadAction: LoadAction) void {
        return objc.msgSend(_self, "setLoadAction:", void, .{_loadAction});
    }

    pub fn storeAction(_self: *@This()) StoreAction {
        return objc.msgSend(_self, "storeAction", StoreAction, .{});
    }

    pub fn setStoreAction(_self: *@This(), _storeAction: StoreAction) void {
        return objc.msgSend(_self, "setStoreAction:", void, .{_storeAction});
    }

    pub fn storeActionOptions(_self: *@This()) StoreActionOptions {
        return objc.msgSend(_self, "storeActionOptions", StoreActionOptions, .{});
    }

    pub fn setStoreActionOptions(_self: *@This(), _storeActionOptions: StoreActionOptions) void {
        return objc.msgSend(_self, "setStoreActionOptions:", void, .{_storeActionOptions});
    }

    pub fn clearColor(_self: *@This()) ClearColor {
        return objc.msgSend(_self, "clearColor", ClearColor, .{});
    }

    pub fn setClearColor(_self: *@This(), _clearColor: ClearColor) void {
        return objc.msgSend(_self, "setClearColor:", void, .{_clearColor});
    }
};

pub const MultisampleDepthResolveFilter = enum(objc.NSUInteger) {
    Sample0 = 0,
    Min = 1,
    Max = 2,
};

/// https://developer.apple.com/documentation/Metal/MTLRenderPassDepthAttachmentDescriptor?language=objc
pub const RenderPassDepthAttachmentDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLRenderPassDepthAttachmentDescriptor", @This(), RenderPassAttachmentDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn texture(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "texture", ?*anyopaque, .{});
    }

    pub fn setTexture(_self: *@This(), _texture: ?*anyopaque) void {
        return objc.msgSend(_self, "setTexture:", void, .{_texture});
    }

    pub fn level(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "level", objc.NSUInteger, .{});
    }

    pub fn setLevel(_self: *@This(), _level: objc.NSUInteger) void {
        return objc.msgSend(_self, "setLevel:", void, .{_level});
    }

    pub fn slice(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "slice", objc.NSUInteger, .{});
    }

    pub fn setSlice(_self: *@This(), _slice: objc.NSUInteger) void {
        return objc.msgSend(_self, "setSlice:", void, .{_slice});
    }

    pub fn depthPlane(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "depthPlane", objc.NSUInteger, .{});
    }

    pub fn setDepthPlane(_self: *@This(), _depthPlane: objc.NSUInteger) void {
        return objc.msgSend(_self, "setDepthPlane:", void, .{_depthPlane});
    }

    pub fn resolveTexture(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "resolveTexture", ?*anyopaque, .{});
    }

    pub fn setResolveTexture(_self: *@This(), _resolveTexture: ?*anyopaque) void {
        return objc.msgSend(_self, "setResolveTexture:", void, .{_resolveTexture});
    }

    pub fn resolveLevel(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "resolveLevel", objc.NSUInteger, .{});
    }

    pub fn setResolveLevel(_self: *@This(), _resolveLevel: objc.NSUInteger) void {
        return objc.msgSend(_self, "setResolveLevel:", void, .{_resolveLevel});
    }

    pub fn resolveSlice(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "resolveSlice", objc.NSUInteger, .{});
    }

    pub fn setResolveSlice(_self: *@This(), _resolveSlice: objc.NSUInteger) void {
        return objc.msgSend(_self, "setResolveSlice:", void, .{_resolveSlice});
    }

    pub fn resolveDepthPlane(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "resolveDepthPlane", objc.NSUInteger, .{});
    }

    pub fn setResolveDepthPlane(_self: *@This(), _resolveDepthPlane: objc.NSUInteger) void {
        return objc.msgSend(_self, "setResolveDepthPlane:", void, .{_resolveDepthPlane});
    }

    pub fn loadAction(_self: *@This()) LoadAction {
        return objc.msgSend(_self, "loadAction", LoadAction, .{});
    }

    pub fn setLoadAction(_self: *@This(), _loadAction: LoadAction) void {
        return objc.msgSend(_self, "setLoadAction:", void, .{_loadAction});
    }

    pub fn storeAction(_self: *@This()) StoreAction {
        return objc.msgSend(_self, "storeAction", StoreAction, .{});
    }

    pub fn setStoreAction(_self: *@This(), _storeAction: StoreAction) void {
        return objc.msgSend(_self, "setStoreAction:", void, .{_storeAction});
    }

    pub fn storeActionOptions(_self: *@This()) StoreActionOptions {
        return objc.msgSend(_self, "storeActionOptions", StoreActionOptions, .{});
    }

    pub fn setStoreActionOptions(_self: *@This(), _storeActionOptions: StoreActionOptions) void {
        return objc.msgSend(_self, "setStoreActionOptions:", void, .{_storeActionOptions});
    }

    pub fn clearDepth(_self: *@This()) f64 {
        return objc.msgSend(_self, "clearDepth", f64, .{});
    }

    pub fn setClearDepth(_self: *@This(), _clearDepth: f64) void {
        return objc.msgSend(_self, "setClearDepth:", void, .{_clearDepth});
    }

    pub fn depthResolveFilter(_self: *@This()) MultisampleDepthResolveFilter {
        return objc.msgSend(_self, "depthResolveFilter", MultisampleDepthResolveFilter, .{});
    }

    pub fn setDepthResolveFilter(_self: *@This(), _depthResolveFilter: MultisampleDepthResolveFilter) void {
        return objc.msgSend(_self, "setDepthResolveFilter:", void, .{_depthResolveFilter});
    }
};

pub const MultisampleStencilResolveFilter = enum(objc.NSUInteger) {
    Sample0 = 0,
    DepthResolvedSample = 1,
};

/// https://developer.apple.com/documentation/Metal/MTLRenderPassStencilAttachmentDescriptor?language=objc
pub const RenderPassStencilAttachmentDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLRenderPassStencilAttachmentDescriptor", @This(), RenderPassAttachmentDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn texture(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "texture", ?*anyopaque, .{});
    }

    pub fn setTexture(_self: *@This(), _texture: ?*anyopaque) void {
        return objc.msgSend(_self, "setTexture:", void, .{_texture});
    }

    pub fn level(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "level", objc.NSUInteger, .{});
    }

    pub fn setLevel(_self: *@This(), _level: objc.NSUInteger) void {
        return objc.msgSend(_self, "setLevel:", void, .{_level});
    }

    pub fn slice(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "slice", objc.NSUInteger, .{});
    }

    pub fn setSlice(_self: *@This(), _slice: objc.NSUInteger) void {
        return objc.msgSend(_self, "setSlice:", void, .{_slice});
    }

    pub fn depthPlane(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "depthPlane", objc.NSUInteger, .{});
    }

    pub fn setDepthPlane(_self: *@This(), _depthPlane: objc.NSUInteger) void {
        return objc.msgSend(_self, "setDepthPlane:", void, .{_depthPlane});
    }

    pub fn resolveTexture(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "resolveTexture", ?*anyopaque, .{});
    }

    pub fn setResolveTexture(_self: *@This(), _resolveTexture: ?*anyopaque) void {
        return objc.msgSend(_self, "setResolveTexture:", void, .{_resolveTexture});
    }

    pub fn resolveLevel(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "resolveLevel", objc.NSUInteger, .{});
    }

    pub fn setResolveLevel(_self: *@This(), _resolveLevel: objc.NSUInteger) void {
        return objc.msgSend(_self, "setResolveLevel:", void, .{_resolveLevel});
    }

    pub fn resolveSlice(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "resolveSlice", objc.NSUInteger, .{});
    }

    pub fn setResolveSlice(_self: *@This(), _resolveSlice: objc.NSUInteger) void {
        return objc.msgSend(_self, "setResolveSlice:", void, .{_resolveSlice});
    }

    pub fn resolveDepthPlane(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "resolveDepthPlane", objc.NSUInteger, .{});
    }

    pub fn setResolveDepthPlane(_self: *@This(), _resolveDepthPlane: objc.NSUInteger) void {
        return objc.msgSend(_self, "setResolveDepthPlane:", void, .{_resolveDepthPlane});
    }

    pub fn loadAction(_self: *@This()) LoadAction {
        return objc.msgSend(_self, "loadAction", LoadAction, .{});
    }

    pub fn setLoadAction(_self: *@This(), _loadAction: LoadAction) void {
        return objc.msgSend(_self, "setLoadAction:", void, .{_loadAction});
    }

    pub fn storeAction(_self: *@This()) StoreAction {
        return objc.msgSend(_self, "storeAction", StoreAction, .{});
    }

    pub fn setStoreAction(_self: *@This(), _storeAction: StoreAction) void {
        return objc.msgSend(_self, "setStoreAction:", void, .{_storeAction});
    }

    pub fn storeActionOptions(_self: *@This()) StoreActionOptions {
        return objc.msgSend(_self, "storeActionOptions", StoreActionOptions, .{});
    }

    pub fn setStoreActionOptions(_self: *@This(), _storeActionOptions: StoreActionOptions) void {
        return objc.msgSend(_self, "setStoreActionOptions:", void, .{_storeActionOptions});
    }

    pub fn clearStencil(_self: *@This()) objc.uint32_t {
        return objc.msgSend(_self, "clearStencil", objc.uint32_t, .{});
    }

    pub fn setClearStencil(_self: *@This(), _clearStencil: objc.uint32_t) void {
        return objc.msgSend(_self, "setClearStencil:", void, .{_clearStencil});
    }

    pub fn stencilResolveFilter(_self: *@This()) MultisampleStencilResolveFilter {
        return objc.msgSend(_self, "stencilResolveFilter", MultisampleStencilResolveFilter, .{});
    }

    pub fn setStencilResolveFilter(_self: *@This(), _stencilResolveFilter: MultisampleStencilResolveFilter) void {
        return objc.msgSend(_self, "setStencilResolveFilter:", void, .{_stencilResolveFilter});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLRenderPassColorAttachmentDescriptorArray?language=objc
pub const RenderPassColorAttachmentDescriptorArray = opaque {
    pub const InternalInfo = objc.ExternClass("MTLRenderPassColorAttachmentDescriptorArray", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn objectAtIndexedSubscript(_self: *@This(), _attachmentIndex: objc.NSUInteger) ?*RenderPassColorAttachmentDescriptor {
        return objc.msgSend(_self, "objectAtIndexedSubscript:", ?*RenderPassColorAttachmentDescriptor, .{_attachmentIndex});
    }

    pub fn setObjectAtIndexedSubscript(_self: *@This(), _attachment: ?*RenderPassColorAttachmentDescriptor, _attachmentIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setObject:atIndexedSubscript:", void, .{ _attachment, _attachmentIndex });
    }
};

/// https://developer.apple.com/documentation/Metal/MTLRenderPassSampleBufferAttachmentDescriptor?language=objc
pub const RenderPassSampleBufferAttachmentDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLRenderPassSampleBufferAttachmentDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn sampleBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "sampleBuffer", ?*anyopaque, .{});
    }

    pub fn setSampleBuffer(_self: *@This(), _sampleBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setSampleBuffer:", void, .{_sampleBuffer});
    }

    pub fn startOfVertexSampleIndex(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "startOfVertexSampleIndex", objc.NSUInteger, .{});
    }

    pub fn setStartOfVertexSampleIndex(_self: *@This(), _startOfVertexSampleIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setStartOfVertexSampleIndex:", void, .{_startOfVertexSampleIndex});
    }

    pub fn endOfVertexSampleIndex(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "endOfVertexSampleIndex", objc.NSUInteger, .{});
    }

    pub fn setEndOfVertexSampleIndex(_self: *@This(), _endOfVertexSampleIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setEndOfVertexSampleIndex:", void, .{_endOfVertexSampleIndex});
    }

    pub fn startOfFragmentSampleIndex(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "startOfFragmentSampleIndex", objc.NSUInteger, .{});
    }

    pub fn setStartOfFragmentSampleIndex(_self: *@This(), _startOfFragmentSampleIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setStartOfFragmentSampleIndex:", void, .{_startOfFragmentSampleIndex});
    }

    pub fn endOfFragmentSampleIndex(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "endOfFragmentSampleIndex", objc.NSUInteger, .{});
    }

    pub fn setEndOfFragmentSampleIndex(_self: *@This(), _endOfFragmentSampleIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setEndOfFragmentSampleIndex:", void, .{_endOfFragmentSampleIndex});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLRenderPassSampleBufferAttachmentDescriptorArray?language=objc
pub const RenderPassSampleBufferAttachmentDescriptorArray = opaque {
    pub const InternalInfo = objc.ExternClass("MTLRenderPassSampleBufferAttachmentDescriptorArray", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn objectAtIndexedSubscript(_self: *@This(), _attachmentIndex: objc.NSUInteger) ?*RenderPassSampleBufferAttachmentDescriptor {
        return objc.msgSend(_self, "objectAtIndexedSubscript:", ?*RenderPassSampleBufferAttachmentDescriptor, .{_attachmentIndex});
    }

    pub fn setObjectAtIndexedSubscript(_self: *@This(), _attachment: ?*RenderPassSampleBufferAttachmentDescriptor, _attachmentIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setObject:atIndexedSubscript:", void, .{ _attachment, _attachmentIndex });
    }
};

/// https://developer.apple.com/documentation/Metal/MTLRenderPassDescriptor?language=objc
pub const RenderPassDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLRenderPassDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn renderPassDescriptor(_self: *@This()) ?*RenderPassDescriptor {
        return objc.msgSend(_self, "renderPassDescriptor", ?*RenderPassDescriptor, .{});
    }

    pub fn setSamplePositionsCount(_self: *@This(), _positions: ?*SamplePosition, _count: objc.NSUInteger) void {
        return objc.msgSend(_self, "setSamplePositions:count:", void, .{ _positions, _count });
    }

    pub fn getSamplePositionsCount(_self: *@This(), _positions: ?*SamplePosition, _count: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(_self, "getSamplePositions:count:", objc.NSUInteger, .{ _positions, _count });
    }

    pub fn colorAttachments(_self: *@This()) ?*RenderPassColorAttachmentDescriptorArray {
        return objc.msgSend(_self, "colorAttachments", ?*RenderPassColorAttachmentDescriptorArray, .{});
    }

    pub fn depthAttachment(_self: *@This()) ?*RenderPassDepthAttachmentDescriptor {
        return objc.msgSend(_self, "depthAttachment", ?*RenderPassDepthAttachmentDescriptor, .{});
    }

    pub fn setDepthAttachment(_self: *@This(), _depthAttachment: ?*RenderPassDepthAttachmentDescriptor) void {
        return objc.msgSend(_self, "setDepthAttachment:", void, .{_depthAttachment});
    }

    pub fn stencilAttachment(_self: *@This()) ?*RenderPassStencilAttachmentDescriptor {
        return objc.msgSend(_self, "stencilAttachment", ?*RenderPassStencilAttachmentDescriptor, .{});
    }

    pub fn setStencilAttachment(_self: *@This(), _stencilAttachment: ?*RenderPassStencilAttachmentDescriptor) void {
        return objc.msgSend(_self, "setStencilAttachment:", void, .{_stencilAttachment});
    }

    pub fn visibilityResultBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "visibilityResultBuffer", ?*anyopaque, .{});
    }

    pub fn setVisibilityResultBuffer(_self: *@This(), _visibilityResultBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setVisibilityResultBuffer:", void, .{_visibilityResultBuffer});
    }

    pub fn renderTargetArrayLength(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "renderTargetArrayLength", objc.NSUInteger, .{});
    }

    pub fn setRenderTargetArrayLength(_self: *@This(), _renderTargetArrayLength: objc.NSUInteger) void {
        return objc.msgSend(_self, "setRenderTargetArrayLength:", void, .{_renderTargetArrayLength});
    }

    pub fn imageblockSampleLength(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "imageblockSampleLength", objc.NSUInteger, .{});
    }

    pub fn setImageblockSampleLength(_self: *@This(), _imageblockSampleLength: objc.NSUInteger) void {
        return objc.msgSend(_self, "setImageblockSampleLength:", void, .{_imageblockSampleLength});
    }

    pub fn threadgroupMemoryLength(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "threadgroupMemoryLength", objc.NSUInteger, .{});
    }

    pub fn setThreadgroupMemoryLength(_self: *@This(), _threadgroupMemoryLength: objc.NSUInteger) void {
        return objc.msgSend(_self, "setThreadgroupMemoryLength:", void, .{_threadgroupMemoryLength});
    }

    pub fn tileWidth(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "tileWidth", objc.NSUInteger, .{});
    }

    pub fn setTileWidth(_self: *@This(), _tileWidth: objc.NSUInteger) void {
        return objc.msgSend(_self, "setTileWidth:", void, .{_tileWidth});
    }

    pub fn tileHeight(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "tileHeight", objc.NSUInteger, .{});
    }

    pub fn setTileHeight(_self: *@This(), _tileHeight: objc.NSUInteger) void {
        return objc.msgSend(_self, "setTileHeight:", void, .{_tileHeight});
    }

    pub fn defaultRasterSampleCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "defaultRasterSampleCount", objc.NSUInteger, .{});
    }

    pub fn setDefaultRasterSampleCount(_self: *@This(), _defaultRasterSampleCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setDefaultRasterSampleCount:", void, .{_defaultRasterSampleCount});
    }

    pub fn renderTargetWidth(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "renderTargetWidth", objc.NSUInteger, .{});
    }

    pub fn setRenderTargetWidth(_self: *@This(), _renderTargetWidth: objc.NSUInteger) void {
        return objc.msgSend(_self, "setRenderTargetWidth:", void, .{_renderTargetWidth});
    }

    pub fn renderTargetHeight(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "renderTargetHeight", objc.NSUInteger, .{});
    }

    pub fn setRenderTargetHeight(_self: *@This(), _renderTargetHeight: objc.NSUInteger) void {
        return objc.msgSend(_self, "setRenderTargetHeight:", void, .{_renderTargetHeight});
    }

    pub fn rasterizationRateMap(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "rasterizationRateMap", ?*anyopaque, .{});
    }

    pub fn setRasterizationRateMap(_self: *@This(), _rasterizationRateMap: ?*anyopaque) void {
        return objc.msgSend(_self, "setRasterizationRateMap:", void, .{_rasterizationRateMap});
    }

    pub fn sampleBufferAttachments(_self: *@This()) ?*RenderPassSampleBufferAttachmentDescriptorArray {
        return objc.msgSend(_self, "sampleBufferAttachments", ?*RenderPassSampleBufferAttachmentDescriptorArray, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLBlitPassSampleBufferAttachmentDescriptor?language=objc
pub const BlitPassSampleBufferAttachmentDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLBlitPassSampleBufferAttachmentDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn sampleBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "sampleBuffer", ?*anyopaque, .{});
    }

    pub fn setSampleBuffer(_self: *@This(), _sampleBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setSampleBuffer:", void, .{_sampleBuffer});
    }

    pub fn startOfEncoderSampleIndex(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "startOfEncoderSampleIndex", objc.NSUInteger, .{});
    }

    pub fn setStartOfEncoderSampleIndex(_self: *@This(), _startOfEncoderSampleIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setStartOfEncoderSampleIndex:", void, .{_startOfEncoderSampleIndex});
    }

    pub fn endOfEncoderSampleIndex(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "endOfEncoderSampleIndex", objc.NSUInteger, .{});
    }

    pub fn setEndOfEncoderSampleIndex(_self: *@This(), _endOfEncoderSampleIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setEndOfEncoderSampleIndex:", void, .{_endOfEncoderSampleIndex});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLBlitPassSampleBufferAttachmentDescriptorArray?language=objc
pub const BlitPassSampleBufferAttachmentDescriptorArray = opaque {
    pub const InternalInfo = objc.ExternClass("MTLBlitPassSampleBufferAttachmentDescriptorArray", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn objectAtIndexedSubscript(_self: *@This(), _attachmentIndex: objc.NSUInteger) ?*BlitPassSampleBufferAttachmentDescriptor {
        return objc.msgSend(_self, "objectAtIndexedSubscript:", ?*BlitPassSampleBufferAttachmentDescriptor, .{_attachmentIndex});
    }

    pub fn setObjectAtIndexedSubscript(_self: *@This(), _attachment: ?*BlitPassSampleBufferAttachmentDescriptor, _attachmentIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setObject:atIndexedSubscript:", void, .{ _attachment, _attachmentIndex });
    }
};

/// https://developer.apple.com/documentation/Metal/MTLBlitPassDescriptor?language=objc
pub const BlitPassDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLBlitPassDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn blitPassDescriptor(_self: *@This()) ?*BlitPassDescriptor {
        return objc.msgSend(_self, "blitPassDescriptor", ?*BlitPassDescriptor, .{});
    }

    pub fn sampleBufferAttachments(_self: *@This()) ?*BlitPassSampleBufferAttachmentDescriptorArray {
        return objc.msgSend(_self, "sampleBufferAttachments", ?*BlitPassSampleBufferAttachmentDescriptorArray, .{});
    }
};

pub const BlitOption = enum(objc.NSUInteger) {
    None = 0,
    DepthFromDepthStencil = 1,
    StencilFromDepthStencil = 2,
    RowLinearPVRTC = 4,
};

/// https://developer.apple.com/documentation/Metal/MTLBlitCommandEncoder?language=objc
pub const BlitCommandEncoder = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        CommandEncoder,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn endEncoding(_self: *@This()) void {
        return objc.msgSend(_self, "endEncoding", void, .{});
    }

    pub fn insertDebugSignpost(_self: *@This(), _string: ?*foundation.String) void {
        return objc.msgSend(_self, "insertDebugSignpost:", void, .{_string});
    }

    pub fn pushDebugGroup(_self: *@This(), _string: ?*foundation.String) void {
        return objc.msgSend(_self, "pushDebugGroup:", void, .{_string});
    }

    pub fn popDebugGroup(_self: *@This()) void {
        return objc.msgSend(_self, "popDebugGroup", void, .{});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn synchronizeResource(_self: *@This(), _resource: ?*anyopaque) void {
        return objc.msgSend(_self, "synchronizeResource:", void, .{_resource});
    }

    pub fn synchronizeTextureSliceLevel(_self: *@This(), _texture: ?*anyopaque, _slice: objc.NSUInteger, _level: objc.NSUInteger) void {
        return objc.msgSend(_self, "synchronizeTexture:slice:level:", void, .{ _texture, _slice, _level });
    }

    pub fn copyFromTextureSourceSliceSourceLevelSourceOriginSourceSizeToTextureDestinationSliceDestinationLevelDestinationOrigin(
        _self: *@This(),
        _sourceTexture: ?*anyopaque,
        _sourceSlice: objc.NSUInteger,
        _sourceLevel: objc.NSUInteger,
        _sourceOrigin: Origin,
        _sourceSize: Size,
        _destinationTexture: ?*anyopaque,
        _destinationSlice: objc.NSUInteger,
        _destinationLevel: objc.NSUInteger,
        _destinationOrigin: Origin,
    ) void {
        return objc.msgSend(_self, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", void, .{
            _sourceTexture,
            _sourceSlice,
            _sourceLevel,
            _sourceOrigin,
            _sourceSize,
            _destinationTexture,
            _destinationSlice,
            _destinationLevel,
            _destinationOrigin,
        });
    }

    pub fn copyFromBufferSourceOffsetSourceBytesPerRowSourceBytesPerImageSourceSizeToTextureDestinationSliceDestinationLevelDestinationOrigin(
        _self: *@This(),
        _sourceBuffer: ?*anyopaque,
        _sourceOffset: objc.NSUInteger,
        _sourceBytesPerRow: objc.NSUInteger,
        _sourceBytesPerImage: objc.NSUInteger,
        _sourceSize: Size,
        _destinationTexture: ?*anyopaque,
        _destinationSlice: objc.NSUInteger,
        _destinationLevel: objc.NSUInteger,
        _destinationOrigin: Origin,
    ) void {
        return objc.msgSend(_self, "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", void, .{
            _sourceBuffer,
            _sourceOffset,
            _sourceBytesPerRow,
            _sourceBytesPerImage,
            _sourceSize,
            _destinationTexture,
            _destinationSlice,
            _destinationLevel,
            _destinationOrigin,
        });
    }

    pub fn copyFromBufferSourceOffsetSourceBytesPerRowSourceBytesPerImageSourceSizeToTextureDestinationSliceDestinationLevelDestinationOriginOptions(
        _self: *@This(),
        _sourceBuffer: ?*anyopaque,
        _sourceOffset: objc.NSUInteger,
        _sourceBytesPerRow: objc.NSUInteger,
        _sourceBytesPerImage: objc.NSUInteger,
        _sourceSize: Size,
        _destinationTexture: ?*anyopaque,
        _destinationSlice: objc.NSUInteger,
        _destinationLevel: objc.NSUInteger,
        _destinationOrigin: Origin,
        _options: BlitOption,
    ) void {
        return objc.msgSend(_self, "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:", void, .{
            _sourceBuffer,
            _sourceOffset,
            _sourceBytesPerRow,
            _sourceBytesPerImage,
            _sourceSize,
            _destinationTexture,
            _destinationSlice,
            _destinationLevel,
            _destinationOrigin,
            _options,
        });
    }

    pub fn copyFromTextureSourceSliceSourceLevelSourceOriginSourceSizeToBufferDestinationOffsetDestinationBytesPerRowDestinationBytesPerImage(
        _self: *@This(),
        _sourceTexture: ?*anyopaque,
        _sourceSlice: objc.NSUInteger,
        _sourceLevel: objc.NSUInteger,
        _sourceOrigin: Origin,
        _sourceSize: Size,
        _destinationBuffer: ?*anyopaque,
        _destinationOffset: objc.NSUInteger,
        _destinationBytesPerRow: objc.NSUInteger,
        _destinationBytesPerImage: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:", void, .{
            _sourceTexture,
            _sourceSlice,
            _sourceLevel,
            _sourceOrigin,
            _sourceSize,
            _destinationBuffer,
            _destinationOffset,
            _destinationBytesPerRow,
            _destinationBytesPerImage,
        });
    }

    pub fn copyFromTextureSourceSliceSourceLevelSourceOriginSourceSizeToBufferDestinationOffsetDestinationBytesPerRowDestinationBytesPerImageOptions(
        _self: *@This(),
        _sourceTexture: ?*anyopaque,
        _sourceSlice: objc.NSUInteger,
        _sourceLevel: objc.NSUInteger,
        _sourceOrigin: Origin,
        _sourceSize: Size,
        _destinationBuffer: ?*anyopaque,
        _destinationOffset: objc.NSUInteger,
        _destinationBytesPerRow: objc.NSUInteger,
        _destinationBytesPerImage: objc.NSUInteger,
        _options: BlitOption,
    ) void {
        return objc.msgSend(_self, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:options:", void, .{
            _sourceTexture,
            _sourceSlice,
            _sourceLevel,
            _sourceOrigin,
            _sourceSize,
            _destinationBuffer,
            _destinationOffset,
            _destinationBytesPerRow,
            _destinationBytesPerImage,
            _options,
        });
    }

    pub fn generateMipmapsForTexture(_self: *@This(), _texture: ?*anyopaque) void {
        return objc.msgSend(_self, "generateMipmapsForTexture:", void, .{_texture});
    }

    pub fn fillBufferRangeValue(_self: *@This(), _buffer: ?*anyopaque, _range: foundation.Range, _value: objc.uint8_t) void {
        return objc.msgSend(_self, "fillBuffer:range:value:", void, .{ _buffer, _range, _value });
    }

    pub fn copyFromTextureSourceSliceSourceLevelToTextureDestinationSliceDestinationLevelSliceCountLevelCount(
        _self: *@This(),
        _sourceTexture: ?*anyopaque,
        _sourceSlice: objc.NSUInteger,
        _sourceLevel: objc.NSUInteger,
        _destinationTexture: ?*anyopaque,
        _destinationSlice: objc.NSUInteger,
        _destinationLevel: objc.NSUInteger,
        _sliceCount: objc.NSUInteger,
        _levelCount: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "copyFromTexture:sourceSlice:sourceLevel:toTexture:destinationSlice:destinationLevel:sliceCount:levelCount:", void, .{
            _sourceTexture,
            _sourceSlice,
            _sourceLevel,
            _destinationTexture,
            _destinationSlice,
            _destinationLevel,
            _sliceCount,
            _levelCount,
        });
    }

    pub fn copyFromTextureToTexture(_self: *@This(), _sourceTexture: ?*anyopaque, _destinationTexture: ?*anyopaque) void {
        return objc.msgSend(_self, "copyFromTexture:toTexture:", void, .{ _sourceTexture, _destinationTexture });
    }

    pub fn copyFromBufferSourceOffsetToBufferDestinationOffsetSize(
        _self: *@This(),
        _sourceBuffer: ?*anyopaque,
        _sourceOffset: objc.NSUInteger,
        _destinationBuffer: ?*anyopaque,
        _destinationOffset: objc.NSUInteger,
        _size: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", void, .{
            _sourceBuffer,
            _sourceOffset,
            _destinationBuffer,
            _destinationOffset,
            _size,
        });
    }

    pub fn updateFence(_self: *@This(), _fence: ?*anyopaque) void {
        return objc.msgSend(_self, "updateFence:", void, .{_fence});
    }

    pub fn waitForFence(_self: *@This(), _fence: ?*anyopaque) void {
        return objc.msgSend(_self, "waitForFence:", void, .{_fence});
    }

    pub fn getTextureAccessCountersRegionMipLevelSliceResetCountersCountersBufferCountersBufferOffset(
        _self: *@This(),
        _texture: ?*anyopaque,
        _region: Region,
        _mipLevel: objc.NSUInteger,
        _slice: objc.NSUInteger,
        _resetCounters: objc.BOOL,
        _countersBuffer: ?*anyopaque,
        _countersBufferOffset: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "getTextureAccessCounters:region:mipLevel:slice:resetCounters:countersBuffer:countersBufferOffset:", void, .{
            _texture,
            _region,
            _mipLevel,
            _slice,
            _resetCounters,
            _countersBuffer,
            _countersBufferOffset,
        });
    }

    pub fn resetTextureAccessCountersRegionMipLevelSlice(
        _self: *@This(),
        _texture: ?*anyopaque,
        _region: Region,
        _mipLevel: objc.NSUInteger,
        _slice: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "resetTextureAccessCounters:region:mipLevel:slice:", void, .{
            _texture,
            _region,
            _mipLevel,
            _slice,
        });
    }

    pub fn optimizeContentsForGPUAccess(_self: *@This(), _texture: ?*anyopaque) void {
        return objc.msgSend(_self, "optimizeContentsForGPUAccess:", void, .{_texture});
    }

    pub fn optimizeContentsForGPUAccessSliceLevel(_self: *@This(), _texture: ?*anyopaque, _slice: objc.NSUInteger, _level: objc.NSUInteger) void {
        return objc.msgSend(_self, "optimizeContentsForGPUAccess:slice:level:", void, .{ _texture, _slice, _level });
    }

    pub fn optimizeContentsForCPUAccess(_self: *@This(), _texture: ?*anyopaque) void {
        return objc.msgSend(_self, "optimizeContentsForCPUAccess:", void, .{_texture});
    }

    pub fn optimizeContentsForCPUAccessSliceLevel(_self: *@This(), _texture: ?*anyopaque, _slice: objc.NSUInteger, _level: objc.NSUInteger) void {
        return objc.msgSend(_self, "optimizeContentsForCPUAccess:slice:level:", void, .{ _texture, _slice, _level });
    }

    pub fn resetCommandsInBufferWithRange(_self: *@This(), _buffer: ?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "resetCommandsInBuffer:withRange:", void, .{ _buffer, _range });
    }

    pub fn copyIndirectCommandBufferSourceRangeDestinationDestinationIndex(
        _self: *@This(),
        _source: ?*anyopaque,
        _sourceRange: foundation.Range,
        _destination: ?*anyopaque,
        _destinationIndex: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "copyIndirectCommandBuffer:sourceRange:destination:destinationIndex:", void, .{
            _source,
            _sourceRange,
            _destination,
            _destinationIndex,
        });
    }

    pub fn optimizeIndirectCommandBufferWithRange(_self: *@This(), _indirectCommandBuffer: ?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "optimizeIndirectCommandBuffer:withRange:", void, .{ _indirectCommandBuffer, _range });
    }

    pub fn sampleCountersInBufferAtSampleIndexWithBarrier(_self: *@This(), _sampleBuffer: ?*anyopaque, _sampleIndex: objc.NSUInteger, _barrier: objc.BOOL) void {
        return objc.msgSend(_self, "sampleCountersInBuffer:atSampleIndex:withBarrier:", void, .{ _sampleBuffer, _sampleIndex, _barrier });
    }

    pub fn resolveCountersInRangeDestinationBufferDestinationOffset(
        _self: *@This(),
        _sampleBuffer: ?*anyopaque,
        _range: foundation.Range,
        _destinationBuffer: ?*anyopaque,
        _destinationOffset: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "resolveCounters:inRange:destinationBuffer:destinationOffset:", void, .{
            _sampleBuffer,
            _range,
            _destinationBuffer,
            _destinationOffset,
        });
    }
};

pub const CommandBufferStatus = enum(objc.NSUInteger) {
    NotEnqueued = 0,
    Enqueued = 1,
    Committed = 2,
    Scheduled = 3,
    Completed = 4,
    Error = 5,
};

pub const CommandBufferError = enum(objc.NSUInteger) {
    None = 0,
    Internal = 1,
    Timeout = 2,
    PageFault = 3,
    Blacklisted = 4,
    AccessRevoked = 4,
    NotPermitted = 7,
    OutOfMemory = 8,
    InvalidResource = 9,
    Memoryless = 10,
    DeviceRemoved = 11,
    StackOverflow = 12,
};

pub const CommandBufferErrorOption = enum(objc.NSUInteger) {
    None = 0,
    EncoderExecutionStatus = 1,
};

pub const CommandEncoderErrorState = enum(objc.NSInteger) {
    Unknown = 0,
    Completed = 1,
    Affected = 2,
    Pending = 3,
    Faulted = 4,
};

/// https://developer.apple.com/documentation/Metal/MTLCommandBufferDescriptor?language=objc
pub const CommandBufferDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLCommandBufferDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn retainedReferences(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainedReferences", objc.BOOL, .{});
    }

    pub fn setRetainedReferences(_self: *@This(), _retainedReferences: objc.BOOL) void {
        return objc.msgSend(_self, "setRetainedReferences:", void, .{_retainedReferences});
    }

    pub fn errorOptions(_self: *@This()) CommandBufferErrorOption {
        return objc.msgSend(_self, "errorOptions", CommandBufferErrorOption, .{});
    }

    pub fn setErrorOptions(_self: *@This(), _errorOptions: CommandBufferErrorOption) void {
        return objc.msgSend(_self, "setErrorOptions:", void, .{_errorOptions});
    }

    pub fn logState(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "logState", ?*anyopaque, .{});
    }

    pub fn setLogState(_self: *@This(), _logState: ?*anyopaque) void {
        return objc.msgSend(_self, "setLogState:", void, .{_logState});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLCommandBufferEncoderInfo?language=objc
pub const CommandBufferEncoderInfo = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn debugSignposts(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "debugSignposts", ?*anyopaque, .{});
    }

    pub fn errorState(_self: *@This()) CommandEncoderErrorState {
        return objc.msgSend(_self, "errorState", CommandEncoderErrorState, .{});
    }
};

pub const CommandBufferHandler = *const fn (?*anyopaque) callconv(.C) void;

pub const DispatchType = enum(objc.NSUInteger) {
    Serial = 0,
    Concurrent = 1,
};

/// https://developer.apple.com/documentation/Metal/MTLCommandBuffer?language=objc
pub const CommandBuffer = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn enqueue(_self: *@This()) void {
        return objc.msgSend(_self, "enqueue", void, .{});
    }

    pub fn commit(_self: *@This()) void {
        return objc.msgSend(_self, "commit", void, .{});
    }

    pub fn addScheduledHandler(_self: *@This(), _block: CommandBufferHandler) void {
        return objc.msgSend(_self, "addScheduledHandler:", void, .{_block});
    }

    pub fn presentDrawable(_self: *@This(), _drawable: ?*anyopaque) void {
        return objc.msgSend(_self, "presentDrawable:", void, .{_drawable});
    }

    pub fn presentDrawableAtTime(_self: *@This(), _drawable: ?*anyopaque, _presentationTime: core_foundation.TimeInterval) void {
        return objc.msgSend(_self, "presentDrawable:atTime:", void, .{ _drawable, _presentationTime });
    }

    pub fn presentDrawableAfterMinimumDuration(_self: *@This(), _drawable: ?*anyopaque, _duration: core_foundation.TimeInterval) void {
        return objc.msgSend(_self, "presentDrawable:afterMinimumDuration:", void, .{ _drawable, _duration });
    }

    pub fn waitUntilScheduled(_self: *@This()) void {
        return objc.msgSend(_self, "waitUntilScheduled", void, .{});
    }

    pub fn addCompletedHandler(_self: *@This(), _block: CommandBufferHandler) void {
        return objc.msgSend(_self, "addCompletedHandler:", void, .{_block});
    }

    pub fn waitUntilCompleted(_self: *@This()) void {
        return objc.msgSend(_self, "waitUntilCompleted", void, .{});
    }

    pub fn blitCommandEncoder(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "blitCommandEncoder", ?*anyopaque, .{});
    }

    pub fn renderCommandEncoderWithDescriptor(_self: *@This(), _renderPassDescriptor: ?*RenderPassDescriptor) ?*anyopaque {
        return objc.msgSend(_self, "renderCommandEncoderWithDescriptor:", ?*anyopaque, .{_renderPassDescriptor});
    }

    pub fn computeCommandEncoderWithDescriptor(_self: *@This(), _computePassDescriptor: ?*ComputePassDescriptor) ?*anyopaque {
        return objc.msgSend(_self, "computeCommandEncoderWithDescriptor:", ?*anyopaque, .{_computePassDescriptor});
    }

    pub fn blitCommandEncoderWithDescriptor(_self: *@This(), _blitPassDescriptor: ?*BlitPassDescriptor) ?*anyopaque {
        return objc.msgSend(_self, "blitCommandEncoderWithDescriptor:", ?*anyopaque, .{_blitPassDescriptor});
    }

    pub fn computeCommandEncoder(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "computeCommandEncoder", ?*anyopaque, .{});
    }

    pub fn computeCommandEncoderWithDispatchType(_self: *@This(), _dispatchType: DispatchType) ?*anyopaque {
        return objc.msgSend(_self, "computeCommandEncoderWithDispatchType:", ?*anyopaque, .{_dispatchType});
    }

    pub fn encodeWaitForEventValue(_self: *@This(), _event: ?*anyopaque, _value: objc.uint64_t) void {
        return objc.msgSend(_self, "encodeWaitForEvent:value:", void, .{ _event, _value });
    }

    pub fn encodeSignalEventValue(_self: *@This(), _event: ?*anyopaque, _value: objc.uint64_t) void {
        return objc.msgSend(_self, "encodeSignalEvent:value:", void, .{ _event, _value });
    }

    pub fn parallelRenderCommandEncoderWithDescriptor(_self: *@This(), _renderPassDescriptor: ?*RenderPassDescriptor) ?*anyopaque {
        return objc.msgSend(_self, "parallelRenderCommandEncoderWithDescriptor:", ?*anyopaque, .{_renderPassDescriptor});
    }

    pub fn resourceStateCommandEncoder(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "resourceStateCommandEncoder", ?*anyopaque, .{});
    }

    pub fn resourceStateCommandEncoderWithDescriptor(_self: *@This(), _resourceStatePassDescriptor: ?*ResourceStatePassDescriptor) ?*anyopaque {
        return objc.msgSend(_self, "resourceStateCommandEncoderWithDescriptor:", ?*anyopaque, .{_resourceStatePassDescriptor});
    }

    pub fn accelerationStructureCommandEncoder(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "accelerationStructureCommandEncoder", ?*anyopaque, .{});
    }

    pub fn accelerationStructureCommandEncoderWithDescriptor(_self: *@This(), _descriptor: ?*AccelerationStructurePassDescriptor) ?*anyopaque {
        return objc.msgSend(_self, "accelerationStructureCommandEncoderWithDescriptor:", ?*anyopaque, .{_descriptor});
    }

    pub fn pushDebugGroup(_self: *@This(), _string: ?*foundation.String) void {
        return objc.msgSend(_self, "pushDebugGroup:", void, .{_string});
    }

    pub fn popDebugGroup(_self: *@This()) void {
        return objc.msgSend(_self, "popDebugGroup", void, .{});
    }

    pub fn useResidencySet(_self: *@This(), _residencySet: ?*anyopaque) void {
        return objc.msgSend(_self, "useResidencySet:", void, .{_residencySet});
    }

    pub fn useResidencySetsCount(_self: *@This(), _residencySets: ?*?*anyopaque, _count: objc.NSUInteger) void {
        return objc.msgSend(_self, "useResidencySets:count:", void, .{ _residencySets, _count });
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn commandQueue(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "commandQueue", ?*anyopaque, .{});
    }

    pub fn retainedReferences(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainedReferences", objc.BOOL, .{});
    }

    pub fn errorOptions(_self: *@This()) CommandBufferErrorOption {
        return objc.msgSend(_self, "errorOptions", CommandBufferErrorOption, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn kernelStartTime(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "kernelStartTime", core_foundation.TimeInterval, .{});
    }

    pub fn kernelEndTime(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "kernelEndTime", core_foundation.TimeInterval, .{});
    }

    pub fn logs(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "logs", ?*anyopaque, .{});
    }

    pub fn gpuStartTime(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "GPUStartTime", core_foundation.TimeInterval, .{});
    }

    pub fn gpuEndTime(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "GPUEndTime", core_foundation.TimeInterval, .{});
    }

    pub fn status(_self: *@This()) CommandBufferStatus {
        return objc.msgSend(_self, "status", CommandBufferStatus, .{});
    }

    pub fn @"error"(_self: *@This()) ?*foundation.Error {
        return objc.msgSend(_self, "error", ?*foundation.Error, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLComputePassSampleBufferAttachmentDescriptor?language=objc
pub const ComputePassSampleBufferAttachmentDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLComputePassSampleBufferAttachmentDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn sampleBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "sampleBuffer", ?*anyopaque, .{});
    }

    pub fn setSampleBuffer(_self: *@This(), _sampleBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setSampleBuffer:", void, .{_sampleBuffer});
    }

    pub fn startOfEncoderSampleIndex(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "startOfEncoderSampleIndex", objc.NSUInteger, .{});
    }

    pub fn setStartOfEncoderSampleIndex(_self: *@This(), _startOfEncoderSampleIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setStartOfEncoderSampleIndex:", void, .{_startOfEncoderSampleIndex});
    }

    pub fn endOfEncoderSampleIndex(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "endOfEncoderSampleIndex", objc.NSUInteger, .{});
    }

    pub fn setEndOfEncoderSampleIndex(_self: *@This(), _endOfEncoderSampleIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setEndOfEncoderSampleIndex:", void, .{_endOfEncoderSampleIndex});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLComputePassSampleBufferAttachmentDescriptorArray?language=objc
pub const ComputePassSampleBufferAttachmentDescriptorArray = opaque {
    pub const InternalInfo = objc.ExternClass("MTLComputePassSampleBufferAttachmentDescriptorArray", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn objectAtIndexedSubscript(_self: *@This(), _attachmentIndex: objc.NSUInteger) ?*ComputePassSampleBufferAttachmentDescriptor {
        return objc.msgSend(_self, "objectAtIndexedSubscript:", ?*ComputePassSampleBufferAttachmentDescriptor, .{_attachmentIndex});
    }

    pub fn setObjectAtIndexedSubscript(_self: *@This(), _attachment: ?*ComputePassSampleBufferAttachmentDescriptor, _attachmentIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setObject:atIndexedSubscript:", void, .{ _attachment, _attachmentIndex });
    }
};

/// https://developer.apple.com/documentation/Metal/MTLComputePassDescriptor?language=objc
pub const ComputePassDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLComputePassDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn computePassDescriptor(_self: *@This()) ?*ComputePassDescriptor {
        return objc.msgSend(_self, "computePassDescriptor", ?*ComputePassDescriptor, .{});
    }

    pub fn dispatchType(_self: *@This()) DispatchType {
        return objc.msgSend(_self, "dispatchType", DispatchType, .{});
    }

    pub fn setDispatchType(_self: *@This(), _dispatchType: DispatchType) void {
        return objc.msgSend(_self, "setDispatchType:", void, .{_dispatchType});
    }

    pub fn sampleBufferAttachments(_self: *@This()) ?*ComputePassSampleBufferAttachmentDescriptorArray {
        return objc.msgSend(_self, "sampleBufferAttachments", ?*ComputePassSampleBufferAttachmentDescriptorArray, .{});
    }
};

pub const DispatchThreadgroupsIndirectArguments = extern struct {
    threadgroupsPerGrid: [3]objc.uint32_t,
};

pub const StageInRegionIndirectArguments = extern struct {
    stageInOrigin: [3]objc.uint32_t,
    stageInSize: [3]objc.uint32_t,
};

/// https://developer.apple.com/documentation/Metal/MTLComputeCommandEncoder?language=objc
pub const ComputeCommandEncoder = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        CommandEncoder,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn endEncoding(_self: *@This()) void {
        return objc.msgSend(_self, "endEncoding", void, .{});
    }

    pub fn insertDebugSignpost(_self: *@This(), _string: ?*foundation.String) void {
        return objc.msgSend(_self, "insertDebugSignpost:", void, .{_string});
    }

    pub fn pushDebugGroup(_self: *@This(), _string: ?*foundation.String) void {
        return objc.msgSend(_self, "pushDebugGroup:", void, .{_string});
    }

    pub fn popDebugGroup(_self: *@This()) void {
        return objc.msgSend(_self, "popDebugGroup", void, .{});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn setComputePipelineState(_self: *@This(), _state: ?*anyopaque) void {
        return objc.msgSend(_self, "setComputePipelineState:", void, .{_state});
    }

    pub fn setBytesLengthAtIndex(_self: *@This(), _bytes: ?*anyopaque, _length: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setBytes:length:atIndex:", void, .{ _bytes, _length, _index });
    }

    pub fn setBufferOffsetAtIndex(_self: *@This(), _buffer: ?*anyopaque, _offset: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setBuffer:offset:atIndex:", void, .{ _buffer, _offset, _index });
    }

    pub fn setBufferOffsetAtIndex(_self: *@This(), _offset: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setBufferOffset:atIndex:", void, .{ _offset, _index });
    }

    pub fn setBuffersOffsetsWithRange(_self: *@This(), _buffers: ?*?*anyopaque, _offsets: ?*objc.NSUInteger, _range: foundation.Range) void {
        return objc.msgSend(_self, "setBuffers:offsets:withRange:", void, .{ _buffers, _offsets, _range });
    }

    pub fn setBufferOffsetAttributeStrideAtIndex(
        _self: *@This(),
        _buffer: ?*anyopaque,
        _offset: objc.NSUInteger,
        _stride: objc.NSUInteger,
        _index: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "setBuffer:offset:attributeStride:atIndex:", void, .{
            _buffer,
            _offset,
            _stride,
            _index,
        });
    }

    pub fn setBuffersOffsetsAttributeStridesWithRange(
        _self: *@This(),
        _buffers: ?*?*anyopaque,
        _offsets: ?*objc.NSUInteger,
        _strides: ?*objc.NSUInteger,
        _range: foundation.Range,
    ) void {
        return objc.msgSend(_self, "setBuffers:offsets:attributeStrides:withRange:", void, .{
            _buffers,
            _offsets,
            _strides,
            _range,
        });
    }

    pub fn setBufferOffsetAttributeStrideAtIndex(_self: *@This(), _offset: objc.NSUInteger, _stride: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setBufferOffset:attributeStride:atIndex:", void, .{ _offset, _stride, _index });
    }

    pub fn setBytesLengthAttributeStrideAtIndex(
        _self: *@This(),
        _bytes: ?*anyopaque,
        _length: objc.NSUInteger,
        _stride: objc.NSUInteger,
        _index: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "setBytes:length:attributeStride:atIndex:", void, .{
            _bytes,
            _length,
            _stride,
            _index,
        });
    }

    pub fn setVisibleFunctionTableAtBufferIndex(_self: *@This(), _visibleFunctionTable: ?*anyopaque, _bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setVisibleFunctionTable:atBufferIndex:", void, .{ _visibleFunctionTable, _bufferIndex });
    }

    pub fn setVisibleFunctionTablesWithBufferRange(_self: *@This(), _visibleFunctionTables: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setVisibleFunctionTables:withBufferRange:", void, .{ _visibleFunctionTables, _range });
    }

    pub fn setIntersectionFunctionTableAtBufferIndex(_self: *@This(), _intersectionFunctionTable: ?*anyopaque, _bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setIntersectionFunctionTable:atBufferIndex:", void, .{ _intersectionFunctionTable, _bufferIndex });
    }

    pub fn setIntersectionFunctionTablesWithBufferRange(_self: *@This(), _intersectionFunctionTables: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setIntersectionFunctionTables:withBufferRange:", void, .{ _intersectionFunctionTables, _range });
    }

    pub fn setAccelerationStructureAtBufferIndex(_self: *@This(), _accelerationStructure: ?*anyopaque, _bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setAccelerationStructure:atBufferIndex:", void, .{ _accelerationStructure, _bufferIndex });
    }

    pub fn setTextureAtIndex(_self: *@This(), _texture: ?*anyopaque, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setTexture:atIndex:", void, .{ _texture, _index });
    }

    pub fn setTexturesWithRange(_self: *@This(), _textures: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setTextures:withRange:", void, .{ _textures, _range });
    }

    pub fn setSamplerStateAtIndex(_self: *@This(), _sampler: ?*anyopaque, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setSamplerState:atIndex:", void, .{ _sampler, _index });
    }

    pub fn setSamplerStatesWithRange(_self: *@This(), _samplers: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setSamplerStates:withRange:", void, .{ _samplers, _range });
    }

    pub fn setSamplerStateLodMinClampLodMaxClampAtIndex(
        _self: *@This(),
        _sampler: ?*anyopaque,
        _lodMinClamp: f32,
        _lodMaxClamp: f32,
        _index: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "setSamplerState:lodMinClamp:lodMaxClamp:atIndex:", void, .{
            _sampler,
            _lodMinClamp,
            _lodMaxClamp,
            _index,
        });
    }

    pub fn setSamplerStatesLodMinClampsLodMaxClampsWithRange(
        _self: *@This(),
        _samplers: ?*?*anyopaque,
        _lodMinClamps: ?*f32,
        _lodMaxClamps: ?*f32,
        _range: foundation.Range,
    ) void {
        return objc.msgSend(_self, "setSamplerStates:lodMinClamps:lodMaxClamps:withRange:", void, .{
            _samplers,
            _lodMinClamps,
            _lodMaxClamps,
            _range,
        });
    }

    pub fn setThreadgroupMemoryLengthAtIndex(_self: *@This(), _length: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setThreadgroupMemoryLength:atIndex:", void, .{ _length, _index });
    }

    pub fn setImageblockWidthHeight(_self: *@This(), _width: objc.NSUInteger, _height: objc.NSUInteger) void {
        return objc.msgSend(_self, "setImageblockWidth:height:", void, .{ _width, _height });
    }

    pub fn setStageInRegion(_self: *@This(), _region: Region) void {
        return objc.msgSend(_self, "setStageInRegion:", void, .{_region});
    }

    pub fn setStageInRegionWithIndirectBufferIndirectBufferOffset(_self: *@This(), _indirectBuffer: ?*anyopaque, _indirectBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setStageInRegionWithIndirectBuffer:indirectBufferOffset:", void, .{ _indirectBuffer, _indirectBufferOffset });
    }

    pub fn dispatchThreadgroupsThreadsPerThreadgroup(_self: *@This(), _threadgroupsPerGrid: Size, _threadsPerThreadgroup: Size) void {
        return objc.msgSend(_self, "dispatchThreadgroups:threadsPerThreadgroup:", void, .{ _threadgroupsPerGrid, _threadsPerThreadgroup });
    }

    pub fn dispatchThreadgroupsWithIndirectBufferIndirectBufferOffsetThreadsPerThreadgroup(_self: *@This(), _indirectBuffer: ?*anyopaque, _indirectBufferOffset: objc.NSUInteger, _threadsPerThreadgroup: Size) void {
        return objc.msgSend(_self, "dispatchThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerThreadgroup:", void, .{ _indirectBuffer, _indirectBufferOffset, _threadsPerThreadgroup });
    }

    pub fn dispatchThreadsThreadsPerThreadgroup(_self: *@This(), _threadsPerGrid: Size, _threadsPerThreadgroup: Size) void {
        return objc.msgSend(_self, "dispatchThreads:threadsPerThreadgroup:", void, .{ _threadsPerGrid, _threadsPerThreadgroup });
    }

    pub fn updateFence(_self: *@This(), _fence: ?*anyopaque) void {
        return objc.msgSend(_self, "updateFence:", void, .{_fence});
    }

    pub fn waitForFence(_self: *@This(), _fence: ?*anyopaque) void {
        return objc.msgSend(_self, "waitForFence:", void, .{_fence});
    }

    pub fn useResourceUsage(_self: *@This(), _resource: ?*anyopaque, _usage: ResourceUsage) void {
        return objc.msgSend(_self, "useResource:usage:", void, .{ _resource, _usage });
    }

    pub fn useResourcesCountUsage(_self: *@This(), _resources: ?*?*anyopaque, _count: objc.NSUInteger, _usage: ResourceUsage) void {
        return objc.msgSend(_self, "useResources:count:usage:", void, .{ _resources, _count, _usage });
    }

    pub fn useHeap(_self: *@This(), _heap: ?*anyopaque) void {
        return objc.msgSend(_self, "useHeap:", void, .{_heap});
    }

    pub fn useHeapsCount(_self: *@This(), _heaps: ?*?*anyopaque, _count: objc.NSUInteger) void {
        return objc.msgSend(_self, "useHeaps:count:", void, .{ _heaps, _count });
    }

    pub fn executeCommandsInBufferWithRange(_self: *@This(), _indirectCommandBuffer: ?*anyopaque, _executionRange: foundation.Range) void {
        return objc.msgSend(_self, "executeCommandsInBuffer:withRange:", void, .{ _indirectCommandBuffer, _executionRange });
    }

    pub fn executeCommandsInBufferIndirectBufferIndirectBufferOffset(_self: *@This(), _indirectCommandbuffer: ?*anyopaque, _indirectRangeBuffer: ?*anyopaque, _indirectBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "executeCommandsInBuffer:indirectBuffer:indirectBufferOffset:", void, .{ _indirectCommandbuffer, _indirectRangeBuffer, _indirectBufferOffset });
    }

    pub fn memoryBarrierWithScope(_self: *@This(), _scope: BarrierScope) void {
        return objc.msgSend(_self, "memoryBarrierWithScope:", void, .{_scope});
    }

    pub fn memoryBarrierWithResourcesCount(_self: *@This(), _resources: ?*?*anyopaque, _count: objc.NSUInteger) void {
        return objc.msgSend(_self, "memoryBarrierWithResources:count:", void, .{ _resources, _count });
    }

    pub fn sampleCountersInBufferAtSampleIndexWithBarrier(_self: *@This(), _sampleBuffer: ?*anyopaque, _sampleIndex: objc.NSUInteger, _barrier: objc.BOOL) void {
        return objc.msgSend(_self, "sampleCountersInBuffer:atSampleIndex:withBarrier:", void, .{ _sampleBuffer, _sampleIndex, _barrier });
    }

    pub fn dispatchType(_self: *@This()) DispatchType {
        return objc.msgSend(_self, "dispatchType", DispatchType, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLCommandQueue?language=objc
pub const CommandQueue = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn commandBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "commandBuffer", ?*anyopaque, .{});
    }

    pub fn commandBufferWithDescriptor(_self: *@This(), _descriptor: ?*CommandBufferDescriptor) ?*anyopaque {
        return objc.msgSend(_self, "commandBufferWithDescriptor:", ?*anyopaque, .{_descriptor});
    }

    pub fn commandBufferWithUnretainedReferences(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "commandBufferWithUnretainedReferences", ?*anyopaque, .{});
    }

    pub fn insertDebugCaptureBoundary(_self: *@This()) void {
        return objc.msgSend(_self, "insertDebugCaptureBoundary", void, .{});
    }

    pub fn addResidencySet(_self: *@This(), _residencySet: ?*anyopaque) void {
        return objc.msgSend(_self, "addResidencySet:", void, .{_residencySet});
    }

    pub fn addResidencySetsCount(_self: *@This(), _residencySets: ?*?*anyopaque, _count: objc.NSUInteger) void {
        return objc.msgSend(_self, "addResidencySets:count:", void, .{ _residencySets, _count });
    }

    pub fn removeResidencySet(_self: *@This(), _residencySet: ?*anyopaque) void {
        return objc.msgSend(_self, "removeResidencySet:", void, .{_residencySet});
    }

    pub fn removeResidencySetsCount(_self: *@This(), _residencySets: ?*?*anyopaque, _count: objc.NSUInteger) void {
        return objc.msgSend(_self, "removeResidencySets:count:", void, .{ _residencySets, _count });
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLCommandQueueDescriptor?language=objc
pub const CommandQueueDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLCommandQueueDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn maxCommandBufferCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxCommandBufferCount", objc.NSUInteger, .{});
    }

    pub fn setMaxCommandBufferCount(_self: *@This(), _maxCommandBufferCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaxCommandBufferCount:", void, .{_maxCommandBufferCount});
    }

    pub fn logState(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "logState", ?*anyopaque, .{});
    }

    pub fn setLogState(_self: *@This(), _logState: ?*anyopaque) void {
        return objc.msgSend(_self, "setLogState:", void, .{_logState});
    }
};

pub const NSDeviceCertification = objc.NSInteger;

pub const NSProcessPerformanceProfile = objc.NSInteger;

pub const CompareFunction = enum(objc.NSUInteger) {
    Never = 0,
    Less = 1,
    Equal = 2,
    LessEqual = 3,
    Greater = 4,
    NotEqual = 5,
    GreaterEqual = 6,
    Always = 7,
};

pub const StencilOperation = enum(objc.NSUInteger) {
    Keep = 0,
    Zero = 1,
    Replace = 2,
    IncrementClamp = 3,
    DecrementClamp = 4,
    Invert = 5,
    IncrementWrap = 6,
    DecrementWrap = 7,
};

/// https://developer.apple.com/documentation/Metal/MTLStencilDescriptor?language=objc
pub const StencilDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLStencilDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn stencilCompareFunction(_self: *@This()) CompareFunction {
        return objc.msgSend(_self, "stencilCompareFunction", CompareFunction, .{});
    }

    pub fn setStencilCompareFunction(_self: *@This(), _stencilCompareFunction: CompareFunction) void {
        return objc.msgSend(_self, "setStencilCompareFunction:", void, .{_stencilCompareFunction});
    }

    pub fn stencilFailureOperation(_self: *@This()) StencilOperation {
        return objc.msgSend(_self, "stencilFailureOperation", StencilOperation, .{});
    }

    pub fn setStencilFailureOperation(_self: *@This(), _stencilFailureOperation: StencilOperation) void {
        return objc.msgSend(_self, "setStencilFailureOperation:", void, .{_stencilFailureOperation});
    }

    pub fn depthFailureOperation(_self: *@This()) StencilOperation {
        return objc.msgSend(_self, "depthFailureOperation", StencilOperation, .{});
    }

    pub fn setDepthFailureOperation(_self: *@This(), _depthFailureOperation: StencilOperation) void {
        return objc.msgSend(_self, "setDepthFailureOperation:", void, .{_depthFailureOperation});
    }

    pub fn depthStencilPassOperation(_self: *@This()) StencilOperation {
        return objc.msgSend(_self, "depthStencilPassOperation", StencilOperation, .{});
    }

    pub fn setDepthStencilPassOperation(_self: *@This(), _depthStencilPassOperation: StencilOperation) void {
        return objc.msgSend(_self, "setDepthStencilPassOperation:", void, .{_depthStencilPassOperation});
    }

    pub fn readMask(_self: *@This()) objc.uint32_t {
        return objc.msgSend(_self, "readMask", objc.uint32_t, .{});
    }

    pub fn setReadMask(_self: *@This(), _readMask: objc.uint32_t) void {
        return objc.msgSend(_self, "setReadMask:", void, .{_readMask});
    }

    pub fn writeMask(_self: *@This()) objc.uint32_t {
        return objc.msgSend(_self, "writeMask", objc.uint32_t, .{});
    }

    pub fn setWriteMask(_self: *@This(), _writeMask: objc.uint32_t) void {
        return objc.msgSend(_self, "setWriteMask:", void, .{_writeMask});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLDepthStencilDescriptor?language=objc
pub const DepthStencilDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLDepthStencilDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn depthCompareFunction(_self: *@This()) CompareFunction {
        return objc.msgSend(_self, "depthCompareFunction", CompareFunction, .{});
    }

    pub fn setDepthCompareFunction(_self: *@This(), _depthCompareFunction: CompareFunction) void {
        return objc.msgSend(_self, "setDepthCompareFunction:", void, .{_depthCompareFunction});
    }

    pub fn isDepthWriteEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isDepthWriteEnabled", objc.BOOL, .{});
    }

    pub fn setDepthWriteEnabled(_self: *@This(), _depthWriteEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setDepthWriteEnabled:", void, .{_depthWriteEnabled});
    }

    pub fn frontFaceStencil(_self: *@This()) ?*StencilDescriptor {
        return objc.msgSend(_self, "frontFaceStencil", ?*StencilDescriptor, .{});
    }

    pub fn setFrontFaceStencil(_self: *@This(), _frontFaceStencil: ?*StencilDescriptor) void {
        return objc.msgSend(_self, "setFrontFaceStencil:", void, .{_frontFaceStencil});
    }

    pub fn backFaceStencil(_self: *@This()) ?*StencilDescriptor {
        return objc.msgSend(_self, "backFaceStencil", ?*StencilDescriptor, .{});
    }

    pub fn setBackFaceStencil(_self: *@This(), _backFaceStencil: ?*StencilDescriptor) void {
        return objc.msgSend(_self, "setBackFaceStencil:", void, .{_backFaceStencil});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLDepthStencilState?language=objc
pub const DepthStencilState = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }
};

pub const DrawablePresentedHandler = *const fn (?*anyopaque) callconv(.C) void;

/// https://developer.apple.com/documentation/Metal/MTLDrawable?language=objc
pub const Drawable = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn present(_self: *@This()) void {
        return objc.msgSend(_self, "present", void, .{});
    }

    pub fn presentAtTime(_self: *@This(), _presentationTime: core_foundation.TimeInterval) void {
        return objc.msgSend(_self, "presentAtTime:", void, .{_presentationTime});
    }

    pub fn presentAfterMinimumDuration(_self: *@This(), _duration: core_foundation.TimeInterval) void {
        return objc.msgSend(_self, "presentAfterMinimumDuration:", void, .{_duration});
    }

    pub fn addPresentedHandler(_self: *@This(), _block: DrawablePresentedHandler) void {
        return objc.msgSend(_self, "addPresentedHandler:", void, .{_block});
    }

    pub fn presentedTime(_self: *@This()) core_foundation.TimeInterval {
        return objc.msgSend(_self, "presentedTime", core_foundation.TimeInterval, .{});
    }

    pub fn drawableID(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "drawableID", objc.NSUInteger, .{});
    }
};

pub const VertexFormat = enum(objc.NSUInteger) {
    Invalid = 0,
    UChar2 = 1,
    UChar3 = 2,
    UChar4 = 3,
    Char2 = 4,
    Char3 = 5,
    Char4 = 6,
    UChar2Normalized = 7,
    UChar3Normalized = 8,
    UChar4Normalized = 9,
    Char2Normalized = 10,
    Char3Normalized = 11,
    Char4Normalized = 12,
    UShort2 = 13,
    UShort3 = 14,
    UShort4 = 15,
    Short2 = 16,
    Short3 = 17,
    Short4 = 18,
    UShort2Normalized = 19,
    UShort3Normalized = 20,
    UShort4Normalized = 21,
    Short2Normalized = 22,
    Short3Normalized = 23,
    Short4Normalized = 24,
    Half2 = 25,
    Half3 = 26,
    Half4 = 27,
    Float = 28,
    Float2 = 29,
    Float3 = 30,
    Float4 = 31,
    Int = 32,
    Int2 = 33,
    Int3 = 34,
    Int4 = 35,
    UInt = 36,
    UInt2 = 37,
    UInt3 = 38,
    UInt4 = 39,
    Int1010102Normalized = 40,
    UInt1010102Normalized = 41,
    UChar4Normalized_BGRA = 42,
    UChar = 45,
    Char = 46,
    UCharNormalized = 47,
    CharNormalized = 48,
    UShort = 49,
    Short = 50,
    UShortNormalized = 51,
    ShortNormalized = 52,
    Half = 53,
    FloatRG11B10 = 54,
    FloatRGB9E5 = 55,
};

pub const VertexStepFunction = enum(objc.NSUInteger) {
    Constant = 0,
    PerVertex = 1,
    PerInstance = 2,
    PerPatch = 3,
    PerPatchControlPoint = 4,
};

/// https://developer.apple.com/documentation/Metal/MTLVertexBufferLayoutDescriptor?language=objc
pub const VertexBufferLayoutDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLVertexBufferLayoutDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn stride(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "stride", objc.NSUInteger, .{});
    }

    pub fn setStride(_self: *@This(), _stride: objc.NSUInteger) void {
        return objc.msgSend(_self, "setStride:", void, .{_stride});
    }

    pub fn stepFunction(_self: *@This()) VertexStepFunction {
        return objc.msgSend(_self, "stepFunction", VertexStepFunction, .{});
    }

    pub fn setStepFunction(_self: *@This(), _stepFunction: VertexStepFunction) void {
        return objc.msgSend(_self, "setStepFunction:", void, .{_stepFunction});
    }

    pub fn stepRate(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "stepRate", objc.NSUInteger, .{});
    }

    pub fn setStepRate(_self: *@This(), _stepRate: objc.NSUInteger) void {
        return objc.msgSend(_self, "setStepRate:", void, .{_stepRate});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLVertexBufferLayoutDescriptorArray?language=objc
pub const VertexBufferLayoutDescriptorArray = opaque {
    pub const InternalInfo = objc.ExternClass("MTLVertexBufferLayoutDescriptorArray", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn objectAtIndexedSubscript(_self: *@This(), _index: objc.NSUInteger) ?*VertexBufferLayoutDescriptor {
        return objc.msgSend(_self, "objectAtIndexedSubscript:", ?*VertexBufferLayoutDescriptor, .{_index});
    }

    pub fn setObjectAtIndexedSubscript(_self: *@This(), _bufferDesc: ?*VertexBufferLayoutDescriptor, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setObject:atIndexedSubscript:", void, .{ _bufferDesc, _index });
    }
};

/// https://developer.apple.com/documentation/Metal/MTLVertexAttributeDescriptor?language=objc
pub const VertexAttributeDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLVertexAttributeDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn format(_self: *@This()) VertexFormat {
        return objc.msgSend(_self, "format", VertexFormat, .{});
    }

    pub fn setFormat(_self: *@This(), _format: VertexFormat) void {
        return objc.msgSend(_self, "setFormat:", void, .{_format});
    }

    pub fn offset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "offset", objc.NSUInteger, .{});
    }

    pub fn setOffset(_self: *@This(), _offset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setOffset:", void, .{_offset});
    }

    pub fn bufferIndex(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "bufferIndex", objc.NSUInteger, .{});
    }

    pub fn setBufferIndex(_self: *@This(), _bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setBufferIndex:", void, .{_bufferIndex});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLVertexAttributeDescriptorArray?language=objc
pub const VertexAttributeDescriptorArray = opaque {
    pub const InternalInfo = objc.ExternClass("MTLVertexAttributeDescriptorArray", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn objectAtIndexedSubscript(_self: *@This(), _index: objc.NSUInteger) ?*VertexAttributeDescriptor {
        return objc.msgSend(_self, "objectAtIndexedSubscript:", ?*VertexAttributeDescriptor, .{_index});
    }

    pub fn setObjectAtIndexedSubscript(_self: *@This(), _attributeDesc: ?*VertexAttributeDescriptor, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setObject:atIndexedSubscript:", void, .{ _attributeDesc, _index });
    }
};

/// https://developer.apple.com/documentation/Metal/MTLVertexDescriptor?language=objc
pub const VertexDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLVertexDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn vertexDescriptor(_self: *@This()) ?*VertexDescriptor {
        return objc.msgSend(_self, "vertexDescriptor", ?*VertexDescriptor, .{});
    }

    pub fn reset(_self: *@This()) void {
        return objc.msgSend(_self, "reset", void, .{});
    }

    pub fn layouts(_self: *@This()) ?*VertexBufferLayoutDescriptorArray {
        return objc.msgSend(_self, "layouts", ?*VertexBufferLayoutDescriptorArray, .{});
    }

    pub fn attributes(_self: *@This()) ?*VertexAttributeDescriptorArray {
        return objc.msgSend(_self, "attributes", ?*VertexAttributeDescriptorArray, .{});
    }
};

pub const AttributeFormat = enum(objc.NSUInteger) {
    Invalid = 0,
    UChar2 = 1,
    UChar3 = 2,
    UChar4 = 3,
    Char2 = 4,
    Char3 = 5,
    Char4 = 6,
    UChar2Normalized = 7,
    UChar3Normalized = 8,
    UChar4Normalized = 9,
    Char2Normalized = 10,
    Char3Normalized = 11,
    Char4Normalized = 12,
    UShort2 = 13,
    UShort3 = 14,
    UShort4 = 15,
    Short2 = 16,
    Short3 = 17,
    Short4 = 18,
    UShort2Normalized = 19,
    UShort3Normalized = 20,
    UShort4Normalized = 21,
    Short2Normalized = 22,
    Short3Normalized = 23,
    Short4Normalized = 24,
    Half2 = 25,
    Half3 = 26,
    Half4 = 27,
    Float = 28,
    Float2 = 29,
    Float3 = 30,
    Float4 = 31,
    Int = 32,
    Int2 = 33,
    Int3 = 34,
    Int4 = 35,
    UInt = 36,
    UInt2 = 37,
    UInt3 = 38,
    UInt4 = 39,
    Int1010102Normalized = 40,
    UInt1010102Normalized = 41,
    UChar4Normalized_BGRA = 42,
    UChar = 45,
    Char = 46,
    UCharNormalized = 47,
    CharNormalized = 48,
    UShort = 49,
    Short = 50,
    UShortNormalized = 51,
    ShortNormalized = 52,
    Half = 53,
    FloatRG11B10 = 54,
    FloatRGB9E5 = 55,
};

pub const IndexType = enum(objc.NSUInteger) {
    UInt16 = 0,
    UInt32 = 1,
};

pub const StepFunction = enum(objc.NSUInteger) {
    Constant = 0,
    PerVertex = 1,
    PerInstance = 2,
    PerPatch = 3,
    PerPatchControlPoint = 4,
    ThreadPositionInGridX = 5,
    ThreadPositionInGridY = 6,
    ThreadPositionInGridXIndexed = 7,
    ThreadPositionInGridYIndexed = 8,
};

/// https://developer.apple.com/documentation/Metal/MTLBufferLayoutDescriptor?language=objc
pub const BufferLayoutDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLBufferLayoutDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn stride(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "stride", objc.NSUInteger, .{});
    }

    pub fn setStride(_self: *@This(), _stride: objc.NSUInteger) void {
        return objc.msgSend(_self, "setStride:", void, .{_stride});
    }

    pub fn stepFunction(_self: *@This()) StepFunction {
        return objc.msgSend(_self, "stepFunction", StepFunction, .{});
    }

    pub fn setStepFunction(_self: *@This(), _stepFunction: StepFunction) void {
        return objc.msgSend(_self, "setStepFunction:", void, .{_stepFunction});
    }

    pub fn stepRate(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "stepRate", objc.NSUInteger, .{});
    }

    pub fn setStepRate(_self: *@This(), _stepRate: objc.NSUInteger) void {
        return objc.msgSend(_self, "setStepRate:", void, .{_stepRate});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLBufferLayoutDescriptorArray?language=objc
pub const BufferLayoutDescriptorArray = opaque {
    pub const InternalInfo = objc.ExternClass("MTLBufferLayoutDescriptorArray", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn objectAtIndexedSubscript(_self: *@This(), _index: objc.NSUInteger) ?*BufferLayoutDescriptor {
        return objc.msgSend(_self, "objectAtIndexedSubscript:", ?*BufferLayoutDescriptor, .{_index});
    }

    pub fn setObjectAtIndexedSubscript(_self: *@This(), _bufferDesc: ?*BufferLayoutDescriptor, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setObject:atIndexedSubscript:", void, .{ _bufferDesc, _index });
    }
};

/// https://developer.apple.com/documentation/Metal/MTLAttributeDescriptor?language=objc
pub const AttributeDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLAttributeDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn format(_self: *@This()) AttributeFormat {
        return objc.msgSend(_self, "format", AttributeFormat, .{});
    }

    pub fn setFormat(_self: *@This(), _format: AttributeFormat) void {
        return objc.msgSend(_self, "setFormat:", void, .{_format});
    }

    pub fn offset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "offset", objc.NSUInteger, .{});
    }

    pub fn setOffset(_self: *@This(), _offset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setOffset:", void, .{_offset});
    }

    pub fn bufferIndex(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "bufferIndex", objc.NSUInteger, .{});
    }

    pub fn setBufferIndex(_self: *@This(), _bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setBufferIndex:", void, .{_bufferIndex});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLAttributeDescriptorArray?language=objc
pub const AttributeDescriptorArray = opaque {
    pub const InternalInfo = objc.ExternClass("MTLAttributeDescriptorArray", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn objectAtIndexedSubscript(_self: *@This(), _index: objc.NSUInteger) ?*AttributeDescriptor {
        return objc.msgSend(_self, "objectAtIndexedSubscript:", ?*AttributeDescriptor, .{_index});
    }

    pub fn setObjectAtIndexedSubscript(_self: *@This(), _attributeDesc: ?*AttributeDescriptor, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setObject:atIndexedSubscript:", void, .{ _attributeDesc, _index });
    }
};

/// https://developer.apple.com/documentation/Metal/MTLStageInputOutputDescriptor?language=objc
pub const StageInputOutputDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLStageInputOutputDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn stageInputOutputDescriptor(_self: *@This()) ?*StageInputOutputDescriptor {
        return objc.msgSend(_self, "stageInputOutputDescriptor", ?*StageInputOutputDescriptor, .{});
    }

    pub fn reset(_self: *@This()) void {
        return objc.msgSend(_self, "reset", void, .{});
    }

    pub fn layouts(_self: *@This()) ?*BufferLayoutDescriptorArray {
        return objc.msgSend(_self, "layouts", ?*BufferLayoutDescriptorArray, .{});
    }

    pub fn attributes(_self: *@This()) ?*AttributeDescriptorArray {
        return objc.msgSend(_self, "attributes", ?*AttributeDescriptorArray, .{});
    }

    pub fn indexType(_self: *@This()) IndexType {
        return objc.msgSend(_self, "indexType", IndexType, .{});
    }

    pub fn setIndexType(_self: *@This(), _indexType: IndexType) void {
        return objc.msgSend(_self, "setIndexType:", void, .{_indexType});
    }

    pub fn indexBufferIndex(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "indexBufferIndex", objc.NSUInteger, .{});
    }

    pub fn setIndexBufferIndex(_self: *@This(), _indexBufferIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setIndexBufferIndex:", void, .{_indexBufferIndex});
    }
};

pub const Mutability = enum(objc.NSUInteger) {
    Default = 0,
    Mutable = 1,
    Immutable = 2,
};

pub const ShaderValidation = enum(objc.NSInteger) {
    Default = 0,
    Enabled = 1,
    Disabled = 2,
};

/// https://developer.apple.com/documentation/Metal/MTLPipelineBufferDescriptor?language=objc
pub const PipelineBufferDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLPipelineBufferDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn mutability(_self: *@This()) Mutability {
        return objc.msgSend(_self, "mutability", Mutability, .{});
    }

    pub fn setMutability(_self: *@This(), _mutability: Mutability) void {
        return objc.msgSend(_self, "setMutability:", void, .{_mutability});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLPipelineBufferDescriptorArray?language=objc
pub const PipelineBufferDescriptorArray = opaque {
    pub const InternalInfo = objc.ExternClass("MTLPipelineBufferDescriptorArray", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn objectAtIndexedSubscript(_self: *@This(), _bufferIndex: objc.NSUInteger) ?*PipelineBufferDescriptor {
        return objc.msgSend(_self, "objectAtIndexedSubscript:", ?*PipelineBufferDescriptor, .{_bufferIndex});
    }

    pub fn setObjectAtIndexedSubscript(_self: *@This(), _buffer: ?*PipelineBufferDescriptor, _bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setObject:atIndexedSubscript:", void, .{ _buffer, _bufferIndex });
    }
};

/// https://developer.apple.com/documentation/Metal/MTLLinkedFunctions?language=objc
pub const LinkedFunctions = opaque {
    pub const InternalInfo = objc.ExternClass("MTLLinkedFunctions", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn linkedFunctions(_self: *@This()) ?*LinkedFunctions {
        return objc.msgSend(_self, "linkedFunctions", ?*LinkedFunctions, .{});
    }

    pub fn functions(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "functions", ?*anyopaque, .{});
    }

    pub fn setFunctions(_self: *@This(), _functions: ?*anyopaque) void {
        return objc.msgSend(_self, "setFunctions:", void, .{_functions});
    }

    pub fn binaryFunctions(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "binaryFunctions", ?*anyopaque, .{});
    }

    pub fn setBinaryFunctions(_self: *@This(), _binaryFunctions: ?*anyopaque) void {
        return objc.msgSend(_self, "setBinaryFunctions:", void, .{_binaryFunctions});
    }

    pub fn groups(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "groups", ?*anyopaque, .{});
    }

    pub fn setGroups(_self: *@This(), _groups: ?*anyopaque) void {
        return objc.msgSend(_self, "setGroups:", void, .{_groups});
    }

    pub fn privateFunctions(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "privateFunctions", ?*anyopaque, .{});
    }

    pub fn setPrivateFunctions(_self: *@This(), _privateFunctions: ?*anyopaque) void {
        return objc.msgSend(_self, "setPrivateFunctions:", void, .{_privateFunctions});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLComputePipelineReflection?language=objc
pub const ComputePipelineReflection = opaque {
    pub const InternalInfo = objc.ExternClass("MTLComputePipelineReflection", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn bindings(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "bindings", ?*anyopaque, .{});
    }

    pub fn arguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "arguments", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLComputePipelineDescriptor?language=objc
pub const ComputePipelineDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLComputePipelineDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn reset(_self: *@This()) void {
        return objc.msgSend(_self, "reset", void, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn computeFunction(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "computeFunction", ?*anyopaque, .{});
    }

    pub fn setComputeFunction(_self: *@This(), _computeFunction: ?*anyopaque) void {
        return objc.msgSend(_self, "setComputeFunction:", void, .{_computeFunction});
    }

    pub fn threadGroupSizeIsMultipleOfThreadExecutionWidth(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "threadGroupSizeIsMultipleOfThreadExecutionWidth", objc.BOOL, .{});
    }

    pub fn setThreadGroupSizeIsMultipleOfThreadExecutionWidth(_self: *@This(), _threadGroupSizeIsMultipleOfThreadExecutionWidth: objc.BOOL) void {
        return objc.msgSend(_self, "setThreadGroupSizeIsMultipleOfThreadExecutionWidth:", void, .{_threadGroupSizeIsMultipleOfThreadExecutionWidth});
    }

    pub fn maxTotalThreadsPerThreadgroup(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxTotalThreadsPerThreadgroup", objc.NSUInteger, .{});
    }

    pub fn setMaxTotalThreadsPerThreadgroup(_self: *@This(), _maxTotalThreadsPerThreadgroup: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaxTotalThreadsPerThreadgroup:", void, .{_maxTotalThreadsPerThreadgroup});
    }

    pub fn stageInputDescriptor(_self: *@This()) ?*StageInputOutputDescriptor {
        return objc.msgSend(_self, "stageInputDescriptor", ?*StageInputOutputDescriptor, .{});
    }

    pub fn setStageInputDescriptor(_self: *@This(), _stageInputDescriptor: ?*StageInputOutputDescriptor) void {
        return objc.msgSend(_self, "setStageInputDescriptor:", void, .{_stageInputDescriptor});
    }

    pub fn buffers(_self: *@This()) ?*PipelineBufferDescriptorArray {
        return objc.msgSend(_self, "buffers", ?*PipelineBufferDescriptorArray, .{});
    }

    pub fn supportIndirectCommandBuffers(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportIndirectCommandBuffers", objc.BOOL, .{});
    }

    pub fn setSupportIndirectCommandBuffers(_self: *@This(), _supportIndirectCommandBuffers: objc.BOOL) void {
        return objc.msgSend(_self, "setSupportIndirectCommandBuffers:", void, .{_supportIndirectCommandBuffers});
    }

    pub fn insertLibraries(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "insertLibraries", ?*anyopaque, .{});
    }

    pub fn setInsertLibraries(_self: *@This(), _insertLibraries: ?*anyopaque) void {
        return objc.msgSend(_self, "setInsertLibraries:", void, .{_insertLibraries});
    }

    pub fn preloadedLibraries(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "preloadedLibraries", ?*anyopaque, .{});
    }

    pub fn setPreloadedLibraries(_self: *@This(), _preloadedLibraries: ?*anyopaque) void {
        return objc.msgSend(_self, "setPreloadedLibraries:", void, .{_preloadedLibraries});
    }

    pub fn binaryArchives(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "binaryArchives", ?*anyopaque, .{});
    }

    pub fn setBinaryArchives(_self: *@This(), _binaryArchives: ?*anyopaque) void {
        return objc.msgSend(_self, "setBinaryArchives:", void, .{_binaryArchives});
    }

    pub fn linkedFunctions(_self: *@This()) ?*LinkedFunctions {
        return objc.msgSend(_self, "linkedFunctions", ?*LinkedFunctions, .{});
    }

    pub fn setLinkedFunctions(_self: *@This(), _linkedFunctions: ?*LinkedFunctions) void {
        return objc.msgSend(_self, "setLinkedFunctions:", void, .{_linkedFunctions});
    }

    pub fn supportAddingBinaryFunctions(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportAddingBinaryFunctions", objc.BOOL, .{});
    }

    pub fn setSupportAddingBinaryFunctions(_self: *@This(), _supportAddingBinaryFunctions: objc.BOOL) void {
        return objc.msgSend(_self, "setSupportAddingBinaryFunctions:", void, .{_supportAddingBinaryFunctions});
    }

    pub fn maxCallStackDepth(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxCallStackDepth", objc.NSUInteger, .{});
    }

    pub fn setMaxCallStackDepth(_self: *@This(), _maxCallStackDepth: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaxCallStackDepth:", void, .{_maxCallStackDepth});
    }

    pub fn shaderValidation(_self: *@This()) ShaderValidation {
        return objc.msgSend(_self, "shaderValidation", ShaderValidation, .{});
    }

    pub fn setShaderValidation(_self: *@This(), _shaderValidation: ShaderValidation) void {
        return objc.msgSend(_self, "setShaderValidation:", void, .{_shaderValidation});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLComputePipelineState?language=objc
pub const ComputePipelineState = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn imageblockMemoryLengthForDimensions(_self: *@This(), _imageblockDimensions: Size) objc.NSUInteger {
        return objc.msgSend(_self, "imageblockMemoryLengthForDimensions:", objc.NSUInteger, .{_imageblockDimensions});
    }

    pub fn functionHandleWithFunction(_self: *@This(), _function: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "functionHandleWithFunction:", ?*anyopaque, .{_function});
    }

    pub fn newComputePipelineStateWithAdditionalBinaryFunctionsError(_self: *@This(), _functions: ?*anyopaque, _error: ?*?*foundation.Error) ?*anyopaque {
        return objc.msgSend(_self, "newComputePipelineStateWithAdditionalBinaryFunctions:error:", ?*anyopaque, .{ _functions, _error });
    }

    pub fn newVisibleFunctionTableWithDescriptor(_self: *@This(), _descriptor: ?*VisibleFunctionTableDescriptor) ?*anyopaque {
        return objc.msgSend(_self, "newVisibleFunctionTableWithDescriptor:", ?*anyopaque, .{_descriptor});
    }

    pub fn newIntersectionFunctionTableWithDescriptor(_self: *@This(), _descriptor: ?*IntersectionFunctionTableDescriptor) ?*anyopaque {
        return objc.msgSend(_self, "newIntersectionFunctionTableWithDescriptor:", ?*anyopaque, .{_descriptor});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn maxTotalThreadsPerThreadgroup(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxTotalThreadsPerThreadgroup", objc.NSUInteger, .{});
    }

    pub fn threadExecutionWidth(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "threadExecutionWidth", objc.NSUInteger, .{});
    }

    pub fn staticThreadgroupMemoryLength(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "staticThreadgroupMemoryLength", objc.NSUInteger, .{});
    }

    pub fn supportIndirectCommandBuffers(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportIndirectCommandBuffers", objc.BOOL, .{});
    }

    pub fn gpuResourceID(_self: *@This()) ResourceID {
        return objc.msgSend(_self, "gpuResourceID", ResourceID, .{});
    }

    pub fn shaderValidation(_self: *@This()) ShaderValidation {
        return objc.msgSend(_self, "shaderValidation", ShaderValidation, .{});
    }
};

pub const PrimitiveType = enum(objc.NSUInteger) {
    Point = 0,
    Line = 1,
    LineStrip = 2,
    Triangle = 3,
    TriangleStrip = 4,
};

pub const VisibilityResultMode = enum(objc.NSUInteger) {
    Disabled = 0,
    Boolean = 1,
    Counting = 2,
};

pub const ScissorRect = extern struct {
    x: objc.NSUInteger,
    y: objc.NSUInteger,
    width: objc.NSUInteger,
    height: objc.NSUInteger,
};

pub const Viewport = extern struct {
    originX: f64,
    originY: f64,
    width: f64,
    height: f64,
    znear: f64,
    zfar: f64,
};

pub const CullMode = enum(objc.NSUInteger) {
    None = 0,
    Front = 1,
    Back = 2,
};

pub const Winding = enum(objc.NSUInteger) {
    Clockwise = 0,
    CounterClockwise = 1,
};

pub const DepthClipMode = enum(objc.NSUInteger) {
    Clip = 0,
    Clamp = 1,
};

pub const TriangleFillMode = enum(objc.NSUInteger) {
    Fill = 0,
    Lines = 1,
};

pub const DrawPrimitivesIndirectArguments = extern struct {
    vertexCount: objc.uint32_t,
    instanceCount: objc.uint32_t,
    vertexStart: objc.uint32_t,
    baseInstance: objc.uint32_t,
};

pub const DrawIndexedPrimitivesIndirectArguments = extern struct {
    indexCount: objc.uint32_t,
    instanceCount: objc.uint32_t,
    indexStart: objc.uint32_t,
    baseVertex: objc.int32_t,
    baseInstance: objc.uint32_t,
};

pub const VertexAmplificationViewMapping = extern struct {
    viewportArrayIndexOffset: objc.uint32_t,
    renderTargetArrayIndexOffset: objc.uint32_t,
};

pub const DrawPatchIndirectArguments = extern struct {
    patchCount: objc.uint32_t,
    instanceCount: objc.uint32_t,
    patchStart: objc.uint32_t,
    baseInstance: objc.uint32_t,
};

pub const QuadTessellationFactorsHalf = extern struct {
    edgeTessellationFactor: [4]objc.uint16_t,
    insideTessellationFactor: [2]objc.uint16_t,
};

pub const TriangleTessellationFactorsHalf = extern struct {
    edgeTessellationFactor: [3]objc.uint16_t,
    insideTessellationFactor: objc.uint16_t,
};

pub const RenderStages = enum(objc.NSUInteger) {
    Vertex = 1,
    Fragment = 2,
    Tile = 4,
    Object = 8,
    Mesh = 16,
};

/// https://developer.apple.com/documentation/Metal/MTLRenderCommandEncoder?language=objc
pub const RenderCommandEncoder = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        CommandEncoder,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn endEncoding(_self: *@This()) void {
        return objc.msgSend(_self, "endEncoding", void, .{});
    }

    pub fn insertDebugSignpost(_self: *@This(), _string: ?*foundation.String) void {
        return objc.msgSend(_self, "insertDebugSignpost:", void, .{_string});
    }

    pub fn pushDebugGroup(_self: *@This(), _string: ?*foundation.String) void {
        return objc.msgSend(_self, "pushDebugGroup:", void, .{_string});
    }

    pub fn popDebugGroup(_self: *@This()) void {
        return objc.msgSend(_self, "popDebugGroup", void, .{});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn setRenderPipelineState(_self: *@This(), _pipelineState: ?*anyopaque) void {
        return objc.msgSend(_self, "setRenderPipelineState:", void, .{_pipelineState});
    }

    pub fn setVertexBytesLengthAtIndex(_self: *@This(), _bytes: ?*anyopaque, _length: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setVertexBytes:length:atIndex:", void, .{ _bytes, _length, _index });
    }

    pub fn setVertexBufferOffsetAtIndex(_self: *@This(), _buffer: ?*anyopaque, _offset: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setVertexBuffer:offset:atIndex:", void, .{ _buffer, _offset, _index });
    }

    pub fn setVertexBufferOffsetAtIndex(_self: *@This(), _offset: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setVertexBufferOffset:atIndex:", void, .{ _offset, _index });
    }

    pub fn setVertexBuffersOffsetsWithRange(_self: *@This(), _buffers: ?*?*anyopaque, _offsets: ?*objc.NSUInteger, _range: foundation.Range) void {
        return objc.msgSend(_self, "setVertexBuffers:offsets:withRange:", void, .{ _buffers, _offsets, _range });
    }

    pub fn setVertexBufferOffsetAttributeStrideAtIndex(
        _self: *@This(),
        _buffer: ?*anyopaque,
        _offset: objc.NSUInteger,
        _stride: objc.NSUInteger,
        _index: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "setVertexBuffer:offset:attributeStride:atIndex:", void, .{
            _buffer,
            _offset,
            _stride,
            _index,
        });
    }

    pub fn setVertexBuffersOffsetsAttributeStridesWithRange(
        _self: *@This(),
        _buffers: ?*?*anyopaque,
        _offsets: ?*objc.NSUInteger,
        _strides: ?*objc.NSUInteger,
        _range: foundation.Range,
    ) void {
        return objc.msgSend(_self, "setVertexBuffers:offsets:attributeStrides:withRange:", void, .{
            _buffers,
            _offsets,
            _strides,
            _range,
        });
    }

    pub fn setVertexBufferOffsetAttributeStrideAtIndex(_self: *@This(), _offset: objc.NSUInteger, _stride: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setVertexBufferOffset:attributeStride:atIndex:", void, .{ _offset, _stride, _index });
    }

    pub fn setVertexBytesLengthAttributeStrideAtIndex(
        _self: *@This(),
        _bytes: ?*anyopaque,
        _length: objc.NSUInteger,
        _stride: objc.NSUInteger,
        _index: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "setVertexBytes:length:attributeStride:atIndex:", void, .{
            _bytes,
            _length,
            _stride,
            _index,
        });
    }

    pub fn setVertexTextureAtIndex(_self: *@This(), _texture: ?*anyopaque, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setVertexTexture:atIndex:", void, .{ _texture, _index });
    }

    pub fn setVertexTexturesWithRange(_self: *@This(), _textures: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setVertexTextures:withRange:", void, .{ _textures, _range });
    }

    pub fn setVertexSamplerStateAtIndex(_self: *@This(), _sampler: ?*anyopaque, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setVertexSamplerState:atIndex:", void, .{ _sampler, _index });
    }

    pub fn setVertexSamplerStatesWithRange(_self: *@This(), _samplers: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setVertexSamplerStates:withRange:", void, .{ _samplers, _range });
    }

    pub fn setVertexSamplerStateLodMinClampLodMaxClampAtIndex(
        _self: *@This(),
        _sampler: ?*anyopaque,
        _lodMinClamp: f32,
        _lodMaxClamp: f32,
        _index: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "setVertexSamplerState:lodMinClamp:lodMaxClamp:atIndex:", void, .{
            _sampler,
            _lodMinClamp,
            _lodMaxClamp,
            _index,
        });
    }

    pub fn setVertexSamplerStatesLodMinClampsLodMaxClampsWithRange(
        _self: *@This(),
        _samplers: ?*?*anyopaque,
        _lodMinClamps: ?*f32,
        _lodMaxClamps: ?*f32,
        _range: foundation.Range,
    ) void {
        return objc.msgSend(_self, "setVertexSamplerStates:lodMinClamps:lodMaxClamps:withRange:", void, .{
            _samplers,
            _lodMinClamps,
            _lodMaxClamps,
            _range,
        });
    }

    pub fn setVertexVisibleFunctionTableAtBufferIndex(_self: *@This(), _functionTable: ?*anyopaque, _bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setVertexVisibleFunctionTable:atBufferIndex:", void, .{ _functionTable, _bufferIndex });
    }

    pub fn setVertexVisibleFunctionTablesWithBufferRange(_self: *@This(), _functionTables: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setVertexVisibleFunctionTables:withBufferRange:", void, .{ _functionTables, _range });
    }

    pub fn setVertexIntersectionFunctionTableAtBufferIndex(_self: *@This(), _intersectionFunctionTable: ?*anyopaque, _bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setVertexIntersectionFunctionTable:atBufferIndex:", void, .{ _intersectionFunctionTable, _bufferIndex });
    }

    pub fn setVertexIntersectionFunctionTablesWithBufferRange(_self: *@This(), _intersectionFunctionTables: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setVertexIntersectionFunctionTables:withBufferRange:", void, .{ _intersectionFunctionTables, _range });
    }

    pub fn setVertexAccelerationStructureAtBufferIndex(_self: *@This(), _accelerationStructure: ?*anyopaque, _bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setVertexAccelerationStructure:atBufferIndex:", void, .{ _accelerationStructure, _bufferIndex });
    }

    pub fn setViewport(_self: *@This(), _viewport: Viewport) void {
        return objc.msgSend(_self, "setViewport:", void, .{_viewport});
    }

    pub fn setViewportsCount(_self: *@This(), _viewports: ?*Viewport, _count: objc.NSUInteger) void {
        return objc.msgSend(_self, "setViewports:count:", void, .{ _viewports, _count });
    }

    pub fn setFrontFacingWinding(_self: *@This(), _frontFacingWinding: Winding) void {
        return objc.msgSend(_self, "setFrontFacingWinding:", void, .{_frontFacingWinding});
    }

    pub fn setVertexAmplificationCountViewMappings(_self: *@This(), _count: objc.NSUInteger, _viewMappings: ?*VertexAmplificationViewMapping) void {
        return objc.msgSend(_self, "setVertexAmplificationCount:viewMappings:", void, .{ _count, _viewMappings });
    }

    pub fn setCullMode(_self: *@This(), _cullMode: CullMode) void {
        return objc.msgSend(_self, "setCullMode:", void, .{_cullMode});
    }

    pub fn setDepthClipMode(_self: *@This(), _depthClipMode: DepthClipMode) void {
        return objc.msgSend(_self, "setDepthClipMode:", void, .{_depthClipMode});
    }

    pub fn setDepthBiasSlopeScaleClamp(_self: *@This(), _depthBias: f32, _slopeScale: f32, _clamp: f32) void {
        return objc.msgSend(_self, "setDepthBias:slopeScale:clamp:", void, .{ _depthBias, _slopeScale, _clamp });
    }

    pub fn setScissorRect(_self: *@This(), _rect: ScissorRect) void {
        return objc.msgSend(_self, "setScissorRect:", void, .{_rect});
    }

    pub fn setScissorRectsCount(_self: *@This(), _scissorRects: ?*ScissorRect, _count: objc.NSUInteger) void {
        return objc.msgSend(_self, "setScissorRects:count:", void, .{ _scissorRects, _count });
    }

    pub fn setTriangleFillMode(_self: *@This(), _fillMode: TriangleFillMode) void {
        return objc.msgSend(_self, "setTriangleFillMode:", void, .{_fillMode});
    }

    pub fn setFragmentBytesLengthAtIndex(_self: *@This(), _bytes: ?*anyopaque, _length: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setFragmentBytes:length:atIndex:", void, .{ _bytes, _length, _index });
    }

    pub fn setFragmentBufferOffsetAtIndex(_self: *@This(), _buffer: ?*anyopaque, _offset: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setFragmentBuffer:offset:atIndex:", void, .{ _buffer, _offset, _index });
    }

    pub fn setFragmentBufferOffsetAtIndex(_self: *@This(), _offset: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setFragmentBufferOffset:atIndex:", void, .{ _offset, _index });
    }

    pub fn setFragmentBuffersOffsetsWithRange(_self: *@This(), _buffers: ?*?*anyopaque, _offsets: ?*objc.NSUInteger, _range: foundation.Range) void {
        return objc.msgSend(_self, "setFragmentBuffers:offsets:withRange:", void, .{ _buffers, _offsets, _range });
    }

    pub fn setFragmentTextureAtIndex(_self: *@This(), _texture: ?*anyopaque, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setFragmentTexture:atIndex:", void, .{ _texture, _index });
    }

    pub fn setFragmentTexturesWithRange(_self: *@This(), _textures: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setFragmentTextures:withRange:", void, .{ _textures, _range });
    }

    pub fn setFragmentSamplerStateAtIndex(_self: *@This(), _sampler: ?*anyopaque, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setFragmentSamplerState:atIndex:", void, .{ _sampler, _index });
    }

    pub fn setFragmentSamplerStatesWithRange(_self: *@This(), _samplers: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setFragmentSamplerStates:withRange:", void, .{ _samplers, _range });
    }

    pub fn setFragmentSamplerStateLodMinClampLodMaxClampAtIndex(
        _self: *@This(),
        _sampler: ?*anyopaque,
        _lodMinClamp: f32,
        _lodMaxClamp: f32,
        _index: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "setFragmentSamplerState:lodMinClamp:lodMaxClamp:atIndex:", void, .{
            _sampler,
            _lodMinClamp,
            _lodMaxClamp,
            _index,
        });
    }

    pub fn setFragmentSamplerStatesLodMinClampsLodMaxClampsWithRange(
        _self: *@This(),
        _samplers: ?*?*anyopaque,
        _lodMinClamps: ?*f32,
        _lodMaxClamps: ?*f32,
        _range: foundation.Range,
    ) void {
        return objc.msgSend(_self, "setFragmentSamplerStates:lodMinClamps:lodMaxClamps:withRange:", void, .{
            _samplers,
            _lodMinClamps,
            _lodMaxClamps,
            _range,
        });
    }

    pub fn setFragmentVisibleFunctionTableAtBufferIndex(_self: *@This(), _functionTable: ?*anyopaque, _bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setFragmentVisibleFunctionTable:atBufferIndex:", void, .{ _functionTable, _bufferIndex });
    }

    pub fn setFragmentVisibleFunctionTablesWithBufferRange(_self: *@This(), _functionTables: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setFragmentVisibleFunctionTables:withBufferRange:", void, .{ _functionTables, _range });
    }

    pub fn setFragmentIntersectionFunctionTableAtBufferIndex(_self: *@This(), _intersectionFunctionTable: ?*anyopaque, _bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setFragmentIntersectionFunctionTable:atBufferIndex:", void, .{ _intersectionFunctionTable, _bufferIndex });
    }

    pub fn setFragmentIntersectionFunctionTablesWithBufferRange(_self: *@This(), _intersectionFunctionTables: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setFragmentIntersectionFunctionTables:withBufferRange:", void, .{ _intersectionFunctionTables, _range });
    }

    pub fn setFragmentAccelerationStructureAtBufferIndex(_self: *@This(), _accelerationStructure: ?*anyopaque, _bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setFragmentAccelerationStructure:atBufferIndex:", void, .{ _accelerationStructure, _bufferIndex });
    }

    pub fn setBlendColorRedGreenBlueAlpha(
        _self: *@This(),
        _red: f32,
        _green: f32,
        _blue: f32,
        _alpha: f32,
    ) void {
        return objc.msgSend(_self, "setBlendColorRed:green:blue:alpha:", void, .{
            _red,
            _green,
            _blue,
            _alpha,
        });
    }

    pub fn setDepthStencilState(_self: *@This(), _depthStencilState: ?*anyopaque) void {
        return objc.msgSend(_self, "setDepthStencilState:", void, .{_depthStencilState});
    }

    pub fn setStencilReferenceValue(_self: *@This(), _referenceValue: objc.uint32_t) void {
        return objc.msgSend(_self, "setStencilReferenceValue:", void, .{_referenceValue});
    }

    pub fn setStencilFrontReferenceValueBackReferenceValue(_self: *@This(), _frontReferenceValue: objc.uint32_t, _backReferenceValue: objc.uint32_t) void {
        return objc.msgSend(_self, "setStencilFrontReferenceValue:backReferenceValue:", void, .{ _frontReferenceValue, _backReferenceValue });
    }

    pub fn setVisibilityResultModeOffset(_self: *@This(), _mode: VisibilityResultMode, _offset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setVisibilityResultMode:offset:", void, .{ _mode, _offset });
    }

    pub fn setColorStoreActionAtIndex(_self: *@This(), _storeAction: StoreAction, _colorAttachmentIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setColorStoreAction:atIndex:", void, .{ _storeAction, _colorAttachmentIndex });
    }

    pub fn setDepthStoreAction(_self: *@This(), _storeAction: StoreAction) void {
        return objc.msgSend(_self, "setDepthStoreAction:", void, .{_storeAction});
    }

    pub fn setStencilStoreAction(_self: *@This(), _storeAction: StoreAction) void {
        return objc.msgSend(_self, "setStencilStoreAction:", void, .{_storeAction});
    }

    pub fn setColorStoreActionOptionsAtIndex(_self: *@This(), _storeActionOptions: StoreActionOptions, _colorAttachmentIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setColorStoreActionOptions:atIndex:", void, .{ _storeActionOptions, _colorAttachmentIndex });
    }

    pub fn setDepthStoreActionOptions(_self: *@This(), _storeActionOptions: StoreActionOptions) void {
        return objc.msgSend(_self, "setDepthStoreActionOptions:", void, .{_storeActionOptions});
    }

    pub fn setStencilStoreActionOptions(_self: *@This(), _storeActionOptions: StoreActionOptions) void {
        return objc.msgSend(_self, "setStencilStoreActionOptions:", void, .{_storeActionOptions});
    }

    pub fn setObjectBytesLengthAtIndex(_self: *@This(), _bytes: ?*anyopaque, _length: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setObjectBytes:length:atIndex:", void, .{ _bytes, _length, _index });
    }

    pub fn setObjectBufferOffsetAtIndex(_self: *@This(), _buffer: ?*anyopaque, _offset: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setObjectBuffer:offset:atIndex:", void, .{ _buffer, _offset, _index });
    }

    pub fn setObjectBufferOffsetAtIndex(_self: *@This(), _offset: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setObjectBufferOffset:atIndex:", void, .{ _offset, _index });
    }

    pub fn setObjectBuffersOffsetsWithRange(_self: *@This(), _buffers: ?*?*anyopaque, _offsets: ?*objc.NSUInteger, _range: foundation.Range) void {
        return objc.msgSend(_self, "setObjectBuffers:offsets:withRange:", void, .{ _buffers, _offsets, _range });
    }

    pub fn setObjectTextureAtIndex(_self: *@This(), _texture: ?*anyopaque, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setObjectTexture:atIndex:", void, .{ _texture, _index });
    }

    pub fn setObjectTexturesWithRange(_self: *@This(), _textures: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setObjectTextures:withRange:", void, .{ _textures, _range });
    }

    pub fn setObjectSamplerStateAtIndex(_self: *@This(), _sampler: ?*anyopaque, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setObjectSamplerState:atIndex:", void, .{ _sampler, _index });
    }

    pub fn setObjectSamplerStatesWithRange(_self: *@This(), _samplers: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setObjectSamplerStates:withRange:", void, .{ _samplers, _range });
    }

    pub fn setObjectSamplerStateLodMinClampLodMaxClampAtIndex(
        _self: *@This(),
        _sampler: ?*anyopaque,
        _lodMinClamp: f32,
        _lodMaxClamp: f32,
        _index: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "setObjectSamplerState:lodMinClamp:lodMaxClamp:atIndex:", void, .{
            _sampler,
            _lodMinClamp,
            _lodMaxClamp,
            _index,
        });
    }

    pub fn setObjectSamplerStatesLodMinClampsLodMaxClampsWithRange(
        _self: *@This(),
        _samplers: ?*?*anyopaque,
        _lodMinClamps: ?*f32,
        _lodMaxClamps: ?*f32,
        _range: foundation.Range,
    ) void {
        return objc.msgSend(_self, "setObjectSamplerStates:lodMinClamps:lodMaxClamps:withRange:", void, .{
            _samplers,
            _lodMinClamps,
            _lodMaxClamps,
            _range,
        });
    }

    pub fn setObjectThreadgroupMemoryLengthAtIndex(_self: *@This(), _length: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setObjectThreadgroupMemoryLength:atIndex:", void, .{ _length, _index });
    }

    pub fn setMeshBytesLengthAtIndex(_self: *@This(), _bytes: ?*anyopaque, _length: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMeshBytes:length:atIndex:", void, .{ _bytes, _length, _index });
    }

    pub fn setMeshBufferOffsetAtIndex(_self: *@This(), _buffer: ?*anyopaque, _offset: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMeshBuffer:offset:atIndex:", void, .{ _buffer, _offset, _index });
    }

    pub fn setMeshBufferOffsetAtIndex(_self: *@This(), _offset: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMeshBufferOffset:atIndex:", void, .{ _offset, _index });
    }

    pub fn setMeshBuffersOffsetsWithRange(_self: *@This(), _buffers: ?*?*anyopaque, _offsets: ?*objc.NSUInteger, _range: foundation.Range) void {
        return objc.msgSend(_self, "setMeshBuffers:offsets:withRange:", void, .{ _buffers, _offsets, _range });
    }

    pub fn setMeshTextureAtIndex(_self: *@This(), _texture: ?*anyopaque, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMeshTexture:atIndex:", void, .{ _texture, _index });
    }

    pub fn setMeshTexturesWithRange(_self: *@This(), _textures: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setMeshTextures:withRange:", void, .{ _textures, _range });
    }

    pub fn setMeshSamplerStateAtIndex(_self: *@This(), _sampler: ?*anyopaque, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMeshSamplerState:atIndex:", void, .{ _sampler, _index });
    }

    pub fn setMeshSamplerStatesWithRange(_self: *@This(), _samplers: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setMeshSamplerStates:withRange:", void, .{ _samplers, _range });
    }

    pub fn setMeshSamplerStateLodMinClampLodMaxClampAtIndex(
        _self: *@This(),
        _sampler: ?*anyopaque,
        _lodMinClamp: f32,
        _lodMaxClamp: f32,
        _index: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "setMeshSamplerState:lodMinClamp:lodMaxClamp:atIndex:", void, .{
            _sampler,
            _lodMinClamp,
            _lodMaxClamp,
            _index,
        });
    }

    pub fn setMeshSamplerStatesLodMinClampsLodMaxClampsWithRange(
        _self: *@This(),
        _samplers: ?*?*anyopaque,
        _lodMinClamps: ?*f32,
        _lodMaxClamps: ?*f32,
        _range: foundation.Range,
    ) void {
        return objc.msgSend(_self, "setMeshSamplerStates:lodMinClamps:lodMaxClamps:withRange:", void, .{
            _samplers,
            _lodMinClamps,
            _lodMaxClamps,
            _range,
        });
    }

    pub fn drawMeshThreadgroupsThreadsPerObjectThreadgroupThreadsPerMeshThreadgroup(_self: *@This(), _threadgroupsPerGrid: Size, _threadsPerObjectThreadgroup: Size, _threadsPerMeshThreadgroup: Size) void {
        return objc.msgSend(_self, "drawMeshThreadgroups:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:", void, .{ _threadgroupsPerGrid, _threadsPerObjectThreadgroup, _threadsPerMeshThreadgroup });
    }

    pub fn drawMeshThreadsThreadsPerObjectThreadgroupThreadsPerMeshThreadgroup(_self: *@This(), _threadsPerGrid: Size, _threadsPerObjectThreadgroup: Size, _threadsPerMeshThreadgroup: Size) void {
        return objc.msgSend(_self, "drawMeshThreads:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:", void, .{ _threadsPerGrid, _threadsPerObjectThreadgroup, _threadsPerMeshThreadgroup });
    }

    pub fn drawMeshThreadgroupsWithIndirectBufferIndirectBufferOffsetThreadsPerObjectThreadgroupThreadsPerMeshThreadgroup(
        _self: *@This(),
        _indirectBuffer: ?*anyopaque,
        _indirectBufferOffset: objc.NSUInteger,
        _threadsPerObjectThreadgroup: Size,
        _threadsPerMeshThreadgroup: Size,
    ) void {
        return objc.msgSend(_self, "drawMeshThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:", void, .{
            _indirectBuffer,
            _indirectBufferOffset,
            _threadsPerObjectThreadgroup,
            _threadsPerMeshThreadgroup,
        });
    }

    pub fn drawPrimitivesVertexStartVertexCountInstanceCount(
        _self: *@This(),
        _primitiveType: PrimitiveType,
        _vertexStart: objc.NSUInteger,
        _vertexCount: objc.NSUInteger,
        _instanceCount: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "drawPrimitives:vertexStart:vertexCount:instanceCount:", void, .{
            _primitiveType,
            _vertexStart,
            _vertexCount,
            _instanceCount,
        });
    }

    pub fn drawPrimitivesVertexStartVertexCount(_self: *@This(), _primitiveType: PrimitiveType, _vertexStart: objc.NSUInteger, _vertexCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "drawPrimitives:vertexStart:vertexCount:", void, .{ _primitiveType, _vertexStart, _vertexCount });
    }

    pub fn drawIndexedPrimitivesIndexCountIndexTypeIndexBufferIndexBufferOffsetInstanceCount(
        _self: *@This(),
        _primitiveType: PrimitiveType,
        _indexCount: objc.NSUInteger,
        _indexType: IndexType,
        _indexBuffer: ?*anyopaque,
        _indexBufferOffset: objc.NSUInteger,
        _instanceCount: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:", void, .{
            _primitiveType,
            _indexCount,
            _indexType,
            _indexBuffer,
            _indexBufferOffset,
            _instanceCount,
        });
    }

    pub fn drawIndexedPrimitivesIndexCountIndexTypeIndexBufferIndexBufferOffset(
        _self: *@This(),
        _primitiveType: PrimitiveType,
        _indexCount: objc.NSUInteger,
        _indexType: IndexType,
        _indexBuffer: ?*anyopaque,
        _indexBufferOffset: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:", void, .{
            _primitiveType,
            _indexCount,
            _indexType,
            _indexBuffer,
            _indexBufferOffset,
        });
    }

    pub fn drawPrimitivesVertexStartVertexCountInstanceCountBaseInstance(
        _self: *@This(),
        _primitiveType: PrimitiveType,
        _vertexStart: objc.NSUInteger,
        _vertexCount: objc.NSUInteger,
        _instanceCount: objc.NSUInteger,
        _baseInstance: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:", void, .{
            _primitiveType,
            _vertexStart,
            _vertexCount,
            _instanceCount,
            _baseInstance,
        });
    }

    pub fn drawIndexedPrimitivesIndexCountIndexTypeIndexBufferIndexBufferOffsetInstanceCountBaseVertexBaseInstance(
        _self: *@This(),
        _primitiveType: PrimitiveType,
        _indexCount: objc.NSUInteger,
        _indexType: IndexType,
        _indexBuffer: ?*anyopaque,
        _indexBufferOffset: objc.NSUInteger,
        _instanceCount: objc.NSUInteger,
        _baseVertex: objc.NSInteger,
        _baseInstance: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:", void, .{
            _primitiveType,
            _indexCount,
            _indexType,
            _indexBuffer,
            _indexBufferOffset,
            _instanceCount,
            _baseVertex,
            _baseInstance,
        });
    }

    pub fn drawPrimitivesIndirectBufferIndirectBufferOffset(_self: *@This(), _primitiveType: PrimitiveType, _indirectBuffer: ?*anyopaque, _indirectBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "drawPrimitives:indirectBuffer:indirectBufferOffset:", void, .{ _primitiveType, _indirectBuffer, _indirectBufferOffset });
    }

    pub fn drawIndexedPrimitivesIndexTypeIndexBufferIndexBufferOffsetIndirectBufferIndirectBufferOffset(
        _self: *@This(),
        _primitiveType: PrimitiveType,
        _indexType: IndexType,
        _indexBuffer: ?*anyopaque,
        _indexBufferOffset: objc.NSUInteger,
        _indirectBuffer: ?*anyopaque,
        _indirectBufferOffset: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "drawIndexedPrimitives:indexType:indexBuffer:indexBufferOffset:indirectBuffer:indirectBufferOffset:", void, .{
            _primitiveType,
            _indexType,
            _indexBuffer,
            _indexBufferOffset,
            _indirectBuffer,
            _indirectBufferOffset,
        });
    }

    pub fn textureBarrier(_self: *@This()) void {
        return objc.msgSend(_self, "textureBarrier", void, .{});
    }

    pub fn updateFenceAfterStages(_self: *@This(), _fence: ?*anyopaque, _stages: RenderStages) void {
        return objc.msgSend(_self, "updateFence:afterStages:", void, .{ _fence, _stages });
    }

    pub fn waitForFenceBeforeStages(_self: *@This(), _fence: ?*anyopaque, _stages: RenderStages) void {
        return objc.msgSend(_self, "waitForFence:beforeStages:", void, .{ _fence, _stages });
    }

    pub fn setTessellationFactorBufferOffsetInstanceStride(_self: *@This(), _buffer: ?*anyopaque, _offset: objc.NSUInteger, _instanceStride: objc.NSUInteger) void {
        return objc.msgSend(_self, "setTessellationFactorBuffer:offset:instanceStride:", void, .{ _buffer, _offset, _instanceStride });
    }

    pub fn setTessellationFactorScale(_self: *@This(), _scale: f32) void {
        return objc.msgSend(_self, "setTessellationFactorScale:", void, .{_scale});
    }

    pub fn drawPatchesPatchStartPatchCountPatchIndexBufferPatchIndexBufferOffsetInstanceCountBaseInstance(
        _self: *@This(),
        _numberOfPatchControlPoints: objc.NSUInteger,
        _patchStart: objc.NSUInteger,
        _patchCount: objc.NSUInteger,
        _patchIndexBuffer: ?*anyopaque,
        _patchIndexBufferOffset: objc.NSUInteger,
        _instanceCount: objc.NSUInteger,
        _baseInstance: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:", void, .{
            _numberOfPatchControlPoints,
            _patchStart,
            _patchCount,
            _patchIndexBuffer,
            _patchIndexBufferOffset,
            _instanceCount,
            _baseInstance,
        });
    }

    pub fn drawPatchesPatchIndexBufferPatchIndexBufferOffsetIndirectBufferIndirectBufferOffset(
        _self: *@This(),
        _numberOfPatchControlPoints: objc.NSUInteger,
        _patchIndexBuffer: ?*anyopaque,
        _patchIndexBufferOffset: objc.NSUInteger,
        _indirectBuffer: ?*anyopaque,
        _indirectBufferOffset: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "drawPatches:patchIndexBuffer:patchIndexBufferOffset:indirectBuffer:indirectBufferOffset:", void, .{
            _numberOfPatchControlPoints,
            _patchIndexBuffer,
            _patchIndexBufferOffset,
            _indirectBuffer,
            _indirectBufferOffset,
        });
    }

    pub fn drawIndexedPatchesPatchStartPatchCountPatchIndexBufferPatchIndexBufferOffsetControlPointIndexBufferControlPointIndexBufferOffsetInstanceCountBaseInstance(
        _self: *@This(),
        _numberOfPatchControlPoints: objc.NSUInteger,
        _patchStart: objc.NSUInteger,
        _patchCount: objc.NSUInteger,
        _patchIndexBuffer: ?*anyopaque,
        _patchIndexBufferOffset: objc.NSUInteger,
        _controlPointIndexBuffer: ?*anyopaque,
        _controlPointIndexBufferOffset: objc.NSUInteger,
        _instanceCount: objc.NSUInteger,
        _baseInstance: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:", void, .{
            _numberOfPatchControlPoints,
            _patchStart,
            _patchCount,
            _patchIndexBuffer,
            _patchIndexBufferOffset,
            _controlPointIndexBuffer,
            _controlPointIndexBufferOffset,
            _instanceCount,
            _baseInstance,
        });
    }

    pub fn drawIndexedPatchesPatchIndexBufferPatchIndexBufferOffsetControlPointIndexBufferControlPointIndexBufferOffsetIndirectBufferIndirectBufferOffset(
        _self: *@This(),
        _numberOfPatchControlPoints: objc.NSUInteger,
        _patchIndexBuffer: ?*anyopaque,
        _patchIndexBufferOffset: objc.NSUInteger,
        _controlPointIndexBuffer: ?*anyopaque,
        _controlPointIndexBufferOffset: objc.NSUInteger,
        _indirectBuffer: ?*anyopaque,
        _indirectBufferOffset: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "drawIndexedPatches:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:indirectBuffer:indirectBufferOffset:", void, .{
            _numberOfPatchControlPoints,
            _patchIndexBuffer,
            _patchIndexBufferOffset,
            _controlPointIndexBuffer,
            _controlPointIndexBufferOffset,
            _indirectBuffer,
            _indirectBufferOffset,
        });
    }

    pub fn setTileBytesLengthAtIndex(_self: *@This(), _bytes: ?*anyopaque, _length: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setTileBytes:length:atIndex:", void, .{ _bytes, _length, _index });
    }

    pub fn setTileBufferOffsetAtIndex(_self: *@This(), _buffer: ?*anyopaque, _offset: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setTileBuffer:offset:atIndex:", void, .{ _buffer, _offset, _index });
    }

    pub fn setTileBufferOffsetAtIndex(_self: *@This(), _offset: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setTileBufferOffset:atIndex:", void, .{ _offset, _index });
    }

    pub fn setTileBuffersOffsetsWithRange(_self: *@This(), _buffers: ?*?*anyopaque, _offsets: ?*objc.NSUInteger, _range: foundation.Range) void {
        return objc.msgSend(_self, "setTileBuffers:offsets:withRange:", void, .{ _buffers, _offsets, _range });
    }

    pub fn setTileTextureAtIndex(_self: *@This(), _texture: ?*anyopaque, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setTileTexture:atIndex:", void, .{ _texture, _index });
    }

    pub fn setTileTexturesWithRange(_self: *@This(), _textures: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setTileTextures:withRange:", void, .{ _textures, _range });
    }

    pub fn setTileSamplerStateAtIndex(_self: *@This(), _sampler: ?*anyopaque, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setTileSamplerState:atIndex:", void, .{ _sampler, _index });
    }

    pub fn setTileSamplerStatesWithRange(_self: *@This(), _samplers: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setTileSamplerStates:withRange:", void, .{ _samplers, _range });
    }

    pub fn setTileSamplerStateLodMinClampLodMaxClampAtIndex(
        _self: *@This(),
        _sampler: ?*anyopaque,
        _lodMinClamp: f32,
        _lodMaxClamp: f32,
        _index: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "setTileSamplerState:lodMinClamp:lodMaxClamp:atIndex:", void, .{
            _sampler,
            _lodMinClamp,
            _lodMaxClamp,
            _index,
        });
    }

    pub fn setTileSamplerStatesLodMinClampsLodMaxClampsWithRange(
        _self: *@This(),
        _samplers: ?*?*anyopaque,
        _lodMinClamps: ?*f32,
        _lodMaxClamps: ?*f32,
        _range: foundation.Range,
    ) void {
        return objc.msgSend(_self, "setTileSamplerStates:lodMinClamps:lodMaxClamps:withRange:", void, .{
            _samplers,
            _lodMinClamps,
            _lodMaxClamps,
            _range,
        });
    }

    pub fn setTileVisibleFunctionTableAtBufferIndex(_self: *@This(), _functionTable: ?*anyopaque, _bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setTileVisibleFunctionTable:atBufferIndex:", void, .{ _functionTable, _bufferIndex });
    }

    pub fn setTileVisibleFunctionTablesWithBufferRange(_self: *@This(), _functionTables: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setTileVisibleFunctionTables:withBufferRange:", void, .{ _functionTables, _range });
    }

    pub fn setTileIntersectionFunctionTableAtBufferIndex(_self: *@This(), _intersectionFunctionTable: ?*anyopaque, _bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setTileIntersectionFunctionTable:atBufferIndex:", void, .{ _intersectionFunctionTable, _bufferIndex });
    }

    pub fn setTileIntersectionFunctionTablesWithBufferRange(_self: *@This(), _intersectionFunctionTables: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setTileIntersectionFunctionTables:withBufferRange:", void, .{ _intersectionFunctionTables, _range });
    }

    pub fn setTileAccelerationStructureAtBufferIndex(_self: *@This(), _accelerationStructure: ?*anyopaque, _bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setTileAccelerationStructure:atBufferIndex:", void, .{ _accelerationStructure, _bufferIndex });
    }

    pub fn dispatchThreadsPerTile(_self: *@This(), _threadsPerTile: Size) void {
        return objc.msgSend(_self, "dispatchThreadsPerTile:", void, .{_threadsPerTile});
    }

    pub fn setThreadgroupMemoryLengthOffsetAtIndex(_self: *@This(), _length: objc.NSUInteger, _offset: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setThreadgroupMemoryLength:offset:atIndex:", void, .{ _length, _offset, _index });
    }

    pub fn useResourceUsage(_self: *@This(), _resource: ?*anyopaque, _usage: ResourceUsage) void {
        return objc.msgSend(_self, "useResource:usage:", void, .{ _resource, _usage });
    }

    pub fn useResourcesCountUsage(_self: *@This(), _resources: ?*?*anyopaque, _count: objc.NSUInteger, _usage: ResourceUsage) void {
        return objc.msgSend(_self, "useResources:count:usage:", void, .{ _resources, _count, _usage });
    }

    pub fn useResourceUsageStages(_self: *@This(), _resource: ?*anyopaque, _usage: ResourceUsage, _stages: RenderStages) void {
        return objc.msgSend(_self, "useResource:usage:stages:", void, .{ _resource, _usage, _stages });
    }

    pub fn useResourcesCountUsageStages(
        _self: *@This(),
        _resources: ?*?*anyopaque,
        _count: objc.NSUInteger,
        _usage: ResourceUsage,
        _stages: RenderStages,
    ) void {
        return objc.msgSend(_self, "useResources:count:usage:stages:", void, .{
            _resources,
            _count,
            _usage,
            _stages,
        });
    }

    pub fn useHeap(_self: *@This(), _heap: ?*anyopaque) void {
        return objc.msgSend(_self, "useHeap:", void, .{_heap});
    }

    pub fn useHeapsCount(_self: *@This(), _heaps: ?*?*anyopaque, _count: objc.NSUInteger) void {
        return objc.msgSend(_self, "useHeaps:count:", void, .{ _heaps, _count });
    }

    pub fn useHeapStages(_self: *@This(), _heap: ?*anyopaque, _stages: RenderStages) void {
        return objc.msgSend(_self, "useHeap:stages:", void, .{ _heap, _stages });
    }

    pub fn useHeapsCountStages(_self: *@This(), _heaps: ?*?*anyopaque, _count: objc.NSUInteger, _stages: RenderStages) void {
        return objc.msgSend(_self, "useHeaps:count:stages:", void, .{ _heaps, _count, _stages });
    }

    pub fn executeCommandsInBufferWithRange(_self: *@This(), _indirectCommandBuffer: ?*anyopaque, _executionRange: foundation.Range) void {
        return objc.msgSend(_self, "executeCommandsInBuffer:withRange:", void, .{ _indirectCommandBuffer, _executionRange });
    }

    pub fn executeCommandsInBufferIndirectBufferIndirectBufferOffset(_self: *@This(), _indirectCommandbuffer: ?*anyopaque, _indirectRangeBuffer: ?*anyopaque, _indirectBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "executeCommandsInBuffer:indirectBuffer:indirectBufferOffset:", void, .{ _indirectCommandbuffer, _indirectRangeBuffer, _indirectBufferOffset });
    }

    pub fn memoryBarrierWithScopeAfterStagesBeforeStages(_self: *@This(), _scope: BarrierScope, _after: RenderStages, _before: RenderStages) void {
        return objc.msgSend(_self, "memoryBarrierWithScope:afterStages:beforeStages:", void, .{ _scope, _after, _before });
    }

    pub fn memoryBarrierWithResourcesCountAfterStagesBeforeStages(
        _self: *@This(),
        _resources: ?*?*anyopaque,
        _count: objc.NSUInteger,
        _after: RenderStages,
        _before: RenderStages,
    ) void {
        return objc.msgSend(_self, "memoryBarrierWithResources:count:afterStages:beforeStages:", void, .{
            _resources,
            _count,
            _after,
            _before,
        });
    }

    pub fn sampleCountersInBufferAtSampleIndexWithBarrier(_self: *@This(), _sampleBuffer: ?*anyopaque, _sampleIndex: objc.NSUInteger, _barrier: objc.BOOL) void {
        return objc.msgSend(_self, "sampleCountersInBuffer:atSampleIndex:withBarrier:", void, .{ _sampleBuffer, _sampleIndex, _barrier });
    }

    pub fn tileWidth(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "tileWidth", objc.NSUInteger, .{});
    }

    pub fn tileHeight(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "tileHeight", objc.NSUInteger, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLFunctionHandle?language=objc
pub const FunctionHandle = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn functionType(_self: *@This()) FunctionType {
        return objc.msgSend(_self, "functionType", FunctionType, .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLVisibleFunctionTableDescriptor?language=objc
pub const VisibleFunctionTableDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLVisibleFunctionTableDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn visibleFunctionTableDescriptor(_self: *@This()) ?*VisibleFunctionTableDescriptor {
        return objc.msgSend(_self, "visibleFunctionTableDescriptor", ?*VisibleFunctionTableDescriptor, .{});
    }

    pub fn functionCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "functionCount", objc.NSUInteger, .{});
    }

    pub fn setFunctionCount(_self: *@This(), _functionCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setFunctionCount:", void, .{_functionCount});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLVisibleFunctionTable?language=objc
pub const VisibleFunctionTable = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        Resource,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn allocatedSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "allocatedSize", objc.NSUInteger, .{});
    }

    pub fn setPurgeableState(_self: *@This(), _state: PurgeableState) PurgeableState {
        return objc.msgSend(_self, "setPurgeableState:", PurgeableState, .{_state});
    }

    pub fn makeAliasable(_self: *@This()) void {
        return objc.msgSend(_self, "makeAliasable", void, .{});
    }

    pub fn isAliasable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAliasable", objc.BOOL, .{});
    }

    pub fn setOwnerWithIdentity(_self: *@This(), _task_id_token: objc.task_id_token_t) objc.kern_return_t {
        return objc.msgSend(_self, "setOwnerWithIdentity:", objc.kern_return_t, .{_task_id_token});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn cpuCacheMode(_self: *@This()) CPUCacheMode {
        return objc.msgSend(_self, "cpuCacheMode", CPUCacheMode, .{});
    }

    pub fn storageMode(_self: *@This()) StorageMode {
        return objc.msgSend(_self, "storageMode", StorageMode, .{});
    }

    pub fn hazardTrackingMode(_self: *@This()) HazardTrackingMode {
        return objc.msgSend(_self, "hazardTrackingMode", HazardTrackingMode, .{});
    }

    pub fn resourceOptions(_self: *@This()) ResourceOptions {
        return objc.msgSend(_self, "resourceOptions", ResourceOptions, .{});
    }

    pub fn heap(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "heap", ?*anyopaque, .{});
    }

    pub fn heapOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "heapOffset", objc.NSUInteger, .{});
    }

    pub fn setFunctionAtIndex(_self: *@This(), _function: ?*anyopaque, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setFunction:atIndex:", void, .{ _function, _index });
    }

    pub fn setFunctionsWithRange(_self: *@This(), _functions: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setFunctions:withRange:", void, .{ _functions, _range });
    }

    pub fn gpuResourceID(_self: *@This()) ResourceID {
        return objc.msgSend(_self, "gpuResourceID", ResourceID, .{});
    }
};

pub const BlendFactor = enum(objc.NSUInteger) {
    Zero = 0,
    One = 1,
    SourceColor = 2,
    OneMinusSourceColor = 3,
    SourceAlpha = 4,
    OneMinusSourceAlpha = 5,
    DestinationColor = 6,
    OneMinusDestinationColor = 7,
    DestinationAlpha = 8,
    OneMinusDestinationAlpha = 9,
    SourceAlphaSaturated = 10,
    BlendColor = 11,
    OneMinusBlendColor = 12,
    BlendAlpha = 13,
    OneMinusBlendAlpha = 14,
    Source1Color = 15,
    OneMinusSource1Color = 16,
    Source1Alpha = 17,
    OneMinusSource1Alpha = 18,
};

pub const BlendOperation = enum(objc.NSUInteger) {
    Add = 0,
    Subtract = 1,
    ReverseSubtract = 2,
    Min = 3,
    Max = 4,
};

pub const ColorWriteMask = enum(objc.NSUInteger) {
    None = 0,
    Red = 8,
    Green = 4,
    Blue = 2,
    Alpha = 1,
    All = 15,
};

pub const PrimitiveTopologyClass = enum(objc.NSUInteger) {
    Unspecified = 0,
    Point = 1,
    Line = 2,
    Triangle = 3,
};

pub const TessellationPartitionMode = enum(objc.NSUInteger) {
    Pow2 = 0,
    Integer = 1,
    FractionalOdd = 2,
    FractionalEven = 3,
};

pub const TessellationFactorStepFunction = enum(objc.NSUInteger) {
    Constant = 0,
    PerPatch = 1,
    PerInstance = 2,
    PerPatchAndPerInstance = 3,
};

pub const TessellationFactorFormat = enum(objc.NSUInteger) {
    Half = 0,
};

pub const TessellationControlPointIndexType = enum(objc.NSUInteger) {
    None = 0,
    UInt16 = 1,
    UInt32 = 2,
};

/// https://developer.apple.com/documentation/Metal/MTLRenderPipelineColorAttachmentDescriptor?language=objc
pub const RenderPipelineColorAttachmentDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLRenderPipelineColorAttachmentDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn pixelFormat(_self: *@This()) PixelFormat {
        return objc.msgSend(_self, "pixelFormat", PixelFormat, .{});
    }

    pub fn setPixelFormat(_self: *@This(), _pixelFormat: PixelFormat) void {
        return objc.msgSend(_self, "setPixelFormat:", void, .{_pixelFormat});
    }

    pub fn isBlendingEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isBlendingEnabled", objc.BOOL, .{});
    }

    pub fn setBlendingEnabled(_self: *@This(), _blendingEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setBlendingEnabled:", void, .{_blendingEnabled});
    }

    pub fn sourceRGBBlendFactor(_self: *@This()) BlendFactor {
        return objc.msgSend(_self, "sourceRGBBlendFactor", BlendFactor, .{});
    }

    pub fn setSourceRGBBlendFactor(_self: *@This(), _sourceRGBBlendFactor: BlendFactor) void {
        return objc.msgSend(_self, "setSourceRGBBlendFactor:", void, .{_sourceRGBBlendFactor});
    }

    pub fn destinationRGBBlendFactor(_self: *@This()) BlendFactor {
        return objc.msgSend(_self, "destinationRGBBlendFactor", BlendFactor, .{});
    }

    pub fn setDestinationRGBBlendFactor(_self: *@This(), _destinationRGBBlendFactor: BlendFactor) void {
        return objc.msgSend(_self, "setDestinationRGBBlendFactor:", void, .{_destinationRGBBlendFactor});
    }

    pub fn rgbBlendOperation(_self: *@This()) BlendOperation {
        return objc.msgSend(_self, "rgbBlendOperation", BlendOperation, .{});
    }

    pub fn setRgbBlendOperation(_self: *@This(), _rgbBlendOperation: BlendOperation) void {
        return objc.msgSend(_self, "setRgbBlendOperation:", void, .{_rgbBlendOperation});
    }

    pub fn sourceAlphaBlendFactor(_self: *@This()) BlendFactor {
        return objc.msgSend(_self, "sourceAlphaBlendFactor", BlendFactor, .{});
    }

    pub fn setSourceAlphaBlendFactor(_self: *@This(), _sourceAlphaBlendFactor: BlendFactor) void {
        return objc.msgSend(_self, "setSourceAlphaBlendFactor:", void, .{_sourceAlphaBlendFactor});
    }

    pub fn destinationAlphaBlendFactor(_self: *@This()) BlendFactor {
        return objc.msgSend(_self, "destinationAlphaBlendFactor", BlendFactor, .{});
    }

    pub fn setDestinationAlphaBlendFactor(_self: *@This(), _destinationAlphaBlendFactor: BlendFactor) void {
        return objc.msgSend(_self, "setDestinationAlphaBlendFactor:", void, .{_destinationAlphaBlendFactor});
    }

    pub fn alphaBlendOperation(_self: *@This()) BlendOperation {
        return objc.msgSend(_self, "alphaBlendOperation", BlendOperation, .{});
    }

    pub fn setAlphaBlendOperation(_self: *@This(), _alphaBlendOperation: BlendOperation) void {
        return objc.msgSend(_self, "setAlphaBlendOperation:", void, .{_alphaBlendOperation});
    }

    pub fn writeMask(_self: *@This()) ColorWriteMask {
        return objc.msgSend(_self, "writeMask", ColorWriteMask, .{});
    }

    pub fn setWriteMask(_self: *@This(), _writeMask: ColorWriteMask) void {
        return objc.msgSend(_self, "setWriteMask:", void, .{_writeMask});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLRenderPipelineReflection?language=objc
pub const RenderPipelineReflection = opaque {
    pub const InternalInfo = objc.ExternClass("MTLRenderPipelineReflection", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn vertexBindings(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "vertexBindings", ?*anyopaque, .{});
    }

    pub fn fragmentBindings(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "fragmentBindings", ?*anyopaque, .{});
    }

    pub fn tileBindings(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "tileBindings", ?*anyopaque, .{});
    }

    pub fn objectBindings(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "objectBindings", ?*anyopaque, .{});
    }

    pub fn meshBindings(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "meshBindings", ?*anyopaque, .{});
    }

    pub fn vertexArguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "vertexArguments", ?*anyopaque, .{});
    }

    pub fn fragmentArguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "fragmentArguments", ?*anyopaque, .{});
    }

    pub fn tileArguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "tileArguments", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLRenderPipelineDescriptor?language=objc
pub const RenderPipelineDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLRenderPipelineDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn reset(_self: *@This()) void {
        return objc.msgSend(_self, "reset", void, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn vertexFunction(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "vertexFunction", ?*anyopaque, .{});
    }

    pub fn setVertexFunction(_self: *@This(), _vertexFunction: ?*anyopaque) void {
        return objc.msgSend(_self, "setVertexFunction:", void, .{_vertexFunction});
    }

    pub fn fragmentFunction(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "fragmentFunction", ?*anyopaque, .{});
    }

    pub fn setFragmentFunction(_self: *@This(), _fragmentFunction: ?*anyopaque) void {
        return objc.msgSend(_self, "setFragmentFunction:", void, .{_fragmentFunction});
    }

    pub fn vertexDescriptor(_self: *@This()) ?*VertexDescriptor {
        return objc.msgSend(_self, "vertexDescriptor", ?*VertexDescriptor, .{});
    }

    pub fn setVertexDescriptor(_self: *@This(), _vertexDescriptor: ?*VertexDescriptor) void {
        return objc.msgSend(_self, "setVertexDescriptor:", void, .{_vertexDescriptor});
    }

    pub fn sampleCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "sampleCount", objc.NSUInteger, .{});
    }

    pub fn setSampleCount(_self: *@This(), _sampleCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setSampleCount:", void, .{_sampleCount});
    }

    pub fn rasterSampleCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "rasterSampleCount", objc.NSUInteger, .{});
    }

    pub fn setRasterSampleCount(_self: *@This(), _rasterSampleCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setRasterSampleCount:", void, .{_rasterSampleCount});
    }

    pub fn isAlphaToCoverageEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAlphaToCoverageEnabled", objc.BOOL, .{});
    }

    pub fn setAlphaToCoverageEnabled(_self: *@This(), _alphaToCoverageEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setAlphaToCoverageEnabled:", void, .{_alphaToCoverageEnabled});
    }

    pub fn isAlphaToOneEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAlphaToOneEnabled", objc.BOOL, .{});
    }

    pub fn setAlphaToOneEnabled(_self: *@This(), _alphaToOneEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setAlphaToOneEnabled:", void, .{_alphaToOneEnabled});
    }

    pub fn isRasterizationEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRasterizationEnabled", objc.BOOL, .{});
    }

    pub fn setRasterizationEnabled(_self: *@This(), _rasterizationEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setRasterizationEnabled:", void, .{_rasterizationEnabled});
    }

    pub fn maxVertexAmplificationCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxVertexAmplificationCount", objc.NSUInteger, .{});
    }

    pub fn setMaxVertexAmplificationCount(_self: *@This(), _maxVertexAmplificationCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaxVertexAmplificationCount:", void, .{_maxVertexAmplificationCount});
    }

    pub fn colorAttachments(_self: *@This()) ?*RenderPipelineColorAttachmentDescriptorArray {
        return objc.msgSend(_self, "colorAttachments", ?*RenderPipelineColorAttachmentDescriptorArray, .{});
    }

    pub fn depthAttachmentPixelFormat(_self: *@This()) PixelFormat {
        return objc.msgSend(_self, "depthAttachmentPixelFormat", PixelFormat, .{});
    }

    pub fn setDepthAttachmentPixelFormat(_self: *@This(), _depthAttachmentPixelFormat: PixelFormat) void {
        return objc.msgSend(_self, "setDepthAttachmentPixelFormat:", void, .{_depthAttachmentPixelFormat});
    }

    pub fn stencilAttachmentPixelFormat(_self: *@This()) PixelFormat {
        return objc.msgSend(_self, "stencilAttachmentPixelFormat", PixelFormat, .{});
    }

    pub fn setStencilAttachmentPixelFormat(_self: *@This(), _stencilAttachmentPixelFormat: PixelFormat) void {
        return objc.msgSend(_self, "setStencilAttachmentPixelFormat:", void, .{_stencilAttachmentPixelFormat});
    }

    pub fn inputPrimitiveTopology(_self: *@This()) PrimitiveTopologyClass {
        return objc.msgSend(_self, "inputPrimitiveTopology", PrimitiveTopologyClass, .{});
    }

    pub fn setInputPrimitiveTopology(_self: *@This(), _inputPrimitiveTopology: PrimitiveTopologyClass) void {
        return objc.msgSend(_self, "setInputPrimitiveTopology:", void, .{_inputPrimitiveTopology});
    }

    pub fn tessellationPartitionMode(_self: *@This()) TessellationPartitionMode {
        return objc.msgSend(_self, "tessellationPartitionMode", TessellationPartitionMode, .{});
    }

    pub fn setTessellationPartitionMode(_self: *@This(), _tessellationPartitionMode: TessellationPartitionMode) void {
        return objc.msgSend(_self, "setTessellationPartitionMode:", void, .{_tessellationPartitionMode});
    }

    pub fn maxTessellationFactor(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxTessellationFactor", objc.NSUInteger, .{});
    }

    pub fn setMaxTessellationFactor(_self: *@This(), _maxTessellationFactor: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaxTessellationFactor:", void, .{_maxTessellationFactor});
    }

    pub fn isTessellationFactorScaleEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isTessellationFactorScaleEnabled", objc.BOOL, .{});
    }

    pub fn setTessellationFactorScaleEnabled(_self: *@This(), _tessellationFactorScaleEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setTessellationFactorScaleEnabled:", void, .{_tessellationFactorScaleEnabled});
    }

    pub fn tessellationFactorFormat(_self: *@This()) TessellationFactorFormat {
        return objc.msgSend(_self, "tessellationFactorFormat", TessellationFactorFormat, .{});
    }

    pub fn setTessellationFactorFormat(_self: *@This(), _tessellationFactorFormat: TessellationFactorFormat) void {
        return objc.msgSend(_self, "setTessellationFactorFormat:", void, .{_tessellationFactorFormat});
    }

    pub fn tessellationControlPointIndexType(_self: *@This()) TessellationControlPointIndexType {
        return objc.msgSend(_self, "tessellationControlPointIndexType", TessellationControlPointIndexType, .{});
    }

    pub fn setTessellationControlPointIndexType(_self: *@This(), _tessellationControlPointIndexType: TessellationControlPointIndexType) void {
        return objc.msgSend(_self, "setTessellationControlPointIndexType:", void, .{_tessellationControlPointIndexType});
    }

    pub fn tessellationFactorStepFunction(_self: *@This()) TessellationFactorStepFunction {
        return objc.msgSend(_self, "tessellationFactorStepFunction", TessellationFactorStepFunction, .{});
    }

    pub fn setTessellationFactorStepFunction(_self: *@This(), _tessellationFactorStepFunction: TessellationFactorStepFunction) void {
        return objc.msgSend(_self, "setTessellationFactorStepFunction:", void, .{_tessellationFactorStepFunction});
    }

    pub fn tessellationOutputWindingOrder(_self: *@This()) Winding {
        return objc.msgSend(_self, "tessellationOutputWindingOrder", Winding, .{});
    }

    pub fn setTessellationOutputWindingOrder(_self: *@This(), _tessellationOutputWindingOrder: Winding) void {
        return objc.msgSend(_self, "setTessellationOutputWindingOrder:", void, .{_tessellationOutputWindingOrder});
    }

    pub fn vertexBuffers(_self: *@This()) ?*PipelineBufferDescriptorArray {
        return objc.msgSend(_self, "vertexBuffers", ?*PipelineBufferDescriptorArray, .{});
    }

    pub fn fragmentBuffers(_self: *@This()) ?*PipelineBufferDescriptorArray {
        return objc.msgSend(_self, "fragmentBuffers", ?*PipelineBufferDescriptorArray, .{});
    }

    pub fn supportIndirectCommandBuffers(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportIndirectCommandBuffers", objc.BOOL, .{});
    }

    pub fn setSupportIndirectCommandBuffers(_self: *@This(), _supportIndirectCommandBuffers: objc.BOOL) void {
        return objc.msgSend(_self, "setSupportIndirectCommandBuffers:", void, .{_supportIndirectCommandBuffers});
    }

    pub fn binaryArchives(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "binaryArchives", ?*anyopaque, .{});
    }

    pub fn setBinaryArchives(_self: *@This(), _binaryArchives: ?*anyopaque) void {
        return objc.msgSend(_self, "setBinaryArchives:", void, .{_binaryArchives});
    }

    pub fn vertexPreloadedLibraries(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "vertexPreloadedLibraries", ?*anyopaque, .{});
    }

    pub fn setVertexPreloadedLibraries(_self: *@This(), _vertexPreloadedLibraries: ?*anyopaque) void {
        return objc.msgSend(_self, "setVertexPreloadedLibraries:", void, .{_vertexPreloadedLibraries});
    }

    pub fn fragmentPreloadedLibraries(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "fragmentPreloadedLibraries", ?*anyopaque, .{});
    }

    pub fn setFragmentPreloadedLibraries(_self: *@This(), _fragmentPreloadedLibraries: ?*anyopaque) void {
        return objc.msgSend(_self, "setFragmentPreloadedLibraries:", void, .{_fragmentPreloadedLibraries});
    }

    pub fn vertexLinkedFunctions(_self: *@This()) ?*LinkedFunctions {
        return objc.msgSend(_self, "vertexLinkedFunctions", ?*LinkedFunctions, .{});
    }

    pub fn setVertexLinkedFunctions(_self: *@This(), _vertexLinkedFunctions: ?*LinkedFunctions) void {
        return objc.msgSend(_self, "setVertexLinkedFunctions:", void, .{_vertexLinkedFunctions});
    }

    pub fn fragmentLinkedFunctions(_self: *@This()) ?*LinkedFunctions {
        return objc.msgSend(_self, "fragmentLinkedFunctions", ?*LinkedFunctions, .{});
    }

    pub fn setFragmentLinkedFunctions(_self: *@This(), _fragmentLinkedFunctions: ?*LinkedFunctions) void {
        return objc.msgSend(_self, "setFragmentLinkedFunctions:", void, .{_fragmentLinkedFunctions});
    }

    pub fn supportAddingVertexBinaryFunctions(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportAddingVertexBinaryFunctions", objc.BOOL, .{});
    }

    pub fn setSupportAddingVertexBinaryFunctions(_self: *@This(), _supportAddingVertexBinaryFunctions: objc.BOOL) void {
        return objc.msgSend(_self, "setSupportAddingVertexBinaryFunctions:", void, .{_supportAddingVertexBinaryFunctions});
    }

    pub fn supportAddingFragmentBinaryFunctions(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportAddingFragmentBinaryFunctions", objc.BOOL, .{});
    }

    pub fn setSupportAddingFragmentBinaryFunctions(_self: *@This(), _supportAddingFragmentBinaryFunctions: objc.BOOL) void {
        return objc.msgSend(_self, "setSupportAddingFragmentBinaryFunctions:", void, .{_supportAddingFragmentBinaryFunctions});
    }

    pub fn maxVertexCallStackDepth(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxVertexCallStackDepth", objc.NSUInteger, .{});
    }

    pub fn setMaxVertexCallStackDepth(_self: *@This(), _maxVertexCallStackDepth: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaxVertexCallStackDepth:", void, .{_maxVertexCallStackDepth});
    }

    pub fn maxFragmentCallStackDepth(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxFragmentCallStackDepth", objc.NSUInteger, .{});
    }

    pub fn setMaxFragmentCallStackDepth(_self: *@This(), _maxFragmentCallStackDepth: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaxFragmentCallStackDepth:", void, .{_maxFragmentCallStackDepth});
    }

    pub fn shaderValidation(_self: *@This()) ShaderValidation {
        return objc.msgSend(_self, "shaderValidation", ShaderValidation, .{});
    }

    pub fn setShaderValidation(_self: *@This(), _shaderValidation: ShaderValidation) void {
        return objc.msgSend(_self, "setShaderValidation:", void, .{_shaderValidation});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLRenderPipelineFunctionsDescriptor?language=objc
pub const RenderPipelineFunctionsDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLRenderPipelineFunctionsDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn vertexAdditionalBinaryFunctions(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "vertexAdditionalBinaryFunctions", ?*anyopaque, .{});
    }

    pub fn setVertexAdditionalBinaryFunctions(_self: *@This(), _vertexAdditionalBinaryFunctions: ?*anyopaque) void {
        return objc.msgSend(_self, "setVertexAdditionalBinaryFunctions:", void, .{_vertexAdditionalBinaryFunctions});
    }

    pub fn fragmentAdditionalBinaryFunctions(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "fragmentAdditionalBinaryFunctions", ?*anyopaque, .{});
    }

    pub fn setFragmentAdditionalBinaryFunctions(_self: *@This(), _fragmentAdditionalBinaryFunctions: ?*anyopaque) void {
        return objc.msgSend(_self, "setFragmentAdditionalBinaryFunctions:", void, .{_fragmentAdditionalBinaryFunctions});
    }

    pub fn tileAdditionalBinaryFunctions(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "tileAdditionalBinaryFunctions", ?*anyopaque, .{});
    }

    pub fn setTileAdditionalBinaryFunctions(_self: *@This(), _tileAdditionalBinaryFunctions: ?*anyopaque) void {
        return objc.msgSend(_self, "setTileAdditionalBinaryFunctions:", void, .{_tileAdditionalBinaryFunctions});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLRenderPipelineState?language=objc
pub const RenderPipelineState = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn imageblockMemoryLengthForDimensions(_self: *@This(), _imageblockDimensions: Size) objc.NSUInteger {
        return objc.msgSend(_self, "imageblockMemoryLengthForDimensions:", objc.NSUInteger, .{_imageblockDimensions});
    }

    pub fn functionHandleWithFunctionStage(_self: *@This(), _function: ?*anyopaque, _stage: RenderStages) ?*anyopaque {
        return objc.msgSend(_self, "functionHandleWithFunction:stage:", ?*anyopaque, .{ _function, _stage });
    }

    pub fn newVisibleFunctionTableWithDescriptorStage(_self: *@This(), _descriptor: ?*VisibleFunctionTableDescriptor, _stage: RenderStages) ?*anyopaque {
        return objc.msgSend(_self, "newVisibleFunctionTableWithDescriptor:stage:", ?*anyopaque, .{ _descriptor, _stage });
    }

    pub fn newIntersectionFunctionTableWithDescriptorStage(_self: *@This(), _descriptor: ?*IntersectionFunctionTableDescriptor, _stage: RenderStages) ?*anyopaque {
        return objc.msgSend(_self, "newIntersectionFunctionTableWithDescriptor:stage:", ?*anyopaque, .{ _descriptor, _stage });
    }

    pub fn newRenderPipelineStateWithAdditionalBinaryFunctionsError(_self: *@This(), _additionalBinaryFunctions: ?*RenderPipelineFunctionsDescriptor, _error: ?*?*foundation.Error) ?*anyopaque {
        return objc.msgSend(_self, "newRenderPipelineStateWithAdditionalBinaryFunctions:error:", ?*anyopaque, .{ _additionalBinaryFunctions, _error });
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn maxTotalThreadsPerThreadgroup(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxTotalThreadsPerThreadgroup", objc.NSUInteger, .{});
    }

    pub fn threadgroupSizeMatchesTileSize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "threadgroupSizeMatchesTileSize", objc.BOOL, .{});
    }

    pub fn imageblockSampleLength(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "imageblockSampleLength", objc.NSUInteger, .{});
    }

    pub fn supportIndirectCommandBuffers(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportIndirectCommandBuffers", objc.BOOL, .{});
    }

    pub fn maxTotalThreadsPerObjectThreadgroup(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxTotalThreadsPerObjectThreadgroup", objc.NSUInteger, .{});
    }

    pub fn maxTotalThreadsPerMeshThreadgroup(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxTotalThreadsPerMeshThreadgroup", objc.NSUInteger, .{});
    }

    pub fn objectThreadExecutionWidth(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "objectThreadExecutionWidth", objc.NSUInteger, .{});
    }

    pub fn meshThreadExecutionWidth(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "meshThreadExecutionWidth", objc.NSUInteger, .{});
    }

    pub fn maxTotalThreadgroupsPerMeshGrid(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxTotalThreadgroupsPerMeshGrid", objc.NSUInteger, .{});
    }

    pub fn gpuResourceID(_self: *@This()) ResourceID {
        return objc.msgSend(_self, "gpuResourceID", ResourceID, .{});
    }

    pub fn shaderValidation(_self: *@This()) ShaderValidation {
        return objc.msgSend(_self, "shaderValidation", ShaderValidation, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLRenderPipelineColorAttachmentDescriptorArray?language=objc
pub const RenderPipelineColorAttachmentDescriptorArray = opaque {
    pub const InternalInfo = objc.ExternClass("MTLRenderPipelineColorAttachmentDescriptorArray", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn objectAtIndexedSubscript(_self: *@This(), _attachmentIndex: objc.NSUInteger) ?*RenderPipelineColorAttachmentDescriptor {
        return objc.msgSend(_self, "objectAtIndexedSubscript:", ?*RenderPipelineColorAttachmentDescriptor, .{_attachmentIndex});
    }

    pub fn setObjectAtIndexedSubscript(_self: *@This(), _attachment: ?*RenderPipelineColorAttachmentDescriptor, _attachmentIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setObject:atIndexedSubscript:", void, .{ _attachment, _attachmentIndex });
    }
};

/// https://developer.apple.com/documentation/Metal/MTLTileRenderPipelineColorAttachmentDescriptor?language=objc
pub const TileRenderPipelineColorAttachmentDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLTileRenderPipelineColorAttachmentDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn pixelFormat(_self: *@This()) PixelFormat {
        return objc.msgSend(_self, "pixelFormat", PixelFormat, .{});
    }

    pub fn setPixelFormat(_self: *@This(), _pixelFormat: PixelFormat) void {
        return objc.msgSend(_self, "setPixelFormat:", void, .{_pixelFormat});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLTileRenderPipelineColorAttachmentDescriptorArray?language=objc
pub const TileRenderPipelineColorAttachmentDescriptorArray = opaque {
    pub const InternalInfo = objc.ExternClass("MTLTileRenderPipelineColorAttachmentDescriptorArray", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn objectAtIndexedSubscript(_self: *@This(), _attachmentIndex: objc.NSUInteger) ?*TileRenderPipelineColorAttachmentDescriptor {
        return objc.msgSend(_self, "objectAtIndexedSubscript:", ?*TileRenderPipelineColorAttachmentDescriptor, .{_attachmentIndex});
    }

    pub fn setObjectAtIndexedSubscript(_self: *@This(), _attachment: ?*TileRenderPipelineColorAttachmentDescriptor, _attachmentIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setObject:atIndexedSubscript:", void, .{ _attachment, _attachmentIndex });
    }
};

/// https://developer.apple.com/documentation/Metal/MTLTileRenderPipelineDescriptor?language=objc
pub const TileRenderPipelineDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLTileRenderPipelineDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn reset(_self: *@This()) void {
        return objc.msgSend(_self, "reset", void, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn tileFunction(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "tileFunction", ?*anyopaque, .{});
    }

    pub fn setTileFunction(_self: *@This(), _tileFunction: ?*anyopaque) void {
        return objc.msgSend(_self, "setTileFunction:", void, .{_tileFunction});
    }

    pub fn rasterSampleCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "rasterSampleCount", objc.NSUInteger, .{});
    }

    pub fn setRasterSampleCount(_self: *@This(), _rasterSampleCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setRasterSampleCount:", void, .{_rasterSampleCount});
    }

    pub fn colorAttachments(_self: *@This()) ?*TileRenderPipelineColorAttachmentDescriptorArray {
        return objc.msgSend(_self, "colorAttachments", ?*TileRenderPipelineColorAttachmentDescriptorArray, .{});
    }

    pub fn threadgroupSizeMatchesTileSize(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "threadgroupSizeMatchesTileSize", objc.BOOL, .{});
    }

    pub fn setThreadgroupSizeMatchesTileSize(_self: *@This(), _threadgroupSizeMatchesTileSize: objc.BOOL) void {
        return objc.msgSend(_self, "setThreadgroupSizeMatchesTileSize:", void, .{_threadgroupSizeMatchesTileSize});
    }

    pub fn tileBuffers(_self: *@This()) ?*PipelineBufferDescriptorArray {
        return objc.msgSend(_self, "tileBuffers", ?*PipelineBufferDescriptorArray, .{});
    }

    pub fn maxTotalThreadsPerThreadgroup(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxTotalThreadsPerThreadgroup", objc.NSUInteger, .{});
    }

    pub fn setMaxTotalThreadsPerThreadgroup(_self: *@This(), _maxTotalThreadsPerThreadgroup: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaxTotalThreadsPerThreadgroup:", void, .{_maxTotalThreadsPerThreadgroup});
    }

    pub fn binaryArchives(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "binaryArchives", ?*anyopaque, .{});
    }

    pub fn setBinaryArchives(_self: *@This(), _binaryArchives: ?*anyopaque) void {
        return objc.msgSend(_self, "setBinaryArchives:", void, .{_binaryArchives});
    }

    pub fn preloadedLibraries(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "preloadedLibraries", ?*anyopaque, .{});
    }

    pub fn setPreloadedLibraries(_self: *@This(), _preloadedLibraries: ?*anyopaque) void {
        return objc.msgSend(_self, "setPreloadedLibraries:", void, .{_preloadedLibraries});
    }

    pub fn linkedFunctions(_self: *@This()) ?*LinkedFunctions {
        return objc.msgSend(_self, "linkedFunctions", ?*LinkedFunctions, .{});
    }

    pub fn setLinkedFunctions(_self: *@This(), _linkedFunctions: ?*LinkedFunctions) void {
        return objc.msgSend(_self, "setLinkedFunctions:", void, .{_linkedFunctions});
    }

    pub fn supportAddingBinaryFunctions(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportAddingBinaryFunctions", objc.BOOL, .{});
    }

    pub fn setSupportAddingBinaryFunctions(_self: *@This(), _supportAddingBinaryFunctions: objc.BOOL) void {
        return objc.msgSend(_self, "setSupportAddingBinaryFunctions:", void, .{_supportAddingBinaryFunctions});
    }

    pub fn maxCallStackDepth(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxCallStackDepth", objc.NSUInteger, .{});
    }

    pub fn setMaxCallStackDepth(_self: *@This(), _maxCallStackDepth: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaxCallStackDepth:", void, .{_maxCallStackDepth});
    }

    pub fn shaderValidation(_self: *@This()) ShaderValidation {
        return objc.msgSend(_self, "shaderValidation", ShaderValidation, .{});
    }

    pub fn setShaderValidation(_self: *@This(), _shaderValidation: ShaderValidation) void {
        return objc.msgSend(_self, "setShaderValidation:", void, .{_shaderValidation});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLMeshRenderPipelineDescriptor?language=objc
pub const MeshRenderPipelineDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLMeshRenderPipelineDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn reset(_self: *@This()) void {
        return objc.msgSend(_self, "reset", void, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn objectFunction(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "objectFunction", ?*anyopaque, .{});
    }

    pub fn setObjectFunction(_self: *@This(), _objectFunction: ?*anyopaque) void {
        return objc.msgSend(_self, "setObjectFunction:", void, .{_objectFunction});
    }

    pub fn meshFunction(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "meshFunction", ?*anyopaque, .{});
    }

    pub fn setMeshFunction(_self: *@This(), _meshFunction: ?*anyopaque) void {
        return objc.msgSend(_self, "setMeshFunction:", void, .{_meshFunction});
    }

    pub fn fragmentFunction(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "fragmentFunction", ?*anyopaque, .{});
    }

    pub fn setFragmentFunction(_self: *@This(), _fragmentFunction: ?*anyopaque) void {
        return objc.msgSend(_self, "setFragmentFunction:", void, .{_fragmentFunction});
    }

    pub fn maxTotalThreadsPerObjectThreadgroup(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxTotalThreadsPerObjectThreadgroup", objc.NSUInteger, .{});
    }

    pub fn setMaxTotalThreadsPerObjectThreadgroup(_self: *@This(), _maxTotalThreadsPerObjectThreadgroup: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaxTotalThreadsPerObjectThreadgroup:", void, .{_maxTotalThreadsPerObjectThreadgroup});
    }

    pub fn maxTotalThreadsPerMeshThreadgroup(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxTotalThreadsPerMeshThreadgroup", objc.NSUInteger, .{});
    }

    pub fn setMaxTotalThreadsPerMeshThreadgroup(_self: *@This(), _maxTotalThreadsPerMeshThreadgroup: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaxTotalThreadsPerMeshThreadgroup:", void, .{_maxTotalThreadsPerMeshThreadgroup});
    }

    pub fn objectThreadgroupSizeIsMultipleOfThreadExecutionWidth(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "objectThreadgroupSizeIsMultipleOfThreadExecutionWidth", objc.BOOL, .{});
    }

    pub fn setObjectThreadgroupSizeIsMultipleOfThreadExecutionWidth(_self: *@This(), _objectThreadgroupSizeIsMultipleOfThreadExecutionWidth: objc.BOOL) void {
        return objc.msgSend(_self, "setObjectThreadgroupSizeIsMultipleOfThreadExecutionWidth:", void, .{_objectThreadgroupSizeIsMultipleOfThreadExecutionWidth});
    }

    pub fn meshThreadgroupSizeIsMultipleOfThreadExecutionWidth(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "meshThreadgroupSizeIsMultipleOfThreadExecutionWidth", objc.BOOL, .{});
    }

    pub fn setMeshThreadgroupSizeIsMultipleOfThreadExecutionWidth(_self: *@This(), _meshThreadgroupSizeIsMultipleOfThreadExecutionWidth: objc.BOOL) void {
        return objc.msgSend(_self, "setMeshThreadgroupSizeIsMultipleOfThreadExecutionWidth:", void, .{_meshThreadgroupSizeIsMultipleOfThreadExecutionWidth});
    }

    pub fn payloadMemoryLength(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "payloadMemoryLength", objc.NSUInteger, .{});
    }

    pub fn setPayloadMemoryLength(_self: *@This(), _payloadMemoryLength: objc.NSUInteger) void {
        return objc.msgSend(_self, "setPayloadMemoryLength:", void, .{_payloadMemoryLength});
    }

    pub fn maxTotalThreadgroupsPerMeshGrid(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxTotalThreadgroupsPerMeshGrid", objc.NSUInteger, .{});
    }

    pub fn setMaxTotalThreadgroupsPerMeshGrid(_self: *@This(), _maxTotalThreadgroupsPerMeshGrid: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaxTotalThreadgroupsPerMeshGrid:", void, .{_maxTotalThreadgroupsPerMeshGrid});
    }

    pub fn objectBuffers(_self: *@This()) ?*PipelineBufferDescriptorArray {
        return objc.msgSend(_self, "objectBuffers", ?*PipelineBufferDescriptorArray, .{});
    }

    pub fn meshBuffers(_self: *@This()) ?*PipelineBufferDescriptorArray {
        return objc.msgSend(_self, "meshBuffers", ?*PipelineBufferDescriptorArray, .{});
    }

    pub fn fragmentBuffers(_self: *@This()) ?*PipelineBufferDescriptorArray {
        return objc.msgSend(_self, "fragmentBuffers", ?*PipelineBufferDescriptorArray, .{});
    }

    pub fn rasterSampleCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "rasterSampleCount", objc.NSUInteger, .{});
    }

    pub fn setRasterSampleCount(_self: *@This(), _rasterSampleCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setRasterSampleCount:", void, .{_rasterSampleCount});
    }

    pub fn isAlphaToCoverageEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAlphaToCoverageEnabled", objc.BOOL, .{});
    }

    pub fn setAlphaToCoverageEnabled(_self: *@This(), _alphaToCoverageEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setAlphaToCoverageEnabled:", void, .{_alphaToCoverageEnabled});
    }

    pub fn isAlphaToOneEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAlphaToOneEnabled", objc.BOOL, .{});
    }

    pub fn setAlphaToOneEnabled(_self: *@This(), _alphaToOneEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setAlphaToOneEnabled:", void, .{_alphaToOneEnabled});
    }

    pub fn isRasterizationEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isRasterizationEnabled", objc.BOOL, .{});
    }

    pub fn setRasterizationEnabled(_self: *@This(), _rasterizationEnabled: objc.BOOL) void {
        return objc.msgSend(_self, "setRasterizationEnabled:", void, .{_rasterizationEnabled});
    }

    pub fn maxVertexAmplificationCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxVertexAmplificationCount", objc.NSUInteger, .{});
    }

    pub fn setMaxVertexAmplificationCount(_self: *@This(), _maxVertexAmplificationCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaxVertexAmplificationCount:", void, .{_maxVertexAmplificationCount});
    }

    pub fn colorAttachments(_self: *@This()) ?*RenderPipelineColorAttachmentDescriptorArray {
        return objc.msgSend(_self, "colorAttachments", ?*RenderPipelineColorAttachmentDescriptorArray, .{});
    }

    pub fn depthAttachmentPixelFormat(_self: *@This()) PixelFormat {
        return objc.msgSend(_self, "depthAttachmentPixelFormat", PixelFormat, .{});
    }

    pub fn setDepthAttachmentPixelFormat(_self: *@This(), _depthAttachmentPixelFormat: PixelFormat) void {
        return objc.msgSend(_self, "setDepthAttachmentPixelFormat:", void, .{_depthAttachmentPixelFormat});
    }

    pub fn stencilAttachmentPixelFormat(_self: *@This()) PixelFormat {
        return objc.msgSend(_self, "stencilAttachmentPixelFormat", PixelFormat, .{});
    }

    pub fn setStencilAttachmentPixelFormat(_self: *@This(), _stencilAttachmentPixelFormat: PixelFormat) void {
        return objc.msgSend(_self, "setStencilAttachmentPixelFormat:", void, .{_stencilAttachmentPixelFormat});
    }

    pub fn supportIndirectCommandBuffers(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportIndirectCommandBuffers", objc.BOOL, .{});
    }

    pub fn setSupportIndirectCommandBuffers(_self: *@This(), _supportIndirectCommandBuffers: objc.BOOL) void {
        return objc.msgSend(_self, "setSupportIndirectCommandBuffers:", void, .{_supportIndirectCommandBuffers});
    }

    pub fn binaryArchives(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "binaryArchives", ?*anyopaque, .{});
    }

    pub fn setBinaryArchives(_self: *@This(), _binaryArchives: ?*anyopaque) void {
        return objc.msgSend(_self, "setBinaryArchives:", void, .{_binaryArchives});
    }

    pub fn objectLinkedFunctions(_self: *@This()) ?*LinkedFunctions {
        return objc.msgSend(_self, "objectLinkedFunctions", ?*LinkedFunctions, .{});
    }

    pub fn setObjectLinkedFunctions(_self: *@This(), _objectLinkedFunctions: ?*LinkedFunctions) void {
        return objc.msgSend(_self, "setObjectLinkedFunctions:", void, .{_objectLinkedFunctions});
    }

    pub fn meshLinkedFunctions(_self: *@This()) ?*LinkedFunctions {
        return objc.msgSend(_self, "meshLinkedFunctions", ?*LinkedFunctions, .{});
    }

    pub fn setMeshLinkedFunctions(_self: *@This(), _meshLinkedFunctions: ?*LinkedFunctions) void {
        return objc.msgSend(_self, "setMeshLinkedFunctions:", void, .{_meshLinkedFunctions});
    }

    pub fn fragmentLinkedFunctions(_self: *@This()) ?*LinkedFunctions {
        return objc.msgSend(_self, "fragmentLinkedFunctions", ?*LinkedFunctions, .{});
    }

    pub fn setFragmentLinkedFunctions(_self: *@This(), _fragmentLinkedFunctions: ?*LinkedFunctions) void {
        return objc.msgSend(_self, "setFragmentLinkedFunctions:", void, .{_fragmentLinkedFunctions});
    }

    pub fn shaderValidation(_self: *@This()) ShaderValidation {
        return objc.msgSend(_self, "shaderValidation", ShaderValidation, .{});
    }

    pub fn setShaderValidation(_self: *@This(), _shaderValidation: ShaderValidation) void {
        return objc.msgSend(_self, "setShaderValidation:", void, .{_shaderValidation});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLParallelRenderCommandEncoder?language=objc
pub const ParallelRenderCommandEncoder = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        CommandEncoder,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn endEncoding(_self: *@This()) void {
        return objc.msgSend(_self, "endEncoding", void, .{});
    }

    pub fn insertDebugSignpost(_self: *@This(), _string: ?*foundation.String) void {
        return objc.msgSend(_self, "insertDebugSignpost:", void, .{_string});
    }

    pub fn pushDebugGroup(_self: *@This(), _string: ?*foundation.String) void {
        return objc.msgSend(_self, "pushDebugGroup:", void, .{_string});
    }

    pub fn popDebugGroup(_self: *@This()) void {
        return objc.msgSend(_self, "popDebugGroup", void, .{});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn renderCommandEncoder(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "renderCommandEncoder", ?*anyopaque, .{});
    }

    pub fn setColorStoreActionAtIndex(_self: *@This(), _storeAction: StoreAction, _colorAttachmentIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setColorStoreAction:atIndex:", void, .{ _storeAction, _colorAttachmentIndex });
    }

    pub fn setDepthStoreAction(_self: *@This(), _storeAction: StoreAction) void {
        return objc.msgSend(_self, "setDepthStoreAction:", void, .{_storeAction});
    }

    pub fn setStencilStoreAction(_self: *@This(), _storeAction: StoreAction) void {
        return objc.msgSend(_self, "setStencilStoreAction:", void, .{_storeAction});
    }

    pub fn setColorStoreActionOptionsAtIndex(_self: *@This(), _storeActionOptions: StoreActionOptions, _colorAttachmentIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setColorStoreActionOptions:atIndex:", void, .{ _storeActionOptions, _colorAttachmentIndex });
    }

    pub fn setDepthStoreActionOptions(_self: *@This(), _storeActionOptions: StoreActionOptions) void {
        return objc.msgSend(_self, "setDepthStoreActionOptions:", void, .{_storeActionOptions});
    }

    pub fn setStencilStoreActionOptions(_self: *@This(), _storeActionOptions: StoreActionOptions) void {
        return objc.msgSend(_self, "setStencilStoreActionOptions:", void, .{_storeActionOptions});
    }
};

pub const SamplerMinMagFilter = enum(objc.NSUInteger) {
    Nearest = 0,
    Linear = 1,
};

pub const SamplerMipFilter = enum(objc.NSUInteger) {
    NotMipmapped = 0,
    Nearest = 1,
    Linear = 2,
};

pub const SamplerAddressMode = enum(objc.NSUInteger) {
    ClampToEdge = 0,
    MirrorClampToEdge = 1,
    Repeat = 2,
    MirrorRepeat = 3,
    ClampToZero = 4,
    ClampToBorderColor = 5,
};

pub const SamplerBorderColor = enum(objc.NSUInteger) {
    TransparentBlack = 0,
    OpaqueBlack = 1,
    OpaqueWhite = 2,
};

/// https://developer.apple.com/documentation/Metal/MTLSamplerDescriptor?language=objc
pub const SamplerDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLSamplerDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn minFilter(_self: *@This()) SamplerMinMagFilter {
        return objc.msgSend(_self, "minFilter", SamplerMinMagFilter, .{});
    }

    pub fn setMinFilter(_self: *@This(), _minFilter: SamplerMinMagFilter) void {
        return objc.msgSend(_self, "setMinFilter:", void, .{_minFilter});
    }

    pub fn magFilter(_self: *@This()) SamplerMinMagFilter {
        return objc.msgSend(_self, "magFilter", SamplerMinMagFilter, .{});
    }

    pub fn setMagFilter(_self: *@This(), _magFilter: SamplerMinMagFilter) void {
        return objc.msgSend(_self, "setMagFilter:", void, .{_magFilter});
    }

    pub fn mipFilter(_self: *@This()) SamplerMipFilter {
        return objc.msgSend(_self, "mipFilter", SamplerMipFilter, .{});
    }

    pub fn setMipFilter(_self: *@This(), _mipFilter: SamplerMipFilter) void {
        return objc.msgSend(_self, "setMipFilter:", void, .{_mipFilter});
    }

    pub fn maxAnisotropy(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxAnisotropy", objc.NSUInteger, .{});
    }

    pub fn setMaxAnisotropy(_self: *@This(), _maxAnisotropy: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaxAnisotropy:", void, .{_maxAnisotropy});
    }

    pub fn sAddressMode(_self: *@This()) SamplerAddressMode {
        return objc.msgSend(_self, "sAddressMode", SamplerAddressMode, .{});
    }

    pub fn setSAddressMode(_self: *@This(), _sAddressMode: SamplerAddressMode) void {
        return objc.msgSend(_self, "setSAddressMode:", void, .{_sAddressMode});
    }

    pub fn tAddressMode(_self: *@This()) SamplerAddressMode {
        return objc.msgSend(_self, "tAddressMode", SamplerAddressMode, .{});
    }

    pub fn setTAddressMode(_self: *@This(), _tAddressMode: SamplerAddressMode) void {
        return objc.msgSend(_self, "setTAddressMode:", void, .{_tAddressMode});
    }

    pub fn rAddressMode(_self: *@This()) SamplerAddressMode {
        return objc.msgSend(_self, "rAddressMode", SamplerAddressMode, .{});
    }

    pub fn setRAddressMode(_self: *@This(), _rAddressMode: SamplerAddressMode) void {
        return objc.msgSend(_self, "setRAddressMode:", void, .{_rAddressMode});
    }

    pub fn borderColor(_self: *@This()) SamplerBorderColor {
        return objc.msgSend(_self, "borderColor", SamplerBorderColor, .{});
    }

    pub fn setBorderColor(_self: *@This(), _borderColor: SamplerBorderColor) void {
        return objc.msgSend(_self, "setBorderColor:", void, .{_borderColor});
    }

    pub fn normalizedCoordinates(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "normalizedCoordinates", objc.BOOL, .{});
    }

    pub fn setNormalizedCoordinates(_self: *@This(), _normalizedCoordinates: objc.BOOL) void {
        return objc.msgSend(_self, "setNormalizedCoordinates:", void, .{_normalizedCoordinates});
    }

    pub fn lodMinClamp(_self: *@This()) f32 {
        return objc.msgSend(_self, "lodMinClamp", f32, .{});
    }

    pub fn setLodMinClamp(_self: *@This(), _lodMinClamp: f32) void {
        return objc.msgSend(_self, "setLodMinClamp:", void, .{_lodMinClamp});
    }

    pub fn lodMaxClamp(_self: *@This()) f32 {
        return objc.msgSend(_self, "lodMaxClamp", f32, .{});
    }

    pub fn setLodMaxClamp(_self: *@This(), _lodMaxClamp: f32) void {
        return objc.msgSend(_self, "setLodMaxClamp:", void, .{_lodMaxClamp});
    }

    pub fn lodAverage(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "lodAverage", objc.BOOL, .{});
    }

    pub fn setLodAverage(_self: *@This(), _lodAverage: objc.BOOL) void {
        return objc.msgSend(_self, "setLodAverage:", void, .{_lodAverage});
    }

    pub fn compareFunction(_self: *@This()) CompareFunction {
        return objc.msgSend(_self, "compareFunction", CompareFunction, .{});
    }

    pub fn setCompareFunction(_self: *@This(), _compareFunction: CompareFunction) void {
        return objc.msgSend(_self, "setCompareFunction:", void, .{_compareFunction});
    }

    pub fn supportArgumentBuffers(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportArgumentBuffers", objc.BOOL, .{});
    }

    pub fn setSupportArgumentBuffers(_self: *@This(), _supportArgumentBuffers: objc.BOOL) void {
        return objc.msgSend(_self, "setSupportArgumentBuffers:", void, .{_supportArgumentBuffers});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLSamplerState?language=objc
pub const SamplerState = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn gpuResourceID(_self: *@This()) ResourceID {
        return objc.msgSend(_self, "gpuResourceID", ResourceID, .{});
    }
};

pub const _MTLPackedFloat3 = extern struct {};

pub const anon115 = extern union {
    elements: [3]f32,
};

pub const anon129 = extern struct {
    x: f32,
    y: f32,
    z: f32,
};

pub const PackedFloat3 = _MTLPackedFloat3;

extern "Metal" fn MTLPackedFloat3Make(x: f32, y: f32, z: f32) callconv(.C) PackedFloat3;
pub const packedFloat3Make = MTLPackedFloat3Make;

pub const PackedFloatQuaternion = extern struct {
    x: f32,
    y: f32,
    z: f32,
    w: f32,
};

extern "Metal" fn MTLPackedFloatQuaternionMake(
    x: f32,
    y: f32,
    z: f32,
    w: f32,
) callconv(.C) PackedFloatQuaternion;
pub const packedFloatQuaternionMake = MTLPackedFloatQuaternionMake;

pub const _MTLPackedFloat4x3 = extern struct {
    columns: [4]PackedFloat3,
};

pub const PackedFloat4x3 = _MTLPackedFloat4x3;

pub const _MTLAxisAlignedBoundingBox = extern struct {
    min: PackedFloat3,
    max: PackedFloat3,
};

pub const AxisAlignedBoundingBox = _MTLAxisAlignedBoundingBox;

pub const ComponentTransform = extern struct {
    scale: PackedFloat3,
    shear: PackedFloat3,
    pivot: PackedFloat3,
    rotation: PackedFloatQuaternion,
    translation: PackedFloat3,
};

pub const AccelerationStructureUsage = enum(objc.NSUInteger) {
    None = 0,
    Refit = 1,
    PreferFastBuild = 2,
    ExtendedLimits = 4,
};

pub const AccelerationStructureInstanceOptions = enum(objc.uint32_t) {
    None = 0,
    DisableTriangleCulling = 1,
    TriangleFrontFacingWindingCounterClockwise = 2,
    Opaque = 4,
    NonOpaque = 8,
};

pub const MatrixLayout = enum(objc.NSInteger) {
    ColumnMajor = 0,
    RowMajor = 1,
};

/// https://developer.apple.com/documentation/Metal/MTLAccelerationStructureDescriptor?language=objc
pub const AccelerationStructureDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLAccelerationStructureDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn usage(_self: *@This()) AccelerationStructureUsage {
        return objc.msgSend(_self, "usage", AccelerationStructureUsage, .{});
    }

    pub fn setUsage(_self: *@This(), _usage: AccelerationStructureUsage) void {
        return objc.msgSend(_self, "setUsage:", void, .{_usage});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLAccelerationStructureGeometryDescriptor?language=objc
pub const AccelerationStructureGeometryDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLAccelerationStructureGeometryDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn intersectionFunctionTableOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "intersectionFunctionTableOffset", objc.NSUInteger, .{});
    }

    pub fn setIntersectionFunctionTableOffset(_self: *@This(), _intersectionFunctionTableOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setIntersectionFunctionTableOffset:", void, .{_intersectionFunctionTableOffset});
    }

    pub fn @"opaque"(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "opaque", objc.BOOL, .{});
    }

    pub fn setOpaque(_self: *@This(), _opaque: objc.BOOL) void {
        return objc.msgSend(_self, "setOpaque:", void, .{_opaque});
    }

    pub fn allowDuplicateIntersectionFunctionInvocation(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowDuplicateIntersectionFunctionInvocation", objc.BOOL, .{});
    }

    pub fn setAllowDuplicateIntersectionFunctionInvocation(_self: *@This(), _allowDuplicateIntersectionFunctionInvocation: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowDuplicateIntersectionFunctionInvocation:", void, .{_allowDuplicateIntersectionFunctionInvocation});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn primitiveDataBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "primitiveDataBuffer", ?*anyopaque, .{});
    }

    pub fn setPrimitiveDataBuffer(_self: *@This(), _primitiveDataBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setPrimitiveDataBuffer:", void, .{_primitiveDataBuffer});
    }

    pub fn primitiveDataBufferOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "primitiveDataBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setPrimitiveDataBufferOffset(_self: *@This(), _primitiveDataBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setPrimitiveDataBufferOffset:", void, .{_primitiveDataBufferOffset});
    }

    pub fn primitiveDataStride(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "primitiveDataStride", objc.NSUInteger, .{});
    }

    pub fn setPrimitiveDataStride(_self: *@This(), _primitiveDataStride: objc.NSUInteger) void {
        return objc.msgSend(_self, "setPrimitiveDataStride:", void, .{_primitiveDataStride});
    }

    pub fn primitiveDataElementSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "primitiveDataElementSize", objc.NSUInteger, .{});
    }

    pub fn setPrimitiveDataElementSize(_self: *@This(), _primitiveDataElementSize: objc.NSUInteger) void {
        return objc.msgSend(_self, "setPrimitiveDataElementSize:", void, .{_primitiveDataElementSize});
    }
};

pub const MotionBorderMode = enum(objc.uint32_t) {
    Clamp = 0,
    Vanish = 1,
};

/// https://developer.apple.com/documentation/Metal/MTLPrimitiveAccelerationStructureDescriptor?language=objc
pub const PrimitiveAccelerationStructureDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLPrimitiveAccelerationStructureDescriptor", @This(), AccelerationStructureDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn usage(_self: *@This()) AccelerationStructureUsage {
        return objc.msgSend(_self, "usage", AccelerationStructureUsage, .{});
    }

    pub fn setUsage(_self: *@This(), _usage: AccelerationStructureUsage) void {
        return objc.msgSend(_self, "setUsage:", void, .{_usage});
    }

    pub fn descriptor(_self: *@This()) *@This() {
        return objc.msgSend(_self, "descriptor", *@This(), .{});
    }

    pub fn geometryDescriptors(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "geometryDescriptors", ?*anyopaque, .{});
    }

    pub fn setGeometryDescriptors(_self: *@This(), _geometryDescriptors: ?*anyopaque) void {
        return objc.msgSend(_self, "setGeometryDescriptors:", void, .{_geometryDescriptors});
    }

    pub fn motionStartBorderMode(_self: *@This()) MotionBorderMode {
        return objc.msgSend(_self, "motionStartBorderMode", MotionBorderMode, .{});
    }

    pub fn setMotionStartBorderMode(_self: *@This(), _motionStartBorderMode: MotionBorderMode) void {
        return objc.msgSend(_self, "setMotionStartBorderMode:", void, .{_motionStartBorderMode});
    }

    pub fn motionEndBorderMode(_self: *@This()) MotionBorderMode {
        return objc.msgSend(_self, "motionEndBorderMode", MotionBorderMode, .{});
    }

    pub fn setMotionEndBorderMode(_self: *@This(), _motionEndBorderMode: MotionBorderMode) void {
        return objc.msgSend(_self, "setMotionEndBorderMode:", void, .{_motionEndBorderMode});
    }

    pub fn motionStartTime(_self: *@This()) f32 {
        return objc.msgSend(_self, "motionStartTime", f32, .{});
    }

    pub fn setMotionStartTime(_self: *@This(), _motionStartTime: f32) void {
        return objc.msgSend(_self, "setMotionStartTime:", void, .{_motionStartTime});
    }

    pub fn motionEndTime(_self: *@This()) f32 {
        return objc.msgSend(_self, "motionEndTime", f32, .{});
    }

    pub fn setMotionEndTime(_self: *@This(), _motionEndTime: f32) void {
        return objc.msgSend(_self, "setMotionEndTime:", void, .{_motionEndTime});
    }

    pub fn motionKeyframeCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "motionKeyframeCount", objc.NSUInteger, .{});
    }

    pub fn setMotionKeyframeCount(_self: *@This(), _motionKeyframeCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMotionKeyframeCount:", void, .{_motionKeyframeCount});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLAccelerationStructureTriangleGeometryDescriptor?language=objc
pub const AccelerationStructureTriangleGeometryDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLAccelerationStructureTriangleGeometryDescriptor", @This(), AccelerationStructureGeometryDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn intersectionFunctionTableOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "intersectionFunctionTableOffset", objc.NSUInteger, .{});
    }

    pub fn setIntersectionFunctionTableOffset(_self: *@This(), _intersectionFunctionTableOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setIntersectionFunctionTableOffset:", void, .{_intersectionFunctionTableOffset});
    }

    pub fn @"opaque"(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "opaque", objc.BOOL, .{});
    }

    pub fn setOpaque(_self: *@This(), _opaque: objc.BOOL) void {
        return objc.msgSend(_self, "setOpaque:", void, .{_opaque});
    }

    pub fn allowDuplicateIntersectionFunctionInvocation(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowDuplicateIntersectionFunctionInvocation", objc.BOOL, .{});
    }

    pub fn setAllowDuplicateIntersectionFunctionInvocation(_self: *@This(), _allowDuplicateIntersectionFunctionInvocation: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowDuplicateIntersectionFunctionInvocation:", void, .{_allowDuplicateIntersectionFunctionInvocation});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn primitiveDataBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "primitiveDataBuffer", ?*anyopaque, .{});
    }

    pub fn setPrimitiveDataBuffer(_self: *@This(), _primitiveDataBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setPrimitiveDataBuffer:", void, .{_primitiveDataBuffer});
    }

    pub fn primitiveDataBufferOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "primitiveDataBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setPrimitiveDataBufferOffset(_self: *@This(), _primitiveDataBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setPrimitiveDataBufferOffset:", void, .{_primitiveDataBufferOffset});
    }

    pub fn primitiveDataStride(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "primitiveDataStride", objc.NSUInteger, .{});
    }

    pub fn setPrimitiveDataStride(_self: *@This(), _primitiveDataStride: objc.NSUInteger) void {
        return objc.msgSend(_self, "setPrimitiveDataStride:", void, .{_primitiveDataStride});
    }

    pub fn primitiveDataElementSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "primitiveDataElementSize", objc.NSUInteger, .{});
    }

    pub fn setPrimitiveDataElementSize(_self: *@This(), _primitiveDataElementSize: objc.NSUInteger) void {
        return objc.msgSend(_self, "setPrimitiveDataElementSize:", void, .{_primitiveDataElementSize});
    }

    pub fn descriptor(_self: *@This()) *@This() {
        return objc.msgSend(_self, "descriptor", *@This(), .{});
    }

    pub fn vertexBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "vertexBuffer", ?*anyopaque, .{});
    }

    pub fn setVertexBuffer(_self: *@This(), _vertexBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setVertexBuffer:", void, .{_vertexBuffer});
    }

    pub fn vertexBufferOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "vertexBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setVertexBufferOffset(_self: *@This(), _vertexBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setVertexBufferOffset:", void, .{_vertexBufferOffset});
    }

    pub fn vertexFormat(_self: *@This()) AttributeFormat {
        return objc.msgSend(_self, "vertexFormat", AttributeFormat, .{});
    }

    pub fn setVertexFormat(_self: *@This(), _vertexFormat: AttributeFormat) void {
        return objc.msgSend(_self, "setVertexFormat:", void, .{_vertexFormat});
    }

    pub fn vertexStride(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "vertexStride", objc.NSUInteger, .{});
    }

    pub fn setVertexStride(_self: *@This(), _vertexStride: objc.NSUInteger) void {
        return objc.msgSend(_self, "setVertexStride:", void, .{_vertexStride});
    }

    pub fn indexBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "indexBuffer", ?*anyopaque, .{});
    }

    pub fn setIndexBuffer(_self: *@This(), _indexBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setIndexBuffer:", void, .{_indexBuffer});
    }

    pub fn indexBufferOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "indexBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setIndexBufferOffset(_self: *@This(), _indexBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setIndexBufferOffset:", void, .{_indexBufferOffset});
    }

    pub fn indexType(_self: *@This()) IndexType {
        return objc.msgSend(_self, "indexType", IndexType, .{});
    }

    pub fn setIndexType(_self: *@This(), _indexType: IndexType) void {
        return objc.msgSend(_self, "setIndexType:", void, .{_indexType});
    }

    pub fn triangleCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "triangleCount", objc.NSUInteger, .{});
    }

    pub fn setTriangleCount(_self: *@This(), _triangleCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setTriangleCount:", void, .{_triangleCount});
    }

    pub fn transformationMatrixBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "transformationMatrixBuffer", ?*anyopaque, .{});
    }

    pub fn setTransformationMatrixBuffer(_self: *@This(), _transformationMatrixBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setTransformationMatrixBuffer:", void, .{_transformationMatrixBuffer});
    }

    pub fn transformationMatrixBufferOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "transformationMatrixBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setTransformationMatrixBufferOffset(_self: *@This(), _transformationMatrixBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setTransformationMatrixBufferOffset:", void, .{_transformationMatrixBufferOffset});
    }

    pub fn transformationMatrixLayout(_self: *@This()) MatrixLayout {
        return objc.msgSend(_self, "transformationMatrixLayout", MatrixLayout, .{});
    }

    pub fn setTransformationMatrixLayout(_self: *@This(), _transformationMatrixLayout: MatrixLayout) void {
        return objc.msgSend(_self, "setTransformationMatrixLayout:", void, .{_transformationMatrixLayout});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLAccelerationStructureBoundingBoxGeometryDescriptor?language=objc
pub const AccelerationStructureBoundingBoxGeometryDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLAccelerationStructureBoundingBoxGeometryDescriptor", @This(), AccelerationStructureGeometryDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn intersectionFunctionTableOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "intersectionFunctionTableOffset", objc.NSUInteger, .{});
    }

    pub fn setIntersectionFunctionTableOffset(_self: *@This(), _intersectionFunctionTableOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setIntersectionFunctionTableOffset:", void, .{_intersectionFunctionTableOffset});
    }

    pub fn @"opaque"(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "opaque", objc.BOOL, .{});
    }

    pub fn setOpaque(_self: *@This(), _opaque: objc.BOOL) void {
        return objc.msgSend(_self, "setOpaque:", void, .{_opaque});
    }

    pub fn allowDuplicateIntersectionFunctionInvocation(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowDuplicateIntersectionFunctionInvocation", objc.BOOL, .{});
    }

    pub fn setAllowDuplicateIntersectionFunctionInvocation(_self: *@This(), _allowDuplicateIntersectionFunctionInvocation: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowDuplicateIntersectionFunctionInvocation:", void, .{_allowDuplicateIntersectionFunctionInvocation});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn primitiveDataBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "primitiveDataBuffer", ?*anyopaque, .{});
    }

    pub fn setPrimitiveDataBuffer(_self: *@This(), _primitiveDataBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setPrimitiveDataBuffer:", void, .{_primitiveDataBuffer});
    }

    pub fn primitiveDataBufferOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "primitiveDataBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setPrimitiveDataBufferOffset(_self: *@This(), _primitiveDataBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setPrimitiveDataBufferOffset:", void, .{_primitiveDataBufferOffset});
    }

    pub fn primitiveDataStride(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "primitiveDataStride", objc.NSUInteger, .{});
    }

    pub fn setPrimitiveDataStride(_self: *@This(), _primitiveDataStride: objc.NSUInteger) void {
        return objc.msgSend(_self, "setPrimitiveDataStride:", void, .{_primitiveDataStride});
    }

    pub fn primitiveDataElementSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "primitiveDataElementSize", objc.NSUInteger, .{});
    }

    pub fn setPrimitiveDataElementSize(_self: *@This(), _primitiveDataElementSize: objc.NSUInteger) void {
        return objc.msgSend(_self, "setPrimitiveDataElementSize:", void, .{_primitiveDataElementSize});
    }

    pub fn descriptor(_self: *@This()) *@This() {
        return objc.msgSend(_self, "descriptor", *@This(), .{});
    }

    pub fn boundingBoxBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "boundingBoxBuffer", ?*anyopaque, .{});
    }

    pub fn setBoundingBoxBuffer(_self: *@This(), _boundingBoxBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setBoundingBoxBuffer:", void, .{_boundingBoxBuffer});
    }

    pub fn boundingBoxBufferOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "boundingBoxBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setBoundingBoxBufferOffset(_self: *@This(), _boundingBoxBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setBoundingBoxBufferOffset:", void, .{_boundingBoxBufferOffset});
    }

    pub fn boundingBoxStride(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "boundingBoxStride", objc.NSUInteger, .{});
    }

    pub fn setBoundingBoxStride(_self: *@This(), _boundingBoxStride: objc.NSUInteger) void {
        return objc.msgSend(_self, "setBoundingBoxStride:", void, .{_boundingBoxStride});
    }

    pub fn boundingBoxCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "boundingBoxCount", objc.NSUInteger, .{});
    }

    pub fn setBoundingBoxCount(_self: *@This(), _boundingBoxCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setBoundingBoxCount:", void, .{_boundingBoxCount});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLMotionKeyframeData?language=objc
pub const MotionKeyframeData = opaque {
    pub const InternalInfo = objc.ExternClass("MTLMotionKeyframeData", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn data(_self: *@This()) *@This() {
        return objc.msgSend(_self, "data", *@This(), .{});
    }

    pub fn buffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "buffer", ?*anyopaque, .{});
    }

    pub fn setBuffer(_self: *@This(), _buffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setBuffer:", void, .{_buffer});
    }

    pub fn offset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "offset", objc.NSUInteger, .{});
    }

    pub fn setOffset(_self: *@This(), _offset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setOffset:", void, .{_offset});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLAccelerationStructureMotionTriangleGeometryDescriptor?language=objc
pub const AccelerationStructureMotionTriangleGeometryDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLAccelerationStructureMotionTriangleGeometryDescriptor", @This(), AccelerationStructureGeometryDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn intersectionFunctionTableOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "intersectionFunctionTableOffset", objc.NSUInteger, .{});
    }

    pub fn setIntersectionFunctionTableOffset(_self: *@This(), _intersectionFunctionTableOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setIntersectionFunctionTableOffset:", void, .{_intersectionFunctionTableOffset});
    }

    pub fn @"opaque"(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "opaque", objc.BOOL, .{});
    }

    pub fn setOpaque(_self: *@This(), _opaque: objc.BOOL) void {
        return objc.msgSend(_self, "setOpaque:", void, .{_opaque});
    }

    pub fn allowDuplicateIntersectionFunctionInvocation(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowDuplicateIntersectionFunctionInvocation", objc.BOOL, .{});
    }

    pub fn setAllowDuplicateIntersectionFunctionInvocation(_self: *@This(), _allowDuplicateIntersectionFunctionInvocation: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowDuplicateIntersectionFunctionInvocation:", void, .{_allowDuplicateIntersectionFunctionInvocation});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn primitiveDataBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "primitiveDataBuffer", ?*anyopaque, .{});
    }

    pub fn setPrimitiveDataBuffer(_self: *@This(), _primitiveDataBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setPrimitiveDataBuffer:", void, .{_primitiveDataBuffer});
    }

    pub fn primitiveDataBufferOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "primitiveDataBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setPrimitiveDataBufferOffset(_self: *@This(), _primitiveDataBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setPrimitiveDataBufferOffset:", void, .{_primitiveDataBufferOffset});
    }

    pub fn primitiveDataStride(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "primitiveDataStride", objc.NSUInteger, .{});
    }

    pub fn setPrimitiveDataStride(_self: *@This(), _primitiveDataStride: objc.NSUInteger) void {
        return objc.msgSend(_self, "setPrimitiveDataStride:", void, .{_primitiveDataStride});
    }

    pub fn primitiveDataElementSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "primitiveDataElementSize", objc.NSUInteger, .{});
    }

    pub fn setPrimitiveDataElementSize(_self: *@This(), _primitiveDataElementSize: objc.NSUInteger) void {
        return objc.msgSend(_self, "setPrimitiveDataElementSize:", void, .{_primitiveDataElementSize});
    }

    pub fn descriptor(_self: *@This()) *@This() {
        return objc.msgSend(_self, "descriptor", *@This(), .{});
    }

    pub fn vertexBuffers(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "vertexBuffers", ?*anyopaque, .{});
    }

    pub fn setVertexBuffers(_self: *@This(), _vertexBuffers: ?*anyopaque) void {
        return objc.msgSend(_self, "setVertexBuffers:", void, .{_vertexBuffers});
    }

    pub fn vertexFormat(_self: *@This()) AttributeFormat {
        return objc.msgSend(_self, "vertexFormat", AttributeFormat, .{});
    }

    pub fn setVertexFormat(_self: *@This(), _vertexFormat: AttributeFormat) void {
        return objc.msgSend(_self, "setVertexFormat:", void, .{_vertexFormat});
    }

    pub fn vertexStride(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "vertexStride", objc.NSUInteger, .{});
    }

    pub fn setVertexStride(_self: *@This(), _vertexStride: objc.NSUInteger) void {
        return objc.msgSend(_self, "setVertexStride:", void, .{_vertexStride});
    }

    pub fn indexBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "indexBuffer", ?*anyopaque, .{});
    }

    pub fn setIndexBuffer(_self: *@This(), _indexBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setIndexBuffer:", void, .{_indexBuffer});
    }

    pub fn indexBufferOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "indexBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setIndexBufferOffset(_self: *@This(), _indexBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setIndexBufferOffset:", void, .{_indexBufferOffset});
    }

    pub fn indexType(_self: *@This()) IndexType {
        return objc.msgSend(_self, "indexType", IndexType, .{});
    }

    pub fn setIndexType(_self: *@This(), _indexType: IndexType) void {
        return objc.msgSend(_self, "setIndexType:", void, .{_indexType});
    }

    pub fn triangleCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "triangleCount", objc.NSUInteger, .{});
    }

    pub fn setTriangleCount(_self: *@This(), _triangleCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setTriangleCount:", void, .{_triangleCount});
    }

    pub fn transformationMatrixBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "transformationMatrixBuffer", ?*anyopaque, .{});
    }

    pub fn setTransformationMatrixBuffer(_self: *@This(), _transformationMatrixBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setTransformationMatrixBuffer:", void, .{_transformationMatrixBuffer});
    }

    pub fn transformationMatrixBufferOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "transformationMatrixBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setTransformationMatrixBufferOffset(_self: *@This(), _transformationMatrixBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setTransformationMatrixBufferOffset:", void, .{_transformationMatrixBufferOffset});
    }

    pub fn transformationMatrixLayout(_self: *@This()) MatrixLayout {
        return objc.msgSend(_self, "transformationMatrixLayout", MatrixLayout, .{});
    }

    pub fn setTransformationMatrixLayout(_self: *@This(), _transformationMatrixLayout: MatrixLayout) void {
        return objc.msgSend(_self, "setTransformationMatrixLayout:", void, .{_transformationMatrixLayout});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLAccelerationStructureMotionBoundingBoxGeometryDescriptor?language=objc
pub const AccelerationStructureMotionBoundingBoxGeometryDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLAccelerationStructureMotionBoundingBoxGeometryDescriptor", @This(), AccelerationStructureGeometryDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn intersectionFunctionTableOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "intersectionFunctionTableOffset", objc.NSUInteger, .{});
    }

    pub fn setIntersectionFunctionTableOffset(_self: *@This(), _intersectionFunctionTableOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setIntersectionFunctionTableOffset:", void, .{_intersectionFunctionTableOffset});
    }

    pub fn @"opaque"(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "opaque", objc.BOOL, .{});
    }

    pub fn setOpaque(_self: *@This(), _opaque: objc.BOOL) void {
        return objc.msgSend(_self, "setOpaque:", void, .{_opaque});
    }

    pub fn allowDuplicateIntersectionFunctionInvocation(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowDuplicateIntersectionFunctionInvocation", objc.BOOL, .{});
    }

    pub fn setAllowDuplicateIntersectionFunctionInvocation(_self: *@This(), _allowDuplicateIntersectionFunctionInvocation: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowDuplicateIntersectionFunctionInvocation:", void, .{_allowDuplicateIntersectionFunctionInvocation});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn primitiveDataBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "primitiveDataBuffer", ?*anyopaque, .{});
    }

    pub fn setPrimitiveDataBuffer(_self: *@This(), _primitiveDataBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setPrimitiveDataBuffer:", void, .{_primitiveDataBuffer});
    }

    pub fn primitiveDataBufferOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "primitiveDataBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setPrimitiveDataBufferOffset(_self: *@This(), _primitiveDataBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setPrimitiveDataBufferOffset:", void, .{_primitiveDataBufferOffset});
    }

    pub fn primitiveDataStride(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "primitiveDataStride", objc.NSUInteger, .{});
    }

    pub fn setPrimitiveDataStride(_self: *@This(), _primitiveDataStride: objc.NSUInteger) void {
        return objc.msgSend(_self, "setPrimitiveDataStride:", void, .{_primitiveDataStride});
    }

    pub fn primitiveDataElementSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "primitiveDataElementSize", objc.NSUInteger, .{});
    }

    pub fn setPrimitiveDataElementSize(_self: *@This(), _primitiveDataElementSize: objc.NSUInteger) void {
        return objc.msgSend(_self, "setPrimitiveDataElementSize:", void, .{_primitiveDataElementSize});
    }

    pub fn descriptor(_self: *@This()) *@This() {
        return objc.msgSend(_self, "descriptor", *@This(), .{});
    }

    pub fn boundingBoxBuffers(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "boundingBoxBuffers", ?*anyopaque, .{});
    }

    pub fn setBoundingBoxBuffers(_self: *@This(), _boundingBoxBuffers: ?*anyopaque) void {
        return objc.msgSend(_self, "setBoundingBoxBuffers:", void, .{_boundingBoxBuffers});
    }

    pub fn boundingBoxStride(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "boundingBoxStride", objc.NSUInteger, .{});
    }

    pub fn setBoundingBoxStride(_self: *@This(), _boundingBoxStride: objc.NSUInteger) void {
        return objc.msgSend(_self, "setBoundingBoxStride:", void, .{_boundingBoxStride});
    }

    pub fn boundingBoxCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "boundingBoxCount", objc.NSUInteger, .{});
    }

    pub fn setBoundingBoxCount(_self: *@This(), _boundingBoxCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setBoundingBoxCount:", void, .{_boundingBoxCount});
    }
};

pub const CurveType = enum(objc.NSInteger) {
    Round = 0,
    Flat = 1,
};

pub const CurveBasis = enum(objc.NSInteger) {
    BSpline = 0,
    CatmullRom = 1,
    Linear = 2,
    Bezier = 3,
};

pub const CurveEndCaps = enum(objc.NSInteger) {
    None = 0,
    Disk = 1,
    Sphere = 2,
};

/// https://developer.apple.com/documentation/Metal/MTLAccelerationStructureCurveGeometryDescriptor?language=objc
pub const AccelerationStructureCurveGeometryDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLAccelerationStructureCurveGeometryDescriptor", @This(), AccelerationStructureGeometryDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn intersectionFunctionTableOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "intersectionFunctionTableOffset", objc.NSUInteger, .{});
    }

    pub fn setIntersectionFunctionTableOffset(_self: *@This(), _intersectionFunctionTableOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setIntersectionFunctionTableOffset:", void, .{_intersectionFunctionTableOffset});
    }

    pub fn @"opaque"(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "opaque", objc.BOOL, .{});
    }

    pub fn setOpaque(_self: *@This(), _opaque: objc.BOOL) void {
        return objc.msgSend(_self, "setOpaque:", void, .{_opaque});
    }

    pub fn allowDuplicateIntersectionFunctionInvocation(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowDuplicateIntersectionFunctionInvocation", objc.BOOL, .{});
    }

    pub fn setAllowDuplicateIntersectionFunctionInvocation(_self: *@This(), _allowDuplicateIntersectionFunctionInvocation: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowDuplicateIntersectionFunctionInvocation:", void, .{_allowDuplicateIntersectionFunctionInvocation});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn primitiveDataBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "primitiveDataBuffer", ?*anyopaque, .{});
    }

    pub fn setPrimitiveDataBuffer(_self: *@This(), _primitiveDataBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setPrimitiveDataBuffer:", void, .{_primitiveDataBuffer});
    }

    pub fn primitiveDataBufferOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "primitiveDataBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setPrimitiveDataBufferOffset(_self: *@This(), _primitiveDataBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setPrimitiveDataBufferOffset:", void, .{_primitiveDataBufferOffset});
    }

    pub fn primitiveDataStride(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "primitiveDataStride", objc.NSUInteger, .{});
    }

    pub fn setPrimitiveDataStride(_self: *@This(), _primitiveDataStride: objc.NSUInteger) void {
        return objc.msgSend(_self, "setPrimitiveDataStride:", void, .{_primitiveDataStride});
    }

    pub fn primitiveDataElementSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "primitiveDataElementSize", objc.NSUInteger, .{});
    }

    pub fn setPrimitiveDataElementSize(_self: *@This(), _primitiveDataElementSize: objc.NSUInteger) void {
        return objc.msgSend(_self, "setPrimitiveDataElementSize:", void, .{_primitiveDataElementSize});
    }

    pub fn descriptor(_self: *@This()) *@This() {
        return objc.msgSend(_self, "descriptor", *@This(), .{});
    }

    pub fn controlPointBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "controlPointBuffer", ?*anyopaque, .{});
    }

    pub fn setControlPointBuffer(_self: *@This(), _controlPointBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setControlPointBuffer:", void, .{_controlPointBuffer});
    }

    pub fn controlPointBufferOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "controlPointBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setControlPointBufferOffset(_self: *@This(), _controlPointBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setControlPointBufferOffset:", void, .{_controlPointBufferOffset});
    }

    pub fn controlPointCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "controlPointCount", objc.NSUInteger, .{});
    }

    pub fn setControlPointCount(_self: *@This(), _controlPointCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setControlPointCount:", void, .{_controlPointCount});
    }

    pub fn controlPointStride(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "controlPointStride", objc.NSUInteger, .{});
    }

    pub fn setControlPointStride(_self: *@This(), _controlPointStride: objc.NSUInteger) void {
        return objc.msgSend(_self, "setControlPointStride:", void, .{_controlPointStride});
    }

    pub fn controlPointFormat(_self: *@This()) AttributeFormat {
        return objc.msgSend(_self, "controlPointFormat", AttributeFormat, .{});
    }

    pub fn setControlPointFormat(_self: *@This(), _controlPointFormat: AttributeFormat) void {
        return objc.msgSend(_self, "setControlPointFormat:", void, .{_controlPointFormat});
    }

    pub fn radiusBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "radiusBuffer", ?*anyopaque, .{});
    }

    pub fn setRadiusBuffer(_self: *@This(), _radiusBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setRadiusBuffer:", void, .{_radiusBuffer});
    }

    pub fn radiusBufferOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "radiusBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setRadiusBufferOffset(_self: *@This(), _radiusBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setRadiusBufferOffset:", void, .{_radiusBufferOffset});
    }

    pub fn radiusFormat(_self: *@This()) AttributeFormat {
        return objc.msgSend(_self, "radiusFormat", AttributeFormat, .{});
    }

    pub fn setRadiusFormat(_self: *@This(), _radiusFormat: AttributeFormat) void {
        return objc.msgSend(_self, "setRadiusFormat:", void, .{_radiusFormat});
    }

    pub fn radiusStride(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "radiusStride", objc.NSUInteger, .{});
    }

    pub fn setRadiusStride(_self: *@This(), _radiusStride: objc.NSUInteger) void {
        return objc.msgSend(_self, "setRadiusStride:", void, .{_radiusStride});
    }

    pub fn indexBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "indexBuffer", ?*anyopaque, .{});
    }

    pub fn setIndexBuffer(_self: *@This(), _indexBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setIndexBuffer:", void, .{_indexBuffer});
    }

    pub fn indexBufferOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "indexBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setIndexBufferOffset(_self: *@This(), _indexBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setIndexBufferOffset:", void, .{_indexBufferOffset});
    }

    pub fn indexType(_self: *@This()) IndexType {
        return objc.msgSend(_self, "indexType", IndexType, .{});
    }

    pub fn setIndexType(_self: *@This(), _indexType: IndexType) void {
        return objc.msgSend(_self, "setIndexType:", void, .{_indexType});
    }

    pub fn segmentCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "segmentCount", objc.NSUInteger, .{});
    }

    pub fn setSegmentCount(_self: *@This(), _segmentCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setSegmentCount:", void, .{_segmentCount});
    }

    pub fn segmentControlPointCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "segmentControlPointCount", objc.NSUInteger, .{});
    }

    pub fn setSegmentControlPointCount(_self: *@This(), _segmentControlPointCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setSegmentControlPointCount:", void, .{_segmentControlPointCount});
    }

    pub fn curveType(_self: *@This()) CurveType {
        return objc.msgSend(_self, "curveType", CurveType, .{});
    }

    pub fn setCurveType(_self: *@This(), _curveType: CurveType) void {
        return objc.msgSend(_self, "setCurveType:", void, .{_curveType});
    }

    pub fn curveBasis(_self: *@This()) CurveBasis {
        return objc.msgSend(_self, "curveBasis", CurveBasis, .{});
    }

    pub fn setCurveBasis(_self: *@This(), _curveBasis: CurveBasis) void {
        return objc.msgSend(_self, "setCurveBasis:", void, .{_curveBasis});
    }

    pub fn curveEndCaps(_self: *@This()) CurveEndCaps {
        return objc.msgSend(_self, "curveEndCaps", CurveEndCaps, .{});
    }

    pub fn setCurveEndCaps(_self: *@This(), _curveEndCaps: CurveEndCaps) void {
        return objc.msgSend(_self, "setCurveEndCaps:", void, .{_curveEndCaps});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLAccelerationStructureMotionCurveGeometryDescriptor?language=objc
pub const AccelerationStructureMotionCurveGeometryDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLAccelerationStructureMotionCurveGeometryDescriptor", @This(), AccelerationStructureGeometryDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn intersectionFunctionTableOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "intersectionFunctionTableOffset", objc.NSUInteger, .{});
    }

    pub fn setIntersectionFunctionTableOffset(_self: *@This(), _intersectionFunctionTableOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setIntersectionFunctionTableOffset:", void, .{_intersectionFunctionTableOffset});
    }

    pub fn @"opaque"(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "opaque", objc.BOOL, .{});
    }

    pub fn setOpaque(_self: *@This(), _opaque: objc.BOOL) void {
        return objc.msgSend(_self, "setOpaque:", void, .{_opaque});
    }

    pub fn allowDuplicateIntersectionFunctionInvocation(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowDuplicateIntersectionFunctionInvocation", objc.BOOL, .{});
    }

    pub fn setAllowDuplicateIntersectionFunctionInvocation(_self: *@This(), _allowDuplicateIntersectionFunctionInvocation: objc.BOOL) void {
        return objc.msgSend(_self, "setAllowDuplicateIntersectionFunctionInvocation:", void, .{_allowDuplicateIntersectionFunctionInvocation});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn primitiveDataBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "primitiveDataBuffer", ?*anyopaque, .{});
    }

    pub fn setPrimitiveDataBuffer(_self: *@This(), _primitiveDataBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setPrimitiveDataBuffer:", void, .{_primitiveDataBuffer});
    }

    pub fn primitiveDataBufferOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "primitiveDataBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setPrimitiveDataBufferOffset(_self: *@This(), _primitiveDataBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setPrimitiveDataBufferOffset:", void, .{_primitiveDataBufferOffset});
    }

    pub fn primitiveDataStride(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "primitiveDataStride", objc.NSUInteger, .{});
    }

    pub fn setPrimitiveDataStride(_self: *@This(), _primitiveDataStride: objc.NSUInteger) void {
        return objc.msgSend(_self, "setPrimitiveDataStride:", void, .{_primitiveDataStride});
    }

    pub fn primitiveDataElementSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "primitiveDataElementSize", objc.NSUInteger, .{});
    }

    pub fn setPrimitiveDataElementSize(_self: *@This(), _primitiveDataElementSize: objc.NSUInteger) void {
        return objc.msgSend(_self, "setPrimitiveDataElementSize:", void, .{_primitiveDataElementSize});
    }

    pub fn descriptor(_self: *@This()) *@This() {
        return objc.msgSend(_self, "descriptor", *@This(), .{});
    }

    pub fn controlPointBuffers(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "controlPointBuffers", ?*anyopaque, .{});
    }

    pub fn setControlPointBuffers(_self: *@This(), _controlPointBuffers: ?*anyopaque) void {
        return objc.msgSend(_self, "setControlPointBuffers:", void, .{_controlPointBuffers});
    }

    pub fn controlPointCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "controlPointCount", objc.NSUInteger, .{});
    }

    pub fn setControlPointCount(_self: *@This(), _controlPointCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setControlPointCount:", void, .{_controlPointCount});
    }

    pub fn controlPointStride(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "controlPointStride", objc.NSUInteger, .{});
    }

    pub fn setControlPointStride(_self: *@This(), _controlPointStride: objc.NSUInteger) void {
        return objc.msgSend(_self, "setControlPointStride:", void, .{_controlPointStride});
    }

    pub fn controlPointFormat(_self: *@This()) AttributeFormat {
        return objc.msgSend(_self, "controlPointFormat", AttributeFormat, .{});
    }

    pub fn setControlPointFormat(_self: *@This(), _controlPointFormat: AttributeFormat) void {
        return objc.msgSend(_self, "setControlPointFormat:", void, .{_controlPointFormat});
    }

    pub fn radiusBuffers(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "radiusBuffers", ?*anyopaque, .{});
    }

    pub fn setRadiusBuffers(_self: *@This(), _radiusBuffers: ?*anyopaque) void {
        return objc.msgSend(_self, "setRadiusBuffers:", void, .{_radiusBuffers});
    }

    pub fn radiusFormat(_self: *@This()) AttributeFormat {
        return objc.msgSend(_self, "radiusFormat", AttributeFormat, .{});
    }

    pub fn setRadiusFormat(_self: *@This(), _radiusFormat: AttributeFormat) void {
        return objc.msgSend(_self, "setRadiusFormat:", void, .{_radiusFormat});
    }

    pub fn radiusStride(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "radiusStride", objc.NSUInteger, .{});
    }

    pub fn setRadiusStride(_self: *@This(), _radiusStride: objc.NSUInteger) void {
        return objc.msgSend(_self, "setRadiusStride:", void, .{_radiusStride});
    }

    pub fn indexBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "indexBuffer", ?*anyopaque, .{});
    }

    pub fn setIndexBuffer(_self: *@This(), _indexBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setIndexBuffer:", void, .{_indexBuffer});
    }

    pub fn indexBufferOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "indexBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setIndexBufferOffset(_self: *@This(), _indexBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setIndexBufferOffset:", void, .{_indexBufferOffset});
    }

    pub fn indexType(_self: *@This()) IndexType {
        return objc.msgSend(_self, "indexType", IndexType, .{});
    }

    pub fn setIndexType(_self: *@This(), _indexType: IndexType) void {
        return objc.msgSend(_self, "setIndexType:", void, .{_indexType});
    }

    pub fn segmentCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "segmentCount", objc.NSUInteger, .{});
    }

    pub fn setSegmentCount(_self: *@This(), _segmentCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setSegmentCount:", void, .{_segmentCount});
    }

    pub fn segmentControlPointCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "segmentControlPointCount", objc.NSUInteger, .{});
    }

    pub fn setSegmentControlPointCount(_self: *@This(), _segmentControlPointCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setSegmentControlPointCount:", void, .{_segmentControlPointCount});
    }

    pub fn curveType(_self: *@This()) CurveType {
        return objc.msgSend(_self, "curveType", CurveType, .{});
    }

    pub fn setCurveType(_self: *@This(), _curveType: CurveType) void {
        return objc.msgSend(_self, "setCurveType:", void, .{_curveType});
    }

    pub fn curveBasis(_self: *@This()) CurveBasis {
        return objc.msgSend(_self, "curveBasis", CurveBasis, .{});
    }

    pub fn setCurveBasis(_self: *@This(), _curveBasis: CurveBasis) void {
        return objc.msgSend(_self, "setCurveBasis:", void, .{_curveBasis});
    }

    pub fn curveEndCaps(_self: *@This()) CurveEndCaps {
        return objc.msgSend(_self, "curveEndCaps", CurveEndCaps, .{});
    }

    pub fn setCurveEndCaps(_self: *@This(), _curveEndCaps: CurveEndCaps) void {
        return objc.msgSend(_self, "setCurveEndCaps:", void, .{_curveEndCaps});
    }
};

pub const AccelerationStructureInstanceDescriptor = extern struct {
    transformationMatrix: PackedFloat4x3,
    options: AccelerationStructureInstanceOptions,
    mask: objc.uint32_t,
    intersectionFunctionTableOffset: objc.uint32_t,
    accelerationStructureIndex: objc.uint32_t,
};

pub const AccelerationStructureUserIDInstanceDescriptor = extern struct {
    transformationMatrix: PackedFloat4x3,
    options: AccelerationStructureInstanceOptions,
    mask: objc.uint32_t,
    intersectionFunctionTableOffset: objc.uint32_t,
    accelerationStructureIndex: objc.uint32_t,
    userID: objc.uint32_t,
};

pub const AccelerationStructureInstanceDescriptorType = enum(objc.NSUInteger) {
    Default = 0,
    UserID = 1,
    Motion = 2,
    Indirect = 3,
    IndirectMotion = 4,
};

pub const AccelerationStructureMotionInstanceDescriptor = extern struct {
    options: AccelerationStructureInstanceOptions,
    mask: objc.uint32_t,
    intersectionFunctionTableOffset: objc.uint32_t,
    accelerationStructureIndex: objc.uint32_t,
    userID: objc.uint32_t,
    motionTransformsStartIndex: objc.uint32_t,
    motionTransformsCount: objc.uint32_t,
    motionStartBorderMode: MotionBorderMode,
    motionEndBorderMode: MotionBorderMode,
    motionStartTime: f32,
    motionEndTime: f32,
};

pub const IndirectAccelerationStructureInstanceDescriptor = extern struct {
    transformationMatrix: PackedFloat4x3,
    options: AccelerationStructureInstanceOptions,
    mask: objc.uint32_t,
    intersectionFunctionTableOffset: objc.uint32_t,
    userID: objc.uint32_t,
    accelerationStructureID: ResourceID,
};

pub const IndirectAccelerationStructureMotionInstanceDescriptor = extern struct {
    options: AccelerationStructureInstanceOptions,
    mask: objc.uint32_t,
    intersectionFunctionTableOffset: objc.uint32_t,
    userID: objc.uint32_t,
    accelerationStructureID: ResourceID,
    motionTransformsStartIndex: objc.uint32_t,
    motionTransformsCount: objc.uint32_t,
    motionStartBorderMode: MotionBorderMode,
    motionEndBorderMode: MotionBorderMode,
    motionStartTime: f32,
    motionEndTime: f32,
};

pub const TransformType = enum(objc.NSInteger) {
    PackedFloat4x3 = 0,
    Component = 1,
};

/// https://developer.apple.com/documentation/Metal/MTLInstanceAccelerationStructureDescriptor?language=objc
pub const InstanceAccelerationStructureDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLInstanceAccelerationStructureDescriptor", @This(), AccelerationStructureDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn usage(_self: *@This()) AccelerationStructureUsage {
        return objc.msgSend(_self, "usage", AccelerationStructureUsage, .{});
    }

    pub fn setUsage(_self: *@This(), _usage: AccelerationStructureUsage) void {
        return objc.msgSend(_self, "setUsage:", void, .{_usage});
    }

    pub fn descriptor(_self: *@This()) *@This() {
        return objc.msgSend(_self, "descriptor", *@This(), .{});
    }

    pub fn instanceDescriptorBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "instanceDescriptorBuffer", ?*anyopaque, .{});
    }

    pub fn setInstanceDescriptorBuffer(_self: *@This(), _instanceDescriptorBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setInstanceDescriptorBuffer:", void, .{_instanceDescriptorBuffer});
    }

    pub fn instanceDescriptorBufferOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "instanceDescriptorBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setInstanceDescriptorBufferOffset(_self: *@This(), _instanceDescriptorBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setInstanceDescriptorBufferOffset:", void, .{_instanceDescriptorBufferOffset});
    }

    pub fn instanceDescriptorStride(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "instanceDescriptorStride", objc.NSUInteger, .{});
    }

    pub fn setInstanceDescriptorStride(_self: *@This(), _instanceDescriptorStride: objc.NSUInteger) void {
        return objc.msgSend(_self, "setInstanceDescriptorStride:", void, .{_instanceDescriptorStride});
    }

    pub fn instanceCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "instanceCount", objc.NSUInteger, .{});
    }

    pub fn setInstanceCount(_self: *@This(), _instanceCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setInstanceCount:", void, .{_instanceCount});
    }

    pub fn instancedAccelerationStructures(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "instancedAccelerationStructures", ?*anyopaque, .{});
    }

    pub fn setInstancedAccelerationStructures(_self: *@This(), _instancedAccelerationStructures: ?*anyopaque) void {
        return objc.msgSend(_self, "setInstancedAccelerationStructures:", void, .{_instancedAccelerationStructures});
    }

    pub fn instanceDescriptorType(_self: *@This()) AccelerationStructureInstanceDescriptorType {
        return objc.msgSend(_self, "instanceDescriptorType", AccelerationStructureInstanceDescriptorType, .{});
    }

    pub fn setInstanceDescriptorType(_self: *@This(), _instanceDescriptorType: AccelerationStructureInstanceDescriptorType) void {
        return objc.msgSend(_self, "setInstanceDescriptorType:", void, .{_instanceDescriptorType});
    }

    pub fn motionTransformBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "motionTransformBuffer", ?*anyopaque, .{});
    }

    pub fn setMotionTransformBuffer(_self: *@This(), _motionTransformBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setMotionTransformBuffer:", void, .{_motionTransformBuffer});
    }

    pub fn motionTransformBufferOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "motionTransformBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setMotionTransformBufferOffset(_self: *@This(), _motionTransformBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMotionTransformBufferOffset:", void, .{_motionTransformBufferOffset});
    }

    pub fn motionTransformCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "motionTransformCount", objc.NSUInteger, .{});
    }

    pub fn setMotionTransformCount(_self: *@This(), _motionTransformCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMotionTransformCount:", void, .{_motionTransformCount});
    }

    pub fn instanceTransformationMatrixLayout(_self: *@This()) MatrixLayout {
        return objc.msgSend(_self, "instanceTransformationMatrixLayout", MatrixLayout, .{});
    }

    pub fn setInstanceTransformationMatrixLayout(_self: *@This(), _instanceTransformationMatrixLayout: MatrixLayout) void {
        return objc.msgSend(_self, "setInstanceTransformationMatrixLayout:", void, .{_instanceTransformationMatrixLayout});
    }

    pub fn motionTransformType(_self: *@This()) TransformType {
        return objc.msgSend(_self, "motionTransformType", TransformType, .{});
    }

    pub fn setMotionTransformType(_self: *@This(), _motionTransformType: TransformType) void {
        return objc.msgSend(_self, "setMotionTransformType:", void, .{_motionTransformType});
    }

    pub fn motionTransformStride(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "motionTransformStride", objc.NSUInteger, .{});
    }

    pub fn setMotionTransformStride(_self: *@This(), _motionTransformStride: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMotionTransformStride:", void, .{_motionTransformStride});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLIndirectInstanceAccelerationStructureDescriptor?language=objc
pub const IndirectInstanceAccelerationStructureDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLIndirectInstanceAccelerationStructureDescriptor", @This(), AccelerationStructureDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn usage(_self: *@This()) AccelerationStructureUsage {
        return objc.msgSend(_self, "usage", AccelerationStructureUsage, .{});
    }

    pub fn setUsage(_self: *@This(), _usage: AccelerationStructureUsage) void {
        return objc.msgSend(_self, "setUsage:", void, .{_usage});
    }

    pub fn descriptor(_self: *@This()) *@This() {
        return objc.msgSend(_self, "descriptor", *@This(), .{});
    }

    pub fn instanceDescriptorBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "instanceDescriptorBuffer", ?*anyopaque, .{});
    }

    pub fn setInstanceDescriptorBuffer(_self: *@This(), _instanceDescriptorBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setInstanceDescriptorBuffer:", void, .{_instanceDescriptorBuffer});
    }

    pub fn instanceDescriptorBufferOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "instanceDescriptorBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setInstanceDescriptorBufferOffset(_self: *@This(), _instanceDescriptorBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setInstanceDescriptorBufferOffset:", void, .{_instanceDescriptorBufferOffset});
    }

    pub fn instanceDescriptorStride(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "instanceDescriptorStride", objc.NSUInteger, .{});
    }

    pub fn setInstanceDescriptorStride(_self: *@This(), _instanceDescriptorStride: objc.NSUInteger) void {
        return objc.msgSend(_self, "setInstanceDescriptorStride:", void, .{_instanceDescriptorStride});
    }

    pub fn maxInstanceCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxInstanceCount", objc.NSUInteger, .{});
    }

    pub fn setMaxInstanceCount(_self: *@This(), _maxInstanceCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaxInstanceCount:", void, .{_maxInstanceCount});
    }

    pub fn instanceCountBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "instanceCountBuffer", ?*anyopaque, .{});
    }

    pub fn setInstanceCountBuffer(_self: *@This(), _instanceCountBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setInstanceCountBuffer:", void, .{_instanceCountBuffer});
    }

    pub fn instanceCountBufferOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "instanceCountBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setInstanceCountBufferOffset(_self: *@This(), _instanceCountBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setInstanceCountBufferOffset:", void, .{_instanceCountBufferOffset});
    }

    pub fn instanceDescriptorType(_self: *@This()) AccelerationStructureInstanceDescriptorType {
        return objc.msgSend(_self, "instanceDescriptorType", AccelerationStructureInstanceDescriptorType, .{});
    }

    pub fn setInstanceDescriptorType(_self: *@This(), _instanceDescriptorType: AccelerationStructureInstanceDescriptorType) void {
        return objc.msgSend(_self, "setInstanceDescriptorType:", void, .{_instanceDescriptorType});
    }

    pub fn motionTransformBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "motionTransformBuffer", ?*anyopaque, .{});
    }

    pub fn setMotionTransformBuffer(_self: *@This(), _motionTransformBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setMotionTransformBuffer:", void, .{_motionTransformBuffer});
    }

    pub fn motionTransformBufferOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "motionTransformBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setMotionTransformBufferOffset(_self: *@This(), _motionTransformBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMotionTransformBufferOffset:", void, .{_motionTransformBufferOffset});
    }

    pub fn maxMotionTransformCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxMotionTransformCount", objc.NSUInteger, .{});
    }

    pub fn setMaxMotionTransformCount(_self: *@This(), _maxMotionTransformCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaxMotionTransformCount:", void, .{_maxMotionTransformCount});
    }

    pub fn motionTransformCountBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "motionTransformCountBuffer", ?*anyopaque, .{});
    }

    pub fn setMotionTransformCountBuffer(_self: *@This(), _motionTransformCountBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setMotionTransformCountBuffer:", void, .{_motionTransformCountBuffer});
    }

    pub fn motionTransformCountBufferOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "motionTransformCountBufferOffset", objc.NSUInteger, .{});
    }

    pub fn setMotionTransformCountBufferOffset(_self: *@This(), _motionTransformCountBufferOffset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMotionTransformCountBufferOffset:", void, .{_motionTransformCountBufferOffset});
    }

    pub fn instanceTransformationMatrixLayout(_self: *@This()) MatrixLayout {
        return objc.msgSend(_self, "instanceTransformationMatrixLayout", MatrixLayout, .{});
    }

    pub fn setInstanceTransformationMatrixLayout(_self: *@This(), _instanceTransformationMatrixLayout: MatrixLayout) void {
        return objc.msgSend(_self, "setInstanceTransformationMatrixLayout:", void, .{_instanceTransformationMatrixLayout});
    }

    pub fn motionTransformType(_self: *@This()) TransformType {
        return objc.msgSend(_self, "motionTransformType", TransformType, .{});
    }

    pub fn setMotionTransformType(_self: *@This(), _motionTransformType: TransformType) void {
        return objc.msgSend(_self, "setMotionTransformType:", void, .{_motionTransformType});
    }

    pub fn motionTransformStride(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "motionTransformStride", objc.NSUInteger, .{});
    }

    pub fn setMotionTransformStride(_self: *@This(), _motionTransformStride: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMotionTransformStride:", void, .{_motionTransformStride});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLAccelerationStructure?language=objc
pub const AccelerationStructure = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        Resource,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn allocatedSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "allocatedSize", objc.NSUInteger, .{});
    }

    pub fn setPurgeableState(_self: *@This(), _state: PurgeableState) PurgeableState {
        return objc.msgSend(_self, "setPurgeableState:", PurgeableState, .{_state});
    }

    pub fn makeAliasable(_self: *@This()) void {
        return objc.msgSend(_self, "makeAliasable", void, .{});
    }

    pub fn isAliasable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAliasable", objc.BOOL, .{});
    }

    pub fn setOwnerWithIdentity(_self: *@This(), _task_id_token: objc.task_id_token_t) objc.kern_return_t {
        return objc.msgSend(_self, "setOwnerWithIdentity:", objc.kern_return_t, .{_task_id_token});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn cpuCacheMode(_self: *@This()) CPUCacheMode {
        return objc.msgSend(_self, "cpuCacheMode", CPUCacheMode, .{});
    }

    pub fn storageMode(_self: *@This()) StorageMode {
        return objc.msgSend(_self, "storageMode", StorageMode, .{});
    }

    pub fn hazardTrackingMode(_self: *@This()) HazardTrackingMode {
        return objc.msgSend(_self, "hazardTrackingMode", HazardTrackingMode, .{});
    }

    pub fn resourceOptions(_self: *@This()) ResourceOptions {
        return objc.msgSend(_self, "resourceOptions", ResourceOptions, .{});
    }

    pub fn heap(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "heap", ?*anyopaque, .{});
    }

    pub fn heapOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "heapOffset", objc.NSUInteger, .{});
    }

    pub fn size(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "size", objc.NSUInteger, .{});
    }

    pub fn gpuResourceID(_self: *@This()) ResourceID {
        return objc.msgSend(_self, "gpuResourceID", ResourceID, .{});
    }
};

pub const HeapType = enum(objc.NSInteger) {
    Automatic = 0,
    Placement = 1,
    Sparse = 2,
};

/// https://developer.apple.com/documentation/Metal/MTLHeapDescriptor?language=objc
pub const HeapDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLHeapDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn size(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "size", objc.NSUInteger, .{});
    }

    pub fn setSize(_self: *@This(), _size: objc.NSUInteger) void {
        return objc.msgSend(_self, "setSize:", void, .{_size});
    }

    pub fn storageMode(_self: *@This()) StorageMode {
        return objc.msgSend(_self, "storageMode", StorageMode, .{});
    }

    pub fn setStorageMode(_self: *@This(), _storageMode: StorageMode) void {
        return objc.msgSend(_self, "setStorageMode:", void, .{_storageMode});
    }

    pub fn cpuCacheMode(_self: *@This()) CPUCacheMode {
        return objc.msgSend(_self, "cpuCacheMode", CPUCacheMode, .{});
    }

    pub fn setCpuCacheMode(_self: *@This(), _cpuCacheMode: CPUCacheMode) void {
        return objc.msgSend(_self, "setCpuCacheMode:", void, .{_cpuCacheMode});
    }

    pub fn sparsePageSize(_self: *@This()) SparsePageSize {
        return objc.msgSend(_self, "sparsePageSize", SparsePageSize, .{});
    }

    pub fn setSparsePageSize(_self: *@This(), _sparsePageSize: SparsePageSize) void {
        return objc.msgSend(_self, "setSparsePageSize:", void, .{_sparsePageSize});
    }

    pub fn hazardTrackingMode(_self: *@This()) HazardTrackingMode {
        return objc.msgSend(_self, "hazardTrackingMode", HazardTrackingMode, .{});
    }

    pub fn setHazardTrackingMode(_self: *@This(), _hazardTrackingMode: HazardTrackingMode) void {
        return objc.msgSend(_self, "setHazardTrackingMode:", void, .{_hazardTrackingMode});
    }

    pub fn resourceOptions(_self: *@This()) ResourceOptions {
        return objc.msgSend(_self, "resourceOptions", ResourceOptions, .{});
    }

    pub fn setResourceOptions(_self: *@This(), _resourceOptions: ResourceOptions) void {
        return objc.msgSend(_self, "setResourceOptions:", void, .{_resourceOptions});
    }

    pub fn @"type"(_self: *@This()) HeapType {
        return objc.msgSend(_self, "type", HeapType, .{});
    }

    pub fn setType(_self: *@This(), _type: HeapType) void {
        return objc.msgSend(_self, "setType:", void, .{_type});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLHeap?language=objc
pub const Heap = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        Allocation,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn allocatedSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "allocatedSize", objc.NSUInteger, .{});
    }

    pub fn maxAvailableSizeWithAlignment(_self: *@This(), _alignment: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(_self, "maxAvailableSizeWithAlignment:", objc.NSUInteger, .{_alignment});
    }

    pub fn newBufferWithLengthOptions(_self: *@This(), _length: objc.NSUInteger, _options: ResourceOptions) ?*anyopaque {
        return objc.msgSend(_self, "newBufferWithLength:options:", ?*anyopaque, .{ _length, _options });
    }

    pub fn newTextureWithDescriptor(_self: *@This(), _descriptor: ?*TextureDescriptor) ?*anyopaque {
        return objc.msgSend(_self, "newTextureWithDescriptor:", ?*anyopaque, .{_descriptor});
    }

    pub fn setPurgeableState(_self: *@This(), _state: PurgeableState) PurgeableState {
        return objc.msgSend(_self, "setPurgeableState:", PurgeableState, .{_state});
    }

    pub fn newBufferWithLengthOptionsOffset(_self: *@This(), _length: objc.NSUInteger, _options: ResourceOptions, _offset: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(_self, "newBufferWithLength:options:offset:", ?*anyopaque, .{ _length, _options, _offset });
    }

    pub fn newTextureWithDescriptorOffset(_self: *@This(), _descriptor: ?*TextureDescriptor, _offset: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(_self, "newTextureWithDescriptor:offset:", ?*anyopaque, .{ _descriptor, _offset });
    }

    pub fn newAccelerationStructureWithSize(_self: *@This(), _size: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(_self, "newAccelerationStructureWithSize:", ?*anyopaque, .{_size});
    }

    pub fn newAccelerationStructureWithDescriptor(_self: *@This(), _descriptor: ?*AccelerationStructureDescriptor) ?*anyopaque {
        return objc.msgSend(_self, "newAccelerationStructureWithDescriptor:", ?*anyopaque, .{_descriptor});
    }

    pub fn newAccelerationStructureWithSizeOffset(_self: *@This(), _size: objc.NSUInteger, _offset: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(_self, "newAccelerationStructureWithSize:offset:", ?*anyopaque, .{ _size, _offset });
    }

    pub fn newAccelerationStructureWithDescriptorOffset(_self: *@This(), _descriptor: ?*AccelerationStructureDescriptor, _offset: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(_self, "newAccelerationStructureWithDescriptor:offset:", ?*anyopaque, .{ _descriptor, _offset });
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn storageMode(_self: *@This()) StorageMode {
        return objc.msgSend(_self, "storageMode", StorageMode, .{});
    }

    pub fn cpuCacheMode(_self: *@This()) CPUCacheMode {
        return objc.msgSend(_self, "cpuCacheMode", CPUCacheMode, .{});
    }

    pub fn hazardTrackingMode(_self: *@This()) HazardTrackingMode {
        return objc.msgSend(_self, "hazardTrackingMode", HazardTrackingMode, .{});
    }

    pub fn resourceOptions(_self: *@This()) ResourceOptions {
        return objc.msgSend(_self, "resourceOptions", ResourceOptions, .{});
    }

    pub fn size(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "size", objc.NSUInteger, .{});
    }

    pub fn usedSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "usedSize", objc.NSUInteger, .{});
    }

    pub fn currentAllocatedSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "currentAllocatedSize", objc.NSUInteger, .{});
    }

    pub fn @"type"(_self: *@This()) HeapType {
        return objc.msgSend(_self, "type", HeapType, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLArgumentEncoder?language=objc
pub const ArgumentEncoder = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn setArgumentBufferOffset(_self: *@This(), _argumentBuffer: ?*anyopaque, _offset: objc.NSUInteger) void {
        return objc.msgSend(_self, "setArgumentBuffer:offset:", void, .{ _argumentBuffer, _offset });
    }

    pub fn setArgumentBufferStartOffsetArrayElement(_self: *@This(), _argumentBuffer: ?*anyopaque, _startOffset: objc.NSUInteger, _arrayElement: objc.NSUInteger) void {
        return objc.msgSend(_self, "setArgumentBuffer:startOffset:arrayElement:", void, .{ _argumentBuffer, _startOffset, _arrayElement });
    }

    pub fn setBufferOffsetAtIndex(_self: *@This(), _buffer: ?*anyopaque, _offset: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setBuffer:offset:atIndex:", void, .{ _buffer, _offset, _index });
    }

    pub fn setBuffersOffsetsWithRange(_self: *@This(), _buffers: ?*?*anyopaque, _offsets: ?*objc.NSUInteger, _range: foundation.Range) void {
        return objc.msgSend(_self, "setBuffers:offsets:withRange:", void, .{ _buffers, _offsets, _range });
    }

    pub fn setTextureAtIndex(_self: *@This(), _texture: ?*anyopaque, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setTexture:atIndex:", void, .{ _texture, _index });
    }

    pub fn setTexturesWithRange(_self: *@This(), _textures: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setTextures:withRange:", void, .{ _textures, _range });
    }

    pub fn setSamplerStateAtIndex(_self: *@This(), _sampler: ?*anyopaque, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setSamplerState:atIndex:", void, .{ _sampler, _index });
    }

    pub fn setSamplerStatesWithRange(_self: *@This(), _samplers: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setSamplerStates:withRange:", void, .{ _samplers, _range });
    }

    pub fn constantDataAtIndex(_self: *@This(), _index: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(_self, "constantDataAtIndex:", ?*anyopaque, .{_index});
    }

    pub fn setRenderPipelineStateAtIndex(_self: *@This(), _pipeline: ?*anyopaque, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setRenderPipelineState:atIndex:", void, .{ _pipeline, _index });
    }

    pub fn setRenderPipelineStatesWithRange(_self: *@This(), _pipelines: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setRenderPipelineStates:withRange:", void, .{ _pipelines, _range });
    }

    pub fn setComputePipelineStateAtIndex(_self: *@This(), _pipeline: ?*anyopaque, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setComputePipelineState:atIndex:", void, .{ _pipeline, _index });
    }

    pub fn setComputePipelineStatesWithRange(_self: *@This(), _pipelines: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setComputePipelineStates:withRange:", void, .{ _pipelines, _range });
    }

    pub fn setIndirectCommandBufferAtIndex(_self: *@This(), _indirectCommandBuffer: ?*anyopaque, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setIndirectCommandBuffer:atIndex:", void, .{ _indirectCommandBuffer, _index });
    }

    pub fn setIndirectCommandBuffersWithRange(_self: *@This(), _buffers: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setIndirectCommandBuffers:withRange:", void, .{ _buffers, _range });
    }

    pub fn setAccelerationStructureAtIndex(_self: *@This(), _accelerationStructure: ?*anyopaque, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setAccelerationStructure:atIndex:", void, .{ _accelerationStructure, _index });
    }

    pub fn newArgumentEncoderForBufferAtIndex(_self: *@This(), _index: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(_self, "newArgumentEncoderForBufferAtIndex:", ?*anyopaque, .{_index});
    }

    pub fn setVisibleFunctionTableAtIndex(_self: *@This(), _visibleFunctionTable: ?*anyopaque, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setVisibleFunctionTable:atIndex:", void, .{ _visibleFunctionTable, _index });
    }

    pub fn setVisibleFunctionTablesWithRange(_self: *@This(), _visibleFunctionTables: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setVisibleFunctionTables:withRange:", void, .{ _visibleFunctionTables, _range });
    }

    pub fn setIntersectionFunctionTableAtIndex(_self: *@This(), _intersectionFunctionTable: ?*anyopaque, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setIntersectionFunctionTable:atIndex:", void, .{ _intersectionFunctionTable, _index });
    }

    pub fn setIntersectionFunctionTablesWithRange(_self: *@This(), _intersectionFunctionTables: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setIntersectionFunctionTables:withRange:", void, .{ _intersectionFunctionTables, _range });
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn encodedLength(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "encodedLength", objc.NSUInteger, .{});
    }

    pub fn alignment(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "alignment", objc.NSUInteger, .{});
    }
};

pub const CaptureError = enum(objc.NSInteger) {
    NotSupported = 1,
    AlreadyCapturing = 2,
    InvalidDescriptor = 3,
};

pub const CaptureDestination = enum(objc.NSInteger) {
    DeveloperTools = 1,
    GPUTraceDocument = 2,
};

/// https://developer.apple.com/documentation/Metal/MTLCaptureDescriptor?language=objc
pub const CaptureDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLCaptureDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn captureObject(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "captureObject", *objc.Id, .{});
    }

    pub fn setCaptureObject(_self: *@This(), _captureObject: *objc.Id) void {
        return objc.msgSend(_self, "setCaptureObject:", void, .{_captureObject});
    }

    pub fn destination(_self: *@This()) CaptureDestination {
        return objc.msgSend(_self, "destination", CaptureDestination, .{});
    }

    pub fn setDestination(_self: *@This(), _destination: CaptureDestination) void {
        return objc.msgSend(_self, "setDestination:", void, .{_destination});
    }

    pub fn outputURL(_self: *@This()) ?*foundation.URL {
        return objc.msgSend(_self, "outputURL", ?*foundation.URL, .{});
    }

    pub fn setOutputURL(_self: *@This(), _outputURL: ?*foundation.URL) void {
        return objc.msgSend(_self, "setOutputURL:", void, .{_outputURL});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLCaptureManager?language=objc
pub const CaptureManager = opaque {
    pub const InternalInfo = objc.ExternClass("MTLCaptureManager", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn sharedCaptureManager(_self: *@This()) ?*CaptureManager {
        return objc.msgSend(_self, "sharedCaptureManager", ?*CaptureManager, .{});
    }

    pub fn newCaptureScopeWithDevice(_self: *@This(), _device: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "newCaptureScopeWithDevice:", ?*anyopaque, .{_device});
    }

    pub fn newCaptureScopeWithCommandQueue(_self: *@This(), _commandQueue: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(_self, "newCaptureScopeWithCommandQueue:", ?*anyopaque, .{_commandQueue});
    }

    pub fn supportsDestination(_self: *@This(), _destination: CaptureDestination) objc.BOOL {
        return objc.msgSend(_self, "supportsDestination:", objc.BOOL, .{_destination});
    }

    pub fn startCaptureWithDescriptorError(_self: *@This(), _descriptor: ?*CaptureDescriptor, _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "startCaptureWithDescriptor:error:", objc.BOOL, .{ _descriptor, _error });
    }

    pub fn startCaptureWithDevice(_self: *@This(), _device: ?*anyopaque) void {
        return objc.msgSend(_self, "startCaptureWithDevice:", void, .{_device});
    }

    pub fn startCaptureWithCommandQueue(_self: *@This(), _commandQueue: ?*anyopaque) void {
        return objc.msgSend(_self, "startCaptureWithCommandQueue:", void, .{_commandQueue});
    }

    pub fn startCaptureWithScope(_self: *@This(), _captureScope: ?*anyopaque) void {
        return objc.msgSend(_self, "startCaptureWithScope:", void, .{_captureScope});
    }

    pub fn stopCapture(_self: *@This()) void {
        return objc.msgSend(_self, "stopCapture", void, .{});
    }

    pub fn defaultCaptureScope(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "defaultCaptureScope", ?*anyopaque, .{});
    }

    pub fn setDefaultCaptureScope(_self: *@This(), _defaultCaptureScope: ?*anyopaque) void {
        return objc.msgSend(_self, "setDefaultCaptureScope:", void, .{_defaultCaptureScope});
    }

    pub fn isCapturing(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isCapturing", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLCaptureScope?language=objc
pub const CaptureScope = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn beginScope(_self: *@This()) void {
        return objc.msgSend(_self, "beginScope", void, .{});
    }

    pub fn endScope(_self: *@This()) void {
        return objc.msgSend(_self, "endScope", void, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn commandQueue(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "commandQueue", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLIndirectRenderCommand?language=objc
pub const IndirectRenderCommand = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn setRenderPipelineState(_self: *@This(), _pipelineState: ?*anyopaque) void {
        return objc.msgSend(_self, "setRenderPipelineState:", void, .{_pipelineState});
    }

    pub fn setVertexBufferOffsetAtIndex(_self: *@This(), _buffer: ?*anyopaque, _offset: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setVertexBuffer:offset:atIndex:", void, .{ _buffer, _offset, _index });
    }

    pub fn setFragmentBufferOffsetAtIndex(_self: *@This(), _buffer: ?*anyopaque, _offset: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setFragmentBuffer:offset:atIndex:", void, .{ _buffer, _offset, _index });
    }

    pub fn setVertexBufferOffsetAttributeStrideAtIndex(
        _self: *@This(),
        _buffer: ?*anyopaque,
        _offset: objc.NSUInteger,
        _stride: objc.NSUInteger,
        _index: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "setVertexBuffer:offset:attributeStride:atIndex:", void, .{
            _buffer,
            _offset,
            _stride,
            _index,
        });
    }

    pub fn drawPatchesPatchStartPatchCountPatchIndexBufferPatchIndexBufferOffsetInstanceCountBaseInstanceTessellationFactorBufferTessellationFactorBufferOffsetTessellationFactorBufferInstanceStride(
        _self: *@This(),
        _numberOfPatchControlPoints: objc.NSUInteger,
        _patchStart: objc.NSUInteger,
        _patchCount: objc.NSUInteger,
        _patchIndexBuffer: ?*anyopaque,
        _patchIndexBufferOffset: objc.NSUInteger,
        _instanceCount: objc.NSUInteger,
        _baseInstance: objc.NSUInteger,
        _buffer: ?*anyopaque,
        _offset: objc.NSUInteger,
        _instanceStride: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:", void, .{
            _numberOfPatchControlPoints,
            _patchStart,
            _patchCount,
            _patchIndexBuffer,
            _patchIndexBufferOffset,
            _instanceCount,
            _baseInstance,
            _buffer,
            _offset,
            _instanceStride,
        });
    }

    pub fn drawIndexedPatchesPatchStartPatchCountPatchIndexBufferPatchIndexBufferOffsetControlPointIndexBufferControlPointIndexBufferOffsetInstanceCountBaseInstanceTessellationFactorBufferTessellationFactorBufferOffsetTessellationFactorBufferInstanceStride(
        _self: *@This(),
        _numberOfPatchControlPoints: objc.NSUInteger,
        _patchStart: objc.NSUInteger,
        _patchCount: objc.NSUInteger,
        _patchIndexBuffer: ?*anyopaque,
        _patchIndexBufferOffset: objc.NSUInteger,
        _controlPointIndexBuffer: ?*anyopaque,
        _controlPointIndexBufferOffset: objc.NSUInteger,
        _instanceCount: objc.NSUInteger,
        _baseInstance: objc.NSUInteger,
        _buffer: ?*anyopaque,
        _offset: objc.NSUInteger,
        _instanceStride: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:", void, .{
            _numberOfPatchControlPoints,
            _patchStart,
            _patchCount,
            _patchIndexBuffer,
            _patchIndexBufferOffset,
            _controlPointIndexBuffer,
            _controlPointIndexBufferOffset,
            _instanceCount,
            _baseInstance,
            _buffer,
            _offset,
            _instanceStride,
        });
    }

    pub fn drawPrimitivesVertexStartVertexCountInstanceCountBaseInstance(
        _self: *@This(),
        _primitiveType: PrimitiveType,
        _vertexStart: objc.NSUInteger,
        _vertexCount: objc.NSUInteger,
        _instanceCount: objc.NSUInteger,
        _baseInstance: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:", void, .{
            _primitiveType,
            _vertexStart,
            _vertexCount,
            _instanceCount,
            _baseInstance,
        });
    }

    pub fn drawIndexedPrimitivesIndexCountIndexTypeIndexBufferIndexBufferOffsetInstanceCountBaseVertexBaseInstance(
        _self: *@This(),
        _primitiveType: PrimitiveType,
        _indexCount: objc.NSUInteger,
        _indexType: IndexType,
        _indexBuffer: ?*anyopaque,
        _indexBufferOffset: objc.NSUInteger,
        _instanceCount: objc.NSUInteger,
        _baseVertex: objc.NSInteger,
        _baseInstance: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:", void, .{
            _primitiveType,
            _indexCount,
            _indexType,
            _indexBuffer,
            _indexBufferOffset,
            _instanceCount,
            _baseVertex,
            _baseInstance,
        });
    }

    pub fn setObjectThreadgroupMemoryLengthAtIndex(_self: *@This(), _length: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setObjectThreadgroupMemoryLength:atIndex:", void, .{ _length, _index });
    }

    pub fn setObjectBufferOffsetAtIndex(_self: *@This(), _buffer: ?*anyopaque, _offset: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setObjectBuffer:offset:atIndex:", void, .{ _buffer, _offset, _index });
    }

    pub fn setMeshBufferOffsetAtIndex(_self: *@This(), _buffer: ?*anyopaque, _offset: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMeshBuffer:offset:atIndex:", void, .{ _buffer, _offset, _index });
    }

    pub fn drawMeshThreadgroupsThreadsPerObjectThreadgroupThreadsPerMeshThreadgroup(_self: *@This(), _threadgroupsPerGrid: Size, _threadsPerObjectThreadgroup: Size, _threadsPerMeshThreadgroup: Size) void {
        return objc.msgSend(_self, "drawMeshThreadgroups:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:", void, .{ _threadgroupsPerGrid, _threadsPerObjectThreadgroup, _threadsPerMeshThreadgroup });
    }

    pub fn drawMeshThreadsThreadsPerObjectThreadgroupThreadsPerMeshThreadgroup(_self: *@This(), _threadsPerGrid: Size, _threadsPerObjectThreadgroup: Size, _threadsPerMeshThreadgroup: Size) void {
        return objc.msgSend(_self, "drawMeshThreads:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:", void, .{ _threadsPerGrid, _threadsPerObjectThreadgroup, _threadsPerMeshThreadgroup });
    }

    pub fn setBarrier(_self: *@This()) void {
        return objc.msgSend(_self, "setBarrier", void, .{});
    }

    pub fn clearBarrier(_self: *@This()) void {
        return objc.msgSend(_self, "clearBarrier", void, .{});
    }

    pub fn reset(_self: *@This()) void {
        return objc.msgSend(_self, "reset", void, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLIndirectComputeCommand?language=objc
pub const IndirectComputeCommand = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn setComputePipelineState(_self: *@This(), _pipelineState: ?*anyopaque) void {
        return objc.msgSend(_self, "setComputePipelineState:", void, .{_pipelineState});
    }

    pub fn setKernelBufferOffsetAtIndex(_self: *@This(), _buffer: ?*anyopaque, _offset: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setKernelBuffer:offset:atIndex:", void, .{ _buffer, _offset, _index });
    }

    pub fn setKernelBufferOffsetAttributeStrideAtIndex(
        _self: *@This(),
        _buffer: ?*anyopaque,
        _offset: objc.NSUInteger,
        _stride: objc.NSUInteger,
        _index: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "setKernelBuffer:offset:attributeStride:atIndex:", void, .{
            _buffer,
            _offset,
            _stride,
            _index,
        });
    }

    pub fn concurrentDispatchThreadgroupsThreadsPerThreadgroup(_self: *@This(), _threadgroupsPerGrid: Size, _threadsPerThreadgroup: Size) void {
        return objc.msgSend(_self, "concurrentDispatchThreadgroups:threadsPerThreadgroup:", void, .{ _threadgroupsPerGrid, _threadsPerThreadgroup });
    }

    pub fn concurrentDispatchThreadsThreadsPerThreadgroup(_self: *@This(), _threadsPerGrid: Size, _threadsPerThreadgroup: Size) void {
        return objc.msgSend(_self, "concurrentDispatchThreads:threadsPerThreadgroup:", void, .{ _threadsPerGrid, _threadsPerThreadgroup });
    }

    pub fn setBarrier(_self: *@This()) void {
        return objc.msgSend(_self, "setBarrier", void, .{});
    }

    pub fn clearBarrier(_self: *@This()) void {
        return objc.msgSend(_self, "clearBarrier", void, .{});
    }

    pub fn setImageblockWidthHeight(_self: *@This(), _width: objc.NSUInteger, _height: objc.NSUInteger) void {
        return objc.msgSend(_self, "setImageblockWidth:height:", void, .{ _width, _height });
    }

    pub fn reset(_self: *@This()) void {
        return objc.msgSend(_self, "reset", void, .{});
    }

    pub fn setThreadgroupMemoryLengthAtIndex(_self: *@This(), _length: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setThreadgroupMemoryLength:atIndex:", void, .{ _length, _index });
    }

    pub fn setStageInRegion(_self: *@This(), _region: Region) void {
        return objc.msgSend(_self, "setStageInRegion:", void, .{_region});
    }
};

pub const IndirectCommandType = enum(objc.NSUInteger) {
    Draw = 1,
    DrawIndexed = 2,
    DrawPatches = 4,
    DrawIndexedPatches = 8,
    ConcurrentDispatch = 32,
    ConcurrentDispatchThreads = 64,
    DrawMeshThreadgroups = 128,
    DrawMeshThreads = 256,
};

pub const IndirectCommandBufferExecutionRange = extern struct {
    location: objc.uint32_t,
    length: objc.uint32_t,
};

extern "Metal" fn MTLIndirectCommandBufferExecutionRangeMake(location: objc.uint32_t, length: objc.uint32_t) callconv(.C) IndirectCommandBufferExecutionRange;
pub const indirectCommandBufferExecutionRangeMake = MTLIndirectCommandBufferExecutionRangeMake;

/// https://developer.apple.com/documentation/Metal/MTLIndirectCommandBufferDescriptor?language=objc
pub const IndirectCommandBufferDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLIndirectCommandBufferDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn commandTypes(_self: *@This()) IndirectCommandType {
        return objc.msgSend(_self, "commandTypes", IndirectCommandType, .{});
    }

    pub fn setCommandTypes(_self: *@This(), _commandTypes: IndirectCommandType) void {
        return objc.msgSend(_self, "setCommandTypes:", void, .{_commandTypes});
    }

    pub fn inheritPipelineState(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "inheritPipelineState", objc.BOOL, .{});
    }

    pub fn setInheritPipelineState(_self: *@This(), _inheritPipelineState: objc.BOOL) void {
        return objc.msgSend(_self, "setInheritPipelineState:", void, .{_inheritPipelineState});
    }

    pub fn inheritBuffers(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "inheritBuffers", objc.BOOL, .{});
    }

    pub fn setInheritBuffers(_self: *@This(), _inheritBuffers: objc.BOOL) void {
        return objc.msgSend(_self, "setInheritBuffers:", void, .{_inheritBuffers});
    }

    pub fn maxVertexBufferBindCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxVertexBufferBindCount", objc.NSUInteger, .{});
    }

    pub fn setMaxVertexBufferBindCount(_self: *@This(), _maxVertexBufferBindCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaxVertexBufferBindCount:", void, .{_maxVertexBufferBindCount});
    }

    pub fn maxFragmentBufferBindCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxFragmentBufferBindCount", objc.NSUInteger, .{});
    }

    pub fn setMaxFragmentBufferBindCount(_self: *@This(), _maxFragmentBufferBindCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaxFragmentBufferBindCount:", void, .{_maxFragmentBufferBindCount});
    }

    pub fn maxKernelBufferBindCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxKernelBufferBindCount", objc.NSUInteger, .{});
    }

    pub fn setMaxKernelBufferBindCount(_self: *@This(), _maxKernelBufferBindCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaxKernelBufferBindCount:", void, .{_maxKernelBufferBindCount});
    }

    pub fn maxKernelThreadgroupMemoryBindCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxKernelThreadgroupMemoryBindCount", objc.NSUInteger, .{});
    }

    pub fn setMaxKernelThreadgroupMemoryBindCount(_self: *@This(), _maxKernelThreadgroupMemoryBindCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaxKernelThreadgroupMemoryBindCount:", void, .{_maxKernelThreadgroupMemoryBindCount});
    }

    pub fn maxObjectBufferBindCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxObjectBufferBindCount", objc.NSUInteger, .{});
    }

    pub fn setMaxObjectBufferBindCount(_self: *@This(), _maxObjectBufferBindCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaxObjectBufferBindCount:", void, .{_maxObjectBufferBindCount});
    }

    pub fn maxMeshBufferBindCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxMeshBufferBindCount", objc.NSUInteger, .{});
    }

    pub fn setMaxMeshBufferBindCount(_self: *@This(), _maxMeshBufferBindCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaxMeshBufferBindCount:", void, .{_maxMeshBufferBindCount});
    }

    pub fn maxObjectThreadgroupMemoryBindCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxObjectThreadgroupMemoryBindCount", objc.NSUInteger, .{});
    }

    pub fn setMaxObjectThreadgroupMemoryBindCount(_self: *@This(), _maxObjectThreadgroupMemoryBindCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaxObjectThreadgroupMemoryBindCount:", void, .{_maxObjectThreadgroupMemoryBindCount});
    }

    pub fn supportRayTracing(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportRayTracing", objc.BOOL, .{});
    }

    pub fn setSupportRayTracing(_self: *@This(), _supportRayTracing: objc.BOOL) void {
        return objc.msgSend(_self, "setSupportRayTracing:", void, .{_supportRayTracing});
    }

    pub fn supportDynamicAttributeStride(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportDynamicAttributeStride", objc.BOOL, .{});
    }

    pub fn setSupportDynamicAttributeStride(_self: *@This(), _supportDynamicAttributeStride: objc.BOOL) void {
        return objc.msgSend(_self, "setSupportDynamicAttributeStride:", void, .{_supportDynamicAttributeStride});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLIndirectCommandBuffer?language=objc
pub const IndirectCommandBuffer = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        Resource,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn allocatedSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "allocatedSize", objc.NSUInteger, .{});
    }

    pub fn setPurgeableState(_self: *@This(), _state: PurgeableState) PurgeableState {
        return objc.msgSend(_self, "setPurgeableState:", PurgeableState, .{_state});
    }

    pub fn makeAliasable(_self: *@This()) void {
        return objc.msgSend(_self, "makeAliasable", void, .{});
    }

    pub fn isAliasable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAliasable", objc.BOOL, .{});
    }

    pub fn setOwnerWithIdentity(_self: *@This(), _task_id_token: objc.task_id_token_t) objc.kern_return_t {
        return objc.msgSend(_self, "setOwnerWithIdentity:", objc.kern_return_t, .{_task_id_token});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn cpuCacheMode(_self: *@This()) CPUCacheMode {
        return objc.msgSend(_self, "cpuCacheMode", CPUCacheMode, .{});
    }

    pub fn storageMode(_self: *@This()) StorageMode {
        return objc.msgSend(_self, "storageMode", StorageMode, .{});
    }

    pub fn hazardTrackingMode(_self: *@This()) HazardTrackingMode {
        return objc.msgSend(_self, "hazardTrackingMode", HazardTrackingMode, .{});
    }

    pub fn resourceOptions(_self: *@This()) ResourceOptions {
        return objc.msgSend(_self, "resourceOptions", ResourceOptions, .{});
    }

    pub fn heap(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "heap", ?*anyopaque, .{});
    }

    pub fn heapOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "heapOffset", objc.NSUInteger, .{});
    }

    pub fn resetWithRange(_self: *@This(), _range: foundation.Range) void {
        return objc.msgSend(_self, "resetWithRange:", void, .{_range});
    }

    pub fn indirectRenderCommandAtIndex(_self: *@This(), _commandIndex: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(_self, "indirectRenderCommandAtIndex:", ?*anyopaque, .{_commandIndex});
    }

    pub fn indirectComputeCommandAtIndex(_self: *@This(), _commandIndex: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(_self, "indirectComputeCommandAtIndex:", ?*anyopaque, .{_commandIndex});
    }

    pub fn size(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "size", objc.NSUInteger, .{});
    }

    pub fn gpuResourceID(_self: *@This()) ResourceID {
        return objc.msgSend(_self, "gpuResourceID", ResourceID, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLEvent?language=objc
pub const Event = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLSharedEventListener?language=objc
pub const SharedEventListener = opaque {
    pub const InternalInfo = objc.ExternClass("MTLSharedEventListener", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithDispatchQueue(_self: *@This(), _dispatchQueue: objc.dispatch_queue_t) *@This() {
        return objc.msgSend(_self, "initWithDispatchQueue:", *@This(), .{_dispatchQueue});
    }

    pub fn dispatchQueue(_self: *@This()) objc.dispatch_queue_t {
        return objc.msgSend(_self, "dispatchQueue", objc.dispatch_queue_t, .{});
    }
};

pub const SharedEventNotificationBlock = *const fn (?*anyopaque, objc.uint64_t) callconv(.C) void;

/// https://developer.apple.com/documentation/Metal/MTLSharedEvent?language=objc
pub const SharedEvent = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        Event,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn notifyListenerAtValueBlock(_self: *@This(), _listener: ?*SharedEventListener, _value: objc.uint64_t, _block: SharedEventNotificationBlock) void {
        return objc.msgSend(_self, "notifyListener:atValue:block:", void, .{ _listener, _value, _block });
    }

    pub fn newSharedEventHandle(_self: *@This()) ?*SharedEventHandle {
        return objc.msgSend(_self, "newSharedEventHandle", ?*SharedEventHandle, .{});
    }

    pub fn waitUntilSignaledValueTimeoutMS(_self: *@This(), _value: objc.uint64_t, _milliseconds: objc.uint64_t) objc.BOOL {
        return objc.msgSend(_self, "waitUntilSignaledValue:timeoutMS:", objc.BOOL, .{ _value, _milliseconds });
    }

    pub fn signaledValue(_self: *@This()) objc.uint64_t {
        return objc.msgSend(_self, "signaledValue", objc.uint64_t, .{});
    }

    pub fn setSignaledValue(_self: *@This(), _signaledValue: objc.uint64_t) void {
        return objc.msgSend(_self, "setSignaledValue:", void, .{_signaledValue});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLSharedEventHandle?language=objc
pub const SharedEventHandle = opaque {
    pub const InternalInfo = objc.ExternClass("MTLSharedEventHandle", @This(), objc.NSObject, &.{
        foundation.SecureCoding,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }
};

pub const SharedEventHandlePrivate = extern struct {};

pub const FunctionLogType = enum(objc.NSUInteger) {
    Validation = 0,
};

/// https://developer.apple.com/documentation/Metal/MTLLogContainer?language=objc
pub const LogContainer = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
        foundation.FastEnumeration,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn countByEnumeratingWithStateObjectsCount(_self: *@This(), _state: ?*foundation.FastEnumerationState, _buffer: ?**objc.Id, _len: objc.NSUInteger) objc.NSUInteger {
        return objc.msgSend(_self, "countByEnumeratingWithState:objects:count:", objc.NSUInteger, .{ _state, _buffer, _len });
    }
};

/// https://developer.apple.com/documentation/Metal/MTLFunctionLogDebugLocation?language=objc
pub const FunctionLogDebugLocation = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn functionName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "functionName", ?*foundation.String, .{});
    }

    pub fn url(_self: *@This()) ?*foundation.URL {
        return objc.msgSend(_self, "URL", ?*foundation.URL, .{});
    }

    pub fn line(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "line", objc.NSUInteger, .{});
    }

    pub fn column(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "column", objc.NSUInteger, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLFunctionLog?language=objc
pub const FunctionLog = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn @"type"(_self: *@This()) FunctionLogType {
        return objc.msgSend(_self, "type", FunctionLogType, .{});
    }

    pub fn encoderLabel(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "encoderLabel", ?*foundation.String, .{});
    }

    pub fn function(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "function", ?*anyopaque, .{});
    }

    pub fn debugLocation(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "debugLocation", ?*anyopaque, .{});
    }
};

pub const AccelerationStructureRefitOptions = enum(objc.NSUInteger) {
    VertexData = 1,
    PerPrimitiveData = 2,
};

/// https://developer.apple.com/documentation/Metal/MTLAccelerationStructureCommandEncoder?language=objc
pub const AccelerationStructureCommandEncoder = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        CommandEncoder,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn endEncoding(_self: *@This()) void {
        return objc.msgSend(_self, "endEncoding", void, .{});
    }

    pub fn insertDebugSignpost(_self: *@This(), _string: ?*foundation.String) void {
        return objc.msgSend(_self, "insertDebugSignpost:", void, .{_string});
    }

    pub fn pushDebugGroup(_self: *@This(), _string: ?*foundation.String) void {
        return objc.msgSend(_self, "pushDebugGroup:", void, .{_string});
    }

    pub fn popDebugGroup(_self: *@This()) void {
        return objc.msgSend(_self, "popDebugGroup", void, .{});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn buildAccelerationStructureDescriptorScratchBufferScratchBufferOffset(
        _self: *@This(),
        _accelerationStructure: ?*anyopaque,
        _descriptor: ?*AccelerationStructureDescriptor,
        _scratchBuffer: ?*anyopaque,
        _scratchBufferOffset: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "buildAccelerationStructure:descriptor:scratchBuffer:scratchBufferOffset:", void, .{
            _accelerationStructure,
            _descriptor,
            _scratchBuffer,
            _scratchBufferOffset,
        });
    }

    pub fn refitAccelerationStructureDescriptorDestinationScratchBufferScratchBufferOffset(
        _self: *@This(),
        _sourceAccelerationStructure: ?*anyopaque,
        _descriptor: ?*AccelerationStructureDescriptor,
        _destinationAccelerationStructure: ?*anyopaque,
        _scratchBuffer: ?*anyopaque,
        _scratchBufferOffset: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "refitAccelerationStructure:descriptor:destination:scratchBuffer:scratchBufferOffset:", void, .{
            _sourceAccelerationStructure,
            _descriptor,
            _destinationAccelerationStructure,
            _scratchBuffer,
            _scratchBufferOffset,
        });
    }

    pub fn refitAccelerationStructureDescriptorDestinationScratchBufferScratchBufferOffsetOptions(
        _self: *@This(),
        _sourceAccelerationStructure: ?*anyopaque,
        _descriptor: ?*AccelerationStructureDescriptor,
        _destinationAccelerationStructure: ?*anyopaque,
        _scratchBuffer: ?*anyopaque,
        _scratchBufferOffset: objc.NSUInteger,
        _options: AccelerationStructureRefitOptions,
    ) void {
        return objc.msgSend(_self, "refitAccelerationStructure:descriptor:destination:scratchBuffer:scratchBufferOffset:options:", void, .{
            _sourceAccelerationStructure,
            _descriptor,
            _destinationAccelerationStructure,
            _scratchBuffer,
            _scratchBufferOffset,
            _options,
        });
    }

    pub fn copyAccelerationStructureToAccelerationStructure(_self: *@This(), _sourceAccelerationStructure: ?*anyopaque, _destinationAccelerationStructure: ?*anyopaque) void {
        return objc.msgSend(_self, "copyAccelerationStructure:toAccelerationStructure:", void, .{ _sourceAccelerationStructure, _destinationAccelerationStructure });
    }

    pub fn writeCompactedAccelerationStructureSizeToBufferOffset(_self: *@This(), _accelerationStructure: ?*anyopaque, _buffer: ?*anyopaque, _offset: objc.NSUInteger) void {
        return objc.msgSend(_self, "writeCompactedAccelerationStructureSize:toBuffer:offset:", void, .{ _accelerationStructure, _buffer, _offset });
    }

    pub fn writeCompactedAccelerationStructureSizeToBufferOffsetSizeDataType(
        _self: *@This(),
        _accelerationStructure: ?*anyopaque,
        _buffer: ?*anyopaque,
        _offset: objc.NSUInteger,
        _sizeDataType: DataType,
    ) void {
        return objc.msgSend(_self, "writeCompactedAccelerationStructureSize:toBuffer:offset:sizeDataType:", void, .{
            _accelerationStructure,
            _buffer,
            _offset,
            _sizeDataType,
        });
    }

    pub fn copyAndCompactAccelerationStructureToAccelerationStructure(_self: *@This(), _sourceAccelerationStructure: ?*anyopaque, _destinationAccelerationStructure: ?*anyopaque) void {
        return objc.msgSend(_self, "copyAndCompactAccelerationStructure:toAccelerationStructure:", void, .{ _sourceAccelerationStructure, _destinationAccelerationStructure });
    }

    pub fn updateFence(_self: *@This(), _fence: ?*anyopaque) void {
        return objc.msgSend(_self, "updateFence:", void, .{_fence});
    }

    pub fn waitForFence(_self: *@This(), _fence: ?*anyopaque) void {
        return objc.msgSend(_self, "waitForFence:", void, .{_fence});
    }

    pub fn useResourceUsage(_self: *@This(), _resource: ?*anyopaque, _usage: ResourceUsage) void {
        return objc.msgSend(_self, "useResource:usage:", void, .{ _resource, _usage });
    }

    pub fn useResourcesCountUsage(_self: *@This(), _resources: ?*?*anyopaque, _count: objc.NSUInteger, _usage: ResourceUsage) void {
        return objc.msgSend(_self, "useResources:count:usage:", void, .{ _resources, _count, _usage });
    }

    pub fn useHeap(_self: *@This(), _heap: ?*anyopaque) void {
        return objc.msgSend(_self, "useHeap:", void, .{_heap});
    }

    pub fn useHeapsCount(_self: *@This(), _heaps: ?*?*anyopaque, _count: objc.NSUInteger) void {
        return objc.msgSend(_self, "useHeaps:count:", void, .{ _heaps, _count });
    }

    pub fn sampleCountersInBufferAtSampleIndexWithBarrier(_self: *@This(), _sampleBuffer: ?*anyopaque, _sampleIndex: objc.NSUInteger, _barrier: objc.BOOL) void {
        return objc.msgSend(_self, "sampleCountersInBuffer:atSampleIndex:withBarrier:", void, .{ _sampleBuffer, _sampleIndex, _barrier });
    }
};

/// https://developer.apple.com/documentation/Metal/MTLAccelerationStructurePassSampleBufferAttachmentDescriptor?language=objc
pub const AccelerationStructurePassSampleBufferAttachmentDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLAccelerationStructurePassSampleBufferAttachmentDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn sampleBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "sampleBuffer", ?*anyopaque, .{});
    }

    pub fn setSampleBuffer(_self: *@This(), _sampleBuffer: ?*anyopaque) void {
        return objc.msgSend(_self, "setSampleBuffer:", void, .{_sampleBuffer});
    }

    pub fn startOfEncoderSampleIndex(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "startOfEncoderSampleIndex", objc.NSUInteger, .{});
    }

    pub fn setStartOfEncoderSampleIndex(_self: *@This(), _startOfEncoderSampleIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setStartOfEncoderSampleIndex:", void, .{_startOfEncoderSampleIndex});
    }

    pub fn endOfEncoderSampleIndex(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "endOfEncoderSampleIndex", objc.NSUInteger, .{});
    }

    pub fn setEndOfEncoderSampleIndex(_self: *@This(), _endOfEncoderSampleIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setEndOfEncoderSampleIndex:", void, .{_endOfEncoderSampleIndex});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLAccelerationStructurePassSampleBufferAttachmentDescriptorArray?language=objc
pub const AccelerationStructurePassSampleBufferAttachmentDescriptorArray = opaque {
    pub const InternalInfo = objc.ExternClass("MTLAccelerationStructurePassSampleBufferAttachmentDescriptorArray", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn objectAtIndexedSubscript(_self: *@This(), _attachmentIndex: objc.NSUInteger) ?*AccelerationStructurePassSampleBufferAttachmentDescriptor {
        return objc.msgSend(_self, "objectAtIndexedSubscript:", ?*AccelerationStructurePassSampleBufferAttachmentDescriptor, .{_attachmentIndex});
    }

    pub fn setObjectAtIndexedSubscript(_self: *@This(), _attachment: ?*AccelerationStructurePassSampleBufferAttachmentDescriptor, _attachmentIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setObject:atIndexedSubscript:", void, .{ _attachment, _attachmentIndex });
    }
};

/// https://developer.apple.com/documentation/Metal/MTLAccelerationStructurePassDescriptor?language=objc
pub const AccelerationStructurePassDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLAccelerationStructurePassDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn accelerationStructurePassDescriptor(_self: *@This()) ?*AccelerationStructurePassDescriptor {
        return objc.msgSend(_self, "accelerationStructurePassDescriptor", ?*AccelerationStructurePassDescriptor, .{});
    }

    pub fn sampleBufferAttachments(_self: *@This()) ?*AccelerationStructurePassSampleBufferAttachmentDescriptorArray {
        return objc.msgSend(_self, "sampleBufferAttachments", ?*AccelerationStructurePassSampleBufferAttachmentDescriptorArray, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLRasterizationRateSampleArray?language=objc
pub const RasterizationRateSampleArray = opaque {
    pub const InternalInfo = objc.ExternClass("MTLRasterizationRateSampleArray", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn objectAtIndexedSubscript(_self: *@This(), _index: objc.NSUInteger) ?*foundation.Number {
        return objc.msgSend(_self, "objectAtIndexedSubscript:", ?*foundation.Number, .{_index});
    }

    pub fn setObjectAtIndexedSubscript(_self: *@This(), _value: ?*NSNumber, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setObject:atIndexedSubscript:", void, .{ _value, _index });
    }
};

/// https://developer.apple.com/documentation/Metal/MTLRasterizationRateLayerDescriptor?language=objc
pub const RasterizationRateLayerDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLRasterizationRateLayerDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithSampleCount(_self: *@This(), _sampleCount: Size) *@This() {
        return objc.msgSend(_self, "initWithSampleCount:", *@This(), .{_sampleCount});
    }

    pub fn initWithSampleCountHorizontalVertical(_self: *@This(), _sampleCount: Size, _horizontal: ?*f32, _vertical: ?*f32) *@This() {
        return objc.msgSend(_self, "initWithSampleCount:horizontal:vertical:", *@This(), .{ _sampleCount, _horizontal, _vertical });
    }

    pub fn sampleCount(_self: *@This()) Size {
        return objc.msgSend(_self, "sampleCount", Size, .{});
    }

    pub fn maxSampleCount(_self: *@This()) Size {
        return objc.msgSend(_self, "maxSampleCount", Size, .{});
    }

    pub fn horizontalSampleStorage(_self: *@This()) ?*f32 {
        return objc.msgSend(_self, "horizontalSampleStorage", ?*f32, .{});
    }

    pub fn verticalSampleStorage(_self: *@This()) ?*f32 {
        return objc.msgSend(_self, "verticalSampleStorage", ?*f32, .{});
    }

    pub fn horizontal(_self: *@This()) ?*RasterizationRateSampleArray {
        return objc.msgSend(_self, "horizontal", ?*RasterizationRateSampleArray, .{});
    }

    pub fn vertical(_self: *@This()) ?*RasterizationRateSampleArray {
        return objc.msgSend(_self, "vertical", ?*RasterizationRateSampleArray, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLRasterizationRateLayerArray?language=objc
pub const RasterizationRateLayerArray = opaque {
    pub const InternalInfo = objc.ExternClass("MTLRasterizationRateLayerArray", @This(), objc.NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn objectAtIndexedSubscript(_self: *@This(), _layerIndex: objc.NSUInteger) ?*RasterizationRateLayerDescriptor {
        return objc.msgSend(_self, "objectAtIndexedSubscript:", ?*RasterizationRateLayerDescriptor, .{_layerIndex});
    }

    pub fn setObjectAtIndexedSubscript(_self: *@This(), _layer: ?*RasterizationRateLayerDescriptor, _layerIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setObject:atIndexedSubscript:", void, .{ _layer, _layerIndex });
    }
};

/// https://developer.apple.com/documentation/Metal/MTLRasterizationRateMapDescriptor?language=objc
pub const RasterizationRateMapDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLRasterizationRateMapDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn rasterizationRateMapDescriptorWithScreenSize(_self: *@This(), _screenSize: Size) ?*RasterizationRateMapDescriptor {
        return objc.msgSend(_self, "rasterizationRateMapDescriptorWithScreenSize:", ?*RasterizationRateMapDescriptor, .{_screenSize});
    }

    pub fn rasterizationRateMapDescriptorWithScreenSizeLayer(_self: *@This(), _screenSize: Size, _layer: ?*RasterizationRateLayerDescriptor) ?*RasterizationRateMapDescriptor {
        return objc.msgSend(_self, "rasterizationRateMapDescriptorWithScreenSize:layer:", ?*RasterizationRateMapDescriptor, .{ _screenSize, _layer });
    }

    pub fn rasterizationRateMapDescriptorWithScreenSizeLayerCountLayers(_self: *@This(), _screenSize: Size, _layerCount: objc.NSUInteger, _layers: ?*?*const RasterizationRateLayerDescriptor) ?*RasterizationRateMapDescriptor {
        return objc.msgSend(_self, "rasterizationRateMapDescriptorWithScreenSize:layerCount:layers:", ?*RasterizationRateMapDescriptor, .{ _screenSize, _layerCount, _layers });
    }

    pub fn layerAtIndex(_self: *@This(), _layerIndex: objc.NSUInteger) ?*RasterizationRateLayerDescriptor {
        return objc.msgSend(_self, "layerAtIndex:", ?*RasterizationRateLayerDescriptor, .{_layerIndex});
    }

    pub fn setLayerAtIndex(_self: *@This(), _layer: ?*RasterizationRateLayerDescriptor, _layerIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setLayer:atIndex:", void, .{ _layer, _layerIndex });
    }

    pub fn layers(_self: *@This()) ?*RasterizationRateLayerArray {
        return objc.msgSend(_self, "layers", ?*RasterizationRateLayerArray, .{});
    }

    pub fn screenSize(_self: *@This()) Size {
        return objc.msgSend(_self, "screenSize", Size, .{});
    }

    pub fn setScreenSize(_self: *@This(), _screenSize: Size) void {
        return objc.msgSend(_self, "setScreenSize:", void, .{_screenSize});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn layerCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "layerCount", objc.NSUInteger, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLRasterizationRateMap?language=objc
pub const RasterizationRateMap = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn copyParameterDataToBufferOffset(_self: *@This(), _buffer: ?*anyopaque, _offset: objc.NSUInteger) void {
        return objc.msgSend(_self, "copyParameterDataToBuffer:offset:", void, .{ _buffer, _offset });
    }

    pub fn physicalSizeForLayer(_self: *@This(), _layerIndex: objc.NSUInteger) Size {
        return objc.msgSend(_self, "physicalSizeForLayer:", Size, .{_layerIndex});
    }

    pub fn mapScreenToPhysicalCoordinatesForLayer(_self: *@This(), _screenCoordinates: Coordinate2D, _layerIndex: objc.NSUInteger) Coordinate2D {
        return objc.msgSend(_self, "mapScreenToPhysicalCoordinates:forLayer:", Coordinate2D, .{ _screenCoordinates, _layerIndex });
    }

    pub fn mapPhysicalToScreenCoordinatesForLayer(_self: *@This(), _physicalCoordinates: Coordinate2D, _layerIndex: objc.NSUInteger) Coordinate2D {
        return objc.msgSend(_self, "mapPhysicalToScreenCoordinates:forLayer:", Coordinate2D, .{ _physicalCoordinates, _layerIndex });
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn screenSize(_self: *@This()) Size {
        return objc.msgSend(_self, "screenSize", Size, .{});
    }

    pub fn physicalGranularity(_self: *@This()) Size {
        return objc.msgSend(_self, "physicalGranularity", Size, .{});
    }

    pub fn layerCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "layerCount", objc.NSUInteger, .{});
    }

    pub fn parameterBufferSizeAndAlign(_self: *@This()) SizeAndAlign {
        return objc.msgSend(_self, "parameterBufferSizeAndAlign", SizeAndAlign, .{});
    }
};

pub const DynamicLibraryError = enum(objc.NSUInteger) {
    None = 0,
    InvalidFile = 1,
    CompilationFailure = 2,
    UnresolvedInstallName = 3,
    DependencyLoadFailure = 4,
    Unsupported = 5,
};

/// https://developer.apple.com/documentation/Metal/MTLDynamicLibrary?language=objc
pub const DynamicLibrary = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn serializeToURLError(_self: *@This(), _url: ?*foundation.URL, _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "serializeToURL:error:", objc.BOOL, .{ _url, _error });
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn installName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "installName", ?*foundation.String, .{});
    }
};

pub const LogLevel = enum(objc.NSInteger) {
    Undefined = 0,
    Debug = 1,
    Info = 2,
    Notice = 3,
    Error = 4,
    Fault = 5,
};

/// https://developer.apple.com/documentation/Metal/MTLLogState?language=objc
pub const LogState = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn addLogHandler(_self: *@This(), _block: *const fn (
        ?*foundation.String,
        ?*foundation.String,
        LogLevel,
        ?*foundation.String,
    ) callconv(.C) void) void {
        return objc.msgSend(_self, "addLogHandler:", void, .{_block});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLLogStateDescriptor?language=objc
pub const LogStateDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLLogStateDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn level(_self: *@This()) LogLevel {
        return objc.msgSend(_self, "level", LogLevel, .{});
    }

    pub fn setLevel(_self: *@This(), _level: LogLevel) void {
        return objc.msgSend(_self, "setLevel:", void, .{_level});
    }

    pub fn bufferSize(_self: *@This()) objc.NSInteger {
        return objc.msgSend(_self, "bufferSize", objc.NSInteger, .{});
    }

    pub fn setBufferSize(_self: *@This(), _bufferSize: objc.NSInteger) void {
        return objc.msgSend(_self, "setBufferSize:", void, .{_bufferSize});
    }
};

pub const LogStateError = enum(objc.NSUInteger) {
    InvalidSize = 1,
    Invalid = 2,
};

pub const BinaryArchiveError = enum(objc.NSUInteger) {
    None = 0,
    InvalidFile = 1,
    UnexpectedElement = 2,
    CompilationFailure = 3,
    InternalError = 4,
};

/// https://developer.apple.com/documentation/Metal/MTLBinaryArchiveDescriptor?language=objc
pub const BinaryArchiveDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLBinaryArchiveDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn url(_self: *@This()) ?*foundation.URL {
        return objc.msgSend(_self, "url", ?*foundation.URL, .{});
    }

    pub fn setUrl(_self: *@This(), _url: ?*foundation.URL) void {
        return objc.msgSend(_self, "setUrl:", void, .{_url});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLBinaryArchive?language=objc
pub const BinaryArchive = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn addComputePipelineFunctionsWithDescriptorError(_self: *@This(), _descriptor: ?*ComputePipelineDescriptor, _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "addComputePipelineFunctionsWithDescriptor:error:", objc.BOOL, .{ _descriptor, _error });
    }

    pub fn addRenderPipelineFunctionsWithDescriptorError(_self: *@This(), _descriptor: ?*RenderPipelineDescriptor, _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "addRenderPipelineFunctionsWithDescriptor:error:", objc.BOOL, .{ _descriptor, _error });
    }

    pub fn addTileRenderPipelineFunctionsWithDescriptorError(_self: *@This(), _descriptor: ?*TileRenderPipelineDescriptor, _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "addTileRenderPipelineFunctionsWithDescriptor:error:", objc.BOOL, .{ _descriptor, _error });
    }

    pub fn addMeshRenderPipelineFunctionsWithDescriptorError(_self: *@This(), _descriptor: ?*MeshRenderPipelineDescriptor, _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "addMeshRenderPipelineFunctionsWithDescriptor:error:", objc.BOOL, .{ _descriptor, _error });
    }

    pub fn addLibraryWithDescriptorError(_self: *@This(), _descriptor: ?*StitchedLibraryDescriptor, _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "addLibraryWithDescriptor:error:", objc.BOOL, .{ _descriptor, _error });
    }

    pub fn serializeToURLError(_self: *@This(), _url: ?*foundation.URL, _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "serializeToURL:error:", objc.BOOL, .{ _url, _error });
    }

    pub fn addFunctionWithDescriptorLibraryError(_self: *@This(), _descriptor: ?*FunctionDescriptor, _library: ?*anyopaque, _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "addFunctionWithDescriptor:library:error:", objc.BOOL, .{ _descriptor, _library, _error });
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }
};

pub const IntersectionFunctionSignature = enum(objc.NSUInteger) {
    None = 0,
    Instancing = 1,
    TriangleData = 2,
    WorldSpaceData = 4,
    InstanceMotion = 8,
    PrimitiveMotion = 16,
    ExtendedLimits = 32,
    MaxLevels = 64,
    CurveData = 128,
};

/// https://developer.apple.com/documentation/Metal/MTLIntersectionFunctionTableDescriptor?language=objc
pub const IntersectionFunctionTableDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLIntersectionFunctionTableDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn intersectionFunctionTableDescriptor(_self: *@This()) ?*IntersectionFunctionTableDescriptor {
        return objc.msgSend(_self, "intersectionFunctionTableDescriptor", ?*IntersectionFunctionTableDescriptor, .{});
    }

    pub fn functionCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "functionCount", objc.NSUInteger, .{});
    }

    pub fn setFunctionCount(_self: *@This(), _functionCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setFunctionCount:", void, .{_functionCount});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLIntersectionFunctionTable?language=objc
pub const IntersectionFunctionTable = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        Resource,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn allocatedSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "allocatedSize", objc.NSUInteger, .{});
    }

    pub fn setPurgeableState(_self: *@This(), _state: PurgeableState) PurgeableState {
        return objc.msgSend(_self, "setPurgeableState:", PurgeableState, .{_state});
    }

    pub fn makeAliasable(_self: *@This()) void {
        return objc.msgSend(_self, "makeAliasable", void, .{});
    }

    pub fn isAliasable(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isAliasable", objc.BOOL, .{});
    }

    pub fn setOwnerWithIdentity(_self: *@This(), _task_id_token: objc.task_id_token_t) objc.kern_return_t {
        return objc.msgSend(_self, "setOwnerWithIdentity:", objc.kern_return_t, .{_task_id_token});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn cpuCacheMode(_self: *@This()) CPUCacheMode {
        return objc.msgSend(_self, "cpuCacheMode", CPUCacheMode, .{});
    }

    pub fn storageMode(_self: *@This()) StorageMode {
        return objc.msgSend(_self, "storageMode", StorageMode, .{});
    }

    pub fn hazardTrackingMode(_self: *@This()) HazardTrackingMode {
        return objc.msgSend(_self, "hazardTrackingMode", HazardTrackingMode, .{});
    }

    pub fn resourceOptions(_self: *@This()) ResourceOptions {
        return objc.msgSend(_self, "resourceOptions", ResourceOptions, .{});
    }

    pub fn heap(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "heap", ?*anyopaque, .{});
    }

    pub fn heapOffset(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "heapOffset", objc.NSUInteger, .{});
    }

    pub fn setBufferOffsetAtIndex(_self: *@This(), _buffer: ?*anyopaque, _offset: objc.NSUInteger, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setBuffer:offset:atIndex:", void, .{ _buffer, _offset, _index });
    }

    pub fn setBuffersOffsetsWithRange(_self: *@This(), _buffers: ?*?*anyopaque, _offsets: ?*objc.NSUInteger, _range: foundation.Range) void {
        return objc.msgSend(_self, "setBuffers:offsets:withRange:", void, .{ _buffers, _offsets, _range });
    }

    pub fn setFunctionAtIndex(_self: *@This(), _function: ?*anyopaque, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setFunction:atIndex:", void, .{ _function, _index });
    }

    pub fn setFunctionsWithRange(_self: *@This(), _functions: ?*?*anyopaque, _range: foundation.Range) void {
        return objc.msgSend(_self, "setFunctions:withRange:", void, .{ _functions, _range });
    }

    pub fn setOpaqueTriangleIntersectionFunctionWithSignatureAtIndex(_self: *@This(), _signature: IntersectionFunctionSignature, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setOpaqueTriangleIntersectionFunctionWithSignature:atIndex:", void, .{ _signature, _index });
    }

    pub fn setOpaqueTriangleIntersectionFunctionWithSignatureWithRange(_self: *@This(), _signature: IntersectionFunctionSignature, _range: foundation.Range) void {
        return objc.msgSend(_self, "setOpaqueTriangleIntersectionFunctionWithSignature:withRange:", void, .{ _signature, _range });
    }

    pub fn setOpaqueCurveIntersectionFunctionWithSignatureAtIndex(_self: *@This(), _signature: IntersectionFunctionSignature, _index: objc.NSUInteger) void {
        return objc.msgSend(_self, "setOpaqueCurveIntersectionFunctionWithSignature:atIndex:", void, .{ _signature, _index });
    }

    pub fn setOpaqueCurveIntersectionFunctionWithSignatureWithRange(_self: *@This(), _signature: IntersectionFunctionSignature, _range: foundation.Range) void {
        return objc.msgSend(_self, "setOpaqueCurveIntersectionFunctionWithSignature:withRange:", void, .{ _signature, _range });
    }

    pub fn setVisibleFunctionTableAtBufferIndex(_self: *@This(), _functionTable: ?*anyopaque, _bufferIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setVisibleFunctionTable:atBufferIndex:", void, .{ _functionTable, _bufferIndex });
    }

    pub fn setVisibleFunctionTablesWithBufferRange(_self: *@This(), _functionTables: ?*?*anyopaque, _bufferRange: foundation.Range) void {
        return objc.msgSend(_self, "setVisibleFunctionTables:withBufferRange:", void, .{ _functionTables, _bufferRange });
    }

    pub fn gpuResourceID(_self: *@This()) ResourceID {
        return objc.msgSend(_self, "gpuResourceID", ResourceID, .{});
    }
};

pub const StitchedLibraryOptions = enum(objc.NSUInteger) {
    None = 0,
    FailOnBinaryArchiveMiss = 1,
    StoreLibraryInMetalPipelinesScript = 2,
};

/// https://developer.apple.com/documentation/Metal/MTLFunctionStitchingAttribute?language=objc
pub const FunctionStitchingAttribute = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLFunctionStitchingAttributeAlwaysInline?language=objc
pub const FunctionStitchingAttributeAlwaysInline = opaque {
    pub const InternalInfo = objc.ExternClass("MTLFunctionStitchingAttributeAlwaysInline", @This(), objc.NSObject, &.{
        FunctionStitchingAttribute,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLFunctionStitchingNode?language=objc
pub const FunctionStitchingNode = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*foundation.Zone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLFunctionStitchingInputNode?language=objc
pub const FunctionStitchingInputNode = opaque {
    pub const InternalInfo = objc.ExternClass("MTLFunctionStitchingInputNode", @This(), objc.NSObject, &.{
        FunctionStitchingNode,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithArgumentIndex(_self: *@This(), _argument: objc.NSUInteger) *@This() {
        return objc.msgSend(_self, "initWithArgumentIndex:", *@This(), .{_argument});
    }

    pub fn argumentIndex(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "argumentIndex", objc.NSUInteger, .{});
    }

    pub fn setArgumentIndex(_self: *@This(), _argumentIndex: objc.NSUInteger) void {
        return objc.msgSend(_self, "setArgumentIndex:", void, .{_argumentIndex});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLFunctionStitchingFunctionNode?language=objc
pub const FunctionStitchingFunctionNode = opaque {
    pub const InternalInfo = objc.ExternClass("MTLFunctionStitchingFunctionNode", @This(), objc.NSObject, &.{
        FunctionStitchingNode,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithNameArgumentsControlDependencies(_self: *@This(), _name: ?*foundation.String, _arguments: ?*anyopaque, _controlDependencies: ?*anyopaque) *@This() {
        return objc.msgSend(_self, "initWithName:arguments:controlDependencies:", *@This(), .{ _name, _arguments, _controlDependencies });
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn setName(_self: *@This(), _name: ?*foundation.String) void {
        return objc.msgSend(_self, "setName:", void, .{_name});
    }

    pub fn arguments(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "arguments", ?*anyopaque, .{});
    }

    pub fn setArguments(_self: *@This(), _arguments: ?*anyopaque) void {
        return objc.msgSend(_self, "setArguments:", void, .{_arguments});
    }

    pub fn controlDependencies(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "controlDependencies", ?*anyopaque, .{});
    }

    pub fn setControlDependencies(_self: *@This(), _controlDependencies: ?*anyopaque) void {
        return objc.msgSend(_self, "setControlDependencies:", void, .{_controlDependencies});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLFunctionStitchingGraph?language=objc
pub const FunctionStitchingGraph = opaque {
    pub const InternalInfo = objc.ExternClass("MTLFunctionStitchingGraph", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn initWithFunctionNameNodesOutputNodeAttributes(
        _self: *@This(),
        _functionName: ?*foundation.String,
        _nodes: ?*anyopaque,
        _outputNode: ?*FunctionStitchingFunctionNode,
        _attributes: ?*anyopaque,
    ) *@This() {
        return objc.msgSend(_self, "initWithFunctionName:nodes:outputNode:attributes:", *@This(), .{
            _functionName,
            _nodes,
            _outputNode,
            _attributes,
        });
    }

    pub fn functionName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "functionName", ?*foundation.String, .{});
    }

    pub fn setFunctionName(_self: *@This(), _functionName: ?*foundation.String) void {
        return objc.msgSend(_self, "setFunctionName:", void, .{_functionName});
    }

    pub fn nodes(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "nodes", ?*anyopaque, .{});
    }

    pub fn setNodes(_self: *@This(), _nodes: ?*anyopaque) void {
        return objc.msgSend(_self, "setNodes:", void, .{_nodes});
    }

    pub fn outputNode(_self: *@This()) ?*FunctionStitchingFunctionNode {
        return objc.msgSend(_self, "outputNode", ?*FunctionStitchingFunctionNode, .{});
    }

    pub fn setOutputNode(_self: *@This(), _outputNode: ?*FunctionStitchingFunctionNode) void {
        return objc.msgSend(_self, "setOutputNode:", void, .{_outputNode});
    }

    pub fn attributes(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "attributes", ?*anyopaque, .{});
    }

    pub fn setAttributes(_self: *@This(), _attributes: ?*anyopaque) void {
        return objc.msgSend(_self, "setAttributes:", void, .{_attributes});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLStitchedLibraryDescriptor?language=objc
pub const StitchedLibraryDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLStitchedLibraryDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn functionGraphs(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "functionGraphs", ?*anyopaque, .{});
    }

    pub fn setFunctionGraphs(_self: *@This(), _functionGraphs: ?*anyopaque) void {
        return objc.msgSend(_self, "setFunctionGraphs:", void, .{_functionGraphs});
    }

    pub fn functions(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "functions", ?*anyopaque, .{});
    }

    pub fn setFunctions(_self: *@This(), _functions: ?*anyopaque) void {
        return objc.msgSend(_self, "setFunctions:", void, .{_functions});
    }

    pub fn binaryArchives(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "binaryArchives", ?*anyopaque, .{});
    }

    pub fn setBinaryArchives(_self: *@This(), _binaryArchives: ?*anyopaque) void {
        return objc.msgSend(_self, "setBinaryArchives:", void, .{_binaryArchives});
    }

    pub fn options(_self: *@This()) StitchedLibraryOptions {
        return objc.msgSend(_self, "options", StitchedLibraryOptions, .{});
    }

    pub fn setOptions(_self: *@This(), _options: StitchedLibraryOptions) void {
        return objc.msgSend(_self, "setOptions:", void, .{_options});
    }
};

pub const IOPriority = enum(objc.NSInteger) {
    High = 0,
    Normal = 1,
    Low = 2,
};

pub const IOCommandQueueType = enum(objc.NSInteger) {
    Concurrent = 0,
    Serial = 1,
};

pub const IOError = enum(objc.NSInteger) {
    URLInvalid = 1,
    Internal = 2,
};

/// https://developer.apple.com/documentation/Metal/MTLIOCommandQueue?language=objc
pub const IOCommandQueue = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn enqueueBarrier(_self: *@This()) void {
        return objc.msgSend(_self, "enqueueBarrier", void, .{});
    }

    pub fn commandBuffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "commandBuffer", ?*anyopaque, .{});
    }

    pub fn commandBufferWithUnretainedReferences(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "commandBufferWithUnretainedReferences", ?*anyopaque, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLIOScratchBuffer?language=objc
pub const IOScratchBuffer = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn buffer(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "buffer", ?*anyopaque, .{});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLIOScratchBufferAllocator?language=objc
pub const IOScratchBufferAllocator = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn newScratchBufferWithMinimumSize(_self: *@This(), _minimumSize: objc.NSUInteger) ?*anyopaque {
        return objc.msgSend(_self, "newScratchBufferWithMinimumSize:", ?*anyopaque, .{_minimumSize});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLIOCommandQueueDescriptor?language=objc
pub const IOCommandQueueDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLIOCommandQueueDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn maxCommandBufferCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxCommandBufferCount", objc.NSUInteger, .{});
    }

    pub fn setMaxCommandBufferCount(_self: *@This(), _maxCommandBufferCount: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaxCommandBufferCount:", void, .{_maxCommandBufferCount});
    }

    pub fn priority(_self: *@This()) IOPriority {
        return objc.msgSend(_self, "priority", IOPriority, .{});
    }

    pub fn setPriority(_self: *@This(), _priority: IOPriority) void {
        return objc.msgSend(_self, "setPriority:", void, .{_priority});
    }

    pub fn @"type"(_self: *@This()) IOCommandQueueType {
        return objc.msgSend(_self, "type", IOCommandQueueType, .{});
    }

    pub fn setType(_self: *@This(), _type: IOCommandQueueType) void {
        return objc.msgSend(_self, "setType:", void, .{_type});
    }

    pub fn maxCommandsInFlight(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxCommandsInFlight", objc.NSUInteger, .{});
    }

    pub fn setMaxCommandsInFlight(_self: *@This(), _maxCommandsInFlight: objc.NSUInteger) void {
        return objc.msgSend(_self, "setMaxCommandsInFlight:", void, .{_maxCommandsInFlight});
    }

    pub fn scratchBufferAllocator(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "scratchBufferAllocator", ?*anyopaque, .{});
    }

    pub fn setScratchBufferAllocator(_self: *@This(), _scratchBufferAllocator: ?*anyopaque) void {
        return objc.msgSend(_self, "setScratchBufferAllocator:", void, .{_scratchBufferAllocator});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLIOFileHandle?language=objc
pub const IOFileHandle = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }
};

pub const IOStatus = enum(objc.NSInteger) {
    Pending = 0,
    Cancelled = 1,
    Error = 2,
    Complete = 3,
};

pub const IOCommandBufferHandler = *const fn (?*anyopaque) callconv(.C) void;

/// https://developer.apple.com/documentation/Metal/MTLIOCommandBuffer?language=objc
pub const IOCommandBuffer = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn addCompletedHandler(_self: *@This(), _block: IOCommandBufferHandler) void {
        return objc.msgSend(_self, "addCompletedHandler:", void, .{_block});
    }

    pub fn loadBytesSizeSourceHandleSourceHandleOffset(
        _self: *@This(),
        _pointer: ?*anyopaque,
        _size: objc.NSUInteger,
        _sourceHandle: ?*anyopaque,
        _sourceHandleOffset: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "loadBytes:size:sourceHandle:sourceHandleOffset:", void, .{
            _pointer,
            _size,
            _sourceHandle,
            _sourceHandleOffset,
        });
    }

    pub fn loadBufferOffsetSizeSourceHandleSourceHandleOffset(
        _self: *@This(),
        _buffer: ?*anyopaque,
        _offset: objc.NSUInteger,
        _size: objc.NSUInteger,
        _sourceHandle: ?*anyopaque,
        _sourceHandleOffset: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "loadBuffer:offset:size:sourceHandle:sourceHandleOffset:", void, .{
            _buffer,
            _offset,
            _size,
            _sourceHandle,
            _sourceHandleOffset,
        });
    }

    pub fn loadTextureSliceLevelSizeSourceBytesPerRowSourceBytesPerImageDestinationOriginSourceHandleSourceHandleOffset(
        _self: *@This(),
        _texture: ?*anyopaque,
        _slice: objc.NSUInteger,
        _level: objc.NSUInteger,
        _size: Size,
        _sourceBytesPerRow: objc.NSUInteger,
        _sourceBytesPerImage: objc.NSUInteger,
        _destinationOrigin: Origin,
        _sourceHandle: ?*anyopaque,
        _sourceHandleOffset: objc.NSUInteger,
    ) void {
        return objc.msgSend(_self, "loadTexture:slice:level:size:sourceBytesPerRow:sourceBytesPerImage:destinationOrigin:sourceHandle:sourceHandleOffset:", void, .{
            _texture,
            _slice,
            _level,
            _size,
            _sourceBytesPerRow,
            _sourceBytesPerImage,
            _destinationOrigin,
            _sourceHandle,
            _sourceHandleOffset,
        });
    }

    pub fn copyStatusToBufferOffset(_self: *@This(), _buffer: ?*anyopaque, _offset: objc.NSUInteger) void {
        return objc.msgSend(_self, "copyStatusToBuffer:offset:", void, .{ _buffer, _offset });
    }

    pub fn commit(_self: *@This()) void {
        return objc.msgSend(_self, "commit", void, .{});
    }

    pub fn waitUntilCompleted(_self: *@This()) void {
        return objc.msgSend(_self, "waitUntilCompleted", void, .{});
    }

    pub fn tryCancel(_self: *@This()) void {
        return objc.msgSend(_self, "tryCancel", void, .{});
    }

    pub fn addBarrier(_self: *@This()) void {
        return objc.msgSend(_self, "addBarrier", void, .{});
    }

    pub fn pushDebugGroup(_self: *@This(), _string: ?*foundation.String) void {
        return objc.msgSend(_self, "pushDebugGroup:", void, .{_string});
    }

    pub fn popDebugGroup(_self: *@This()) void {
        return objc.msgSend(_self, "popDebugGroup", void, .{});
    }

    pub fn enqueue(_self: *@This()) void {
        return objc.msgSend(_self, "enqueue", void, .{});
    }

    pub fn waitForEventValue(_self: *@This(), _event: ?*anyopaque, _value: objc.uint64_t) void {
        return objc.msgSend(_self, "waitForEvent:value:", void, .{ _event, _value });
    }

    pub fn signalEventValue(_self: *@This(), _event: ?*anyopaque, _value: objc.uint64_t) void {
        return objc.msgSend(_self, "signalEvent:value:", void, .{ _event, _value });
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn status(_self: *@This()) IOStatus {
        return objc.msgSend(_self, "status", IOStatus, .{});
    }

    pub fn @"error"(_self: *@This()) ?*foundation.Error {
        return objc.msgSend(_self, "error", ?*foundation.Error, .{});
    }
};

pub const IOCompressionStatus = enum(objc.NSInteger) {
    Complete = 0,
    Error = 1,
};

pub const IOCompressionContext = ?*anyopaque;

extern "Metal" fn MTLIOCompressionContextDefaultChunkSize() callconv(.C) objc.size_t;
pub const ioCompressionContextDefaultChunkSize = MTLIOCompressionContextDefaultChunkSize;

extern "Metal" fn MTLIOCreateCompressionContext(path: ?*i8, @"type": IOCompressionMethod, chunkSize: objc.size_t) callconv(.C) IOCompressionContext;
pub const ioCreateCompressionContext = MTLIOCreateCompressionContext;

extern "Metal" fn MTLIOCompressionContextAppendData(context: IOCompressionContext, data: ?*anyopaque, size: objc.size_t) callconv(.C) void;
pub const ioCompressionContextAppendData = MTLIOCompressionContextAppendData;

extern "Metal" fn MTLIOFlushAndDestroyCompressionContext(context: IOCompressionContext) callconv(.C) IOCompressionStatus;
pub const ioFlushAndDestroyCompressionContext = MTLIOFlushAndDestroyCompressionContext;

/// https://developer.apple.com/documentation/Metal/MTLResidencySetDescriptor?language=objc
pub const ResidencySetDescriptor = opaque {
    pub const InternalInfo = objc.ExternClass("MTLResidencySetDescriptor", @This(), objc.NSObject, &.{
        foundation.Copying,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn load(_self: *@This()) void {
        return objc.msgSend(_self, "load", void, .{});
    }

    pub fn initialize(_self: *@This()) void {
        return objc.msgSend(_self, "initialize", void, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn allocWithZone(_self: *@This(), _zone: ?*objc._NSZone) *@This() {
        return objc.msgSend(_self, "allocWithZone:", *@This(), .{_zone});
    }

    pub fn dealloc(_self: *@This()) void {
        return objc.msgSend(_self, "dealloc", void, .{});
    }

    pub fn finalize(_self: *@This()) void {
        return objc.msgSend(_self, "finalize", void, .{});
    }

    pub fn copy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "copy", *objc.Id, .{});
    }

    pub fn mutableCopy(_self: *@This()) *objc.Id {
        return objc.msgSend(_self, "mutableCopy", *objc.Id, .{});
    }

    pub fn copyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "copyWithZone:", *objc.Id, .{_zone});
    }

    pub fn mutableCopyWithZone(_self: *@This(), _zone: ?*objc._NSZone) *objc.Id {
        return objc.msgSend(_self, "mutableCopyWithZone:", *objc.Id, .{_zone});
    }

    pub fn instancesRespondToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "instancesRespondToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn methodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "methodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn instanceMethodForSelector(_self: *@This(), _aSelector: *objc.SEL) objc.IMP {
        return objc.msgSend(_self, "instanceMethodForSelector:", objc.IMP, .{_aSelector});
    }

    pub fn doesNotRecognizeSelector(_self: *@This(), _aSelector: *objc.SEL) void {
        return objc.msgSend(_self, "doesNotRecognizeSelector:", void, .{_aSelector});
    }

    pub fn forwardingTargetForSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "forwardingTargetForSelector:", *objc.Id, .{_aSelector});
    }

    pub fn forwardInvocation(_self: *@This(), _anInvocation: ?*objc.NSInvocation) void {
        return objc.msgSend(_self, "forwardInvocation:", void, .{_anInvocation});
    }

    pub fn methodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "methodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn instanceMethodSignatureForSelector(_self: *@This(), _aSelector: *objc.SEL) ?*objc.NSMethodSignature {
        return objc.msgSend(_self, "instanceMethodSignatureForSelector:", ?*objc.NSMethodSignature, .{_aSelector});
    }

    pub fn allowsWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "allowsWeakReference", objc.BOOL, .{});
    }

    pub fn retainWeakReference(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "retainWeakReference", objc.BOOL, .{});
    }

    pub fn isSubclassOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isSubclassOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn resolveClassMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveClassMethod:", objc.BOOL, .{_sel});
    }

    pub fn resolveInstanceMethod(_self: *@This(), _sel: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "resolveInstanceMethod:", objc.BOOL, .{_sel});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn setLabel(_self: *@This(), _label: ?*foundation.String) void {
        return objc.msgSend(_self, "setLabel:", void, .{_label});
    }

    pub fn initialCapacity(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "initialCapacity", objc.NSUInteger, .{});
    }

    pub fn setInitialCapacity(_self: *@This(), _initialCapacity: objc.NSUInteger) void {
        return objc.msgSend(_self, "setInitialCapacity:", void, .{_initialCapacity});
    }
};

/// https://developer.apple.com/documentation/Metal/MTLResidencySet?language=objc
pub const ResidencySet = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{
        objc.NSObject,
    });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn isEqual(_self: *@This(), _object: *objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "superclass", *objc.Class, .{});
    }

    pub fn class(_self: *@This()) *objc.Class {
        return objc.msgSend(_self, "class", *objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: *objc.SEL) *objc.Id {
        return objc.msgSend(_self, "performSelector:", *objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: *objc.SEL, _object: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", *objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: *objc.SEL, _object1: *objc.Id, _object2: *objc.Id) *objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", *objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: *objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?*objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: *objc.SEL) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "description", ?*objc.NSString, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*objc.NSString {
        return objc.msgSend(_self, "debugDescription", ?*objc.NSString, .{});
    }

    pub fn requestResidency(_self: *@This()) void {
        return objc.msgSend(_self, "requestResidency", void, .{});
    }

    pub fn endResidency(_self: *@This()) void {
        return objc.msgSend(_self, "endResidency", void, .{});
    }

    pub fn addAllocation(_self: *@This(), _allocation: ?*anyopaque) void {
        return objc.msgSend(_self, "addAllocation:", void, .{_allocation});
    }

    pub fn addAllocationsCount(_self: *@This(), _allocations: ?*?*anyopaque, _count: objc.NSUInteger) void {
        return objc.msgSend(_self, "addAllocations:count:", void, .{ _allocations, _count });
    }

    pub fn removeAllocation(_self: *@This(), _allocation: ?*anyopaque) void {
        return objc.msgSend(_self, "removeAllocation:", void, .{_allocation});
    }

    pub fn removeAllocationsCount(_self: *@This(), _allocations: ?*?*anyopaque, _count: objc.NSUInteger) void {
        return objc.msgSend(_self, "removeAllocations:count:", void, .{ _allocations, _count });
    }

    pub fn removeAllAllocations(_self: *@This()) void {
        return objc.msgSend(_self, "removeAllAllocations", void, .{});
    }

    pub fn containsAllocation(_self: *@This(), _anAllocation: ?*anyopaque) objc.BOOL {
        return objc.msgSend(_self, "containsAllocation:", objc.BOOL, .{_anAllocation});
    }

    pub fn commit(_self: *@This()) void {
        return objc.msgSend(_self, "commit", void, .{});
    }

    pub fn device(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "device", ?*anyopaque, .{});
    }

    pub fn label(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "label", ?*foundation.String, .{});
    }

    pub fn allocatedSize(_self: *@This()) objc.uint64_t {
        return objc.msgSend(_self, "allocatedSize", objc.uint64_t, .{});
    }

    pub fn allAllocations(_self: *@This()) ?*anyopaque {
        return objc.msgSend(_self, "allAllocations", ?*anyopaque, .{});
    }

    pub fn allocationCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "allocationCount", objc.NSUInteger, .{});
    }
};
