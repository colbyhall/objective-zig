// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const foundation = @import("foundation.zig"); // Framework dependency Foundation.

pub const anon1341 = objc.OSStatus;
pub const anon1341_MIDIInvalidClient: objc.OSStatus = -10830;
pub const anon1341_MIDIInvalidPort: objc.OSStatus = -10831;
pub const anon1341_MIDIWrongEndpointType: objc.OSStatus = -10832;
pub const anon1341_MIDINoConnection: objc.OSStatus = -10833;
pub const anon1341_MIDIUnknownEndpoint: objc.OSStatus = -10834;
pub const anon1341_MIDIUnknownProperty: objc.OSStatus = -10835;
pub const anon1341_MIDIWrongPropertyType: objc.OSStatus = -10836;
pub const anon1341_MIDINoCurrentSetup: objc.OSStatus = -10837;
pub const anon1341_MIDIMessageSendErr: objc.OSStatus = -10838;
pub const anon1341_MIDIServerStartErr: objc.OSStatus = -10839;
pub const anon1341_MIDISetupFormatErr: objc.OSStatus = -10840;
pub const anon1341_MIDIWrongThread: objc.OSStatus = -10841;
pub const anon1341_MIDIObjectNotFound: objc.OSStatus = -10842;
pub const anon1341_MIDIIDNotUnique: objc.OSStatus = -10843;
pub const anon1341_MIDINotPermitted: objc.OSStatus = -10844;
pub const anon1341_MIDIUnknownError: objc.OSStatus = -10845;

pub const ObjectRef = objc.UInt32;

pub const ClientRef = ObjectRef;

pub const PortRef = ObjectRef;

pub const DeviceRef = ObjectRef;

pub const EntityRef = ObjectRef;

pub const EndpointRef = ObjectRef;

pub const TimeStamp = objc.UInt64;

pub const ObjectType = objc.SInt32;
pub const ObjectType__Other: objc.SInt32 = -1;
pub const ObjectType__Device: objc.SInt32 = 0;
pub const ObjectType__Entity: objc.SInt32 = 1;
pub const ObjectType__Source: objc.SInt32 = 2;
pub const ObjectType__Destination: objc.SInt32 = 3;
pub const ObjectType__ExternalDevice: objc.SInt32 = 16;
pub const ObjectType__ExternalEntity: objc.SInt32 = 17;
pub const ObjectType__ExternalSource: objc.SInt32 = 18;
pub const ObjectType__ExternalDestination: objc.SInt32 = 19;

pub const UniqueID = objc.SInt32;

pub const anon2771 = UniqueID;
pub const anon2771_MIDIInvalidUniqueID: UniqueID = 0;

pub const ProtocolID = objc.SInt32;
pub const ProtocolID_Protocol_1_0: objc.SInt32 = 1;
pub const ProtocolID_Protocol_2_0: objc.SInt32 = 2;

pub const EventList = extern struct {
    protocol: ProtocolID,
    numPackets: objc.UInt32,
    packet: [1]EventPacket,
};

pub const PacketList = extern struct {
    numPackets: objc.UInt32,
    packet: [1]Packet,
};

pub const SysexSendRequest = extern struct {
    destination: EndpointRef,
    data: ?*const objc.Byte,
    bytesToSend: objc.UInt32,
    complete: objc.Boolean,
    reserved: [3]objc.Byte,
    completionProc: CompletionProc,
    completionRefCon: ?*anyopaque,
};

pub const SysexSendRequestUMP = extern struct {
    destination: EndpointRef,
    words: ?*objc.UInt32,
    wordsToSend: objc.UInt32,
    complete: objc.Boolean,
    completionProc: CompletionProcUMP,
    completionRefCon: ?*anyopaque,
};

pub const Notification = extern struct {
    messageID: NotificationMessageID,
    messageSize: objc.UInt32,
};

pub const NotifyProc = ?*const fn (?*const Notification, ?*anyopaque) callconv(.C) void;

pub const NotifyBlock = *const fn (?*const Notification) callconv(.C) void;

pub const ReceiveBlock = *const fn (?*const EventList, ?*anyopaque) callconv(.C) void;

pub const ReadProc = ?*const fn (?*const PacketList, ?*anyopaque, ?*anyopaque) callconv(.C) void;

pub const ReadBlock = *const fn (?*const PacketList, ?*anyopaque) callconv(.C) void;

pub const CompletionProc = ?*const fn (?*SysexSendRequest) callconv(.C) void;

pub const CompletionProcUMP = ?*const fn (?*SysexSendRequestUMP) callconv(.C) void;

pub const EventPacket = extern struct {
    timeStamp: TimeStamp,
    wordCount: objc.UInt32,
    words: [64]objc.UInt32,
};

pub const Packet = extern struct {
    timeStamp: TimeStamp,
    length: objc.UInt16,
    data: [256]objc.Byte,
};

pub const NotificationMessageID = objc.SInt32;
pub const NotificationMessageID_MsgSetupChanged: objc.SInt32 = 1;
pub const NotificationMessageID_MsgObjectAdded: objc.SInt32 = 2;
pub const NotificationMessageID_MsgObjectRemoved: objc.SInt32 = 3;
pub const NotificationMessageID_MsgPropertyChanged: objc.SInt32 = 4;
pub const NotificationMessageID_MsgThruConnectionsChanged: objc.SInt32 = 5;
pub const NotificationMessageID_MsgSerialPortOwnerChanged: objc.SInt32 = 6;
pub const NotificationMessageID_MsgIOError: objc.SInt32 = 7;
pub const NotificationMessageID_MsgInternalStart: objc.SInt32 = 4096;

pub const ObjectAddRemoveNotification = extern struct {
    messageID: NotificationMessageID,
    messageSize: objc.UInt32,
    parent: ObjectRef,
    parentType: ObjectType,
    child: ObjectRef,
    childType: ObjectType,
};

pub const ObjectPropertyChangeNotification = extern struct {
    messageID: NotificationMessageID,
    messageSize: objc.UInt32,
    object: ObjectRef,
    objectType: ObjectType,
    propertyName: core_foundation.StringRef,
};

pub const IOErrorNotification = extern struct {
    messageID: NotificationMessageID,
    messageSize: objc.UInt32,
    driverDevice: DeviceRef,
    errorCode: objc.OSStatus,
};

extern "CoreMIDI" fn MIDIClientCreate(
    name: core_foundation.StringRef,
    notifyProc: NotifyProc,
    notifyRefCon: ?*anyopaque,
    outClient: ?*ClientRef,
) callconv(.C) objc.OSStatus;
pub const clientCreate = MIDIClientCreate;

extern "CoreMIDI" fn MIDIClientCreateWithBlock(name: core_foundation.StringRef, outClient: ?*ClientRef, notifyBlock: NotifyBlock) callconv(.C) objc.OSStatus;
pub const clientCreateWithBlock = MIDIClientCreateWithBlock;

extern "CoreMIDI" fn MIDIClientDispose(client: ClientRef) callconv(.C) objc.OSStatus;
pub const clientDispose = MIDIClientDispose;

extern "CoreMIDI" fn MIDIInputPortCreateWithProtocol(
    client: ClientRef,
    portName: core_foundation.StringRef,
    protocol: ProtocolID,
    outPort: ?*PortRef,
    receiveBlock: ReceiveBlock,
) callconv(.C) objc.OSStatus;
pub const inputPortCreateWithProtocol = MIDIInputPortCreateWithProtocol;

extern "CoreMIDI" fn MIDIInputPortCreate(
    client: ClientRef,
    portName: core_foundation.StringRef,
    readProc: ReadProc,
    refCon: ?*anyopaque,
    outPort: ?*PortRef,
) callconv(.C) objc.OSStatus;
pub const inputPortCreate = MIDIInputPortCreate;

extern "CoreMIDI" fn MIDIInputPortCreateWithBlock(
    client: ClientRef,
    portName: core_foundation.StringRef,
    outPort: ?*PortRef,
    readBlock: ReadBlock,
) callconv(.C) objc.OSStatus;
pub const inputPortCreateWithBlock = MIDIInputPortCreateWithBlock;

extern "CoreMIDI" fn MIDIOutputPortCreate(client: ClientRef, portName: core_foundation.StringRef, outPort: ?*PortRef) callconv(.C) objc.OSStatus;
pub const outputPortCreate = MIDIOutputPortCreate;

extern "CoreMIDI" fn MIDIPortDispose(port: PortRef) callconv(.C) objc.OSStatus;
pub const portDispose = MIDIPortDispose;

extern "CoreMIDI" fn MIDIPortConnectSource(port: PortRef, source: EndpointRef, connRefCon: ?*anyopaque) callconv(.C) objc.OSStatus;
pub const portConnectSource = MIDIPortConnectSource;

extern "CoreMIDI" fn MIDIPortDisconnectSource(port: PortRef, source: EndpointRef) callconv(.C) objc.OSStatus;
pub const portDisconnectSource = MIDIPortDisconnectSource;

extern "CoreMIDI" fn MIDIGetNumberOfDevices() callconv(.C) objc.ItemCount;
pub const getNumberOfDevices = MIDIGetNumberOfDevices;

extern "CoreMIDI" fn MIDIGetDevice(deviceIndex0: objc.ItemCount) callconv(.C) DeviceRef;
pub const getDevice = MIDIGetDevice;

extern "CoreMIDI" fn MIDIDeviceGetNumberOfEntities(device: DeviceRef) callconv(.C) objc.ItemCount;
pub const deviceGetNumberOfEntities = MIDIDeviceGetNumberOfEntities;

extern "CoreMIDI" fn MIDIDeviceGetEntity(device: DeviceRef, entityIndex0: objc.ItemCount) callconv(.C) EntityRef;
pub const deviceGetEntity = MIDIDeviceGetEntity;

extern "CoreMIDI" fn MIDIEntityGetNumberOfSources(entity: EntityRef) callconv(.C) objc.ItemCount;
pub const entityGetNumberOfSources = MIDIEntityGetNumberOfSources;

extern "CoreMIDI" fn MIDIEntityGetSource(entity: EntityRef, sourceIndex0: objc.ItemCount) callconv(.C) EndpointRef;
pub const entityGetSource = MIDIEntityGetSource;

extern "CoreMIDI" fn MIDIEntityGetNumberOfDestinations(entity: EntityRef) callconv(.C) objc.ItemCount;
pub const entityGetNumberOfDestinations = MIDIEntityGetNumberOfDestinations;

extern "CoreMIDI" fn MIDIEntityGetDestination(entity: EntityRef, destIndex0: objc.ItemCount) callconv(.C) EndpointRef;
pub const entityGetDestination = MIDIEntityGetDestination;

extern "CoreMIDI" fn MIDIEntityGetDevice(inEntity: EntityRef, outDevice: ?*DeviceRef) callconv(.C) objc.OSStatus;
pub const entityGetDevice = MIDIEntityGetDevice;

extern "CoreMIDI" fn MIDIGetNumberOfSources() callconv(.C) objc.ItemCount;
pub const getNumberOfSources = MIDIGetNumberOfSources;

extern "CoreMIDI" fn MIDIGetSource(sourceIndex0: objc.ItemCount) callconv(.C) EndpointRef;
pub const getSource = MIDIGetSource;

extern "CoreMIDI" fn MIDIGetNumberOfDestinations() callconv(.C) objc.ItemCount;
pub const getNumberOfDestinations = MIDIGetNumberOfDestinations;

extern "CoreMIDI" fn MIDIGetDestination(destIndex0: objc.ItemCount) callconv(.C) EndpointRef;
pub const getDestination = MIDIGetDestination;

extern "CoreMIDI" fn MIDIEndpointGetEntity(inEndpoint: EndpointRef, outEntity: ?*EntityRef) callconv(.C) objc.OSStatus;
pub const endpointGetEntity = MIDIEndpointGetEntity;

extern "CoreMIDI" fn MIDIDestinationCreateWithProtocol(
    client: ClientRef,
    name: core_foundation.StringRef,
    protocol: ProtocolID,
    outDest: ?*EndpointRef,
    readBlock: ReceiveBlock,
) callconv(.C) objc.OSStatus;
pub const destinationCreateWithProtocol = MIDIDestinationCreateWithProtocol;

extern "CoreMIDI" fn MIDIDestinationCreate(
    client: ClientRef,
    name: core_foundation.StringRef,
    readProc: ReadProc,
    refCon: ?*anyopaque,
    outDest: ?*EndpointRef,
) callconv(.C) objc.OSStatus;
pub const destinationCreate = MIDIDestinationCreate;

extern "CoreMIDI" fn MIDIDestinationCreateWithBlock(
    client: ClientRef,
    name: core_foundation.StringRef,
    outDest: ?*EndpointRef,
    readBlock: ReadBlock,
) callconv(.C) objc.OSStatus;
pub const destinationCreateWithBlock = MIDIDestinationCreateWithBlock;

extern "CoreMIDI" fn MIDISourceCreateWithProtocol(
    client: ClientRef,
    name: core_foundation.StringRef,
    protocol: ProtocolID,
    outSrc: ?*EndpointRef,
) callconv(.C) objc.OSStatus;
pub const sourceCreateWithProtocol = MIDISourceCreateWithProtocol;

extern "CoreMIDI" fn MIDISourceCreate(client: ClientRef, name: core_foundation.StringRef, outSrc: ?*EndpointRef) callconv(.C) objc.OSStatus;
pub const sourceCreate = MIDISourceCreate;

extern "CoreMIDI" fn MIDIEndpointDispose(endpt: EndpointRef) callconv(.C) objc.OSStatus;
pub const endpointDispose = MIDIEndpointDispose;

extern "CoreMIDI" fn MIDIGetNumberOfExternalDevices() callconv(.C) objc.ItemCount;
pub const getNumberOfExternalDevices = MIDIGetNumberOfExternalDevices;

extern "CoreMIDI" fn MIDIGetExternalDevice(deviceIndex0: objc.ItemCount) callconv(.C) DeviceRef;
pub const getExternalDevice = MIDIGetExternalDevice;

extern "CoreMIDI" fn MIDIObjectGetIntegerProperty(obj: ObjectRef, propertyID: core_foundation.StringRef, outValue: ?*objc.SInt32) callconv(.C) objc.OSStatus;
pub const objectGetIntegerProperty = MIDIObjectGetIntegerProperty;

extern "CoreMIDI" fn MIDIObjectSetIntegerProperty(obj: ObjectRef, propertyID: core_foundation.StringRef, value: objc.SInt32) callconv(.C) objc.OSStatus;
pub const objectSetIntegerProperty = MIDIObjectSetIntegerProperty;

extern "CoreMIDI" fn MIDIObjectGetStringProperty(obj: ObjectRef, propertyID: core_foundation.StringRef, str: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const objectGetStringProperty = MIDIObjectGetStringProperty;

extern "CoreMIDI" fn MIDIObjectSetStringProperty(obj: ObjectRef, propertyID: core_foundation.StringRef, str: core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const objectSetStringProperty = MIDIObjectSetStringProperty;

extern "CoreMIDI" fn MIDIObjectGetDataProperty(obj: ObjectRef, propertyID: core_foundation.StringRef, outData: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;
pub const objectGetDataProperty = MIDIObjectGetDataProperty;

extern "CoreMIDI" fn MIDIObjectSetDataProperty(obj: ObjectRef, propertyID: core_foundation.StringRef, data: core_foundation.DataRef) callconv(.C) objc.OSStatus;
pub const objectSetDataProperty = MIDIObjectSetDataProperty;

extern "CoreMIDI" fn MIDIObjectGetDictionaryProperty(obj: ObjectRef, propertyID: core_foundation.StringRef, outDict: ?*core_foundation.DictionaryRef) callconv(.C) objc.OSStatus;
pub const objectGetDictionaryProperty = MIDIObjectGetDictionaryProperty;

extern "CoreMIDI" fn MIDIObjectSetDictionaryProperty(obj: ObjectRef, propertyID: core_foundation.StringRef, dict: core_foundation.DictionaryRef) callconv(.C) objc.OSStatus;
pub const objectSetDictionaryProperty = MIDIObjectSetDictionaryProperty;

extern "CoreMIDI" fn MIDIObjectGetProperties(obj: ObjectRef, outProperties: ?*core_foundation.PropertyListRef, deep: objc.Boolean) callconv(.C) objc.OSStatus;
pub const objectGetProperties = MIDIObjectGetProperties;

extern "CoreMIDI" fn MIDIObjectRemoveProperty(obj: ObjectRef, propertyID: core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const objectRemoveProperty = MIDIObjectRemoveProperty;

extern "CoreMIDI" fn MIDIObjectFindByUniqueID(inUniqueID: UniqueID, outObject: ?*ObjectRef, outObjectType: ?*ObjectType) callconv(.C) objc.OSStatus;
pub const objectFindByUniqueID = MIDIObjectFindByUniqueID;

extern "CoreMIDI" fn MIDISendEventList(port: PortRef, dest: EndpointRef, evtlist: ?*const EventList) callconv(.C) objc.OSStatus;
pub const sendEventList = MIDISendEventList;

extern "CoreMIDI" fn MIDISend(port: PortRef, dest: EndpointRef, pktlist: ?*const PacketList) callconv(.C) objc.OSStatus;
pub const send = MIDISend;

extern "CoreMIDI" fn MIDISendSysex(request: ?*SysexSendRequest) callconv(.C) objc.OSStatus;
pub const sendSysex = MIDISendSysex;

extern "CoreMIDI" fn MIDISendUMPSysex(umpRequest: ?*SysexSendRequestUMP) callconv(.C) objc.OSStatus;
pub const sendUMPSysex = MIDISendUMPSysex;

extern "CoreMIDI" fn MIDISendUMPSysex8(umpRequest: ?*SysexSendRequestUMP) callconv(.C) objc.OSStatus;
pub const sendUMPSysex8 = MIDISendUMPSysex8;

extern "CoreMIDI" fn MIDIEventPacketSysexBytesForGroup(pkt: ?*const EventPacket, groupIndex: objc.UInt8, outData: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;
pub const eventPacketSysexBytesForGroup = MIDIEventPacketSysexBytesForGroup;

extern "CoreMIDI" fn MIDIReceivedEventList(src: EndpointRef, evtlist: ?*const EventList) callconv(.C) objc.OSStatus;
pub const receivedEventList = MIDIReceivedEventList;

extern "CoreMIDI" fn MIDIReceived(src: EndpointRef, pktlist: ?*const PacketList) callconv(.C) objc.OSStatus;
pub const received = MIDIReceived;

extern "CoreMIDI" fn MIDIFlushOutput(dest: EndpointRef) callconv(.C) objc.OSStatus;
pub const flushOutput = MIDIFlushOutput;

extern "CoreMIDI" fn MIDIRestart() callconv(.C) objc.OSStatus;
pub const restart = MIDIRestart;

extern "CoreMIDI" fn MIDIEventListInit(evtlist: ?*EventList, protocol: ProtocolID) callconv(.C) ?*EventPacket;
pub const eventListInit = MIDIEventListInit;

extern "CoreMIDI" fn MIDIEventListAdd(
    evtlist: ?*EventList,
    listSize: objc.ByteCount,
    curPacket: ?*EventPacket,
    time: TimeStamp,
    wordCount: objc.ByteCount,
    words: ?*const objc.UInt32,
) callconv(.C) ?*EventPacket;
pub const eventListAdd = MIDIEventListAdd;

extern "CoreMIDI" fn MIDIPacketListInit(pktlist: ?*PacketList) callconv(.C) ?*Packet;
pub const packetListInit = MIDIPacketListInit;

extern "CoreMIDI" fn MIDIPacketListAdd(
    pktlist: ?*PacketList,
    listSize: objc.ByteCount,
    curPacket: ?*Packet,
    time: TimeStamp,
    nData: objc.ByteCount,
    data: ?*const objc.Byte,
) callconv(.C) ?*Packet;
pub const packetListAdd = MIDIPacketListAdd;

pub const SetupRef = ObjectRef;

extern "CoreMIDI" fn MIDISetupCreate(outSetup: ?*SetupRef) callconv(.C) objc.OSStatus;
pub const setupCreate = MIDISetupCreate;

extern "CoreMIDI" fn MIDISetupDispose(setup: SetupRef) callconv(.C) objc.OSStatus;
pub const setupDispose = MIDISetupDispose;

extern "CoreMIDI" fn MIDISetupInstall(setup: SetupRef) callconv(.C) objc.OSStatus;
pub const setupInstall = MIDISetupInstall;

extern "CoreMIDI" fn MIDISetupGetCurrent(outSetup: ?*SetupRef) callconv(.C) objc.OSStatus;
pub const setupGetCurrent = MIDISetupGetCurrent;

extern "CoreMIDI" fn MIDISetupToData(setup: SetupRef, outData: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;
pub const setupToData = MIDISetupToData;

extern "CoreMIDI" fn MIDISetupFromData(data: core_foundation.DataRef, outSetup: ?*SetupRef) callconv(.C) objc.OSStatus;
pub const setupFromData = MIDISetupFromData;

extern "CoreMIDI" fn MIDIDeviceNewEntity(
    device: DeviceRef,
    name: core_foundation.StringRef,
    protocol: ProtocolID,
    embedded: objc.Boolean,
    numSourceEndpoints: objc.ItemCount,
    numDestinationEndpoints: objc.ItemCount,
    newEntity: ?*EntityRef,
) callconv(.C) objc.OSStatus;
pub const deviceNewEntity = MIDIDeviceNewEntity;

extern "CoreMIDI" fn MIDIDeviceAddEntity(
    device: DeviceRef,
    name: core_foundation.StringRef,
    embedded: objc.Boolean,
    numSourceEndpoints: objc.ItemCount,
    numDestinationEndpoints: objc.ItemCount,
    newEntity: ?*EntityRef,
) callconv(.C) objc.OSStatus;
pub const deviceAddEntity = MIDIDeviceAddEntity;

extern "CoreMIDI" fn MIDIDeviceRemoveEntity(device: DeviceRef, entity: EntityRef) callconv(.C) objc.OSStatus;
pub const deviceRemoveEntity = MIDIDeviceRemoveEntity;

extern "CoreMIDI" fn MIDIEntityAddOrRemoveEndpoints(entity: EntityRef, numSourceEndpoints: objc.ItemCount, numDestinationEndpoints: objc.ItemCount) callconv(.C) objc.OSStatus;
pub const entityAddOrRemoveEndpoints = MIDIEntityAddOrRemoveEndpoints;

extern "CoreMIDI" fn MIDISetupAddDevice(device: DeviceRef) callconv(.C) objc.OSStatus;
pub const setupAddDevice = MIDISetupAddDevice;

extern "CoreMIDI" fn MIDISetupRemoveDevice(device: DeviceRef) callconv(.C) objc.OSStatus;
pub const setupRemoveDevice = MIDISetupRemoveDevice;

extern "CoreMIDI" fn MIDISetupAddExternalDevice(device: DeviceRef) callconv(.C) objc.OSStatus;
pub const setupAddExternalDevice = MIDISetupAddExternalDevice;

extern "CoreMIDI" fn MIDISetupRemoveExternalDevice(device: DeviceRef) callconv(.C) objc.OSStatus;
pub const setupRemoveExternalDevice = MIDISetupRemoveExternalDevice;

extern "CoreMIDI" fn MIDIGetSerialPortOwner(portName: core_foundation.StringRef, outDriverName: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const getSerialPortOwner = MIDIGetSerialPortOwner;

extern "CoreMIDI" fn MIDISetSerialPortOwner(portName: core_foundation.StringRef, driverName: core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const setSerialPortOwner = MIDISetSerialPortOwner;

extern "CoreMIDI" fn MIDIGetSerialPortDrivers(outDriverNames: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const getSerialPortDrivers = MIDIGetSerialPortDrivers;

extern "CoreMIDI" fn MIDIExternalDeviceCreate(
    name: core_foundation.StringRef,
    manufacturer: core_foundation.StringRef,
    model: core_foundation.StringRef,
    outDevice: ?*DeviceRef,
) callconv(.C) objc.OSStatus;
pub const externalDeviceCreate = MIDIExternalDeviceCreate;

pub const ThruConnectionRef = ObjectRef;

pub const ValueMap = extern struct {
    value: [128]objc.UInt8,
};

pub const TransformType = objc.UInt16;
pub const TransformType_Transform_None: objc.UInt16 = 0;
pub const TransformType_Transform_FilterOut: objc.UInt16 = 1;
pub const TransformType_Transform_MapControl: objc.UInt16 = 2;
pub const TransformType_Transform_Add: objc.UInt16 = 8;
pub const TransformType_Transform_Scale: objc.UInt16 = 9;
pub const TransformType_Transform_MinValue: objc.UInt16 = 10;
pub const TransformType_Transform_MaxValue: objc.UInt16 = 11;
pub const TransformType_Transform_MapValue: objc.UInt16 = 12;

pub const anon891 = u32;
pub const anon891_MIDIThruConnection_MaxEndpoints: u32 = 8;
pub const anon891_CSSM_MODULE_STRING_SIZE: u32 = 64;
pub const anon891_HandleIsResourceMask: u32 = 32;
pub const anon891_HandlePurgeableMask: u32 = 64;
pub const anon891_HandleLockedMask: u32 = 128;

pub const TransformControlType = objc.UInt8;
pub const TransformControlType_ControlType_7Bit: objc.UInt8 = 0;
pub const TransformControlType_ControlType_14Bit: objc.UInt8 = 1;
pub const TransformControlType_ControlType_7BitRPN: objc.UInt8 = 2;
pub const TransformControlType_ControlType_14BitRPN: objc.UInt8 = 3;
pub const TransformControlType_ControlType_7BitNRPN: objc.UInt8 = 4;
pub const TransformControlType_ControlType_14BitNRPN: objc.UInt8 = 5;

pub const Transform = extern struct {
    transform: TransformType,
    param: objc.SInt16,
};

pub const ControlTransform = extern struct {
    controlType: TransformControlType,
    remappedControlType: TransformControlType,
    controlNumber: objc.UInt16,
    transform: TransformType,
    param: objc.SInt16,
};

pub const ThruConnectionEndpoint = extern struct {
    endpointRef: EndpointRef,
    uniqueID: UniqueID,
};

pub const ThruConnectionParams = extern struct {
    version: objc.UInt32,
    numSources: objc.UInt32,
    sources: [8]ThruConnectionEndpoint,
    numDestinations: objc.UInt32,
    destinations: [8]ThruConnectionEndpoint,
    channelMap: [16]objc.UInt8,
    lowVelocity: objc.UInt8,
    highVelocity: objc.UInt8,
    lowNote: objc.UInt8,
    highNote: objc.UInt8,
    noteNumber: Transform,
    velocity: Transform,
    keyPressure: Transform,
    channelPressure: Transform,
    programChange: Transform,
    pitchBend: Transform,
    filterOutSysEx: objc.UInt8,
    filterOutMTC: objc.UInt8,
    filterOutBeatClock: objc.UInt8,
    filterOutTuneRequest: objc.UInt8,
    reserved2: [3]objc.UInt8,
    filterOutAllControls: objc.UInt8,
    numControlTransforms: objc.UInt16,
    numMaps: objc.UInt16,
    reserved3: [4]objc.UInt16,
};

extern "CoreMIDI" fn MIDIThruConnectionParamsInitialize(inConnectionParams: ?*ThruConnectionParams) callconv(.C) void;
pub const thruConnectionParamsInitialize = MIDIThruConnectionParamsInitialize;

extern "CoreMIDI" fn MIDIThruConnectionCreate(inPersistentOwnerID: core_foundation.StringRef, inConnectionParams: core_foundation.DataRef, outConnection: ?*ThruConnectionRef) callconv(.C) objc.OSStatus;
pub const thruConnectionCreate = MIDIThruConnectionCreate;

extern "CoreMIDI" fn MIDIThruConnectionDispose(connection: ThruConnectionRef) callconv(.C) objc.OSStatus;
pub const thruConnectionDispose = MIDIThruConnectionDispose;

extern "CoreMIDI" fn MIDIThruConnectionGetParams(connection: ThruConnectionRef, outConnectionParams: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;
pub const thruConnectionGetParams = MIDIThruConnectionGetParams;

extern "CoreMIDI" fn MIDIThruConnectionSetParams(connection: ThruConnectionRef, inConnectionParams: core_foundation.DataRef) callconv(.C) objc.OSStatus;
pub const thruConnectionSetParams = MIDIThruConnectionSetParams;

extern "CoreMIDI" fn MIDIThruConnectionFind(inPersistentOwnerID: core_foundation.StringRef, outConnectionList: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;
pub const thruConnectionFind = MIDIThruConnectionFind;

pub const DriverInterface = extern struct {
    _reserved: ?*anyopaque,
    QueryInterface: ?*const fn (?*anyopaque, core_foundation.REFIID, ?*core_foundation.LPVOID) callconv(.C) core_foundation.HRESULT,
    AddRef: ?*const fn (?*anyopaque) callconv(.C) core_foundation.ULONG,
    Release: ?*const fn (?*anyopaque) callconv(.C) core_foundation.ULONG,
    FindDevices: ?*const fn (DriverRef, DeviceListRef) callconv(.C) objc.OSStatus,
    Start: ?*const fn (DriverRef, DeviceListRef) callconv(.C) objc.OSStatus,
    Stop: ?*const fn (DriverRef) callconv(.C) objc.OSStatus,
    Configure: ?*const fn (DriverRef, DeviceRef) callconv(.C) objc.OSStatus,
    Send: ?*const fn (
        DriverRef,
        ?*const PacketList,
        ?*anyopaque,
        ?*anyopaque,
    ) callconv(.C) objc.OSStatus,
    EnableSource: ?*const fn (DriverRef, EndpointRef, objc.Boolean) callconv(.C) objc.OSStatus,
    Flush: ?*const fn (
        DriverRef,
        EndpointRef,
        ?*anyopaque,
        ?*anyopaque,
    ) callconv(.C) objc.OSStatus,
    Monitor: ?*const fn (DriverRef, EndpointRef, ?*const PacketList) callconv(.C) objc.OSStatus,
    SendPackets: ?*const fn (
        DriverRef,
        ?*const EventList,
        ?*anyopaque,
        ?*anyopaque,
    ) callconv(.C) objc.OSStatus,
    MonitorEvents: ?*const fn (DriverRef, EndpointRef, ?*const EventList) callconv(.C) objc.OSStatus,
};

pub const DriverRef = DriverInterface;

pub const DeviceListRef = ObjectRef;

extern "CoreMIDI" fn MIDIDeviceCreate(
    owner: DriverRef,
    name: core_foundation.StringRef,
    manufacturer: core_foundation.StringRef,
    model: core_foundation.StringRef,
    outDevice: ?*DeviceRef,
) callconv(.C) objc.OSStatus;
pub const deviceCreate = MIDIDeviceCreate;

extern "CoreMIDI" fn MIDIDeviceDispose(device: DeviceRef) callconv(.C) objc.OSStatus;
pub const deviceDispose = MIDIDeviceDispose;

extern "CoreMIDI" fn MIDIDeviceListGetNumberOfDevices(devList: DeviceListRef) callconv(.C) objc.ItemCount;
pub const deviceListGetNumberOfDevices = MIDIDeviceListGetNumberOfDevices;

extern "CoreMIDI" fn MIDIDeviceListGetDevice(devList: DeviceListRef, index0: objc.ItemCount) callconv(.C) DeviceRef;
pub const deviceListGetDevice = MIDIDeviceListGetDevice;

extern "CoreMIDI" fn MIDIDeviceListAddDevice(devList: DeviceListRef, dev: DeviceRef) callconv(.C) objc.OSStatus;
pub const deviceListAddDevice = MIDIDeviceListAddDevice;

extern "CoreMIDI" fn MIDIDeviceListDispose(devList: DeviceListRef) callconv(.C) objc.OSStatus;
pub const deviceListDispose = MIDIDeviceListDispose;

extern "CoreMIDI" fn MIDIEndpointSetRefCons(endpt: EndpointRef, ref1: ?*anyopaque, ref2: ?*anyopaque) callconv(.C) objc.OSStatus;
pub const endpointSetRefCons = MIDIEndpointSetRefCons;

extern "CoreMIDI" fn MIDIEndpointGetRefCons(endpt: EndpointRef, ref1: ?*?*anyopaque, ref2: ?*?*anyopaque) callconv(.C) objc.OSStatus;
pub const endpointGetRefCons = MIDIEndpointGetRefCons;

extern "CoreMIDI" fn MIDIGetDriverIORunLoop() callconv(.C) core_foundation.RunLoopRef;
pub const getDriverIORunLoop = MIDIGetDriverIORunLoop;

extern "CoreMIDI" fn MIDIGetDriverDeviceList(driver: DriverRef) callconv(.C) DeviceListRef;
pub const getDriverDeviceList = MIDIGetDriverDeviceList;

extern "CoreMIDI" fn MIDIDriverEnableMonitoring(driver: DriverRef, enabled: objc.Boolean) callconv(.C) objc.OSStatus;
pub const driverEnableMonitoring = MIDIDriverEnableMonitoring;

pub const MessageType = u32;
pub const MessageType_Utility: u32 = 0;
pub const MessageType_System: u32 = 1;
pub const MessageType_ChannelVoice1: u32 = 2;
pub const MessageType_SysEx: u32 = 3;
pub const MessageType_ChannelVoice2: u32 = 4;
pub const MessageType_Data128: u32 = 5;
pub const MessageType_FlexData: u32 = 13;
pub const MessageType_UnknownF: u32 = 15;
pub const MessageType_Stream: u32 = 15;
pub const MessageType_Invalid: u32 = 255;

pub const CVStatus = u32;
pub const CVStatus_NoteOff: u32 = 8;
pub const CVStatus_NoteOn: u32 = 9;
pub const CVStatus_PolyPressure: u32 = 10;
pub const CVStatus_ControlChange: u32 = 11;
pub const CVStatus_ProgramChange: u32 = 12;
pub const CVStatus_ChannelPressure: u32 = 13;
pub const CVStatus_PitchBend: u32 = 14;
pub const CVStatus_RegisteredPNC: u32 = 0;
pub const CVStatus_AssignablePNC: u32 = 1;
pub const CVStatus_RegisteredControl: u32 = 2;
pub const CVStatus_AssignableControl: u32 = 3;
pub const CVStatus_RelRegisteredControl: u32 = 4;
pub const CVStatus_RelAssignableControl: u32 = 5;
pub const CVStatus_PerNotePitchBend: u32 = 6;
pub const CVStatus_PerNoteMgmt: u32 = 15;

pub const SystemStatus = u32;
pub const SystemStatus_StatusStartOfExclusive: u32 = 240;
pub const SystemStatus_StatusEndOfExclusive: u32 = 247;
pub const SystemStatus_StatusMTC: u32 = 241;
pub const SystemStatus_StatusSongPosPointer: u32 = 242;
pub const SystemStatus_StatusSongSelect: u32 = 243;
pub const SystemStatus_StatusTuneRequest: u32 = 246;
pub const SystemStatus_StatusTimingClock: u32 = 248;
pub const SystemStatus_StatusStart: u32 = 250;
pub const SystemStatus_StatusContinue: u32 = 251;
pub const SystemStatus_StatusStop: u32 = 252;
pub const SystemStatus_StatusActiveSending: u32 = 254;
pub const SystemStatus_StatusActiveSensing: u32 = 254;
pub const SystemStatus_StatusSystemReset: u32 = 255;

pub const SysExStatus = u32;
pub const SysExStatus_Complete: u32 = 0;
pub const SysExStatus_Start: u32 = 1;
pub const SysExStatus_Continue: u32 = 2;
pub const SysExStatus_End: u32 = 3;
pub const SysExStatus_MixedDataSetHeader: u32 = 8;
pub const SysExStatus_MixedDataSetPayload: u32 = 9;

pub const UtilityStatus = u32;
pub const UtilityStatus_NOOP: u32 = 0;
pub const UtilityStatus_JitterReductionClock: u32 = 1;
pub const UtilityStatus_JitterReductionTimestamp: u32 = 2;
pub const UtilityStatus_DeltaClockstampTicksPerQuarterNote: u32 = 3;
pub const UtilityStatus_TicksSinceLastEvent: u32 = 4;

pub const UMPStreamMessageStatus = u32;
pub const UMPStreamMessageStatus_EndpointDiscovery: u32 = 0;
pub const UMPStreamMessageStatus_EndpointInfoNotification: u32 = 1;
pub const UMPStreamMessageStatus_DeviceIdentityNotification: u32 = 2;
pub const UMPStreamMessageStatus_EndpointNameNotification: u32 = 3;
pub const UMPStreamMessageStatus_ProductInstanceIDNotification: u32 = 4;
pub const UMPStreamMessageStatus_StreamConfigurationRequest: u32 = 5;
pub const UMPStreamMessageStatus_StreamConfigurationNotification: u32 = 6;
pub const UMPStreamMessageStatus_FunctionBlockDiscovery: u32 = 16;
pub const UMPStreamMessageStatus_FunctionBlockInfoNotification: u32 = 17;
pub const UMPStreamMessageStatus_FunctionBlockNameNotification: u32 = 18;
pub const UMPStreamMessageStatus_StartOfClip: u32 = 32;
pub const UMPStreamMessageStatus_EndOfClip: u32 = 33;

pub const NoteAttribute = objc.UInt8;
pub const NoteAttribute_None: objc.UInt8 = 0;
pub const NoteAttribute_ManufacturerSpecific: objc.UInt8 = 1;
pub const NoteAttribute_ProfileSpecific: objc.UInt8 = 2;
pub const NoteAttribute_Pitch: objc.UInt8 = 3;

pub const ProgramChangeOptions = objc.UInt8;
pub const ProgramChangeOptions_BankValid: objc.UInt8 = 1;

pub const PerNoteManagementOptions = objc.UInt8;
pub const PerNoteManagementOptions_Reset: objc.UInt8 = 1;
pub const PerNoteManagementOptions_Detach: objc.UInt8 = 2;

pub const UMPFunctionBlockMIDI1Info = objc.SInt32;
pub const UMPFunctionBlockMIDI1Info_NotMIDI1: objc.SInt32 = 0;
pub const UMPFunctionBlockMIDI1Info_UnrestrictedBandwidth: objc.SInt32 = 1;
pub const UMPFunctionBlockMIDI1Info_RestrictedBandwidth: objc.SInt32 = 2;

pub const UMPFunctionBlockUIHint = objc.SInt32;
pub const UMPFunctionBlockUIHint_Unknown: objc.SInt32 = 0;
pub const UMPFunctionBlockUIHint_Receiver: objc.SInt32 = 1;
pub const UMPFunctionBlockUIHint_Sender: objc.SInt32 = 2;
pub const UMPFunctionBlockUIHint_SenderReceiver: objc.SInt32 = 3;

pub const UMPFunctionBlockDirection = objc.SInt32;
pub const UMPFunctionBlockDirection_Unknown: objc.SInt32 = 0;
pub const UMPFunctionBlockDirection_Input: objc.SInt32 = 1;
pub const UMPFunctionBlockDirection_Output: objc.SInt32 = 2;
pub const UMPFunctionBlockDirection_Bidirectional: objc.SInt32 = 3;

pub const UMPStreamMessageFormat = objc.UInt8;
pub const UMPStreamMessageFormat_Complete: objc.UInt8 = 0;
pub const UMPStreamMessageFormat_Start: objc.UInt8 = 1;
pub const UMPStreamMessageFormat_Continuing: objc.UInt8 = 2;
pub const UMPStreamMessageFormat_End: objc.UInt8 = 3;

pub const UInteger2 = objc.UInt8;

pub const UInteger4 = objc.UInt8;

pub const UInteger7 = objc.UInt8;

pub const UInteger14 = objc.UInt16;

pub const UInteger28 = objc.UInt32;

pub const UMPGroupNumber = UInteger4;

pub const ChannelNumber = UInteger4;

pub const CIDeviceID = UInteger7;

pub const CIMUID = UInteger28;

pub const Message_32 = objc.UInt32;

pub const Message_64 = extern struct {
    word0: objc.UInt32,
    word1: objc.UInt32,
};

pub const Message_96 = extern struct {
    word0: objc.UInt32,
    word1: objc.UInt32,
    word2: objc.UInt32,
};

pub const Message_128 = extern struct {
    word0: objc.UInt32,
    word1: objc.UInt32,
    word2: objc.UInt32,
    word3: objc.UInt32,
};

pub const UniversalMessage = extern struct {
    pub const anon5982 = extern union {
        pub const anon5993 = extern struct {
            pub const anon6014 = extern union {
                jitterReductionClock: objc.UInt16,
                jitterReductionTimestamp: objc.UInt16,
            };

            status: UtilityStatus,
        };

        pub const anon6073 = extern struct {
            pub const anon6094 = extern union {
                timeCode: objc.UInt8,
                songPositionPointer: objc.UInt16,
                songSelect: objc.UInt8,
            };

            status: SystemStatus,
        };

        pub const anon6163 = extern struct {
            pub const anon6204 = extern union {
                pub const anon6215 = extern struct {
                    number: objc.UInt8,
                    velocity: objc.UInt8,
                };

                pub const anon6265 = extern struct {
                    noteNumber: objc.UInt8,
                    pressure: objc.UInt8,
                };

                pub const anon6325 = extern struct {
                    index: objc.UInt8,
                    data: objc.UInt8,
                };

                note: UniversalMessage.anon5982.anon6163.anon6204.anon6215,
                polyPressure: UniversalMessage.anon5982.anon6163.anon6204.anon6265,
                controlChange: UniversalMessage.anon5982.anon6163.anon6204.anon6325,
                program: objc.UInt8,
                channelPressure: objc.UInt8,
                pitchBend: objc.UInt16,
            };

            status: CVStatus,
            channel: objc.UInt8,
            reserved: [3]objc.UInt8,
        };

        pub const anon6433 = extern struct {
            status: SysExStatus,
            channel: objc.UInt8,
            data: [6]objc.UInt8,
            reserved: objc.UInt8,
        };

        pub const anon6503 = extern struct {
            pub const anon6544 = extern union {
                pub const anon6555 = extern struct {
                    number: objc.UInt8,
                    attributeType: NoteAttribute,
                    velocity: objc.UInt16,
                    attribute: objc.UInt16,
                };

                pub const anon6625 = extern struct {
                    noteNumber: objc.UInt8,
                    reserved: objc.UInt8,
                    pressure: objc.UInt32,
                };

                pub const anon6695 = extern struct {
                    index: objc.UInt8,
                    reserved: objc.UInt8,
                    data: objc.UInt32,
                };

                pub const anon6755 = extern struct {
                    options: ProgramChangeOptions,
                    program: objc.UInt8,
                    reserved: [2]objc.UInt8,
                    bank: objc.UInt16,
                };

                pub const anon6825 = extern struct {
                    data: objc.UInt32,
                    reserved: [2]objc.UInt8,
                };

                pub const anon6875 = extern struct {
                    data: objc.UInt32,
                    reserved: [2]objc.UInt8,
                };

                pub const anon6925 = extern struct {
                    noteNumber: objc.UInt8,
                    index: objc.UInt8,
                    data: objc.UInt32,
                };

                pub const anon6985 = extern struct {
                    bank: objc.UInt8,
                    index: objc.UInt8,
                    data: objc.UInt32,
                };

                pub const anon7045 = extern struct {
                    noteNumber: objc.UInt8,
                    reserved: objc.UInt8,
                    bend: objc.UInt32,
                };

                pub const anon7105 = extern struct {
                    note: objc.UInt8,
                    options: PerNoteManagementOptions,
                    reserved: [4]objc.UInt8,
                };

                note: UniversalMessage.anon5982.anon6503.anon6544.anon6555,
                polyPressure: UniversalMessage.anon5982.anon6503.anon6544.anon6625,
                controlChange: UniversalMessage.anon5982.anon6503.anon6544.anon6695,
                programChange: UniversalMessage.anon5982.anon6503.anon6544.anon6755,
                channelPressure: UniversalMessage.anon5982.anon6503.anon6544.anon6825,
                pitchBend: UniversalMessage.anon5982.anon6503.anon6544.anon6875,
                perNoteController: UniversalMessage.anon5982.anon6503.anon6544.anon6925,
                controller: UniversalMessage.anon5982.anon6503.anon6544.anon6985,
                perNotePitchBend: UniversalMessage.anon5982.anon6503.anon6544.anon7045,
                perNoteManagement: UniversalMessage.anon5982.anon6503.anon6544.anon7105,
            };

            status: CVStatus,
            channel: objc.UInt8,
            reserved: [3]objc.UInt8,
        };

        pub const anon7183 = extern struct {
            pub const anon7204 = extern union {
                pub const anon7215 = extern struct {
                    byteCount: objc.UInt8,
                    streamID: objc.UInt8,
                    data: [13]objc.UInt8,
                    reserved: objc.UInt8,
                };

                pub const anon7285 = extern struct {
                    mdsID: objc.UInt8,
                    data: [14]objc.UInt8,
                    reserved: objc.UInt8,
                };

                sysex8: UniversalMessage.anon5982.anon7183.anon7204.anon7215,
                mixedDataSet: UniversalMessage.anon5982.anon7183.anon7204.anon7285,
            };

            status: SysExStatus,
        };

        pub const anon7363 = extern struct {
            words: [4]objc.UInt32,
        };

        utility: UniversalMessage.anon5982.anon5993,
        system: UniversalMessage.anon5982.anon6073,
        channelVoice1: UniversalMessage.anon5982.anon6163,
        sysEx: UniversalMessage.anon5982.anon6433,
        channelVoice2: UniversalMessage.anon5982.anon6503,
        data128: UniversalMessage.anon5982.anon7183,
        unknown: UniversalMessage.anon5982.anon7363,
    };

    type: MessageType,
    group: objc.UInt8,
    reserved: [3]objc.UInt8,
};

pub const EventVisitor = ?*const fn (?*anyopaque, TimeStamp, UniversalMessage) callconv(.C) void;

extern "CoreMIDI" fn MIDIEventListForEachEvent(evtlist: ?*const EventList, visitor: EventVisitor, visitorContext: ?*anyopaque) callconv(.C) void;
pub const eventListForEachEvent = MIDIEventListForEachEvent;

extern "CoreMIDI" fn MIDIBluetoothDriverActivateAllConnections() callconv(.C) objc.OSStatus;
pub const bluetoothDriverActivateAllConnections = MIDIBluetoothDriverActivateAllConnections;

extern "CoreMIDI" fn MIDIBluetoothDriverDisconnect(uuid: core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const bluetoothDriverDisconnect = MIDIBluetoothDriverDisconnect;

pub const MIDI2DeviceManufacturer = extern struct {
    sysExIDByte: [3]objc.Byte,
};

pub const MIDI2DeviceRevisionLevel = extern struct {
    revisionLevel: [4]objc.Byte,
};

pub const CICategoryOptions = UInteger7;
pub const CICategoryOptions_ProtocolNegotiation: UInteger7 = 2;
pub const CICategoryOptions_ProfileConfigurationSupported: UInteger7 = 4;
pub const CICategoryOptions_PropertyExchangeSupported: UInteger7 = 8;
pub const CICategoryOptions_ProcessInquirySupported: UInteger7 = 16;

pub const UMPFunctionBlockID = UInteger7;

pub const CIDeviceType = objc.UInt8;
pub const CIDeviceType_Unknown: objc.UInt8 = 0;
pub const CIDeviceType_LegacyMIDI1: objc.UInt8 = 1;
pub const CIDeviceType_Virtual: objc.UInt8 = 2;
pub const CIDeviceType_USBMIDI: objc.UInt8 = 3;

pub const CIProfileMessageType = UInteger7;
pub const CIProfileMessageType_ProfileInquiry: UInteger7 = 32;
pub const CIProfileMessageType_ReplyToProfileInquiry: UInteger7 = 33;
pub const CIProfileMessageType_SetProfileOn: UInteger7 = 34;
pub const CIProfileMessageType_SetProfileOff: UInteger7 = 35;
pub const CIProfileMessageType_ProfileEnabledReport: UInteger7 = 36;
pub const CIProfileMessageType_ProfileDisabledReport: UInteger7 = 37;
pub const CIProfileMessageType_ProfileAdded: UInteger7 = 38;
pub const CIProfileMessageType_ProfileRemoved: UInteger7 = 39;
pub const CIProfileMessageType_DetailsInquiry: UInteger7 = 40;
pub const CIProfileMessageType_ReplyToDetailsInquiry: UInteger7 = 41;
pub const CIProfileMessageType_ProfileSpecificData: UInteger7 = 47;

pub const CIPropertyExchangeMessageType = UInteger7;
pub const CIPropertyExchangeMessageType_InquiryPropertyExchangeCapabilities: UInteger7 = 48;
pub const CIPropertyExchangeMessageType_ReplyToPropertyExchangeCapabilities: UInteger7 = 49;
pub const CIPropertyExchangeMessageType_InquiryHasPropertyData_Reserved: UInteger7 = 50;
pub const CIPropertyExchangeMessageType_InquiryReplyToHasPropertyData_Reserved: UInteger7 = 51;
pub const CIPropertyExchangeMessageType_InquiryGetPropertyData: UInteger7 = 52;
pub const CIPropertyExchangeMessageType_ReplyToGetProperty: UInteger7 = 53;
pub const CIPropertyExchangeMessageType_InquirySetPropertyData: UInteger7 = 54;
pub const CIPropertyExchangeMessageType_ReplyToSetPropertyData: UInteger7 = 55;
pub const CIPropertyExchangeMessageType_Subscription: UInteger7 = 56;
pub const CIPropertyExchangeMessageType_ReplyToSubscription: UInteger7 = 57;
pub const CIPropertyExchangeMessageType_Notify: UInteger7 = 63;

pub const CIProcessInquiryMessageType = UInteger7;
pub const CIProcessInquiryMessageType_InquiryProcessInquiryCapabilities: UInteger7 = 64;
pub const CIProcessInquiryMessageType_ReplyToProcessInquiryCapabilities: UInteger7 = 65;
pub const CIProcessInquiryMessageType_InquiryMIDIMessageReport: UInteger7 = 66;
pub const CIProcessInquiryMessageType_ReplyToMIDIMessageReport: UInteger7 = 67;
pub const CIProcessInquiryMessageType_EndOfMIDIMessageReport: UInteger7 = 68;

pub const CIManagementMessageType = UInteger7;
pub const CIManagementMessageType_Discovery: UInteger7 = 112;
pub const CIManagementMessageType_ReplyToDiscovery: UInteger7 = 113;
pub const CIManagementMessageType_InquiryEndpointInformation: UInteger7 = 114;
pub const CIManagementMessageType_ReplyToEndpointInformation: UInteger7 = 115;
pub const CIManagementMessageType_MIDICIACK: UInteger7 = 125;
pub const CIManagementMessageType_InvalidateMUID: UInteger7 = 126;
pub const CIManagementMessageType_MIDICINAK: UInteger7 = 127;

pub const CIProfileType = objc.UInt8;
pub const CIProfileType_SingleChannel: objc.UInt8 = 1;
pub const CIProfileType_Group: objc.UInt8 = 2;
pub const CIProfileType_FunctionBlock: objc.UInt8 = 3;
pub const CIProfileType_Multichannel: objc.UInt8 = 4;

pub const UMPCIObjectBackingType = objc.UInt8;
pub const UMPCIObjectBackingType_Unknown: objc.UInt8 = 0;
pub const UMPCIObjectBackingType_Virtual: objc.UInt8 = 1;
pub const UMPCIObjectBackingType_DriverDevice: objc.UInt8 = 2;
pub const UMPCIObjectBackingType_USBMIDI: objc.UInt8 = 3;

pub const CIProfileIDStandard = extern struct {
    profileIDByte1: UInteger7,
    profileBank: UInteger7,
    profileNumber: UInteger7,
    profileVersion: UInteger7,
    profileLevel: UInteger7,
};

pub const CIProfileIDManufacturerSpecific = extern struct {
    sysExID1: UInteger7,
    sysExID2: UInteger7,
    sysExID3: UInteger7,
    info1: UInteger7,
    info2: UInteger7,
};

pub const CIProfileID = extern union {
    standard: CIProfileIDStandard,
    manufacturerSpecific: CIProfileIDManufacturerSpecific,
};

pub const CIPropertyExchangeRequestID = objc.UInt8;

pub const NetworkConnectionPolicy = objc.NSUInteger;
pub const NetworkConnectionPolicy__NoOne: objc.NSUInteger = 0;
pub const NetworkConnectionPolicy__HostsInContactList: objc.NSUInteger = 1;
pub const NetworkConnectionPolicy__Anyone: objc.NSUInteger = 2;

/// https://developer.apple.com/documentation/CoreMIDI/MIDINetworkHost?language=objc
pub const NetworkHost = opaque {
    pub const Internal = objc.ExternClass("MIDINetworkHost", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn hostWithNameAddressPort(_name: ?*foundation.String, _address: ?*foundation.String, _port: objc.NSUInteger) *@This() {
        return objc.msgSend(Internal.class(), "hostWithName:address:port:", *@This(), .{ _name, _address, _port });
    }

    pub fn hostWithNameNetService(_name: ?*foundation.String, _netService: ?*foundation.NetService) *@This() {
        return objc.msgSend(Internal.class(), "hostWithName:netService:", *@This(), .{ _name, _netService });
    }

    pub fn hostWithNameNetServiceNameNetServiceDomain(_name: ?*foundation.String, _netServiceName: ?*foundation.String, _netServiceDomain: ?*foundation.String) *@This() {
        return objc.msgSend(Internal.class(), "hostWithName:netServiceName:netServiceDomain:", *@This(), .{ _name, _netServiceName, _netServiceDomain });
    }

    pub fn hasSameAddressAs(_self: *@This(), _other: ?*NetworkHost) objc.BOOL {
        return objc.msgSend(_self, "hasSameAddressAs:", objc.BOOL, .{_other});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn address(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "address", ?*foundation.String, .{});
    }

    pub fn port(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "port", objc.NSUInteger, .{});
    }

    pub fn netServiceName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "netServiceName", ?*foundation.String, .{});
    }

    pub fn netServiceDomain(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "netServiceDomain", ?*foundation.String, .{});
    }
};

/// https://developer.apple.com/documentation/CoreMIDI/MIDINetworkConnection?language=objc
pub const NetworkConnection = opaque {
    pub const Internal = objc.ExternClass("MIDINetworkConnection", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn connectionWithHost(_host: ?*NetworkHost) *@This() {
        return objc.msgSend(Internal.class(), "connectionWithHost:", *@This(), .{_host});
    }

    pub fn host(_self: *@This()) ?*NetworkHost {
        return objc.msgSend(_self, "host", ?*NetworkHost, .{});
    }
};

/// https://developer.apple.com/documentation/CoreMIDI/MIDINetworkSession?language=objc
pub const NetworkSession = opaque {
    pub const Internal = objc.ExternClass("MIDINetworkSession", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn defaultSession() ?*NetworkSession {
        return objc.msgSend(Internal.class(), "defaultSession", ?*NetworkSession, .{});
    }

    pub fn contacts(_self: *@This()) ?*foundation.Set(?*NetworkHost) {
        return objc.msgSend(_self, "contacts", ?*foundation.Set(?*NetworkHost), .{});
    }

    pub fn addContact(_self: *@This(), _contact: ?*NetworkHost) objc.BOOL {
        return objc.msgSend(_self, "addContact:", objc.BOOL, .{_contact});
    }

    pub fn removeContact(_self: *@This(), _contact: ?*NetworkHost) objc.BOOL {
        return objc.msgSend(_self, "removeContact:", objc.BOOL, .{_contact});
    }

    pub fn connections(_self: *@This()) ?*foundation.Set(?*NetworkConnection) {
        return objc.msgSend(_self, "connections", ?*foundation.Set(?*NetworkConnection), .{});
    }

    pub fn addConnection(_self: *@This(), _connection: ?*NetworkConnection) objc.BOOL {
        return objc.msgSend(_self, "addConnection:", objc.BOOL, .{_connection});
    }

    pub fn removeConnection(_self: *@This(), _connection: ?*NetworkConnection) objc.BOOL {
        return objc.msgSend(_self, "removeConnection:", objc.BOOL, .{_connection});
    }

    pub fn sourceEndpoint(_self: *@This()) EndpointRef {
        return objc.msgSend(_self, "sourceEndpoint", EndpointRef, .{});
    }

    pub fn destinationEndpoint(_self: *@This()) EndpointRef {
        return objc.msgSend(_self, "destinationEndpoint", EndpointRef, .{});
    }

    pub fn isEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isEnabled", objc.BOOL, .{});
    }

    pub fn setEnabled(_self: *@This(), _enabled: objc.BOOL) void {
        return objc.msgSend(_self, "setEnabled:", void, .{_enabled});
    }

    pub fn networkPort(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "networkPort", objc.NSUInteger, .{});
    }

    pub fn networkName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "networkName", ?*foundation.String, .{});
    }

    pub fn localName(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "localName", ?*foundation.String, .{});
    }

    pub fn connectionPolicy(_self: *@This()) NetworkConnectionPolicy {
        return objc.msgSend(_self, "connectionPolicy", NetworkConnectionPolicy, .{});
    }

    pub fn setConnectionPolicy(_self: *@This(), _connectionPolicy: NetworkConnectionPolicy) void {
        return objc.msgSend(_self, "setConnectionPolicy:", void, .{_connectionPolicy});
    }
};

/// https://developer.apple.com/documentation/CoreMIDI/MIDI2DeviceInfo?language=objc
pub const MIDI2DeviceInfo = opaque {
    pub const Internal = objc.ExternClass("MIDI2DeviceInfo", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn initWithManufacturerIDFamilyModelNumberRevisionLevel(
        _self: *@This(),
        _manufacturerID: MIDI2DeviceManufacturer,
        _family: UInteger14,
        _modelNumber: UInteger14,
        _revisionLevel: MIDI2DeviceRevisionLevel,
    ) *@This() {
        return objc.msgSend(_self, "initWithManufacturerID:family:modelNumber:revisionLevel:", *@This(), .{
            _manufacturerID,
            _family,
            _modelNumber,
            _revisionLevel,
        });
    }

    pub fn manufacturerID(_self: *@This()) MIDI2DeviceManufacturer {
        return objc.msgSend(_self, "manufacturerID", MIDI2DeviceManufacturer, .{});
    }

    pub fn family(_self: *@This()) UInteger14 {
        return objc.msgSend(_self, "family", UInteger14, .{});
    }

    pub fn modelNumber(_self: *@This()) UInteger14 {
        return objc.msgSend(_self, "modelNumber", UInteger14, .{});
    }

    pub fn revisionLevel(_self: *@This()) MIDI2DeviceRevisionLevel {
        return objc.msgSend(_self, "revisionLevel", MIDI2DeviceRevisionLevel, .{});
    }
};

pub const UMPProtocolOptions = UInteger4;
pub const UMPProtocolOptions_MIDI1: UInteger4 = 1;
pub const UMPProtocolOptions_MIDI2: UInteger4 = 2;

/// https://developer.apple.com/documentation/CoreMIDI/MIDIUMPEndpoint?language=objc
pub const UMPEndpoint = opaque {
    pub const Internal = objc.ExternClass("MIDIUMPEndpoint", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn midiProtocol(_self: *@This()) ProtocolID {
        return objc.msgSend(_self, "MIDIProtocol", ProtocolID, .{});
    }

    pub fn supportedMIDIProtocols(_self: *@This()) UMPProtocolOptions {
        return objc.msgSend(_self, "supportedMIDIProtocols", UMPProtocolOptions, .{});
    }

    pub fn midiDestination(_self: *@This()) EndpointRef {
        return objc.msgSend(_self, "MIDIDestination", EndpointRef, .{});
    }

    pub fn midiSource(_self: *@This()) EndpointRef {
        return objc.msgSend(_self, "MIDISource", EndpointRef, .{});
    }

    pub fn deviceInfo(_self: *@This()) ?*MIDI2DeviceInfo {
        return objc.msgSend(_self, "deviceInfo", ?*MIDI2DeviceInfo, .{});
    }

    pub fn productInstanceID(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "productInstanceID", ?*foundation.String, .{});
    }

    pub fn hasStaticFunctionBlocks(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "hasStaticFunctionBlocks", objc.BOOL, .{});
    }

    pub fn hasJRTSReceiveCapability(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "hasJRTSReceiveCapability", objc.BOOL, .{});
    }

    pub fn hasJRTSTransmitCapability(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "hasJRTSTransmitCapability", objc.BOOL, .{});
    }

    pub fn endpointType(_self: *@This()) UMPCIObjectBackingType {
        return objc.msgSend(_self, "endpointType", UMPCIObjectBackingType, .{});
    }

    pub fn functionBlocks(_self: *@This()) ?*foundation.Array(?*UMPFunctionBlock) {
        return objc.msgSend(_self, "functionBlocks", ?*foundation.Array(?*UMPFunctionBlock), .{});
    }

    pub fn setFunctionBlocks(_self: *@This(), _functionBlocks: ?*foundation.Array(?*UMPFunctionBlock)) void {
        return objc.msgSend(_self, "setFunctionBlocks:", void, .{_functionBlocks});
    }
};

pub const UMPEndpointManagerDictionaryKey = ?*foundation.String;

/// https://developer.apple.com/documentation/CoreMIDI/MIDIUMPEndpointManager?language=objc
pub const UMPEndpointManager = opaque {
    pub const Internal = objc.ExternClass("MIDIUMPEndpointManager", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn sharedInstance() ?*UMPEndpointManager {
        return objc.msgSend(Internal.class(), "sharedInstance", ?*UMPEndpointManager, .{});
    }

    pub fn umpEndpoints(_self: *@This()) ?*foundation.Array(?*UMPEndpoint) {
        return objc.msgSend(_self, "UMPEndpoints", ?*foundation.Array(?*UMPEndpoint), .{});
    }
};

/// https://developer.apple.com/documentation/CoreMIDI/MIDIUMPFunctionBlock?language=objc
pub const UMPFunctionBlock = opaque {
    pub const Internal = objc.ExternClass("MIDIUMPFunctionBlock", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn functionBlockID(_self: *@This()) UMPFunctionBlockID {
        return objc.msgSend(_self, "functionBlockID", UMPFunctionBlockID, .{});
    }

    pub fn direction(_self: *@This()) UMPFunctionBlockDirection {
        return objc.msgSend(_self, "direction", UMPFunctionBlockDirection, .{});
    }

    pub fn firstGroup(_self: *@This()) UMPGroupNumber {
        return objc.msgSend(_self, "firstGroup", UMPGroupNumber, .{});
    }

    pub fn totalGroupsSpanned(_self: *@This()) UInteger7 {
        return objc.msgSend(_self, "totalGroupsSpanned", UInteger7, .{});
    }

    pub fn maxSysEx8Streams(_self: *@This()) objc.UInt8 {
        return objc.msgSend(_self, "maxSysEx8Streams", objc.UInt8, .{});
    }

    pub fn midi1Info(_self: *@This()) UMPFunctionBlockMIDI1Info {
        return objc.msgSend(_self, "MIDI1Info", UMPFunctionBlockMIDI1Info, .{});
    }

    pub fn uiHint(_self: *@This()) UMPFunctionBlockUIHint {
        return objc.msgSend(_self, "UIHint", UMPFunctionBlockUIHint, .{});
    }

    pub fn umpEndpoint(_self: *@This()) ?*UMPEndpoint {
        return objc.msgSend(_self, "UMPEndpoint", ?*UMPEndpoint, .{});
    }

    pub fn midiCIDevice(_self: *@This()) ?*CIDevice {
        return objc.msgSend(_self, "midiCIDevice", ?*CIDevice, .{});
    }

    pub fn isEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isEnabled", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/CoreMIDI/MIDIUMPMutableEndpoint?language=objc
pub const UMPMutableEndpoint = opaque {
    pub const Internal = objc.ExternClass("MIDIUMPMutableEndpoint", @This(), UMPEndpoint, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn initWithNameDeviceInfoProductInstanceIDMIDIProtocolDestinationCallback(
        _self: *@This(),
        _name: ?*foundation.String,
        _deviceInfo: ?*MIDI2DeviceInfo,
        _productInstanceID: ?*foundation.String,
        _MIDIProtocol: ProtocolID,
        _destinationCallback: ReceiveBlock,
    ) *@This() {
        return objc.msgSend(_self, "initWithName:deviceInfo:productInstanceID:MIDIProtocol:destinationCallback:", *@This(), .{
            _name,
            _deviceInfo,
            _productInstanceID,
            _MIDIProtocol,
            _destinationCallback,
        });
    }

    pub fn setNameError(_self: *@This(), _name: ?*foundation.String, _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setName:error:", objc.BOOL, .{ _name, _error });
    }

    pub fn registerFunctionBlocksMarkAsStaticError(_self: *@This(), _functionBlocks: ?*foundation.Array(?*UMPMutableFunctionBlock), _markAsStatic: objc.BOOL, _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "registerFunctionBlocks:markAsStatic:error:", objc.BOOL, .{ _functionBlocks, _markAsStatic, _error });
    }

    pub fn setEnabledError(_self: *@This(), _isEnabled: objc.BOOL, _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setEnabled:error:", objc.BOOL, .{ _isEnabled, _error });
    }

    pub fn mutableFunctionBlocks(_self: *@This()) ?*foundation.Array(?*UMPMutableFunctionBlock) {
        return objc.msgSend(_self, "mutableFunctionBlocks", ?*foundation.Array(?*UMPMutableFunctionBlock), .{});
    }

    pub fn setMutableFunctionBlocks(_self: *@This(), _mutableFunctionBlocks: ?*foundation.Array(?*UMPMutableFunctionBlock)) void {
        return objc.msgSend(_self, "setMutableFunctionBlocks:", void, .{_mutableFunctionBlocks});
    }

    pub fn isEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isEnabled", objc.BOOL, .{});
    }
};

/// https://developer.apple.com/documentation/CoreMIDI/MIDIUMPMutableFunctionBlock?language=objc
pub const UMPMutableFunctionBlock = opaque {
    pub const Internal = objc.ExternClass("MIDIUMPMutableFunctionBlock", @This(), UMPFunctionBlock, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn initWithNameDirectionFirstGroupTotalGroupsSpannedMaxSysEx8StreamsMIDI1InfoUIHintIsEnabled(
        _self: *@This(),
        _name: ?*foundation.String,
        _direction: UMPFunctionBlockDirection,
        _firstGroup: UMPGroupNumber,
        _totalGroupsSpanned: UInteger7,
        _maxSysEx8Streams: UInteger7,
        _MIDI1Info: UMPFunctionBlockMIDI1Info,
        _UIHint: UMPFunctionBlockUIHint,
        _isEnabled: objc.BOOL,
    ) *@This() {
        return objc.msgSend(_self, "initWithName:direction:firstGroup:totalGroupsSpanned:maxSysEx8Streams:MIDI1Info:UIHint:isEnabled:", *@This(), .{
            _name,
            _direction,
            _firstGroup,
            _totalGroupsSpanned,
            _maxSysEx8Streams,
            _MIDI1Info,
            _UIHint,
            _isEnabled,
        });
    }

    pub fn setEnabledError(_self: *@This(), _isEnabled: objc.BOOL, _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setEnabled:error:", objc.BOOL, .{ _isEnabled, _error });
    }

    pub fn setNameError(_self: *@This(), _name: ?*foundation.String, _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setName:error:", objc.BOOL, .{ _name, _error });
    }

    pub fn reconfigureWithFirstGroupDirectionMIDI1InfoUIHintError(
        _self: *@This(),
        _firstGroup: UMPGroupNumber,
        _direction: UMPFunctionBlockDirection,
        _MIDI1Info: UMPFunctionBlockMIDI1Info,
        _UIHint: UMPFunctionBlockUIHint,
        _error: ?*?*foundation.Error,
    ) objc.BOOL {
        return objc.msgSend(_self, "reconfigureWithFirstGroup:direction:MIDI1Info:UIHint:error:", objc.BOOL, .{
            _firstGroup,
            _direction,
            _MIDI1Info,
            _UIHint,
            _error,
        });
    }

    pub fn umpEndpoint(_self: *@This()) ?*UMPMutableEndpoint {
        return objc.msgSend(_self, "UMPEndpoint", ?*UMPMutableEndpoint, .{});
    }
};

/// https://developer.apple.com/documentation/CoreMIDI/MIDICIDevice?language=objc
pub const CIDevice = opaque {
    pub const Internal = objc.ExternClass("MIDICIDevice", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn deviceInfo(_self: *@This()) ?*MIDI2DeviceInfo {
        return objc.msgSend(_self, "deviceInfo", ?*MIDI2DeviceInfo, .{});
    }

    pub fn muid(_self: *@This()) CIMUID {
        return objc.msgSend(_self, "MUID", CIMUID, .{});
    }

    pub fn supportsProtocolNegotiation(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsProtocolNegotiation", objc.BOOL, .{});
    }

    pub fn supportsProfileConfiguration(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsProfileConfiguration", objc.BOOL, .{});
    }

    pub fn supportsPropertyExchange(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsPropertyExchange", objc.BOOL, .{});
    }

    pub fn supportsProcessInquiry(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsProcessInquiry", objc.BOOL, .{});
    }

    pub fn maxSysExSize(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxSysExSize", objc.NSUInteger, .{});
    }

    pub fn maxPropertyExchangeRequests(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "maxPropertyExchangeRequests", objc.NSUInteger, .{});
    }

    pub fn deviceType(_self: *@This()) CIDeviceType {
        return objc.msgSend(_self, "deviceType", CIDeviceType, .{});
    }

    pub fn profiles(_self: *@This()) ?*foundation.Array(?*UMPCIProfile) {
        return objc.msgSend(_self, "profiles", ?*foundation.Array(?*UMPCIProfile), .{});
    }
};

/// https://developer.apple.com/documentation/CoreMIDI/MIDIUMPCIProfile?language=objc
pub const UMPCIProfile = opaque {
    pub const Internal = objc.ExternClass("MIDIUMPCIProfile", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn setProfileStateEnabledChannelCountError(_self: *@This(), _isEnabled: objc.BOOL, _enabledChannelCount: UInteger14, _error: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "setProfileState:enabledChannelCount:error:", objc.BOOL, .{ _isEnabled, _enabledChannelCount, _error });
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn profileID(_self: *@This()) CIProfileID {
        return objc.msgSend(_self, "profileID", CIProfileID, .{});
    }

    pub fn profileType(_self: *@This()) CIProfileType {
        return objc.msgSend(_self, "profileType", CIProfileType, .{});
    }

    pub fn groupOffset(_self: *@This()) UMPGroupNumber {
        return objc.msgSend(_self, "groupOffset", UMPGroupNumber, .{});
    }

    pub fn firstChannel(_self: *@This()) ChannelNumber {
        return objc.msgSend(_self, "firstChannel", ChannelNumber, .{});
    }

    pub fn enabledChannelCount(_self: *@This()) UInteger14 {
        return objc.msgSend(_self, "enabledChannelCount", UInteger14, .{});
    }

    pub fn totalChannelCount(_self: *@This()) UInteger14 {
        return objc.msgSend(_self, "totalChannelCount", UInteger14, .{});
    }

    pub fn isEnabled(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isEnabled", objc.BOOL, .{});
    }
};

pub const CIDeviceManagerDictionaryKey = ?*foundation.String;

/// https://developer.apple.com/documentation/CoreMIDI/MIDICIDeviceManager?language=objc
pub const CIDeviceManager = opaque {
    pub const Internal = objc.ExternClass("MIDICIDeviceManager", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn sharedInstance() ?*CIDeviceManager {
        return objc.msgSend(Internal.class(), "sharedInstance", ?*CIDeviceManager, .{});
    }

    pub fn discoveredCIDevices(_self: *@This()) ?*foundation.Array(?*CIDevice) {
        return objc.msgSend(_self, "discoveredCIDevices", ?*foundation.Array(?*CIDevice), .{});
    }
};

pub const CIDeviceIdentification = extern struct {
    manufacturer: [3]objc.uint8_t,
    family: [2]objc.uint8_t,
    modelNumber: [2]objc.uint8_t,
    revisionLevel: [4]objc.uint8_t,
    reserved: [5]objc.uint8_t,
};

pub const CIInitiatiorMUID = ?*foundation.Number;

pub const CIProfileStateList = foundation.Array(?*CIProfileState);

/// https://developer.apple.com/documentation/CoreMIDI/MIDICIDeviceInfo?language=objc
pub const CIDeviceInfo = opaque {
    pub const Internal = objc.ExternClass("MIDICIDeviceInfo", @This(), objc.NSObject, &.{foundation.SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn initWithDestinationManufacturerFamilyModelRevision(
        _self: *@This(),
        _midiDestination: EntityRef,
        _manufacturer: ?*foundation.Data,
        _family: ?*foundation.Data,
        _modelNumber: ?*foundation.Data,
        _revisionLevel: ?*foundation.Data,
    ) *@This() {
        return objc.msgSend(_self, "initWithDestination:manufacturer:family:model:revision:", *@This(), .{
            _midiDestination,
            _manufacturer,
            _family,
            _modelNumber,
            _revisionLevel,
        });
    }

    pub fn manufacturerID(_self: *@This()) ?*foundation.Data {
        return objc.msgSend(_self, "manufacturerID", ?*foundation.Data, .{});
    }

    pub fn family(_self: *@This()) ?*foundation.Data {
        return objc.msgSend(_self, "family", ?*foundation.Data, .{});
    }

    pub fn modelNumber(_self: *@This()) ?*foundation.Data {
        return objc.msgSend(_self, "modelNumber", ?*foundation.Data, .{});
    }

    pub fn revisionLevel(_self: *@This()) ?*foundation.Data {
        return objc.msgSend(_self, "revisionLevel", ?*foundation.Data, .{});
    }

    pub fn midiDestination(_self: *@This()) EndpointRef {
        return objc.msgSend(_self, "midiDestination", EndpointRef, .{});
    }
};

/// https://developer.apple.com/documentation/CoreMIDI/MIDICIDiscoveredNode?language=objc
pub const CIDiscoveredNode = opaque {
    pub const Internal = objc.ExternClass("MIDICIDiscoveredNode", @This(), objc.NSObject, &.{foundation.SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn destination(_self: *@This()) EntityRef {
        return objc.msgSend(_self, "destination", EntityRef, .{});
    }

    pub fn deviceInfo(_self: *@This()) ?*CIDeviceInfo {
        return objc.msgSend(_self, "deviceInfo", ?*CIDeviceInfo, .{});
    }

    pub fn supportsProfiles(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsProfiles", objc.BOOL, .{});
    }

    pub fn supportsProperties(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsProperties", objc.BOOL, .{});
    }

    pub fn maximumSysExSize(_self: *@This()) ?*foundation.Number {
        return objc.msgSend(_self, "maximumSysExSize", ?*foundation.Number, .{});
    }
};

/// https://developer.apple.com/documentation/CoreMIDI/MIDICIProfile?language=objc
pub const CIProfile = opaque {
    pub const Internal = objc.ExternClass("MIDICIProfile", @This(), objc.NSObject, &.{foundation.SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn initWithData(_self: *@This(), _data: ?*foundation.Data) *@This() {
        return objc.msgSend(_self, "initWithData:", *@This(), .{_data});
    }

    pub fn initWithDataName(_self: *@This(), _data: ?*foundation.Data, _inName: ?*foundation.String) *@This() {
        return objc.msgSend(_self, "initWithData:name:", *@This(), .{ _data, _inName });
    }

    pub fn name(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "name", ?*foundation.String, .{});
    }

    pub fn profileID(_self: *@This()) ?*foundation.Data {
        return objc.msgSend(_self, "profileID", ?*foundation.Data, .{});
    }
};

/// https://developer.apple.com/documentation/CoreMIDI/MIDICIProfileState?language=objc
pub const CIProfileState = opaque {
    pub const Internal = objc.ExternClass("MIDICIProfileState", @This(), objc.NSObject, &.{foundation.SecureCoding});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn encodeWithCoder(_self: *@This(), _coder: ?*foundation.Coder) void {
        return objc.msgSend(_self, "encodeWithCoder:", void, .{_coder});
    }

    pub fn initWithCoder(_self: *@This(), _coder: ?*foundation.Coder) *@This() {
        return objc.msgSend(_self, "initWithCoder:", *@This(), .{_coder});
    }

    pub fn supportsSecureCoding() objc.BOOL {
        return objc.msgSend(Internal.class(), "supportsSecureCoding", objc.BOOL, .{});
    }

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn initWithChannelEnabledProfilesDisabledProfiles(_self: *@This(), _midiChannelNum: ChannelNumber, _enabled: ?*foundation.Array(?*CIProfile), _disabled: ?*foundation.Array(?*CIProfile)) *@This() {
        return objc.msgSend(_self, "initWithChannel:enabledProfiles:disabledProfiles:", *@This(), .{ _midiChannelNum, _enabled, _disabled });
    }

    pub fn initWithEnabledProfilesDisabledProfiles(_self: *@This(), _enabled: ?*foundation.Array(?*CIProfile), _disabled: ?*foundation.Array(?*CIProfile)) *@This() {
        return objc.msgSend(_self, "initWithEnabledProfiles:disabledProfiles:", *@This(), .{ _enabled, _disabled });
    }

    pub fn midiChannel(_self: *@This()) ChannelNumber {
        return objc.msgSend(_self, "midiChannel", ChannelNumber, .{});
    }

    pub fn enabledProfiles(_self: *@This()) ?*foundation.Array(?*CIProfile) {
        return objc.msgSend(_self, "enabledProfiles", ?*foundation.Array(?*CIProfile), .{});
    }

    pub fn disabledProfiles(_self: *@This()) ?*foundation.Array(?*CIProfile) {
        return objc.msgSend(_self, "disabledProfiles", ?*foundation.Array(?*CIProfile), .{});
    }
};

pub const CIProfileChangedBlock = *const fn (
    ?*CISession,
    ChannelNumber,
    ?*CIProfile,
    objc.BOOL,
) callconv(.C) void;

pub const CISessionDisconnectBlock = *const fn (?*CISession, ?*foundation.Error) callconv(.C) void;

pub const CIProfileSpecificDataBlock = *const fn (
    ?*CISession,
    ChannelNumber,
    ?*CIProfile,
    ?*foundation.Data,
) callconv(.C) void;

pub const CIDiscoveryResponseBlock = *const fn (?*foundation.Array(?*CIDiscoveredNode)) callconv(.C) void;

/// https://developer.apple.com/documentation/CoreMIDI/MIDICISession?language=objc
pub const CISession = opaque {
    pub const Internal = objc.ExternClass("MIDICISession", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn initWithDiscoveredNodeDataReadyHandlerDisconnectHandler(_self: *@This(), _discoveredNode: ?*CIDiscoveredNode, _handler: *const fn () callconv(.C) void, _disconnectHandler: CISessionDisconnectBlock) *@This() {
        return objc.msgSend(_self, "initWithDiscoveredNode:dataReadyHandler:disconnectHandler:", *@This(), .{ _discoveredNode, _handler, _disconnectHandler });
    }

    pub fn profileStateForChannel(_self: *@This(), _channel: ChannelNumber) ?*CIProfileState {
        return objc.msgSend(_self, "profileStateForChannel:", ?*CIProfileState, .{_channel});
    }

    pub fn enableProfileOnChannelError(_self: *@This(), _profile: ?*CIProfile, _channel: ChannelNumber, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "enableProfile:onChannel:error:", objc.BOOL, .{ _profile, _channel, _outError });
    }

    pub fn disableProfileOnChannelError(_self: *@This(), _profile: ?*CIProfile, _channel: ChannelNumber, _outError: ?*?*foundation.Error) objc.BOOL {
        return objc.msgSend(_self, "disableProfile:onChannel:error:", objc.BOOL, .{ _profile, _channel, _outError });
    }

    pub fn sendProfileOnChannelProfileData(_self: *@This(), _profile: ?*CIProfile, _channel: ChannelNumber, _profileSpecificData: ?*foundation.Data) objc.BOOL {
        return objc.msgSend(_self, "sendProfile:onChannel:profileData:", objc.BOOL, .{ _profile, _channel, _profileSpecificData });
    }

    pub fn midiDestination(_self: *@This()) EntityRef {
        return objc.msgSend(_self, "midiDestination", EntityRef, .{});
    }

    pub fn supportsProfileCapability(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsProfileCapability", objc.BOOL, .{});
    }

    pub fn supportsPropertyCapability(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "supportsPropertyCapability", objc.BOOL, .{});
    }

    pub fn deviceInfo(_self: *@This()) ?*CIDeviceInfo {
        return objc.msgSend(_self, "deviceInfo", ?*CIDeviceInfo, .{});
    }

    pub fn maxSysExSize(_self: *@This()) ?*foundation.Number {
        return objc.msgSend(_self, "maxSysExSize", ?*foundation.Number, .{});
    }

    pub fn maxPropertyRequests(_self: *@This()) ?*foundation.Number {
        return objc.msgSend(_self, "maxPropertyRequests", ?*foundation.Number, .{});
    }

    pub fn profileChangedCallback(_self: *@This()) CIProfileChangedBlock {
        return objc.msgSend(_self, "profileChangedCallback", CIProfileChangedBlock, .{});
    }

    pub fn setProfileChangedCallback(_self: *@This(), _profileChangedCallback: CIProfileChangedBlock) void {
        return objc.msgSend(_self, "setProfileChangedCallback:", void, .{_profileChangedCallback});
    }

    pub fn profileSpecificDataHandler(_self: *@This()) CIProfileSpecificDataBlock {
        return objc.msgSend(_self, "profileSpecificDataHandler", CIProfileSpecificDataBlock, .{});
    }

    pub fn setProfileSpecificDataHandler(_self: *@This(), _profileSpecificDataHandler: CIProfileSpecificDataBlock) void {
        return objc.msgSend(_self, "setProfileSpecificDataHandler:", void, .{_profileSpecificDataHandler});
    }
};

/// https://developer.apple.com/documentation/CoreMIDI/MIDICIDiscoveryManager?language=objc
pub const CIDiscoveryManager = opaque {
    pub const Internal = objc.ExternClass("MIDICIDiscoveryManager", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn sharedInstance() ?*CIDiscoveryManager {
        return objc.msgSend(Internal.class(), "sharedInstance", ?*CIDiscoveryManager, .{});
    }

    pub fn discoverWithHandler(_self: *@This(), _completedHandler: CIDiscoveryResponseBlock) void {
        return objc.msgSend(_self, "discoverWithHandler:", void, .{_completedHandler});
    }
};

/// https://developer.apple.com/documentation/CoreMIDI/MIDICIProfileResponderDelegate?language=objc
pub const CIProfileResponderDelegate = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{objc.NSObject});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn isEqual(_self: *@This(), _object: ?objc.Id) objc.BOOL {
        return objc.msgSend(_self, "isEqual:", objc.BOOL, .{_object});
    }

    pub fn hash(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "hash", objc.NSUInteger, .{});
    }

    pub fn superclass(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "superclass", objc.Class, .{});
    }

    pub fn class(_self: *@This()) objc.Class {
        return objc.msgSend(_self, "class", objc.Class, .{});
    }

    pub fn self(_self: *@This()) *@This() {
        return objc.msgSend(_self, "self", *@This(), .{});
    }

    pub fn performSelector(_self: *@This(), _aSelector: objc.Selector) ?objc.Id {
        return objc.msgSend(_self, "performSelector:", ?objc.Id, .{_aSelector});
    }

    pub fn performSelectorWithObject(_self: *@This(), _aSelector: objc.Selector, _object: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:", ?objc.Id, .{ _aSelector, _object });
    }

    pub fn performSelectorWithObjectWithObject(_self: *@This(), _aSelector: objc.Selector, _object1: ?objc.Id, _object2: ?objc.Id) ?objc.Id {
        return objc.msgSend(_self, "performSelector:withObject:withObject:", ?objc.Id, .{ _aSelector, _object1, _object2 });
    }

    pub fn isProxy(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "isProxy", objc.BOOL, .{});
    }

    pub fn isKindOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isKindOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn isMemberOfClass(_self: *@This(), _aClass: objc.Class) objc.BOOL {
        return objc.msgSend(_self, "isMemberOfClass:", objc.BOOL, .{_aClass});
    }

    pub fn conformsToProtocol(_self: *@This(), _aProtocol: ?**objc.Protocol) objc.BOOL {
        return objc.msgSend(_self, "conformsToProtocol:", objc.BOOL, .{_aProtocol});
    }

    pub fn respondsToSelector(_self: *@This(), _aSelector: objc.Selector) objc.BOOL {
        return objc.msgSend(_self, "respondsToSelector:", objc.BOOL, .{_aSelector});
    }

    pub fn retainCount(_self: *@This()) objc.NSUInteger {
        return objc.msgSend(_self, "retainCount", objc.NSUInteger, .{});
    }

    pub fn zone(_self: *@This()) ?*objc._NSZone {
        return objc.msgSend(_self, "zone", ?*objc._NSZone, .{});
    }

    pub fn description(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "description", ?*foundation.String, .{});
    }

    pub fn debugDescription(_self: *@This()) ?*foundation.String {
        return objc.msgSend(_self, "debugDescription", ?*foundation.String, .{});
    }

    pub fn connectInitiatorWithDeviceInfo(_self: *@This(), _initiatorMUID: CIInitiatiorMUID, _deviceInfo: ?*CIDeviceInfo) objc.BOOL {
        return objc.msgSend(_self, "connectInitiator:withDeviceInfo:", objc.BOOL, .{ _initiatorMUID, _deviceInfo });
    }

    pub fn initiatorDisconnected(_self: *@This(), _initiatorMUID: CIInitiatiorMUID) void {
        return objc.msgSend(_self, "initiatorDisconnected:", void, .{_initiatorMUID});
    }

    pub fn willSetProfileOnChannelEnabled(_self: *@This(), _aProfile: ?*CIProfile, _channel: ChannelNumber, _shouldEnable: objc.BOOL) objc.BOOL {
        return objc.msgSend(_self, "willSetProfile:onChannel:enabled:", objc.BOOL, .{ _aProfile, _channel, _shouldEnable });
    }

    pub fn handleDataForProfileOnChannelData(_self: *@This(), _aProfile: ?*CIProfile, _channel: ChannelNumber, _inData: ?*foundation.Data) void {
        return objc.msgSend(_self, "handleDataForProfile:onChannel:data:", void, .{ _aProfile, _channel, _inData });
    }
};

/// https://developer.apple.com/documentation/CoreMIDI/MIDICIResponder?language=objc
pub const CIResponder = opaque {
    pub const Internal = objc.ExternClass("MIDICIResponder", @This(), objc.NSObject, &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;
    pub const new = Internal.new;
    pub const alloc = Internal.alloc;

    pub fn init(_self: *@This()) *@This() {
        return objc.msgSend(_self, "init", *@This(), .{});
    }

    pub fn initWithDeviceInfoProfileDelegateProfileStatesSupportProperties(
        _self: *@This(),
        _deviceInfo: ?*CIDeviceInfo,
        _delegate: ?*objc.id,
        _profileList: ?*CIProfileStateList,
        _propertiesSupported: objc.BOOL,
    ) *@This() {
        return objc.msgSend(_self, "initWithDeviceInfo:profileDelegate:profileStates:supportProperties:", *@This(), .{
            _deviceInfo,
            _delegate,
            _profileList,
            _propertiesSupported,
        });
    }

    pub fn notifyProfileOnChannelIsEnabled(_self: *@This(), _aProfile: ?*CIProfile, _channel: ChannelNumber, _enabledState: objc.BOOL) objc.BOOL {
        return objc.msgSend(_self, "notifyProfile:onChannel:isEnabled:", objc.BOOL, .{ _aProfile, _channel, _enabledState });
    }

    pub fn sendProfileOnChannelProfileData(_self: *@This(), _aProfile: ?*CIProfile, _channel: ChannelNumber, _profileSpecificData: ?*foundation.Data) objc.BOOL {
        return objc.msgSend(_self, "sendProfile:onChannel:profileData:", objc.BOOL, .{ _aProfile, _channel, _profileSpecificData });
    }

    pub fn start(_self: *@This()) objc.BOOL {
        return objc.msgSend(_self, "start", objc.BOOL, .{});
    }

    pub fn stop(_self: *@This()) void {
        return objc.msgSend(_self, "stop", void, .{});
    }

    pub fn initiators(_self: *@This()) ?*foundation.Array(CIInitiatiorMUID) {
        return objc.msgSend(_self, "initiators", ?*foundation.Array(CIInitiatiorMUID), .{});
    }

    pub fn profileDelegate(_self: *@This()) ?*objc.id {
        return objc.msgSend(_self, "profileDelegate", ?*objc.id, .{});
    }

    pub fn deviceInfo(_self: *@This()) ?*CIDeviceInfo {
        return objc.msgSend(_self, "deviceInfo", ?*CIDeviceInfo, .{});
    }
};
