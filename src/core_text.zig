// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const core_graphics = @import("core_graphics.zig"); // Framework dependency CoreGraphics.

pub const anon3921 = enum(u32) {
    sizeof_sfntVariationHeader = 16,
};

pub const anon3971 = enum(u32) {
    descriptorFontTableTag = 1717859171,
};

pub const anon4071 = enum(u32) {
    kNoAnnotationSelector = 0,
    kBoxAnnotationSelector = 1,
    kRoundedBoxAnnotationSelector = 2,
    kCircleAnnotationSelector = 3,
    kInvertedCircleAnnotationSelector = 4,
    kParenthesisAnnotationSelector = 5,
    kPeriodAnnotationSelector = 6,
    kRomanNumeralAnnotationSelector = 7,
    kDiamondAnnotationSelector = 8,
    kInvertedBoxAnnotationSelector = 9,
    kInvertedRoundedBoxAnnotationSelector = 10,
};

pub const anon701 = enum(u32) {
    kFontRomanScript = 0,
    kFontJapaneseScript = 1,
    kFontTraditionalChineseScript = 2,
    kFontChineseScript = 2,
    kFontKoreanScript = 3,
    kFontArabicScript = 4,
    kFontHebrewScript = 5,
    kFontGreekScript = 6,
    kFontCyrillicScript = 7,
    kFontRussian = 7,
    kFontRSymbolScript = 8,
    kFontDevanagariScript = 9,
    kFontGurmukhiScript = 10,
    kFontGujaratiScript = 11,
    kFontOriyaScript = 12,
    kFontBengaliScript = 13,
    kFontTamilScript = 14,
    kFontTeluguScript = 15,
    kFontKannadaScript = 16,
    kFontMalayalamScript = 17,
    kFontSinhaleseScript = 18,
    kFontBurmeseScript = 19,
    kFontKhmerScript = 20,
    kFontThaiScript = 21,
    kFontLaotianScript = 22,
    kFontGeorgianScript = 23,
    kFontArmenianScript = 24,
    kFontSimpleChineseScript = 25,
    kFontTibetanScript = 26,
    kFontMongolianScript = 27,
    kFontGeezScript = 28,
    kFontEthiopicScript = 28,
    kFontAmharicScript = 28,
    kFontSlavicScript = 29,
    kFontEastEuropeanRomanScript = 29,
    kFontVietnameseScript = 30,
    kFontExtendedArabicScript = 31,
    kFontSindhiScript = 31,
    kFontUninterpretedScript = 32,
};

pub const anon491 = enum(u32) {
    kCTFontClassMaskShift = 28,
};

pub const FontSymbolicTraits = enum(objc.uint32_t) {
    kCTFontTraitItalic = 1,
    kCTFontTraitBold = 2,
    kCTFontTraitExpanded = 32,
    kCTFontTraitCondensed = 64,
    kCTFontTraitMonoSpace = 1024,
    kCTFontTraitVertical = 2048,
    kCTFontTraitUIOptimized = 4096,
    kCTFontTraitColorGlyphs = 8192,
    kCTFontTraitComposite = 16384,
    kCTFontTraitClassMask = -268435456,
    kCTFontItalicTrait = 1,
    kCTFontBoldTrait = 2,
    kCTFontExpandedTrait = 32,
    kCTFontCondensedTrait = 64,
    kCTFontMonoSpaceTrait = 1024,
    kCTFontVerticalTrait = 2048,
    kCTFontUIOptimizedTrait = 4096,
    kCTFontColorGlyphsTrait = 8192,
    kCTFontCompositeTrait = 16384,
    kCTFontClassMaskTrait = -268435456,
};

pub const FontStylisticClass = enum(objc.uint32_t) {
    kCTFontClassUnknown = 0,
    kCTFontClassOldStyleSerifs = 268435456,
    kCTFontClassTransitionalSerifs = 536870912,
    kCTFontClassModernSerifs = 805306368,
    kCTFontClassClarendonSerifs = 1073741824,
    kCTFontClassSlabSerifs = 1342177280,
    kCTFontClassFreeformSerifs = 1879048192,
    kCTFontClassSansSerif = -2147483648,
    kCTFontClassOrnamentals = -1879048192,
    kCTFontClassScripts = -1610612736,
    kCTFontClassSymbolic = -1073741824,
    kCTFontUnknownClass = 0,
    kCTFontOldStyleSerifsClass = 268435456,
    kCTFontTransitionalSerifsClass = 536870912,
    kCTFontModernSerifsClass = 805306368,
    kCTFontClarendonSerifsClass = 1073741824,
    kCTFontSlabSerifsClass = 1342177280,
    kCTFontFreeformSerifsClass = 1879048192,
    kCTFontSansSerifClass = -2147483648,
    kCTFontOrnamentalsClass = -1879048192,
    kCTFontScriptsClass = -1610612736,
    kCTFontSymbolicClass = -1073741824,
};

pub const anon6101 = enum(u32) {
    kDefaultLowerCaseSelector = 0,
    kLowerCaseSmallCapsSelector = 1,
    kLowerCasePetiteCapsSelector = 2,
};

pub const anon431 = enum(u32) {
    sizeof_sfntDirectory = 12,
};

pub const anon3271 = enum(u32) {
    kNoStyleOptionsSelector = 0,
    kDisplayTextSelector = 1,
    kEngravedTextSelector = 2,
    kIlluminatedCapsSelector = 3,
    kTitlingCapsSelector = 4,
    kTallCapsSelector = 5,
};

pub const anon5471 = enum(u32) {
    kNoStylisticAlternatesSelector = 0,
    kStylisticAltOneOnSelector = 2,
    kStylisticAltOneOffSelector = 3,
    kStylisticAltTwoOnSelector = 4,
    kStylisticAltTwoOffSelector = 5,
    kStylisticAltThreeOnSelector = 6,
    kStylisticAltThreeOffSelector = 7,
    kStylisticAltFourOnSelector = 8,
    kStylisticAltFourOffSelector = 9,
    kStylisticAltFiveOnSelector = 10,
    kStylisticAltFiveOffSelector = 11,
    kStylisticAltSixOnSelector = 12,
    kStylisticAltSixOffSelector = 13,
    kStylisticAltSevenOnSelector = 14,
    kStylisticAltSevenOffSelector = 15,
    kStylisticAltEightOnSelector = 16,
    kStylisticAltEightOffSelector = 17,
    kStylisticAltNineOnSelector = 18,
    kStylisticAltNineOffSelector = 19,
    kStylisticAltTenOnSelector = 20,
    kStylisticAltTenOffSelector = 21,
    kStylisticAltElevenOnSelector = 22,
    kStylisticAltElevenOffSelector = 23,
    kStylisticAltTwelveOnSelector = 24,
    kStylisticAltTwelveOffSelector = 25,
    kStylisticAltThirteenOnSelector = 26,
    kStylisticAltThirteenOffSelector = 27,
    kStylisticAltFourteenOnSelector = 28,
    kStylisticAltFourteenOffSelector = 29,
    kStylisticAltFifteenOnSelector = 30,
    kStylisticAltFifteenOffSelector = 31,
    kStylisticAltSixteenOnSelector = 32,
    kStylisticAltSixteenOffSelector = 33,
    kStylisticAltSeventeenOnSelector = 34,
    kStylisticAltSeventeenOffSelector = 35,
    kStylisticAltEighteenOnSelector = 36,
    kStylisticAltEighteenOffSelector = 37,
    kStylisticAltNineteenOnSelector = 38,
    kStylisticAltNineteenOffSelector = 39,
    kStylisticAltTwentyOnSelector = 40,
    kStylisticAltTwentyOffSelector = 41,
};

pub const __CTFontDescriptor = extern struct {};

pub const FontDescriptorRef = ?*__CTFontDescriptor;

extern "CoreText" fn CTFontDescriptorGetTypeID() callconv(.C) core_foundation.TypeID;
pub const fontDescriptorGetTypeID = CTFontDescriptorGetTypeID;

pub const FontOrientation = enum(objc.uint32_t) {
    kCTFontOrientationDefault = 0,
    kCTFontOrientationHorizontal = 1,
    kCTFontOrientationVertical = 2,
    kCTFontDefaultOrientation = 0,
    kCTFontHorizontalOrientation = 1,
    kCTFontVerticalOrientation = 2,
};

pub const FontFormat = enum(objc.uint32_t) {
    kCTFontFormatUnrecognized = 0,
    kCTFontFormatOpenTypePostScript = 1,
    kCTFontFormatOpenTypeTrueType = 2,
    kCTFontFormatTrueType = 3,
    kCTFontFormatPostScript = 4,
    kCTFontFormatBitmap = 5,
};

pub const anon2541 = enum(u32) {
    sizeof_sfntCMapSubHeader = 6,
};

pub const FontPriority = objc.uint32_t;

extern "CoreText" fn CTFontDescriptorCreateWithNameAndSize(name: core_foundation.StringRef, size: core_foundation.CGFloat) callconv(.C) FontDescriptorRef;
pub const fontDescriptorCreateWithNameAndSize = CTFontDescriptorCreateWithNameAndSize;

extern "CoreText" fn CTFontDescriptorCreateWithAttributes(attributes: core_foundation.DictionaryRef) callconv(.C) FontDescriptorRef;
pub const fontDescriptorCreateWithAttributes = CTFontDescriptorCreateWithAttributes;

extern "CoreText" fn CTFontDescriptorCreateCopyWithAttributes(original: FontDescriptorRef, attributes: core_foundation.DictionaryRef) callconv(.C) FontDescriptorRef;
pub const fontDescriptorCreateCopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes;

extern "CoreText" fn CTFontDescriptorCreateCopyWithFamily(original: FontDescriptorRef, family: core_foundation.StringRef) callconv(.C) FontDescriptorRef;
pub const fontDescriptorCreateCopyWithFamily = CTFontDescriptorCreateCopyWithFamily;

extern "CoreText" fn CTFontDescriptorCreateCopyWithSymbolicTraits(original: FontDescriptorRef, symTraitValue: FontSymbolicTraits, symTraitMask: FontSymbolicTraits) callconv(.C) FontDescriptorRef;
pub const fontDescriptorCreateCopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits;

extern "CoreText" fn CTFontDescriptorCreateCopyWithVariation(original: FontDescriptorRef, variationIdentifier: core_foundation.NumberRef, variationValue: core_foundation.CGFloat) callconv(.C) FontDescriptorRef;
pub const fontDescriptorCreateCopyWithVariation = CTFontDescriptorCreateCopyWithVariation;

extern "CoreText" fn CTFontDescriptorCreateCopyWithFeature(original: FontDescriptorRef, featureTypeIdentifier: core_foundation.NumberRef, featureSelectorIdentifier: core_foundation.NumberRef) callconv(.C) FontDescriptorRef;
pub const fontDescriptorCreateCopyWithFeature = CTFontDescriptorCreateCopyWithFeature;

extern "CoreText" fn CTFontDescriptorCreateMatchingFontDescriptors(descriptor: FontDescriptorRef, mandatoryAttributes: core_foundation.SetRef) callconv(.C) core_foundation.ArrayRef;
pub const fontDescriptorCreateMatchingFontDescriptors = CTFontDescriptorCreateMatchingFontDescriptors;

extern "CoreText" fn CTFontDescriptorCreateMatchingFontDescriptor(descriptor: FontDescriptorRef, mandatoryAttributes: core_foundation.SetRef) callconv(.C) FontDescriptorRef;
pub const fontDescriptorCreateMatchingFontDescriptor = CTFontDescriptorCreateMatchingFontDescriptor;

pub const FontDescriptorMatchingState = enum(objc.uint32_t) {
    kCTFontDescriptorMatchingDidBegin = 0,
    kCTFontDescriptorMatchingDidFinish = 1,
    kCTFontDescriptorMatchingWillBeginQuerying = 2,
    kCTFontDescriptorMatchingStalled = 3,
    kCTFontDescriptorMatchingWillBeginDownloading = 4,
    kCTFontDescriptorMatchingDownloading = 5,
    kCTFontDescriptorMatchingDidFinishDownloading = 6,
    kCTFontDescriptorMatchingDidMatch = 7,
    kCTFontDescriptorMatchingDidFailWithError = 8,
};

pub const FontDescriptorProgressHandler = *const fn (FontDescriptorMatchingState, core_foundation.DictionaryRef) callconv(.C) i32;

extern "CoreText" fn CTFontDescriptorMatchFontDescriptorsWithProgressHandler() callconv(.C) i32;
pub const fontDescriptorMatchFontDescriptorsWithProgressHandler = CTFontDescriptorMatchFontDescriptorsWithProgressHandler;

extern "CoreText" fn CTFontDescriptorCopyAttributes(descriptor: FontDescriptorRef) callconv(.C) core_foundation.DictionaryRef;
pub const fontDescriptorCopyAttributes = CTFontDescriptorCopyAttributes;

extern "CoreText" fn CTFontDescriptorCopyAttribute(descriptor: FontDescriptorRef, attribute: core_foundation.StringRef) callconv(.C) core_foundation.TypeRef;
pub const fontDescriptorCopyAttribute = CTFontDescriptorCopyAttribute;

extern "CoreText" fn CTFontDescriptorCopyLocalizedAttribute(descriptor: FontDescriptorRef, attribute: core_foundation.StringRef, language: ?*core_foundation.StringRef) callconv(.C) core_foundation.TypeRef;
pub const fontDescriptorCopyLocalizedAttribute = CTFontDescriptorCopyLocalizedAttribute;

pub const __CTFont = extern struct {};

pub const FontRef = ?*__CTFont;

extern "CoreText" fn CTFontGetTypeID() callconv(.C) core_foundation.TypeID;
pub const fontGetTypeID = CTFontGetTypeID;

extern "CoreText" fn CTFontCreateWithName(name: core_foundation.StringRef, size: core_foundation.CGFloat, matrix: ?*core_foundation.CGAffineTransform) callconv(.C) FontRef;
pub const fontCreateWithName = CTFontCreateWithName;

extern "CoreText" fn CTFontCreateWithFontDescriptor(descriptor: FontDescriptorRef, size: core_foundation.CGFloat, matrix: ?*core_foundation.CGAffineTransform) callconv(.C) FontRef;
pub const fontCreateWithFontDescriptor = CTFontCreateWithFontDescriptor;

pub const FontOptions = enum(core_foundation.OptionFlags) {
    kCTFontOptionsDefault = 0,
    kCTFontOptionsPreventAutoActivation = 1,
    kCTFontOptionsPreventAutoDownload = 2,
    kCTFontOptionsPreferSystemFont = 4,
};

extern "CoreText" fn CTFontCreateWithNameAndOptions(
    name: core_foundation.StringRef,
    size: core_foundation.CGFloat,
    matrix: ?*core_foundation.CGAffineTransform,
    options: FontOptions,
) callconv(.C) FontRef;
pub const fontCreateWithNameAndOptions = CTFontCreateWithNameAndOptions;

extern "CoreText" fn CTFontCreateWithFontDescriptorAndOptions(
    descriptor: FontDescriptorRef,
    size: core_foundation.CGFloat,
    matrix: ?*core_foundation.CGAffineTransform,
    options: FontOptions,
) callconv(.C) FontRef;
pub const fontCreateWithFontDescriptorAndOptions = CTFontCreateWithFontDescriptorAndOptions;

pub const FontUIFontType = enum(objc.uint32_t) {
    kCTFontUIFontNone = -1,
    kCTFontUIFontUser = 0,
    kCTFontUIFontUserFixedPitch = 1,
    kCTFontUIFontSystem = 2,
    kCTFontUIFontEmphasizedSystem = 3,
    kCTFontUIFontSmallSystem = 4,
    kCTFontUIFontSmallEmphasizedSystem = 5,
    kCTFontUIFontMiniSystem = 6,
    kCTFontUIFontMiniEmphasizedSystem = 7,
    kCTFontUIFontViews = 8,
    kCTFontUIFontApplication = 9,
    kCTFontUIFontLabel = 10,
    kCTFontUIFontMenuTitle = 11,
    kCTFontUIFontMenuItem = 12,
    kCTFontUIFontMenuItemMark = 13,
    kCTFontUIFontMenuItemCmdKey = 14,
    kCTFontUIFontWindowTitle = 15,
    kCTFontUIFontPushButton = 16,
    kCTFontUIFontUtilityWindowTitle = 17,
    kCTFontUIFontAlertHeader = 18,
    kCTFontUIFontSystemDetail = 19,
    kCTFontUIFontEmphasizedSystemDetail = 20,
    kCTFontUIFontToolbar = 21,
    kCTFontUIFontSmallToolbar = 22,
    kCTFontUIFontMessage = 23,
    kCTFontUIFontPalette = 24,
    kCTFontUIFontToolTip = 25,
    kCTFontUIFontControlContent = 26,
    kCTFontNoFontType = -1,
    kCTFontUserFontType = 0,
    kCTFontUserFixedPitchFontType = 1,
    kCTFontSystemFontType = 2,
    kCTFontEmphasizedSystemFontType = 3,
    kCTFontSmallSystemFontType = 4,
    kCTFontSmallEmphasizedSystemFontType = 5,
    kCTFontMiniSystemFontType = 6,
    kCTFontMiniEmphasizedSystemFontType = 7,
    kCTFontViewsFontType = 8,
    kCTFontApplicationFontType = 9,
    kCTFontLabelFontType = 10,
    kCTFontMenuTitleFontType = 11,
    kCTFontMenuItemFontType = 12,
    kCTFontMenuItemMarkFontType = 13,
    kCTFontMenuItemCmdKeyFontType = 14,
    kCTFontWindowTitleFontType = 15,
    kCTFontPushButtonFontType = 16,
    kCTFontUtilityWindowTitleFontType = 17,
    kCTFontAlertHeaderFontType = 18,
    kCTFontSystemDetailFontType = 19,
    kCTFontEmphasizedSystemDetailFontType = 20,
    kCTFontToolbarFontType = 21,
    kCTFontSmallToolbarFontType = 22,
    kCTFontMessageFontType = 23,
    kCTFontPaletteFontType = 24,
    kCTFontToolTipFontType = 25,
    kCTFontControlContentFontType = 26,
};

extern "CoreText" fn CTFontCreateUIFontForLanguage(uiType: FontUIFontType, size: core_foundation.CGFloat, language: core_foundation.StringRef) callconv(.C) FontRef;
pub const fontCreateUIFontForLanguage = CTFontCreateUIFontForLanguage;

extern "CoreText" fn CTFontCreateCopyWithAttributes(
    font: FontRef,
    size: core_foundation.CGFloat,
    matrix: ?*core_foundation.CGAffineTransform,
    attributes: FontDescriptorRef,
) callconv(.C) FontRef;
pub const fontCreateCopyWithAttributes = CTFontCreateCopyWithAttributes;

extern "CoreText" fn CTFontCreateCopyWithSymbolicTraits(
    font: FontRef,
    size: core_foundation.CGFloat,
    matrix: ?*core_foundation.CGAffineTransform,
    symTraitValue: FontSymbolicTraits,
    symTraitMask: FontSymbolicTraits,
) callconv(.C) FontRef;
pub const fontCreateCopyWithSymbolicTraits = CTFontCreateCopyWithSymbolicTraits;

extern "CoreText" fn CTFontCreateCopyWithFamily(
    font: FontRef,
    size: core_foundation.CGFloat,
    matrix: ?*core_foundation.CGAffineTransform,
    family: core_foundation.StringRef,
) callconv(.C) FontRef;
pub const fontCreateCopyWithFamily = CTFontCreateCopyWithFamily;

extern "CoreText" fn CTFontCreateForString(currentFont: FontRef, string: core_foundation.StringRef, range: core_foundation.Range) callconv(.C) FontRef;
pub const fontCreateForString = CTFontCreateForString;

extern "CoreText" fn CTFontCreateForStringWithLanguage(
    currentFont: FontRef,
    string: core_foundation.StringRef,
    range: core_foundation.Range,
    language: core_foundation.StringRef,
) callconv(.C) FontRef;
pub const fontCreateForStringWithLanguage = CTFontCreateForStringWithLanguage;

extern "CoreText" fn CTFontCopyFontDescriptor(font: FontRef) callconv(.C) FontDescriptorRef;
pub const fontCopyFontDescriptor = CTFontCopyFontDescriptor;

extern "CoreText" fn CTFontCopyAttribute(font: FontRef, attribute: core_foundation.StringRef) callconv(.C) core_foundation.TypeRef;
pub const fontCopyAttribute = CTFontCopyAttribute;

extern "CoreText" fn CTFontGetSize(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetSize = CTFontGetSize;

extern "CoreText" fn CTFontGetMatrix(font: FontRef) callconv(.C) core_foundation.CGAffineTransform;
pub const fontGetMatrix = CTFontGetMatrix;

extern "CoreText" fn CTFontGetSymbolicTraits(font: FontRef) callconv(.C) FontSymbolicTraits;
pub const fontGetSymbolicTraits = CTFontGetSymbolicTraits;

extern "CoreText" fn CTFontCopyTraits(font: FontRef) callconv(.C) core_foundation.DictionaryRef;
pub const fontCopyTraits = CTFontCopyTraits;

extern "CoreText" fn CTFontCopyDefaultCascadeListForLanguages(font: FontRef, languagePrefList: core_foundation.ArrayRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCopyDefaultCascadeListForLanguages = CTFontCopyDefaultCascadeListForLanguages;

extern "CoreText" fn CTFontCopyPostScriptName(font: FontRef) callconv(.C) core_foundation.StringRef;
pub const fontCopyPostScriptName = CTFontCopyPostScriptName;

extern "CoreText" fn CTFontCopyFamilyName(font: FontRef) callconv(.C) core_foundation.StringRef;
pub const fontCopyFamilyName = CTFontCopyFamilyName;

extern "CoreText" fn CTFontCopyFullName(font: FontRef) callconv(.C) core_foundation.StringRef;
pub const fontCopyFullName = CTFontCopyFullName;

extern "CoreText" fn CTFontCopyDisplayName(font: FontRef) callconv(.C) core_foundation.StringRef;
pub const fontCopyDisplayName = CTFontCopyDisplayName;

extern "CoreText" fn CTFontCopyName(font: FontRef, nameKey: core_foundation.StringRef) callconv(.C) core_foundation.StringRef;
pub const fontCopyName = CTFontCopyName;

extern "CoreText" fn CTFontCopyLocalizedName(font: FontRef, nameKey: core_foundation.StringRef, actualLanguage: ?*core_foundation.StringRef) callconv(.C) core_foundation.StringRef;
pub const fontCopyLocalizedName = CTFontCopyLocalizedName;

extern "CoreText" fn CTFontCopyCharacterSet(font: FontRef) callconv(.C) core_foundation.CharacterSetRef;
pub const fontCopyCharacterSet = CTFontCopyCharacterSet;

extern "CoreText" fn CTFontGetStringEncoding(font: FontRef) callconv(.C) core_foundation.StringEncoding;
pub const fontGetStringEncoding = CTFontGetStringEncoding;

extern "CoreText" fn CTFontCopySupportedLanguages(font: FontRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCopySupportedLanguages = CTFontCopySupportedLanguages;

extern "CoreText" fn CTFontGetGlyphsForCharacters() callconv(.C) i32;
pub const fontGetGlyphsForCharacters = CTFontGetGlyphsForCharacters;

extern "CoreText" fn CTFontGetAscent(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetAscent = CTFontGetAscent;

extern "CoreText" fn CTFontGetDescent(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetDescent = CTFontGetDescent;

extern "CoreText" fn CTFontGetLeading(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetLeading = CTFontGetLeading;

extern "CoreText" fn CTFontGetUnitsPerEm(font: FontRef) callconv(.C) u32;
pub const fontGetUnitsPerEm = CTFontGetUnitsPerEm;

extern "CoreText" fn CTFontGetGlyphCount(font: FontRef) callconv(.C) core_foundation.Index;
pub const fontGetGlyphCount = CTFontGetGlyphCount;

extern "CoreText" fn CTFontGetBoundingBox(font: FontRef) callconv(.C) core_foundation.CGRect;
pub const fontGetBoundingBox = CTFontGetBoundingBox;

extern "CoreText" fn CTFontGetUnderlinePosition(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetUnderlinePosition = CTFontGetUnderlinePosition;

extern "CoreText" fn CTFontGetUnderlineThickness(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetUnderlineThickness = CTFontGetUnderlineThickness;

extern "CoreText" fn CTFontGetSlantAngle(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetSlantAngle = CTFontGetSlantAngle;

extern "CoreText" fn CTFontGetCapHeight(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetCapHeight = CTFontGetCapHeight;

extern "CoreText" fn CTFontGetXHeight(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetXHeight = CTFontGetXHeight;

extern "CoreText" fn CTFontGetGlyphWithName(font: FontRef, glyphName: core_foundation.StringRef) callconv(.C) core_graphics.Glyph;
pub const fontGetGlyphWithName = CTFontGetGlyphWithName;

extern "CoreText" fn CTFontCopyNameForGlyph(font: FontRef, glyph: core_graphics.Glyph) callconv(.C) core_foundation.StringRef;
pub const fontCopyNameForGlyph = CTFontCopyNameForGlyph;

extern "CoreText" fn CTFontGetBoundingRectsForGlyphs(
    font: FontRef,
    orientation: FontOrientation,
    glyphs: ?*core_graphics.Glyph,
    boundingRects: ?*core_foundation.CGRect,
    count: core_foundation.Index,
) callconv(.C) core_foundation.CGRect;
pub const fontGetBoundingRectsForGlyphs = CTFontGetBoundingRectsForGlyphs;

extern "CoreText" fn CTFontGetOpticalBoundsForGlyphs(
    font: FontRef,
    glyphs: ?*core_graphics.Glyph,
    boundingRects: ?*core_foundation.CGRect,
    count: core_foundation.Index,
    options: core_foundation.OptionFlags,
) callconv(.C) core_foundation.CGRect;
pub const fontGetOpticalBoundsForGlyphs = CTFontGetOpticalBoundsForGlyphs;

extern "CoreText" fn CTFontGetAdvancesForGlyphs(
    font: FontRef,
    orientation: FontOrientation,
    glyphs: ?*core_graphics.Glyph,
    advances: ?*core_foundation.CGSize,
    count: core_foundation.Index,
) callconv(.C) f64;
pub const fontGetAdvancesForGlyphs = CTFontGetAdvancesForGlyphs;

extern "CoreText" fn CTFontGetVerticalTranslationsForGlyphs(
    font: FontRef,
    glyphs: ?*core_graphics.Glyph,
    translations: ?*core_foundation.CGSize,
    count: core_foundation.Index,
) callconv(.C) void;
pub const fontGetVerticalTranslationsForGlyphs = CTFontGetVerticalTranslationsForGlyphs;

extern "CoreText" fn CTFontCreatePathForGlyph(font: FontRef, glyph: core_graphics.Glyph, matrix: ?*core_foundation.CGAffineTransform) callconv(.C) core_graphics.PathRef;
pub const fontCreatePathForGlyph = CTFontCreatePathForGlyph;

extern "CoreText" fn CTFontCopyVariationAxes(font: FontRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCopyVariationAxes = CTFontCopyVariationAxes;

extern "CoreText" fn CTFontCopyVariation(font: FontRef) callconv(.C) core_foundation.DictionaryRef;
pub const fontCopyVariation = CTFontCopyVariation;

extern "CoreText" fn CTFontCopyFeatures(font: FontRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCopyFeatures = CTFontCopyFeatures;

extern "CoreText" fn CTFontCopyFeatureSettings(font: FontRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCopyFeatureSettings = CTFontCopyFeatureSettings;

extern "CoreText" fn CTFontCopyGraphicsFont(font: FontRef, attributes: ?*FontDescriptorRef) callconv(.C) core_graphics.FontRef;
pub const fontCopyGraphicsFont = CTFontCopyGraphicsFont;

extern "CoreText" fn CTFontCreateWithGraphicsFont(
    graphicsFont: core_graphics.FontRef,
    size: core_foundation.CGFloat,
    matrix: ?*core_foundation.CGAffineTransform,
    attributes: FontDescriptorRef,
) callconv(.C) FontRef;
pub const fontCreateWithGraphicsFont = CTFontCreateWithGraphicsFont;

pub const ATSFontRef = objc.UInt32;

extern "CoreText" fn CTFontGetPlatformFont(font: FontRef, attributes: ?*FontDescriptorRef) callconv(.C) ATSFontRef;
pub const fontGetPlatformFont = CTFontGetPlatformFont;

extern "CoreText" fn CTFontCreateWithPlatformFont(
    platformFont: ATSFontRef,
    size: core_foundation.CGFloat,
    matrix: ?*core_foundation.CGAffineTransform,
    attributes: FontDescriptorRef,
) callconv(.C) FontRef;
pub const fontCreateWithPlatformFont = CTFontCreateWithPlatformFont;

extern "CoreText" fn CTFontCreateWithQuickdrawInstance(
    name: objc.ConstStr255Param,
    identifier: objc.int16_t,
    style: objc.uint8_t,
    size: core_foundation.CGFloat,
) callconv(.C) FontRef;
pub const fontCreateWithQuickdrawInstance = CTFontCreateWithQuickdrawInstance;

pub const anon14481 = enum(u32) {
    kCTFontTableBASE = 1111577413,
    kCTFontTableCBDT = 1128416340,
    kCTFontTableCBLC = 1128418371,
    kCTFontTableCFF = 1128678944,
    kCTFontTableCFF2 = 1128678962,
    kCTFontTableCOLR = 1129270354,
    kCTFontTableCPAL = 1129333068,
    kCTFontTableDSIG = 1146308935,
    kCTFontTableEBDT = 1161970772,
    kCTFontTableEBLC = 1161972803,
    kCTFontTableEBSC = 1161974595,
    kCTFontTableGDEF = 1195656518,
    kCTFontTableGPOS = 1196445523,
    kCTFontTableGSUB = 1196643650,
    kCTFontTableHVAR = 1213612370,
    kCTFontTableJSTF = 1246975046,
    kCTFontTableLTSH = 1280594760,
    kCTFontTableMATH = 1296127048,
    kCTFontTableMERG = 1296388679,
    kCTFontTableMVAR = 1297498450,
    kCTFontTableOS2 = 1330851634,
    kCTFontTablePCLT = 1346587732,
    kCTFontTableSTAT = 1398030676,
    kCTFontTableSVG = 1398163232,
    kCTFontTableVDMX = 1447316824,
    kCTFontTableVORG = 1448038983,
    kCTFontTableVVAR = 1448493394,
    kCTFontTableZapf = 1516335206,
    kCTFontTableAcnt = 1633906292,
    kCTFontTableAnkr = 1634626418,
    kCTFontTableAvar = 1635148146,
    kCTFontTableBdat = 1650745716,
    kCTFontTableBhed = 1651008868,
    kCTFontTableBloc = 1651273571,
    kCTFontTableBsln = 1651731566,
    kCTFontTableCidg = 1667851367,
    kCTFontTableCmap = 1668112752,
    kCTFontTableCvar = 1668702578,
    kCTFontTableCvt = 1668707360,
    kCTFontTableFdsc = 1717859171,
    kCTFontTableFeat = 1717920116,
    kCTFontTableFmtx = 1718449272,
    kCTFontTableFond = 1718578788,
    kCTFontTableFpgm = 1718642541,
    kCTFontTableFvar = 1719034226,
    kCTFontTableGasp = 1734439792,
    kCTFontTableGlyf = 1735162214,
    kCTFontTableGvar = 1735811442,
    kCTFontTableHdmx = 1751412088,
    kCTFontTableHead = 1751474532,
    kCTFontTableHhea = 1751672161,
    kCTFontTableHmtx = 1752003704,
    kCTFontTableHsty = 1752396921,
    kCTFontTableJust = 1786082164,
    kCTFontTableKern = 1801810542,
    kCTFontTableKerx = 1801810552,
    kCTFontTableLcar = 1818452338,
    kCTFontTableLoca = 1819239265,
    kCTFontTableLtag = 1819566439,
    kCTFontTableMaxp = 1835104368,
    kCTFontTableMeta = 1835365473,
    kCTFontTableMort = 1836020340,
    kCTFontTableMorx = 1836020344,
    kCTFontTableName = 1851878757,
    kCTFontTableOpbd = 1869636196,
    kCTFontTablePost = 1886352244,
    kCTFontTablePrep = 1886545264,
    kCTFontTableProp = 1886547824,
    kCTFontTableSbit = 1935829364,
    kCTFontTableSbix = 1935829368,
    kCTFontTableTrak = 1953653099,
    kCTFontTableVhea = 1986553185,
    kCTFontTableVmtx = 1986884728,
    kCTFontTableXref = 2020762982,
};

pub const FontTableTag = objc.FourCharCode;

pub const FontTableOptions = enum(objc.uint32_t) {
    kCTFontTableOptionNoOptions = 0,
    kCTFontTableOptionExcludeSynthetic = 1,
};

extern "CoreText" fn CTFontCopyAvailableTables(font: FontRef, options: FontTableOptions) callconv(.C) core_foundation.ArrayRef;
pub const fontCopyAvailableTables = CTFontCopyAvailableTables;

extern "CoreText" fn CTFontHasTable() callconv(.C) i32;
pub const fontHasTable = CTFontHasTable;

extern "CoreText" fn CTFontCopyTable(font: FontRef, table: FontTableTag, options: FontTableOptions) callconv(.C) core_foundation.DataRef;
pub const fontCopyTable = CTFontCopyTable;

extern "CoreText" fn CTFontDrawGlyphs(
    font: FontRef,
    glyphs: ?*core_graphics.Glyph,
    positions: ?*core_foundation.CGPoint,
    count: objc.size_t,
    context: core_graphics.ContextRef,
) callconv(.C) void;
pub const fontDrawGlyphs = CTFontDrawGlyphs;

extern "CoreText" fn CTFontGetLigatureCaretPositions(
    font: FontRef,
    glyph: core_graphics.Glyph,
    positions: ?*core_foundation.CGFloat,
    maxPositions: core_foundation.Index,
) callconv(.C) core_foundation.Index;
pub const fontGetLigatureCaretPositions = CTFontGetLigatureCaretPositions;

extern "CoreText" fn CTFontGetTypographicBoundsForAdaptiveImageProvider(font: FontRef, provider: ?*anyopaque) callconv(.C) core_foundation.CGRect;
pub const fontGetTypographicBoundsForAdaptiveImageProvider = CTFontGetTypographicBoundsForAdaptiveImageProvider;

extern "CoreText" fn CTFontDrawImageFromAdaptiveImageProviderAtPoint(
    font: FontRef,
    provider: ?*anyopaque,
    point: core_foundation.CGPoint,
    context: core_graphics.ContextRef,
) callconv(.C) void;
pub const fontDrawImageFromAdaptiveImageProviderAtPoint = CTFontDrawImageFromAdaptiveImageProviderAtPoint;

pub const __CTFontCollection = extern struct {};

pub const FontCollectionRef = ?*__CTFontCollection;

pub const MutableFontCollectionRef = ?*__CTFontCollection;

extern "CoreText" fn CTFontCollectionGetTypeID() callconv(.C) core_foundation.TypeID;
pub const fontCollectionGetTypeID = CTFontCollectionGetTypeID;

pub const FontCollectionSortDescriptorsCallback = ?*const fn (FontDescriptorRef, FontDescriptorRef, ?*anyopaque) callconv(.C) core_foundation.ComparisonResult;

extern "CoreText" fn CTFontCollectionCreateFromAvailableFonts(options: core_foundation.DictionaryRef) callconv(.C) FontCollectionRef;
pub const fontCollectionCreateFromAvailableFonts = CTFontCollectionCreateFromAvailableFonts;

extern "CoreText" fn CTFontCollectionCreateWithFontDescriptors(queryDescriptors: core_foundation.ArrayRef, options: core_foundation.DictionaryRef) callconv(.C) FontCollectionRef;
pub const fontCollectionCreateWithFontDescriptors = CTFontCollectionCreateWithFontDescriptors;

extern "CoreText" fn CTFontCollectionCreateCopyWithFontDescriptors(original: FontCollectionRef, queryDescriptors: core_foundation.ArrayRef, options: core_foundation.DictionaryRef) callconv(.C) FontCollectionRef;
pub const fontCollectionCreateCopyWithFontDescriptors = CTFontCollectionCreateCopyWithFontDescriptors;

extern "CoreText" fn CTFontCollectionCreateMutableCopy(original: FontCollectionRef) callconv(.C) MutableFontCollectionRef;
pub const fontCollectionCreateMutableCopy = CTFontCollectionCreateMutableCopy;

extern "CoreText" fn CTFontCollectionCopyQueryDescriptors(collection: FontCollectionRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCollectionCopyQueryDescriptors = CTFontCollectionCopyQueryDescriptors;

extern "CoreText" fn CTFontCollectionSetQueryDescriptors(collection: MutableFontCollectionRef, descriptors: core_foundation.ArrayRef) callconv(.C) void;
pub const fontCollectionSetQueryDescriptors = CTFontCollectionSetQueryDescriptors;

extern "CoreText" fn CTFontCollectionCopyExclusionDescriptors(collection: FontCollectionRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCollectionCopyExclusionDescriptors = CTFontCollectionCopyExclusionDescriptors;

extern "CoreText" fn CTFontCollectionSetExclusionDescriptors(collection: MutableFontCollectionRef, descriptors: core_foundation.ArrayRef) callconv(.C) void;
pub const fontCollectionSetExclusionDescriptors = CTFontCollectionSetExclusionDescriptors;

extern "CoreText" fn CTFontCollectionCreateMatchingFontDescriptors(collection: FontCollectionRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCollectionCreateMatchingFontDescriptors = CTFontCollectionCreateMatchingFontDescriptors;

extern "CoreText" fn CTFontCollectionCreateMatchingFontDescriptorsSortedWithCallback(collection: FontCollectionRef, sortCallback: FontCollectionSortDescriptorsCallback, refCon: ?*anyopaque) callconv(.C) core_foundation.ArrayRef;
pub const fontCollectionCreateMatchingFontDescriptorsSortedWithCallback = CTFontCollectionCreateMatchingFontDescriptorsSortedWithCallback;

extern "CoreText" fn CTFontCollectionCreateMatchingFontDescriptorsWithOptions(collection: FontCollectionRef, options: core_foundation.DictionaryRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCollectionCreateMatchingFontDescriptorsWithOptions = CTFontCollectionCreateMatchingFontDescriptorsWithOptions;

extern "CoreText" fn CTFontCollectionCreateMatchingFontDescriptorsForFamily(collection: FontCollectionRef, familyName: core_foundation.StringRef, options: core_foundation.DictionaryRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCollectionCreateMatchingFontDescriptorsForFamily = CTFontCollectionCreateMatchingFontDescriptorsForFamily;

pub const FontCollectionCopyOptions = enum(objc.uint32_t) {
    kCTFontCollectionCopyDefaultOptions = 0,
    kCTFontCollectionCopyUnique = 1,
    kCTFontCollectionCopyStandardSort = 2,
};

extern "CoreText" fn CTFontCollectionCopyFontAttribute(collection: FontCollectionRef, attributeName: core_foundation.StringRef, options: FontCollectionCopyOptions) callconv(.C) core_foundation.ArrayRef;
pub const fontCollectionCopyFontAttribute = CTFontCollectionCopyFontAttribute;

extern "CoreText" fn CTFontCollectionCopyFontAttributes(collection: FontCollectionRef, attributeNames: core_foundation.SetRef, options: FontCollectionCopyOptions) callconv(.C) core_foundation.ArrayRef;
pub const fontCollectionCopyFontAttributes = CTFontCollectionCopyFontAttributes;

pub const FontManagerError = enum(core_foundation.Index) {
    kCTFontManagerErrorFileNotFound = 101,
    kCTFontManagerErrorInsufficientPermissions = 102,
    kCTFontManagerErrorUnrecognizedFormat = 103,
    kCTFontManagerErrorInvalidFontData = 104,
    kCTFontManagerErrorAlreadyRegistered = 105,
    kCTFontManagerErrorExceededResourceLimit = 106,
    kCTFontManagerErrorAssetNotFound = 107,
    kCTFontManagerErrorNotRegistered = 201,
    kCTFontManagerErrorInUse = 202,
    kCTFontManagerErrorSystemRequired = 203,
    kCTFontManagerErrorRegistrationFailed = 301,
    kCTFontManagerErrorMissingEntitlement = 302,
    kCTFontManagerErrorInsufficientInfo = 303,
    kCTFontManagerErrorCancelledByUser = 304,
    kCTFontManagerErrorDuplicatedName = 305,
    kCTFontManagerErrorInvalidFilePath = 306,
    kCTFontManagerErrorUnsupportedScope = 307,
};

extern "CoreText" fn CTFontManagerCopyAvailablePostScriptNames() callconv(.C) core_foundation.ArrayRef;
pub const fontManagerCopyAvailablePostScriptNames = CTFontManagerCopyAvailablePostScriptNames;

extern "CoreText" fn CTFontManagerCopyAvailableFontFamilyNames() callconv(.C) core_foundation.ArrayRef;
pub const fontManagerCopyAvailableFontFamilyNames = CTFontManagerCopyAvailableFontFamilyNames;

extern "CoreText" fn CTFontManagerCopyAvailableFontURLs() callconv(.C) core_foundation.ArrayRef;
pub const fontManagerCopyAvailableFontURLs = CTFontManagerCopyAvailableFontURLs;

extern "CoreText" fn CTFontManagerCompareFontFamilyNames(family1: ?*anyopaque, family2: ?*anyopaque, context: ?*anyopaque) callconv(.C) core_foundation.ComparisonResult;
pub const fontManagerCompareFontFamilyNames = CTFontManagerCompareFontFamilyNames;

extern "CoreText" fn CTFontManagerCreateFontDescriptorsFromURL(fileURL: core_foundation.URLRef) callconv(.C) core_foundation.ArrayRef;
pub const fontManagerCreateFontDescriptorsFromURL = CTFontManagerCreateFontDescriptorsFromURL;

extern "CoreText" fn CTFontManagerCreateFontDescriptorFromData(data: core_foundation.DataRef) callconv(.C) FontDescriptorRef;
pub const fontManagerCreateFontDescriptorFromData = CTFontManagerCreateFontDescriptorFromData;

extern "CoreText" fn CTFontManagerCreateFontDescriptorsFromData(data: core_foundation.DataRef) callconv(.C) core_foundation.ArrayRef;
pub const fontManagerCreateFontDescriptorsFromData = CTFontManagerCreateFontDescriptorsFromData;

pub const FontManagerScope = enum(objc.uint32_t) {
    kCTFontManagerScopeNone = 0,
    kCTFontManagerScopeProcess = 1,
    kCTFontManagerScopePersistent = 2,
    kCTFontManagerScopeSession = 3,
    kCTFontManagerScopeUser = 2,
};

extern "CoreText" fn CTFontManagerRegisterFontsForURL() callconv(.C) i32;
pub const fontManagerRegisterFontsForURL = CTFontManagerRegisterFontsForURL;

extern "CoreText" fn CTFontManagerUnregisterFontsForURL() callconv(.C) i32;
pub const fontManagerUnregisterFontsForURL = CTFontManagerUnregisterFontsForURL;

extern "CoreText" fn CTFontManagerRegisterGraphicsFont() callconv(.C) i32;
pub const fontManagerRegisterGraphicsFont = CTFontManagerRegisterGraphicsFont;

extern "CoreText" fn CTFontManagerUnregisterGraphicsFont() callconv(.C) i32;
pub const fontManagerUnregisterGraphicsFont = CTFontManagerUnregisterGraphicsFont;

extern "CoreText" fn CTFontManagerRegisterFontsForURLs() callconv(.C) i32;
pub const fontManagerRegisterFontsForURLs = CTFontManagerRegisterFontsForURLs;

extern "CoreText" fn CTFontManagerUnregisterFontsForURLs() callconv(.C) i32;
pub const fontManagerUnregisterFontsForURLs = CTFontManagerUnregisterFontsForURLs;

extern "CoreText" fn CTFontManagerRegisterFontURLs(
    fontURLs: core_foundation.ArrayRef,
    scope: FontManagerScope,
    enabled: objc.bool,
    registrationHandler: *const fn (core_foundation.ArrayRef, objc.bool) callconv(.C) i32,
) callconv(.C) void;
pub const fontManagerRegisterFontURLs = CTFontManagerRegisterFontURLs;

extern "CoreText" fn CTFontManagerUnregisterFontURLs(fontURLs: core_foundation.ArrayRef, scope: FontManagerScope, registrationHandler: *const fn (core_foundation.ArrayRef, objc.bool) callconv(.C) i32) callconv(.C) void;
pub const fontManagerUnregisterFontURLs = CTFontManagerUnregisterFontURLs;

extern "CoreText" fn CTFontManagerRegisterFontDescriptors(
    fontDescriptors: core_foundation.ArrayRef,
    scope: FontManagerScope,
    enabled: objc.bool,
    registrationHandler: *const fn (core_foundation.ArrayRef, objc.bool) callconv(.C) i32,
) callconv(.C) void;
pub const fontManagerRegisterFontDescriptors = CTFontManagerRegisterFontDescriptors;

extern "CoreText" fn CTFontManagerUnregisterFontDescriptors(fontDescriptors: core_foundation.ArrayRef, scope: FontManagerScope, registrationHandler: *const fn (core_foundation.ArrayRef, objc.bool) callconv(.C) i32) callconv(.C) void;
pub const fontManagerUnregisterFontDescriptors = CTFontManagerUnregisterFontDescriptors;

extern "CoreText" fn CTFontManagerRegisterFontsWithAssetNames(
    fontAssetNames: core_foundation.ArrayRef,
    bundle: core_foundation.BundleRef,
    scope: FontManagerScope,
    enabled: objc.bool,
    registrationHandler: *const fn (core_foundation.ArrayRef, objc.bool) callconv(.C) i32,
) callconv(.C) void;
pub const fontManagerRegisterFontsWithAssetNames = CTFontManagerRegisterFontsWithAssetNames;

extern "CoreText" fn CTFontManagerEnableFontDescriptors(descriptors: core_foundation.ArrayRef, enable: objc.bool) callconv(.C) void;
pub const fontManagerEnableFontDescriptors = CTFontManagerEnableFontDescriptors;

extern "CoreText" fn CTFontManagerGetScopeForURL(fontURL: core_foundation.URLRef) callconv(.C) FontManagerScope;
pub const fontManagerGetScopeForURL = CTFontManagerGetScopeForURL;

extern "CoreText" fn CTFontManagerCopyRegisteredFontDescriptors(scope: FontManagerScope, enabled: objc.bool) callconv(.C) core_foundation.ArrayRef;
pub const fontManagerCopyRegisteredFontDescriptors = CTFontManagerCopyRegisteredFontDescriptors;

extern "CoreText" fn CTFontManagerRequestFonts(fontDescriptors: core_foundation.ArrayRef, completionHandler: *const fn (core_foundation.ArrayRef) callconv(.C) void) callconv(.C) void;
pub const fontManagerRequestFonts = CTFontManagerRequestFonts;

extern "CoreText" fn CTFontManagerIsSupportedFont() callconv(.C) i32;
pub const fontManagerIsSupportedFont = CTFontManagerIsSupportedFont;

extern "CoreText" fn CTFontManagerCreateFontRequestRunLoopSource(sourceOrder: core_foundation.Index, createMatchesCallback: *const fn (core_foundation.DictionaryRef, objc.pid_t) callconv(.C) core_foundation.ArrayRef) callconv(.C) core_foundation.RunLoopSourceRef;
pub const fontManagerCreateFontRequestRunLoopSource = CTFontManagerCreateFontRequestRunLoopSource;

pub const FontManagerAutoActivationSetting = enum(objc.uint32_t) {
    kCTFontManagerAutoActivationDefault = 0,
    kCTFontManagerAutoActivationDisabled = 1,
    kCTFontManagerAutoActivationEnabled = 2,
    kCTFontManagerAutoActivationPromptUser = 3,
};

extern "CoreText" fn CTFontManagerSetAutoActivationSetting(bundleIdentifier: core_foundation.StringRef, setting: FontManagerAutoActivationSetting) callconv(.C) void;
pub const fontManagerSetAutoActivationSetting = CTFontManagerSetAutoActivationSetting;

extern "CoreText" fn CTFontManagerGetAutoActivationSetting(bundleIdentifier: core_foundation.StringRef) callconv(.C) FontManagerAutoActivationSetting;
pub const fontManagerGetAutoActivationSetting = CTFontManagerGetAutoActivationSetting;

pub const __CTFrame = extern struct {};

pub const FrameRef = ?*__CTFrame;

extern "CoreText" fn CTFrameGetTypeID() callconv(.C) core_foundation.TypeID;
pub const frameGetTypeID = CTFrameGetTypeID;

pub const FrameProgression = enum(objc.uint32_t) {
    kCTFrameProgressionTopToBottom = 0,
    kCTFrameProgressionRightToLeft = 1,
    kCTFrameProgressionLeftToRight = 2,
};

pub const FramePathFillRule = enum(objc.uint32_t) {
    kCTFramePathFillEvenOdd = 0,
    kCTFramePathFillWindingNumber = 1,
};

extern "CoreText" fn CTFrameGetStringRange(frame: FrameRef) callconv(.C) core_foundation.Range;
pub const frameGetStringRange = CTFrameGetStringRange;

extern "CoreText" fn CTFrameGetVisibleStringRange(frame: FrameRef) callconv(.C) core_foundation.Range;
pub const frameGetVisibleStringRange = CTFrameGetVisibleStringRange;

extern "CoreText" fn CTFrameGetPath(frame: FrameRef) callconv(.C) core_graphics.PathRef;
pub const frameGetPath = CTFrameGetPath;

extern "CoreText" fn CTFrameGetFrameAttributes(frame: FrameRef) callconv(.C) core_foundation.DictionaryRef;
pub const frameGetFrameAttributes = CTFrameGetFrameAttributes;

extern "CoreText" fn CTFrameGetLines(frame: FrameRef) callconv(.C) core_foundation.ArrayRef;
pub const frameGetLines = CTFrameGetLines;

extern "CoreText" fn CTFrameGetLineOrigins(frame: FrameRef, range: core_foundation.Range, origins: ?*core_foundation.CGPoint) callconv(.C) void;
pub const frameGetLineOrigins = CTFrameGetLineOrigins;

extern "CoreText" fn CTFrameDraw(frame: FrameRef, context: core_graphics.ContextRef) callconv(.C) void;
pub const frameDraw = CTFrameDraw;

pub const __CTLine = extern struct {};

pub const LineRef = ?*__CTLine;

pub const LineBoundsOptions = enum(core_foundation.OptionFlags) {
    kCTLineBoundsExcludeTypographicLeading = 1,
    kCTLineBoundsExcludeTypographicShifts = 2,
    kCTLineBoundsUseHangingPunctuation = 4,
    kCTLineBoundsUseGlyphPathBounds = 8,
    kCTLineBoundsUseOpticalBounds = 16,
    kCTLineBoundsIncludeLanguageExtents = 32,
};

pub const LineTruncationType = enum(objc.uint32_t) {
    kCTLineTruncationStart = 0,
    kCTLineTruncationEnd = 1,
    kCTLineTruncationMiddle = 2,
};

extern "CoreText" fn CTLineGetTypeID() callconv(.C) core_foundation.TypeID;
pub const lineGetTypeID = CTLineGetTypeID;

extern "CoreText" fn CTLineCreateWithAttributedString(attrString: core_foundation.AttributedStringRef) callconv(.C) LineRef;
pub const lineCreateWithAttributedString = CTLineCreateWithAttributedString;

extern "CoreText" fn CTLineCreateTruncatedLine(
    line: LineRef,
    width: f64,
    truncationType: LineTruncationType,
    truncationToken: LineRef,
) callconv(.C) LineRef;
pub const lineCreateTruncatedLine = CTLineCreateTruncatedLine;

extern "CoreText" fn CTLineCreateJustifiedLine(line: LineRef, justificationFactor: core_foundation.CGFloat, justificationWidth: f64) callconv(.C) LineRef;
pub const lineCreateJustifiedLine = CTLineCreateJustifiedLine;

extern "CoreText" fn CTLineGetGlyphCount(line: LineRef) callconv(.C) core_foundation.Index;
pub const lineGetGlyphCount = CTLineGetGlyphCount;

extern "CoreText" fn CTLineGetGlyphRuns(line: LineRef) callconv(.C) core_foundation.ArrayRef;
pub const lineGetGlyphRuns = CTLineGetGlyphRuns;

extern "CoreText" fn CTLineGetStringRange(line: LineRef) callconv(.C) core_foundation.Range;
pub const lineGetStringRange = CTLineGetStringRange;

extern "CoreText" fn CTLineGetPenOffsetForFlush(line: LineRef, flushFactor: core_foundation.CGFloat, flushWidth: f64) callconv(.C) f64;
pub const lineGetPenOffsetForFlush = CTLineGetPenOffsetForFlush;

extern "CoreText" fn CTLineDraw(line: LineRef, context: core_graphics.ContextRef) callconv(.C) void;
pub const lineDraw = CTLineDraw;

extern "CoreText" fn CTLineGetTypographicBounds(
    line: LineRef,
    ascent: ?*core_foundation.CGFloat,
    descent: ?*core_foundation.CGFloat,
    leading: ?*core_foundation.CGFloat,
) callconv(.C) f64;
pub const lineGetTypographicBounds = CTLineGetTypographicBounds;

extern "CoreText" fn CTLineGetBoundsWithOptions(line: LineRef, options: LineBoundsOptions) callconv(.C) core_foundation.CGRect;
pub const lineGetBoundsWithOptions = CTLineGetBoundsWithOptions;

extern "CoreText" fn CTLineGetTrailingWhitespaceWidth(line: LineRef) callconv(.C) f64;
pub const lineGetTrailingWhitespaceWidth = CTLineGetTrailingWhitespaceWidth;

extern "CoreText" fn CTLineGetImageBounds(line: LineRef, context: core_graphics.ContextRef) callconv(.C) core_foundation.CGRect;
pub const lineGetImageBounds = CTLineGetImageBounds;

extern "CoreText" fn CTLineGetStringIndexForPosition(line: LineRef, position: core_foundation.CGPoint) callconv(.C) core_foundation.Index;
pub const lineGetStringIndexForPosition = CTLineGetStringIndexForPosition;

extern "CoreText" fn CTLineGetOffsetForStringIndex(line: LineRef, charIndex: core_foundation.Index, secondaryOffset: ?*core_foundation.CGFloat) callconv(.C) core_foundation.CGFloat;
pub const lineGetOffsetForStringIndex = CTLineGetOffsetForStringIndex;

extern "CoreText" fn CTLineEnumerateCaretOffsets(line: LineRef, block: *const fn (
    f64,
    core_foundation.Index,
    objc.bool,
    ?*objc.bool,
) callconv(.C) void) callconv(.C) void;
pub const lineEnumerateCaretOffsets = CTLineEnumerateCaretOffsets;

pub const __CTTypesetter = extern struct {};

pub const TypesetterRef = ?*__CTTypesetter;

extern "CoreText" fn CTTypesetterGetTypeID() callconv(.C) core_foundation.TypeID;
pub const typesetterGetTypeID = CTTypesetterGetTypeID;

extern "CoreText" fn CTTypesetterCreateWithAttributedString(string: core_foundation.AttributedStringRef) callconv(.C) TypesetterRef;
pub const typesetterCreateWithAttributedString = CTTypesetterCreateWithAttributedString;

extern "CoreText" fn CTTypesetterCreateWithAttributedStringAndOptions(string: core_foundation.AttributedStringRef, options: core_foundation.DictionaryRef) callconv(.C) TypesetterRef;
pub const typesetterCreateWithAttributedStringAndOptions = CTTypesetterCreateWithAttributedStringAndOptions;

extern "CoreText" fn CTTypesetterCreateLineWithOffset(typesetter: TypesetterRef, stringRange: core_foundation.Range, offset: f64) callconv(.C) LineRef;
pub const typesetterCreateLineWithOffset = CTTypesetterCreateLineWithOffset;

extern "CoreText" fn CTTypesetterCreateLine(typesetter: TypesetterRef, stringRange: core_foundation.Range) callconv(.C) LineRef;
pub const typesetterCreateLine = CTTypesetterCreateLine;

extern "CoreText" fn CTTypesetterSuggestLineBreakWithOffset(
    typesetter: TypesetterRef,
    startIndex: core_foundation.Index,
    width: f64,
    offset: f64,
) callconv(.C) core_foundation.Index;
pub const typesetterSuggestLineBreakWithOffset = CTTypesetterSuggestLineBreakWithOffset;

extern "CoreText" fn CTTypesetterSuggestLineBreak(typesetter: TypesetterRef, startIndex: core_foundation.Index, width: f64) callconv(.C) core_foundation.Index;
pub const typesetterSuggestLineBreak = CTTypesetterSuggestLineBreak;

extern "CoreText" fn CTTypesetterSuggestClusterBreakWithOffset(
    typesetter: TypesetterRef,
    startIndex: core_foundation.Index,
    width: f64,
    offset: f64,
) callconv(.C) core_foundation.Index;
pub const typesetterSuggestClusterBreakWithOffset = CTTypesetterSuggestClusterBreakWithOffset;

extern "CoreText" fn CTTypesetterSuggestClusterBreak(typesetter: TypesetterRef, startIndex: core_foundation.Index, width: f64) callconv(.C) core_foundation.Index;
pub const typesetterSuggestClusterBreak = CTTypesetterSuggestClusterBreak;

pub const __CTFramesetter = extern struct {};

pub const FramesetterRef = ?*__CTFramesetter;

extern "CoreText" fn CTFramesetterGetTypeID() callconv(.C) core_foundation.TypeID;
pub const framesetterGetTypeID = CTFramesetterGetTypeID;

extern "CoreText" fn CTFramesetterCreateWithTypesetter(typesetter: TypesetterRef) callconv(.C) FramesetterRef;
pub const framesetterCreateWithTypesetter = CTFramesetterCreateWithTypesetter;

extern "CoreText" fn CTFramesetterCreateWithAttributedString(attrString: core_foundation.AttributedStringRef) callconv(.C) FramesetterRef;
pub const framesetterCreateWithAttributedString = CTFramesetterCreateWithAttributedString;

extern "CoreText" fn CTFramesetterCreateFrame(
    framesetter: FramesetterRef,
    stringRange: core_foundation.Range,
    path: core_graphics.PathRef,
    frameAttributes: core_foundation.DictionaryRef,
) callconv(.C) FrameRef;
pub const framesetterCreateFrame = CTFramesetterCreateFrame;

extern "CoreText" fn CTFramesetterGetTypesetter(framesetter: FramesetterRef) callconv(.C) TypesetterRef;
pub const framesetterGetTypesetter = CTFramesetterGetTypesetter;

extern "CoreText" fn CTFramesetterSuggestFrameSizeWithConstraints(
    framesetter: FramesetterRef,
    stringRange: core_foundation.Range,
    frameAttributes: core_foundation.DictionaryRef,
    constraints: core_foundation.CGSize,
    fitRange: ?*core_foundation.Range,
) callconv(.C) core_foundation.CGSize;
pub const framesetterSuggestFrameSizeWithConstraints = CTFramesetterSuggestFrameSizeWithConstraints;

pub const __CTGlyphInfo = extern struct {};

pub const GlyphInfoRef = ?*__CTGlyphInfo;

extern "CoreText" fn CTGlyphInfoGetTypeID() callconv(.C) core_foundation.TypeID;
pub const glyphInfoGetTypeID = CTGlyphInfoGetTypeID;

pub const CharacterCollection = enum(objc.uint16_t) {
    kCTCharacterCollectionIdentityMapping = 0,
    kCTCharacterCollectionAdobeCNS1 = 1,
    kCTCharacterCollectionAdobeGB1 = 2,
    kCTCharacterCollectionAdobeJapan1 = 3,
    kCTCharacterCollectionAdobeJapan2 = 4,
    kCTCharacterCollectionAdobeKorea1 = 5,
    kCTIdentityMappingCharacterCollection = 0,
    kCTAdobeCNS1CharacterCollection = 1,
    kCTAdobeGB1CharacterCollection = 2,
    kCTAdobeJapan1CharacterCollection = 3,
    kCTAdobeJapan2CharacterCollection = 4,
    kCTAdobeKorea1CharacterCollection = 5,
};

extern "CoreText" fn CTGlyphInfoCreateWithGlyphName(glyphName: core_foundation.StringRef, font: FontRef, baseString: core_foundation.StringRef) callconv(.C) GlyphInfoRef;
pub const glyphInfoCreateWithGlyphName = CTGlyphInfoCreateWithGlyphName;

extern "CoreText" fn CTGlyphInfoCreateWithGlyph(glyph: core_graphics.Glyph, font: FontRef, baseString: core_foundation.StringRef) callconv(.C) GlyphInfoRef;
pub const glyphInfoCreateWithGlyph = CTGlyphInfoCreateWithGlyph;

extern "CoreText" fn CTGlyphInfoCreateWithCharacterIdentifier(cid: core_graphics.FontIndex, collection: CharacterCollection, baseString: core_foundation.StringRef) callconv(.C) GlyphInfoRef;
pub const glyphInfoCreateWithCharacterIdentifier = CTGlyphInfoCreateWithCharacterIdentifier;

extern "CoreText" fn CTGlyphInfoGetGlyphName(glyphInfo: GlyphInfoRef) callconv(.C) core_foundation.StringRef;
pub const glyphInfoGetGlyphName = CTGlyphInfoGetGlyphName;

extern "CoreText" fn CTGlyphInfoGetGlyph(glyphInfo: GlyphInfoRef) callconv(.C) core_graphics.Glyph;
pub const glyphInfoGetGlyph = CTGlyphInfoGetGlyph;

extern "CoreText" fn CTGlyphInfoGetCharacterIdentifier(glyphInfo: GlyphInfoRef) callconv(.C) core_graphics.FontIndex;
pub const glyphInfoGetCharacterIdentifier = CTGlyphInfoGetCharacterIdentifier;

extern "CoreText" fn CTGlyphInfoGetCharacterCollection(glyphInfo: GlyphInfoRef) callconv(.C) CharacterCollection;
pub const glyphInfoGetCharacterCollection = CTGlyphInfoGetCharacterCollection;

pub const __CTParagraphStyle = extern struct {};

pub const ParagraphStyleRef = ?*__CTParagraphStyle;

extern "CoreText" fn CTParagraphStyleGetTypeID() callconv(.C) core_foundation.TypeID;
pub const paragraphStyleGetTypeID = CTParagraphStyleGetTypeID;

pub const TextAlignment = enum(objc.uint8_t) {
    kCTTextAlignmentLeft = 0,
    kCTTextAlignmentRight = 1,
    kCTTextAlignmentCenter = 2,
    kCTTextAlignmentJustified = 3,
    kCTTextAlignmentNatural = 4,
    kCTLeftTextAlignment = 0,
    kCTRightTextAlignment = 1,
    kCTCenterTextAlignment = 2,
    kCTJustifiedTextAlignment = 3,
    kCTNaturalTextAlignment = 4,
};

pub const LineBreakMode = enum(objc.uint8_t) {
    kCTLineBreakByWordWrapping = 0,
    kCTLineBreakByCharWrapping = 1,
    kCTLineBreakByClipping = 2,
    kCTLineBreakByTruncatingHead = 3,
    kCTLineBreakByTruncatingTail = 4,
    kCTLineBreakByTruncatingMiddle = 5,
};

pub const WritingDirection = enum(objc.int8_t) {
    kCTWritingDirectionNatural = -1,
    kCTWritingDirectionLeftToRight = 0,
    kCTWritingDirectionRightToLeft = 1,
};

pub const ParagraphStyleSpecifier = enum(objc.uint32_t) {
    kCTParagraphStyleSpecifierAlignment = 0,
    kCTParagraphStyleSpecifierFirstLineHeadIndent = 1,
    kCTParagraphStyleSpecifierHeadIndent = 2,
    kCTParagraphStyleSpecifierTailIndent = 3,
    kCTParagraphStyleSpecifierTabStops = 4,
    kCTParagraphStyleSpecifierDefaultTabInterval = 5,
    kCTParagraphStyleSpecifierLineBreakMode = 6,
    kCTParagraphStyleSpecifierLineHeightMultiple = 7,
    kCTParagraphStyleSpecifierMaximumLineHeight = 8,
    kCTParagraphStyleSpecifierMinimumLineHeight = 9,
    kCTParagraphStyleSpecifierLineSpacing = 10,
    kCTParagraphStyleSpecifierParagraphSpacing = 11,
    kCTParagraphStyleSpecifierParagraphSpacingBefore = 12,
    kCTParagraphStyleSpecifierBaseWritingDirection = 13,
    kCTParagraphStyleSpecifierMaximumLineSpacing = 14,
    kCTParagraphStyleSpecifierMinimumLineSpacing = 15,
    kCTParagraphStyleSpecifierLineSpacingAdjustment = 16,
    kCTParagraphStyleSpecifierLineBoundsOptions = 17,
    kCTParagraphStyleSpecifierCount = 18,
};

pub const ParagraphStyleSetting = extern struct {
    spec: ParagraphStyleSpecifier,
    valueSize: objc.size_t,
    value: ?*anyopaque,
};

extern "CoreText" fn CTParagraphStyleCreate(settings: ?*ParagraphStyleSetting, settingCount: objc.size_t) callconv(.C) ParagraphStyleRef;
pub const paragraphStyleCreate = CTParagraphStyleCreate;

extern "CoreText" fn CTParagraphStyleCreateCopy(paragraphStyle: ParagraphStyleRef) callconv(.C) ParagraphStyleRef;
pub const paragraphStyleCreateCopy = CTParagraphStyleCreateCopy;

extern "CoreText" fn CTParagraphStyleGetValueForSpecifier() callconv(.C) i32;
pub const paragraphStyleGetValueForSpecifier = CTParagraphStyleGetValueForSpecifier;

pub const __CTRubyAnnotation = extern struct {};

pub const RubyAnnotationRef = ?*__CTRubyAnnotation;

extern "CoreText" fn CTRubyAnnotationGetTypeID() callconv(.C) core_foundation.TypeID;
pub const rubyAnnotationGetTypeID = CTRubyAnnotationGetTypeID;

pub const RubyAlignment = enum(objc.uint8_t) {
    kCTRubyAlignmentInvalid = -1,
    kCTRubyAlignmentAuto = 0,
    kCTRubyAlignmentStart = 1,
    kCTRubyAlignmentCenter = 2,
    kCTRubyAlignmentEnd = 3,
    kCTRubyAlignmentDistributeLetter = 4,
    kCTRubyAlignmentDistributeSpace = 5,
    kCTRubyAlignmentLineEdge = 6,
};

pub const RubyOverhang = enum(objc.uint8_t) {
    kCTRubyOverhangInvalid = -1,
    kCTRubyOverhangAuto = 0,
    kCTRubyOverhangStart = 1,
    kCTRubyOverhangEnd = 2,
    kCTRubyOverhangNone = 3,
};

pub const RubyPosition = enum(objc.uint8_t) {
    kCTRubyPositionBefore = 0,
    kCTRubyPositionAfter = 1,
    kCTRubyPositionInterCharacter = 2,
    kCTRubyPositionInline = 3,
    kCTRubyPositionCount = 4,
};

extern "CoreText" fn CTRubyAnnotationCreate(
    alignment: RubyAlignment,
    overhang: RubyOverhang,
    sizeFactor: core_foundation.CGFloat,
    text: ?*core_foundation.StringRef,
) callconv(.C) RubyAnnotationRef;
pub const rubyAnnotationCreate = CTRubyAnnotationCreate;

extern "CoreText" fn CTRubyAnnotationCreateWithAttributes(
    alignment: RubyAlignment,
    overhang: RubyOverhang,
    position: RubyPosition,
    string: core_foundation.StringRef,
    attributes: core_foundation.DictionaryRef,
) callconv(.C) RubyAnnotationRef;
pub const rubyAnnotationCreateWithAttributes = CTRubyAnnotationCreateWithAttributes;

extern "CoreText" fn CTRubyAnnotationCreateCopy(rubyAnnotation: RubyAnnotationRef) callconv(.C) RubyAnnotationRef;
pub const rubyAnnotationCreateCopy = CTRubyAnnotationCreateCopy;

extern "CoreText" fn CTRubyAnnotationGetAlignment(rubyAnnotation: RubyAnnotationRef) callconv(.C) RubyAlignment;
pub const rubyAnnotationGetAlignment = CTRubyAnnotationGetAlignment;

extern "CoreText" fn CTRubyAnnotationGetOverhang(rubyAnnotation: RubyAnnotationRef) callconv(.C) RubyOverhang;
pub const rubyAnnotationGetOverhang = CTRubyAnnotationGetOverhang;

extern "CoreText" fn CTRubyAnnotationGetSizeFactor(rubyAnnotation: RubyAnnotationRef) callconv(.C) core_foundation.CGFloat;
pub const rubyAnnotationGetSizeFactor = CTRubyAnnotationGetSizeFactor;

extern "CoreText" fn CTRubyAnnotationGetTextForPosition(rubyAnnotation: RubyAnnotationRef, position: RubyPosition) callconv(.C) core_foundation.StringRef;
pub const rubyAnnotationGetTextForPosition = CTRubyAnnotationGetTextForPosition;

pub const __CTRun = extern struct {};

pub const RunRef = ?*__CTRun;

pub const RunStatus = enum(objc.uint32_t) {
    kCTRunStatusNoStatus = 0,
    kCTRunStatusRightToLeft = 1,
    kCTRunStatusNonMonotonic = 2,
    kCTRunStatusHasNonIdentityMatrix = 4,
};

extern "CoreText" fn CTRunGetTypeID() callconv(.C) core_foundation.TypeID;
pub const runGetTypeID = CTRunGetTypeID;

extern "CoreText" fn CTRunGetGlyphCount(run: RunRef) callconv(.C) core_foundation.Index;
pub const runGetGlyphCount = CTRunGetGlyphCount;

extern "CoreText" fn CTRunGetAttributes(run: RunRef) callconv(.C) core_foundation.DictionaryRef;
pub const runGetAttributes = CTRunGetAttributes;

extern "CoreText" fn CTRunGetStatus(run: RunRef) callconv(.C) RunStatus;
pub const runGetStatus = CTRunGetStatus;

extern "CoreText" fn CTRunGetGlyphsPtr(run: RunRef) callconv(.C) ?*core_graphics.Glyph;
pub const runGetGlyphsPtr = CTRunGetGlyphsPtr;

extern "CoreText" fn CTRunGetGlyphs(run: RunRef, range: core_foundation.Range, buffer: ?*core_graphics.Glyph) callconv(.C) void;
pub const runGetGlyphs = CTRunGetGlyphs;

extern "CoreText" fn CTRunGetPositionsPtr(run: RunRef) callconv(.C) ?*core_foundation.CGPoint;
pub const runGetPositionsPtr = CTRunGetPositionsPtr;

extern "CoreText" fn CTRunGetPositions(run: RunRef, range: core_foundation.Range, buffer: ?*core_foundation.CGPoint) callconv(.C) void;
pub const runGetPositions = CTRunGetPositions;

extern "CoreText" fn CTRunGetAdvancesPtr(run: RunRef) callconv(.C) ?*core_foundation.CGSize;
pub const runGetAdvancesPtr = CTRunGetAdvancesPtr;

extern "CoreText" fn CTRunGetAdvances(run: RunRef, range: core_foundation.Range, buffer: ?*core_foundation.CGSize) callconv(.C) void;
pub const runGetAdvances = CTRunGetAdvances;

extern "CoreText" fn CTRunGetStringIndicesPtr(run: RunRef) callconv(.C) ?*core_foundation.Index;
pub const runGetStringIndicesPtr = CTRunGetStringIndicesPtr;

extern "CoreText" fn CTRunGetStringIndices(run: RunRef, range: core_foundation.Range, buffer: ?*core_foundation.Index) callconv(.C) void;
pub const runGetStringIndices = CTRunGetStringIndices;

extern "CoreText" fn CTRunGetStringRange(run: RunRef) callconv(.C) core_foundation.Range;
pub const runGetStringRange = CTRunGetStringRange;

extern "CoreText" fn CTRunGetTypographicBounds(
    run: RunRef,
    range: core_foundation.Range,
    ascent: ?*core_foundation.CGFloat,
    descent: ?*core_foundation.CGFloat,
    leading: ?*core_foundation.CGFloat,
) callconv(.C) f64;
pub const runGetTypographicBounds = CTRunGetTypographicBounds;

extern "CoreText" fn CTRunGetImageBounds(run: RunRef, context: core_graphics.ContextRef, range: core_foundation.Range) callconv(.C) core_foundation.CGRect;
pub const runGetImageBounds = CTRunGetImageBounds;

extern "CoreText" fn CTRunGetTextMatrix(run: RunRef) callconv(.C) core_foundation.CGAffineTransform;
pub const runGetTextMatrix = CTRunGetTextMatrix;

extern "CoreText" fn CTRunGetBaseAdvancesAndOrigins(
    runRef: RunRef,
    range: core_foundation.Range,
    advancesBuffer: ?*core_foundation.CGSize,
    originsBuffer: ?*core_foundation.CGPoint,
) callconv(.C) void;
pub const runGetBaseAdvancesAndOrigins = CTRunGetBaseAdvancesAndOrigins;

extern "CoreText" fn CTRunDraw(run: RunRef, context: core_graphics.ContextRef, range: core_foundation.Range) callconv(.C) void;
pub const runDraw = CTRunDraw;

pub const __CTRunDelegate = extern struct {};

pub const RunDelegateRef = ?*__CTRunDelegate;

extern "CoreText" fn CTRunDelegateGetTypeID() callconv(.C) core_foundation.TypeID;
pub const runDelegateGetTypeID = CTRunDelegateGetTypeID;

pub const RunDelegateDeallocateCallback = ?*const fn (?*anyopaque) callconv(.C) void;

pub const RunDelegateGetAscentCallback = ?*const fn (?*anyopaque) callconv(.C) core_foundation.CGFloat;

pub const RunDelegateGetDescentCallback = ?*const fn (?*anyopaque) callconv(.C) core_foundation.CGFloat;

pub const RunDelegateGetWidthCallback = ?*const fn (?*anyopaque) callconv(.C) core_foundation.CGFloat;

pub const RunDelegateCallbacks = extern struct {
    version: core_foundation.Index,
    dealloc: RunDelegateDeallocateCallback,
    getAscent: RunDelegateGetAscentCallback,
    getDescent: RunDelegateGetDescentCallback,
    getWidth: RunDelegateGetWidthCallback,
};

pub const anon1441 = enum(u32) {
    kCTRunDelegateVersion1 = 1,
    kCTRunDelegateCurrentVersion = 1,
};

extern "CoreText" fn CTRunDelegateCreate(callbacks: ?*RunDelegateCallbacks, refCon: ?*anyopaque) callconv(.C) RunDelegateRef;
pub const runDelegateCreate = CTRunDelegateCreate;

extern "CoreText" fn CTRunDelegateGetRefCon(runDelegate: RunDelegateRef) callconv(.C) ?*anyopaque;
pub const runDelegateGetRefCon = CTRunDelegateGetRefCon;

/// https://developer.apple.com/documentation/CoreText/CTAdaptiveImageProviding?language=objc
pub const AdaptiveImageProviding = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn imageForProposedSizeScaleFactorImageOffsetImageSize(
        _self: *@This(),
        _proposedSize: core_foundation.CGSize,
        _scaleFactor: core_foundation.CGFloat,
        _outImageOffset: ?*core_foundation.CGPoint,
        _outImageSize: ?*core_foundation.CGSize,
    ) core_graphics.ImageRef {
        return objc.msgSend(_self, "imageForProposedSize:scaleFactor:imageOffset:imageSize:", core_graphics.ImageRef, .{
            _proposedSize,
            _scaleFactor,
            _outImageOffset,
            _outImageSize,
        });
    }
};

pub const UnderlineStyle = enum(objc.int32_t) {
    kCTUnderlineStyleNone = 0,
    kCTUnderlineStyleSingle = 1,
    kCTUnderlineStyleThick = 2,
    kCTUnderlineStyleDouble = 9,
};

pub const UnderlineStyleModifiers = enum(objc.int32_t) {
    kCTUnderlinePatternSolid = 0,
    kCTUnderlinePatternDot = 256,
    kCTUnderlinePatternDash = 512,
    kCTUnderlinePatternDashDot = 768,
    kCTUnderlinePatternDashDotDot = 1024,
};

pub const anon4651 = enum(u32) {
    kCTWritingDirectionEmbedding = 0,
    kCTWritingDirectionOverride = 2,
};

pub const __CTTextTab = extern struct {};

pub const TextTabRef = ?*__CTTextTab;

extern "CoreText" fn CTTextTabGetTypeID() callconv(.C) core_foundation.TypeID;
pub const textTabGetTypeID = CTTextTabGetTypeID;

extern "CoreText" fn CTTextTabCreate(alignment: TextAlignment, location: f64, options: core_foundation.DictionaryRef) callconv(.C) TextTabRef;
pub const textTabCreate = CTTextTabCreate;

extern "CoreText" fn CTTextTabGetAlignment(tab: TextTabRef) callconv(.C) TextAlignment;
pub const textTabGetAlignment = CTTextTabGetAlignment;

extern "CoreText" fn CTTextTabGetLocation(tab: TextTabRef) callconv(.C) f64;
pub const textTabGetLocation = CTTextTabGetLocation;

extern "CoreText" fn CTTextTabGetOptions(tab: TextTabRef) callconv(.C) core_foundation.DictionaryRef;
pub const textTabGetOptions = CTTextTabGetOptions;

pub const anon411 = enum(i32) {
    kAllTypographicFeaturesType = 0,
    kLigaturesType = 1,
    kCursiveConnectionType = 2,
    kLetterCaseType = 3,
    kVerticalSubstitutionType = 4,
    kLinguisticRearrangementType = 5,
    kNumberSpacingType = 6,
    kSmartSwashType = 8,
    kDiacriticsType = 9,
    kVerticalPositionType = 10,
    kFractionsType = 11,
    kOverlappingCharactersType = 13,
    kTypographicExtrasType = 14,
    kMathematicalExtrasType = 15,
    kOrnamentSetsType = 16,
    kCharacterAlternativesType = 17,
    kDesignComplexityType = 18,
    kStyleOptionsType = 19,
    kCharacterShapeType = 20,
    kNumberCaseType = 21,
    kTextSpacingType = 22,
    kTransliterationType = 23,
    kAnnotationType = 24,
    kKanaSpacingType = 25,
    kIdeographicSpacingType = 26,
    kUnicodeDecompositionType = 27,
    kRubyKanaType = 28,
    kCJKSymbolAlternativesType = 29,
    kIdeographicAlternativesType = 30,
    kCJKVerticalRomanPlacementType = 31,
    kItalicCJKRomanType = 32,
    kCaseSensitiveLayoutType = 33,
    kAlternateKanaType = 34,
    kStylisticAlternativesType = 35,
    kContextualAlternatesType = 36,
    kLowerCaseType = 37,
    kUpperCaseType = 38,
    kLanguageTagType = 39,
    kCJKRomanSpacingType = 103,
    kLastFeatureType = -1,
};

pub const anon891 = enum(u32) {
    kAllTypeFeaturesOnSelector = 0,
    kAllTypeFeaturesOffSelector = 1,
};

pub const anon1001 = enum(u32) {
    kRequiredLigaturesOnSelector = 0,
    kRequiredLigaturesOffSelector = 1,
    kCommonLigaturesOnSelector = 2,
    kCommonLigaturesOffSelector = 3,
    kRareLigaturesOnSelector = 4,
    kRareLigaturesOffSelector = 5,
    kLogosOnSelector = 6,
    kLogosOffSelector = 7,
    kRebusPicturesOnSelector = 8,
    kRebusPicturesOffSelector = 9,
    kDiphthongLigaturesOnSelector = 10,
    kDiphthongLigaturesOffSelector = 11,
    kSquaredLigaturesOnSelector = 12,
    kSquaredLigaturesOffSelector = 13,
    kAbbrevSquaredLigaturesOnSelector = 14,
    kAbbrevSquaredLigaturesOffSelector = 15,
    kSymbolLigaturesOnSelector = 16,
    kSymbolLigaturesOffSelector = 17,
    kContextualLigaturesOnSelector = 18,
    kContextualLigaturesOffSelector = 19,
    kHistoricalLigaturesOnSelector = 20,
    kHistoricalLigaturesOffSelector = 21,
};

pub const anon1301 = enum(u32) {
    kUnconnectedSelector = 0,
    kPartiallyConnectedSelector = 1,
    kCursiveSelector = 2,
};

pub const anon1411 = enum(u32) {
    kUpperAndLowerCaseSelector = 0,
    kAllCapsSelector = 1,
    kAllLowerCaseSelector = 2,
    kSmallCapsSelector = 3,
    kInitialCapsSelector = 4,
    kInitialCapsAndSmallCapsSelector = 5,
};

pub const anon1551 = enum(u32) {
    kSubstituteVerticalFormsOnSelector = 0,
    kSubstituteVerticalFormsOffSelector = 1,
};

pub const anon1651 = enum(u32) {
    kLinguisticRearrangementOnSelector = 0,
    kLinguisticRearrangementOffSelector = 1,
};

pub const anon1751 = enum(u32) {
    kMonospacedNumbersSelector = 0,
    kProportionalNumbersSelector = 1,
    kThirdWidthNumbersSelector = 2,
    kQuarterWidthNumbersSelector = 3,
};

pub const anon1871 = enum(u32) {
    kWordInitialSwashesOnSelector = 0,
    kWordInitialSwashesOffSelector = 1,
    kWordFinalSwashesOnSelector = 2,
    kWordFinalSwashesOffSelector = 3,
    kLineInitialSwashesOnSelector = 4,
    kLineInitialSwashesOffSelector = 5,
    kLineFinalSwashesOnSelector = 6,
    kLineFinalSwashesOffSelector = 7,
    kNonFinalSwashesOnSelector = 8,
    kNonFinalSwashesOffSelector = 9,
};

pub const anon2051 = enum(u32) {
    kShowDiacriticsSelector = 0,
    kHideDiacriticsSelector = 1,
    kDecomposeDiacriticsSelector = 2,
};

pub const anon2161 = enum(u32) {
    kNormalPositionSelector = 0,
    kSuperiorsSelector = 1,
    kInferiorsSelector = 2,
    kOrdinalsSelector = 3,
    kScientificInferiorsSelector = 4,
};

pub const anon2291 = enum(u32) {
    kNoFractionsSelector = 0,
    kVerticalFractionsSelector = 1,
    kDiagonalFractionsSelector = 2,
};

pub const anon2401 = enum(u32) {
    kPreventOverlapOnSelector = 0,
    kPreventOverlapOffSelector = 1,
};

pub const anon2501 = enum(u32) {
    kHyphensToEmDashOnSelector = 0,
    kHyphensToEmDashOffSelector = 1,
    kHyphenToEnDashOnSelector = 2,
    kHyphenToEnDashOffSelector = 3,
    kSlashedZeroOnSelector = 4,
    kSlashedZeroOffSelector = 5,
    kFormInterrobangOnSelector = 6,
    kFormInterrobangOffSelector = 7,
    kSmartQuotesOnSelector = 8,
    kSmartQuotesOffSelector = 9,
    kPeriodsToEllipsisOnSelector = 10,
    kPeriodsToEllipsisOffSelector = 11,
};

pub const anon2701 = enum(u32) {
    kHyphenToMinusOnSelector = 0,
    kHyphenToMinusOffSelector = 1,
    kAsteriskToMultiplyOnSelector = 2,
    kAsteriskToMultiplyOffSelector = 3,
    kSlashToDivideOnSelector = 4,
    kSlashToDivideOffSelector = 5,
    kInequalityLigaturesOnSelector = 6,
    kInequalityLigaturesOffSelector = 7,
    kExponentsOnSelector = 8,
    kExponentsOffSelector = 9,
    kMathematicalGreekOnSelector = 10,
    kMathematicalGreekOffSelector = 11,
};

pub const anon2901 = enum(u32) {
    nameFontTableTag = 1851878757,
};

pub const anon3051 = enum(u32) {
    kNoAlternatesSelector = 0,
};

pub const anon3141 = enum(u32) {
    kDesignLevel1Selector = 0,
    kDesignLevel2Selector = 1,
    kDesignLevel3Selector = 2,
    kDesignLevel4Selector = 3,
    kDesignLevel5Selector = 4,
};

pub const anon3411 = enum(u32) {
    kTraditionalCharactersSelector = 0,
    kSimplifiedCharactersSelector = 1,
    kJIS1978CharactersSelector = 2,
    kJIS1983CharactersSelector = 3,
    kJIS1990CharactersSelector = 4,
    kTraditionalAltOneSelector = 5,
    kTraditionalAltTwoSelector = 6,
    kTraditionalAltThreeSelector = 7,
    kTraditionalAltFourSelector = 8,
    kTraditionalAltFiveSelector = 9,
    kExpertCharactersSelector = 10,
    kJIS2004CharactersSelector = 11,
    kHojoCharactersSelector = 12,
    kNLCCharactersSelector = 13,
    kTraditionalNamesCharactersSelector = 14,
};

pub const anon3641 = enum(u32) {
    kLowerCaseNumbersSelector = 0,
    kUpperCaseNumbersSelector = 1,
};

pub const anon3741 = enum(u32) {
    kProportionalTextSelector = 0,
    kMonospacedTextSelector = 1,
    kHalfWidthTextSelector = 2,
    kThirdWidthTextSelector = 3,
    kQuarterWidthTextSelector = 4,
    kAltProportionalTextSelector = 5,
    kAltHalfWidthTextSelector = 6,
};

pub const anon3891 = enum(u32) {
    kNoTransliterationSelector = 0,
    kHanjaToHangulSelector = 1,
    kHiraganaToKatakanaSelector = 2,
    kKatakanaToHiraganaSelector = 3,
    kKanaToRomanizationSelector = 4,
    kRomanizationToHiraganaSelector = 5,
    kRomanizationToKatakanaSelector = 6,
    kHanjaToHangulAltOneSelector = 7,
    kHanjaToHangulAltTwoSelector = 8,
    kHanjaToHangulAltThreeSelector = 9,
};

pub const anon4261 = enum(u32) {
    kFullWidthKanaSelector = 0,
    kProportionalKanaSelector = 1,
};

pub const anon4361 = enum(u32) {
    kFullWidthIdeographsSelector = 0,
    kProportionalIdeographsSelector = 1,
    kHalfWidthIdeographsSelector = 2,
};

pub const anon4471 = enum(u32) {
    kCanonicalCompositionOnSelector = 0,
    kCanonicalCompositionOffSelector = 1,
    kCompatibilityCompositionOnSelector = 2,
    kCompatibilityCompositionOffSelector = 3,
    kTranscodingCompositionOnSelector = 4,
    kTranscodingCompositionOffSelector = 5,
};

pub const anon4611 = enum(u32) {
    kNoRubyKanaSelector = 0,
    kRubyKanaSelector = 1,
    kRubyKanaOnSelector = 2,
    kRubyKanaOffSelector = 3,
};

pub const anon4731 = enum(u32) {
    kNoCJKSymbolAlternativesSelector = 0,
    kCJKSymbolAltOneSelector = 1,
    kCJKSymbolAltTwoSelector = 2,
    kCJKSymbolAltThreeSelector = 3,
    kCJKSymbolAltFourSelector = 4,
    kCJKSymbolAltFiveSelector = 5,
};

pub const anon4871 = enum(u32) {
    kNoIdeographicAlternativesSelector = 0,
    kIdeographicAltOneSelector = 1,
    kIdeographicAltTwoSelector = 2,
    kIdeographicAltThreeSelector = 3,
    kIdeographicAltFourSelector = 4,
    kIdeographicAltFiveSelector = 5,
};

pub const anon5011 = enum(u32) {
    kCJKVerticalRomanCenteredSelector = 0,
    kCJKVerticalRomanHBaselineSelector = 1,
};

pub const anon5111 = enum(u32) {
    kNoCJKItalicRomanSelector = 0,
    kCJKItalicRomanSelector = 1,
    kCJKItalicRomanOnSelector = 2,
    kCJKItalicRomanOffSelector = 3,
};

pub const anon5231 = enum(u32) {
    kCaseSensitiveLayoutOnSelector = 0,
    kCaseSensitiveLayoutOffSelector = 1,
    kCaseSensitiveSpacingOnSelector = 2,
    kCaseSensitiveSpacingOffSelector = 3,
};

pub const anon5351 = enum(u32) {
    kAlternateHorizKanaOnSelector = 0,
    kAlternateHorizKanaOffSelector = 1,
    kAlternateVertKanaOnSelector = 2,
    kAlternateVertKanaOffSelector = 3,
};

pub const anon5961 = enum(u32) {
    kContextualAlternatesOnSelector = 0,
    kContextualAlternatesOffSelector = 1,
    kSwashAlternatesOnSelector = 2,
    kSwashAlternatesOffSelector = 3,
    kContextualSwashAlternatesOnSelector = 4,
    kContextualSwashAlternatesOffSelector = 5,
};

pub const anon6211 = enum(u32) {
    kDefaultUpperCaseSelector = 0,
    kUpperCaseSmallCapsSelector = 1,
    kUpperCasePetiteCapsSelector = 2,
};

pub const anon6321 = enum(u32) {
    kHalfWidthCJKRomanSelector = 0,
    kProportionalCJKRomanSelector = 1,
    kDefaultCJKRomanSelector = 2,
    kFullWidthCJKRomanSelector = 3,
};

pub const anon6431 = enum(u32) {
    kSFNTLookupSimpleArray = 0,
    kSFNTLookupSegmentSingle = 2,
    kSFNTLookupSegmentArray = 4,
    kSFNTLookupSingleTable = 6,
    kSFNTLookupTrimmedArray = 8,
    kSFNTLookupVector = 10,
};

pub const SFNTLookupTableFormat = objc.UInt16;

pub const SFNTLookupValue = objc.UInt16;

pub const SFNTLookupOffset = objc.UInt16;

pub const SFNTLookupKind = objc.UInt32;

pub const SFNTLookupBinarySearchHeader = extern struct {
    unitSize: objc.UInt16,
    nUnits: objc.UInt16,
    searchRange: objc.UInt16,
    entrySelector: objc.UInt16,
    rangeShift: objc.UInt16,
};

pub const SFNTLookupArrayHeader = extern struct {
    lookupValues: [1]SFNTLookupValue,
};

pub const SFNTLookupTrimmedArrayHeader = extern struct {
    firstGlyph: objc.UInt16,
    count: objc.UInt16,
    valueArray: [1]SFNTLookupValue,
};

pub const SFNTLookupVectorHeader = extern struct {
    valueSize: objc.UInt16,
    firstGlyph: objc.UInt16,
    count: objc.UInt16,
    values: [1]objc.UInt8,
};

pub const SFNTLookupSegment = extern struct {
    lastGlyph: objc.UInt16,
    firstGlyph: objc.UInt16,
    value: [1]objc.UInt16,
};

pub const SFNTLookupSegmentHeader = extern struct {
    binSearch: SFNTLookupBinarySearchHeader,
    segments: [1]SFNTLookupSegment,
};

pub const SFNTLookupSingle = extern struct {
    glyph: objc.UInt16,
    value: [1]objc.UInt16,
};

pub const SFNTLookupSingleHeader = extern struct {
    binSearch: SFNTLookupBinarySearchHeader,
    entries: [1]SFNTLookupSingle,
};

pub const SFNTLookupFormatSpecificHeader = extern union {
    theArray: SFNTLookupArrayHeader,
    segment: SFNTLookupSegmentHeader,
    single: SFNTLookupSingleHeader,
    trimmedArray: SFNTLookupTrimmedArrayHeader,
    vector: SFNTLookupVectorHeader,
};

pub const SFNTLookupTable = extern struct {
    format: SFNTLookupTableFormat,
    fsHeader: SFNTLookupFormatSpecificHeader,
};

pub const SFNTLookupTablePtr = ?*SFNTLookupTable;

pub const SFNTLookupTableHandle = ?*SFNTLookupTablePtr;

pub const anon7371 = enum(u32) {
    kSTClassEndOfText = 0,
    kSTClassOutOfBounds = 1,
    kSTClassDeletedGlyph = 2,
    kSTClassEndOfLine = 3,
    kSTSetMark = 32768,
    kSTNoAdvance = 16384,
    kSTMarkEnd = 8192,
    kSTLigActionMask = 16383,
    kSTRearrVerbMask = 15,
};

pub const STClass = objc.UInt8;

pub const STEntryIndex = objc.UInt8;

pub const STHeader = extern struct {
    filler: objc.UInt8,
    nClasses: STClass,
    classTableOffset: objc.UInt16,
    stateArrayOffset: objc.UInt16,
    entryTableOffset: objc.UInt16,
};

pub const STClassTable = extern struct {
    firstGlyph: objc.UInt16,
    nGlyphs: objc.UInt16,
    classes: [1]STClass,
};

pub const STEntryZero = extern struct {
    newState: objc.UInt16,
    flags: objc.UInt16,
};

pub const STEntryOne = extern struct {
    newState: objc.UInt16,
    flags: objc.UInt16,
    offset1: objc.UInt16,
};

pub const STEntryTwo = extern struct {
    newState: objc.UInt16,
    flags: objc.UInt16,
    offset1: objc.UInt16,
    offset2: objc.UInt16,
};

pub const anon7851 = enum(u32) {
    kSTXHasLigAction = 8192,
};

pub const STXClass = objc.UInt16;

pub const STXStateIndex = objc.UInt16;

pub const STXEntryIndex = objc.UInt16;

pub const STXHeader = extern struct {
    nClasses: objc.UInt32,
    classTableOffset: objc.UInt32,
    stateArrayOffset: objc.UInt32,
    entryTableOffset: objc.UInt32,
};

pub const STXClassTable = SFNTLookupTable;

pub const STXEntryZero = extern struct {
    newState: STXStateIndex,
    flags: objc.UInt16,
};

pub const STXEntryOne = extern struct {
    newState: STXStateIndex,
    flags: objc.UInt16,
    index1: objc.UInt16,
};

pub const STXEntryTwo = extern struct {
    newState: STXStateIndex,
    flags: objc.UInt16,
    index1: objc.UInt16,
    index2: objc.UInt16,
};

pub const anon8221 = enum(u32) {
    kSTKCrossStreamReset = 8192,
};

pub const anon8281 = enum(u32) {
    kLCARTag = 1818452338,
    kLCARCurrentVersion = 65536,
    kLCARLinearFormat = 0,
    kLCARCtlPointFormat = 1,
};

pub const LcarCaretClassEntry = extern struct {
    count: objc.UInt16,
    partials: [1]objc.UInt16,
};

pub const LcarCaretTable = extern struct {
    version: objc.Fixed,
    format: objc.UInt16,
    lookup: SFNTLookupTable,
};

pub const LcarCaretTablePtr = ?*LcarCaretTable;

pub const anon8511 = enum(u32) {
    kJUSTTag = 1786082164,
    kJUSTCurrentVersion = 65536,
    kJUSTStandardFormat = 0,
    kJUSTnoGlyphcode = 65535,
    kJUSTpcDecompositionAction = 0,
    kJUSTpcUnconditionalAddAction = 1,
    kJUSTpcConditionalAddAction = 2,
    kJUSTpcGlyphStretchAction = 3,
    kJUSTpcDuctilityAction = 4,
    kJUSTpcGlyphRepeatAddAction = 5,
};

pub const anon8651 = enum(u32) {
    kJUSTKashidaPriority = 0,
    kJUSTSpacePriority = 1,
    kJUSTLetterPriority = 2,
    kJUSTNullPriority = 3,
    kJUSTPriorityCount = 4,
};

pub const anon8741 = enum(u32) {
    kJUSTOverridePriority = 32768,
    kJUSTOverrideLimits = 16384,
    kJUSTOverrideUnlimited = 8192,
    kJUSTUnlimited = 4096,
    kJUSTPriorityMask = 3,
};

pub const JustPCActionType = objc.UInt16;

pub const JustificationFlags = objc.UInt16;

pub const JustPCDecompositionAction = extern struct {
    lowerLimit: objc.Fixed,
    upperLimit: objc.Fixed,
    order: objc.UInt16,
    count: objc.UInt16,
    glyphs: [1]objc.UInt16,
};

pub const JustPCUnconditionalAddAction = objc.UInt16;

pub const JustPCConditionalAddAction = extern struct {
    substThreshold: objc.Fixed,
    addGlyph: objc.UInt16,
    substGlyph: objc.UInt16,
};

pub const JustPCDuctilityAction = extern struct {
    ductilityAxis: objc.UInt32,
    minimumLimit: objc.Fixed,
    noStretchValue: objc.Fixed,
    maximumLimit: objc.Fixed,
};

pub const JustPCGlyphRepeatAddAction = extern struct {
    flags: objc.UInt16,
    glyph: objc.UInt16,
};

pub const JustPCActionSubrecord = extern struct {
    theClass: objc.UInt16,
    theType: JustPCActionType,
    length: objc.UInt32,
    data: objc.UInt32,
};

pub const JustPCAction = extern struct {
    actionCount: objc.UInt32,
    actions: [1]JustPCActionSubrecord,
};

pub const JustWidthDeltaEntry = extern struct {
    justClass: objc.UInt32,
    beforeGrowLimit: objc.Fixed,
    beforeShrinkLimit: objc.Fixed,
    afterGrowLimit: objc.Fixed,
    afterShrinkLimit: objc.Fixed,
    growFlags: JustificationFlags,
    shrinkFlags: JustificationFlags,
};

pub const JustWidthDeltaGroup = extern struct {
    count: objc.UInt32,
    entries: [1]JustWidthDeltaEntry,
};

pub const JustPostcompTable = extern struct {
    lookupTable: SFNTLookupTable,
};

pub const JustDirectionTable = extern struct {
    justClass: objc.UInt16,
    widthDeltaClusters: objc.UInt16,
    postcomp: objc.UInt16,
    lookup: SFNTLookupTable,
};

pub const JustTable = extern struct {
    version: objc.Fixed,
    format: objc.UInt16,
    horizHeaderOffset: objc.UInt16,
    vertHeaderOffset: objc.UInt16,
};

pub const anon9821 = enum(u32) {
    kOPBDTag = 1869636196,
    kOPBDCurrentVersion = 65536,
    kOPBDDistanceFormat = 0,
    kOPBDControlPointFormat = 1,
};

pub const OpbdTableFormat = objc.UInt16;

pub const OpbdSideValues = extern struct {
    leftSideShift: objc.SInt16,
    topSideShift: objc.SInt16,
    rightSideShift: objc.SInt16,
    bottomSideShift: objc.SInt16,
};

pub const OpbdTable = extern struct {
    version: objc.Fixed,
    format: OpbdTableFormat,
    lookupTable: SFNTLookupTable,
};

pub const anon10131 = enum(i32) {
    kMORTTag = 1836020340,
    kMORTCurrentVersion = 65536,
    kMORTCoverVertical = 32768,
    kMORTCoverDescending = 16384,
    kMORTCoverIgnoreVertical = 8192,
    kMORTCoverTypeMask = 15,
    kMORTRearrangementType = 0,
    kMORTContextualType = 1,
    kMORTLigatureType = 2,
    kMORTSwashType = 4,
    kMORTInsertionType = 5,
    kMORTLigLastAction = -2147483648,
    kMORTLigStoreLigature = 1073741824,
    kMORTLigFormOffsetMask = 1073741823,
    kMORTLigFormOffsetShift = 2,
    kMORTraNoAction = 0,
    kMORTraxA = 1,
    kMORTraDx = 2,
    kMORTraDxA = 3,
    kMORTraxAB = 4,
    kMORTraxBA = 5,
    kMORTraCDx = 6,
    kMORTraDCx = 7,
    kMORTraCDxA = 8,
    kMORTraDCxA = 9,
    kMORTraDxAB = 10,
    kMORTraDxBA = 11,
    kMORTraCDxAB = 12,
    kMORTraCDxBA = 13,
    kMORTraDCxAB = 14,
    kMORTraDCxBA = 15,
    kMORTDoInsertionsBefore = 128,
    kMORTIsSplitVowelPiece = 64,
    kMORTInsertionsCountMask = 63,
    kMORTCurrInsertKashidaLike = 8192,
    kMORTMarkInsertKashidaLike = 4096,
    kMORTCurrInsertBefore = 2048,
    kMORTMarkInsertBefore = 1024,
    kMORTMarkJustTableCountMask = 16256,
    kMORTMarkJustTableCountShift = 7,
    kMORTCurrJustTableCountMask = 127,
    kMORTCurrJustTableCountShift = 0,
    kMORTCurrInsertCountMask = 992,
    kMORTCurrInsertCountShift = 5,
    kMORTMarkInsertCountMask = 31,
    kMORTMarkInsertCountShift = 0,
};

pub const MortSubtableMaskFlags = objc.UInt32;

pub const MortLigatureActionEntry = objc.UInt32;

pub const MortRearrangementSubtable = extern struct {
    header: STHeader,
};

pub const MortContextualSubtable = extern struct {
    header: STHeader,
    substitutionTableOffset: objc.UInt16,
};

pub const MortLigatureSubtable = extern struct {
    header: STHeader,
    ligatureActionTableOffset: objc.UInt16,
    componentTableOffset: objc.UInt16,
    ligatureTableOffset: objc.UInt16,
};

pub const MortSwashSubtable = extern struct {
    lookup: SFNTLookupTable,
};

pub const MortInsertionSubtable = extern struct {
    header: STHeader,
};

pub const MortSpecificSubtable = extern union {
    rearrangement: MortRearrangementSubtable,
    contextual: MortContextualSubtable,
    ligature: MortLigatureSubtable,
    swash: MortSwashSubtable,
    insertion: MortInsertionSubtable,
};

pub const MortSubtable = extern struct {
    length: objc.UInt16,
    coverage: objc.UInt16,
    flags: MortSubtableMaskFlags,
    u: MortSpecificSubtable,
};

pub const MortFeatureEntry = extern struct {
    featureType: objc.UInt16,
    featureSelector: objc.UInt16,
    enableFlags: MortSubtableMaskFlags,
    disableFlags: MortSubtableMaskFlags,
};

pub const MortChain = extern struct {
    defaultFlags: MortSubtableMaskFlags,
    length: objc.UInt32,
    nFeatures: objc.UInt16,
    nSubtables: objc.UInt16,
    featureEntries: [1]MortFeatureEntry,
};

pub const MortTable = extern struct {
    version: objc.Fixed,
    nChains: objc.UInt32,
    chains: [1]MortChain,
};

pub const anon11321 = enum(i32) {
    kMORXTag = 1836020344,
    kMORXCurrentVersion = 131072,
    kMORXCoverVertical = -2147483648,
    kMORXCoverDescending = 1073741824,
    kMORXCoverIgnoreVertical = 536870912,
    kMORXCoverLogicalOrder = 268435456,
    kMORXCoverTypeMask = 255,
};

pub const MorxRearrangementSubtable = extern struct {
    header: STXHeader,
};

pub const MorxContextualSubtable = extern struct {
    header: STXHeader,
    substitutionTableOffset: objc.UInt32,
};

pub const MorxLigatureSubtable = extern struct {
    header: STXHeader,
    ligatureActionTableOffset: objc.UInt32,
    componentTableOffset: objc.UInt32,
    ligatureTableOffset: objc.UInt32,
};

pub const MorxInsertionSubtable = extern struct {
    header: STXHeader,
    insertionGlyphTableOffset: objc.UInt32,
};

pub const MorxSpecificSubtable = extern union {
    rearrangement: MorxRearrangementSubtable,
    contextual: MorxContextualSubtable,
    ligature: MorxLigatureSubtable,
    swash: MortSwashSubtable,
    insertion: MorxInsertionSubtable,
};

pub const MorxSubtable = extern struct {
    length: objc.UInt32,
    coverage: objc.UInt32,
    flags: MortSubtableMaskFlags,
    u: MorxSpecificSubtable,
};

pub const MorxChain = extern struct {
    defaultFlags: MortSubtableMaskFlags,
    length: objc.UInt32,
    nFeatures: objc.UInt32,
    nSubtables: objc.UInt32,
    featureEntries: [1]MortFeatureEntry,
};

pub const MorxTable = extern struct {
    version: objc.Fixed,
    nChains: objc.UInt32,
    chains: [1]MorxChain,
};

pub const anon11981 = enum(u32) {
    kPROPTag = 1886547824,
    kPROPCurrentVersion = 196608,
    kPROPPairOffsetShift = 8,
    kPROPPairOffsetSign = 7,
    kPROPIsFloaterMask = 32768,
    kPROPCanHangLTMask = 16384,
    kPROPCanHangRBMask = 8192,
    kPROPUseRLPairMask = 4096,
    kPROPPairOffsetMask = 3840,
    kPROPRightConnectMask = 128,
    kPROPZeroReserved = 96,
    kPROPDirectionMask = 31,
};

pub const anon12141 = enum(u32) {
    kPROPLDirectionClass = 0,
    kPROPRDirectionClass = 1,
    kPROPALDirectionClass = 2,
    kPROPENDirectionClass = 3,
    kPROPESDirectionClass = 4,
    kPROPETDirectionClass = 5,
    kPROPANDirectionClass = 6,
    kPROPCSDirectionClass = 7,
    kPROPPSDirectionClass = 8,
    kPROPSDirectionClass = 9,
    kPROPWSDirectionClass = 10,
    kPROPONDirectionClass = 11,
    kPROPSENDirectionClass = 12,
    kPROPLREDirectionClass = 13,
    kPROPLRODirectionClass = 14,
    kPROPRLEDirectionClass = 15,
    kPROPRLODirectionClass = 16,
    kPROPPDFDirectionClass = 17,
    kPROPNSMDirectionClass = 18,
    kPROPBNDirectionClass = 19,
    kPROPNumDirectionClasses = 20,
};

pub const PropCharProperties = objc.UInt16;

pub const PropTable = extern struct {
    version: objc.Fixed,
    format: objc.UInt16,
    defaultProps: PropCharProperties,
    lookup: SFNTLookupTable,
};

pub const PropLookupSegment = extern struct {
    lastGlyph: objc.UInt16,
    firstGlyph: objc.UInt16,
    value: objc.UInt16,
};

pub const PropLookupSingle = extern struct {
    glyph: objc.UInt16,
    props: PropCharProperties,
};

pub const anon12621 = enum(u32) {
    kTRAKTag = 1953653099,
    kTRAKCurrentVersion = 65536,
    kTRAKUniformFormat = 0,
};

pub const TrakValue = objc.SInt16;

pub const TrakTableEntry = extern struct {
    track: objc.Fixed,
    nameTableIndex: objc.UInt16,
    sizesOffset: objc.UInt16,
};

pub const TrakTableData = extern struct {
    nTracks: objc.UInt16,
    nSizes: objc.UInt16,
    sizeTableOffset: objc.UInt32,
    trakTable: [1]TrakTableEntry,
};

pub const TrakTable = extern struct {
    version: objc.Fixed,
    format: objc.UInt16,
    horizOffset: objc.UInt16,
    vertOffset: objc.UInt16,
};

pub const anon12941 = enum(u32) {
    kKERNTag = 1801810542,
    kKERNCurrentVersion = 65536,
    kKERNVertical = 32768,
    kKERNResetCrossStream = 32768,
    kKERNCrossStream = 16384,
    kKERNVariation = 8192,
    kKERNUnusedBits = 7936,
    kKERNFormatMask = 255,
};

pub const anon13051 = enum(u32) {
    kKERNOrderedList = 0,
    kKERNStateTable = 1,
    kKERNSimpleArray = 2,
    kKERNIndexArray = 3,
};

pub const anon13131 = enum(u32) {
    kKERNLineStart = 1,
    kKERNLineEndKerning = 2,
    kKERNNoCrossKerning = 4,
    kKERNNotesRequested = 8,
    kKERNNoStakeNote = 1,
    kKERNCrossStreamResetNote = 2,
    kKERNNotApplied = 1,
};

pub const KernTableFormat = objc.UInt8;

pub const KernSubtableInfo = objc.UInt16;

pub const KernKerningValue = objc.SInt16;

pub const KernArrayOffset = objc.UInt16;

pub const KernVersion0Header = extern struct {
    version: objc.UInt16,
    nTables: objc.UInt16,
    firstSubtable: [1]objc.UInt16,
};

pub const KernTableHeader = extern struct {
    version: objc.Fixed,
    nTables: objc.SInt32,
    firstSubtable: [1]objc.UInt16,
};

pub const KernTableHeaderPtr = ?*KernTableHeader;

pub const KernTableHeaderHandle = ?*KernTableHeaderPtr;

pub const KernKerningPair = extern struct {
    left: objc.UInt16,
    right: objc.UInt16,
};

pub const KernOrderedListEntry = extern struct {
    pair: KernKerningPair,
    value: KernKerningValue,
};

pub const KernOrderedListEntryPtr = ?*KernOrderedListEntry;

pub const KernOrderedListHeader = extern struct {
    nPairs: objc.UInt16,
    searchRange: objc.UInt16,
    entrySelector: objc.UInt16,
    rangeShift: objc.UInt16,
    table: [1]objc.UInt16,
};

pub const KernStateHeader = extern struct {
    header: STHeader,
    valueTable: objc.UInt16,
    firstTable: [1]objc.UInt8,
};

pub const KernStateEntry = extern struct {
    newState: objc.UInt16,
    flags: objc.UInt16,
};

pub const KernOffsetTable = extern struct {
    firstGlyph: objc.UInt16,
    nGlyphs: objc.UInt16,
    offsetTable: [1]KernArrayOffset,
};

pub const KernOffsetTablePtr = ?*KernOffsetTable;

pub const KernSimpleArrayHeader = extern struct {
    rowWidth: objc.UInt16,
    leftOffsetTable: objc.UInt16,
    rightOffsetTable: objc.UInt16,
    theArray: KernArrayOffset,
    firstTable: [1]objc.UInt16,
};

pub const KernIndexArrayHeader = extern struct {
    glyphCount: objc.UInt16,
    kernValueCount: objc.UInt8,
    leftClassCount: objc.UInt8,
    rightClassCount: objc.UInt8,
    flags: objc.UInt8,
    kernValue: [1]objc.SInt16,
    leftClass: [1]objc.UInt8,
    rightClass: [1]objc.UInt8,
    kernIndex: [1]objc.UInt8,
};

pub const KernFormatSpecificHeader = extern union {
    orderedList: KernOrderedListHeader,
    stateTable: KernStateHeader,
    simpleArray: KernSimpleArrayHeader,
    indexArray: KernIndexArrayHeader,
};

pub const KernVersion0SubtableHeader = extern struct {
    version: objc.UInt16,
    length: objc.UInt16,
    stInfo: KernSubtableInfo,
    fsHeader: KernFormatSpecificHeader,
};

pub const KernSubtableHeader = extern struct {
    length: objc.SInt32,
    stInfo: KernSubtableInfo,
    tupleIndex: objc.SInt16,
    fsHeader: KernFormatSpecificHeader,
};

pub const KernSubtableHeaderPtr = ?*KernSubtableHeader;

pub const anon14691 = enum(i32) {
    kKERXTag = 1801810552,
    kKERXCurrentVersion = 131072,
    kKERXVertical = -2147483648,
    kKERXResetCrossStream = 32768,
    kKERXCrossStream = 1073741824,
    kKERXVariation = 536870912,
    kKERXDescending = 268435456,
    kKERXUnusedBits = 268435200,
    kKERXFormatMask = 255,
};

pub const anon14811 = enum(u32) {
    kKERXOrderedList = 0,
    kKERXStateTable = 1,
    kKERXSimpleArray = 2,
    kKERXControlPoint = 4,
    kKERXIndexArray = 6,
};

pub const anon14901 = enum(u32) {
    kKERXLineStart = 1,
    kKERXLineEndKerning = 2,
    kKERXNoCrossKerning = 4,
    kKERXNotesRequested = 8,
    kKERXNoStakeNote = 1,
    kKERXCrossStreamResetNote = 2,
    kKERXNotApplied = 1,
};

pub const anon15011 = enum(u32) {
    kKERXActionTypeMask = -1073741824,
    kKERXActionTypeControlPoints = 0,
    kKERXActionTypeAnchorPoints = 1073741824,
    kKERXActionTypeCoordinates = -2147483648,
    kKERXUnusedFlags = 1056964608,
    kKERXActionOffsetMask = 16777215,
};

pub const anon15111 = enum(u32) {
    kKERXValuesAreLong = 1,
};

pub const KerxSubtableCoverage = objc.UInt32;

pub const KerxArrayOffset = objc.UInt32;

pub const KerxTableHeader = extern struct {
    version: objc.Fixed,
    nTables: objc.UInt32,
    firstSubtable: [1]objc.UInt32,
};

pub const KerxTableHeaderPtr = ?*KerxTableHeader;

pub const KerxTableHeaderHandle = ?*KerxTableHeaderPtr;

pub const KerxKerningPair = extern struct {
    left: objc.UInt16,
    right: objc.UInt16,
};

pub const KerxOrderedListEntry = extern struct {
    pair: KerxKerningPair,
    value: KernKerningValue,
};

pub const KerxOrderedListEntryPtr = ?*KerxOrderedListEntry;

pub const KerxOrderedListHeader = extern struct {
    nPairs: objc.UInt32,
    searchRange: objc.UInt32,
    entrySelector: objc.UInt32,
    rangeShift: objc.UInt32,
    table: [1]objc.UInt32,
};

pub const KerxStateHeader = extern struct {
    header: STXHeader,
    valueTable: objc.UInt32,
    firstTable: [1]objc.UInt8,
};

pub const KerxStateEntry = extern struct {
    newState: objc.UInt16,
    flags: objc.UInt16,
    valueIndex: objc.UInt16,
};

pub const KerxControlPointHeader = extern struct {
    header: STXHeader,
    flags: objc.UInt32,
    firstTable: [1]objc.UInt8,
};

pub const KerxControlPointEntry = extern struct {
    newState: objc.UInt16,
    flags: objc.UInt16,
    actionIndex: objc.UInt16,
};

pub const KerxControlPointAction = extern struct {
    markControlPoint: objc.UInt16,
    currControlPoint: objc.UInt16,
};

pub const KerxAnchorPointAction = extern struct {
    markAnchorPoint: objc.UInt16,
    currAnchorPoint: objc.UInt16,
};

pub const KerxCoordinateAction = extern struct {
    markX: objc.UInt16,
    markY: objc.UInt16,
    currX: objc.UInt16,
    currY: objc.UInt16,
};

pub const KerxSimpleArrayHeader = extern struct {
    rowWidth: objc.UInt32,
    leftOffsetTable: objc.UInt32,
    rightOffsetTable: objc.UInt32,
    theArray: KerxArrayOffset,
    firstTable: [1]objc.UInt32,
};

pub const KerxIndexArrayHeader = extern struct {
    flags: objc.UInt32,
    rowCount: objc.UInt16,
    columnCount: objc.UInt16,
    rowIndexTableOffset: objc.UInt32,
    columnIndexTableOffset: objc.UInt32,
    kerningArrayOffset: objc.UInt32,
    kerningVectorOffset: objc.UInt32,
};

pub const KerxFormatSpecificHeader = extern union {
    orderedList: KerxOrderedListHeader,
    stateTable: KerxStateHeader,
    simpleArray: KerxSimpleArrayHeader,
    indexArray: KerxIndexArrayHeader,
    controlPoint: KerxControlPointHeader,
};

pub const KerxSubtableHeader = extern struct {
    length: objc.UInt32,
    stInfo: KerxSubtableCoverage,
    tupleCount: objc.UInt32,
    fsHeader: KerxFormatSpecificHeader,
};

pub const KerxSubtableHeaderPtr = ?*KerxSubtableHeader;

pub const anon16541 = enum(u32) {
    kBSLNTag = 1651731566,
    kBSLNCurrentVersion = 65536,
    kBSLNDistanceFormatNoMap = 0,
    kBSLNDistanceFormatWithMap = 1,
    kBSLNControlPointFormatNoMap = 2,
    kBSLNControlPointFormatWithMap = 3,
};

pub const anon16641 = enum(u32) {
    kBSLNRomanBaseline = 0,
    kBSLNIdeographicCenterBaseline = 1,
    kBSLNIdeographicLowBaseline = 2,
    kBSLNHangingBaseline = 3,
    kBSLNMathBaseline = 4,
    kBSLNIdeographicHighBaseline = 5,
    kBSLNLastBaseline = 31,
    kBSLNNumBaselineClasses = 32,
    kBSLNNoBaseline = 255,
    kBSLNNoBaselineOverride = 255,
};

pub const BslnBaselineClass = objc.UInt32;

pub const BslnBaselineRecord = [32]objc.Fixed;

pub const BslnFormat0Part = extern struct {
    deltas: [32]objc.SInt16,
};

pub const BslnFormat1Part = extern struct {
    deltas: [32]objc.SInt16,
    mappingData: SFNTLookupTable,
};

pub const BslnFormat2Part = extern struct {
    stdGlyph: objc.UInt16,
    ctlPoints: [32]objc.SInt16,
};

pub const BslnFormat3Part = extern struct {
    stdGlyph: objc.UInt16,
    ctlPoints: [32]objc.SInt16,
    mappingData: SFNTLookupTable,
};

pub const BslnFormatUnion = extern union {
    fmt0Part: BslnFormat0Part,
    fmt1Part: BslnFormat1Part,
    fmt2Part: BslnFormat2Part,
    fmt3Part: BslnFormat3Part,
};

pub const BslnTableFormat = objc.UInt16;

pub const BslnTable = extern struct {
    version: objc.Fixed,
    format: BslnTableFormat,
    defaultBaseline: objc.UInt16,
    parts: BslnFormatUnion,
};

pub const BslnTablePtr = ?*BslnTable;

pub const ALMXHeader = extern struct {
    Version: objc.Fixed,
    Flags: objc.UInt16,
    NMasters: objc.UInt16,
    FirstGlyph: objc.UInt16,
    LastGlyph: objc.UInt16,
    lookup: SFNTLookupTable,
};

pub const ALMXGlyphEntry = extern struct {
    GlyphIndexOffset: objc.SInt16,
    HorizontalAdvance: objc.SInt16,
    XOffsetToHOrigin: objc.SInt16,
    VerticalAdvance: objc.SInt16,
    YOffsetToVOrigin: objc.SInt16,
};

pub const ROTAHeader = extern struct {
    Version: objc.Fixed,
    Flags: objc.UInt16,
    NMasters: objc.UInt16,
    FirstGlyph: objc.UInt16,
    LastGlyph: objc.UInt16,
    lookup: SFNTLookupTable,
};

pub const ROTAGlyphEntry = extern struct {
    GlyphIndexOffset: objc.SInt16,
    HBaselineOffset: objc.SInt16,
    VBaselineOffset: objc.SInt16,
};

pub const anon17801 = enum(u32) {
    kANKRCurrentVersion = 0,
};

pub const AnchorPoint = extern struct {
    x: objc.SInt16,
    y: objc.SInt16,
};

pub const AnchorPointTable = extern struct {
    nPoints: objc.UInt32,
    points: [1]AnchorPoint,
};

pub const AnkrTable = extern struct {
    version: objc.UInt16,
    flags: objc.UInt16,
    lookupTableOffset: objc.UInt32,
    anchorPointTableOffset: objc.UInt32,
};

pub const anon18071 = enum(u32) {
    kLTAGCurrentVersion = 1,
};

pub const LtagStringRange = extern struct {
    offset: objc.UInt16,
    length: objc.UInt16,
};

pub const LtagTable = extern struct {
    version: objc.UInt32,
    flags: objc.UInt32,
    numTags: objc.UInt32,
    tagRange: [1]LtagStringRange,
};

pub const sfntDirectoryEntry = extern struct {
    tableTag: objc.FourCharCode,
    checkSum: objc.UInt32,
    offset: objc.UInt32,
    length: objc.UInt32,
};

pub const sfntDirectory = extern struct {
    format: objc.FourCharCode,
    numOffsets: objc.UInt16,
    searchRange: objc.UInt16,
    entrySelector: objc.UInt16,
    rangeShift: objc.UInt16,
    table: [1]sfntDirectoryEntry,
};

pub const anon481 = enum(u32) {
    cmapFontTableTag = 1668112752,
};

pub const anon521 = enum(u32) {
    kFontUnicodePlatform = 0,
    kFontMacintoshPlatform = 1,
    kFontReservedPlatform = 2,
    kFontMicrosoftPlatform = 3,
    kFontCustomPlatform = 4,
};

pub const anon601 = enum(u32) {
    kFontUnicodeDefaultSemantics = 0,
    kFontUnicodeV1_1Semantics = 1,
    kFontISO10646_1993Semantics = 2,
    kFontUnicodeV2_0BMPOnlySemantics = 3,
    kFontUnicodeV2_0FullCoverageSemantics = 4,
    kFontUnicodeV4_0VariationSequenceSemantics = 5,
    kFontUnicode_FullRepertoire = 6,
};

pub const anon1121 = enum(u32) {
    kFontMicrosoftSymbolScript = 0,
    kFontMicrosoftStandardScript = 1,
    kFontMicrosoftUCS4Script = 10,
};

pub const anon1191 = enum(u32) {
    kFontCustom8BitScript = 0,
    kFontCustom816BitScript = 1,
    kFontCustom16BitScript = 2,
};

pub const anon1261 = enum(u32) {
    kFontEnglishLanguage = 0,
    kFontFrenchLanguage = 1,
    kFontGermanLanguage = 2,
    kFontItalianLanguage = 3,
    kFontDutchLanguage = 4,
    kFontSwedishLanguage = 5,
    kFontSpanishLanguage = 6,
    kFontDanishLanguage = 7,
    kFontPortugueseLanguage = 8,
    kFontNorwegianLanguage = 9,
    kFontHebrewLanguage = 10,
    kFontJapaneseLanguage = 11,
    kFontArabicLanguage = 12,
    kFontFinnishLanguage = 13,
    kFontGreekLanguage = 14,
    kFontIcelandicLanguage = 15,
    kFontMalteseLanguage = 16,
    kFontTurkishLanguage = 17,
    kFontCroatianLanguage = 18,
    kFontTradChineseLanguage = 19,
    kFontUrduLanguage = 20,
    kFontHindiLanguage = 21,
    kFontThaiLanguage = 22,
    kFontKoreanLanguage = 23,
    kFontLithuanianLanguage = 24,
    kFontPolishLanguage = 25,
    kFontHungarianLanguage = 26,
    kFontEstonianLanguage = 27,
    kFontLettishLanguage = 28,
    kFontLatvianLanguage = 28,
    kFontSaamiskLanguage = 29,
    kFontLappishLanguage = 29,
    kFontFaeroeseLanguage = 30,
    kFontFarsiLanguage = 31,
    kFontPersianLanguage = 31,
    kFontRussianLanguage = 32,
    kFontSimpChineseLanguage = 33,
    kFontFlemishLanguage = 34,
    kFontIrishLanguage = 35,
    kFontAlbanianLanguage = 36,
    kFontRomanianLanguage = 37,
    kFontCzechLanguage = 38,
    kFontSlovakLanguage = 39,
    kFontSlovenianLanguage = 40,
    kFontYiddishLanguage = 41,
    kFontSerbianLanguage = 42,
    kFontMacedonianLanguage = 43,
    kFontBulgarianLanguage = 44,
    kFontUkrainianLanguage = 45,
    kFontByelorussianLanguage = 46,
    kFontUzbekLanguage = 47,
    kFontKazakhLanguage = 48,
    kFontAzerbaijaniLanguage = 49,
    kFontAzerbaijanArLanguage = 50,
    kFontArmenianLanguage = 51,
    kFontGeorgianLanguage = 52,
    kFontMoldavianLanguage = 53,
    kFontKirghizLanguage = 54,
    kFontTajikiLanguage = 55,
    kFontTurkmenLanguage = 56,
    kFontMongolianLanguage = 57,
    kFontMongolianCyrLanguage = 58,
    kFontPashtoLanguage = 59,
    kFontKurdishLanguage = 60,
    kFontKashmiriLanguage = 61,
    kFontSindhiLanguage = 62,
    kFontTibetanLanguage = 63,
    kFontNepaliLanguage = 64,
    kFontSanskritLanguage = 65,
    kFontMarathiLanguage = 66,
    kFontBengaliLanguage = 67,
    kFontAssameseLanguage = 68,
    kFontGujaratiLanguage = 69,
    kFontPunjabiLanguage = 70,
    kFontOriyaLanguage = 71,
    kFontMalayalamLanguage = 72,
    kFontKannadaLanguage = 73,
    kFontTamilLanguage = 74,
    kFontTeluguLanguage = 75,
    kFontSinhaleseLanguage = 76,
    kFontBurmeseLanguage = 77,
    kFontKhmerLanguage = 78,
    kFontLaoLanguage = 79,
    kFontVietnameseLanguage = 80,
    kFontIndonesianLanguage = 81,
    kFontTagalogLanguage = 82,
    kFontMalayRomanLanguage = 83,
    kFontMalayArabicLanguage = 84,
    kFontAmharicLanguage = 85,
    kFontTigrinyaLanguage = 86,
    kFontGallaLanguage = 87,
    kFontOromoLanguage = 87,
    kFontSomaliLanguage = 88,
    kFontSwahiliLanguage = 89,
    kFontRuandaLanguage = 90,
    kFontRundiLanguage = 91,
    kFontChewaLanguage = 92,
    kFontMalagasyLanguage = 93,
    kFontEsperantoLanguage = 94,
    kFontWelshLanguage = 128,
    kFontBasqueLanguage = 129,
    kFontCatalanLanguage = 130,
    kFontLatinLanguage = 131,
    kFontQuechuaLanguage = 132,
    kFontGuaraniLanguage = 133,
    kFontAymaraLanguage = 134,
    kFontTatarLanguage = 135,
    kFontUighurLanguage = 136,
    kFontDzongkhaLanguage = 137,
    kFontJavaneseRomLanguage = 138,
    kFontSundaneseRomLanguage = 139,
};

pub const anon2421 = enum(u32) {
    kFontNoPlatformCode = -1,
    kFontNoScriptCode = -1,
    kFontNoLanguageCode = -1,
};

pub const sfntCMapSubHeader = extern struct {
    format: objc.UInt16,
    length: objc.UInt16,
    languageID: objc.UInt16,
};

pub const sfntCMapExtendedSubHeader = extern struct {
    format: objc.UInt16,
    reserved: objc.UInt16,
    length: objc.UInt32,
    language: objc.UInt32,
};

pub const anon2651 = enum(u32) {
    sizeof_sfntCMapExtendedSubHeader = 12,
};

pub const sfntCMapEncoding = extern struct {
    platformID: objc.UInt16,
    scriptID: objc.UInt16,
    offset: objc.UInt32,
};

pub const anon2751 = enum(u32) {
    sizeof_sfntCMapEncoding = 8,
};

pub const sfntCMapHeader = extern struct {
    version: objc.UInt16,
    numTables: objc.UInt16,
    encoding: [1]sfntCMapEncoding,
};

pub const anon2851 = enum(u32) {
    sizeof_sfntCMapHeader = 4,
};

pub const anon2941 = enum(u32) {
    kFontCopyrightName = 0,
    kFontFamilyName = 1,
    kFontStyleName = 2,
    kFontUniqueName = 3,
    kFontFullName = 4,
    kFontVersionName = 5,
    kFontPostscriptName = 6,
    kFontTrademarkName = 7,
    kFontManufacturerName = 8,
    kFontDesignerName = 9,
    kFontDescriptionName = 10,
    kFontVendorURLName = 11,
    kFontDesignerURLName = 12,
    kFontLicenseDescriptionName = 13,
    kFontLicenseInfoURLName = 14,
    kFontPreferredFamilyName = 16,
    kFontPreferredSubfamilyName = 17,
    kFontMacCompatibleFullName = 18,
    kFontSampleTextName = 19,
    kFontPostScriptCIDName = 20,
    kFontLastReservedName = 255,
};

pub const anon3201 = enum(u32) {
    kFontNoNameCode = -1,
};

pub const sfntNameRecord = extern struct {
    platformID: objc.UInt16,
    scriptID: objc.UInt16,
    languageID: objc.UInt16,
    nameID: objc.UInt16,
    length: objc.UInt16,
    offset: objc.UInt16,
};

pub const anon3331 = enum(u32) {
    sizeof_sfntNameRecord = 12,
};

pub const sfntNameHeader = extern struct {
    format: objc.UInt16,
    count: objc.UInt16,
    stringOffset: objc.UInt16,
    rec: [1]sfntNameRecord,
};

pub const anon3441 = enum(u32) {
    sizeof_sfntNameHeader = 6,
};

pub const anon3491 = enum(u32) {
    variationFontTableTag = 1719034226,
};

pub const sfntVariationAxis = extern struct {
    axisTag: objc.FourCharCode,
    minValue: objc.Fixed,
    defaultValue: objc.Fixed,
    maxValue: objc.Fixed,
    flags: objc.SInt16,
    nameID: objc.SInt16,
};

pub const anon3631 = enum(u32) {
    sizeof_sfntVariationAxis = 20,
};

pub const sfntInstance = extern struct {
    nameID: objc.SInt16,
    flags: objc.SInt16,
    coord: [1]objc.Fixed,
};

pub const anon3751 = enum(u32) {
    sizeof_sfntInstance = 4,
};

pub const sfntVariationHeader = extern struct {
    version: objc.Fixed,
    offsetToData: objc.UInt16,
    countSizePairs: objc.UInt16,
    axisCount: objc.UInt16,
    axisSize: objc.UInt16,
    instanceCount: objc.UInt16,
    instanceSize: objc.UInt16,
    axis: [1]sfntVariationAxis,
    instance: [1]sfntInstance,
};

pub const sfntFontDescriptor = extern struct {
    name: objc.FourCharCode,
    value: objc.Fixed,
};

pub const sfntDescriptorHeader = extern struct {
    version: objc.Fixed,
    descriptorCount: objc.SInt32,
    descriptor: [1]sfntFontDescriptor,
};

pub const anon4121 = enum(u32) {
    sizeof_sfntDescriptorHeader = 8,
};

pub const anon4171 = enum(u32) {
    featureFontTableTag = 1717920116,
};

pub const sfntFeatureName = extern struct {
    featureType: objc.UInt16,
    settingCount: objc.UInt16,
    offsetToSettings: objc.SInt32,
    featureFlags: objc.UInt16,
    nameID: objc.SInt16,
};

pub const sfntFontFeatureSetting = extern struct {
    setting: objc.UInt16,
    nameID: objc.SInt16,
};

pub const sfntFontRunFeature = extern struct {
    featureType: objc.UInt16,
    setting: objc.UInt16,
};

pub const sfntFeatureHeader = extern struct {
    version: objc.SInt32,
    featureNameCount: objc.UInt16,
    featureSetCount: objc.UInt16,
    reserved: objc.SInt32,
    names: [1]sfntFeatureName,
    settings: [1]sfntFontFeatureSetting,
    runs: [1]sfntFontRunFeature,
};

pub const anon4501 = enum(u32) {
    os2FontTableTag = 1330851634,
};

pub const anon4551 = enum(u32) {
    nonGlyphID = 65535,
};

pub const FontNameCode = objc.UInt32;

pub const FontPlatformCode = objc.UInt32;

pub const FontScriptCode = objc.UInt32;

pub const FontLanguageCode = objc.UInt32;

pub const FontVariation = extern struct {
    name: objc.FourCharCode,
    value: objc.Fixed,
};

extern "CoreText" fn CTGetCoreTextVersion() callconv(.C) objc.uint32_t;
pub const getCoreTextVersion = CTGetCoreTextVersion;
