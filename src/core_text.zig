// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const core_graphics = @import("core_graphics.zig"); // Framework dependency CoreGraphics.

pub const anon491 = u32;
pub const anon491_CTFontClassMaskShift: u32 = 28;

pub const FontSymbolicTraits = objc.uint32_t;
pub const FontSymbolicTraits_TraitItalic: objc.uint32_t = 1;
pub const FontSymbolicTraits_TraitBold: objc.uint32_t = 2;
pub const FontSymbolicTraits_TraitExpanded: objc.uint32_t = 32;
pub const FontSymbolicTraits_TraitCondensed: objc.uint32_t = 64;
pub const FontSymbolicTraits_TraitMonoSpace: objc.uint32_t = 1024;
pub const FontSymbolicTraits_TraitVertical: objc.uint32_t = 2048;
pub const FontSymbolicTraits_TraitUIOptimized: objc.uint32_t = 4096;
pub const FontSymbolicTraits_TraitColorGlyphs: objc.uint32_t = 8192;
pub const FontSymbolicTraits_TraitComposite: objc.uint32_t = 16384;
pub const FontSymbolicTraits_TraitClassMask: objc.uint32_t = -268435456;
pub const FontSymbolicTraits_ItalicTrait: objc.uint32_t = 1;
pub const FontSymbolicTraits_BoldTrait: objc.uint32_t = 2;
pub const FontSymbolicTraits_ExpandedTrait: objc.uint32_t = 32;
pub const FontSymbolicTraits_CondensedTrait: objc.uint32_t = 64;
pub const FontSymbolicTraits_MonoSpaceTrait: objc.uint32_t = 1024;
pub const FontSymbolicTraits_VerticalTrait: objc.uint32_t = 2048;
pub const FontSymbolicTraits_UIOptimizedTrait: objc.uint32_t = 4096;
pub const FontSymbolicTraits_ColorGlyphsTrait: objc.uint32_t = 8192;
pub const FontSymbolicTraits_CompositeTrait: objc.uint32_t = 16384;
pub const FontSymbolicTraits_ClassMaskTrait: objc.uint32_t = -268435456;

pub const FontStylisticClass = objc.uint32_t;
pub const FontStylisticClass_ClassUnknown: objc.uint32_t = 0;
pub const FontStylisticClass_ClassOldStyleSerifs: objc.uint32_t = 268435456;
pub const FontStylisticClass_ClassTransitionalSerifs: objc.uint32_t = 536870912;
pub const FontStylisticClass_ClassModernSerifs: objc.uint32_t = 805306368;
pub const FontStylisticClass_ClassClarendonSerifs: objc.uint32_t = 1073741824;
pub const FontStylisticClass_ClassSlabSerifs: objc.uint32_t = 1342177280;
pub const FontStylisticClass_ClassFreeformSerifs: objc.uint32_t = 1879048192;
pub const FontStylisticClass_ClassSansSerif: objc.uint32_t = -2147483648;
pub const FontStylisticClass_ClassOrnamentals: objc.uint32_t = -1879048192;
pub const FontStylisticClass_ClassScripts: objc.uint32_t = -1610612736;
pub const FontStylisticClass_ClassSymbolic: objc.uint32_t = -1073741824;
pub const FontStylisticClass_UnknownClass: objc.uint32_t = 0;
pub const FontStylisticClass_OldStyleSerifsClass: objc.uint32_t = 268435456;
pub const FontStylisticClass_TransitionalSerifsClass: objc.uint32_t = 536870912;
pub const FontStylisticClass_ModernSerifsClass: objc.uint32_t = 805306368;
pub const FontStylisticClass_ClarendonSerifsClass: objc.uint32_t = 1073741824;
pub const FontStylisticClass_SlabSerifsClass: objc.uint32_t = 1342177280;
pub const FontStylisticClass_FreeformSerifsClass: objc.uint32_t = 1879048192;
pub const FontStylisticClass_SansSerifClass: objc.uint32_t = -2147483648;
pub const FontStylisticClass_OrnamentalsClass: objc.uint32_t = -1879048192;
pub const FontStylisticClass_ScriptsClass: objc.uint32_t = -1610612736;
pub const FontStylisticClass_SymbolicClass: objc.uint32_t = -1073741824;

pub const __CTFontDescriptor = extern struct {};

pub const FontDescriptorRef = __CTFontDescriptor;

extern "CoreText" fn CTFontDescriptorGetTypeID() callconv(.C) core_foundation.TypeID;
pub const fontDescriptorGetTypeID = CTFontDescriptorGetTypeID;

pub const FontOrientation = objc.uint32_t;
pub const FontOrientation_Default: objc.uint32_t = 0;
pub const FontOrientation_Horizontal: objc.uint32_t = 1;
pub const FontOrientation_Vertical: objc.uint32_t = 2;
pub const FontOrientation_DefaultOrientation: objc.uint32_t = 0;
pub const FontOrientation_HorizontalOrientation: objc.uint32_t = 1;
pub const FontOrientation_VerticalOrientation: objc.uint32_t = 2;

pub const FontFormat = objc.uint32_t;
pub const FontFormat_Unrecognized: objc.uint32_t = 0;
pub const FontFormat_OpenTypePostScript: objc.uint32_t = 1;
pub const FontFormat_OpenTypeTrueType: objc.uint32_t = 2;
pub const FontFormat_TrueType: objc.uint32_t = 3;
pub const FontFormat_PostScript: objc.uint32_t = 4;
pub const FontFormat_Bitmap: objc.uint32_t = 5;

pub const anon2541 = u32;
pub const anon2541_CTFontPrioritySystem: u32 = 10000;
pub const anon2541_CTFontPriorityNetwork: u32 = 20000;
pub const anon2541_CTFontPriorityComputer: u32 = 30000;
pub const anon2541_CTFontPriorityUser: u32 = 40000;
pub const anon2541_CTFontPriorityDynamic: u32 = 50000;
pub const anon2541_CTFontPriorityProcess: u32 = 60000;
pub const anon2541_sizeof_sfntCMapSubHeader: u32 = 6;

pub const FontPriority = objc.uint32_t;

extern "CoreText" fn CTFontDescriptorCreateWithNameAndSize(name: core_foundation.StringRef, size: core_foundation.CGFloat) callconv(.C) FontDescriptorRef;
pub const fontDescriptorCreateWithNameAndSize = CTFontDescriptorCreateWithNameAndSize;

extern "CoreText" fn CTFontDescriptorCreateWithAttributes(attributes: core_foundation.DictionaryRef) callconv(.C) FontDescriptorRef;
pub const fontDescriptorCreateWithAttributes = CTFontDescriptorCreateWithAttributes;

extern "CoreText" fn CTFontDescriptorCreateCopyWithAttributes(original: FontDescriptorRef, attributes: core_foundation.DictionaryRef) callconv(.C) FontDescriptorRef;
pub const fontDescriptorCreateCopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes;

extern "CoreText" fn CTFontDescriptorCreateCopyWithFamily(original: FontDescriptorRef, family: core_foundation.StringRef) callconv(.C) FontDescriptorRef;
pub const fontDescriptorCreateCopyWithFamily = CTFontDescriptorCreateCopyWithFamily;

extern "CoreText" fn CTFontDescriptorCreateCopyWithSymbolicTraits(original: FontDescriptorRef, symTraitValue: FontSymbolicTraits, symTraitMask: FontSymbolicTraits) callconv(.C) FontDescriptorRef;
pub const fontDescriptorCreateCopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits;

extern "CoreText" fn CTFontDescriptorCreateCopyWithVariation(original: FontDescriptorRef, variationIdentifier: core_foundation.NumberRef, variationValue: core_foundation.CGFloat) callconv(.C) FontDescriptorRef;
pub const fontDescriptorCreateCopyWithVariation = CTFontDescriptorCreateCopyWithVariation;

extern "CoreText" fn CTFontDescriptorCreateCopyWithFeature(original: FontDescriptorRef, featureTypeIdentifier: core_foundation.NumberRef, featureSelectorIdentifier: core_foundation.NumberRef) callconv(.C) FontDescriptorRef;
pub const fontDescriptorCreateCopyWithFeature = CTFontDescriptorCreateCopyWithFeature;

extern "CoreText" fn CTFontDescriptorCreateMatchingFontDescriptors(descriptor: FontDescriptorRef, mandatoryAttributes: core_foundation.SetRef) callconv(.C) core_foundation.ArrayRef;
pub const fontDescriptorCreateMatchingFontDescriptors = CTFontDescriptorCreateMatchingFontDescriptors;

extern "CoreText" fn CTFontDescriptorCreateMatchingFontDescriptor(descriptor: FontDescriptorRef, mandatoryAttributes: core_foundation.SetRef) callconv(.C) FontDescriptorRef;
pub const fontDescriptorCreateMatchingFontDescriptor = CTFontDescriptorCreateMatchingFontDescriptor;

pub const FontDescriptorMatchingState = objc.uint32_t;
pub const FontDescriptorMatchingState_DidBegin: objc.uint32_t = 0;
pub const FontDescriptorMatchingState_DidFinish: objc.uint32_t = 1;
pub const FontDescriptorMatchingState_WillBeginQuerying: objc.uint32_t = 2;
pub const FontDescriptorMatchingState_Stalled: objc.uint32_t = 3;
pub const FontDescriptorMatchingState_WillBeginDownloading: objc.uint32_t = 4;
pub const FontDescriptorMatchingState_Downloading: objc.uint32_t = 5;
pub const FontDescriptorMatchingState_DidFinishDownloading: objc.uint32_t = 6;
pub const FontDescriptorMatchingState_DidMatch: objc.uint32_t = 7;
pub const FontDescriptorMatchingState_DidFailWithError: objc.uint32_t = 8;

pub const FontDescriptorProgressHandler = *const fn (FontDescriptorMatchingState, core_foundation.DictionaryRef) callconv(.C) i32;

extern "CoreText" fn CTFontDescriptorMatchFontDescriptorsWithProgressHandler() callconv(.C) i32;
pub const fontDescriptorMatchFontDescriptorsWithProgressHandler = CTFontDescriptorMatchFontDescriptorsWithProgressHandler;

extern "CoreText" fn CTFontDescriptorCopyAttributes(descriptor: FontDescriptorRef) callconv(.C) core_foundation.DictionaryRef;
pub const fontDescriptorCopyAttributes = CTFontDescriptorCopyAttributes;

extern "CoreText" fn CTFontDescriptorCopyAttribute(descriptor: FontDescriptorRef, attribute: core_foundation.StringRef) callconv(.C) core_foundation.TypeRef;
pub const fontDescriptorCopyAttribute = CTFontDescriptorCopyAttribute;

extern "CoreText" fn CTFontDescriptorCopyLocalizedAttribute(descriptor: FontDescriptorRef, attribute: core_foundation.StringRef, language: ?*core_foundation.StringRef) callconv(.C) core_foundation.TypeRef;
pub const fontDescriptorCopyLocalizedAttribute = CTFontDescriptorCopyLocalizedAttribute;

pub const __CTFont = extern struct {};

pub const FontRef = __CTFont;

extern "CoreText" fn CTFontGetTypeID() callconv(.C) core_foundation.TypeID;
pub const fontGetTypeID = CTFontGetTypeID;

extern "CoreText" fn CTFontCreateWithName(name: core_foundation.StringRef, size: core_foundation.CGFloat, matrix: ?*core_foundation.CGAffineTransform) callconv(.C) FontRef;
pub const fontCreateWithName = CTFontCreateWithName;

extern "CoreText" fn CTFontCreateWithFontDescriptor(descriptor: FontDescriptorRef, size: core_foundation.CGFloat, matrix: ?*core_foundation.CGAffineTransform) callconv(.C) FontRef;
pub const fontCreateWithFontDescriptor = CTFontCreateWithFontDescriptor;

pub const FontOptions = core_foundation.OptionFlags;
pub const FontOptions_Default: core_foundation.OptionFlags = 0;
pub const FontOptions_PreventAutoActivation: core_foundation.OptionFlags = 1;
pub const FontOptions_PreventAutoDownload: core_foundation.OptionFlags = 2;
pub const FontOptions_PreferSystemFont: core_foundation.OptionFlags = 4;

extern "CoreText" fn CTFontCreateWithNameAndOptions(
    name: core_foundation.StringRef,
    size: core_foundation.CGFloat,
    matrix: ?*core_foundation.CGAffineTransform,
    options: FontOptions,
) callconv(.C) FontRef;
pub const fontCreateWithNameAndOptions = CTFontCreateWithNameAndOptions;

extern "CoreText" fn CTFontCreateWithFontDescriptorAndOptions(
    descriptor: FontDescriptorRef,
    size: core_foundation.CGFloat,
    matrix: ?*core_foundation.CGAffineTransform,
    options: FontOptions,
) callconv(.C) FontRef;
pub const fontCreateWithFontDescriptorAndOptions = CTFontCreateWithFontDescriptorAndOptions;

pub const FontUIFontType = objc.uint32_t;
pub const FontUIFontType_None: objc.uint32_t = -1;
pub const FontUIFontType_User: objc.uint32_t = 0;
pub const FontUIFontType_UserFixedPitch: objc.uint32_t = 1;
pub const FontUIFontType_System: objc.uint32_t = 2;
pub const FontUIFontType_EmphasizedSystem: objc.uint32_t = 3;
pub const FontUIFontType_SmallSystem: objc.uint32_t = 4;
pub const FontUIFontType_SmallEmphasizedSystem: objc.uint32_t = 5;
pub const FontUIFontType_MiniSystem: objc.uint32_t = 6;
pub const FontUIFontType_MiniEmphasizedSystem: objc.uint32_t = 7;
pub const FontUIFontType_Views: objc.uint32_t = 8;
pub const FontUIFontType_Application: objc.uint32_t = 9;
pub const FontUIFontType_Label: objc.uint32_t = 10;
pub const FontUIFontType_MenuTitle: objc.uint32_t = 11;
pub const FontUIFontType_MenuItem: objc.uint32_t = 12;
pub const FontUIFontType_MenuItemMark: objc.uint32_t = 13;
pub const FontUIFontType_MenuItemCmdKey: objc.uint32_t = 14;
pub const FontUIFontType_WindowTitle: objc.uint32_t = 15;
pub const FontUIFontType_PushButton: objc.uint32_t = 16;
pub const FontUIFontType_UtilityWindowTitle: objc.uint32_t = 17;
pub const FontUIFontType_AlertHeader: objc.uint32_t = 18;
pub const FontUIFontType_SystemDetail: objc.uint32_t = 19;
pub const FontUIFontType_EmphasizedSystemDetail: objc.uint32_t = 20;
pub const FontUIFontType_Toolbar: objc.uint32_t = 21;
pub const FontUIFontType_SmallToolbar: objc.uint32_t = 22;
pub const FontUIFontType_Message: objc.uint32_t = 23;
pub const FontUIFontType_Palette: objc.uint32_t = 24;
pub const FontUIFontType_ToolTip: objc.uint32_t = 25;
pub const FontUIFontType_ControlContent: objc.uint32_t = 26;
pub const FontUIFontType_NoFontType: objc.uint32_t = -1;
pub const FontUIFontType_UserFontType: objc.uint32_t = 0;
pub const FontUIFontType_UserFixedPitchFontType: objc.uint32_t = 1;
pub const FontUIFontType_SystemFontType: objc.uint32_t = 2;
pub const FontUIFontType_EmphasizedSystemFontType: objc.uint32_t = 3;
pub const FontUIFontType_SmallSystemFontType: objc.uint32_t = 4;
pub const FontUIFontType_SmallEmphasizedSystemFontType: objc.uint32_t = 5;
pub const FontUIFontType_MiniSystemFontType: objc.uint32_t = 6;
pub const FontUIFontType_MiniEmphasizedSystemFontType: objc.uint32_t = 7;
pub const FontUIFontType_ViewsFontType: objc.uint32_t = 8;
pub const FontUIFontType_ApplicationFontType: objc.uint32_t = 9;
pub const FontUIFontType_LabelFontType: objc.uint32_t = 10;
pub const FontUIFontType_MenuTitleFontType: objc.uint32_t = 11;
pub const FontUIFontType_MenuItemFontType: objc.uint32_t = 12;
pub const FontUIFontType_MenuItemMarkFontType: objc.uint32_t = 13;
pub const FontUIFontType_MenuItemCmdKeyFontType: objc.uint32_t = 14;
pub const FontUIFontType_WindowTitleFontType: objc.uint32_t = 15;
pub const FontUIFontType_PushButtonFontType: objc.uint32_t = 16;
pub const FontUIFontType_UtilityWindowTitleFontType: objc.uint32_t = 17;
pub const FontUIFontType_AlertHeaderFontType: objc.uint32_t = 18;
pub const FontUIFontType_SystemDetailFontType: objc.uint32_t = 19;
pub const FontUIFontType_EmphasizedSystemDetailFontType: objc.uint32_t = 20;
pub const FontUIFontType_ToolbarFontType: objc.uint32_t = 21;
pub const FontUIFontType_SmallToolbarFontType: objc.uint32_t = 22;
pub const FontUIFontType_MessageFontType: objc.uint32_t = 23;
pub const FontUIFontType_PaletteFontType: objc.uint32_t = 24;
pub const FontUIFontType_ToolTipFontType: objc.uint32_t = 25;
pub const FontUIFontType_ControlContentFontType: objc.uint32_t = 26;

extern "CoreText" fn CTFontCreateUIFontForLanguage(uiType: FontUIFontType, size: core_foundation.CGFloat, language: core_foundation.StringRef) callconv(.C) FontRef;
pub const fontCreateUIFontForLanguage = CTFontCreateUIFontForLanguage;

extern "CoreText" fn CTFontCreateCopyWithAttributes(
    font: FontRef,
    size: core_foundation.CGFloat,
    matrix: ?*core_foundation.CGAffineTransform,
    attributes: FontDescriptorRef,
) callconv(.C) FontRef;
pub const fontCreateCopyWithAttributes = CTFontCreateCopyWithAttributes;

extern "CoreText" fn CTFontCreateCopyWithSymbolicTraits(
    font: FontRef,
    size: core_foundation.CGFloat,
    matrix: ?*core_foundation.CGAffineTransform,
    symTraitValue: FontSymbolicTraits,
    symTraitMask: FontSymbolicTraits,
) callconv(.C) FontRef;
pub const fontCreateCopyWithSymbolicTraits = CTFontCreateCopyWithSymbolicTraits;

extern "CoreText" fn CTFontCreateCopyWithFamily(
    font: FontRef,
    size: core_foundation.CGFloat,
    matrix: ?*core_foundation.CGAffineTransform,
    family: core_foundation.StringRef,
) callconv(.C) FontRef;
pub const fontCreateCopyWithFamily = CTFontCreateCopyWithFamily;

extern "CoreText" fn CTFontCreateForString(currentFont: FontRef, string: core_foundation.StringRef, range: core_foundation.Range) callconv(.C) FontRef;
pub const fontCreateForString = CTFontCreateForString;

extern "CoreText" fn CTFontCreateForStringWithLanguage(
    currentFont: FontRef,
    string: core_foundation.StringRef,
    range: core_foundation.Range,
    language: core_foundation.StringRef,
) callconv(.C) FontRef;
pub const fontCreateForStringWithLanguage = CTFontCreateForStringWithLanguage;

extern "CoreText" fn CTFontCopyFontDescriptor(font: FontRef) callconv(.C) FontDescriptorRef;
pub const fontCopyFontDescriptor = CTFontCopyFontDescriptor;

extern "CoreText" fn CTFontCopyAttribute(font: FontRef, attribute: core_foundation.StringRef) callconv(.C) core_foundation.TypeRef;
pub const fontCopyAttribute = CTFontCopyAttribute;

extern "CoreText" fn CTFontGetSize(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetSize = CTFontGetSize;

extern "CoreText" fn CTFontGetMatrix(font: FontRef) callconv(.C) core_foundation.CGAffineTransform;
pub const fontGetMatrix = CTFontGetMatrix;

extern "CoreText" fn CTFontGetSymbolicTraits(font: FontRef) callconv(.C) FontSymbolicTraits;
pub const fontGetSymbolicTraits = CTFontGetSymbolicTraits;

extern "CoreText" fn CTFontCopyTraits(font: FontRef) callconv(.C) core_foundation.DictionaryRef;
pub const fontCopyTraits = CTFontCopyTraits;

extern "CoreText" fn CTFontCopyDefaultCascadeListForLanguages(font: FontRef, languagePrefList: core_foundation.ArrayRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCopyDefaultCascadeListForLanguages = CTFontCopyDefaultCascadeListForLanguages;

extern "CoreText" fn CTFontCopyPostScriptName(font: FontRef) callconv(.C) core_foundation.StringRef;
pub const fontCopyPostScriptName = CTFontCopyPostScriptName;

extern "CoreText" fn CTFontCopyFamilyName(font: FontRef) callconv(.C) core_foundation.StringRef;
pub const fontCopyFamilyName = CTFontCopyFamilyName;

extern "CoreText" fn CTFontCopyFullName(font: FontRef) callconv(.C) core_foundation.StringRef;
pub const fontCopyFullName = CTFontCopyFullName;

extern "CoreText" fn CTFontCopyDisplayName(font: FontRef) callconv(.C) core_foundation.StringRef;
pub const fontCopyDisplayName = CTFontCopyDisplayName;

extern "CoreText" fn CTFontCopyName(font: FontRef, nameKey: core_foundation.StringRef) callconv(.C) core_foundation.StringRef;
pub const fontCopyName = CTFontCopyName;

extern "CoreText" fn CTFontCopyLocalizedName(font: FontRef, nameKey: core_foundation.StringRef, actualLanguage: ?*core_foundation.StringRef) callconv(.C) core_foundation.StringRef;
pub const fontCopyLocalizedName = CTFontCopyLocalizedName;

extern "CoreText" fn CTFontCopyCharacterSet(font: FontRef) callconv(.C) core_foundation.CharacterSetRef;
pub const fontCopyCharacterSet = CTFontCopyCharacterSet;

extern "CoreText" fn CTFontGetStringEncoding(font: FontRef) callconv(.C) core_foundation.StringEncoding;
pub const fontGetStringEncoding = CTFontGetStringEncoding;

extern "CoreText" fn CTFontCopySupportedLanguages(font: FontRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCopySupportedLanguages = CTFontCopySupportedLanguages;

extern "CoreText" fn CTFontGetGlyphsForCharacters() callconv(.C) i32;
pub const fontGetGlyphsForCharacters = CTFontGetGlyphsForCharacters;

extern "CoreText" fn CTFontGetAscent(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetAscent = CTFontGetAscent;

extern "CoreText" fn CTFontGetDescent(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetDescent = CTFontGetDescent;

extern "CoreText" fn CTFontGetLeading(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetLeading = CTFontGetLeading;

extern "CoreText" fn CTFontGetUnitsPerEm(font: FontRef) callconv(.C) u32;
pub const fontGetUnitsPerEm = CTFontGetUnitsPerEm;

extern "CoreText" fn CTFontGetGlyphCount(font: FontRef) callconv(.C) core_foundation.Index;
pub const fontGetGlyphCount = CTFontGetGlyphCount;

extern "CoreText" fn CTFontGetBoundingBox(font: FontRef) callconv(.C) core_foundation.CGRect;
pub const fontGetBoundingBox = CTFontGetBoundingBox;

extern "CoreText" fn CTFontGetUnderlinePosition(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetUnderlinePosition = CTFontGetUnderlinePosition;

extern "CoreText" fn CTFontGetUnderlineThickness(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetUnderlineThickness = CTFontGetUnderlineThickness;

extern "CoreText" fn CTFontGetSlantAngle(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetSlantAngle = CTFontGetSlantAngle;

extern "CoreText" fn CTFontGetCapHeight(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetCapHeight = CTFontGetCapHeight;

extern "CoreText" fn CTFontGetXHeight(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetXHeight = CTFontGetXHeight;

extern "CoreText" fn CTFontGetGlyphWithName(font: FontRef, glyphName: core_foundation.StringRef) callconv(.C) core_graphics.Glyph;
pub const fontGetGlyphWithName = CTFontGetGlyphWithName;

extern "CoreText" fn CTFontCopyNameForGlyph(font: FontRef, glyph: core_graphics.Glyph) callconv(.C) core_foundation.StringRef;
pub const fontCopyNameForGlyph = CTFontCopyNameForGlyph;

extern "CoreText" fn CTFontGetBoundingRectsForGlyphs(
    font: FontRef,
    orientation: FontOrientation,
    glyphs: ?*core_graphics.Glyph,
    boundingRects: ?*core_foundation.CGRect,
    count: core_foundation.Index,
) callconv(.C) core_foundation.CGRect;
pub const fontGetBoundingRectsForGlyphs = CTFontGetBoundingRectsForGlyphs;

extern "CoreText" fn CTFontGetOpticalBoundsForGlyphs(
    font: FontRef,
    glyphs: ?*core_graphics.Glyph,
    boundingRects: ?*core_foundation.CGRect,
    count: core_foundation.Index,
    options: core_foundation.OptionFlags,
) callconv(.C) core_foundation.CGRect;
pub const fontGetOpticalBoundsForGlyphs = CTFontGetOpticalBoundsForGlyphs;

extern "CoreText" fn CTFontGetAdvancesForGlyphs(
    font: FontRef,
    orientation: FontOrientation,
    glyphs: ?*core_graphics.Glyph,
    advances: ?*core_foundation.CGSize,
    count: core_foundation.Index,
) callconv(.C) f64;
pub const fontGetAdvancesForGlyphs = CTFontGetAdvancesForGlyphs;

extern "CoreText" fn CTFontGetVerticalTranslationsForGlyphs(
    font: FontRef,
    glyphs: ?*core_graphics.Glyph,
    translations: ?*core_foundation.CGSize,
    count: core_foundation.Index,
) callconv(.C) void;
pub const fontGetVerticalTranslationsForGlyphs = CTFontGetVerticalTranslationsForGlyphs;

extern "CoreText" fn CTFontCreatePathForGlyph(font: FontRef, glyph: core_graphics.Glyph, matrix: ?*core_foundation.CGAffineTransform) callconv(.C) core_graphics.PathRef;
pub const fontCreatePathForGlyph = CTFontCreatePathForGlyph;

extern "CoreText" fn CTFontCopyVariationAxes(font: FontRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCopyVariationAxes = CTFontCopyVariationAxes;

extern "CoreText" fn CTFontCopyVariation(font: FontRef) callconv(.C) core_foundation.DictionaryRef;
pub const fontCopyVariation = CTFontCopyVariation;

extern "CoreText" fn CTFontCopyFeatures(font: FontRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCopyFeatures = CTFontCopyFeatures;

extern "CoreText" fn CTFontCopyFeatureSettings(font: FontRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCopyFeatureSettings = CTFontCopyFeatureSettings;

extern "CoreText" fn CTFontCopyGraphicsFont(font: FontRef, attributes: ?*FontDescriptorRef) callconv(.C) core_graphics.FontRef;
pub const fontCopyGraphicsFont = CTFontCopyGraphicsFont;

extern "CoreText" fn CTFontCreateWithGraphicsFont(
    graphicsFont: core_graphics.FontRef,
    size: core_foundation.CGFloat,
    matrix: ?*core_foundation.CGAffineTransform,
    attributes: FontDescriptorRef,
) callconv(.C) FontRef;
pub const fontCreateWithGraphicsFont = CTFontCreateWithGraphicsFont;

pub const ATSFontRef = objc.UInt32;

extern "CoreText" fn CTFontGetPlatformFont(font: FontRef, attributes: ?*FontDescriptorRef) callconv(.C) ATSFontRef;
pub const fontGetPlatformFont = CTFontGetPlatformFont;

extern "CoreText" fn CTFontCreateWithPlatformFont(
    platformFont: ATSFontRef,
    size: core_foundation.CGFloat,
    matrix: ?*core_foundation.CGAffineTransform,
    attributes: FontDescriptorRef,
) callconv(.C) FontRef;
pub const fontCreateWithPlatformFont = CTFontCreateWithPlatformFont;

extern "CoreText" fn CTFontCreateWithQuickdrawInstance(
    name: objc.ConstStr255Param,
    identifier: objc.int16_t,
    style: objc.uint8_t,
    size: core_foundation.CGFloat,
) callconv(.C) FontRef;
pub const fontCreateWithQuickdrawInstance = CTFontCreateWithQuickdrawInstance;

pub const anon14481 = u32;
pub const anon14481_CTFontTableBASE: u32 = 1111577413;
pub const anon14481_CTFontTableCBDT: u32 = 1128416340;
pub const anon14481_CTFontTableCBLC: u32 = 1128418371;
pub const anon14481_CTFontTableCFF: u32 = 1128678944;
pub const anon14481_CTFontTableCFF2: u32 = 1128678962;
pub const anon14481_CTFontTableCOLR: u32 = 1129270354;
pub const anon14481_CTFontTableCPAL: u32 = 1129333068;
pub const anon14481_CTFontTableDSIG: u32 = 1146308935;
pub const anon14481_CTFontTableEBDT: u32 = 1161970772;
pub const anon14481_CTFontTableEBLC: u32 = 1161972803;
pub const anon14481_CTFontTableEBSC: u32 = 1161974595;
pub const anon14481_CTFontTableGDEF: u32 = 1195656518;
pub const anon14481_CTFontTableGPOS: u32 = 1196445523;
pub const anon14481_CTFontTableGSUB: u32 = 1196643650;
pub const anon14481_CTFontTableHVAR: u32 = 1213612370;
pub const anon14481_CTFontTableJSTF: u32 = 1246975046;
pub const anon14481_CTFontTableLTSH: u32 = 1280594760;
pub const anon14481_CTFontTableMATH: u32 = 1296127048;
pub const anon14481_CTFontTableMERG: u32 = 1296388679;
pub const anon14481_CTFontTableMVAR: u32 = 1297498450;
pub const anon14481_CTFontTableOS2: u32 = 1330851634;
pub const anon14481_CTFontTablePCLT: u32 = 1346587732;
pub const anon14481_CTFontTableSTAT: u32 = 1398030676;
pub const anon14481_CTFontTableSVG: u32 = 1398163232;
pub const anon14481_CTFontTableVDMX: u32 = 1447316824;
pub const anon14481_CTFontTableVORG: u32 = 1448038983;
pub const anon14481_CTFontTableVVAR: u32 = 1448493394;
pub const anon14481_CTFontTableZapf: u32 = 1516335206;
pub const anon14481_CTFontTableAcnt: u32 = 1633906292;
pub const anon14481_CTFontTableAnkr: u32 = 1634626418;
pub const anon14481_CTFontTableAvar: u32 = 1635148146;
pub const anon14481_CTFontTableBdat: u32 = 1650745716;
pub const anon14481_CTFontTableBhed: u32 = 1651008868;
pub const anon14481_CTFontTableBloc: u32 = 1651273571;
pub const anon14481_CTFontTableBsln: u32 = 1651731566;
pub const anon14481_CTFontTableCidg: u32 = 1667851367;
pub const anon14481_CTFontTableCmap: u32 = 1668112752;
pub const anon14481_CTFontTableCvar: u32 = 1668702578;
pub const anon14481_CTFontTableCvt: u32 = 1668707360;
pub const anon14481_CTFontTableFdsc: u32 = 1717859171;
pub const anon14481_CTFontTableFeat: u32 = 1717920116;
pub const anon14481_CTFontTableFmtx: u32 = 1718449272;
pub const anon14481_CTFontTableFond: u32 = 1718578788;
pub const anon14481_CTFontTableFpgm: u32 = 1718642541;
pub const anon14481_CTFontTableFvar: u32 = 1719034226;
pub const anon14481_CTFontTableGasp: u32 = 1734439792;
pub const anon14481_CTFontTableGlyf: u32 = 1735162214;
pub const anon14481_CTFontTableGvar: u32 = 1735811442;
pub const anon14481_CTFontTableHdmx: u32 = 1751412088;
pub const anon14481_CTFontTableHead: u32 = 1751474532;
pub const anon14481_CTFontTableHhea: u32 = 1751672161;
pub const anon14481_CTFontTableHmtx: u32 = 1752003704;
pub const anon14481_CTFontTableHsty: u32 = 1752396921;
pub const anon14481_CTFontTableJust: u32 = 1786082164;
pub const anon14481_CTFontTableKern: u32 = 1801810542;
pub const anon14481_CTFontTableKerx: u32 = 1801810552;
pub const anon14481_CTFontTableLcar: u32 = 1818452338;
pub const anon14481_CTFontTableLoca: u32 = 1819239265;
pub const anon14481_CTFontTableLtag: u32 = 1819566439;
pub const anon14481_CTFontTableMaxp: u32 = 1835104368;
pub const anon14481_CTFontTableMeta: u32 = 1835365473;
pub const anon14481_CTFontTableMort: u32 = 1836020340;
pub const anon14481_CTFontTableMorx: u32 = 1836020344;
pub const anon14481_CTFontTableName: u32 = 1851878757;
pub const anon14481_CTFontTableOpbd: u32 = 1869636196;
pub const anon14481_CTFontTablePost: u32 = 1886352244;
pub const anon14481_CTFontTablePrep: u32 = 1886545264;
pub const anon14481_CTFontTableProp: u32 = 1886547824;
pub const anon14481_CTFontTableSbit: u32 = 1935829364;
pub const anon14481_CTFontTableSbix: u32 = 1935829368;
pub const anon14481_CTFontTableTrak: u32 = 1953653099;
pub const anon14481_CTFontTableVhea: u32 = 1986553185;
pub const anon14481_CTFontTableVmtx: u32 = 1986884728;
pub const anon14481_CTFontTableXref: u32 = 2020762982;

pub const FontTableTag = objc.FourCharCode;

pub const FontTableOptions = objc.uint32_t;
pub const FontTableOptions_NoOptions: objc.uint32_t = 0;
pub const FontTableOptions_ExcludeSynthetic: objc.uint32_t = 1;

extern "CoreText" fn CTFontCopyAvailableTables(font: FontRef, options: FontTableOptions) callconv(.C) core_foundation.ArrayRef;
pub const fontCopyAvailableTables = CTFontCopyAvailableTables;

extern "CoreText" fn CTFontHasTable() callconv(.C) i32;
pub const fontHasTable = CTFontHasTable;

extern "CoreText" fn CTFontCopyTable(font: FontRef, table: FontTableTag, options: FontTableOptions) callconv(.C) core_foundation.DataRef;
pub const fontCopyTable = CTFontCopyTable;

extern "CoreText" fn CTFontDrawGlyphs(
    font: FontRef,
    glyphs: ?*core_graphics.Glyph,
    positions: ?*core_foundation.CGPoint,
    count: objc.size_t,
    context: core_graphics.ContextRef,
) callconv(.C) void;
pub const fontDrawGlyphs = CTFontDrawGlyphs;

extern "CoreText" fn CTFontGetLigatureCaretPositions(
    font: FontRef,
    glyph: core_graphics.Glyph,
    positions: ?*core_foundation.CGFloat,
    maxPositions: core_foundation.Index,
) callconv(.C) core_foundation.Index;
pub const fontGetLigatureCaretPositions = CTFontGetLigatureCaretPositions;

extern "CoreText" fn CTFontGetTypographicBoundsForAdaptiveImageProvider(font: FontRef, provider: ?*anyopaque) callconv(.C) core_foundation.CGRect;
pub const fontGetTypographicBoundsForAdaptiveImageProvider = CTFontGetTypographicBoundsForAdaptiveImageProvider;

extern "CoreText" fn CTFontDrawImageFromAdaptiveImageProviderAtPoint(
    font: FontRef,
    provider: ?*anyopaque,
    point: core_foundation.CGPoint,
    context: core_graphics.ContextRef,
) callconv(.C) void;
pub const fontDrawImageFromAdaptiveImageProviderAtPoint = CTFontDrawImageFromAdaptiveImageProviderAtPoint;

pub const __CTFontCollection = extern struct {};

pub const FontCollectionRef = __CTFontCollection;

pub const MutableFontCollectionRef = __CTFontCollection;

extern "CoreText" fn CTFontCollectionGetTypeID() callconv(.C) core_foundation.TypeID;
pub const fontCollectionGetTypeID = CTFontCollectionGetTypeID;

pub const FontCollectionSortDescriptorsCallback = core_foundation.ComparisonResult;

extern "CoreText" fn CTFontCollectionCreateFromAvailableFonts(options: core_foundation.DictionaryRef) callconv(.C) FontCollectionRef;
pub const fontCollectionCreateFromAvailableFonts = CTFontCollectionCreateFromAvailableFonts;

extern "CoreText" fn CTFontCollectionCreateWithFontDescriptors(queryDescriptors: core_foundation.ArrayRef, options: core_foundation.DictionaryRef) callconv(.C) FontCollectionRef;
pub const fontCollectionCreateWithFontDescriptors = CTFontCollectionCreateWithFontDescriptors;

extern "CoreText" fn CTFontCollectionCreateCopyWithFontDescriptors(original: FontCollectionRef, queryDescriptors: core_foundation.ArrayRef, options: core_foundation.DictionaryRef) callconv(.C) FontCollectionRef;
pub const fontCollectionCreateCopyWithFontDescriptors = CTFontCollectionCreateCopyWithFontDescriptors;

extern "CoreText" fn CTFontCollectionCreateMutableCopy(original: FontCollectionRef) callconv(.C) MutableFontCollectionRef;
pub const fontCollectionCreateMutableCopy = CTFontCollectionCreateMutableCopy;

extern "CoreText" fn CTFontCollectionCopyQueryDescriptors(collection: FontCollectionRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCollectionCopyQueryDescriptors = CTFontCollectionCopyQueryDescriptors;

extern "CoreText" fn CTFontCollectionSetQueryDescriptors(collection: MutableFontCollectionRef, descriptors: core_foundation.ArrayRef) callconv(.C) void;
pub const fontCollectionSetQueryDescriptors = CTFontCollectionSetQueryDescriptors;

extern "CoreText" fn CTFontCollectionCopyExclusionDescriptors(collection: FontCollectionRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCollectionCopyExclusionDescriptors = CTFontCollectionCopyExclusionDescriptors;

extern "CoreText" fn CTFontCollectionSetExclusionDescriptors(collection: MutableFontCollectionRef, descriptors: core_foundation.ArrayRef) callconv(.C) void;
pub const fontCollectionSetExclusionDescriptors = CTFontCollectionSetExclusionDescriptors;

extern "CoreText" fn CTFontCollectionCreateMatchingFontDescriptors(collection: FontCollectionRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCollectionCreateMatchingFontDescriptors = CTFontCollectionCreateMatchingFontDescriptors;

extern "CoreText" fn CTFontCollectionCreateMatchingFontDescriptorsSortedWithCallback(collection: FontCollectionRef, sortCallback: FontCollectionSortDescriptorsCallback, refCon: ?*anyopaque) callconv(.C) core_foundation.ArrayRef;
pub const fontCollectionCreateMatchingFontDescriptorsSortedWithCallback = CTFontCollectionCreateMatchingFontDescriptorsSortedWithCallback;

extern "CoreText" fn CTFontCollectionCreateMatchingFontDescriptorsWithOptions(collection: FontCollectionRef, options: core_foundation.DictionaryRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCollectionCreateMatchingFontDescriptorsWithOptions = CTFontCollectionCreateMatchingFontDescriptorsWithOptions;

extern "CoreText" fn CTFontCollectionCreateMatchingFontDescriptorsForFamily(collection: FontCollectionRef, familyName: core_foundation.StringRef, options: core_foundation.DictionaryRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCollectionCreateMatchingFontDescriptorsForFamily = CTFontCollectionCreateMatchingFontDescriptorsForFamily;

pub const FontCollectionCopyOptions = objc.uint32_t;
pub const FontCollectionCopyOptions_DefaultOptions: objc.uint32_t = 0;
pub const FontCollectionCopyOptions_Unique: objc.uint32_t = 1;
pub const FontCollectionCopyOptions_StandardSort: objc.uint32_t = 2;

extern "CoreText" fn CTFontCollectionCopyFontAttribute(collection: FontCollectionRef, attributeName: core_foundation.StringRef, options: FontCollectionCopyOptions) callconv(.C) core_foundation.ArrayRef;
pub const fontCollectionCopyFontAttribute = CTFontCollectionCopyFontAttribute;

extern "CoreText" fn CTFontCollectionCopyFontAttributes(collection: FontCollectionRef, attributeNames: core_foundation.SetRef, options: FontCollectionCopyOptions) callconv(.C) core_foundation.ArrayRef;
pub const fontCollectionCopyFontAttributes = CTFontCollectionCopyFontAttributes;

pub const FontManagerError = core_foundation.Index;
pub const FontManagerError_FileNotFound: core_foundation.Index = 101;
pub const FontManagerError_InsufficientPermissions: core_foundation.Index = 102;
pub const FontManagerError_UnrecognizedFormat: core_foundation.Index = 103;
pub const FontManagerError_InvalidFontData: core_foundation.Index = 104;
pub const FontManagerError_AlreadyRegistered: core_foundation.Index = 105;
pub const FontManagerError_ExceededResourceLimit: core_foundation.Index = 106;
pub const FontManagerError_AssetNotFound: core_foundation.Index = 107;
pub const FontManagerError_NotRegistered: core_foundation.Index = 201;
pub const FontManagerError_InUse: core_foundation.Index = 202;
pub const FontManagerError_SystemRequired: core_foundation.Index = 203;
pub const FontManagerError_RegistrationFailed: core_foundation.Index = 301;
pub const FontManagerError_MissingEntitlement: core_foundation.Index = 302;
pub const FontManagerError_InsufficientInfo: core_foundation.Index = 303;
pub const FontManagerError_CancelledByUser: core_foundation.Index = 304;
pub const FontManagerError_DuplicatedName: core_foundation.Index = 305;
pub const FontManagerError_InvalidFilePath: core_foundation.Index = 306;
pub const FontManagerError_UnsupportedScope: core_foundation.Index = 307;

extern "CoreText" fn CTFontManagerCopyAvailablePostScriptNames() callconv(.C) core_foundation.ArrayRef;
pub const fontManagerCopyAvailablePostScriptNames = CTFontManagerCopyAvailablePostScriptNames;

extern "CoreText" fn CTFontManagerCopyAvailableFontFamilyNames() callconv(.C) core_foundation.ArrayRef;
pub const fontManagerCopyAvailableFontFamilyNames = CTFontManagerCopyAvailableFontFamilyNames;

extern "CoreText" fn CTFontManagerCopyAvailableFontURLs() callconv(.C) core_foundation.ArrayRef;
pub const fontManagerCopyAvailableFontURLs = CTFontManagerCopyAvailableFontURLs;

extern "CoreText" fn CTFontManagerCompareFontFamilyNames(family1: ?*anyopaque, family2: ?*anyopaque, context: ?*anyopaque) callconv(.C) core_foundation.ComparisonResult;
pub const fontManagerCompareFontFamilyNames = CTFontManagerCompareFontFamilyNames;

extern "CoreText" fn CTFontManagerCreateFontDescriptorsFromURL(fileURL: core_foundation.URLRef) callconv(.C) core_foundation.ArrayRef;
pub const fontManagerCreateFontDescriptorsFromURL = CTFontManagerCreateFontDescriptorsFromURL;

extern "CoreText" fn CTFontManagerCreateFontDescriptorFromData(data: core_foundation.DataRef) callconv(.C) FontDescriptorRef;
pub const fontManagerCreateFontDescriptorFromData = CTFontManagerCreateFontDescriptorFromData;

extern "CoreText" fn CTFontManagerCreateFontDescriptorsFromData(data: core_foundation.DataRef) callconv(.C) core_foundation.ArrayRef;
pub const fontManagerCreateFontDescriptorsFromData = CTFontManagerCreateFontDescriptorsFromData;

pub const FontManagerScope = objc.uint32_t;
pub const FontManagerScope_None: objc.uint32_t = 0;
pub const FontManagerScope_Process: objc.uint32_t = 1;
pub const FontManagerScope_Persistent: objc.uint32_t = 2;
pub const FontManagerScope_Session: objc.uint32_t = 3;
pub const FontManagerScope_User: objc.uint32_t = 2;

extern "CoreText" fn CTFontManagerRegisterFontsForURL() callconv(.C) i32;
pub const fontManagerRegisterFontsForURL = CTFontManagerRegisterFontsForURL;

extern "CoreText" fn CTFontManagerUnregisterFontsForURL() callconv(.C) i32;
pub const fontManagerUnregisterFontsForURL = CTFontManagerUnregisterFontsForURL;

extern "CoreText" fn CTFontManagerRegisterGraphicsFont() callconv(.C) i32;
pub const fontManagerRegisterGraphicsFont = CTFontManagerRegisterGraphicsFont;

extern "CoreText" fn CTFontManagerUnregisterGraphicsFont() callconv(.C) i32;
pub const fontManagerUnregisterGraphicsFont = CTFontManagerUnregisterGraphicsFont;

extern "CoreText" fn CTFontManagerRegisterFontsForURLs() callconv(.C) i32;
pub const fontManagerRegisterFontsForURLs = CTFontManagerRegisterFontsForURLs;

extern "CoreText" fn CTFontManagerUnregisterFontsForURLs() callconv(.C) i32;
pub const fontManagerUnregisterFontsForURLs = CTFontManagerUnregisterFontsForURLs;

extern "CoreText" fn CTFontManagerRegisterFontURLs(
    fontURLs: core_foundation.ArrayRef,
    scope: FontManagerScope,
    enabled: objc.bool,
    registrationHandler: *const fn (core_foundation.ArrayRef, objc.bool) callconv(.C) i32,
) callconv(.C) void;
pub const fontManagerRegisterFontURLs = CTFontManagerRegisterFontURLs;

extern "CoreText" fn CTFontManagerUnregisterFontURLs(fontURLs: core_foundation.ArrayRef, scope: FontManagerScope, registrationHandler: *const fn (core_foundation.ArrayRef, objc.bool) callconv(.C) i32) callconv(.C) void;
pub const fontManagerUnregisterFontURLs = CTFontManagerUnregisterFontURLs;

extern "CoreText" fn CTFontManagerRegisterFontDescriptors(
    fontDescriptors: core_foundation.ArrayRef,
    scope: FontManagerScope,
    enabled: objc.bool,
    registrationHandler: *const fn (core_foundation.ArrayRef, objc.bool) callconv(.C) i32,
) callconv(.C) void;
pub const fontManagerRegisterFontDescriptors = CTFontManagerRegisterFontDescriptors;

extern "CoreText" fn CTFontManagerUnregisterFontDescriptors(fontDescriptors: core_foundation.ArrayRef, scope: FontManagerScope, registrationHandler: *const fn (core_foundation.ArrayRef, objc.bool) callconv(.C) i32) callconv(.C) void;
pub const fontManagerUnregisterFontDescriptors = CTFontManagerUnregisterFontDescriptors;

extern "CoreText" fn CTFontManagerRegisterFontsWithAssetNames(
    fontAssetNames: core_foundation.ArrayRef,
    bundle: core_foundation.BundleRef,
    scope: FontManagerScope,
    enabled: objc.bool,
    registrationHandler: *const fn (core_foundation.ArrayRef, objc.bool) callconv(.C) i32,
) callconv(.C) void;
pub const fontManagerRegisterFontsWithAssetNames = CTFontManagerRegisterFontsWithAssetNames;

extern "CoreText" fn CTFontManagerEnableFontDescriptors(descriptors: core_foundation.ArrayRef, enable: objc.bool) callconv(.C) void;
pub const fontManagerEnableFontDescriptors = CTFontManagerEnableFontDescriptors;

extern "CoreText" fn CTFontManagerGetScopeForURL(fontURL: core_foundation.URLRef) callconv(.C) FontManagerScope;
pub const fontManagerGetScopeForURL = CTFontManagerGetScopeForURL;

extern "CoreText" fn CTFontManagerCopyRegisteredFontDescriptors(scope: FontManagerScope, enabled: objc.bool) callconv(.C) core_foundation.ArrayRef;
pub const fontManagerCopyRegisteredFontDescriptors = CTFontManagerCopyRegisteredFontDescriptors;

extern "CoreText" fn CTFontManagerRequestFonts(fontDescriptors: core_foundation.ArrayRef, completionHandler: *const fn (core_foundation.ArrayRef) callconv(.C) void) callconv(.C) void;
pub const fontManagerRequestFonts = CTFontManagerRequestFonts;

extern "CoreText" fn CTFontManagerIsSupportedFont() callconv(.C) i32;
pub const fontManagerIsSupportedFont = CTFontManagerIsSupportedFont;

extern "CoreText" fn CTFontManagerCreateFontRequestRunLoopSource(sourceOrder: core_foundation.Index, createMatchesCallback: *const fn (core_foundation.DictionaryRef, objc.pid_t) callconv(.C) core_foundation.ArrayRef) callconv(.C) core_foundation.RunLoopSourceRef;
pub const fontManagerCreateFontRequestRunLoopSource = CTFontManagerCreateFontRequestRunLoopSource;

pub const FontManagerAutoActivationSetting = objc.uint32_t;
pub const FontManagerAutoActivationSetting_Default: objc.uint32_t = 0;
pub const FontManagerAutoActivationSetting_Disabled: objc.uint32_t = 1;
pub const FontManagerAutoActivationSetting_Enabled: objc.uint32_t = 2;
pub const FontManagerAutoActivationSetting_PromptUser: objc.uint32_t = 3;

extern "CoreText" fn CTFontManagerSetAutoActivationSetting(bundleIdentifier: core_foundation.StringRef, setting: FontManagerAutoActivationSetting) callconv(.C) void;
pub const fontManagerSetAutoActivationSetting = CTFontManagerSetAutoActivationSetting;

extern "CoreText" fn CTFontManagerGetAutoActivationSetting(bundleIdentifier: core_foundation.StringRef) callconv(.C) FontManagerAutoActivationSetting;
pub const fontManagerGetAutoActivationSetting = CTFontManagerGetAutoActivationSetting;

pub const __CTFrame = extern struct {};

pub const FrameRef = __CTFrame;

extern "CoreText" fn CTFrameGetTypeID() callconv(.C) core_foundation.TypeID;
pub const frameGetTypeID = CTFrameGetTypeID;

pub const FrameProgression = objc.uint32_t;
pub const FrameProgression_TopToBottom: objc.uint32_t = 0;
pub const FrameProgression_RightToLeft: objc.uint32_t = 1;
pub const FrameProgression_LeftToRight: objc.uint32_t = 2;

pub const FramePathFillRule = objc.uint32_t;
pub const FramePathFillRule_EvenOdd: objc.uint32_t = 0;
pub const FramePathFillRule_WindingNumber: objc.uint32_t = 1;

extern "CoreText" fn CTFrameGetStringRange(frame: FrameRef) callconv(.C) core_foundation.Range;
pub const frameGetStringRange = CTFrameGetStringRange;

extern "CoreText" fn CTFrameGetVisibleStringRange(frame: FrameRef) callconv(.C) core_foundation.Range;
pub const frameGetVisibleStringRange = CTFrameGetVisibleStringRange;

extern "CoreText" fn CTFrameGetPath(frame: FrameRef) callconv(.C) core_graphics.PathRef;
pub const frameGetPath = CTFrameGetPath;

extern "CoreText" fn CTFrameGetFrameAttributes(frame: FrameRef) callconv(.C) core_foundation.DictionaryRef;
pub const frameGetFrameAttributes = CTFrameGetFrameAttributes;

extern "CoreText" fn CTFrameGetLines(frame: FrameRef) callconv(.C) core_foundation.ArrayRef;
pub const frameGetLines = CTFrameGetLines;

extern "CoreText" fn CTFrameGetLineOrigins(frame: FrameRef, range: core_foundation.Range, origins: ?*core_foundation.CGPoint) callconv(.C) void;
pub const frameGetLineOrigins = CTFrameGetLineOrigins;

extern "CoreText" fn CTFrameDraw(frame: FrameRef, context: core_graphics.ContextRef) callconv(.C) void;
pub const frameDraw = CTFrameDraw;

pub const __CTLine = extern struct {};

pub const LineRef = __CTLine;

pub const LineBoundsOptions = core_foundation.OptionFlags;
pub const LineBoundsOptions_ExcludeTypographicLeading: core_foundation.OptionFlags = 1;
pub const LineBoundsOptions_ExcludeTypographicShifts: core_foundation.OptionFlags = 2;
pub const LineBoundsOptions_UseHangingPunctuation: core_foundation.OptionFlags = 4;
pub const LineBoundsOptions_UseGlyphPathBounds: core_foundation.OptionFlags = 8;
pub const LineBoundsOptions_UseOpticalBounds: core_foundation.OptionFlags = 16;
pub const LineBoundsOptions_IncludeLanguageExtents: core_foundation.OptionFlags = 32;

pub const LineTruncationType = objc.uint32_t;
pub const LineTruncationType_Start: objc.uint32_t = 0;
pub const LineTruncationType_End: objc.uint32_t = 1;
pub const LineTruncationType_Middle: objc.uint32_t = 2;

extern "CoreText" fn CTLineGetTypeID() callconv(.C) core_foundation.TypeID;
pub const lineGetTypeID = CTLineGetTypeID;

extern "CoreText" fn CTLineCreateWithAttributedString(attrString: core_foundation.AttributedStringRef) callconv(.C) LineRef;
pub const lineCreateWithAttributedString = CTLineCreateWithAttributedString;

extern "CoreText" fn CTLineCreateTruncatedLine(
    line: LineRef,
    width: f64,
    truncationType: LineTruncationType,
    truncationToken: LineRef,
) callconv(.C) LineRef;
pub const lineCreateTruncatedLine = CTLineCreateTruncatedLine;

extern "CoreText" fn CTLineCreateJustifiedLine(line: LineRef, justificationFactor: core_foundation.CGFloat, justificationWidth: f64) callconv(.C) LineRef;
pub const lineCreateJustifiedLine = CTLineCreateJustifiedLine;

extern "CoreText" fn CTLineGetGlyphCount(line: LineRef) callconv(.C) core_foundation.Index;
pub const lineGetGlyphCount = CTLineGetGlyphCount;

extern "CoreText" fn CTLineGetGlyphRuns(line: LineRef) callconv(.C) core_foundation.ArrayRef;
pub const lineGetGlyphRuns = CTLineGetGlyphRuns;

extern "CoreText" fn CTLineGetStringRange(line: LineRef) callconv(.C) core_foundation.Range;
pub const lineGetStringRange = CTLineGetStringRange;

extern "CoreText" fn CTLineGetPenOffsetForFlush(line: LineRef, flushFactor: core_foundation.CGFloat, flushWidth: f64) callconv(.C) f64;
pub const lineGetPenOffsetForFlush = CTLineGetPenOffsetForFlush;

extern "CoreText" fn CTLineDraw(line: LineRef, context: core_graphics.ContextRef) callconv(.C) void;
pub const lineDraw = CTLineDraw;

extern "CoreText" fn CTLineGetTypographicBounds(
    line: LineRef,
    ascent: ?*core_foundation.CGFloat,
    descent: ?*core_foundation.CGFloat,
    leading: ?*core_foundation.CGFloat,
) callconv(.C) f64;
pub const lineGetTypographicBounds = CTLineGetTypographicBounds;

extern "CoreText" fn CTLineGetBoundsWithOptions(line: LineRef, options: LineBoundsOptions) callconv(.C) core_foundation.CGRect;
pub const lineGetBoundsWithOptions = CTLineGetBoundsWithOptions;

extern "CoreText" fn CTLineGetTrailingWhitespaceWidth(line: LineRef) callconv(.C) f64;
pub const lineGetTrailingWhitespaceWidth = CTLineGetTrailingWhitespaceWidth;

extern "CoreText" fn CTLineGetImageBounds(line: LineRef, context: core_graphics.ContextRef) callconv(.C) core_foundation.CGRect;
pub const lineGetImageBounds = CTLineGetImageBounds;

extern "CoreText" fn CTLineGetStringIndexForPosition(line: LineRef, position: core_foundation.CGPoint) callconv(.C) core_foundation.Index;
pub const lineGetStringIndexForPosition = CTLineGetStringIndexForPosition;

extern "CoreText" fn CTLineGetOffsetForStringIndex(line: LineRef, charIndex: core_foundation.Index, secondaryOffset: ?*core_foundation.CGFloat) callconv(.C) core_foundation.CGFloat;
pub const lineGetOffsetForStringIndex = CTLineGetOffsetForStringIndex;

extern "CoreText" fn CTLineEnumerateCaretOffsets(line: LineRef, block: *const fn (
    f64,
    core_foundation.Index,
    objc.bool,
    ?*objc.bool,
) callconv(.C) void) callconv(.C) void;
pub const lineEnumerateCaretOffsets = CTLineEnumerateCaretOffsets;

pub const __CTTypesetter = extern struct {};

pub const TypesetterRef = __CTTypesetter;

extern "CoreText" fn CTTypesetterGetTypeID() callconv(.C) core_foundation.TypeID;
pub const typesetterGetTypeID = CTTypesetterGetTypeID;

extern "CoreText" fn CTTypesetterCreateWithAttributedString(string: core_foundation.AttributedStringRef) callconv(.C) TypesetterRef;
pub const typesetterCreateWithAttributedString = CTTypesetterCreateWithAttributedString;

extern "CoreText" fn CTTypesetterCreateWithAttributedStringAndOptions(string: core_foundation.AttributedStringRef, options: core_foundation.DictionaryRef) callconv(.C) TypesetterRef;
pub const typesetterCreateWithAttributedStringAndOptions = CTTypesetterCreateWithAttributedStringAndOptions;

extern "CoreText" fn CTTypesetterCreateLineWithOffset(typesetter: TypesetterRef, stringRange: core_foundation.Range, offset: f64) callconv(.C) LineRef;
pub const typesetterCreateLineWithOffset = CTTypesetterCreateLineWithOffset;

extern "CoreText" fn CTTypesetterCreateLine(typesetter: TypesetterRef, stringRange: core_foundation.Range) callconv(.C) LineRef;
pub const typesetterCreateLine = CTTypesetterCreateLine;

extern "CoreText" fn CTTypesetterSuggestLineBreakWithOffset(
    typesetter: TypesetterRef,
    startIndex: core_foundation.Index,
    width: f64,
    offset: f64,
) callconv(.C) core_foundation.Index;
pub const typesetterSuggestLineBreakWithOffset = CTTypesetterSuggestLineBreakWithOffset;

extern "CoreText" fn CTTypesetterSuggestLineBreak(typesetter: TypesetterRef, startIndex: core_foundation.Index, width: f64) callconv(.C) core_foundation.Index;
pub const typesetterSuggestLineBreak = CTTypesetterSuggestLineBreak;

extern "CoreText" fn CTTypesetterSuggestClusterBreakWithOffset(
    typesetter: TypesetterRef,
    startIndex: core_foundation.Index,
    width: f64,
    offset: f64,
) callconv(.C) core_foundation.Index;
pub const typesetterSuggestClusterBreakWithOffset = CTTypesetterSuggestClusterBreakWithOffset;

extern "CoreText" fn CTTypesetterSuggestClusterBreak(typesetter: TypesetterRef, startIndex: core_foundation.Index, width: f64) callconv(.C) core_foundation.Index;
pub const typesetterSuggestClusterBreak = CTTypesetterSuggestClusterBreak;

pub const __CTFramesetter = extern struct {};

pub const FramesetterRef = __CTFramesetter;

extern "CoreText" fn CTFramesetterGetTypeID() callconv(.C) core_foundation.TypeID;
pub const framesetterGetTypeID = CTFramesetterGetTypeID;

extern "CoreText" fn CTFramesetterCreateWithTypesetter(typesetter: TypesetterRef) callconv(.C) FramesetterRef;
pub const framesetterCreateWithTypesetter = CTFramesetterCreateWithTypesetter;

extern "CoreText" fn CTFramesetterCreateWithAttributedString(attrString: core_foundation.AttributedStringRef) callconv(.C) FramesetterRef;
pub const framesetterCreateWithAttributedString = CTFramesetterCreateWithAttributedString;

extern "CoreText" fn CTFramesetterCreateFrame(
    framesetter: FramesetterRef,
    stringRange: core_foundation.Range,
    path: core_graphics.PathRef,
    frameAttributes: core_foundation.DictionaryRef,
) callconv(.C) FrameRef;
pub const framesetterCreateFrame = CTFramesetterCreateFrame;

extern "CoreText" fn CTFramesetterGetTypesetter(framesetter: FramesetterRef) callconv(.C) TypesetterRef;
pub const framesetterGetTypesetter = CTFramesetterGetTypesetter;

extern "CoreText" fn CTFramesetterSuggestFrameSizeWithConstraints(
    framesetter: FramesetterRef,
    stringRange: core_foundation.Range,
    frameAttributes: core_foundation.DictionaryRef,
    constraints: core_foundation.CGSize,
    fitRange: ?*core_foundation.Range,
) callconv(.C) core_foundation.CGSize;
pub const framesetterSuggestFrameSizeWithConstraints = CTFramesetterSuggestFrameSizeWithConstraints;

pub const __CTGlyphInfo = extern struct {};

pub const GlyphInfoRef = __CTGlyphInfo;

extern "CoreText" fn CTGlyphInfoGetTypeID() callconv(.C) core_foundation.TypeID;
pub const glyphInfoGetTypeID = CTGlyphInfoGetTypeID;

pub const CharacterCollection = objc.uint16_t;
pub const CharacterCollection_IdentityMapping: objc.uint16_t = 0;
pub const CharacterCollection_AdobeCNS1: objc.uint16_t = 1;
pub const CharacterCollection_AdobeGB1: objc.uint16_t = 2;
pub const CharacterCollection_AdobeJapan1: objc.uint16_t = 3;
pub const CharacterCollection_AdobeJapan2: objc.uint16_t = 4;
pub const CharacterCollection_AdobeKorea1: objc.uint16_t = 5;
pub const CharacterCollection_IdentityMappingCharacterCollection: objc.uint16_t = 0;
pub const CharacterCollection_AdobeCNS1CharacterCollection: objc.uint16_t = 1;
pub const CharacterCollection_AdobeGB1CharacterCollection: objc.uint16_t = 2;
pub const CharacterCollection_AdobeJapan1CharacterCollection: objc.uint16_t = 3;
pub const CharacterCollection_AdobeJapan2CharacterCollection: objc.uint16_t = 4;
pub const CharacterCollection_AdobeKorea1CharacterCollection: objc.uint16_t = 5;

extern "CoreText" fn CTGlyphInfoCreateWithGlyphName(glyphName: core_foundation.StringRef, font: FontRef, baseString: core_foundation.StringRef) callconv(.C) GlyphInfoRef;
pub const glyphInfoCreateWithGlyphName = CTGlyphInfoCreateWithGlyphName;

extern "CoreText" fn CTGlyphInfoCreateWithGlyph(glyph: core_graphics.Glyph, font: FontRef, baseString: core_foundation.StringRef) callconv(.C) GlyphInfoRef;
pub const glyphInfoCreateWithGlyph = CTGlyphInfoCreateWithGlyph;

extern "CoreText" fn CTGlyphInfoCreateWithCharacterIdentifier(cid: core_graphics.FontIndex, collection: CharacterCollection, baseString: core_foundation.StringRef) callconv(.C) GlyphInfoRef;
pub const glyphInfoCreateWithCharacterIdentifier = CTGlyphInfoCreateWithCharacterIdentifier;

extern "CoreText" fn CTGlyphInfoGetGlyphName(glyphInfo: GlyphInfoRef) callconv(.C) core_foundation.StringRef;
pub const glyphInfoGetGlyphName = CTGlyphInfoGetGlyphName;

extern "CoreText" fn CTGlyphInfoGetGlyph(glyphInfo: GlyphInfoRef) callconv(.C) core_graphics.Glyph;
pub const glyphInfoGetGlyph = CTGlyphInfoGetGlyph;

extern "CoreText" fn CTGlyphInfoGetCharacterIdentifier(glyphInfo: GlyphInfoRef) callconv(.C) core_graphics.FontIndex;
pub const glyphInfoGetCharacterIdentifier = CTGlyphInfoGetCharacterIdentifier;

extern "CoreText" fn CTGlyphInfoGetCharacterCollection(glyphInfo: GlyphInfoRef) callconv(.C) CharacterCollection;
pub const glyphInfoGetCharacterCollection = CTGlyphInfoGetCharacterCollection;

pub const __CTParagraphStyle = extern struct {};

pub const ParagraphStyleRef = __CTParagraphStyle;

extern "CoreText" fn CTParagraphStyleGetTypeID() callconv(.C) core_foundation.TypeID;
pub const paragraphStyleGetTypeID = CTParagraphStyleGetTypeID;

pub const TextAlignment = objc.uint8_t;
pub const TextAlignment_Left: objc.uint8_t = 0;
pub const TextAlignment_Right: objc.uint8_t = 1;
pub const TextAlignment_Center: objc.uint8_t = 2;
pub const TextAlignment_Justified: objc.uint8_t = 3;
pub const TextAlignment_Natural: objc.uint8_t = 4;
pub const TextAlignment_LeftTextAlignment: objc.uint8_t = 0;
pub const TextAlignment_RightTextAlignment: objc.uint8_t = 1;
pub const TextAlignment_CenterTextAlignment: objc.uint8_t = 2;
pub const TextAlignment_JustifiedTextAlignment: objc.uint8_t = 3;
pub const TextAlignment_NaturalTextAlignment: objc.uint8_t = 4;

pub const LineBreakMode = objc.uint8_t;
pub const LineBreakMode_ByWordWrapping: objc.uint8_t = 0;
pub const LineBreakMode_ByCharWrapping: objc.uint8_t = 1;
pub const LineBreakMode_ByClipping: objc.uint8_t = 2;
pub const LineBreakMode_ByTruncatingHead: objc.uint8_t = 3;
pub const LineBreakMode_ByTruncatingTail: objc.uint8_t = 4;
pub const LineBreakMode_ByTruncatingMiddle: objc.uint8_t = 5;

pub const WritingDirection = objc.int8_t;
pub const WritingDirection_Natural: objc.int8_t = -1;
pub const WritingDirection_LeftToRight: objc.int8_t = 0;
pub const WritingDirection_RightToLeft: objc.int8_t = 1;

pub const ParagraphStyleSpecifier = objc.uint32_t;
pub const ParagraphStyleSpecifier_Alignment: objc.uint32_t = 0;
pub const ParagraphStyleSpecifier_FirstLineHeadIndent: objc.uint32_t = 1;
pub const ParagraphStyleSpecifier_HeadIndent: objc.uint32_t = 2;
pub const ParagraphStyleSpecifier_TailIndent: objc.uint32_t = 3;
pub const ParagraphStyleSpecifier_TabStops: objc.uint32_t = 4;
pub const ParagraphStyleSpecifier_DefaultTabInterval: objc.uint32_t = 5;
pub const ParagraphStyleSpecifier_LineBreakMode: objc.uint32_t = 6;
pub const ParagraphStyleSpecifier_LineHeightMultiple: objc.uint32_t = 7;
pub const ParagraphStyleSpecifier_MaximumLineHeight: objc.uint32_t = 8;
pub const ParagraphStyleSpecifier_MinimumLineHeight: objc.uint32_t = 9;
pub const ParagraphStyleSpecifier_LineSpacing: objc.uint32_t = 10;
pub const ParagraphStyleSpecifier_ParagraphSpacing: objc.uint32_t = 11;
pub const ParagraphStyleSpecifier_ParagraphSpacingBefore: objc.uint32_t = 12;
pub const ParagraphStyleSpecifier_BaseWritingDirection: objc.uint32_t = 13;
pub const ParagraphStyleSpecifier_MaximumLineSpacing: objc.uint32_t = 14;
pub const ParagraphStyleSpecifier_MinimumLineSpacing: objc.uint32_t = 15;
pub const ParagraphStyleSpecifier_LineSpacingAdjustment: objc.uint32_t = 16;
pub const ParagraphStyleSpecifier_LineBoundsOptions: objc.uint32_t = 17;
pub const ParagraphStyleSpecifier_Count: objc.uint32_t = 18;

pub const ParagraphStyleSetting = extern struct {
    spec: ParagraphStyleSpecifier,
    valueSize: objc.size_t,
    value: ?*anyopaque,
};

extern "CoreText" fn CTParagraphStyleCreate(settings: ?*ParagraphStyleSetting, settingCount: objc.size_t) callconv(.C) ParagraphStyleRef;
pub const paragraphStyleCreate = CTParagraphStyleCreate;

extern "CoreText" fn CTParagraphStyleCreateCopy(paragraphStyle: ParagraphStyleRef) callconv(.C) ParagraphStyleRef;
pub const paragraphStyleCreateCopy = CTParagraphStyleCreateCopy;

extern "CoreText" fn CTParagraphStyleGetValueForSpecifier() callconv(.C) i32;
pub const paragraphStyleGetValueForSpecifier = CTParagraphStyleGetValueForSpecifier;

pub const __CTRubyAnnotation = extern struct {};

pub const RubyAnnotationRef = __CTRubyAnnotation;

extern "CoreText" fn CTRubyAnnotationGetTypeID() callconv(.C) core_foundation.TypeID;
pub const rubyAnnotationGetTypeID = CTRubyAnnotationGetTypeID;

pub const RubyAlignment = objc.uint8_t;
pub const RubyAlignment_Invalid: objc.uint8_t = -1;
pub const RubyAlignment_Auto: objc.uint8_t = 0;
pub const RubyAlignment_Start: objc.uint8_t = 1;
pub const RubyAlignment_Center: objc.uint8_t = 2;
pub const RubyAlignment_End: objc.uint8_t = 3;
pub const RubyAlignment_DistributeLetter: objc.uint8_t = 4;
pub const RubyAlignment_DistributeSpace: objc.uint8_t = 5;
pub const RubyAlignment_LineEdge: objc.uint8_t = 6;

pub const RubyOverhang = objc.uint8_t;
pub const RubyOverhang_Invalid: objc.uint8_t = -1;
pub const RubyOverhang_Auto: objc.uint8_t = 0;
pub const RubyOverhang_Start: objc.uint8_t = 1;
pub const RubyOverhang_End: objc.uint8_t = 2;
pub const RubyOverhang_None: objc.uint8_t = 3;

pub const RubyPosition = objc.uint8_t;
pub const RubyPosition_Before: objc.uint8_t = 0;
pub const RubyPosition_After: objc.uint8_t = 1;
pub const RubyPosition_InterCharacter: objc.uint8_t = 2;
pub const RubyPosition_Inline: objc.uint8_t = 3;
pub const RubyPosition_Count: objc.uint8_t = 4;

extern "CoreText" fn CTRubyAnnotationCreate(
    alignment: RubyAlignment,
    overhang: RubyOverhang,
    sizeFactor: core_foundation.CGFloat,
    text: ?*core_foundation.StringRef,
) callconv(.C) RubyAnnotationRef;
pub const rubyAnnotationCreate = CTRubyAnnotationCreate;

extern "CoreText" fn CTRubyAnnotationCreateWithAttributes(
    alignment: RubyAlignment,
    overhang: RubyOverhang,
    position: RubyPosition,
    string: core_foundation.StringRef,
    attributes: core_foundation.DictionaryRef,
) callconv(.C) RubyAnnotationRef;
pub const rubyAnnotationCreateWithAttributes = CTRubyAnnotationCreateWithAttributes;

extern "CoreText" fn CTRubyAnnotationCreateCopy(rubyAnnotation: RubyAnnotationRef) callconv(.C) RubyAnnotationRef;
pub const rubyAnnotationCreateCopy = CTRubyAnnotationCreateCopy;

extern "CoreText" fn CTRubyAnnotationGetAlignment(rubyAnnotation: RubyAnnotationRef) callconv(.C) RubyAlignment;
pub const rubyAnnotationGetAlignment = CTRubyAnnotationGetAlignment;

extern "CoreText" fn CTRubyAnnotationGetOverhang(rubyAnnotation: RubyAnnotationRef) callconv(.C) RubyOverhang;
pub const rubyAnnotationGetOverhang = CTRubyAnnotationGetOverhang;

extern "CoreText" fn CTRubyAnnotationGetSizeFactor(rubyAnnotation: RubyAnnotationRef) callconv(.C) core_foundation.CGFloat;
pub const rubyAnnotationGetSizeFactor = CTRubyAnnotationGetSizeFactor;

extern "CoreText" fn CTRubyAnnotationGetTextForPosition(rubyAnnotation: RubyAnnotationRef, position: RubyPosition) callconv(.C) core_foundation.StringRef;
pub const rubyAnnotationGetTextForPosition = CTRubyAnnotationGetTextForPosition;

pub const __CTRun = extern struct {};

pub const RunRef = __CTRun;

pub const RunStatus = objc.uint32_t;
pub const RunStatus_NoStatus: objc.uint32_t = 0;
pub const RunStatus_RightToLeft: objc.uint32_t = 1;
pub const RunStatus_NonMonotonic: objc.uint32_t = 2;
pub const RunStatus_HasNonIdentityMatrix: objc.uint32_t = 4;

extern "CoreText" fn CTRunGetTypeID() callconv(.C) core_foundation.TypeID;
pub const runGetTypeID = CTRunGetTypeID;

extern "CoreText" fn CTRunGetGlyphCount(run: RunRef) callconv(.C) core_foundation.Index;
pub const runGetGlyphCount = CTRunGetGlyphCount;

extern "CoreText" fn CTRunGetAttributes(run: RunRef) callconv(.C) core_foundation.DictionaryRef;
pub const runGetAttributes = CTRunGetAttributes;

extern "CoreText" fn CTRunGetStatus(run: RunRef) callconv(.C) RunStatus;
pub const runGetStatus = CTRunGetStatus;

extern "CoreText" fn CTRunGetGlyphsPtr(run: RunRef) callconv(.C) ?*core_graphics.Glyph;
pub const runGetGlyphsPtr = CTRunGetGlyphsPtr;

extern "CoreText" fn CTRunGetGlyphs(run: RunRef, range: core_foundation.Range, buffer: ?*core_graphics.Glyph) callconv(.C) void;
pub const runGetGlyphs = CTRunGetGlyphs;

extern "CoreText" fn CTRunGetPositionsPtr(run: RunRef) callconv(.C) ?*core_foundation.CGPoint;
pub const runGetPositionsPtr = CTRunGetPositionsPtr;

extern "CoreText" fn CTRunGetPositions(run: RunRef, range: core_foundation.Range, buffer: ?*core_foundation.CGPoint) callconv(.C) void;
pub const runGetPositions = CTRunGetPositions;

extern "CoreText" fn CTRunGetAdvancesPtr(run: RunRef) callconv(.C) ?*core_foundation.CGSize;
pub const runGetAdvancesPtr = CTRunGetAdvancesPtr;

extern "CoreText" fn CTRunGetAdvances(run: RunRef, range: core_foundation.Range, buffer: ?*core_foundation.CGSize) callconv(.C) void;
pub const runGetAdvances = CTRunGetAdvances;

extern "CoreText" fn CTRunGetStringIndicesPtr(run: RunRef) callconv(.C) ?*core_foundation.Index;
pub const runGetStringIndicesPtr = CTRunGetStringIndicesPtr;

extern "CoreText" fn CTRunGetStringIndices(run: RunRef, range: core_foundation.Range, buffer: ?*core_foundation.Index) callconv(.C) void;
pub const runGetStringIndices = CTRunGetStringIndices;

extern "CoreText" fn CTRunGetStringRange(run: RunRef) callconv(.C) core_foundation.Range;
pub const runGetStringRange = CTRunGetStringRange;

extern "CoreText" fn CTRunGetTypographicBounds(
    run: RunRef,
    range: core_foundation.Range,
    ascent: ?*core_foundation.CGFloat,
    descent: ?*core_foundation.CGFloat,
    leading: ?*core_foundation.CGFloat,
) callconv(.C) f64;
pub const runGetTypographicBounds = CTRunGetTypographicBounds;

extern "CoreText" fn CTRunGetImageBounds(run: RunRef, context: core_graphics.ContextRef, range: core_foundation.Range) callconv(.C) core_foundation.CGRect;
pub const runGetImageBounds = CTRunGetImageBounds;

extern "CoreText" fn CTRunGetTextMatrix(run: RunRef) callconv(.C) core_foundation.CGAffineTransform;
pub const runGetTextMatrix = CTRunGetTextMatrix;

extern "CoreText" fn CTRunGetBaseAdvancesAndOrigins(
    runRef: RunRef,
    range: core_foundation.Range,
    advancesBuffer: ?*core_foundation.CGSize,
    originsBuffer: ?*core_foundation.CGPoint,
) callconv(.C) void;
pub const runGetBaseAdvancesAndOrigins = CTRunGetBaseAdvancesAndOrigins;

extern "CoreText" fn CTRunDraw(run: RunRef, context: core_graphics.ContextRef, range: core_foundation.Range) callconv(.C) void;
pub const runDraw = CTRunDraw;

pub const __CTRunDelegate = extern struct {};

pub const RunDelegateRef = __CTRunDelegate;

extern "CoreText" fn CTRunDelegateGetTypeID() callconv(.C) core_foundation.TypeID;
pub const runDelegateGetTypeID = CTRunDelegateGetTypeID;

pub const RunDelegateDeallocateCallback = ?*const fn (?*anyopaque) callconv(.C) void;

pub const RunDelegateGetAscentCallback = core_foundation.CGFloat;

pub const RunDelegateGetDescentCallback = core_foundation.CGFloat;

pub const RunDelegateGetWidthCallback = core_foundation.CGFloat;

pub const RunDelegateCallbacks = extern struct {
    version: core_foundation.Index,
    dealloc: RunDelegateDeallocateCallback,
    getAscent: RunDelegateGetAscentCallback,
    getDescent: RunDelegateGetDescentCallback,
    getWidth: RunDelegateGetWidthCallback,
};

pub const anon1441 = u32;
pub const anon1441_CTRunDelegateVersion1: u32 = 1;
pub const anon1441_CTRunDelegateCurrentVersion: u32 = 1;

extern "CoreText" fn CTRunDelegateCreate(callbacks: ?*RunDelegateCallbacks, refCon: ?*anyopaque) callconv(.C) RunDelegateRef;
pub const runDelegateCreate = CTRunDelegateCreate;

extern "CoreText" fn CTRunDelegateGetRefCon(runDelegate: RunDelegateRef) callconv(.C) ?*anyopaque;
pub const runDelegateGetRefCon = CTRunDelegateGetRefCon;

/// https://developer.apple.com/documentation/CoreText/CTAdaptiveImageProviding?language=objc
pub const AdaptiveImageProviding = opaque {
    pub const Internal = objc.ExternProtocol(@This(), &.{});
    pub const as = Internal.as;
    pub const retain = Internal.retain;
    pub const release = Internal.release;
    pub const autorelease = Internal.autorelease;

    pub fn imageForProposedSizeScaleFactorImageOffsetImageSize(
        _self: *@This(),
        _proposedSize: core_foundation.CGSize,
        _scaleFactor: core_foundation.CGFloat,
        _outImageOffset: ?*core_foundation.CGPoint,
        _outImageSize: ?*core_foundation.CGSize,
    ) core_graphics.ImageRef {
        return objc.msgSend(_self, "imageForProposedSize:scaleFactor:imageOffset:imageSize:", core_graphics.ImageRef, .{
            _proposedSize,
            _scaleFactor,
            _outImageOffset,
            _outImageSize,
        });
    }
};

pub const UnderlineStyle = objc.int32_t;
pub const UnderlineStyle_None: objc.int32_t = 0;
pub const UnderlineStyle_Single: objc.int32_t = 1;
pub const UnderlineStyle_Thick: objc.int32_t = 2;
pub const UnderlineStyle_Double: objc.int32_t = 9;

pub const UnderlineStyleModifiers = objc.int32_t;
pub const UnderlineStyleModifiers_PatternSolid: objc.int32_t = 0;
pub const UnderlineStyleModifiers_PatternDot: objc.int32_t = 256;
pub const UnderlineStyleModifiers_PatternDash: objc.int32_t = 512;
pub const UnderlineStyleModifiers_PatternDashDot: objc.int32_t = 768;
pub const UnderlineStyleModifiers_PatternDashDotDot: objc.int32_t = 1024;

pub const anon4651 = u32;
pub const anon4651_CTWritingDirectionEmbedding: u32 = 0;
pub const anon4651_CTWritingDirectionOverride: u32 = 2;

pub const __CTTextTab = extern struct {};

pub const TextTabRef = __CTTextTab;

extern "CoreText" fn CTTextTabGetTypeID() callconv(.C) core_foundation.TypeID;
pub const textTabGetTypeID = CTTextTabGetTypeID;

extern "CoreText" fn CTTextTabCreate(alignment: TextAlignment, location: f64, options: core_foundation.DictionaryRef) callconv(.C) TextTabRef;
pub const textTabCreate = CTTextTabCreate;

extern "CoreText" fn CTTextTabGetAlignment(tab: TextTabRef) callconv(.C) TextAlignment;
pub const textTabGetAlignment = CTTextTabGetAlignment;

extern "CoreText" fn CTTextTabGetLocation(tab: TextTabRef) callconv(.C) f64;
pub const textTabGetLocation = CTTextTabGetLocation;

extern "CoreText" fn CTTextTabGetOptions(tab: TextTabRef) callconv(.C) core_foundation.DictionaryRef;
pub const textTabGetOptions = CTTextTabGetOptions;

pub const anon411 = i32;
pub const anon411_AllTypographicFeaturesType: i32 = 0;
pub const anon411_LigaturesType: i32 = 1;
pub const anon411_CursiveConnectionType: i32 = 2;
pub const anon411_LetterCaseType: i32 = 3;
pub const anon411_VerticalSubstitutionType: i32 = 4;
pub const anon411_LinguisticRearrangementType: i32 = 5;
pub const anon411_NumberSpacingType: i32 = 6;
pub const anon411_SmartSwashType: i32 = 8;
pub const anon411_DiacriticsType: i32 = 9;
pub const anon411_VerticalPositionType: i32 = 10;
pub const anon411_FractionsType: i32 = 11;
pub const anon411_OverlappingCharactersType: i32 = 13;
pub const anon411_TypographicExtrasType: i32 = 14;
pub const anon411_MathematicalExtrasType: i32 = 15;
pub const anon411_OrnamentSetsType: i32 = 16;
pub const anon411_CharacterAlternativesType: i32 = 17;
pub const anon411_DesignComplexityType: i32 = 18;
pub const anon411_StyleOptionsType: i32 = 19;
pub const anon411_CharacterShapeType: i32 = 20;
pub const anon411_NumberCaseType: i32 = 21;
pub const anon411_TextSpacingType: i32 = 22;
pub const anon411_TransliterationType: i32 = 23;
pub const anon411_AnnotationType: i32 = 24;
pub const anon411_KanaSpacingType: i32 = 25;
pub const anon411_IdeographicSpacingType: i32 = 26;
pub const anon411_UnicodeDecompositionType: i32 = 27;
pub const anon411_RubyKanaType: i32 = 28;
pub const anon411_CJKSymbolAlternativesType: i32 = 29;
pub const anon411_IdeographicAlternativesType: i32 = 30;
pub const anon411_CJKVerticalRomanPlacementType: i32 = 31;
pub const anon411_ItalicCJKRomanType: i32 = 32;
pub const anon411_CaseSensitiveLayoutType: i32 = 33;
pub const anon411_AlternateKanaType: i32 = 34;
pub const anon411_StylisticAlternativesType: i32 = 35;
pub const anon411_ContextualAlternatesType: i32 = 36;
pub const anon411_LowerCaseType: i32 = 37;
pub const anon411_UpperCaseType: i32 = 38;
pub const anon411_LanguageTagType: i32 = 39;
pub const anon411_CJKRomanSpacingType: i32 = 103;
pub const anon411_LastFeatureType: i32 = -1;

pub const anon891 = u32;
pub const anon891_AllTypeFeaturesOnSelector: u32 = 0;
pub const anon891_AllTypeFeaturesOffSelector: u32 = 1;

pub const anon1001 = u32;
pub const anon1001_RequiredLigaturesOnSelector: u32 = 0;
pub const anon1001_RequiredLigaturesOffSelector: u32 = 1;
pub const anon1001_CommonLigaturesOnSelector: u32 = 2;
pub const anon1001_CommonLigaturesOffSelector: u32 = 3;
pub const anon1001_RareLigaturesOnSelector: u32 = 4;
pub const anon1001_RareLigaturesOffSelector: u32 = 5;
pub const anon1001_LogosOnSelector: u32 = 6;
pub const anon1001_LogosOffSelector: u32 = 7;
pub const anon1001_RebusPicturesOnSelector: u32 = 8;
pub const anon1001_RebusPicturesOffSelector: u32 = 9;
pub const anon1001_DiphthongLigaturesOnSelector: u32 = 10;
pub const anon1001_DiphthongLigaturesOffSelector: u32 = 11;
pub const anon1001_SquaredLigaturesOnSelector: u32 = 12;
pub const anon1001_SquaredLigaturesOffSelector: u32 = 13;
pub const anon1001_AbbrevSquaredLigaturesOnSelector: u32 = 14;
pub const anon1001_AbbrevSquaredLigaturesOffSelector: u32 = 15;
pub const anon1001_SymbolLigaturesOnSelector: u32 = 16;
pub const anon1001_SymbolLigaturesOffSelector: u32 = 17;
pub const anon1001_ContextualLigaturesOnSelector: u32 = 18;
pub const anon1001_ContextualLigaturesOffSelector: u32 = 19;
pub const anon1001_HistoricalLigaturesOnSelector: u32 = 20;
pub const anon1001_HistoricalLigaturesOffSelector: u32 = 21;

pub const anon1301 = u32;
pub const anon1301_UnconnectedSelector: u32 = 0;
pub const anon1301_PartiallyConnectedSelector: u32 = 1;
pub const anon1301_CursiveSelector: u32 = 2;

pub const anon1411 = u32;
pub const anon1411_UpperAndLowerCaseSelector: u32 = 0;
pub const anon1411_AllCapsSelector: u32 = 1;
pub const anon1411_AllLowerCaseSelector: u32 = 2;
pub const anon1411_SmallCapsSelector: u32 = 3;
pub const anon1411_InitialCapsSelector: u32 = 4;
pub const anon1411_InitialCapsAndSmallCapsSelector: u32 = 5;

pub const anon1551 = u32;
pub const anon1551_SubstituteVerticalFormsOnSelector: u32 = 0;
pub const anon1551_SubstituteVerticalFormsOffSelector: u32 = 1;

pub const anon1651 = u32;
pub const anon1651_LinguisticRearrangementOnSelector: u32 = 0;
pub const anon1651_LinguisticRearrangementOffSelector: u32 = 1;

pub const anon1751 = u32;
pub const anon1751_MonospacedNumbersSelector: u32 = 0;
pub const anon1751_ProportionalNumbersSelector: u32 = 1;
pub const anon1751_ThirdWidthNumbersSelector: u32 = 2;
pub const anon1751_QuarterWidthNumbersSelector: u32 = 3;

pub const anon1871 = u32;
pub const anon1871_WordInitialSwashesOnSelector: u32 = 0;
pub const anon1871_WordInitialSwashesOffSelector: u32 = 1;
pub const anon1871_WordFinalSwashesOnSelector: u32 = 2;
pub const anon1871_WordFinalSwashesOffSelector: u32 = 3;
pub const anon1871_LineInitialSwashesOnSelector: u32 = 4;
pub const anon1871_LineInitialSwashesOffSelector: u32 = 5;
pub const anon1871_LineFinalSwashesOnSelector: u32 = 6;
pub const anon1871_LineFinalSwashesOffSelector: u32 = 7;
pub const anon1871_NonFinalSwashesOnSelector: u32 = 8;
pub const anon1871_NonFinalSwashesOffSelector: u32 = 9;

pub const anon2051 = u32;
pub const anon2051_ShowDiacriticsSelector: u32 = 0;
pub const anon2051_HideDiacriticsSelector: u32 = 1;
pub const anon2051_DecomposeDiacriticsSelector: u32 = 2;

pub const anon2161 = u32;
pub const anon2161_NormalPositionSelector: u32 = 0;
pub const anon2161_SuperiorsSelector: u32 = 1;
pub const anon2161_InferiorsSelector: u32 = 2;
pub const anon2161_OrdinalsSelector: u32 = 3;
pub const anon2161_ScientificInferiorsSelector: u32 = 4;

pub const anon2291 = u32;
pub const anon2291_NoFractionsSelector: u32 = 0;
pub const anon2291_VerticalFractionsSelector: u32 = 1;
pub const anon2291_DiagonalFractionsSelector: u32 = 2;

pub const anon2401 = u32;
pub const anon2401_PreventOverlapOnSelector: u32 = 0;
pub const anon2401_PreventOverlapOffSelector: u32 = 1;

pub const anon2501 = u32;
pub const anon2501_HyphensToEmDashOnSelector: u32 = 0;
pub const anon2501_HyphensToEmDashOffSelector: u32 = 1;
pub const anon2501_HyphenToEnDashOnSelector: u32 = 2;
pub const anon2501_HyphenToEnDashOffSelector: u32 = 3;
pub const anon2501_SlashedZeroOnSelector: u32 = 4;
pub const anon2501_SlashedZeroOffSelector: u32 = 5;
pub const anon2501_FormInterrobangOnSelector: u32 = 6;
pub const anon2501_FormInterrobangOffSelector: u32 = 7;
pub const anon2501_SmartQuotesOnSelector: u32 = 8;
pub const anon2501_SmartQuotesOffSelector: u32 = 9;
pub const anon2501_PeriodsToEllipsisOnSelector: u32 = 10;
pub const anon2501_PeriodsToEllipsisOffSelector: u32 = 11;

pub const anon2701 = u32;
pub const anon2701_HyphenToMinusOnSelector: u32 = 0;
pub const anon2701_HyphenToMinusOffSelector: u32 = 1;
pub const anon2701_AsteriskToMultiplyOnSelector: u32 = 2;
pub const anon2701_AsteriskToMultiplyOffSelector: u32 = 3;
pub const anon2701_SlashToDivideOnSelector: u32 = 4;
pub const anon2701_SlashToDivideOffSelector: u32 = 5;
pub const anon2701_InequalityLigaturesOnSelector: u32 = 6;
pub const anon2701_InequalityLigaturesOffSelector: u32 = 7;
pub const anon2701_ExponentsOnSelector: u32 = 8;
pub const anon2701_ExponentsOffSelector: u32 = 9;
pub const anon2701_MathematicalGreekOnSelector: u32 = 10;
pub const anon2701_MathematicalGreekOffSelector: u32 = 11;

pub const anon2901 = u32;
pub const anon2901_NoOrnamentsSelector: u32 = 0;
pub const anon2901_DingbatsSelector: u32 = 1;
pub const anon2901_PiCharactersSelector: u32 = 2;
pub const anon2901_FleuronsSelector: u32 = 3;
pub const anon2901_DecorativeBordersSelector: u32 = 4;
pub const anon2901_InternationalSymbolsSelector: u32 = 5;
pub const anon2901_MathSymbolsSelector: u32 = 6;
pub const anon2901_nameFontTableTag: u32 = 1851878757;

pub const anon3051 = u32;
pub const anon3051_NoAlternatesSelector: u32 = 0;

pub const anon3141 = u32;
pub const anon3141_DesignLevel1Selector: u32 = 0;
pub const anon3141_DesignLevel2Selector: u32 = 1;
pub const anon3141_DesignLevel3Selector: u32 = 2;
pub const anon3141_DesignLevel4Selector: u32 = 3;
pub const anon3141_DesignLevel5Selector: u32 = 4;

pub const anon3411 = u32;
pub const anon3411_TraditionalCharactersSelector: u32 = 0;
pub const anon3411_SimplifiedCharactersSelector: u32 = 1;
pub const anon3411_JIS1978CharactersSelector: u32 = 2;
pub const anon3411_JIS1983CharactersSelector: u32 = 3;
pub const anon3411_JIS1990CharactersSelector: u32 = 4;
pub const anon3411_TraditionalAltOneSelector: u32 = 5;
pub const anon3411_TraditionalAltTwoSelector: u32 = 6;
pub const anon3411_TraditionalAltThreeSelector: u32 = 7;
pub const anon3411_TraditionalAltFourSelector: u32 = 8;
pub const anon3411_TraditionalAltFiveSelector: u32 = 9;
pub const anon3411_ExpertCharactersSelector: u32 = 10;
pub const anon3411_JIS2004CharactersSelector: u32 = 11;
pub const anon3411_HojoCharactersSelector: u32 = 12;
pub const anon3411_NLCCharactersSelector: u32 = 13;
pub const anon3411_TraditionalNamesCharactersSelector: u32 = 14;

pub const anon3641 = u32;
pub const anon3641_LowerCaseNumbersSelector: u32 = 0;
pub const anon3641_UpperCaseNumbersSelector: u32 = 1;

pub const anon3741 = u32;
pub const anon3741_ProportionalTextSelector: u32 = 0;
pub const anon3741_MonospacedTextSelector: u32 = 1;
pub const anon3741_HalfWidthTextSelector: u32 = 2;
pub const anon3741_ThirdWidthTextSelector: u32 = 3;
pub const anon3741_QuarterWidthTextSelector: u32 = 4;
pub const anon3741_AltProportionalTextSelector: u32 = 5;
pub const anon3741_AltHalfWidthTextSelector: u32 = 6;

pub const anon3891 = u32;
pub const anon3891_NoTransliterationSelector: u32 = 0;
pub const anon3891_HanjaToHangulSelector: u32 = 1;
pub const anon3891_HiraganaToKatakanaSelector: u32 = 2;
pub const anon3891_KatakanaToHiraganaSelector: u32 = 3;
pub const anon3891_KanaToRomanizationSelector: u32 = 4;
pub const anon3891_RomanizationToHiraganaSelector: u32 = 5;
pub const anon3891_RomanizationToKatakanaSelector: u32 = 6;
pub const anon3891_HanjaToHangulAltOneSelector: u32 = 7;
pub const anon3891_HanjaToHangulAltTwoSelector: u32 = 8;
pub const anon3891_HanjaToHangulAltThreeSelector: u32 = 9;

pub const anon4261 = u32;
pub const anon4261_FullWidthKanaSelector: u32 = 0;
pub const anon4261_ProportionalKanaSelector: u32 = 1;

pub const anon4361 = u32;
pub const anon4361_FullWidthIdeographsSelector: u32 = 0;
pub const anon4361_ProportionalIdeographsSelector: u32 = 1;
pub const anon4361_HalfWidthIdeographsSelector: u32 = 2;

pub const anon4471 = u32;
pub const anon4471_CanonicalCompositionOnSelector: u32 = 0;
pub const anon4471_CanonicalCompositionOffSelector: u32 = 1;
pub const anon4471_CompatibilityCompositionOnSelector: u32 = 2;
pub const anon4471_CompatibilityCompositionOffSelector: u32 = 3;
pub const anon4471_TranscodingCompositionOnSelector: u32 = 4;
pub const anon4471_TranscodingCompositionOffSelector: u32 = 5;

pub const anon4611 = u32;
pub const anon4611_NoRubyKanaSelector: u32 = 0;
pub const anon4611_RubyKanaSelector: u32 = 1;
pub const anon4611_RubyKanaOnSelector: u32 = 2;
pub const anon4611_RubyKanaOffSelector: u32 = 3;

pub const anon4731 = u32;
pub const anon4731_NoCJKSymbolAlternativesSelector: u32 = 0;
pub const anon4731_CJKSymbolAltOneSelector: u32 = 1;
pub const anon4731_CJKSymbolAltTwoSelector: u32 = 2;
pub const anon4731_CJKSymbolAltThreeSelector: u32 = 3;
pub const anon4731_CJKSymbolAltFourSelector: u32 = 4;
pub const anon4731_CJKSymbolAltFiveSelector: u32 = 5;

pub const anon4871 = u32;
pub const anon4871_NoIdeographicAlternativesSelector: u32 = 0;
pub const anon4871_IdeographicAltOneSelector: u32 = 1;
pub const anon4871_IdeographicAltTwoSelector: u32 = 2;
pub const anon4871_IdeographicAltThreeSelector: u32 = 3;
pub const anon4871_IdeographicAltFourSelector: u32 = 4;
pub const anon4871_IdeographicAltFiveSelector: u32 = 5;

pub const anon5011 = u32;
pub const anon5011_CJKVerticalRomanCenteredSelector: u32 = 0;
pub const anon5011_CJKVerticalRomanHBaselineSelector: u32 = 1;

pub const anon5111 = u32;
pub const anon5111_NoCJKItalicRomanSelector: u32 = 0;
pub const anon5111_CJKItalicRomanSelector: u32 = 1;
pub const anon5111_CJKItalicRomanOnSelector: u32 = 2;
pub const anon5111_CJKItalicRomanOffSelector: u32 = 3;

pub const anon5231 = u32;
pub const anon5231_CaseSensitiveLayoutOnSelector: u32 = 0;
pub const anon5231_CaseSensitiveLayoutOffSelector: u32 = 1;
pub const anon5231_CaseSensitiveSpacingOnSelector: u32 = 2;
pub const anon5231_CaseSensitiveSpacingOffSelector: u32 = 3;

pub const anon5351 = u32;
pub const anon5351_AlternateHorizKanaOnSelector: u32 = 0;
pub const anon5351_AlternateHorizKanaOffSelector: u32 = 1;
pub const anon5351_AlternateVertKanaOnSelector: u32 = 2;
pub const anon5351_AlternateVertKanaOffSelector: u32 = 3;

pub const anon5961 = u32;
pub const anon5961_ContextualAlternatesOnSelector: u32 = 0;
pub const anon5961_ContextualAlternatesOffSelector: u32 = 1;
pub const anon5961_SwashAlternatesOnSelector: u32 = 2;
pub const anon5961_SwashAlternatesOffSelector: u32 = 3;
pub const anon5961_ContextualSwashAlternatesOnSelector: u32 = 4;
pub const anon5961_ContextualSwashAlternatesOffSelector: u32 = 5;

pub const anon6211 = u32;
pub const anon6211_DefaultUpperCaseSelector: u32 = 0;
pub const anon6211_UpperCaseSmallCapsSelector: u32 = 1;
pub const anon6211_UpperCasePetiteCapsSelector: u32 = 2;

pub const anon6321 = u32;
pub const anon6321_HalfWidthCJKRomanSelector: u32 = 0;
pub const anon6321_ProportionalCJKRomanSelector: u32 = 1;
pub const anon6321_DefaultCJKRomanSelector: u32 = 2;
pub const anon6321_FullWidthCJKRomanSelector: u32 = 3;

pub const anon6431 = u32;
pub const anon6431_SFNTLookupSimpleArray: u32 = 0;
pub const anon6431_SFNTLookupSegmentSingle: u32 = 2;
pub const anon6431_SFNTLookupSegmentArray: u32 = 4;
pub const anon6431_SFNTLookupSingleTable: u32 = 6;
pub const anon6431_SFNTLookupTrimmedArray: u32 = 8;
pub const anon6431_SFNTLookupVector: u32 = 10;

pub const SFNTLookupTableFormat = objc.UInt16;

pub const SFNTLookupValue = objc.UInt16;

pub const SFNTLookupOffset = objc.UInt16;

pub const SFNTLookupKind = objc.UInt32;

pub const SFNTLookupBinarySearchHeader = extern struct {
    unitSize: objc.UInt16,
    nUnits: objc.UInt16,
    searchRange: objc.UInt16,
    entrySelector: objc.UInt16,
    rangeShift: objc.UInt16,
};

pub const SFNTLookupArrayHeader = extern struct {
    lookupValues: [1]SFNTLookupValue,
};

pub const SFNTLookupTrimmedArrayHeader = extern struct {
    firstGlyph: objc.UInt16,
    count: objc.UInt16,
    valueArray: [1]SFNTLookupValue,
};

pub const SFNTLookupVectorHeader = extern struct {
    valueSize: objc.UInt16,
    firstGlyph: objc.UInt16,
    count: objc.UInt16,
    values: [1]objc.UInt8,
};

pub const SFNTLookupSegment = extern struct {
    lastGlyph: objc.UInt16,
    firstGlyph: objc.UInt16,
    value: [1]objc.UInt16,
};

pub const SFNTLookupSegmentHeader = extern struct {
    binSearch: SFNTLookupBinarySearchHeader,
    segments: [1]SFNTLookupSegment,
};

pub const SFNTLookupSingle = extern struct {
    glyph: objc.UInt16,
    value: [1]objc.UInt16,
};

pub const SFNTLookupSingleHeader = extern struct {
    binSearch: SFNTLookupBinarySearchHeader,
    entries: [1]SFNTLookupSingle,
};

pub const SFNTLookupFormatSpecificHeader = extern union {
    theArray: SFNTLookupArrayHeader,
    segment: SFNTLookupSegmentHeader,
    single: SFNTLookupSingleHeader,
    trimmedArray: SFNTLookupTrimmedArrayHeader,
    vector: SFNTLookupVectorHeader,
};

pub const SFNTLookupTable = extern struct {
    format: SFNTLookupTableFormat,
    fsHeader: SFNTLookupFormatSpecificHeader,
};

pub const SFNTLookupTablePtr = SFNTLookupTable;

pub const SFNTLookupTableHandle = SFNTLookupTablePtr;

pub const anon7371 = u32;
pub const anon7371_STClassEndOfText: u32 = 0;
pub const anon7371_STClassOutOfBounds: u32 = 1;
pub const anon7371_STClassDeletedGlyph: u32 = 2;
pub const anon7371_STClassEndOfLine: u32 = 3;
pub const anon7371_STSetMark: u32 = 32768;
pub const anon7371_STNoAdvance: u32 = 16384;
pub const anon7371_STMarkEnd: u32 = 8192;
pub const anon7371_STLigActionMask: u32 = 16383;
pub const anon7371_STRearrVerbMask: u32 = 15;

pub const STClass = objc.UInt8;

pub const STEntryIndex = objc.UInt8;

pub const STHeader = extern struct {
    filler: objc.UInt8,
    nClasses: STClass,
    classTableOffset: objc.UInt16,
    stateArrayOffset: objc.UInt16,
    entryTableOffset: objc.UInt16,
};

pub const STClassTable = extern struct {
    firstGlyph: objc.UInt16,
    nGlyphs: objc.UInt16,
    classes: [1]STClass,
};

pub const STEntryZero = extern struct {
    newState: objc.UInt16,
    flags: objc.UInt16,
};

pub const STEntryOne = extern struct {
    newState: objc.UInt16,
    flags: objc.UInt16,
    offset1: objc.UInt16,
};

pub const STEntryTwo = extern struct {
    newState: objc.UInt16,
    flags: objc.UInt16,
    offset1: objc.UInt16,
    offset2: objc.UInt16,
};

pub const anon7851 = u32;
pub const anon7851_STXHasLigAction: u32 = 8192;

pub const STXClass = objc.UInt16;

pub const STXStateIndex = objc.UInt16;

pub const STXEntryIndex = objc.UInt16;

pub const STXHeader = extern struct {
    nClasses: objc.UInt32,
    classTableOffset: objc.UInt32,
    stateArrayOffset: objc.UInt32,
    entryTableOffset: objc.UInt32,
};

pub const STXClassTable = SFNTLookupTable;

pub const STXEntryZero = extern struct {
    newState: STXStateIndex,
    flags: objc.UInt16,
};

pub const STXEntryOne = extern struct {
    newState: STXStateIndex,
    flags: objc.UInt16,
    index1: objc.UInt16,
};

pub const STXEntryTwo = extern struct {
    newState: STXStateIndex,
    flags: objc.UInt16,
    index1: objc.UInt16,
    index2: objc.UInt16,
};

pub const anon8221 = u32;
pub const anon8221_STKCrossStreamReset: u32 = 8192;

pub const anon8281 = u32;
pub const anon8281_LCARTag: u32 = 1818452338;
pub const anon8281_LCARCurrentVersion: u32 = 65536;
pub const anon8281_LCARLinearFormat: u32 = 0;
pub const anon8281_LCARCtlPointFormat: u32 = 1;

pub const LcarCaretClassEntry = extern struct {
    count: objc.UInt16,
    partials: [1]objc.UInt16,
};

pub const LcarCaretTable = extern struct {
    version: objc.Fixed,
    format: objc.UInt16,
    lookup: SFNTLookupTable,
};

pub const LcarCaretTablePtr = LcarCaretTable;

pub const anon8511 = u32;
pub const anon8511_JUSTTag: u32 = 1786082164;
pub const anon8511_JUSTCurrentVersion: u32 = 65536;
pub const anon8511_JUSTStandardFormat: u32 = 0;
pub const anon8511_JUSTnoGlyphcode: u32 = 65535;
pub const anon8511_JUSTpcDecompositionAction: u32 = 0;
pub const anon8511_JUSTpcUnconditionalAddAction: u32 = 1;
pub const anon8511_JUSTpcConditionalAddAction: u32 = 2;
pub const anon8511_JUSTpcGlyphStretchAction: u32 = 3;
pub const anon8511_JUSTpcDuctilityAction: u32 = 4;
pub const anon8511_JUSTpcGlyphRepeatAddAction: u32 = 5;

pub const anon8651 = u32;
pub const anon8651_JUSTKashidaPriority: u32 = 0;
pub const anon8651_JUSTSpacePriority: u32 = 1;
pub const anon8651_JUSTLetterPriority: u32 = 2;
pub const anon8651_JUSTNullPriority: u32 = 3;
pub const anon8651_JUSTPriorityCount: u32 = 4;

pub const anon8741 = u32;
pub const anon8741_JUSTOverridePriority: u32 = 32768;
pub const anon8741_JUSTOverrideLimits: u32 = 16384;
pub const anon8741_JUSTOverrideUnlimited: u32 = 8192;
pub const anon8741_JUSTUnlimited: u32 = 4096;
pub const anon8741_JUSTPriorityMask: u32 = 3;

pub const JustPCActionType = objc.UInt16;

pub const JustificationFlags = objc.UInt16;

pub const JustPCDecompositionAction = extern struct {
    lowerLimit: objc.Fixed,
    upperLimit: objc.Fixed,
    order: objc.UInt16,
    count: objc.UInt16,
    glyphs: [1]objc.UInt16,
};

pub const JustPCUnconditionalAddAction = objc.UInt16;

pub const JustPCConditionalAddAction = extern struct {
    substThreshold: objc.Fixed,
    addGlyph: objc.UInt16,
    substGlyph: objc.UInt16,
};

pub const JustPCDuctilityAction = extern struct {
    ductilityAxis: objc.UInt32,
    minimumLimit: objc.Fixed,
    noStretchValue: objc.Fixed,
    maximumLimit: objc.Fixed,
};

pub const JustPCGlyphRepeatAddAction = extern struct {
    flags: objc.UInt16,
    glyph: objc.UInt16,
};

pub const JustPCActionSubrecord = extern struct {
    theClass: objc.UInt16,
    theType: JustPCActionType,
    length: objc.UInt32,
    data: objc.UInt32,
};

pub const JustPCAction = extern struct {
    actionCount: objc.UInt32,
    actions: [1]JustPCActionSubrecord,
};

pub const JustWidthDeltaEntry = extern struct {
    justClass: objc.UInt32,
    beforeGrowLimit: objc.Fixed,
    beforeShrinkLimit: objc.Fixed,
    afterGrowLimit: objc.Fixed,
    afterShrinkLimit: objc.Fixed,
    growFlags: JustificationFlags,
    shrinkFlags: JustificationFlags,
};

pub const JustWidthDeltaGroup = extern struct {
    count: objc.UInt32,
    entries: [1]JustWidthDeltaEntry,
};

pub const JustPostcompTable = extern struct {
    lookupTable: SFNTLookupTable,
};

pub const JustDirectionTable = extern struct {
    justClass: objc.UInt16,
    widthDeltaClusters: objc.UInt16,
    postcomp: objc.UInt16,
    lookup: SFNTLookupTable,
};

pub const JustTable = extern struct {
    version: objc.Fixed,
    format: objc.UInt16,
    horizHeaderOffset: objc.UInt16,
    vertHeaderOffset: objc.UInt16,
};

pub const anon9821 = u32;
pub const anon9821_OPBDTag: u32 = 1869636196;
pub const anon9821_OPBDCurrentVersion: u32 = 65536;
pub const anon9821_OPBDDistanceFormat: u32 = 0;
pub const anon9821_OPBDControlPointFormat: u32 = 1;

pub const OpbdTableFormat = objc.UInt16;

pub const OpbdSideValues = extern struct {
    leftSideShift: objc.SInt16,
    topSideShift: objc.SInt16,
    rightSideShift: objc.SInt16,
    bottomSideShift: objc.SInt16,
};

pub const OpbdTable = extern struct {
    version: objc.Fixed,
    format: OpbdTableFormat,
    lookupTable: SFNTLookupTable,
};

pub const anon10131 = i32;
pub const anon10131_MORTTag: i32 = 1836020340;
pub const anon10131_MORTCurrentVersion: i32 = 65536;
pub const anon10131_MORTCoverVertical: i32 = 32768;
pub const anon10131_MORTCoverDescending: i32 = 16384;
pub const anon10131_MORTCoverIgnoreVertical: i32 = 8192;
pub const anon10131_MORTCoverTypeMask: i32 = 15;
pub const anon10131_MORTRearrangementType: i32 = 0;
pub const anon10131_MORTContextualType: i32 = 1;
pub const anon10131_MORTLigatureType: i32 = 2;
pub const anon10131_MORTSwashType: i32 = 4;
pub const anon10131_MORTInsertionType: i32 = 5;
pub const anon10131_MORTLigLastAction: i32 = -2147483648;
pub const anon10131_MORTLigStoreLigature: i32 = 1073741824;
pub const anon10131_MORTLigFormOffsetMask: i32 = 1073741823;
pub const anon10131_MORTLigFormOffsetShift: i32 = 2;
pub const anon10131_MORTraNoAction: i32 = 0;
pub const anon10131_MORTraxA: i32 = 1;
pub const anon10131_MORTraDx: i32 = 2;
pub const anon10131_MORTraDxA: i32 = 3;
pub const anon10131_MORTraxAB: i32 = 4;
pub const anon10131_MORTraxBA: i32 = 5;
pub const anon10131_MORTraCDx: i32 = 6;
pub const anon10131_MORTraDCx: i32 = 7;
pub const anon10131_MORTraCDxA: i32 = 8;
pub const anon10131_MORTraDCxA: i32 = 9;
pub const anon10131_MORTraDxAB: i32 = 10;
pub const anon10131_MORTraDxBA: i32 = 11;
pub const anon10131_MORTraCDxAB: i32 = 12;
pub const anon10131_MORTraCDxBA: i32 = 13;
pub const anon10131_MORTraDCxAB: i32 = 14;
pub const anon10131_MORTraDCxBA: i32 = 15;
pub const anon10131_MORTDoInsertionsBefore: i32 = 128;
pub const anon10131_MORTIsSplitVowelPiece: i32 = 64;
pub const anon10131_MORTInsertionsCountMask: i32 = 63;
pub const anon10131_MORTCurrInsertKashidaLike: i32 = 8192;
pub const anon10131_MORTMarkInsertKashidaLike: i32 = 4096;
pub const anon10131_MORTCurrInsertBefore: i32 = 2048;
pub const anon10131_MORTMarkInsertBefore: i32 = 1024;
pub const anon10131_MORTMarkJustTableCountMask: i32 = 16256;
pub const anon10131_MORTMarkJustTableCountShift: i32 = 7;
pub const anon10131_MORTCurrJustTableCountMask: i32 = 127;
pub const anon10131_MORTCurrJustTableCountShift: i32 = 0;
pub const anon10131_MORTCurrInsertCountMask: i32 = 992;
pub const anon10131_MORTCurrInsertCountShift: i32 = 5;
pub const anon10131_MORTMarkInsertCountMask: i32 = 31;
pub const anon10131_MORTMarkInsertCountShift: i32 = 0;

pub const MortSubtableMaskFlags = objc.UInt32;

pub const MortLigatureActionEntry = objc.UInt32;

pub const MortRearrangementSubtable = extern struct {
    header: STHeader,
};

pub const MortContextualSubtable = extern struct {
    header: STHeader,
    substitutionTableOffset: objc.UInt16,
};

pub const MortLigatureSubtable = extern struct {
    header: STHeader,
    ligatureActionTableOffset: objc.UInt16,
    componentTableOffset: objc.UInt16,
    ligatureTableOffset: objc.UInt16,
};

pub const MortSwashSubtable = extern struct {
    lookup: SFNTLookupTable,
};

pub const MortInsertionSubtable = extern struct {
    header: STHeader,
};

pub const MortSpecificSubtable = extern union {
    rearrangement: MortRearrangementSubtable,
    contextual: MortContextualSubtable,
    ligature: MortLigatureSubtable,
    swash: MortSwashSubtable,
    insertion: MortInsertionSubtable,
};

pub const MortSubtable = extern struct {
    length: objc.UInt16,
    coverage: objc.UInt16,
    flags: MortSubtableMaskFlags,
    u: MortSpecificSubtable,
};

pub const MortFeatureEntry = extern struct {
    featureType: objc.UInt16,
    featureSelector: objc.UInt16,
    enableFlags: MortSubtableMaskFlags,
    disableFlags: MortSubtableMaskFlags,
};

pub const MortChain = extern struct {
    defaultFlags: MortSubtableMaskFlags,
    length: objc.UInt32,
    nFeatures: objc.UInt16,
    nSubtables: objc.UInt16,
    featureEntries: [1]MortFeatureEntry,
};

pub const MortTable = extern struct {
    version: objc.Fixed,
    nChains: objc.UInt32,
    chains: [1]MortChain,
};

pub const anon11321 = i32;
pub const anon11321_MORXTag: i32 = 1836020344;
pub const anon11321_MORXCurrentVersion: i32 = 131072;
pub const anon11321_MORXCoverVertical: i32 = -2147483648;
pub const anon11321_MORXCoverDescending: i32 = 1073741824;
pub const anon11321_MORXCoverIgnoreVertical: i32 = 536870912;
pub const anon11321_MORXCoverLogicalOrder: i32 = 268435456;
pub const anon11321_MORXCoverTypeMask: i32 = 255;

pub const MorxRearrangementSubtable = extern struct {
    header: STXHeader,
};

pub const MorxContextualSubtable = extern struct {
    header: STXHeader,
    substitutionTableOffset: objc.UInt32,
};

pub const MorxLigatureSubtable = extern struct {
    header: STXHeader,
    ligatureActionTableOffset: objc.UInt32,
    componentTableOffset: objc.UInt32,
    ligatureTableOffset: objc.UInt32,
};

pub const MorxInsertionSubtable = extern struct {
    header: STXHeader,
    insertionGlyphTableOffset: objc.UInt32,
};

pub const MorxSpecificSubtable = extern union {
    rearrangement: MorxRearrangementSubtable,
    contextual: MorxContextualSubtable,
    ligature: MorxLigatureSubtable,
    swash: MortSwashSubtable,
    insertion: MorxInsertionSubtable,
};

pub const MorxSubtable = extern struct {
    length: objc.UInt32,
    coverage: objc.UInt32,
    flags: MortSubtableMaskFlags,
    u: MorxSpecificSubtable,
};

pub const MorxChain = extern struct {
    defaultFlags: MortSubtableMaskFlags,
    length: objc.UInt32,
    nFeatures: objc.UInt32,
    nSubtables: objc.UInt32,
    featureEntries: [1]MortFeatureEntry,
};

pub const MorxTable = extern struct {
    version: objc.Fixed,
    nChains: objc.UInt32,
    chains: [1]MorxChain,
};

pub const anon11981 = u32;
pub const anon11981_PROPTag: u32 = 1886547824;
pub const anon11981_PROPCurrentVersion: u32 = 196608;
pub const anon11981_PROPPairOffsetShift: u32 = 8;
pub const anon11981_PROPPairOffsetSign: u32 = 7;
pub const anon11981_PROPIsFloaterMask: u32 = 32768;
pub const anon11981_PROPCanHangLTMask: u32 = 16384;
pub const anon11981_PROPCanHangRBMask: u32 = 8192;
pub const anon11981_PROPUseRLPairMask: u32 = 4096;
pub const anon11981_PROPPairOffsetMask: u32 = 3840;
pub const anon11981_PROPRightConnectMask: u32 = 128;
pub const anon11981_PROPZeroReserved: u32 = 96;
pub const anon11981_PROPDirectionMask: u32 = 31;

pub const anon12141 = u32;
pub const anon12141_PROPLDirectionClass: u32 = 0;
pub const anon12141_PROPRDirectionClass: u32 = 1;
pub const anon12141_PROPALDirectionClass: u32 = 2;
pub const anon12141_PROPENDirectionClass: u32 = 3;
pub const anon12141_PROPESDirectionClass: u32 = 4;
pub const anon12141_PROPETDirectionClass: u32 = 5;
pub const anon12141_PROPANDirectionClass: u32 = 6;
pub const anon12141_PROPCSDirectionClass: u32 = 7;
pub const anon12141_PROPPSDirectionClass: u32 = 8;
pub const anon12141_PROPSDirectionClass: u32 = 9;
pub const anon12141_PROPWSDirectionClass: u32 = 10;
pub const anon12141_PROPONDirectionClass: u32 = 11;
pub const anon12141_PROPSENDirectionClass: u32 = 12;
pub const anon12141_PROPLREDirectionClass: u32 = 13;
pub const anon12141_PROPLRODirectionClass: u32 = 14;
pub const anon12141_PROPRLEDirectionClass: u32 = 15;
pub const anon12141_PROPRLODirectionClass: u32 = 16;
pub const anon12141_PROPPDFDirectionClass: u32 = 17;
pub const anon12141_PROPNSMDirectionClass: u32 = 18;
pub const anon12141_PROPBNDirectionClass: u32 = 19;
pub const anon12141_PROPNumDirectionClasses: u32 = 20;

pub const PropCharProperties = objc.UInt16;

pub const PropTable = extern struct {
    version: objc.Fixed,
    format: objc.UInt16,
    defaultProps: PropCharProperties,
    lookup: SFNTLookupTable,
};

pub const PropLookupSegment = extern struct {
    lastGlyph: objc.UInt16,
    firstGlyph: objc.UInt16,
    value: objc.UInt16,
};

pub const PropLookupSingle = extern struct {
    glyph: objc.UInt16,
    props: PropCharProperties,
};

pub const anon12621 = u32;
pub const anon12621_TRAKTag: u32 = 1953653099;
pub const anon12621_TRAKCurrentVersion: u32 = 65536;
pub const anon12621_TRAKUniformFormat: u32 = 0;

pub const TrakValue = objc.SInt16;

pub const TrakTableEntry = extern struct {
    track: objc.Fixed,
    nameTableIndex: objc.UInt16,
    sizesOffset: objc.UInt16,
};

pub const TrakTableData = extern struct {
    nTracks: objc.UInt16,
    nSizes: objc.UInt16,
    sizeTableOffset: objc.UInt32,
    trakTable: [1]TrakTableEntry,
};

pub const TrakTable = extern struct {
    version: objc.Fixed,
    format: objc.UInt16,
    horizOffset: objc.UInt16,
    vertOffset: objc.UInt16,
};

pub const anon12941 = u32;
pub const anon12941_KERNTag: u32 = 1801810542;
pub const anon12941_KERNCurrentVersion: u32 = 65536;
pub const anon12941_KERNVertical: u32 = 32768;
pub const anon12941_KERNResetCrossStream: u32 = 32768;
pub const anon12941_KERNCrossStream: u32 = 16384;
pub const anon12941_KERNVariation: u32 = 8192;
pub const anon12941_KERNUnusedBits: u32 = 7936;
pub const anon12941_KERNFormatMask: u32 = 255;

pub const anon13051 = u32;
pub const anon13051_KERNOrderedList: u32 = 0;
pub const anon13051_KERNStateTable: u32 = 1;
pub const anon13051_KERNSimpleArray: u32 = 2;
pub const anon13051_KERNIndexArray: u32 = 3;

pub const anon13131 = u32;
pub const anon13131_KERNLineStart: u32 = 1;
pub const anon13131_KERNLineEndKerning: u32 = 2;
pub const anon13131_KERNNoCrossKerning: u32 = 4;
pub const anon13131_KERNNotesRequested: u32 = 8;
pub const anon13131_KERNNoStakeNote: u32 = 1;
pub const anon13131_KERNCrossStreamResetNote: u32 = 2;
pub const anon13131_KERNNotApplied: u32 = 1;

pub const KernTableFormat = objc.UInt8;

pub const KernSubtableInfo = objc.UInt16;

pub const KernKerningValue = objc.SInt16;

pub const KernArrayOffset = objc.UInt16;

pub const KernVersion0Header = extern struct {
    version: objc.UInt16,
    nTables: objc.UInt16,
    firstSubtable: [1]objc.UInt16,
};

pub const KernTableHeader = extern struct {
    version: objc.Fixed,
    nTables: objc.SInt32,
    firstSubtable: [1]objc.UInt16,
};

pub const KernTableHeaderPtr = KernTableHeader;

pub const KernTableHeaderHandle = KernTableHeaderPtr;

pub const KernKerningPair = extern struct {
    left: objc.UInt16,
    right: objc.UInt16,
};

pub const KernOrderedListEntry = extern struct {
    pair: KernKerningPair,
    value: KernKerningValue,
};

pub const KernOrderedListEntryPtr = KernOrderedListEntry;

pub const KernOrderedListHeader = extern struct {
    nPairs: objc.UInt16,
    searchRange: objc.UInt16,
    entrySelector: objc.UInt16,
    rangeShift: objc.UInt16,
    table: [1]objc.UInt16,
};

pub const KernStateHeader = extern struct {
    header: STHeader,
    valueTable: objc.UInt16,
    firstTable: [1]objc.UInt8,
};

pub const KernStateEntry = extern struct {
    newState: objc.UInt16,
    flags: objc.UInt16,
};

pub const KernOffsetTable = extern struct {
    firstGlyph: objc.UInt16,
    nGlyphs: objc.UInt16,
    offsetTable: [1]KernArrayOffset,
};

pub const KernOffsetTablePtr = KernOffsetTable;

pub const KernSimpleArrayHeader = extern struct {
    rowWidth: objc.UInt16,
    leftOffsetTable: objc.UInt16,
    rightOffsetTable: objc.UInt16,
    theArray: KernArrayOffset,
    firstTable: [1]objc.UInt16,
};

pub const KernIndexArrayHeader = extern struct {
    glyphCount: objc.UInt16,
    kernValueCount: objc.UInt8,
    leftClassCount: objc.UInt8,
    rightClassCount: objc.UInt8,
    flags: objc.UInt8,
    kernValue: [1]objc.SInt16,
    leftClass: [1]objc.UInt8,
    rightClass: [1]objc.UInt8,
    kernIndex: [1]objc.UInt8,
};

pub const KernFormatSpecificHeader = extern union {
    orderedList: KernOrderedListHeader,
    stateTable: KernStateHeader,
    simpleArray: KernSimpleArrayHeader,
    indexArray: KernIndexArrayHeader,
};

pub const KernVersion0SubtableHeader = extern struct {
    version: objc.UInt16,
    length: objc.UInt16,
    stInfo: KernSubtableInfo,
    fsHeader: KernFormatSpecificHeader,
};

pub const KernSubtableHeader = extern struct {
    length: objc.SInt32,
    stInfo: KernSubtableInfo,
    tupleIndex: objc.SInt16,
    fsHeader: KernFormatSpecificHeader,
};

pub const KernSubtableHeaderPtr = KernSubtableHeader;

pub const anon14691 = i32;
pub const anon14691_KERXTag: i32 = 1801810552;
pub const anon14691_KERXCurrentVersion: i32 = 131072;
pub const anon14691_KERXVertical: i32 = -2147483648;
pub const anon14691_KERXResetCrossStream: i32 = 32768;
pub const anon14691_KERXCrossStream: i32 = 1073741824;
pub const anon14691_KERXVariation: i32 = 536870912;
pub const anon14691_KERXDescending: i32 = 268435456;
pub const anon14691_KERXUnusedBits: i32 = 268435200;
pub const anon14691_KERXFormatMask: i32 = 255;

pub const anon14811 = u32;
pub const anon14811_KERXOrderedList: u32 = 0;
pub const anon14811_KERXStateTable: u32 = 1;
pub const anon14811_KERXSimpleArray: u32 = 2;
pub const anon14811_KERXControlPoint: u32 = 4;
pub const anon14811_KERXIndexArray: u32 = 6;

pub const anon14901 = u32;
pub const anon14901_KERXLineStart: u32 = 1;
pub const anon14901_KERXLineEndKerning: u32 = 2;
pub const anon14901_KERXNoCrossKerning: u32 = 4;
pub const anon14901_KERXNotesRequested: u32 = 8;
pub const anon14901_KERXNoStakeNote: u32 = 1;
pub const anon14901_KERXCrossStreamResetNote: u32 = 2;
pub const anon14901_KERXNotApplied: u32 = 1;

pub const anon15011 = u32;
pub const anon15011_KERXActionTypeMask: u32 = -1073741824;
pub const anon15011_KERXActionTypeControlPoints: u32 = 0;
pub const anon15011_KERXActionTypeAnchorPoints: u32 = 1073741824;
pub const anon15011_KERXActionTypeCoordinates: u32 = -2147483648;
pub const anon15011_KERXUnusedFlags: u32 = 1056964608;
pub const anon15011_KERXActionOffsetMask: u32 = 16777215;

pub const anon15111 = u32;
pub const anon15111_KERXValuesAreLong: u32 = 1;

pub const KerxSubtableCoverage = objc.UInt32;

pub const KerxArrayOffset = objc.UInt32;

pub const KerxTableHeader = extern struct {
    version: objc.Fixed,
    nTables: objc.UInt32,
    firstSubtable: [1]objc.UInt32,
};

pub const KerxTableHeaderPtr = KerxTableHeader;

pub const KerxTableHeaderHandle = KerxTableHeaderPtr;

pub const KerxKerningPair = extern struct {
    left: objc.UInt16,
    right: objc.UInt16,
};

pub const KerxOrderedListEntry = extern struct {
    pair: KerxKerningPair,
    value: KernKerningValue,
};

pub const KerxOrderedListEntryPtr = KerxOrderedListEntry;

pub const KerxOrderedListHeader = extern struct {
    nPairs: objc.UInt32,
    searchRange: objc.UInt32,
    entrySelector: objc.UInt32,
    rangeShift: objc.UInt32,
    table: [1]objc.UInt32,
};

pub const KerxStateHeader = extern struct {
    header: STXHeader,
    valueTable: objc.UInt32,
    firstTable: [1]objc.UInt8,
};

pub const KerxStateEntry = extern struct {
    newState: objc.UInt16,
    flags: objc.UInt16,
    valueIndex: objc.UInt16,
};

pub const KerxControlPointHeader = extern struct {
    header: STXHeader,
    flags: objc.UInt32,
    firstTable: [1]objc.UInt8,
};

pub const KerxControlPointEntry = extern struct {
    newState: objc.UInt16,
    flags: objc.UInt16,
    actionIndex: objc.UInt16,
};

pub const KerxControlPointAction = extern struct {
    markControlPoint: objc.UInt16,
    currControlPoint: objc.UInt16,
};

pub const KerxAnchorPointAction = extern struct {
    markAnchorPoint: objc.UInt16,
    currAnchorPoint: objc.UInt16,
};

pub const KerxCoordinateAction = extern struct {
    markX: objc.UInt16,
    markY: objc.UInt16,
    currX: objc.UInt16,
    currY: objc.UInt16,
};

pub const KerxSimpleArrayHeader = extern struct {
    rowWidth: objc.UInt32,
    leftOffsetTable: objc.UInt32,
    rightOffsetTable: objc.UInt32,
    theArray: KerxArrayOffset,
    firstTable: [1]objc.UInt32,
};

pub const KerxIndexArrayHeader = extern struct {
    flags: objc.UInt32,
    rowCount: objc.UInt16,
    columnCount: objc.UInt16,
    rowIndexTableOffset: objc.UInt32,
    columnIndexTableOffset: objc.UInt32,
    kerningArrayOffset: objc.UInt32,
    kerningVectorOffset: objc.UInt32,
};

pub const KerxFormatSpecificHeader = extern union {
    orderedList: KerxOrderedListHeader,
    stateTable: KerxStateHeader,
    simpleArray: KerxSimpleArrayHeader,
    indexArray: KerxIndexArrayHeader,
    controlPoint: KerxControlPointHeader,
};

pub const KerxSubtableHeader = extern struct {
    length: objc.UInt32,
    stInfo: KerxSubtableCoverage,
    tupleCount: objc.UInt32,
    fsHeader: KerxFormatSpecificHeader,
};

pub const KerxSubtableHeaderPtr = KerxSubtableHeader;

pub const anon16541 = u32;
pub const anon16541_BSLNTag: u32 = 1651731566;
pub const anon16541_BSLNCurrentVersion: u32 = 65536;
pub const anon16541_BSLNDistanceFormatNoMap: u32 = 0;
pub const anon16541_BSLNDistanceFormatWithMap: u32 = 1;
pub const anon16541_BSLNControlPointFormatNoMap: u32 = 2;
pub const anon16541_BSLNControlPointFormatWithMap: u32 = 3;

pub const anon16641 = u32;
pub const anon16641_BSLNRomanBaseline: u32 = 0;
pub const anon16641_BSLNIdeographicCenterBaseline: u32 = 1;
pub const anon16641_BSLNIdeographicLowBaseline: u32 = 2;
pub const anon16641_BSLNHangingBaseline: u32 = 3;
pub const anon16641_BSLNMathBaseline: u32 = 4;
pub const anon16641_BSLNIdeographicHighBaseline: u32 = 5;
pub const anon16641_BSLNLastBaseline: u32 = 31;
pub const anon16641_BSLNNumBaselineClasses: u32 = 32;
pub const anon16641_BSLNNoBaseline: u32 = 255;
pub const anon16641_BSLNNoBaselineOverride: u32 = 255;

pub const BslnBaselineClass = objc.UInt32;

pub const BslnBaselineRecord = objc.Fixed;

pub const BslnFormat0Part = extern struct {
    deltas: [32]objc.SInt16,
};

pub const BslnFormat1Part = extern struct {
    deltas: [32]objc.SInt16,
    mappingData: SFNTLookupTable,
};

pub const BslnFormat2Part = extern struct {
    stdGlyph: objc.UInt16,
    ctlPoints: [32]objc.SInt16,
};

pub const BslnFormat3Part = extern struct {
    stdGlyph: objc.UInt16,
    ctlPoints: [32]objc.SInt16,
    mappingData: SFNTLookupTable,
};

pub const BslnFormatUnion = extern union {
    fmt0Part: BslnFormat0Part,
    fmt1Part: BslnFormat1Part,
    fmt2Part: BslnFormat2Part,
    fmt3Part: BslnFormat3Part,
};

pub const BslnTableFormat = objc.UInt16;

pub const BslnTable = extern struct {
    version: objc.Fixed,
    format: BslnTableFormat,
    defaultBaseline: objc.UInt16,
    parts: BslnFormatUnion,
};

pub const BslnTablePtr = BslnTable;

pub const ALMXHeader = extern struct {
    Version: objc.Fixed,
    Flags: objc.UInt16,
    NMasters: objc.UInt16,
    FirstGlyph: objc.UInt16,
    LastGlyph: objc.UInt16,
    lookup: SFNTLookupTable,
};

pub const ALMXGlyphEntry = extern struct {
    GlyphIndexOffset: objc.SInt16,
    HorizontalAdvance: objc.SInt16,
    XOffsetToHOrigin: objc.SInt16,
    VerticalAdvance: objc.SInt16,
    YOffsetToVOrigin: objc.SInt16,
};

pub const ROTAHeader = extern struct {
    Version: objc.Fixed,
    Flags: objc.UInt16,
    NMasters: objc.UInt16,
    FirstGlyph: objc.UInt16,
    LastGlyph: objc.UInt16,
    lookup: SFNTLookupTable,
};

pub const ROTAGlyphEntry = extern struct {
    GlyphIndexOffset: objc.SInt16,
    HBaselineOffset: objc.SInt16,
    VBaselineOffset: objc.SInt16,
};

pub const anon17801 = u32;
pub const anon17801_ANKRCurrentVersion: u32 = 0;

pub const AnchorPoint = extern struct {
    x: objc.SInt16,
    y: objc.SInt16,
};

pub const AnchorPointTable = extern struct {
    nPoints: objc.UInt32,
    points: [1]AnchorPoint,
};

pub const AnkrTable = extern struct {
    version: objc.UInt16,
    flags: objc.UInt16,
    lookupTableOffset: objc.UInt32,
    anchorPointTableOffset: objc.UInt32,
};

pub const anon18071 = u32;
pub const anon18071_LTAGCurrentVersion: u32 = 1;

pub const LtagStringRange = extern struct {
    offset: objc.UInt16,
    length: objc.UInt16,
};

pub const LtagTable = extern struct {
    version: objc.UInt32,
    flags: objc.UInt32,
    numTags: objc.UInt32,
    tagRange: [1]LtagStringRange,
};

pub const sfntDirectoryEntry = extern struct {
    tableTag: objc.FourCharCode,
    checkSum: objc.UInt32,
    offset: objc.UInt32,
    length: objc.UInt32,
};

pub const sfntDirectory = extern struct {
    format: objc.FourCharCode,
    numOffsets: objc.UInt16,
    searchRange: objc.UInt16,
    entrySelector: objc.UInt16,
    rangeShift: objc.UInt16,
    table: [1]sfntDirectoryEntry,
};

pub const anon481 = u32;
pub const anon481_cmapFontTableTag: u32 = 1668112752;

pub const anon521 = u32;
pub const anon521_FontUnicodePlatform: u32 = 0;
pub const anon521_FontMacintoshPlatform: u32 = 1;
pub const anon521_FontReservedPlatform: u32 = 2;
pub const anon521_FontMicrosoftPlatform: u32 = 3;
pub const anon521_FontCustomPlatform: u32 = 4;

pub const anon601 = u32;
pub const anon601_FontUnicodeDefaultSemantics: u32 = 0;
pub const anon601_FontUnicodeV1_1Semantics: u32 = 1;
pub const anon601_FontISO10646_1993Semantics: u32 = 2;
pub const anon601_FontUnicodeV2_0BMPOnlySemantics: u32 = 3;
pub const anon601_FontUnicodeV2_0FullCoverageSemantics: u32 = 4;
pub const anon601_FontUnicodeV4_0VariationSequenceSemantics: u32 = 5;
pub const anon601_FontUnicode_FullRepertoire: u32 = 6;

pub const anon1121 = u32;
pub const anon1121_FontMicrosoftSymbolScript: u32 = 0;
pub const anon1121_FontMicrosoftStandardScript: u32 = 1;
pub const anon1121_FontMicrosoftUCS4Script: u32 = 10;

pub const anon1191 = u32;
pub const anon1191_FontCustom8BitScript: u32 = 0;
pub const anon1191_FontCustom816BitScript: u32 = 1;
pub const anon1191_FontCustom16BitScript: u32 = 2;

pub const anon1261 = u32;
pub const anon1261_FontEnglishLanguage: u32 = 0;
pub const anon1261_FontFrenchLanguage: u32 = 1;
pub const anon1261_FontGermanLanguage: u32 = 2;
pub const anon1261_FontItalianLanguage: u32 = 3;
pub const anon1261_FontDutchLanguage: u32 = 4;
pub const anon1261_FontSwedishLanguage: u32 = 5;
pub const anon1261_FontSpanishLanguage: u32 = 6;
pub const anon1261_FontDanishLanguage: u32 = 7;
pub const anon1261_FontPortugueseLanguage: u32 = 8;
pub const anon1261_FontNorwegianLanguage: u32 = 9;
pub const anon1261_FontHebrewLanguage: u32 = 10;
pub const anon1261_FontJapaneseLanguage: u32 = 11;
pub const anon1261_FontArabicLanguage: u32 = 12;
pub const anon1261_FontFinnishLanguage: u32 = 13;
pub const anon1261_FontGreekLanguage: u32 = 14;
pub const anon1261_FontIcelandicLanguage: u32 = 15;
pub const anon1261_FontMalteseLanguage: u32 = 16;
pub const anon1261_FontTurkishLanguage: u32 = 17;
pub const anon1261_FontCroatianLanguage: u32 = 18;
pub const anon1261_FontTradChineseLanguage: u32 = 19;
pub const anon1261_FontUrduLanguage: u32 = 20;
pub const anon1261_FontHindiLanguage: u32 = 21;
pub const anon1261_FontThaiLanguage: u32 = 22;
pub const anon1261_FontKoreanLanguage: u32 = 23;
pub const anon1261_FontLithuanianLanguage: u32 = 24;
pub const anon1261_FontPolishLanguage: u32 = 25;
pub const anon1261_FontHungarianLanguage: u32 = 26;
pub const anon1261_FontEstonianLanguage: u32 = 27;
pub const anon1261_FontLettishLanguage: u32 = 28;
pub const anon1261_FontLatvianLanguage: u32 = 28;
pub const anon1261_FontSaamiskLanguage: u32 = 29;
pub const anon1261_FontLappishLanguage: u32 = 29;
pub const anon1261_FontFaeroeseLanguage: u32 = 30;
pub const anon1261_FontFarsiLanguage: u32 = 31;
pub const anon1261_FontPersianLanguage: u32 = 31;
pub const anon1261_FontRussianLanguage: u32 = 32;
pub const anon1261_FontSimpChineseLanguage: u32 = 33;
pub const anon1261_FontFlemishLanguage: u32 = 34;
pub const anon1261_FontIrishLanguage: u32 = 35;
pub const anon1261_FontAlbanianLanguage: u32 = 36;
pub const anon1261_FontRomanianLanguage: u32 = 37;
pub const anon1261_FontCzechLanguage: u32 = 38;
pub const anon1261_FontSlovakLanguage: u32 = 39;
pub const anon1261_FontSlovenianLanguage: u32 = 40;
pub const anon1261_FontYiddishLanguage: u32 = 41;
pub const anon1261_FontSerbianLanguage: u32 = 42;
pub const anon1261_FontMacedonianLanguage: u32 = 43;
pub const anon1261_FontBulgarianLanguage: u32 = 44;
pub const anon1261_FontUkrainianLanguage: u32 = 45;
pub const anon1261_FontByelorussianLanguage: u32 = 46;
pub const anon1261_FontUzbekLanguage: u32 = 47;
pub const anon1261_FontKazakhLanguage: u32 = 48;
pub const anon1261_FontAzerbaijaniLanguage: u32 = 49;
pub const anon1261_FontAzerbaijanArLanguage: u32 = 50;
pub const anon1261_FontArmenianLanguage: u32 = 51;
pub const anon1261_FontGeorgianLanguage: u32 = 52;
pub const anon1261_FontMoldavianLanguage: u32 = 53;
pub const anon1261_FontKirghizLanguage: u32 = 54;
pub const anon1261_FontTajikiLanguage: u32 = 55;
pub const anon1261_FontTurkmenLanguage: u32 = 56;
pub const anon1261_FontMongolianLanguage: u32 = 57;
pub const anon1261_FontMongolianCyrLanguage: u32 = 58;
pub const anon1261_FontPashtoLanguage: u32 = 59;
pub const anon1261_FontKurdishLanguage: u32 = 60;
pub const anon1261_FontKashmiriLanguage: u32 = 61;
pub const anon1261_FontSindhiLanguage: u32 = 62;
pub const anon1261_FontTibetanLanguage: u32 = 63;
pub const anon1261_FontNepaliLanguage: u32 = 64;
pub const anon1261_FontSanskritLanguage: u32 = 65;
pub const anon1261_FontMarathiLanguage: u32 = 66;
pub const anon1261_FontBengaliLanguage: u32 = 67;
pub const anon1261_FontAssameseLanguage: u32 = 68;
pub const anon1261_FontGujaratiLanguage: u32 = 69;
pub const anon1261_FontPunjabiLanguage: u32 = 70;
pub const anon1261_FontOriyaLanguage: u32 = 71;
pub const anon1261_FontMalayalamLanguage: u32 = 72;
pub const anon1261_FontKannadaLanguage: u32 = 73;
pub const anon1261_FontTamilLanguage: u32 = 74;
pub const anon1261_FontTeluguLanguage: u32 = 75;
pub const anon1261_FontSinhaleseLanguage: u32 = 76;
pub const anon1261_FontBurmeseLanguage: u32 = 77;
pub const anon1261_FontKhmerLanguage: u32 = 78;
pub const anon1261_FontLaoLanguage: u32 = 79;
pub const anon1261_FontVietnameseLanguage: u32 = 80;
pub const anon1261_FontIndonesianLanguage: u32 = 81;
pub const anon1261_FontTagalogLanguage: u32 = 82;
pub const anon1261_FontMalayRomanLanguage: u32 = 83;
pub const anon1261_FontMalayArabicLanguage: u32 = 84;
pub const anon1261_FontAmharicLanguage: u32 = 85;
pub const anon1261_FontTigrinyaLanguage: u32 = 86;
pub const anon1261_FontGallaLanguage: u32 = 87;
pub const anon1261_FontOromoLanguage: u32 = 87;
pub const anon1261_FontSomaliLanguage: u32 = 88;
pub const anon1261_FontSwahiliLanguage: u32 = 89;
pub const anon1261_FontRuandaLanguage: u32 = 90;
pub const anon1261_FontRundiLanguage: u32 = 91;
pub const anon1261_FontChewaLanguage: u32 = 92;
pub const anon1261_FontMalagasyLanguage: u32 = 93;
pub const anon1261_FontEsperantoLanguage: u32 = 94;
pub const anon1261_FontWelshLanguage: u32 = 128;
pub const anon1261_FontBasqueLanguage: u32 = 129;
pub const anon1261_FontCatalanLanguage: u32 = 130;
pub const anon1261_FontLatinLanguage: u32 = 131;
pub const anon1261_FontQuechuaLanguage: u32 = 132;
pub const anon1261_FontGuaraniLanguage: u32 = 133;
pub const anon1261_FontAymaraLanguage: u32 = 134;
pub const anon1261_FontTatarLanguage: u32 = 135;
pub const anon1261_FontUighurLanguage: u32 = 136;
pub const anon1261_FontDzongkhaLanguage: u32 = 137;
pub const anon1261_FontJavaneseRomLanguage: u32 = 138;
pub const anon1261_FontSundaneseRomLanguage: u32 = 139;

pub const anon2421 = u32;
pub const anon2421_FontNoPlatformCode: u32 = -1;
pub const anon2421_FontNoScriptCode: u32 = -1;
pub const anon2421_FontNoLanguageCode: u32 = -1;

pub const sfntCMapSubHeader = extern struct {
    format: objc.UInt16,
    length: objc.UInt16,
    languageID: objc.UInt16,
};

pub const sfntCMapExtendedSubHeader = extern struct {
    format: objc.UInt16,
    reserved: objc.UInt16,
    length: objc.UInt32,
    language: objc.UInt32,
};

pub const anon2651 = u32;
pub const anon2651_sizeof_sfntCMapExtendedSubHeader: u32 = 12;

pub const sfntCMapEncoding = extern struct {
    platformID: objc.UInt16,
    scriptID: objc.UInt16,
    offset: objc.UInt32,
};

pub const anon2751 = u32;
pub const anon2751_sizeof_sfntCMapEncoding: u32 = 8;

pub const sfntCMapHeader = extern struct {
    version: objc.UInt16,
    numTables: objc.UInt16,
    encoding: [1]sfntCMapEncoding,
};

pub const anon2851 = u32;
pub const anon2851_sizeof_sfntCMapHeader: u32 = 4;

pub const anon2941 = u32;
pub const anon2941_FontCopyrightName: u32 = 0;
pub const anon2941_FontFamilyName: u32 = 1;
pub const anon2941_FontStyleName: u32 = 2;
pub const anon2941_FontUniqueName: u32 = 3;
pub const anon2941_FontFullName: u32 = 4;
pub const anon2941_FontVersionName: u32 = 5;
pub const anon2941_FontPostscriptName: u32 = 6;
pub const anon2941_FontTrademarkName: u32 = 7;
pub const anon2941_FontManufacturerName: u32 = 8;
pub const anon2941_FontDesignerName: u32 = 9;
pub const anon2941_FontDescriptionName: u32 = 10;
pub const anon2941_FontVendorURLName: u32 = 11;
pub const anon2941_FontDesignerURLName: u32 = 12;
pub const anon2941_FontLicenseDescriptionName: u32 = 13;
pub const anon2941_FontLicenseInfoURLName: u32 = 14;
pub const anon2941_FontPreferredFamilyName: u32 = 16;
pub const anon2941_FontPreferredSubfamilyName: u32 = 17;
pub const anon2941_FontMacCompatibleFullName: u32 = 18;
pub const anon2941_FontSampleTextName: u32 = 19;
pub const anon2941_FontPostScriptCIDName: u32 = 20;
pub const anon2941_FontLastReservedName: u32 = 255;

pub const anon3201 = u32;
pub const anon3201_FontNoNameCode: u32 = -1;

pub const sfntNameRecord = extern struct {
    platformID: objc.UInt16,
    scriptID: objc.UInt16,
    languageID: objc.UInt16,
    nameID: objc.UInt16,
    length: objc.UInt16,
    offset: objc.UInt16,
};

pub const anon3331 = u32;
pub const anon3331_sizeof_sfntNameRecord: u32 = 12;

pub const sfntNameHeader = extern struct {
    format: objc.UInt16,
    count: objc.UInt16,
    stringOffset: objc.UInt16,
    rec: [1]sfntNameRecord,
};

pub const anon3441 = u32;
pub const anon3441_sizeof_sfntNameHeader: u32 = 6;

pub const anon3491 = u32;
pub const anon3491_variationFontTableTag: u32 = 1719034226;

pub const sfntVariationAxis = extern struct {
    axisTag: objc.FourCharCode,
    minValue: objc.Fixed,
    defaultValue: objc.Fixed,
    maxValue: objc.Fixed,
    flags: objc.SInt16,
    nameID: objc.SInt16,
};

pub const anon3631 = u32;
pub const anon3631_sizeof_sfntVariationAxis: u32 = 20;

pub const sfntInstance = extern struct {
    nameID: objc.SInt16,
    flags: objc.SInt16,
    coord: [1]objc.Fixed,
};

pub const anon3751 = u32;
pub const anon3751_sizeof_sfntInstance: u32 = 4;

pub const sfntVariationHeader = extern struct {
    version: objc.Fixed,
    offsetToData: objc.UInt16,
    countSizePairs: objc.UInt16,
    axisCount: objc.UInt16,
    axisSize: objc.UInt16,
    instanceCount: objc.UInt16,
    instanceSize: objc.UInt16,
    axis: [1]sfntVariationAxis,
    instance: [1]sfntInstance,
};

pub const sfntFontDescriptor = extern struct {
    name: objc.FourCharCode,
    value: objc.Fixed,
};

pub const sfntDescriptorHeader = extern struct {
    version: objc.Fixed,
    descriptorCount: objc.SInt32,
    descriptor: [1]sfntFontDescriptor,
};

pub const anon4121 = u32;
pub const anon4121_sizeof_sfntDescriptorHeader: u32 = 8;

pub const anon4171 = u32;
pub const anon4171_featureFontTableTag: u32 = 1717920116;

pub const sfntFeatureName = extern struct {
    featureType: objc.UInt16,
    settingCount: objc.UInt16,
    offsetToSettings: objc.SInt32,
    featureFlags: objc.UInt16,
    nameID: objc.SInt16,
};

pub const sfntFontFeatureSetting = extern struct {
    setting: objc.UInt16,
    nameID: objc.SInt16,
};

pub const sfntFontRunFeature = extern struct {
    featureType: objc.UInt16,
    setting: objc.UInt16,
};

pub const sfntFeatureHeader = extern struct {
    version: objc.SInt32,
    featureNameCount: objc.UInt16,
    featureSetCount: objc.UInt16,
    reserved: objc.SInt32,
    names: [1]sfntFeatureName,
    settings: [1]sfntFontFeatureSetting,
    runs: [1]sfntFontRunFeature,
};

pub const anon4501 = u32;
pub const anon4501_os2FontTableTag: u32 = 1330851634;

pub const anon4551 = u32;
pub const anon4551_nonGlyphID: u32 = 65535;

pub const FontNameCode = objc.UInt32;

pub const FontPlatformCode = objc.UInt32;

pub const FontScriptCode = objc.UInt32;

pub const FontLanguageCode = objc.UInt32;

pub const FontVariation = extern struct {
    name: objc.FourCharCode,
    value: objc.Fixed,
};

extern "CoreText" fn CTGetCoreTextVersion() callconv(.C) objc.uint32_t;
pub const getCoreTextVersion = CTGetCoreTextVersion;
