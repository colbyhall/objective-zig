// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const core_graphics = @import("core_graphics.zig"); // Framework dependency CoreGraphics.

pub const anon3921 = enum(u32) {
    sizeof_sfntVariationHeader = 16,
};

pub const anon3971 = enum(u32) {
    descriptorFontTableTag = 1717859171,
};

pub const anon4071 = enum(u32) {
    NoAnnotationSelector = 0,
    BoxAnnotationSelector = 1,
    RoundedBoxAnnotationSelector = 2,
    CircleAnnotationSelector = 3,
    InvertedCircleAnnotationSelector = 4,
    ParenthesisAnnotationSelector = 5,
    PeriodAnnotationSelector = 6,
    RomanNumeralAnnotationSelector = 7,
    DiamondAnnotationSelector = 8,
    InvertedBoxAnnotationSelector = 9,
    InvertedRoundedBoxAnnotationSelector = 10,
};

pub const anon701 = enum(u32) {
    FontRomanScript = 0,
    FontJapaneseScript = 1,
    FontTraditionalChineseScript = 2,
    FontChineseScript = 2,
    FontKoreanScript = 3,
    FontArabicScript = 4,
    FontHebrewScript = 5,
    FontGreekScript = 6,
    FontCyrillicScript = 7,
    FontRussian = 7,
    FontRSymbolScript = 8,
    FontDevanagariScript = 9,
    FontGurmukhiScript = 10,
    FontGujaratiScript = 11,
    FontOriyaScript = 12,
    FontBengaliScript = 13,
    FontTamilScript = 14,
    FontTeluguScript = 15,
    FontKannadaScript = 16,
    FontMalayalamScript = 17,
    FontSinhaleseScript = 18,
    FontBurmeseScript = 19,
    FontKhmerScript = 20,
    FontThaiScript = 21,
    FontLaotianScript = 22,
    FontGeorgianScript = 23,
    FontArmenianScript = 24,
    FontSimpleChineseScript = 25,
    FontTibetanScript = 26,
    FontMongolianScript = 27,
    FontGeezScript = 28,
    FontEthiopicScript = 28,
    FontAmharicScript = 28,
    FontSlavicScript = 29,
    FontEastEuropeanRomanScript = 29,
    FontVietnameseScript = 30,
    FontExtendedArabicScript = 31,
    FontSindhiScript = 31,
    FontUninterpretedScript = 32,
};

pub const anon491 = enum(u32) {
    CTFontClassMaskShift = 28,
};

pub const FontSymbolicTraits = enum(objc.uint32_t) {
    TraitItalic = 1,
    TraitBold = 2,
    TraitExpanded = 32,
    TraitCondensed = 64,
    TraitMonoSpace = 1024,
    TraitVertical = 2048,
    TraitUIOptimized = 4096,
    TraitColorGlyphs = 8192,
    TraitComposite = 16384,
    TraitClassMask = -268435456,
    ItalicTrait = 1,
    BoldTrait = 2,
    ExpandedTrait = 32,
    CondensedTrait = 64,
    MonoSpaceTrait = 1024,
    VerticalTrait = 2048,
    UIOptimizedTrait = 4096,
    ColorGlyphsTrait = 8192,
    CompositeTrait = 16384,
    ClassMaskTrait = -268435456,
};

pub const FontStylisticClass = enum(objc.uint32_t) {
    ClassUnknown = 0,
    ClassOldStyleSerifs = 268435456,
    ClassTransitionalSerifs = 536870912,
    ClassModernSerifs = 805306368,
    ClassClarendonSerifs = 1073741824,
    ClassSlabSerifs = 1342177280,
    ClassFreeformSerifs = 1879048192,
    ClassSansSerif = -2147483648,
    ClassOrnamentals = -1879048192,
    ClassScripts = -1610612736,
    ClassSymbolic = -1073741824,
    UnknownClass = 0,
    OldStyleSerifsClass = 268435456,
    TransitionalSerifsClass = 536870912,
    ModernSerifsClass = 805306368,
    ClarendonSerifsClass = 1073741824,
    SlabSerifsClass = 1342177280,
    FreeformSerifsClass = 1879048192,
    SansSerifClass = -2147483648,
    OrnamentalsClass = -1879048192,
    ScriptsClass = -1610612736,
    SymbolicClass = -1073741824,
};

pub const anon6101 = enum(u32) {
    DefaultLowerCaseSelector = 0,
    LowerCaseSmallCapsSelector = 1,
    LowerCasePetiteCapsSelector = 2,
};

pub const anon431 = enum(u32) {
    sizeof_sfntDirectory = 12,
};

pub const anon3271 = enum(u32) {
    NoStyleOptionsSelector = 0,
    DisplayTextSelector = 1,
    EngravedTextSelector = 2,
    IlluminatedCapsSelector = 3,
    TitlingCapsSelector = 4,
    TallCapsSelector = 5,
};

pub const anon5471 = enum(u32) {
    NoStylisticAlternatesSelector = 0,
    StylisticAltOneOnSelector = 2,
    StylisticAltOneOffSelector = 3,
    StylisticAltTwoOnSelector = 4,
    StylisticAltTwoOffSelector = 5,
    StylisticAltThreeOnSelector = 6,
    StylisticAltThreeOffSelector = 7,
    StylisticAltFourOnSelector = 8,
    StylisticAltFourOffSelector = 9,
    StylisticAltFiveOnSelector = 10,
    StylisticAltFiveOffSelector = 11,
    StylisticAltSixOnSelector = 12,
    StylisticAltSixOffSelector = 13,
    StylisticAltSevenOnSelector = 14,
    StylisticAltSevenOffSelector = 15,
    StylisticAltEightOnSelector = 16,
    StylisticAltEightOffSelector = 17,
    StylisticAltNineOnSelector = 18,
    StylisticAltNineOffSelector = 19,
    StylisticAltTenOnSelector = 20,
    StylisticAltTenOffSelector = 21,
    StylisticAltElevenOnSelector = 22,
    StylisticAltElevenOffSelector = 23,
    StylisticAltTwelveOnSelector = 24,
    StylisticAltTwelveOffSelector = 25,
    StylisticAltThirteenOnSelector = 26,
    StylisticAltThirteenOffSelector = 27,
    StylisticAltFourteenOnSelector = 28,
    StylisticAltFourteenOffSelector = 29,
    StylisticAltFifteenOnSelector = 30,
    StylisticAltFifteenOffSelector = 31,
    StylisticAltSixteenOnSelector = 32,
    StylisticAltSixteenOffSelector = 33,
    StylisticAltSeventeenOnSelector = 34,
    StylisticAltSeventeenOffSelector = 35,
    StylisticAltEighteenOnSelector = 36,
    StylisticAltEighteenOffSelector = 37,
    StylisticAltNineteenOnSelector = 38,
    StylisticAltNineteenOffSelector = 39,
    StylisticAltTwentyOnSelector = 40,
    StylisticAltTwentyOffSelector = 41,
};

pub const __CTFontDescriptor = extern struct {};

pub const FontDescriptorRef = ?*__CTFontDescriptor;

extern "CoreText" fn CTFontDescriptorGetTypeID() callconv(.C) core_foundation.TypeID;
pub const fontDescriptorGetTypeID = CTFontDescriptorGetTypeID;

pub const FontOrientation = enum(objc.uint32_t) {
    Default = 0,
    Horizontal = 1,
    Vertical = 2,
    DefaultOrientation = 0,
    HorizontalOrientation = 1,
    VerticalOrientation = 2,
};

pub const FontFormat = enum(objc.uint32_t) {
    Unrecognized = 0,
    OpenTypePostScript = 1,
    OpenTypeTrueType = 2,
    TrueType = 3,
    PostScript = 4,
    Bitmap = 5,
};

pub const anon2541 = enum(u32) {
    sizeof_sfntCMapSubHeader = 6,
};

pub const FontPriority = objc.uint32_t;

extern "CoreText" fn CTFontDescriptorCreateWithNameAndSize(name: core_foundation.StringRef, size: core_foundation.CGFloat) callconv(.C) FontDescriptorRef;
pub const fontDescriptorCreateWithNameAndSize = CTFontDescriptorCreateWithNameAndSize;

extern "CoreText" fn CTFontDescriptorCreateWithAttributes(attributes: core_foundation.DictionaryRef) callconv(.C) FontDescriptorRef;
pub const fontDescriptorCreateWithAttributes = CTFontDescriptorCreateWithAttributes;

extern "CoreText" fn CTFontDescriptorCreateCopyWithAttributes(original: FontDescriptorRef, attributes: core_foundation.DictionaryRef) callconv(.C) FontDescriptorRef;
pub const fontDescriptorCreateCopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes;

extern "CoreText" fn CTFontDescriptorCreateCopyWithFamily(original: FontDescriptorRef, family: core_foundation.StringRef) callconv(.C) FontDescriptorRef;
pub const fontDescriptorCreateCopyWithFamily = CTFontDescriptorCreateCopyWithFamily;

extern "CoreText" fn CTFontDescriptorCreateCopyWithSymbolicTraits(original: FontDescriptorRef, symTraitValue: FontSymbolicTraits, symTraitMask: FontSymbolicTraits) callconv(.C) FontDescriptorRef;
pub const fontDescriptorCreateCopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits;

extern "CoreText" fn CTFontDescriptorCreateCopyWithVariation(original: FontDescriptorRef, variationIdentifier: core_foundation.NumberRef, variationValue: core_foundation.CGFloat) callconv(.C) FontDescriptorRef;
pub const fontDescriptorCreateCopyWithVariation = CTFontDescriptorCreateCopyWithVariation;

extern "CoreText" fn CTFontDescriptorCreateCopyWithFeature(original: FontDescriptorRef, featureTypeIdentifier: core_foundation.NumberRef, featureSelectorIdentifier: core_foundation.NumberRef) callconv(.C) FontDescriptorRef;
pub const fontDescriptorCreateCopyWithFeature = CTFontDescriptorCreateCopyWithFeature;

extern "CoreText" fn CTFontDescriptorCreateMatchingFontDescriptors(descriptor: FontDescriptorRef, mandatoryAttributes: core_foundation.SetRef) callconv(.C) core_foundation.ArrayRef;
pub const fontDescriptorCreateMatchingFontDescriptors = CTFontDescriptorCreateMatchingFontDescriptors;

extern "CoreText" fn CTFontDescriptorCreateMatchingFontDescriptor(descriptor: FontDescriptorRef, mandatoryAttributes: core_foundation.SetRef) callconv(.C) FontDescriptorRef;
pub const fontDescriptorCreateMatchingFontDescriptor = CTFontDescriptorCreateMatchingFontDescriptor;

pub const FontDescriptorMatchingState = enum(objc.uint32_t) {
    DidBegin = 0,
    DidFinish = 1,
    WillBeginQuerying = 2,
    Stalled = 3,
    WillBeginDownloading = 4,
    Downloading = 5,
    DidFinishDownloading = 6,
    DidMatch = 7,
    DidFailWithError = 8,
};

pub const FontDescriptorProgressHandler = *const fn (FontDescriptorMatchingState, core_foundation.DictionaryRef) callconv(.C) i32;

extern "CoreText" fn CTFontDescriptorMatchFontDescriptorsWithProgressHandler() callconv(.C) i32;
pub const fontDescriptorMatchFontDescriptorsWithProgressHandler = CTFontDescriptorMatchFontDescriptorsWithProgressHandler;

extern "CoreText" fn CTFontDescriptorCopyAttributes(descriptor: FontDescriptorRef) callconv(.C) core_foundation.DictionaryRef;
pub const fontDescriptorCopyAttributes = CTFontDescriptorCopyAttributes;

extern "CoreText" fn CTFontDescriptorCopyAttribute(descriptor: FontDescriptorRef, attribute: core_foundation.StringRef) callconv(.C) core_foundation.TypeRef;
pub const fontDescriptorCopyAttribute = CTFontDescriptorCopyAttribute;

extern "CoreText" fn CTFontDescriptorCopyLocalizedAttribute(descriptor: FontDescriptorRef, attribute: core_foundation.StringRef, language: ?*core_foundation.StringRef) callconv(.C) core_foundation.TypeRef;
pub const fontDescriptorCopyLocalizedAttribute = CTFontDescriptorCopyLocalizedAttribute;

pub const __CTFont = extern struct {};

pub const FontRef = ?*__CTFont;

extern "CoreText" fn CTFontGetTypeID() callconv(.C) core_foundation.TypeID;
pub const fontGetTypeID = CTFontGetTypeID;

extern "CoreText" fn CTFontCreateWithName(name: core_foundation.StringRef, size: core_foundation.CGFloat, matrix: ?*core_foundation.CGAffineTransform) callconv(.C) FontRef;
pub const fontCreateWithName = CTFontCreateWithName;

extern "CoreText" fn CTFontCreateWithFontDescriptor(descriptor: FontDescriptorRef, size: core_foundation.CGFloat, matrix: ?*core_foundation.CGAffineTransform) callconv(.C) FontRef;
pub const fontCreateWithFontDescriptor = CTFontCreateWithFontDescriptor;

pub const FontOptions = enum(core_foundation.OptionFlags) {
    Default = 0,
    PreventAutoActivation = 1,
    PreventAutoDownload = 2,
    PreferSystemFont = 4,
};

extern "CoreText" fn CTFontCreateWithNameAndOptions(
    name: core_foundation.StringRef,
    size: core_foundation.CGFloat,
    matrix: ?*core_foundation.CGAffineTransform,
    options: FontOptions,
) callconv(.C) FontRef;
pub const fontCreateWithNameAndOptions = CTFontCreateWithNameAndOptions;

extern "CoreText" fn CTFontCreateWithFontDescriptorAndOptions(
    descriptor: FontDescriptorRef,
    size: core_foundation.CGFloat,
    matrix: ?*core_foundation.CGAffineTransform,
    options: FontOptions,
) callconv(.C) FontRef;
pub const fontCreateWithFontDescriptorAndOptions = CTFontCreateWithFontDescriptorAndOptions;

pub const FontUIFontType = enum(objc.uint32_t) {
    None = -1,
    User = 0,
    UserFixedPitch = 1,
    System = 2,
    EmphasizedSystem = 3,
    SmallSystem = 4,
    SmallEmphasizedSystem = 5,
    MiniSystem = 6,
    MiniEmphasizedSystem = 7,
    Views = 8,
    Application = 9,
    Label = 10,
    MenuTitle = 11,
    MenuItem = 12,
    MenuItemMark = 13,
    MenuItemCmdKey = 14,
    WindowTitle = 15,
    PushButton = 16,
    UtilityWindowTitle = 17,
    AlertHeader = 18,
    SystemDetail = 19,
    EmphasizedSystemDetail = 20,
    Toolbar = 21,
    SmallToolbar = 22,
    Message = 23,
    Palette = 24,
    ToolTip = 25,
    ControlContent = 26,
    NoFontType = -1,
    UserFontType = 0,
    UserFixedPitchFontType = 1,
    SystemFontType = 2,
    EmphasizedSystemFontType = 3,
    SmallSystemFontType = 4,
    SmallEmphasizedSystemFontType = 5,
    MiniSystemFontType = 6,
    MiniEmphasizedSystemFontType = 7,
    ViewsFontType = 8,
    ApplicationFontType = 9,
    LabelFontType = 10,
    MenuTitleFontType = 11,
    MenuItemFontType = 12,
    MenuItemMarkFontType = 13,
    MenuItemCmdKeyFontType = 14,
    WindowTitleFontType = 15,
    PushButtonFontType = 16,
    UtilityWindowTitleFontType = 17,
    AlertHeaderFontType = 18,
    SystemDetailFontType = 19,
    EmphasizedSystemDetailFontType = 20,
    ToolbarFontType = 21,
    SmallToolbarFontType = 22,
    MessageFontType = 23,
    PaletteFontType = 24,
    ToolTipFontType = 25,
    ControlContentFontType = 26,
};

extern "CoreText" fn CTFontCreateUIFontForLanguage(uiType: FontUIFontType, size: core_foundation.CGFloat, language: core_foundation.StringRef) callconv(.C) FontRef;
pub const fontCreateUIFontForLanguage = CTFontCreateUIFontForLanguage;

extern "CoreText" fn CTFontCreateCopyWithAttributes(
    font: FontRef,
    size: core_foundation.CGFloat,
    matrix: ?*core_foundation.CGAffineTransform,
    attributes: FontDescriptorRef,
) callconv(.C) FontRef;
pub const fontCreateCopyWithAttributes = CTFontCreateCopyWithAttributes;

extern "CoreText" fn CTFontCreateCopyWithSymbolicTraits(
    font: FontRef,
    size: core_foundation.CGFloat,
    matrix: ?*core_foundation.CGAffineTransform,
    symTraitValue: FontSymbolicTraits,
    symTraitMask: FontSymbolicTraits,
) callconv(.C) FontRef;
pub const fontCreateCopyWithSymbolicTraits = CTFontCreateCopyWithSymbolicTraits;

extern "CoreText" fn CTFontCreateCopyWithFamily(
    font: FontRef,
    size: core_foundation.CGFloat,
    matrix: ?*core_foundation.CGAffineTransform,
    family: core_foundation.StringRef,
) callconv(.C) FontRef;
pub const fontCreateCopyWithFamily = CTFontCreateCopyWithFamily;

extern "CoreText" fn CTFontCreateForString(currentFont: FontRef, string: core_foundation.StringRef, range: core_foundation.Range) callconv(.C) FontRef;
pub const fontCreateForString = CTFontCreateForString;

extern "CoreText" fn CTFontCreateForStringWithLanguage(
    currentFont: FontRef,
    string: core_foundation.StringRef,
    range: core_foundation.Range,
    language: core_foundation.StringRef,
) callconv(.C) FontRef;
pub const fontCreateForStringWithLanguage = CTFontCreateForStringWithLanguage;

extern "CoreText" fn CTFontCopyFontDescriptor(font: FontRef) callconv(.C) FontDescriptorRef;
pub const fontCopyFontDescriptor = CTFontCopyFontDescriptor;

extern "CoreText" fn CTFontCopyAttribute(font: FontRef, attribute: core_foundation.StringRef) callconv(.C) core_foundation.TypeRef;
pub const fontCopyAttribute = CTFontCopyAttribute;

extern "CoreText" fn CTFontGetSize(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetSize = CTFontGetSize;

extern "CoreText" fn CTFontGetMatrix(font: FontRef) callconv(.C) core_foundation.CGAffineTransform;
pub const fontGetMatrix = CTFontGetMatrix;

extern "CoreText" fn CTFontGetSymbolicTraits(font: FontRef) callconv(.C) FontSymbolicTraits;
pub const fontGetSymbolicTraits = CTFontGetSymbolicTraits;

extern "CoreText" fn CTFontCopyTraits(font: FontRef) callconv(.C) core_foundation.DictionaryRef;
pub const fontCopyTraits = CTFontCopyTraits;

extern "CoreText" fn CTFontCopyDefaultCascadeListForLanguages(font: FontRef, languagePrefList: core_foundation.ArrayRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCopyDefaultCascadeListForLanguages = CTFontCopyDefaultCascadeListForLanguages;

extern "CoreText" fn CTFontCopyPostScriptName(font: FontRef) callconv(.C) core_foundation.StringRef;
pub const fontCopyPostScriptName = CTFontCopyPostScriptName;

extern "CoreText" fn CTFontCopyFamilyName(font: FontRef) callconv(.C) core_foundation.StringRef;
pub const fontCopyFamilyName = CTFontCopyFamilyName;

extern "CoreText" fn CTFontCopyFullName(font: FontRef) callconv(.C) core_foundation.StringRef;
pub const fontCopyFullName = CTFontCopyFullName;

extern "CoreText" fn CTFontCopyDisplayName(font: FontRef) callconv(.C) core_foundation.StringRef;
pub const fontCopyDisplayName = CTFontCopyDisplayName;

extern "CoreText" fn CTFontCopyName(font: FontRef, nameKey: core_foundation.StringRef) callconv(.C) core_foundation.StringRef;
pub const fontCopyName = CTFontCopyName;

extern "CoreText" fn CTFontCopyLocalizedName(font: FontRef, nameKey: core_foundation.StringRef, actualLanguage: ?*core_foundation.StringRef) callconv(.C) core_foundation.StringRef;
pub const fontCopyLocalizedName = CTFontCopyLocalizedName;

extern "CoreText" fn CTFontCopyCharacterSet(font: FontRef) callconv(.C) core_foundation.CharacterSetRef;
pub const fontCopyCharacterSet = CTFontCopyCharacterSet;

extern "CoreText" fn CTFontGetStringEncoding(font: FontRef) callconv(.C) core_foundation.StringEncoding;
pub const fontGetStringEncoding = CTFontGetStringEncoding;

extern "CoreText" fn CTFontCopySupportedLanguages(font: FontRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCopySupportedLanguages = CTFontCopySupportedLanguages;

extern "CoreText" fn CTFontGetGlyphsForCharacters() callconv(.C) i32;
pub const fontGetGlyphsForCharacters = CTFontGetGlyphsForCharacters;

extern "CoreText" fn CTFontGetAscent(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetAscent = CTFontGetAscent;

extern "CoreText" fn CTFontGetDescent(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetDescent = CTFontGetDescent;

extern "CoreText" fn CTFontGetLeading(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetLeading = CTFontGetLeading;

extern "CoreText" fn CTFontGetUnitsPerEm(font: FontRef) callconv(.C) u32;
pub const fontGetUnitsPerEm = CTFontGetUnitsPerEm;

extern "CoreText" fn CTFontGetGlyphCount(font: FontRef) callconv(.C) core_foundation.Index;
pub const fontGetGlyphCount = CTFontGetGlyphCount;

extern "CoreText" fn CTFontGetBoundingBox(font: FontRef) callconv(.C) core_foundation.CGRect;
pub const fontGetBoundingBox = CTFontGetBoundingBox;

extern "CoreText" fn CTFontGetUnderlinePosition(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetUnderlinePosition = CTFontGetUnderlinePosition;

extern "CoreText" fn CTFontGetUnderlineThickness(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetUnderlineThickness = CTFontGetUnderlineThickness;

extern "CoreText" fn CTFontGetSlantAngle(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetSlantAngle = CTFontGetSlantAngle;

extern "CoreText" fn CTFontGetCapHeight(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetCapHeight = CTFontGetCapHeight;

extern "CoreText" fn CTFontGetXHeight(font: FontRef) callconv(.C) core_foundation.CGFloat;
pub const fontGetXHeight = CTFontGetXHeight;

extern "CoreText" fn CTFontGetGlyphWithName(font: FontRef, glyphName: core_foundation.StringRef) callconv(.C) core_graphics.Glyph;
pub const fontGetGlyphWithName = CTFontGetGlyphWithName;

extern "CoreText" fn CTFontCopyNameForGlyph(font: FontRef, glyph: core_graphics.Glyph) callconv(.C) core_foundation.StringRef;
pub const fontCopyNameForGlyph = CTFontCopyNameForGlyph;

extern "CoreText" fn CTFontGetBoundingRectsForGlyphs(
    font: FontRef,
    orientation: FontOrientation,
    glyphs: ?*core_graphics.Glyph,
    boundingRects: ?*core_foundation.CGRect,
    count: core_foundation.Index,
) callconv(.C) core_foundation.CGRect;
pub const fontGetBoundingRectsForGlyphs = CTFontGetBoundingRectsForGlyphs;

extern "CoreText" fn CTFontGetOpticalBoundsForGlyphs(
    font: FontRef,
    glyphs: ?*core_graphics.Glyph,
    boundingRects: ?*core_foundation.CGRect,
    count: core_foundation.Index,
    options: core_foundation.OptionFlags,
) callconv(.C) core_foundation.CGRect;
pub const fontGetOpticalBoundsForGlyphs = CTFontGetOpticalBoundsForGlyphs;

extern "CoreText" fn CTFontGetAdvancesForGlyphs(
    font: FontRef,
    orientation: FontOrientation,
    glyphs: ?*core_graphics.Glyph,
    advances: ?*core_foundation.CGSize,
    count: core_foundation.Index,
) callconv(.C) f64;
pub const fontGetAdvancesForGlyphs = CTFontGetAdvancesForGlyphs;

extern "CoreText" fn CTFontGetVerticalTranslationsForGlyphs(
    font: FontRef,
    glyphs: ?*core_graphics.Glyph,
    translations: ?*core_foundation.CGSize,
    count: core_foundation.Index,
) callconv(.C) void;
pub const fontGetVerticalTranslationsForGlyphs = CTFontGetVerticalTranslationsForGlyphs;

extern "CoreText" fn CTFontCreatePathForGlyph(font: FontRef, glyph: core_graphics.Glyph, matrix: ?*core_foundation.CGAffineTransform) callconv(.C) core_graphics.PathRef;
pub const fontCreatePathForGlyph = CTFontCreatePathForGlyph;

extern "CoreText" fn CTFontCopyVariationAxes(font: FontRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCopyVariationAxes = CTFontCopyVariationAxes;

extern "CoreText" fn CTFontCopyVariation(font: FontRef) callconv(.C) core_foundation.DictionaryRef;
pub const fontCopyVariation = CTFontCopyVariation;

extern "CoreText" fn CTFontCopyFeatures(font: FontRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCopyFeatures = CTFontCopyFeatures;

extern "CoreText" fn CTFontCopyFeatureSettings(font: FontRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCopyFeatureSettings = CTFontCopyFeatureSettings;

extern "CoreText" fn CTFontCopyGraphicsFont(font: FontRef, attributes: ?*FontDescriptorRef) callconv(.C) core_graphics.FontRef;
pub const fontCopyGraphicsFont = CTFontCopyGraphicsFont;

extern "CoreText" fn CTFontCreateWithGraphicsFont(
    graphicsFont: core_graphics.FontRef,
    size: core_foundation.CGFloat,
    matrix: ?*core_foundation.CGAffineTransform,
    attributes: FontDescriptorRef,
) callconv(.C) FontRef;
pub const fontCreateWithGraphicsFont = CTFontCreateWithGraphicsFont;

pub const ATSFontRef = objc.UInt32;

extern "CoreText" fn CTFontGetPlatformFont(font: FontRef, attributes: ?*FontDescriptorRef) callconv(.C) ATSFontRef;
pub const fontGetPlatformFont = CTFontGetPlatformFont;

extern "CoreText" fn CTFontCreateWithPlatformFont(
    platformFont: ATSFontRef,
    size: core_foundation.CGFloat,
    matrix: ?*core_foundation.CGAffineTransform,
    attributes: FontDescriptorRef,
) callconv(.C) FontRef;
pub const fontCreateWithPlatformFont = CTFontCreateWithPlatformFont;

extern "CoreText" fn CTFontCreateWithQuickdrawInstance(
    name: objc.ConstStr255Param,
    identifier: objc.int16_t,
    style: objc.uint8_t,
    size: core_foundation.CGFloat,
) callconv(.C) FontRef;
pub const fontCreateWithQuickdrawInstance = CTFontCreateWithQuickdrawInstance;

pub const anon14481 = enum(u32) {
    CTFontTableBASE = 1111577413,
    CTFontTableCBDT = 1128416340,
    CTFontTableCBLC = 1128418371,
    CTFontTableCFF = 1128678944,
    CTFontTableCFF2 = 1128678962,
    CTFontTableCOLR = 1129270354,
    CTFontTableCPAL = 1129333068,
    CTFontTableDSIG = 1146308935,
    CTFontTableEBDT = 1161970772,
    CTFontTableEBLC = 1161972803,
    CTFontTableEBSC = 1161974595,
    CTFontTableGDEF = 1195656518,
    CTFontTableGPOS = 1196445523,
    CTFontTableGSUB = 1196643650,
    CTFontTableHVAR = 1213612370,
    CTFontTableJSTF = 1246975046,
    CTFontTableLTSH = 1280594760,
    CTFontTableMATH = 1296127048,
    CTFontTableMERG = 1296388679,
    CTFontTableMVAR = 1297498450,
    CTFontTableOS2 = 1330851634,
    CTFontTablePCLT = 1346587732,
    CTFontTableSTAT = 1398030676,
    CTFontTableSVG = 1398163232,
    CTFontTableVDMX = 1447316824,
    CTFontTableVORG = 1448038983,
    CTFontTableVVAR = 1448493394,
    CTFontTableZapf = 1516335206,
    CTFontTableAcnt = 1633906292,
    CTFontTableAnkr = 1634626418,
    CTFontTableAvar = 1635148146,
    CTFontTableBdat = 1650745716,
    CTFontTableBhed = 1651008868,
    CTFontTableBloc = 1651273571,
    CTFontTableBsln = 1651731566,
    CTFontTableCidg = 1667851367,
    CTFontTableCmap = 1668112752,
    CTFontTableCvar = 1668702578,
    CTFontTableCvt = 1668707360,
    CTFontTableFdsc = 1717859171,
    CTFontTableFeat = 1717920116,
    CTFontTableFmtx = 1718449272,
    CTFontTableFond = 1718578788,
    CTFontTableFpgm = 1718642541,
    CTFontTableFvar = 1719034226,
    CTFontTableGasp = 1734439792,
    CTFontTableGlyf = 1735162214,
    CTFontTableGvar = 1735811442,
    CTFontTableHdmx = 1751412088,
    CTFontTableHead = 1751474532,
    CTFontTableHhea = 1751672161,
    CTFontTableHmtx = 1752003704,
    CTFontTableHsty = 1752396921,
    CTFontTableJust = 1786082164,
    CTFontTableKern = 1801810542,
    CTFontTableKerx = 1801810552,
    CTFontTableLcar = 1818452338,
    CTFontTableLoca = 1819239265,
    CTFontTableLtag = 1819566439,
    CTFontTableMaxp = 1835104368,
    CTFontTableMeta = 1835365473,
    CTFontTableMort = 1836020340,
    CTFontTableMorx = 1836020344,
    CTFontTableName = 1851878757,
    CTFontTableOpbd = 1869636196,
    CTFontTablePost = 1886352244,
    CTFontTablePrep = 1886545264,
    CTFontTableProp = 1886547824,
    CTFontTableSbit = 1935829364,
    CTFontTableSbix = 1935829368,
    CTFontTableTrak = 1953653099,
    CTFontTableVhea = 1986553185,
    CTFontTableVmtx = 1986884728,
    CTFontTableXref = 2020762982,
};

pub const FontTableTag = objc.FourCharCode;

pub const FontTableOptions = enum(objc.uint32_t) {
    NoOptions = 0,
    ExcludeSynthetic = 1,
};

extern "CoreText" fn CTFontCopyAvailableTables(font: FontRef, options: FontTableOptions) callconv(.C) core_foundation.ArrayRef;
pub const fontCopyAvailableTables = CTFontCopyAvailableTables;

extern "CoreText" fn CTFontHasTable() callconv(.C) i32;
pub const fontHasTable = CTFontHasTable;

extern "CoreText" fn CTFontCopyTable(font: FontRef, table: FontTableTag, options: FontTableOptions) callconv(.C) core_foundation.DataRef;
pub const fontCopyTable = CTFontCopyTable;

extern "CoreText" fn CTFontDrawGlyphs(
    font: FontRef,
    glyphs: ?*core_graphics.Glyph,
    positions: ?*core_foundation.CGPoint,
    count: objc.size_t,
    context: core_graphics.ContextRef,
) callconv(.C) void;
pub const fontDrawGlyphs = CTFontDrawGlyphs;

extern "CoreText" fn CTFontGetLigatureCaretPositions(
    font: FontRef,
    glyph: core_graphics.Glyph,
    positions: ?*core_foundation.CGFloat,
    maxPositions: core_foundation.Index,
) callconv(.C) core_foundation.Index;
pub const fontGetLigatureCaretPositions = CTFontGetLigatureCaretPositions;

extern "CoreText" fn CTFontGetTypographicBoundsForAdaptiveImageProvider(font: FontRef, provider: ?*anyopaque) callconv(.C) core_foundation.CGRect;
pub const fontGetTypographicBoundsForAdaptiveImageProvider = CTFontGetTypographicBoundsForAdaptiveImageProvider;

extern "CoreText" fn CTFontDrawImageFromAdaptiveImageProviderAtPoint(
    font: FontRef,
    provider: ?*anyopaque,
    point: core_foundation.CGPoint,
    context: core_graphics.ContextRef,
) callconv(.C) void;
pub const fontDrawImageFromAdaptiveImageProviderAtPoint = CTFontDrawImageFromAdaptiveImageProviderAtPoint;

pub const __CTFontCollection = extern struct {};

pub const FontCollectionRef = ?*__CTFontCollection;

pub const MutableFontCollectionRef = ?*__CTFontCollection;

extern "CoreText" fn CTFontCollectionGetTypeID() callconv(.C) core_foundation.TypeID;
pub const fontCollectionGetTypeID = CTFontCollectionGetTypeID;

pub const FontCollectionSortDescriptorsCallback = ?*const fn (FontDescriptorRef, FontDescriptorRef, ?*anyopaque) callconv(.C) core_foundation.ComparisonResult;

extern "CoreText" fn CTFontCollectionCreateFromAvailableFonts(options: core_foundation.DictionaryRef) callconv(.C) FontCollectionRef;
pub const fontCollectionCreateFromAvailableFonts = CTFontCollectionCreateFromAvailableFonts;

extern "CoreText" fn CTFontCollectionCreateWithFontDescriptors(queryDescriptors: core_foundation.ArrayRef, options: core_foundation.DictionaryRef) callconv(.C) FontCollectionRef;
pub const fontCollectionCreateWithFontDescriptors = CTFontCollectionCreateWithFontDescriptors;

extern "CoreText" fn CTFontCollectionCreateCopyWithFontDescriptors(original: FontCollectionRef, queryDescriptors: core_foundation.ArrayRef, options: core_foundation.DictionaryRef) callconv(.C) FontCollectionRef;
pub const fontCollectionCreateCopyWithFontDescriptors = CTFontCollectionCreateCopyWithFontDescriptors;

extern "CoreText" fn CTFontCollectionCreateMutableCopy(original: FontCollectionRef) callconv(.C) MutableFontCollectionRef;
pub const fontCollectionCreateMutableCopy = CTFontCollectionCreateMutableCopy;

extern "CoreText" fn CTFontCollectionCopyQueryDescriptors(collection: FontCollectionRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCollectionCopyQueryDescriptors = CTFontCollectionCopyQueryDescriptors;

extern "CoreText" fn CTFontCollectionSetQueryDescriptors(collection: MutableFontCollectionRef, descriptors: core_foundation.ArrayRef) callconv(.C) void;
pub const fontCollectionSetQueryDescriptors = CTFontCollectionSetQueryDescriptors;

extern "CoreText" fn CTFontCollectionCopyExclusionDescriptors(collection: FontCollectionRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCollectionCopyExclusionDescriptors = CTFontCollectionCopyExclusionDescriptors;

extern "CoreText" fn CTFontCollectionSetExclusionDescriptors(collection: MutableFontCollectionRef, descriptors: core_foundation.ArrayRef) callconv(.C) void;
pub const fontCollectionSetExclusionDescriptors = CTFontCollectionSetExclusionDescriptors;

extern "CoreText" fn CTFontCollectionCreateMatchingFontDescriptors(collection: FontCollectionRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCollectionCreateMatchingFontDescriptors = CTFontCollectionCreateMatchingFontDescriptors;

extern "CoreText" fn CTFontCollectionCreateMatchingFontDescriptorsSortedWithCallback(collection: FontCollectionRef, sortCallback: FontCollectionSortDescriptorsCallback, refCon: ?*anyopaque) callconv(.C) core_foundation.ArrayRef;
pub const fontCollectionCreateMatchingFontDescriptorsSortedWithCallback = CTFontCollectionCreateMatchingFontDescriptorsSortedWithCallback;

extern "CoreText" fn CTFontCollectionCreateMatchingFontDescriptorsWithOptions(collection: FontCollectionRef, options: core_foundation.DictionaryRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCollectionCreateMatchingFontDescriptorsWithOptions = CTFontCollectionCreateMatchingFontDescriptorsWithOptions;

extern "CoreText" fn CTFontCollectionCreateMatchingFontDescriptorsForFamily(collection: FontCollectionRef, familyName: core_foundation.StringRef, options: core_foundation.DictionaryRef) callconv(.C) core_foundation.ArrayRef;
pub const fontCollectionCreateMatchingFontDescriptorsForFamily = CTFontCollectionCreateMatchingFontDescriptorsForFamily;

pub const FontCollectionCopyOptions = enum(objc.uint32_t) {
    DefaultOptions = 0,
    Unique = 1,
    StandardSort = 2,
};

extern "CoreText" fn CTFontCollectionCopyFontAttribute(collection: FontCollectionRef, attributeName: core_foundation.StringRef, options: FontCollectionCopyOptions) callconv(.C) core_foundation.ArrayRef;
pub const fontCollectionCopyFontAttribute = CTFontCollectionCopyFontAttribute;

extern "CoreText" fn CTFontCollectionCopyFontAttributes(collection: FontCollectionRef, attributeNames: core_foundation.SetRef, options: FontCollectionCopyOptions) callconv(.C) core_foundation.ArrayRef;
pub const fontCollectionCopyFontAttributes = CTFontCollectionCopyFontAttributes;

pub const FontManagerError = enum(core_foundation.Index) {
    FileNotFound = 101,
    InsufficientPermissions = 102,
    UnrecognizedFormat = 103,
    InvalidFontData = 104,
    AlreadyRegistered = 105,
    ExceededResourceLimit = 106,
    AssetNotFound = 107,
    NotRegistered = 201,
    InUse = 202,
    SystemRequired = 203,
    RegistrationFailed = 301,
    MissingEntitlement = 302,
    InsufficientInfo = 303,
    CancelledByUser = 304,
    DuplicatedName = 305,
    InvalidFilePath = 306,
    UnsupportedScope = 307,
};

extern "CoreText" fn CTFontManagerCopyAvailablePostScriptNames() callconv(.C) core_foundation.ArrayRef;
pub const fontManagerCopyAvailablePostScriptNames = CTFontManagerCopyAvailablePostScriptNames;

extern "CoreText" fn CTFontManagerCopyAvailableFontFamilyNames() callconv(.C) core_foundation.ArrayRef;
pub const fontManagerCopyAvailableFontFamilyNames = CTFontManagerCopyAvailableFontFamilyNames;

extern "CoreText" fn CTFontManagerCopyAvailableFontURLs() callconv(.C) core_foundation.ArrayRef;
pub const fontManagerCopyAvailableFontURLs = CTFontManagerCopyAvailableFontURLs;

extern "CoreText" fn CTFontManagerCompareFontFamilyNames(family1: ?*anyopaque, family2: ?*anyopaque, context: ?*anyopaque) callconv(.C) core_foundation.ComparisonResult;
pub const fontManagerCompareFontFamilyNames = CTFontManagerCompareFontFamilyNames;

extern "CoreText" fn CTFontManagerCreateFontDescriptorsFromURL(fileURL: core_foundation.URLRef) callconv(.C) core_foundation.ArrayRef;
pub const fontManagerCreateFontDescriptorsFromURL = CTFontManagerCreateFontDescriptorsFromURL;

extern "CoreText" fn CTFontManagerCreateFontDescriptorFromData(data: core_foundation.DataRef) callconv(.C) FontDescriptorRef;
pub const fontManagerCreateFontDescriptorFromData = CTFontManagerCreateFontDescriptorFromData;

extern "CoreText" fn CTFontManagerCreateFontDescriptorsFromData(data: core_foundation.DataRef) callconv(.C) core_foundation.ArrayRef;
pub const fontManagerCreateFontDescriptorsFromData = CTFontManagerCreateFontDescriptorsFromData;

pub const FontManagerScope = enum(objc.uint32_t) {
    None = 0,
    Process = 1,
    Persistent = 2,
    Session = 3,
    User = 2,
};

extern "CoreText" fn CTFontManagerRegisterFontsForURL() callconv(.C) i32;
pub const fontManagerRegisterFontsForURL = CTFontManagerRegisterFontsForURL;

extern "CoreText" fn CTFontManagerUnregisterFontsForURL() callconv(.C) i32;
pub const fontManagerUnregisterFontsForURL = CTFontManagerUnregisterFontsForURL;

extern "CoreText" fn CTFontManagerRegisterGraphicsFont() callconv(.C) i32;
pub const fontManagerRegisterGraphicsFont = CTFontManagerRegisterGraphicsFont;

extern "CoreText" fn CTFontManagerUnregisterGraphicsFont() callconv(.C) i32;
pub const fontManagerUnregisterGraphicsFont = CTFontManagerUnregisterGraphicsFont;

extern "CoreText" fn CTFontManagerRegisterFontsForURLs() callconv(.C) i32;
pub const fontManagerRegisterFontsForURLs = CTFontManagerRegisterFontsForURLs;

extern "CoreText" fn CTFontManagerUnregisterFontsForURLs() callconv(.C) i32;
pub const fontManagerUnregisterFontsForURLs = CTFontManagerUnregisterFontsForURLs;

extern "CoreText" fn CTFontManagerRegisterFontURLs(
    fontURLs: core_foundation.ArrayRef,
    scope: FontManagerScope,
    enabled: objc.bool,
    registrationHandler: *const fn (core_foundation.ArrayRef, objc.bool) callconv(.C) i32,
) callconv(.C) void;
pub const fontManagerRegisterFontURLs = CTFontManagerRegisterFontURLs;

extern "CoreText" fn CTFontManagerUnregisterFontURLs(fontURLs: core_foundation.ArrayRef, scope: FontManagerScope, registrationHandler: *const fn (core_foundation.ArrayRef, objc.bool) callconv(.C) i32) callconv(.C) void;
pub const fontManagerUnregisterFontURLs = CTFontManagerUnregisterFontURLs;

extern "CoreText" fn CTFontManagerRegisterFontDescriptors(
    fontDescriptors: core_foundation.ArrayRef,
    scope: FontManagerScope,
    enabled: objc.bool,
    registrationHandler: *const fn (core_foundation.ArrayRef, objc.bool) callconv(.C) i32,
) callconv(.C) void;
pub const fontManagerRegisterFontDescriptors = CTFontManagerRegisterFontDescriptors;

extern "CoreText" fn CTFontManagerUnregisterFontDescriptors(fontDescriptors: core_foundation.ArrayRef, scope: FontManagerScope, registrationHandler: *const fn (core_foundation.ArrayRef, objc.bool) callconv(.C) i32) callconv(.C) void;
pub const fontManagerUnregisterFontDescriptors = CTFontManagerUnregisterFontDescriptors;

extern "CoreText" fn CTFontManagerRegisterFontsWithAssetNames(
    fontAssetNames: core_foundation.ArrayRef,
    bundle: core_foundation.BundleRef,
    scope: FontManagerScope,
    enabled: objc.bool,
    registrationHandler: *const fn (core_foundation.ArrayRef, objc.bool) callconv(.C) i32,
) callconv(.C) void;
pub const fontManagerRegisterFontsWithAssetNames = CTFontManagerRegisterFontsWithAssetNames;

extern "CoreText" fn CTFontManagerEnableFontDescriptors(descriptors: core_foundation.ArrayRef, enable: objc.bool) callconv(.C) void;
pub const fontManagerEnableFontDescriptors = CTFontManagerEnableFontDescriptors;

extern "CoreText" fn CTFontManagerGetScopeForURL(fontURL: core_foundation.URLRef) callconv(.C) FontManagerScope;
pub const fontManagerGetScopeForURL = CTFontManagerGetScopeForURL;

extern "CoreText" fn CTFontManagerCopyRegisteredFontDescriptors(scope: FontManagerScope, enabled: objc.bool) callconv(.C) core_foundation.ArrayRef;
pub const fontManagerCopyRegisteredFontDescriptors = CTFontManagerCopyRegisteredFontDescriptors;

extern "CoreText" fn CTFontManagerRequestFonts(fontDescriptors: core_foundation.ArrayRef, completionHandler: *const fn (core_foundation.ArrayRef) callconv(.C) void) callconv(.C) void;
pub const fontManagerRequestFonts = CTFontManagerRequestFonts;

extern "CoreText" fn CTFontManagerIsSupportedFont() callconv(.C) i32;
pub const fontManagerIsSupportedFont = CTFontManagerIsSupportedFont;

extern "CoreText" fn CTFontManagerCreateFontRequestRunLoopSource(sourceOrder: core_foundation.Index, createMatchesCallback: *const fn (core_foundation.DictionaryRef, objc.pid_t) callconv(.C) core_foundation.ArrayRef) callconv(.C) core_foundation.RunLoopSourceRef;
pub const fontManagerCreateFontRequestRunLoopSource = CTFontManagerCreateFontRequestRunLoopSource;

pub const FontManagerAutoActivationSetting = enum(objc.uint32_t) {
    Default = 0,
    Disabled = 1,
    Enabled = 2,
    PromptUser = 3,
};

extern "CoreText" fn CTFontManagerSetAutoActivationSetting(bundleIdentifier: core_foundation.StringRef, setting: FontManagerAutoActivationSetting) callconv(.C) void;
pub const fontManagerSetAutoActivationSetting = CTFontManagerSetAutoActivationSetting;

extern "CoreText" fn CTFontManagerGetAutoActivationSetting(bundleIdentifier: core_foundation.StringRef) callconv(.C) FontManagerAutoActivationSetting;
pub const fontManagerGetAutoActivationSetting = CTFontManagerGetAutoActivationSetting;

pub const __CTFrame = extern struct {};

pub const FrameRef = ?*__CTFrame;

extern "CoreText" fn CTFrameGetTypeID() callconv(.C) core_foundation.TypeID;
pub const frameGetTypeID = CTFrameGetTypeID;

pub const FrameProgression = enum(objc.uint32_t) {
    TopToBottom = 0,
    RightToLeft = 1,
    LeftToRight = 2,
};

pub const FramePathFillRule = enum(objc.uint32_t) {
    EvenOdd = 0,
    WindingNumber = 1,
};

extern "CoreText" fn CTFrameGetStringRange(frame: FrameRef) callconv(.C) core_foundation.Range;
pub const frameGetStringRange = CTFrameGetStringRange;

extern "CoreText" fn CTFrameGetVisibleStringRange(frame: FrameRef) callconv(.C) core_foundation.Range;
pub const frameGetVisibleStringRange = CTFrameGetVisibleStringRange;

extern "CoreText" fn CTFrameGetPath(frame: FrameRef) callconv(.C) core_graphics.PathRef;
pub const frameGetPath = CTFrameGetPath;

extern "CoreText" fn CTFrameGetFrameAttributes(frame: FrameRef) callconv(.C) core_foundation.DictionaryRef;
pub const frameGetFrameAttributes = CTFrameGetFrameAttributes;

extern "CoreText" fn CTFrameGetLines(frame: FrameRef) callconv(.C) core_foundation.ArrayRef;
pub const frameGetLines = CTFrameGetLines;

extern "CoreText" fn CTFrameGetLineOrigins(frame: FrameRef, range: core_foundation.Range, origins: ?*core_foundation.CGPoint) callconv(.C) void;
pub const frameGetLineOrigins = CTFrameGetLineOrigins;

extern "CoreText" fn CTFrameDraw(frame: FrameRef, context: core_graphics.ContextRef) callconv(.C) void;
pub const frameDraw = CTFrameDraw;

pub const __CTLine = extern struct {};

pub const LineRef = ?*__CTLine;

pub const LineBoundsOptions = enum(core_foundation.OptionFlags) {
    ExcludeTypographicLeading = 1,
    ExcludeTypographicShifts = 2,
    UseHangingPunctuation = 4,
    UseGlyphPathBounds = 8,
    UseOpticalBounds = 16,
    IncludeLanguageExtents = 32,
};

pub const LineTruncationType = enum(objc.uint32_t) {
    Start = 0,
    End = 1,
    Middle = 2,
};

extern "CoreText" fn CTLineGetTypeID() callconv(.C) core_foundation.TypeID;
pub const lineGetTypeID = CTLineGetTypeID;

extern "CoreText" fn CTLineCreateWithAttributedString(attrString: core_foundation.AttributedStringRef) callconv(.C) LineRef;
pub const lineCreateWithAttributedString = CTLineCreateWithAttributedString;

extern "CoreText" fn CTLineCreateTruncatedLine(
    line: LineRef,
    width: f64,
    truncationType: LineTruncationType,
    truncationToken: LineRef,
) callconv(.C) LineRef;
pub const lineCreateTruncatedLine = CTLineCreateTruncatedLine;

extern "CoreText" fn CTLineCreateJustifiedLine(line: LineRef, justificationFactor: core_foundation.CGFloat, justificationWidth: f64) callconv(.C) LineRef;
pub const lineCreateJustifiedLine = CTLineCreateJustifiedLine;

extern "CoreText" fn CTLineGetGlyphCount(line: LineRef) callconv(.C) core_foundation.Index;
pub const lineGetGlyphCount = CTLineGetGlyphCount;

extern "CoreText" fn CTLineGetGlyphRuns(line: LineRef) callconv(.C) core_foundation.ArrayRef;
pub const lineGetGlyphRuns = CTLineGetGlyphRuns;

extern "CoreText" fn CTLineGetStringRange(line: LineRef) callconv(.C) core_foundation.Range;
pub const lineGetStringRange = CTLineGetStringRange;

extern "CoreText" fn CTLineGetPenOffsetForFlush(line: LineRef, flushFactor: core_foundation.CGFloat, flushWidth: f64) callconv(.C) f64;
pub const lineGetPenOffsetForFlush = CTLineGetPenOffsetForFlush;

extern "CoreText" fn CTLineDraw(line: LineRef, context: core_graphics.ContextRef) callconv(.C) void;
pub const lineDraw = CTLineDraw;

extern "CoreText" fn CTLineGetTypographicBounds(
    line: LineRef,
    ascent: ?*core_foundation.CGFloat,
    descent: ?*core_foundation.CGFloat,
    leading: ?*core_foundation.CGFloat,
) callconv(.C) f64;
pub const lineGetTypographicBounds = CTLineGetTypographicBounds;

extern "CoreText" fn CTLineGetBoundsWithOptions(line: LineRef, options: LineBoundsOptions) callconv(.C) core_foundation.CGRect;
pub const lineGetBoundsWithOptions = CTLineGetBoundsWithOptions;

extern "CoreText" fn CTLineGetTrailingWhitespaceWidth(line: LineRef) callconv(.C) f64;
pub const lineGetTrailingWhitespaceWidth = CTLineGetTrailingWhitespaceWidth;

extern "CoreText" fn CTLineGetImageBounds(line: LineRef, context: core_graphics.ContextRef) callconv(.C) core_foundation.CGRect;
pub const lineGetImageBounds = CTLineGetImageBounds;

extern "CoreText" fn CTLineGetStringIndexForPosition(line: LineRef, position: core_foundation.CGPoint) callconv(.C) core_foundation.Index;
pub const lineGetStringIndexForPosition = CTLineGetStringIndexForPosition;

extern "CoreText" fn CTLineGetOffsetForStringIndex(line: LineRef, charIndex: core_foundation.Index, secondaryOffset: ?*core_foundation.CGFloat) callconv(.C) core_foundation.CGFloat;
pub const lineGetOffsetForStringIndex = CTLineGetOffsetForStringIndex;

extern "CoreText" fn CTLineEnumerateCaretOffsets(line: LineRef, block: *const fn (
    f64,
    core_foundation.Index,
    objc.bool,
    ?*objc.bool,
) callconv(.C) void) callconv(.C) void;
pub const lineEnumerateCaretOffsets = CTLineEnumerateCaretOffsets;

pub const __CTTypesetter = extern struct {};

pub const TypesetterRef = ?*__CTTypesetter;

extern "CoreText" fn CTTypesetterGetTypeID() callconv(.C) core_foundation.TypeID;
pub const typesetterGetTypeID = CTTypesetterGetTypeID;

extern "CoreText" fn CTTypesetterCreateWithAttributedString(string: core_foundation.AttributedStringRef) callconv(.C) TypesetterRef;
pub const typesetterCreateWithAttributedString = CTTypesetterCreateWithAttributedString;

extern "CoreText" fn CTTypesetterCreateWithAttributedStringAndOptions(string: core_foundation.AttributedStringRef, options: core_foundation.DictionaryRef) callconv(.C) TypesetterRef;
pub const typesetterCreateWithAttributedStringAndOptions = CTTypesetterCreateWithAttributedStringAndOptions;

extern "CoreText" fn CTTypesetterCreateLineWithOffset(typesetter: TypesetterRef, stringRange: core_foundation.Range, offset: f64) callconv(.C) LineRef;
pub const typesetterCreateLineWithOffset = CTTypesetterCreateLineWithOffset;

extern "CoreText" fn CTTypesetterCreateLine(typesetter: TypesetterRef, stringRange: core_foundation.Range) callconv(.C) LineRef;
pub const typesetterCreateLine = CTTypesetterCreateLine;

extern "CoreText" fn CTTypesetterSuggestLineBreakWithOffset(
    typesetter: TypesetterRef,
    startIndex: core_foundation.Index,
    width: f64,
    offset: f64,
) callconv(.C) core_foundation.Index;
pub const typesetterSuggestLineBreakWithOffset = CTTypesetterSuggestLineBreakWithOffset;

extern "CoreText" fn CTTypesetterSuggestLineBreak(typesetter: TypesetterRef, startIndex: core_foundation.Index, width: f64) callconv(.C) core_foundation.Index;
pub const typesetterSuggestLineBreak = CTTypesetterSuggestLineBreak;

extern "CoreText" fn CTTypesetterSuggestClusterBreakWithOffset(
    typesetter: TypesetterRef,
    startIndex: core_foundation.Index,
    width: f64,
    offset: f64,
) callconv(.C) core_foundation.Index;
pub const typesetterSuggestClusterBreakWithOffset = CTTypesetterSuggestClusterBreakWithOffset;

extern "CoreText" fn CTTypesetterSuggestClusterBreak(typesetter: TypesetterRef, startIndex: core_foundation.Index, width: f64) callconv(.C) core_foundation.Index;
pub const typesetterSuggestClusterBreak = CTTypesetterSuggestClusterBreak;

pub const __CTFramesetter = extern struct {};

pub const FramesetterRef = ?*__CTFramesetter;

extern "CoreText" fn CTFramesetterGetTypeID() callconv(.C) core_foundation.TypeID;
pub const framesetterGetTypeID = CTFramesetterGetTypeID;

extern "CoreText" fn CTFramesetterCreateWithTypesetter(typesetter: TypesetterRef) callconv(.C) FramesetterRef;
pub const framesetterCreateWithTypesetter = CTFramesetterCreateWithTypesetter;

extern "CoreText" fn CTFramesetterCreateWithAttributedString(attrString: core_foundation.AttributedStringRef) callconv(.C) FramesetterRef;
pub const framesetterCreateWithAttributedString = CTFramesetterCreateWithAttributedString;

extern "CoreText" fn CTFramesetterCreateFrame(
    framesetter: FramesetterRef,
    stringRange: core_foundation.Range,
    path: core_graphics.PathRef,
    frameAttributes: core_foundation.DictionaryRef,
) callconv(.C) FrameRef;
pub const framesetterCreateFrame = CTFramesetterCreateFrame;

extern "CoreText" fn CTFramesetterGetTypesetter(framesetter: FramesetterRef) callconv(.C) TypesetterRef;
pub const framesetterGetTypesetter = CTFramesetterGetTypesetter;

extern "CoreText" fn CTFramesetterSuggestFrameSizeWithConstraints(
    framesetter: FramesetterRef,
    stringRange: core_foundation.Range,
    frameAttributes: core_foundation.DictionaryRef,
    constraints: core_foundation.CGSize,
    fitRange: ?*core_foundation.Range,
) callconv(.C) core_foundation.CGSize;
pub const framesetterSuggestFrameSizeWithConstraints = CTFramesetterSuggestFrameSizeWithConstraints;

pub const __CTGlyphInfo = extern struct {};

pub const GlyphInfoRef = ?*__CTGlyphInfo;

extern "CoreText" fn CTGlyphInfoGetTypeID() callconv(.C) core_foundation.TypeID;
pub const glyphInfoGetTypeID = CTGlyphInfoGetTypeID;

pub const CharacterCollection = enum(objc.uint16_t) {
    IdentityMapping = 0,
    AdobeCNS1 = 1,
    AdobeGB1 = 2,
    AdobeJapan1 = 3,
    AdobeJapan2 = 4,
    AdobeKorea1 = 5,
    IdentityMappingCharacterCollection = 0,
    AdobeCNS1CharacterCollection = 1,
    AdobeGB1CharacterCollection = 2,
    AdobeJapan1CharacterCollection = 3,
    AdobeJapan2CharacterCollection = 4,
    AdobeKorea1CharacterCollection = 5,
};

extern "CoreText" fn CTGlyphInfoCreateWithGlyphName(glyphName: core_foundation.StringRef, font: FontRef, baseString: core_foundation.StringRef) callconv(.C) GlyphInfoRef;
pub const glyphInfoCreateWithGlyphName = CTGlyphInfoCreateWithGlyphName;

extern "CoreText" fn CTGlyphInfoCreateWithGlyph(glyph: core_graphics.Glyph, font: FontRef, baseString: core_foundation.StringRef) callconv(.C) GlyphInfoRef;
pub const glyphInfoCreateWithGlyph = CTGlyphInfoCreateWithGlyph;

extern "CoreText" fn CTGlyphInfoCreateWithCharacterIdentifier(cid: core_graphics.FontIndex, collection: CharacterCollection, baseString: core_foundation.StringRef) callconv(.C) GlyphInfoRef;
pub const glyphInfoCreateWithCharacterIdentifier = CTGlyphInfoCreateWithCharacterIdentifier;

extern "CoreText" fn CTGlyphInfoGetGlyphName(glyphInfo: GlyphInfoRef) callconv(.C) core_foundation.StringRef;
pub const glyphInfoGetGlyphName = CTGlyphInfoGetGlyphName;

extern "CoreText" fn CTGlyphInfoGetGlyph(glyphInfo: GlyphInfoRef) callconv(.C) core_graphics.Glyph;
pub const glyphInfoGetGlyph = CTGlyphInfoGetGlyph;

extern "CoreText" fn CTGlyphInfoGetCharacterIdentifier(glyphInfo: GlyphInfoRef) callconv(.C) core_graphics.FontIndex;
pub const glyphInfoGetCharacterIdentifier = CTGlyphInfoGetCharacterIdentifier;

extern "CoreText" fn CTGlyphInfoGetCharacterCollection(glyphInfo: GlyphInfoRef) callconv(.C) CharacterCollection;
pub const glyphInfoGetCharacterCollection = CTGlyphInfoGetCharacterCollection;

pub const __CTParagraphStyle = extern struct {};

pub const ParagraphStyleRef = ?*__CTParagraphStyle;

extern "CoreText" fn CTParagraphStyleGetTypeID() callconv(.C) core_foundation.TypeID;
pub const paragraphStyleGetTypeID = CTParagraphStyleGetTypeID;

pub const TextAlignment = enum(objc.uint8_t) {
    Left = 0,
    Right = 1,
    Center = 2,
    Justified = 3,
    Natural = 4,
    LeftTextAlignment = 0,
    RightTextAlignment = 1,
    CenterTextAlignment = 2,
    JustifiedTextAlignment = 3,
    NaturalTextAlignment = 4,
};

pub const LineBreakMode = enum(objc.uint8_t) {
    ByWordWrapping = 0,
    ByCharWrapping = 1,
    ByClipping = 2,
    ByTruncatingHead = 3,
    ByTruncatingTail = 4,
    ByTruncatingMiddle = 5,
};

pub const WritingDirection = enum(objc.int8_t) {
    Natural = -1,
    LeftToRight = 0,
    RightToLeft = 1,
};

pub const ParagraphStyleSpecifier = enum(objc.uint32_t) {
    Alignment = 0,
    FirstLineHeadIndent = 1,
    HeadIndent = 2,
    TailIndent = 3,
    TabStops = 4,
    DefaultTabInterval = 5,
    LineBreakMode = 6,
    LineHeightMultiple = 7,
    MaximumLineHeight = 8,
    MinimumLineHeight = 9,
    LineSpacing = 10,
    ParagraphSpacing = 11,
    ParagraphSpacingBefore = 12,
    BaseWritingDirection = 13,
    MaximumLineSpacing = 14,
    MinimumLineSpacing = 15,
    LineSpacingAdjustment = 16,
    LineBoundsOptions = 17,
    Count = 18,
};

pub const ParagraphStyleSetting = extern struct {
    spec: ParagraphStyleSpecifier,
    valueSize: objc.size_t,
    value: ?*anyopaque,
};

extern "CoreText" fn CTParagraphStyleCreate(settings: ?*ParagraphStyleSetting, settingCount: objc.size_t) callconv(.C) ParagraphStyleRef;
pub const paragraphStyleCreate = CTParagraphStyleCreate;

extern "CoreText" fn CTParagraphStyleCreateCopy(paragraphStyle: ParagraphStyleRef) callconv(.C) ParagraphStyleRef;
pub const paragraphStyleCreateCopy = CTParagraphStyleCreateCopy;

extern "CoreText" fn CTParagraphStyleGetValueForSpecifier() callconv(.C) i32;
pub const paragraphStyleGetValueForSpecifier = CTParagraphStyleGetValueForSpecifier;

pub const __CTRubyAnnotation = extern struct {};

pub const RubyAnnotationRef = ?*__CTRubyAnnotation;

extern "CoreText" fn CTRubyAnnotationGetTypeID() callconv(.C) core_foundation.TypeID;
pub const rubyAnnotationGetTypeID = CTRubyAnnotationGetTypeID;

pub const RubyAlignment = enum(objc.uint8_t) {
    Invalid = -1,
    Auto = 0,
    Start = 1,
    Center = 2,
    End = 3,
    DistributeLetter = 4,
    DistributeSpace = 5,
    LineEdge = 6,
};

pub const RubyOverhang = enum(objc.uint8_t) {
    Invalid = -1,
    Auto = 0,
    Start = 1,
    End = 2,
    None = 3,
};

pub const RubyPosition = enum(objc.uint8_t) {
    Before = 0,
    After = 1,
    InterCharacter = 2,
    Inline = 3,
    Count = 4,
};

extern "CoreText" fn CTRubyAnnotationCreate(
    alignment: RubyAlignment,
    overhang: RubyOverhang,
    sizeFactor: core_foundation.CGFloat,
    text: ?*core_foundation.StringRef,
) callconv(.C) RubyAnnotationRef;
pub const rubyAnnotationCreate = CTRubyAnnotationCreate;

extern "CoreText" fn CTRubyAnnotationCreateWithAttributes(
    alignment: RubyAlignment,
    overhang: RubyOverhang,
    position: RubyPosition,
    string: core_foundation.StringRef,
    attributes: core_foundation.DictionaryRef,
) callconv(.C) RubyAnnotationRef;
pub const rubyAnnotationCreateWithAttributes = CTRubyAnnotationCreateWithAttributes;

extern "CoreText" fn CTRubyAnnotationCreateCopy(rubyAnnotation: RubyAnnotationRef) callconv(.C) RubyAnnotationRef;
pub const rubyAnnotationCreateCopy = CTRubyAnnotationCreateCopy;

extern "CoreText" fn CTRubyAnnotationGetAlignment(rubyAnnotation: RubyAnnotationRef) callconv(.C) RubyAlignment;
pub const rubyAnnotationGetAlignment = CTRubyAnnotationGetAlignment;

extern "CoreText" fn CTRubyAnnotationGetOverhang(rubyAnnotation: RubyAnnotationRef) callconv(.C) RubyOverhang;
pub const rubyAnnotationGetOverhang = CTRubyAnnotationGetOverhang;

extern "CoreText" fn CTRubyAnnotationGetSizeFactor(rubyAnnotation: RubyAnnotationRef) callconv(.C) core_foundation.CGFloat;
pub const rubyAnnotationGetSizeFactor = CTRubyAnnotationGetSizeFactor;

extern "CoreText" fn CTRubyAnnotationGetTextForPosition(rubyAnnotation: RubyAnnotationRef, position: RubyPosition) callconv(.C) core_foundation.StringRef;
pub const rubyAnnotationGetTextForPosition = CTRubyAnnotationGetTextForPosition;

pub const __CTRun = extern struct {};

pub const RunRef = ?*__CTRun;

pub const RunStatus = enum(objc.uint32_t) {
    NoStatus = 0,
    RightToLeft = 1,
    NonMonotonic = 2,
    HasNonIdentityMatrix = 4,
};

extern "CoreText" fn CTRunGetTypeID() callconv(.C) core_foundation.TypeID;
pub const runGetTypeID = CTRunGetTypeID;

extern "CoreText" fn CTRunGetGlyphCount(run: RunRef) callconv(.C) core_foundation.Index;
pub const runGetGlyphCount = CTRunGetGlyphCount;

extern "CoreText" fn CTRunGetAttributes(run: RunRef) callconv(.C) core_foundation.DictionaryRef;
pub const runGetAttributes = CTRunGetAttributes;

extern "CoreText" fn CTRunGetStatus(run: RunRef) callconv(.C) RunStatus;
pub const runGetStatus = CTRunGetStatus;

extern "CoreText" fn CTRunGetGlyphsPtr(run: RunRef) callconv(.C) ?*core_graphics.Glyph;
pub const runGetGlyphsPtr = CTRunGetGlyphsPtr;

extern "CoreText" fn CTRunGetGlyphs(run: RunRef, range: core_foundation.Range, buffer: ?*core_graphics.Glyph) callconv(.C) void;
pub const runGetGlyphs = CTRunGetGlyphs;

extern "CoreText" fn CTRunGetPositionsPtr(run: RunRef) callconv(.C) ?*core_foundation.CGPoint;
pub const runGetPositionsPtr = CTRunGetPositionsPtr;

extern "CoreText" fn CTRunGetPositions(run: RunRef, range: core_foundation.Range, buffer: ?*core_foundation.CGPoint) callconv(.C) void;
pub const runGetPositions = CTRunGetPositions;

extern "CoreText" fn CTRunGetAdvancesPtr(run: RunRef) callconv(.C) ?*core_foundation.CGSize;
pub const runGetAdvancesPtr = CTRunGetAdvancesPtr;

extern "CoreText" fn CTRunGetAdvances(run: RunRef, range: core_foundation.Range, buffer: ?*core_foundation.CGSize) callconv(.C) void;
pub const runGetAdvances = CTRunGetAdvances;

extern "CoreText" fn CTRunGetStringIndicesPtr(run: RunRef) callconv(.C) ?*core_foundation.Index;
pub const runGetStringIndicesPtr = CTRunGetStringIndicesPtr;

extern "CoreText" fn CTRunGetStringIndices(run: RunRef, range: core_foundation.Range, buffer: ?*core_foundation.Index) callconv(.C) void;
pub const runGetStringIndices = CTRunGetStringIndices;

extern "CoreText" fn CTRunGetStringRange(run: RunRef) callconv(.C) core_foundation.Range;
pub const runGetStringRange = CTRunGetStringRange;

extern "CoreText" fn CTRunGetTypographicBounds(
    run: RunRef,
    range: core_foundation.Range,
    ascent: ?*core_foundation.CGFloat,
    descent: ?*core_foundation.CGFloat,
    leading: ?*core_foundation.CGFloat,
) callconv(.C) f64;
pub const runGetTypographicBounds = CTRunGetTypographicBounds;

extern "CoreText" fn CTRunGetImageBounds(run: RunRef, context: core_graphics.ContextRef, range: core_foundation.Range) callconv(.C) core_foundation.CGRect;
pub const runGetImageBounds = CTRunGetImageBounds;

extern "CoreText" fn CTRunGetTextMatrix(run: RunRef) callconv(.C) core_foundation.CGAffineTransform;
pub const runGetTextMatrix = CTRunGetTextMatrix;

extern "CoreText" fn CTRunGetBaseAdvancesAndOrigins(
    runRef: RunRef,
    range: core_foundation.Range,
    advancesBuffer: ?*core_foundation.CGSize,
    originsBuffer: ?*core_foundation.CGPoint,
) callconv(.C) void;
pub const runGetBaseAdvancesAndOrigins = CTRunGetBaseAdvancesAndOrigins;

extern "CoreText" fn CTRunDraw(run: RunRef, context: core_graphics.ContextRef, range: core_foundation.Range) callconv(.C) void;
pub const runDraw = CTRunDraw;

pub const __CTRunDelegate = extern struct {};

pub const RunDelegateRef = ?*__CTRunDelegate;

extern "CoreText" fn CTRunDelegateGetTypeID() callconv(.C) core_foundation.TypeID;
pub const runDelegateGetTypeID = CTRunDelegateGetTypeID;

pub const RunDelegateDeallocateCallback = ?*const fn (?*anyopaque) callconv(.C) void;

pub const RunDelegateGetAscentCallback = ?*const fn (?*anyopaque) callconv(.C) core_foundation.CGFloat;

pub const RunDelegateGetDescentCallback = ?*const fn (?*anyopaque) callconv(.C) core_foundation.CGFloat;

pub const RunDelegateGetWidthCallback = ?*const fn (?*anyopaque) callconv(.C) core_foundation.CGFloat;

pub const RunDelegateCallbacks = extern struct {
    version: core_foundation.Index,
    dealloc: RunDelegateDeallocateCallback,
    getAscent: RunDelegateGetAscentCallback,
    getDescent: RunDelegateGetDescentCallback,
    getWidth: RunDelegateGetWidthCallback,
};

pub const anon1441 = enum(u32) {
    CTRunDelegateVersion1 = 1,
    CTRunDelegateCurrentVersion = 1,
};

extern "CoreText" fn CTRunDelegateCreate(callbacks: ?*RunDelegateCallbacks, refCon: ?*anyopaque) callconv(.C) RunDelegateRef;
pub const runDelegateCreate = CTRunDelegateCreate;

extern "CoreText" fn CTRunDelegateGetRefCon(runDelegate: RunDelegateRef) callconv(.C) ?*anyopaque;
pub const runDelegateGetRefCon = CTRunDelegateGetRefCon;

/// https://developer.apple.com/documentation/CoreText/CTAdaptiveImageProviding?language=objc
pub const AdaptiveImageProviding = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn imageForProposedSizeScaleFactorImageOffsetImageSize(
        _self: *@This(),
        _proposedSize: core_foundation.CGSize,
        _scaleFactor: core_foundation.CGFloat,
        _outImageOffset: ?*core_foundation.CGPoint,
        _outImageSize: ?*core_foundation.CGSize,
    ) core_graphics.ImageRef {
        return objc.msgSend(_self, "imageForProposedSize:scaleFactor:imageOffset:imageSize:", core_graphics.ImageRef, .{
            _proposedSize,
            _scaleFactor,
            _outImageOffset,
            _outImageSize,
        });
    }
};

pub const UnderlineStyle = enum(objc.int32_t) {
    None = 0,
    Single = 1,
    Thick = 2,
    Double = 9,
};

pub const UnderlineStyleModifiers = enum(objc.int32_t) {
    PatternSolid = 0,
    PatternDot = 256,
    PatternDash = 512,
    PatternDashDot = 768,
    PatternDashDotDot = 1024,
};

pub const anon4651 = enum(u32) {
    CTWritingDirectionEmbedding = 0,
    CTWritingDirectionOverride = 2,
};

pub const __CTTextTab = extern struct {};

pub const TextTabRef = ?*__CTTextTab;

extern "CoreText" fn CTTextTabGetTypeID() callconv(.C) core_foundation.TypeID;
pub const textTabGetTypeID = CTTextTabGetTypeID;

extern "CoreText" fn CTTextTabCreate(alignment: TextAlignment, location: f64, options: core_foundation.DictionaryRef) callconv(.C) TextTabRef;
pub const textTabCreate = CTTextTabCreate;

extern "CoreText" fn CTTextTabGetAlignment(tab: TextTabRef) callconv(.C) TextAlignment;
pub const textTabGetAlignment = CTTextTabGetAlignment;

extern "CoreText" fn CTTextTabGetLocation(tab: TextTabRef) callconv(.C) f64;
pub const textTabGetLocation = CTTextTabGetLocation;

extern "CoreText" fn CTTextTabGetOptions(tab: TextTabRef) callconv(.C) core_foundation.DictionaryRef;
pub const textTabGetOptions = CTTextTabGetOptions;

pub const anon411 = enum(i32) {
    AllTypographicFeaturesType = 0,
    LigaturesType = 1,
    CursiveConnectionType = 2,
    LetterCaseType = 3,
    VerticalSubstitutionType = 4,
    LinguisticRearrangementType = 5,
    NumberSpacingType = 6,
    SmartSwashType = 8,
    DiacriticsType = 9,
    VerticalPositionType = 10,
    FractionsType = 11,
    OverlappingCharactersType = 13,
    TypographicExtrasType = 14,
    MathematicalExtrasType = 15,
    OrnamentSetsType = 16,
    CharacterAlternativesType = 17,
    DesignComplexityType = 18,
    StyleOptionsType = 19,
    CharacterShapeType = 20,
    NumberCaseType = 21,
    TextSpacingType = 22,
    TransliterationType = 23,
    AnnotationType = 24,
    KanaSpacingType = 25,
    IdeographicSpacingType = 26,
    UnicodeDecompositionType = 27,
    RubyKanaType = 28,
    CJKSymbolAlternativesType = 29,
    IdeographicAlternativesType = 30,
    CJKVerticalRomanPlacementType = 31,
    ItalicCJKRomanType = 32,
    CaseSensitiveLayoutType = 33,
    AlternateKanaType = 34,
    StylisticAlternativesType = 35,
    ContextualAlternatesType = 36,
    LowerCaseType = 37,
    UpperCaseType = 38,
    LanguageTagType = 39,
    CJKRomanSpacingType = 103,
    LastFeatureType = -1,
};

pub const anon891 = enum(u32) {
    AllTypeFeaturesOnSelector = 0,
    AllTypeFeaturesOffSelector = 1,
};

pub const anon1001 = enum(u32) {
    RequiredLigaturesOnSelector = 0,
    RequiredLigaturesOffSelector = 1,
    CommonLigaturesOnSelector = 2,
    CommonLigaturesOffSelector = 3,
    RareLigaturesOnSelector = 4,
    RareLigaturesOffSelector = 5,
    LogosOnSelector = 6,
    LogosOffSelector = 7,
    RebusPicturesOnSelector = 8,
    RebusPicturesOffSelector = 9,
    DiphthongLigaturesOnSelector = 10,
    DiphthongLigaturesOffSelector = 11,
    SquaredLigaturesOnSelector = 12,
    SquaredLigaturesOffSelector = 13,
    AbbrevSquaredLigaturesOnSelector = 14,
    AbbrevSquaredLigaturesOffSelector = 15,
    SymbolLigaturesOnSelector = 16,
    SymbolLigaturesOffSelector = 17,
    ContextualLigaturesOnSelector = 18,
    ContextualLigaturesOffSelector = 19,
    HistoricalLigaturesOnSelector = 20,
    HistoricalLigaturesOffSelector = 21,
};

pub const anon1301 = enum(u32) {
    UnconnectedSelector = 0,
    PartiallyConnectedSelector = 1,
    CursiveSelector = 2,
};

pub const anon1411 = enum(u32) {
    UpperAndLowerCaseSelector = 0,
    AllCapsSelector = 1,
    AllLowerCaseSelector = 2,
    SmallCapsSelector = 3,
    InitialCapsSelector = 4,
    InitialCapsAndSmallCapsSelector = 5,
};

pub const anon1551 = enum(u32) {
    SubstituteVerticalFormsOnSelector = 0,
    SubstituteVerticalFormsOffSelector = 1,
};

pub const anon1651 = enum(u32) {
    LinguisticRearrangementOnSelector = 0,
    LinguisticRearrangementOffSelector = 1,
};

pub const anon1751 = enum(u32) {
    MonospacedNumbersSelector = 0,
    ProportionalNumbersSelector = 1,
    ThirdWidthNumbersSelector = 2,
    QuarterWidthNumbersSelector = 3,
};

pub const anon1871 = enum(u32) {
    WordInitialSwashesOnSelector = 0,
    WordInitialSwashesOffSelector = 1,
    WordFinalSwashesOnSelector = 2,
    WordFinalSwashesOffSelector = 3,
    LineInitialSwashesOnSelector = 4,
    LineInitialSwashesOffSelector = 5,
    LineFinalSwashesOnSelector = 6,
    LineFinalSwashesOffSelector = 7,
    NonFinalSwashesOnSelector = 8,
    NonFinalSwashesOffSelector = 9,
};

pub const anon2051 = enum(u32) {
    ShowDiacriticsSelector = 0,
    HideDiacriticsSelector = 1,
    DecomposeDiacriticsSelector = 2,
};

pub const anon2161 = enum(u32) {
    NormalPositionSelector = 0,
    SuperiorsSelector = 1,
    InferiorsSelector = 2,
    OrdinalsSelector = 3,
    ScientificInferiorsSelector = 4,
};

pub const anon2291 = enum(u32) {
    NoFractionsSelector = 0,
    VerticalFractionsSelector = 1,
    DiagonalFractionsSelector = 2,
};

pub const anon2401 = enum(u32) {
    PreventOverlapOnSelector = 0,
    PreventOverlapOffSelector = 1,
};

pub const anon2501 = enum(u32) {
    HyphensToEmDashOnSelector = 0,
    HyphensToEmDashOffSelector = 1,
    HyphenToEnDashOnSelector = 2,
    HyphenToEnDashOffSelector = 3,
    SlashedZeroOnSelector = 4,
    SlashedZeroOffSelector = 5,
    FormInterrobangOnSelector = 6,
    FormInterrobangOffSelector = 7,
    SmartQuotesOnSelector = 8,
    SmartQuotesOffSelector = 9,
    PeriodsToEllipsisOnSelector = 10,
    PeriodsToEllipsisOffSelector = 11,
};

pub const anon2701 = enum(u32) {
    HyphenToMinusOnSelector = 0,
    HyphenToMinusOffSelector = 1,
    AsteriskToMultiplyOnSelector = 2,
    AsteriskToMultiplyOffSelector = 3,
    SlashToDivideOnSelector = 4,
    SlashToDivideOffSelector = 5,
    InequalityLigaturesOnSelector = 6,
    InequalityLigaturesOffSelector = 7,
    ExponentsOnSelector = 8,
    ExponentsOffSelector = 9,
    MathematicalGreekOnSelector = 10,
    MathematicalGreekOffSelector = 11,
};

pub const anon2901 = enum(u32) {
    nameFontTableTag = 1851878757,
};

pub const anon3051 = enum(u32) {
    NoAlternatesSelector = 0,
};

pub const anon3141 = enum(u32) {
    DesignLevel1Selector = 0,
    DesignLevel2Selector = 1,
    DesignLevel3Selector = 2,
    DesignLevel4Selector = 3,
    DesignLevel5Selector = 4,
};

pub const anon3411 = enum(u32) {
    TraditionalCharactersSelector = 0,
    SimplifiedCharactersSelector = 1,
    JIS1978CharactersSelector = 2,
    JIS1983CharactersSelector = 3,
    JIS1990CharactersSelector = 4,
    TraditionalAltOneSelector = 5,
    TraditionalAltTwoSelector = 6,
    TraditionalAltThreeSelector = 7,
    TraditionalAltFourSelector = 8,
    TraditionalAltFiveSelector = 9,
    ExpertCharactersSelector = 10,
    JIS2004CharactersSelector = 11,
    HojoCharactersSelector = 12,
    NLCCharactersSelector = 13,
    TraditionalNamesCharactersSelector = 14,
};

pub const anon3641 = enum(u32) {
    LowerCaseNumbersSelector = 0,
    UpperCaseNumbersSelector = 1,
};

pub const anon3741 = enum(u32) {
    ProportionalTextSelector = 0,
    MonospacedTextSelector = 1,
    HalfWidthTextSelector = 2,
    ThirdWidthTextSelector = 3,
    QuarterWidthTextSelector = 4,
    AltProportionalTextSelector = 5,
    AltHalfWidthTextSelector = 6,
};

pub const anon3891 = enum(u32) {
    NoTransliterationSelector = 0,
    HanjaToHangulSelector = 1,
    HiraganaToKatakanaSelector = 2,
    KatakanaToHiraganaSelector = 3,
    KanaToRomanizationSelector = 4,
    RomanizationToHiraganaSelector = 5,
    RomanizationToKatakanaSelector = 6,
    HanjaToHangulAltOneSelector = 7,
    HanjaToHangulAltTwoSelector = 8,
    HanjaToHangulAltThreeSelector = 9,
};

pub const anon4261 = enum(u32) {
    FullWidthKanaSelector = 0,
    ProportionalKanaSelector = 1,
};

pub const anon4361 = enum(u32) {
    FullWidthIdeographsSelector = 0,
    ProportionalIdeographsSelector = 1,
    HalfWidthIdeographsSelector = 2,
};

pub const anon4471 = enum(u32) {
    CanonicalCompositionOnSelector = 0,
    CanonicalCompositionOffSelector = 1,
    CompatibilityCompositionOnSelector = 2,
    CompatibilityCompositionOffSelector = 3,
    TranscodingCompositionOnSelector = 4,
    TranscodingCompositionOffSelector = 5,
};

pub const anon4611 = enum(u32) {
    NoRubyKanaSelector = 0,
    RubyKanaSelector = 1,
    RubyKanaOnSelector = 2,
    RubyKanaOffSelector = 3,
};

pub const anon4731 = enum(u32) {
    NoCJKSymbolAlternativesSelector = 0,
    CJKSymbolAltOneSelector = 1,
    CJKSymbolAltTwoSelector = 2,
    CJKSymbolAltThreeSelector = 3,
    CJKSymbolAltFourSelector = 4,
    CJKSymbolAltFiveSelector = 5,
};

pub const anon4871 = enum(u32) {
    NoIdeographicAlternativesSelector = 0,
    IdeographicAltOneSelector = 1,
    IdeographicAltTwoSelector = 2,
    IdeographicAltThreeSelector = 3,
    IdeographicAltFourSelector = 4,
    IdeographicAltFiveSelector = 5,
};

pub const anon5011 = enum(u32) {
    CJKVerticalRomanCenteredSelector = 0,
    CJKVerticalRomanHBaselineSelector = 1,
};

pub const anon5111 = enum(u32) {
    NoCJKItalicRomanSelector = 0,
    CJKItalicRomanSelector = 1,
    CJKItalicRomanOnSelector = 2,
    CJKItalicRomanOffSelector = 3,
};

pub const anon5231 = enum(u32) {
    CaseSensitiveLayoutOnSelector = 0,
    CaseSensitiveLayoutOffSelector = 1,
    CaseSensitiveSpacingOnSelector = 2,
    CaseSensitiveSpacingOffSelector = 3,
};

pub const anon5351 = enum(u32) {
    AlternateHorizKanaOnSelector = 0,
    AlternateHorizKanaOffSelector = 1,
    AlternateVertKanaOnSelector = 2,
    AlternateVertKanaOffSelector = 3,
};

pub const anon5961 = enum(u32) {
    ContextualAlternatesOnSelector = 0,
    ContextualAlternatesOffSelector = 1,
    SwashAlternatesOnSelector = 2,
    SwashAlternatesOffSelector = 3,
    ContextualSwashAlternatesOnSelector = 4,
    ContextualSwashAlternatesOffSelector = 5,
};

pub const anon6211 = enum(u32) {
    DefaultUpperCaseSelector = 0,
    UpperCaseSmallCapsSelector = 1,
    UpperCasePetiteCapsSelector = 2,
};

pub const anon6321 = enum(u32) {
    HalfWidthCJKRomanSelector = 0,
    ProportionalCJKRomanSelector = 1,
    DefaultCJKRomanSelector = 2,
    FullWidthCJKRomanSelector = 3,
};

pub const anon6431 = enum(u32) {
    SFNTLookupSimpleArray = 0,
    SFNTLookupSegmentSingle = 2,
    SFNTLookupSegmentArray = 4,
    SFNTLookupSingleTable = 6,
    SFNTLookupTrimmedArray = 8,
    SFNTLookupVector = 10,
};

pub const SFNTLookupTableFormat = objc.UInt16;

pub const SFNTLookupValue = objc.UInt16;

pub const SFNTLookupOffset = objc.UInt16;

pub const SFNTLookupKind = objc.UInt32;

pub const SFNTLookupBinarySearchHeader = extern struct {
    unitSize: objc.UInt16,
    nUnits: objc.UInt16,
    searchRange: objc.UInt16,
    entrySelector: objc.UInt16,
    rangeShift: objc.UInt16,
};

pub const SFNTLookupArrayHeader = extern struct {
    lookupValues: [1]SFNTLookupValue,
};

pub const SFNTLookupTrimmedArrayHeader = extern struct {
    firstGlyph: objc.UInt16,
    count: objc.UInt16,
    valueArray: [1]SFNTLookupValue,
};

pub const SFNTLookupVectorHeader = extern struct {
    valueSize: objc.UInt16,
    firstGlyph: objc.UInt16,
    count: objc.UInt16,
    values: [1]objc.UInt8,
};

pub const SFNTLookupSegment = extern struct {
    lastGlyph: objc.UInt16,
    firstGlyph: objc.UInt16,
    value: [1]objc.UInt16,
};

pub const SFNTLookupSegmentHeader = extern struct {
    binSearch: SFNTLookupBinarySearchHeader,
    segments: [1]SFNTLookupSegment,
};

pub const SFNTLookupSingle = extern struct {
    glyph: objc.UInt16,
    value: [1]objc.UInt16,
};

pub const SFNTLookupSingleHeader = extern struct {
    binSearch: SFNTLookupBinarySearchHeader,
    entries: [1]SFNTLookupSingle,
};

pub const SFNTLookupFormatSpecificHeader = extern union {
    theArray: SFNTLookupArrayHeader,
    segment: SFNTLookupSegmentHeader,
    single: SFNTLookupSingleHeader,
    trimmedArray: SFNTLookupTrimmedArrayHeader,
    vector: SFNTLookupVectorHeader,
};

pub const SFNTLookupTable = extern struct {
    format: SFNTLookupTableFormat,
    fsHeader: SFNTLookupFormatSpecificHeader,
};

pub const SFNTLookupTablePtr = ?*SFNTLookupTable;

pub const SFNTLookupTableHandle = ?*SFNTLookupTablePtr;

pub const anon7371 = enum(u32) {
    STClassEndOfText = 0,
    STClassOutOfBounds = 1,
    STClassDeletedGlyph = 2,
    STClassEndOfLine = 3,
    STSetMark = 32768,
    STNoAdvance = 16384,
    STMarkEnd = 8192,
    STLigActionMask = 16383,
    STRearrVerbMask = 15,
};

pub const STClass = objc.UInt8;

pub const STEntryIndex = objc.UInt8;

pub const STHeader = extern struct {
    filler: objc.UInt8,
    nClasses: STClass,
    classTableOffset: objc.UInt16,
    stateArrayOffset: objc.UInt16,
    entryTableOffset: objc.UInt16,
};

pub const STClassTable = extern struct {
    firstGlyph: objc.UInt16,
    nGlyphs: objc.UInt16,
    classes: [1]STClass,
};

pub const STEntryZero = extern struct {
    newState: objc.UInt16,
    flags: objc.UInt16,
};

pub const STEntryOne = extern struct {
    newState: objc.UInt16,
    flags: objc.UInt16,
    offset1: objc.UInt16,
};

pub const STEntryTwo = extern struct {
    newState: objc.UInt16,
    flags: objc.UInt16,
    offset1: objc.UInt16,
    offset2: objc.UInt16,
};

pub const anon7851 = enum(u32) {
    STXHasLigAction = 8192,
};

pub const STXClass = objc.UInt16;

pub const STXStateIndex = objc.UInt16;

pub const STXEntryIndex = objc.UInt16;

pub const STXHeader = extern struct {
    nClasses: objc.UInt32,
    classTableOffset: objc.UInt32,
    stateArrayOffset: objc.UInt32,
    entryTableOffset: objc.UInt32,
};

pub const STXClassTable = SFNTLookupTable;

pub const STXEntryZero = extern struct {
    newState: STXStateIndex,
    flags: objc.UInt16,
};

pub const STXEntryOne = extern struct {
    newState: STXStateIndex,
    flags: objc.UInt16,
    index1: objc.UInt16,
};

pub const STXEntryTwo = extern struct {
    newState: STXStateIndex,
    flags: objc.UInt16,
    index1: objc.UInt16,
    index2: objc.UInt16,
};

pub const anon8221 = enum(u32) {
    STKCrossStreamReset = 8192,
};

pub const anon8281 = enum(u32) {
    LCARTag = 1818452338,
    LCARCurrentVersion = 65536,
    LCARLinearFormat = 0,
    LCARCtlPointFormat = 1,
};

pub const LcarCaretClassEntry = extern struct {
    count: objc.UInt16,
    partials: [1]objc.UInt16,
};

pub const LcarCaretTable = extern struct {
    version: objc.Fixed,
    format: objc.UInt16,
    lookup: SFNTLookupTable,
};

pub const LcarCaretTablePtr = ?*LcarCaretTable;

pub const anon8511 = enum(u32) {
    JUSTTag = 1786082164,
    JUSTCurrentVersion = 65536,
    JUSTStandardFormat = 0,
    JUSTnoGlyphcode = 65535,
    JUSTpcDecompositionAction = 0,
    JUSTpcUnconditionalAddAction = 1,
    JUSTpcConditionalAddAction = 2,
    JUSTpcGlyphStretchAction = 3,
    JUSTpcDuctilityAction = 4,
    JUSTpcGlyphRepeatAddAction = 5,
};

pub const anon8651 = enum(u32) {
    JUSTKashidaPriority = 0,
    JUSTSpacePriority = 1,
    JUSTLetterPriority = 2,
    JUSTNullPriority = 3,
    JUSTPriorityCount = 4,
};

pub const anon8741 = enum(u32) {
    JUSTOverridePriority = 32768,
    JUSTOverrideLimits = 16384,
    JUSTOverrideUnlimited = 8192,
    JUSTUnlimited = 4096,
    JUSTPriorityMask = 3,
};

pub const JustPCActionType = objc.UInt16;

pub const JustificationFlags = objc.UInt16;

pub const JustPCDecompositionAction = extern struct {
    lowerLimit: objc.Fixed,
    upperLimit: objc.Fixed,
    order: objc.UInt16,
    count: objc.UInt16,
    glyphs: [1]objc.UInt16,
};

pub const JustPCUnconditionalAddAction = objc.UInt16;

pub const JustPCConditionalAddAction = extern struct {
    substThreshold: objc.Fixed,
    addGlyph: objc.UInt16,
    substGlyph: objc.UInt16,
};

pub const JustPCDuctilityAction = extern struct {
    ductilityAxis: objc.UInt32,
    minimumLimit: objc.Fixed,
    noStretchValue: objc.Fixed,
    maximumLimit: objc.Fixed,
};

pub const JustPCGlyphRepeatAddAction = extern struct {
    flags: objc.UInt16,
    glyph: objc.UInt16,
};

pub const JustPCActionSubrecord = extern struct {
    theClass: objc.UInt16,
    theType: JustPCActionType,
    length: objc.UInt32,
    data: objc.UInt32,
};

pub const JustPCAction = extern struct {
    actionCount: objc.UInt32,
    actions: [1]JustPCActionSubrecord,
};

pub const JustWidthDeltaEntry = extern struct {
    justClass: objc.UInt32,
    beforeGrowLimit: objc.Fixed,
    beforeShrinkLimit: objc.Fixed,
    afterGrowLimit: objc.Fixed,
    afterShrinkLimit: objc.Fixed,
    growFlags: JustificationFlags,
    shrinkFlags: JustificationFlags,
};

pub const JustWidthDeltaGroup = extern struct {
    count: objc.UInt32,
    entries: [1]JustWidthDeltaEntry,
};

pub const JustPostcompTable = extern struct {
    lookupTable: SFNTLookupTable,
};

pub const JustDirectionTable = extern struct {
    justClass: objc.UInt16,
    widthDeltaClusters: objc.UInt16,
    postcomp: objc.UInt16,
    lookup: SFNTLookupTable,
};

pub const JustTable = extern struct {
    version: objc.Fixed,
    format: objc.UInt16,
    horizHeaderOffset: objc.UInt16,
    vertHeaderOffset: objc.UInt16,
};

pub const anon9821 = enum(u32) {
    OPBDTag = 1869636196,
    OPBDCurrentVersion = 65536,
    OPBDDistanceFormat = 0,
    OPBDControlPointFormat = 1,
};

pub const OpbdTableFormat = objc.UInt16;

pub const OpbdSideValues = extern struct {
    leftSideShift: objc.SInt16,
    topSideShift: objc.SInt16,
    rightSideShift: objc.SInt16,
    bottomSideShift: objc.SInt16,
};

pub const OpbdTable = extern struct {
    version: objc.Fixed,
    format: OpbdTableFormat,
    lookupTable: SFNTLookupTable,
};

pub const anon10131 = enum(i32) {
    MORTTag = 1836020340,
    MORTCurrentVersion = 65536,
    MORTCoverVertical = 32768,
    MORTCoverDescending = 16384,
    MORTCoverIgnoreVertical = 8192,
    MORTCoverTypeMask = 15,
    MORTRearrangementType = 0,
    MORTContextualType = 1,
    MORTLigatureType = 2,
    MORTSwashType = 4,
    MORTInsertionType = 5,
    MORTLigLastAction = -2147483648,
    MORTLigStoreLigature = 1073741824,
    MORTLigFormOffsetMask = 1073741823,
    MORTLigFormOffsetShift = 2,
    MORTraNoAction = 0,
    MORTraxA = 1,
    MORTraDx = 2,
    MORTraDxA = 3,
    MORTraxAB = 4,
    MORTraxBA = 5,
    MORTraCDx = 6,
    MORTraDCx = 7,
    MORTraCDxA = 8,
    MORTraDCxA = 9,
    MORTraDxAB = 10,
    MORTraDxBA = 11,
    MORTraCDxAB = 12,
    MORTraCDxBA = 13,
    MORTraDCxAB = 14,
    MORTraDCxBA = 15,
    MORTDoInsertionsBefore = 128,
    MORTIsSplitVowelPiece = 64,
    MORTInsertionsCountMask = 63,
    MORTCurrInsertKashidaLike = 8192,
    MORTMarkInsertKashidaLike = 4096,
    MORTCurrInsertBefore = 2048,
    MORTMarkInsertBefore = 1024,
    MORTMarkJustTableCountMask = 16256,
    MORTMarkJustTableCountShift = 7,
    MORTCurrJustTableCountMask = 127,
    MORTCurrJustTableCountShift = 0,
    MORTCurrInsertCountMask = 992,
    MORTCurrInsertCountShift = 5,
    MORTMarkInsertCountMask = 31,
    MORTMarkInsertCountShift = 0,
};

pub const MortSubtableMaskFlags = objc.UInt32;

pub const MortLigatureActionEntry = objc.UInt32;

pub const MortRearrangementSubtable = extern struct {
    header: STHeader,
};

pub const MortContextualSubtable = extern struct {
    header: STHeader,
    substitutionTableOffset: objc.UInt16,
};

pub const MortLigatureSubtable = extern struct {
    header: STHeader,
    ligatureActionTableOffset: objc.UInt16,
    componentTableOffset: objc.UInt16,
    ligatureTableOffset: objc.UInt16,
};

pub const MortSwashSubtable = extern struct {
    lookup: SFNTLookupTable,
};

pub const MortInsertionSubtable = extern struct {
    header: STHeader,
};

pub const MortSpecificSubtable = extern union {
    rearrangement: MortRearrangementSubtable,
    contextual: MortContextualSubtable,
    ligature: MortLigatureSubtable,
    swash: MortSwashSubtable,
    insertion: MortInsertionSubtable,
};

pub const MortSubtable = extern struct {
    length: objc.UInt16,
    coverage: objc.UInt16,
    flags: MortSubtableMaskFlags,
    u: MortSpecificSubtable,
};

pub const MortFeatureEntry = extern struct {
    featureType: objc.UInt16,
    featureSelector: objc.UInt16,
    enableFlags: MortSubtableMaskFlags,
    disableFlags: MortSubtableMaskFlags,
};

pub const MortChain = extern struct {
    defaultFlags: MortSubtableMaskFlags,
    length: objc.UInt32,
    nFeatures: objc.UInt16,
    nSubtables: objc.UInt16,
    featureEntries: [1]MortFeatureEntry,
};

pub const MortTable = extern struct {
    version: objc.Fixed,
    nChains: objc.UInt32,
    chains: [1]MortChain,
};

pub const anon11321 = enum(i32) {
    MORXTag = 1836020344,
    MORXCurrentVersion = 131072,
    MORXCoverVertical = -2147483648,
    MORXCoverDescending = 1073741824,
    MORXCoverIgnoreVertical = 536870912,
    MORXCoverLogicalOrder = 268435456,
    MORXCoverTypeMask = 255,
};

pub const MorxRearrangementSubtable = extern struct {
    header: STXHeader,
};

pub const MorxContextualSubtable = extern struct {
    header: STXHeader,
    substitutionTableOffset: objc.UInt32,
};

pub const MorxLigatureSubtable = extern struct {
    header: STXHeader,
    ligatureActionTableOffset: objc.UInt32,
    componentTableOffset: objc.UInt32,
    ligatureTableOffset: objc.UInt32,
};

pub const MorxInsertionSubtable = extern struct {
    header: STXHeader,
    insertionGlyphTableOffset: objc.UInt32,
};

pub const MorxSpecificSubtable = extern union {
    rearrangement: MorxRearrangementSubtable,
    contextual: MorxContextualSubtable,
    ligature: MorxLigatureSubtable,
    swash: MortSwashSubtable,
    insertion: MorxInsertionSubtable,
};

pub const MorxSubtable = extern struct {
    length: objc.UInt32,
    coverage: objc.UInt32,
    flags: MortSubtableMaskFlags,
    u: MorxSpecificSubtable,
};

pub const MorxChain = extern struct {
    defaultFlags: MortSubtableMaskFlags,
    length: objc.UInt32,
    nFeatures: objc.UInt32,
    nSubtables: objc.UInt32,
    featureEntries: [1]MortFeatureEntry,
};

pub const MorxTable = extern struct {
    version: objc.Fixed,
    nChains: objc.UInt32,
    chains: [1]MorxChain,
};

pub const anon11981 = enum(u32) {
    PROPTag = 1886547824,
    PROPCurrentVersion = 196608,
    PROPPairOffsetShift = 8,
    PROPPairOffsetSign = 7,
    PROPIsFloaterMask = 32768,
    PROPCanHangLTMask = 16384,
    PROPCanHangRBMask = 8192,
    PROPUseRLPairMask = 4096,
    PROPPairOffsetMask = 3840,
    PROPRightConnectMask = 128,
    PROPZeroReserved = 96,
    PROPDirectionMask = 31,
};

pub const anon12141 = enum(u32) {
    PROPLDirectionClass = 0,
    PROPRDirectionClass = 1,
    PROPALDirectionClass = 2,
    PROPENDirectionClass = 3,
    PROPESDirectionClass = 4,
    PROPETDirectionClass = 5,
    PROPANDirectionClass = 6,
    PROPCSDirectionClass = 7,
    PROPPSDirectionClass = 8,
    PROPSDirectionClass = 9,
    PROPWSDirectionClass = 10,
    PROPONDirectionClass = 11,
    PROPSENDirectionClass = 12,
    PROPLREDirectionClass = 13,
    PROPLRODirectionClass = 14,
    PROPRLEDirectionClass = 15,
    PROPRLODirectionClass = 16,
    PROPPDFDirectionClass = 17,
    PROPNSMDirectionClass = 18,
    PROPBNDirectionClass = 19,
    PROPNumDirectionClasses = 20,
};

pub const PropCharProperties = objc.UInt16;

pub const PropTable = extern struct {
    version: objc.Fixed,
    format: objc.UInt16,
    defaultProps: PropCharProperties,
    lookup: SFNTLookupTable,
};

pub const PropLookupSegment = extern struct {
    lastGlyph: objc.UInt16,
    firstGlyph: objc.UInt16,
    value: objc.UInt16,
};

pub const PropLookupSingle = extern struct {
    glyph: objc.UInt16,
    props: PropCharProperties,
};

pub const anon12621 = enum(u32) {
    TRAKTag = 1953653099,
    TRAKCurrentVersion = 65536,
    TRAKUniformFormat = 0,
};

pub const TrakValue = objc.SInt16;

pub const TrakTableEntry = extern struct {
    track: objc.Fixed,
    nameTableIndex: objc.UInt16,
    sizesOffset: objc.UInt16,
};

pub const TrakTableData = extern struct {
    nTracks: objc.UInt16,
    nSizes: objc.UInt16,
    sizeTableOffset: objc.UInt32,
    trakTable: [1]TrakTableEntry,
};

pub const TrakTable = extern struct {
    version: objc.Fixed,
    format: objc.UInt16,
    horizOffset: objc.UInt16,
    vertOffset: objc.UInt16,
};

pub const anon12941 = enum(u32) {
    KERNTag = 1801810542,
    KERNCurrentVersion = 65536,
    KERNVertical = 32768,
    KERNResetCrossStream = 32768,
    KERNCrossStream = 16384,
    KERNVariation = 8192,
    KERNUnusedBits = 7936,
    KERNFormatMask = 255,
};

pub const anon13051 = enum(u32) {
    KERNOrderedList = 0,
    KERNStateTable = 1,
    KERNSimpleArray = 2,
    KERNIndexArray = 3,
};

pub const anon13131 = enum(u32) {
    KERNLineStart = 1,
    KERNLineEndKerning = 2,
    KERNNoCrossKerning = 4,
    KERNNotesRequested = 8,
    KERNNoStakeNote = 1,
    KERNCrossStreamResetNote = 2,
    KERNNotApplied = 1,
};

pub const KernTableFormat = objc.UInt8;

pub const KernSubtableInfo = objc.UInt16;

pub const KernKerningValue = objc.SInt16;

pub const KernArrayOffset = objc.UInt16;

pub const KernVersion0Header = extern struct {
    version: objc.UInt16,
    nTables: objc.UInt16,
    firstSubtable: [1]objc.UInt16,
};

pub const KernTableHeader = extern struct {
    version: objc.Fixed,
    nTables: objc.SInt32,
    firstSubtable: [1]objc.UInt16,
};

pub const KernTableHeaderPtr = ?*KernTableHeader;

pub const KernTableHeaderHandle = ?*KernTableHeaderPtr;

pub const KernKerningPair = extern struct {
    left: objc.UInt16,
    right: objc.UInt16,
};

pub const KernOrderedListEntry = extern struct {
    pair: KernKerningPair,
    value: KernKerningValue,
};

pub const KernOrderedListEntryPtr = ?*KernOrderedListEntry;

pub const KernOrderedListHeader = extern struct {
    nPairs: objc.UInt16,
    searchRange: objc.UInt16,
    entrySelector: objc.UInt16,
    rangeShift: objc.UInt16,
    table: [1]objc.UInt16,
};

pub const KernStateHeader = extern struct {
    header: STHeader,
    valueTable: objc.UInt16,
    firstTable: [1]objc.UInt8,
};

pub const KernStateEntry = extern struct {
    newState: objc.UInt16,
    flags: objc.UInt16,
};

pub const KernOffsetTable = extern struct {
    firstGlyph: objc.UInt16,
    nGlyphs: objc.UInt16,
    offsetTable: [1]KernArrayOffset,
};

pub const KernOffsetTablePtr = ?*KernOffsetTable;

pub const KernSimpleArrayHeader = extern struct {
    rowWidth: objc.UInt16,
    leftOffsetTable: objc.UInt16,
    rightOffsetTable: objc.UInt16,
    theArray: KernArrayOffset,
    firstTable: [1]objc.UInt16,
};

pub const KernIndexArrayHeader = extern struct {
    glyphCount: objc.UInt16,
    kernValueCount: objc.UInt8,
    leftClassCount: objc.UInt8,
    rightClassCount: objc.UInt8,
    flags: objc.UInt8,
    kernValue: [1]objc.SInt16,
    leftClass: [1]objc.UInt8,
    rightClass: [1]objc.UInt8,
    kernIndex: [1]objc.UInt8,
};

pub const KernFormatSpecificHeader = extern union {
    orderedList: KernOrderedListHeader,
    stateTable: KernStateHeader,
    simpleArray: KernSimpleArrayHeader,
    indexArray: KernIndexArrayHeader,
};

pub const KernVersion0SubtableHeader = extern struct {
    version: objc.UInt16,
    length: objc.UInt16,
    stInfo: KernSubtableInfo,
    fsHeader: KernFormatSpecificHeader,
};

pub const KernSubtableHeader = extern struct {
    length: objc.SInt32,
    stInfo: KernSubtableInfo,
    tupleIndex: objc.SInt16,
    fsHeader: KernFormatSpecificHeader,
};

pub const KernSubtableHeaderPtr = ?*KernSubtableHeader;

pub const anon14691 = enum(i32) {
    KERXTag = 1801810552,
    KERXCurrentVersion = 131072,
    KERXVertical = -2147483648,
    KERXResetCrossStream = 32768,
    KERXCrossStream = 1073741824,
    KERXVariation = 536870912,
    KERXDescending = 268435456,
    KERXUnusedBits = 268435200,
    KERXFormatMask = 255,
};

pub const anon14811 = enum(u32) {
    KERXOrderedList = 0,
    KERXStateTable = 1,
    KERXSimpleArray = 2,
    KERXControlPoint = 4,
    KERXIndexArray = 6,
};

pub const anon14901 = enum(u32) {
    KERXLineStart = 1,
    KERXLineEndKerning = 2,
    KERXNoCrossKerning = 4,
    KERXNotesRequested = 8,
    KERXNoStakeNote = 1,
    KERXCrossStreamResetNote = 2,
    KERXNotApplied = 1,
};

pub const anon15011 = enum(u32) {
    KERXActionTypeMask = -1073741824,
    KERXActionTypeControlPoints = 0,
    KERXActionTypeAnchorPoints = 1073741824,
    KERXActionTypeCoordinates = -2147483648,
    KERXUnusedFlags = 1056964608,
    KERXActionOffsetMask = 16777215,
};

pub const anon15111 = enum(u32) {
    KERXValuesAreLong = 1,
};

pub const KerxSubtableCoverage = objc.UInt32;

pub const KerxArrayOffset = objc.UInt32;

pub const KerxTableHeader = extern struct {
    version: objc.Fixed,
    nTables: objc.UInt32,
    firstSubtable: [1]objc.UInt32,
};

pub const KerxTableHeaderPtr = ?*KerxTableHeader;

pub const KerxTableHeaderHandle = ?*KerxTableHeaderPtr;

pub const KerxKerningPair = extern struct {
    left: objc.UInt16,
    right: objc.UInt16,
};

pub const KerxOrderedListEntry = extern struct {
    pair: KerxKerningPair,
    value: KernKerningValue,
};

pub const KerxOrderedListEntryPtr = ?*KerxOrderedListEntry;

pub const KerxOrderedListHeader = extern struct {
    nPairs: objc.UInt32,
    searchRange: objc.UInt32,
    entrySelector: objc.UInt32,
    rangeShift: objc.UInt32,
    table: [1]objc.UInt32,
};

pub const KerxStateHeader = extern struct {
    header: STXHeader,
    valueTable: objc.UInt32,
    firstTable: [1]objc.UInt8,
};

pub const KerxStateEntry = extern struct {
    newState: objc.UInt16,
    flags: objc.UInt16,
    valueIndex: objc.UInt16,
};

pub const KerxControlPointHeader = extern struct {
    header: STXHeader,
    flags: objc.UInt32,
    firstTable: [1]objc.UInt8,
};

pub const KerxControlPointEntry = extern struct {
    newState: objc.UInt16,
    flags: objc.UInt16,
    actionIndex: objc.UInt16,
};

pub const KerxControlPointAction = extern struct {
    markControlPoint: objc.UInt16,
    currControlPoint: objc.UInt16,
};

pub const KerxAnchorPointAction = extern struct {
    markAnchorPoint: objc.UInt16,
    currAnchorPoint: objc.UInt16,
};

pub const KerxCoordinateAction = extern struct {
    markX: objc.UInt16,
    markY: objc.UInt16,
    currX: objc.UInt16,
    currY: objc.UInt16,
};

pub const KerxSimpleArrayHeader = extern struct {
    rowWidth: objc.UInt32,
    leftOffsetTable: objc.UInt32,
    rightOffsetTable: objc.UInt32,
    theArray: KerxArrayOffset,
    firstTable: [1]objc.UInt32,
};

pub const KerxIndexArrayHeader = extern struct {
    flags: objc.UInt32,
    rowCount: objc.UInt16,
    columnCount: objc.UInt16,
    rowIndexTableOffset: objc.UInt32,
    columnIndexTableOffset: objc.UInt32,
    kerningArrayOffset: objc.UInt32,
    kerningVectorOffset: objc.UInt32,
};

pub const KerxFormatSpecificHeader = extern union {
    orderedList: KerxOrderedListHeader,
    stateTable: KerxStateHeader,
    simpleArray: KerxSimpleArrayHeader,
    indexArray: KerxIndexArrayHeader,
    controlPoint: KerxControlPointHeader,
};

pub const KerxSubtableHeader = extern struct {
    length: objc.UInt32,
    stInfo: KerxSubtableCoverage,
    tupleCount: objc.UInt32,
    fsHeader: KerxFormatSpecificHeader,
};

pub const KerxSubtableHeaderPtr = ?*KerxSubtableHeader;

pub const anon16541 = enum(u32) {
    BSLNTag = 1651731566,
    BSLNCurrentVersion = 65536,
    BSLNDistanceFormatNoMap = 0,
    BSLNDistanceFormatWithMap = 1,
    BSLNControlPointFormatNoMap = 2,
    BSLNControlPointFormatWithMap = 3,
};

pub const anon16641 = enum(u32) {
    BSLNRomanBaseline = 0,
    BSLNIdeographicCenterBaseline = 1,
    BSLNIdeographicLowBaseline = 2,
    BSLNHangingBaseline = 3,
    BSLNMathBaseline = 4,
    BSLNIdeographicHighBaseline = 5,
    BSLNLastBaseline = 31,
    BSLNNumBaselineClasses = 32,
    BSLNNoBaseline = 255,
    BSLNNoBaselineOverride = 255,
};

pub const BslnBaselineClass = objc.UInt32;

pub const BslnBaselineRecord = [32]objc.Fixed;

pub const BslnFormat0Part = extern struct {
    deltas: [32]objc.SInt16,
};

pub const BslnFormat1Part = extern struct {
    deltas: [32]objc.SInt16,
    mappingData: SFNTLookupTable,
};

pub const BslnFormat2Part = extern struct {
    stdGlyph: objc.UInt16,
    ctlPoints: [32]objc.SInt16,
};

pub const BslnFormat3Part = extern struct {
    stdGlyph: objc.UInt16,
    ctlPoints: [32]objc.SInt16,
    mappingData: SFNTLookupTable,
};

pub const BslnFormatUnion = extern union {
    fmt0Part: BslnFormat0Part,
    fmt1Part: BslnFormat1Part,
    fmt2Part: BslnFormat2Part,
    fmt3Part: BslnFormat3Part,
};

pub const BslnTableFormat = objc.UInt16;

pub const BslnTable = extern struct {
    version: objc.Fixed,
    format: BslnTableFormat,
    defaultBaseline: objc.UInt16,
    parts: BslnFormatUnion,
};

pub const BslnTablePtr = ?*BslnTable;

pub const ALMXHeader = extern struct {
    Version: objc.Fixed,
    Flags: objc.UInt16,
    NMasters: objc.UInt16,
    FirstGlyph: objc.UInt16,
    LastGlyph: objc.UInt16,
    lookup: SFNTLookupTable,
};

pub const ALMXGlyphEntry = extern struct {
    GlyphIndexOffset: objc.SInt16,
    HorizontalAdvance: objc.SInt16,
    XOffsetToHOrigin: objc.SInt16,
    VerticalAdvance: objc.SInt16,
    YOffsetToVOrigin: objc.SInt16,
};

pub const ROTAHeader = extern struct {
    Version: objc.Fixed,
    Flags: objc.UInt16,
    NMasters: objc.UInt16,
    FirstGlyph: objc.UInt16,
    LastGlyph: objc.UInt16,
    lookup: SFNTLookupTable,
};

pub const ROTAGlyphEntry = extern struct {
    GlyphIndexOffset: objc.SInt16,
    HBaselineOffset: objc.SInt16,
    VBaselineOffset: objc.SInt16,
};

pub const anon17801 = enum(u32) {
    ANKRCurrentVersion = 0,
};

pub const AnchorPoint = extern struct {
    x: objc.SInt16,
    y: objc.SInt16,
};

pub const AnchorPointTable = extern struct {
    nPoints: objc.UInt32,
    points: [1]AnchorPoint,
};

pub const AnkrTable = extern struct {
    version: objc.UInt16,
    flags: objc.UInt16,
    lookupTableOffset: objc.UInt32,
    anchorPointTableOffset: objc.UInt32,
};

pub const anon18071 = enum(u32) {
    LTAGCurrentVersion = 1,
};

pub const LtagStringRange = extern struct {
    offset: objc.UInt16,
    length: objc.UInt16,
};

pub const LtagTable = extern struct {
    version: objc.UInt32,
    flags: objc.UInt32,
    numTags: objc.UInt32,
    tagRange: [1]LtagStringRange,
};

pub const sfntDirectoryEntry = extern struct {
    tableTag: objc.FourCharCode,
    checkSum: objc.UInt32,
    offset: objc.UInt32,
    length: objc.UInt32,
};

pub const sfntDirectory = extern struct {
    format: objc.FourCharCode,
    numOffsets: objc.UInt16,
    searchRange: objc.UInt16,
    entrySelector: objc.UInt16,
    rangeShift: objc.UInt16,
    table: [1]sfntDirectoryEntry,
};

pub const anon481 = enum(u32) {
    cmapFontTableTag = 1668112752,
};

pub const anon521 = enum(u32) {
    FontUnicodePlatform = 0,
    FontMacintoshPlatform = 1,
    FontReservedPlatform = 2,
    FontMicrosoftPlatform = 3,
    FontCustomPlatform = 4,
};

pub const anon601 = enum(u32) {
    FontUnicodeDefaultSemantics = 0,
    FontUnicodeV1_1Semantics = 1,
    FontISO10646_1993Semantics = 2,
    FontUnicodeV2_0BMPOnlySemantics = 3,
    FontUnicodeV2_0FullCoverageSemantics = 4,
    FontUnicodeV4_0VariationSequenceSemantics = 5,
    FontUnicode_FullRepertoire = 6,
};

pub const anon1121 = enum(u32) {
    FontMicrosoftSymbolScript = 0,
    FontMicrosoftStandardScript = 1,
    FontMicrosoftUCS4Script = 10,
};

pub const anon1191 = enum(u32) {
    FontCustom8BitScript = 0,
    FontCustom816BitScript = 1,
    FontCustom16BitScript = 2,
};

pub const anon1261 = enum(u32) {
    FontEnglishLanguage = 0,
    FontFrenchLanguage = 1,
    FontGermanLanguage = 2,
    FontItalianLanguage = 3,
    FontDutchLanguage = 4,
    FontSwedishLanguage = 5,
    FontSpanishLanguage = 6,
    FontDanishLanguage = 7,
    FontPortugueseLanguage = 8,
    FontNorwegianLanguage = 9,
    FontHebrewLanguage = 10,
    FontJapaneseLanguage = 11,
    FontArabicLanguage = 12,
    FontFinnishLanguage = 13,
    FontGreekLanguage = 14,
    FontIcelandicLanguage = 15,
    FontMalteseLanguage = 16,
    FontTurkishLanguage = 17,
    FontCroatianLanguage = 18,
    FontTradChineseLanguage = 19,
    FontUrduLanguage = 20,
    FontHindiLanguage = 21,
    FontThaiLanguage = 22,
    FontKoreanLanguage = 23,
    FontLithuanianLanguage = 24,
    FontPolishLanguage = 25,
    FontHungarianLanguage = 26,
    FontEstonianLanguage = 27,
    FontLettishLanguage = 28,
    FontLatvianLanguage = 28,
    FontSaamiskLanguage = 29,
    FontLappishLanguage = 29,
    FontFaeroeseLanguage = 30,
    FontFarsiLanguage = 31,
    FontPersianLanguage = 31,
    FontRussianLanguage = 32,
    FontSimpChineseLanguage = 33,
    FontFlemishLanguage = 34,
    FontIrishLanguage = 35,
    FontAlbanianLanguage = 36,
    FontRomanianLanguage = 37,
    FontCzechLanguage = 38,
    FontSlovakLanguage = 39,
    FontSlovenianLanguage = 40,
    FontYiddishLanguage = 41,
    FontSerbianLanguage = 42,
    FontMacedonianLanguage = 43,
    FontBulgarianLanguage = 44,
    FontUkrainianLanguage = 45,
    FontByelorussianLanguage = 46,
    FontUzbekLanguage = 47,
    FontKazakhLanguage = 48,
    FontAzerbaijaniLanguage = 49,
    FontAzerbaijanArLanguage = 50,
    FontArmenianLanguage = 51,
    FontGeorgianLanguage = 52,
    FontMoldavianLanguage = 53,
    FontKirghizLanguage = 54,
    FontTajikiLanguage = 55,
    FontTurkmenLanguage = 56,
    FontMongolianLanguage = 57,
    FontMongolianCyrLanguage = 58,
    FontPashtoLanguage = 59,
    FontKurdishLanguage = 60,
    FontKashmiriLanguage = 61,
    FontSindhiLanguage = 62,
    FontTibetanLanguage = 63,
    FontNepaliLanguage = 64,
    FontSanskritLanguage = 65,
    FontMarathiLanguage = 66,
    FontBengaliLanguage = 67,
    FontAssameseLanguage = 68,
    FontGujaratiLanguage = 69,
    FontPunjabiLanguage = 70,
    FontOriyaLanguage = 71,
    FontMalayalamLanguage = 72,
    FontKannadaLanguage = 73,
    FontTamilLanguage = 74,
    FontTeluguLanguage = 75,
    FontSinhaleseLanguage = 76,
    FontBurmeseLanguage = 77,
    FontKhmerLanguage = 78,
    FontLaoLanguage = 79,
    FontVietnameseLanguage = 80,
    FontIndonesianLanguage = 81,
    FontTagalogLanguage = 82,
    FontMalayRomanLanguage = 83,
    FontMalayArabicLanguage = 84,
    FontAmharicLanguage = 85,
    FontTigrinyaLanguage = 86,
    FontGallaLanguage = 87,
    FontOromoLanguage = 87,
    FontSomaliLanguage = 88,
    FontSwahiliLanguage = 89,
    FontRuandaLanguage = 90,
    FontRundiLanguage = 91,
    FontChewaLanguage = 92,
    FontMalagasyLanguage = 93,
    FontEsperantoLanguage = 94,
    FontWelshLanguage = 128,
    FontBasqueLanguage = 129,
    FontCatalanLanguage = 130,
    FontLatinLanguage = 131,
    FontQuechuaLanguage = 132,
    FontGuaraniLanguage = 133,
    FontAymaraLanguage = 134,
    FontTatarLanguage = 135,
    FontUighurLanguage = 136,
    FontDzongkhaLanguage = 137,
    FontJavaneseRomLanguage = 138,
    FontSundaneseRomLanguage = 139,
};

pub const anon2421 = enum(u32) {
    FontNoPlatformCode = -1,
    FontNoScriptCode = -1,
    FontNoLanguageCode = -1,
};

pub const sfntCMapSubHeader = extern struct {
    format: objc.UInt16,
    length: objc.UInt16,
    languageID: objc.UInt16,
};

pub const sfntCMapExtendedSubHeader = extern struct {
    format: objc.UInt16,
    reserved: objc.UInt16,
    length: objc.UInt32,
    language: objc.UInt32,
};

pub const anon2651 = enum(u32) {
    sizeof_sfntCMapExtendedSubHeader = 12,
};

pub const sfntCMapEncoding = extern struct {
    platformID: objc.UInt16,
    scriptID: objc.UInt16,
    offset: objc.UInt32,
};

pub const anon2751 = enum(u32) {
    sizeof_sfntCMapEncoding = 8,
};

pub const sfntCMapHeader = extern struct {
    version: objc.UInt16,
    numTables: objc.UInt16,
    encoding: [1]sfntCMapEncoding,
};

pub const anon2851 = enum(u32) {
    sizeof_sfntCMapHeader = 4,
};

pub const anon2941 = enum(u32) {
    FontCopyrightName = 0,
    FontFamilyName = 1,
    FontStyleName = 2,
    FontUniqueName = 3,
    FontFullName = 4,
    FontVersionName = 5,
    FontPostscriptName = 6,
    FontTrademarkName = 7,
    FontManufacturerName = 8,
    FontDesignerName = 9,
    FontDescriptionName = 10,
    FontVendorURLName = 11,
    FontDesignerURLName = 12,
    FontLicenseDescriptionName = 13,
    FontLicenseInfoURLName = 14,
    FontPreferredFamilyName = 16,
    FontPreferredSubfamilyName = 17,
    FontMacCompatibleFullName = 18,
    FontSampleTextName = 19,
    FontPostScriptCIDName = 20,
    FontLastReservedName = 255,
};

pub const anon3201 = enum(u32) {
    FontNoNameCode = -1,
};

pub const sfntNameRecord = extern struct {
    platformID: objc.UInt16,
    scriptID: objc.UInt16,
    languageID: objc.UInt16,
    nameID: objc.UInt16,
    length: objc.UInt16,
    offset: objc.UInt16,
};

pub const anon3331 = enum(u32) {
    sizeof_sfntNameRecord = 12,
};

pub const sfntNameHeader = extern struct {
    format: objc.UInt16,
    count: objc.UInt16,
    stringOffset: objc.UInt16,
    rec: [1]sfntNameRecord,
};

pub const anon3441 = enum(u32) {
    sizeof_sfntNameHeader = 6,
};

pub const anon3491 = enum(u32) {
    variationFontTableTag = 1719034226,
};

pub const sfntVariationAxis = extern struct {
    axisTag: objc.FourCharCode,
    minValue: objc.Fixed,
    defaultValue: objc.Fixed,
    maxValue: objc.Fixed,
    flags: objc.SInt16,
    nameID: objc.SInt16,
};

pub const anon3631 = enum(u32) {
    sizeof_sfntVariationAxis = 20,
};

pub const sfntInstance = extern struct {
    nameID: objc.SInt16,
    flags: objc.SInt16,
    coord: [1]objc.Fixed,
};

pub const anon3751 = enum(u32) {
    sizeof_sfntInstance = 4,
};

pub const sfntVariationHeader = extern struct {
    version: objc.Fixed,
    offsetToData: objc.UInt16,
    countSizePairs: objc.UInt16,
    axisCount: objc.UInt16,
    axisSize: objc.UInt16,
    instanceCount: objc.UInt16,
    instanceSize: objc.UInt16,
    axis: [1]sfntVariationAxis,
    instance: [1]sfntInstance,
};

pub const sfntFontDescriptor = extern struct {
    name: objc.FourCharCode,
    value: objc.Fixed,
};

pub const sfntDescriptorHeader = extern struct {
    version: objc.Fixed,
    descriptorCount: objc.SInt32,
    descriptor: [1]sfntFontDescriptor,
};

pub const anon4121 = enum(u32) {
    sizeof_sfntDescriptorHeader = 8,
};

pub const anon4171 = enum(u32) {
    featureFontTableTag = 1717920116,
};

pub const sfntFeatureName = extern struct {
    featureType: objc.UInt16,
    settingCount: objc.UInt16,
    offsetToSettings: objc.SInt32,
    featureFlags: objc.UInt16,
    nameID: objc.SInt16,
};

pub const sfntFontFeatureSetting = extern struct {
    setting: objc.UInt16,
    nameID: objc.SInt16,
};

pub const sfntFontRunFeature = extern struct {
    featureType: objc.UInt16,
    setting: objc.UInt16,
};

pub const sfntFeatureHeader = extern struct {
    version: objc.SInt32,
    featureNameCount: objc.UInt16,
    featureSetCount: objc.UInt16,
    reserved: objc.SInt32,
    names: [1]sfntFeatureName,
    settings: [1]sfntFontFeatureSetting,
    runs: [1]sfntFontRunFeature,
};

pub const anon4501 = enum(u32) {
    os2FontTableTag = 1330851634,
};

pub const anon4551 = enum(u32) {
    nonGlyphID = 65535,
};

pub const FontNameCode = objc.UInt32;

pub const FontPlatformCode = objc.UInt32;

pub const FontScriptCode = objc.UInt32;

pub const FontLanguageCode = objc.UInt32;

pub const FontVariation = extern struct {
    name: objc.FourCharCode,
    value: objc.Fixed,
};

extern "CoreText" fn CTGetCoreTextVersion() callconv(.C) objc.uint32_t;
pub const getCoreTextVersion = CTGetCoreTextVersion;
