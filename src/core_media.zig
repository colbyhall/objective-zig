// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const foundation = @import("foundation.zig"); // Framework dependency Foundation.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const core_audio_types = @import("core_audio_types.zig"); // Framework dependency CoreAudioTypes.
const core_video = @import("core_video.zig"); // Framework dependency CoreVideo.
const core_audio = @import("core_audio.zig"); // Framework dependency CoreAudio.

pub const ItemCount = core_foundation.Index;

pub const ItemIndex = core_foundation.Index;

pub const BaseClassVersion = objc.uintptr_t;

pub const StructVersion = objc.uintptr_t;

pub const PersistentTrackID = objc.int32_t;

pub const anon3501 = PersistentTrackID;
pub const anon3501_CMPersistentTrackID_Invalid: PersistentTrackID = 0;
pub const anon3501_siInitSDTblErr: PersistentTrackID = 1;
pub const anon3501_siInitVBLQsErr: PersistentTrackID = 2;
pub const anon3501_siInitSPTblErr: PersistentTrackID = 3;
pub const anon3501_sdmJTInitErr: PersistentTrackID = 10;
pub const anon3501_sdmInitErr: PersistentTrackID = 11;
pub const anon3501_sdmSRTInitErr: PersistentTrackID = 12;
pub const anon3501_sdmPRAMInitErr: PersistentTrackID = 13;
pub const anon3501_sdmPriInitErr: PersistentTrackID = 14;
pub const anon3501_UCTSDirectionNext: PersistentTrackID = 0;
pub const anon3501_UCTSDirectionPrevious: PersistentTrackID = 1;

pub const TimeValue = objc.int64_t;

pub const TimeScale = objc.int32_t;

pub const TimeEpoch = objc.int64_t;

pub const TimeFlags = objc.uint32_t;
pub const TimeFlags__Valid: objc.uint32_t = 1;
pub const TimeFlags__HasBeenRounded: objc.uint32_t = 2;
pub const TimeFlags__PositiveInfinity: objc.uint32_t = 4;
pub const TimeFlags__NegativeInfinity: objc.uint32_t = 8;
pub const TimeFlags__Indefinite: objc.uint32_t = 16;
pub const TimeFlags__ImpliedValueFlagsMask: objc.uint32_t = 28;

pub const Time = extern struct {
    value: TimeValue,
    timescale: TimeScale,
    flags: TimeFlags,
    epoch: TimeEpoch,
};

extern "CoreMedia" fn CMTimeMake(value: objc.int64_t, timescale: objc.int32_t) callconv(.C) Time;
pub const timeMake = CMTimeMake;

extern "CoreMedia" fn CMTimeMakeWithEpoch(value: objc.int64_t, timescale: objc.int32_t, epoch: objc.int64_t) callconv(.C) Time;
pub const timeMakeWithEpoch = CMTimeMakeWithEpoch;

extern "CoreMedia" fn CMTimeMakeWithSeconds(seconds: objc.Float64, preferredTimescale: objc.int32_t) callconv(.C) Time;
pub const timeMakeWithSeconds = CMTimeMakeWithSeconds;

extern "CoreMedia" fn CMTimeGetSeconds(time: Time) callconv(.C) objc.Float64;
pub const timeGetSeconds = CMTimeGetSeconds;

pub const TimeRoundingMethod = objc.uint32_t;
pub const TimeRoundingMethod__RoundHalfAwayFromZero: objc.uint32_t = 1;
pub const TimeRoundingMethod__RoundTowardZero: objc.uint32_t = 2;
pub const TimeRoundingMethod__RoundAwayFromZero: objc.uint32_t = 3;
pub const TimeRoundingMethod__QuickTime: objc.uint32_t = 4;
pub const TimeRoundingMethod__RoundTowardPositiveInfinity: objc.uint32_t = 5;
pub const TimeRoundingMethod__RoundTowardNegativeInfinity: objc.uint32_t = 6;
pub const TimeRoundingMethod__Default: objc.uint32_t = 1;

extern "CoreMedia" fn CMTimeConvertScale(time: Time, newTimescale: objc.int32_t, method: TimeRoundingMethod) callconv(.C) Time;
pub const timeConvertScale = CMTimeConvertScale;

extern "CoreMedia" fn CMTimeAdd(lhs: Time, rhs: Time) callconv(.C) Time;
pub const timeAdd = CMTimeAdd;

extern "CoreMedia" fn CMTimeSubtract(lhs: Time, rhs: Time) callconv(.C) Time;
pub const timeSubtract = CMTimeSubtract;

extern "CoreMedia" fn CMTimeMultiply(time: Time, multiplier: objc.int32_t) callconv(.C) Time;
pub const timeMultiply = CMTimeMultiply;

extern "CoreMedia" fn CMTimeMultiplyByFloat64(time: Time, multiplier: objc.Float64) callconv(.C) Time;
pub const timeMultiplyByFloat64 = CMTimeMultiplyByFloat64;

extern "CoreMedia" fn CMTimeMultiplyByRatio(time: Time, multiplier: objc.int32_t, divisor: objc.int32_t) callconv(.C) Time;
pub const timeMultiplyByRatio = CMTimeMultiplyByRatio;

extern "CoreMedia" fn CMTimeCompare(time1: Time, time2: Time) callconv(.C) objc.int32_t;
pub const timeCompare = CMTimeCompare;

extern "CoreMedia" fn CMTimeMinimum(time1: Time, time2: Time) callconv(.C) Time;
pub const timeMinimum = CMTimeMinimum;

extern "CoreMedia" fn CMTimeMaximum(time1: Time, time2: Time) callconv(.C) Time;
pub const timeMaximum = CMTimeMaximum;

extern "CoreMedia" fn CMTimeAbsoluteValue(time: Time) callconv(.C) Time;
pub const timeAbsoluteValue = CMTimeAbsoluteValue;

extern "CoreMedia" fn CMTimeCopyAsDictionary(time: Time, allocator: core_foundation.AllocatorRef) callconv(.C) core_foundation.DictionaryRef;
pub const timeCopyAsDictionary = CMTimeCopyAsDictionary;

extern "CoreMedia" fn CMTimeMakeFromDictionary(dictionaryRepresentation: core_foundation.DictionaryRef) callconv(.C) Time;
pub const timeMakeFromDictionary = CMTimeMakeFromDictionary;

extern "CoreMedia" fn CMTimeCopyDescription(allocator: core_foundation.AllocatorRef, time: Time) callconv(.C) core_foundation.StringRef;
pub const timeCopyDescription = CMTimeCopyDescription;

extern "CoreMedia" fn CMTimeShow(time: Time) callconv(.C) void;
pub const timeShow = CMTimeShow;

pub const TimeRange = extern struct {
    start: Time,
    duration: Time,
};

extern "CoreMedia" fn CMTimeRangeMake(start: Time, duration: Time) callconv(.C) TimeRange;
pub const timeRangeMake = CMTimeRangeMake;

extern "CoreMedia" fn CMTimeRangeGetUnion(range: TimeRange, otherRange: TimeRange) callconv(.C) TimeRange;
pub const timeRangeGetUnion = CMTimeRangeGetUnion;

extern "CoreMedia" fn CMTimeRangeGetIntersection(range: TimeRange, otherRange: TimeRange) callconv(.C) TimeRange;
pub const timeRangeGetIntersection = CMTimeRangeGetIntersection;

extern "CoreMedia" fn CMTimeRangeEqual(range1: TimeRange, range2: TimeRange) callconv(.C) objc.Boolean;
pub const timeRangeEqual = CMTimeRangeEqual;

extern "CoreMedia" fn CMTimeRangeContainsTime(range: TimeRange, time: Time) callconv(.C) objc.Boolean;
pub const timeRangeContainsTime = CMTimeRangeContainsTime;

extern "CoreMedia" fn CMTimeRangeContainsTimeRange(range: TimeRange, otherRange: TimeRange) callconv(.C) objc.Boolean;
pub const timeRangeContainsTimeRange = CMTimeRangeContainsTimeRange;

extern "CoreMedia" fn CMTimeRangeGetEnd(range: TimeRange) callconv(.C) Time;
pub const timeRangeGetEnd = CMTimeRangeGetEnd;

extern "CoreMedia" fn CMTimeMapTimeFromRangeToRange(t: Time, fromRange: TimeRange, toRange: TimeRange) callconv(.C) Time;
pub const timeMapTimeFromRangeToRange = CMTimeMapTimeFromRangeToRange;

extern "CoreMedia" fn CMTimeClampToRange(time: Time, range: TimeRange) callconv(.C) Time;
pub const timeClampToRange = CMTimeClampToRange;

extern "CoreMedia" fn CMTimeMapDurationFromRangeToRange(dur: Time, fromRange: TimeRange, toRange: TimeRange) callconv(.C) Time;
pub const timeMapDurationFromRangeToRange = CMTimeMapDurationFromRangeToRange;

extern "CoreMedia" fn CMTimeFoldIntoRange(time: Time, foldRange: TimeRange) callconv(.C) Time;
pub const timeFoldIntoRange = CMTimeFoldIntoRange;

extern "CoreMedia" fn CMTimeRangeFromTimeToTime(start: Time, end: Time) callconv(.C) TimeRange;
pub const timeRangeFromTimeToTime = CMTimeRangeFromTimeToTime;

extern "CoreMedia" fn CMTimeRangeCopyAsDictionary(range: TimeRange, allocator: core_foundation.AllocatorRef) callconv(.C) core_foundation.DictionaryRef;
pub const timeRangeCopyAsDictionary = CMTimeRangeCopyAsDictionary;

extern "CoreMedia" fn CMTimeRangeMakeFromDictionary(dictionaryRepresentation: core_foundation.DictionaryRef) callconv(.C) TimeRange;
pub const timeRangeMakeFromDictionary = CMTimeRangeMakeFromDictionary;

extern "CoreMedia" fn CMTimeRangeCopyDescription(allocator: core_foundation.AllocatorRef, range: TimeRange) callconv(.C) core_foundation.StringRef;
pub const timeRangeCopyDescription = CMTimeRangeCopyDescription;

extern "CoreMedia" fn CMTimeRangeShow(range: TimeRange) callconv(.C) void;
pub const timeRangeShow = CMTimeRangeShow;

pub const TimeMapping = extern struct {
    source: TimeRange,
    target: TimeRange,
};

extern "CoreMedia" fn CMTimeMappingMake(source: TimeRange, target: TimeRange) callconv(.C) TimeMapping;
pub const timeMappingMake = CMTimeMappingMake;

extern "CoreMedia" fn CMTimeMappingMakeEmpty(target: TimeRange) callconv(.C) TimeMapping;
pub const timeMappingMakeEmpty = CMTimeMappingMakeEmpty;

extern "CoreMedia" fn CMTimeMappingCopyAsDictionary(mapping: TimeMapping, allocator: core_foundation.AllocatorRef) callconv(.C) core_foundation.DictionaryRef;
pub const timeMappingCopyAsDictionary = CMTimeMappingCopyAsDictionary;

extern "CoreMedia" fn CMTimeMappingMakeFromDictionary(dictionaryRepresentation: core_foundation.DictionaryRef) callconv(.C) TimeMapping;
pub const timeMappingMakeFromDictionary = CMTimeMappingMakeFromDictionary;

extern "CoreMedia" fn CMTimeMappingCopyDescription(allocator: core_foundation.AllocatorRef, mapping: TimeMapping) callconv(.C) core_foundation.StringRef;
pub const timeMappingCopyDescription = CMTimeMappingCopyDescription;

extern "CoreMedia" fn CMTimeMappingShow(mapping: TimeMapping) callconv(.C) void;
pub const timeMappingShow = CMTimeMappingShow;

pub const opaqueCMFormatDescription = extern struct {};

pub const FormatDescriptionRef = opaqueCMFormatDescription;

pub const MediaType = objc.FourCharCode;

extern "CoreMedia" fn CMFormatDescriptionCreate(
    allocator: core_foundation.AllocatorRef,
    mediaType: MediaType,
    mediaSubType: objc.FourCharCode,
    extensions: core_foundation.DictionaryRef,
    formatDescriptionOut: ?*FormatDescriptionRef,
) callconv(.C) objc.OSStatus;
pub const formatDescriptionCreate = CMFormatDescriptionCreate;

extern "CoreMedia" fn CMFormatDescriptionGetTypeID() callconv(.C) core_foundation.TypeID;
pub const formatDescriptionGetTypeID = CMFormatDescriptionGetTypeID;

extern "CoreMedia" fn CMFormatDescriptionEqual(formatDescription: FormatDescriptionRef, otherFormatDescription: FormatDescriptionRef) callconv(.C) objc.Boolean;
pub const formatDescriptionEqual = CMFormatDescriptionEqual;

extern "CoreMedia" fn CMFormatDescriptionEqualIgnoringExtensionKeys(
    formatDescription: FormatDescriptionRef,
    otherFormatDescription: FormatDescriptionRef,
    formatDescriptionExtensionKeysToIgnore: core_foundation.TypeRef,
    sampleDescriptionExtensionAtomKeysToIgnore: core_foundation.TypeRef,
) callconv(.C) objc.Boolean;
pub const formatDescriptionEqualIgnoringExtensionKeys = CMFormatDescriptionEqualIgnoringExtensionKeys;

extern "CoreMedia" fn CMFormatDescriptionGetMediaType(desc: FormatDescriptionRef) callconv(.C) MediaType;
pub const formatDescriptionGetMediaType = CMFormatDescriptionGetMediaType;

extern "CoreMedia" fn CMFormatDescriptionGetMediaSubType(desc: FormatDescriptionRef) callconv(.C) objc.FourCharCode;
pub const formatDescriptionGetMediaSubType = CMFormatDescriptionGetMediaSubType;

extern "CoreMedia" fn CMFormatDescriptionGetExtensions(desc: FormatDescriptionRef) callconv(.C) core_foundation.DictionaryRef;
pub const formatDescriptionGetExtensions = CMFormatDescriptionGetExtensions;

extern "CoreMedia" fn CMFormatDescriptionGetExtension(desc: FormatDescriptionRef, extensionKey: core_foundation.StringRef) callconv(.C) core_foundation.PropertyListRef;
pub const formatDescriptionGetExtension = CMFormatDescriptionGetExtension;

pub const AudioCodecType = objc.FourCharCode;

pub const AudioFormatDescriptionRef = FormatDescriptionRef;

extern "CoreMedia" fn CMAudioFormatDescriptionCreate(
    allocator: core_foundation.AllocatorRef,
    asbd: ?*const core_audio_types.StreamBasicDescription,
    layoutSize: objc.size_t,
    layout: ?*const core_audio_types.ChannelLayout,
    magicCookieSize: objc.size_t,
    magicCookie: ?*const anyopaque,
    extensions: core_foundation.DictionaryRef,
    formatDescriptionOut: ?*AudioFormatDescriptionRef,
) callconv(.C) objc.OSStatus;
pub const audioFormatDescriptionCreate = CMAudioFormatDescriptionCreate;

extern "CoreMedia" fn CMAudioFormatDescriptionGetStreamBasicDescription(desc: AudioFormatDescriptionRef) callconv(.C) ?*const core_audio_types.StreamBasicDescription;
pub const audioFormatDescriptionGetStreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription;

extern "CoreMedia" fn CMAudioFormatDescriptionGetMagicCookie(desc: AudioFormatDescriptionRef, sizeOut: ?*objc.size_t) callconv(.C) ?*const anyopaque;
pub const audioFormatDescriptionGetMagicCookie = CMAudioFormatDescriptionGetMagicCookie;

extern "CoreMedia" fn CMAudioFormatDescriptionGetChannelLayout(desc: AudioFormatDescriptionRef, sizeOut: ?*objc.size_t) callconv(.C) ?*const core_audio_types.ChannelLayout;
pub const audioFormatDescriptionGetChannelLayout = CMAudioFormatDescriptionGetChannelLayout;

extern "CoreMedia" fn CMAudioFormatDescriptionGetFormatList(desc: AudioFormatDescriptionRef, sizeOut: ?*objc.size_t) callconv(.C) ?*const core_audio_types.FormatListItem;
pub const audioFormatDescriptionGetFormatList = CMAudioFormatDescriptionGetFormatList;

extern "CoreMedia" fn CMAudioFormatDescriptionGetRichestDecodableFormat(desc: AudioFormatDescriptionRef) callconv(.C) ?*const core_audio_types.FormatListItem;
pub const audioFormatDescriptionGetRichestDecodableFormat = CMAudioFormatDescriptionGetRichestDecodableFormat;

extern "CoreMedia" fn CMAudioFormatDescriptionGetMostCompatibleFormat(desc: AudioFormatDescriptionRef) callconv(.C) ?*const core_audio_types.FormatListItem;
pub const audioFormatDescriptionGetMostCompatibleFormat = CMAudioFormatDescriptionGetMostCompatibleFormat;

extern "CoreMedia" fn CMAudioFormatDescriptionCreateSummary(
    allocator: core_foundation.AllocatorRef,
    formatDescriptionArray: core_foundation.ArrayRef,
    flags: objc.uint32_t,
    formatDescriptionOut: ?*AudioFormatDescriptionRef,
) callconv(.C) objc.OSStatus;
pub const audioFormatDescriptionCreateSummary = CMAudioFormatDescriptionCreateSummary;

pub const AudioFormatDescriptionMask = objc.uint32_t;

extern "CoreMedia" fn CMAudioFormatDescriptionEqual(
    formatDescription: AudioFormatDescriptionRef,
    otherFormatDescription: AudioFormatDescriptionRef,
    equalityMask: AudioFormatDescriptionMask,
    equalityMaskOut: ?*AudioFormatDescriptionMask,
) callconv(.C) objc.Boolean;
pub const audioFormatDescriptionEqual = CMAudioFormatDescriptionEqual;

pub const VideoFormatDescriptionRef = FormatDescriptionRef;

pub const PixelFormatType = objc.FourCharCode;

pub const VideoCodecType = objc.FourCharCode;

pub const anon6311 = VideoCodecType;
pub const anon6311_CMVideoCodecType_422YpCbCr8: VideoCodecType = 846624121;
pub const anon6311_CMVideoCodecType_Animation: VideoCodecType = 1919706400;
pub const anon6311_CMVideoCodecType_Cinepak: VideoCodecType = 1668704612;
pub const anon6311_CMVideoCodecType_JPEG: VideoCodecType = 1785750887;
pub const anon6311_CMVideoCodecType_JPEG_OpenDML: VideoCodecType = 1684890161;
pub const anon6311_CMVideoCodecType_JPEG_XL: VideoCodecType = 1786276963;
pub const anon6311_CMVideoCodecType_SorensonVideo: VideoCodecType = 1398165809;
pub const anon6311_CMVideoCodecType_SorensonVideo3: VideoCodecType = 1398165811;
pub const anon6311_CMVideoCodecType_H263: VideoCodecType = 1748121139;
pub const anon6311_CMVideoCodecType_H264: VideoCodecType = 1635148593;
pub const anon6311_CMVideoCodecType_HEVC: VideoCodecType = 1752589105;
pub const anon6311_CMVideoCodecType_HEVCWithAlpha: VideoCodecType = 1836415073;
pub const anon6311_CMVideoCodecType_DolbyVisionHEVC: VideoCodecType = 1685481521;
pub const anon6311_CMVideoCodecType_MPEG4Video: VideoCodecType = 1836070006;
pub const anon6311_CMVideoCodecType_MPEG2Video: VideoCodecType = 1836069494;
pub const anon6311_CMVideoCodecType_MPEG1Video: VideoCodecType = 1836069238;
pub const anon6311_CMVideoCodecType_VP9: VideoCodecType = 1987063865;
pub const anon6311_CMVideoCodecType_DVCNTSC: VideoCodecType = 1685480224;
pub const anon6311_CMVideoCodecType_DVCPAL: VideoCodecType = 1685480304;
pub const anon6311_CMVideoCodecType_DVCProPAL: VideoCodecType = 1685483632;
pub const anon6311_CMVideoCodecType_DVCPro50NTSC: VideoCodecType = 1685468526;
pub const anon6311_CMVideoCodecType_DVCPro50PAL: VideoCodecType = 1685468528;
pub const anon6311_CMVideoCodecType_DVCPROHD720p60: VideoCodecType = 1685481584;
pub const anon6311_CMVideoCodecType_DVCPROHD720p50: VideoCodecType = 1685481585;
pub const anon6311_CMVideoCodecType_DVCPROHD1080i60: VideoCodecType = 1685481526;
pub const anon6311_CMVideoCodecType_DVCPROHD1080i50: VideoCodecType = 1685481525;
pub const anon6311_CMVideoCodecType_DVCPROHD1080p30: VideoCodecType = 1685481523;
pub const anon6311_CMVideoCodecType_DVCPROHD1080p25: VideoCodecType = 1685481522;
pub const anon6311_CMVideoCodecType_AppleProRes4444XQ: VideoCodecType = 1634743416;
pub const anon6311_CMVideoCodecType_AppleProRes4444: VideoCodecType = 1634743400;
pub const anon6311_CMVideoCodecType_AppleProRes422HQ: VideoCodecType = 1634755432;
pub const anon6311_CMVideoCodecType_AppleProRes422: VideoCodecType = 1634755438;
pub const anon6311_CMVideoCodecType_AppleProRes422LT: VideoCodecType = 1634755443;
pub const anon6311_CMVideoCodecType_AppleProRes422Proxy: VideoCodecType = 1634755439;
pub const anon6311_CMVideoCodecType_AppleProResRAW: VideoCodecType = 1634759278;
pub const anon6311_CMVideoCodecType_AppleProResRAWHQ: VideoCodecType = 1634759272;
pub const anon6311_CMVideoCodecType_DisparityHEVC: VideoCodecType = 1684632424;
pub const anon6311_CMVideoCodecType_DepthHEVC: VideoCodecType = 1684369512;
pub const anon6311_CMVideoCodecType_AV1: VideoCodecType = 1635135537;

pub const VideoDimensions = extern struct {
    width: objc.int32_t,
    height: objc.int32_t,
};

pub const anon8291 = objc.int32_t;
pub const anon8291_CMMPEG2VideoProfile_HDV_720p30: objc.int32_t = 1751414321;
pub const anon8291_CMMPEG2VideoProfile_HDV_1080i60: objc.int32_t = 1751414322;
pub const anon8291_CMMPEG2VideoProfile_HDV_1080i50: objc.int32_t = 1751414323;
pub const anon8291_CMMPEG2VideoProfile_HDV_720p24: objc.int32_t = 1751414324;
pub const anon8291_CMMPEG2VideoProfile_HDV_720p25: objc.int32_t = 1751414325;
pub const anon8291_CMMPEG2VideoProfile_HDV_1080p24: objc.int32_t = 1751414326;
pub const anon8291_CMMPEG2VideoProfile_HDV_1080p25: objc.int32_t = 1751414327;
pub const anon8291_CMMPEG2VideoProfile_HDV_1080p30: objc.int32_t = 1751414328;
pub const anon8291_CMMPEG2VideoProfile_HDV_720p60: objc.int32_t = 1751414329;
pub const anon8291_CMMPEG2VideoProfile_HDV_720p50: objc.int32_t = 1751414369;
pub const anon8291_CMMPEG2VideoProfile_XDCAM_HD_1080i60_VBR35: objc.int32_t = 2019849778;
pub const anon8291_CMMPEG2VideoProfile_XDCAM_HD_1080i50_VBR35: objc.int32_t = 2019849779;
pub const anon8291_CMMPEG2VideoProfile_XDCAM_HD_1080p24_VBR35: objc.int32_t = 2019849782;
pub const anon8291_CMMPEG2VideoProfile_XDCAM_HD_1080p25_VBR35: objc.int32_t = 2019849783;
pub const anon8291_CMMPEG2VideoProfile_XDCAM_HD_1080p30_VBR35: objc.int32_t = 2019849784;
pub const anon8291_CMMPEG2VideoProfile_XDCAM_EX_720p24_VBR35: objc.int32_t = 2019849780;
pub const anon8291_CMMPEG2VideoProfile_XDCAM_EX_720p25_VBR35: objc.int32_t = 2019849781;
pub const anon8291_CMMPEG2VideoProfile_XDCAM_EX_720p30_VBR35: objc.int32_t = 2019849777;
pub const anon8291_CMMPEG2VideoProfile_XDCAM_EX_720p50_VBR35: objc.int32_t = 2019849825;
pub const anon8291_CMMPEG2VideoProfile_XDCAM_EX_720p60_VBR35: objc.int32_t = 2019849785;
pub const anon8291_CMMPEG2VideoProfile_XDCAM_EX_1080i60_VBR35: objc.int32_t = 2019849826;
pub const anon8291_CMMPEG2VideoProfile_XDCAM_EX_1080i50_VBR35: objc.int32_t = 2019849827;
pub const anon8291_CMMPEG2VideoProfile_XDCAM_EX_1080p24_VBR35: objc.int32_t = 2019849828;
pub const anon8291_CMMPEG2VideoProfile_XDCAM_EX_1080p25_VBR35: objc.int32_t = 2019849829;
pub const anon8291_CMMPEG2VideoProfile_XDCAM_EX_1080p30_VBR35: objc.int32_t = 2019849830;
pub const anon8291_CMMPEG2VideoProfile_XDCAM_HD422_720p50_CBR50: objc.int32_t = 2019833185;
pub const anon8291_CMMPEG2VideoProfile_XDCAM_HD422_720p60_CBR50: objc.int32_t = 2019833145;
pub const anon8291_CMMPEG2VideoProfile_XDCAM_HD422_1080i60_CBR50: objc.int32_t = 2019833186;
pub const anon8291_CMMPEG2VideoProfile_XDCAM_HD422_1080i50_CBR50: objc.int32_t = 2019833187;
pub const anon8291_CMMPEG2VideoProfile_XDCAM_HD422_1080p24_CBR50: objc.int32_t = 2019833188;
pub const anon8291_CMMPEG2VideoProfile_XDCAM_HD422_1080p25_CBR50: objc.int32_t = 2019833189;
pub const anon8291_CMMPEG2VideoProfile_XDCAM_HD422_1080p30_CBR50: objc.int32_t = 2019833190;
pub const anon8291_CMMPEG2VideoProfile_XDCAM_HD_540p: objc.int32_t = 2019846244;
pub const anon8291_CMMPEG2VideoProfile_XDCAM_HD422_540p: objc.int32_t = 2019846194;
pub const anon8291_CMMPEG2VideoProfile_XDCAM_HD422_720p24_CBR50: objc.int32_t = 2019833140;
pub const anon8291_CMMPEG2VideoProfile_XDCAM_HD422_720p25_CBR50: objc.int32_t = 2019833141;
pub const anon8291_CMMPEG2VideoProfile_XDCAM_HD422_720p30_CBR50: objc.int32_t = 2019833137;
pub const anon8291_CMMPEG2VideoProfile_XF: objc.int32_t = 2019981873;

extern "CoreMedia" fn CMVideoFormatDescriptionCreate(
    allocator: core_foundation.AllocatorRef,
    codecType: VideoCodecType,
    width: objc.int32_t,
    height: objc.int32_t,
    extensions: core_foundation.DictionaryRef,
    formatDescriptionOut: ?*VideoFormatDescriptionRef,
) callconv(.C) objc.OSStatus;
pub const videoFormatDescriptionCreate = CMVideoFormatDescriptionCreate;

extern "CoreMedia" fn CMVideoFormatDescriptionCreateForImageBuffer(allocator: core_foundation.AllocatorRef, imageBuffer: core_video.ImageBufferRef, formatDescriptionOut: ?*VideoFormatDescriptionRef) callconv(.C) objc.OSStatus;
pub const videoFormatDescriptionCreateForImageBuffer = CMVideoFormatDescriptionCreateForImageBuffer;

extern "CoreMedia" fn CMVideoFormatDescriptionCreateFromH264ParameterSets(
    allocator: core_foundation.AllocatorRef,
    parameterSetCount: objc.size_t,
    parameterSetPointers: ?*const ?*const objc.uint8_t,
    parameterSetSizes: ?*const objc.size_t,
    NALUnitHeaderLength: i32,
    formatDescriptionOut: ?*FormatDescriptionRef,
) callconv(.C) objc.OSStatus;
pub const videoFormatDescriptionCreateFromH264ParameterSets = CMVideoFormatDescriptionCreateFromH264ParameterSets;

extern "CoreMedia" fn CMVideoFormatDescriptionCreateFromHEVCParameterSets(
    allocator: core_foundation.AllocatorRef,
    parameterSetCount: objc.size_t,
    parameterSetPointers: ?*const ?*const objc.uint8_t,
    parameterSetSizes: ?*const objc.size_t,
    NALUnitHeaderLength: i32,
    extensions: core_foundation.DictionaryRef,
    formatDescriptionOut: ?*FormatDescriptionRef,
) callconv(.C) objc.OSStatus;
pub const videoFormatDescriptionCreateFromHEVCParameterSets = CMVideoFormatDescriptionCreateFromHEVCParameterSets;

extern "CoreMedia" fn CMVideoFormatDescriptionGetH264ParameterSetAtIndex(
    videoDesc: FormatDescriptionRef,
    parameterSetIndex: objc.size_t,
    parameterSetPointerOut: ?*?*const objc.uint8_t,
    parameterSetSizeOut: ?*objc.size_t,
    parameterSetCountOut: ?*objc.size_t,
    NALUnitHeaderLengthOut: ?*i32,
) callconv(.C) objc.OSStatus;
pub const videoFormatDescriptionGetH264ParameterSetAtIndex = CMVideoFormatDescriptionGetH264ParameterSetAtIndex;

extern "CoreMedia" fn CMVideoFormatDescriptionGetHEVCParameterSetAtIndex(
    videoDesc: FormatDescriptionRef,
    parameterSetIndex: objc.size_t,
    parameterSetPointerOut: ?*?*const objc.uint8_t,
    parameterSetSizeOut: ?*objc.size_t,
    parameterSetCountOut: ?*objc.size_t,
    NALUnitHeaderLengthOut: ?*i32,
) callconv(.C) objc.OSStatus;
pub const videoFormatDescriptionGetHEVCParameterSetAtIndex = CMVideoFormatDescriptionGetHEVCParameterSetAtIndex;

extern "CoreMedia" fn CMVideoFormatDescriptionGetDimensions(videoDesc: VideoFormatDescriptionRef) callconv(.C) VideoDimensions;
pub const videoFormatDescriptionGetDimensions = CMVideoFormatDescriptionGetDimensions;

extern "CoreMedia" fn CMVideoFormatDescriptionGetPresentationDimensions(videoDesc: VideoFormatDescriptionRef, usePixelAspectRatio: objc.Boolean, useCleanAperture: objc.Boolean) callconv(.C) core_foundation.CGSize;
pub const videoFormatDescriptionGetPresentationDimensions = CMVideoFormatDescriptionGetPresentationDimensions;

extern "CoreMedia" fn CMVideoFormatDescriptionGetCleanAperture(videoDesc: VideoFormatDescriptionRef, originIsAtTopLeft: objc.Boolean) callconv(.C) core_foundation.CGRect;
pub const videoFormatDescriptionGetCleanAperture = CMVideoFormatDescriptionGetCleanAperture;

extern "CoreMedia" fn CMVideoFormatDescriptionGetExtensionKeysCommonWithImageBuffers() callconv(.C) core_foundation.ArrayRef;
pub const videoFormatDescriptionGetExtensionKeysCommonWithImageBuffers = CMVideoFormatDescriptionGetExtensionKeysCommonWithImageBuffers;

extern "CoreMedia" fn CMVideoFormatDescriptionMatchesImageBuffer(desc: VideoFormatDescriptionRef, imageBuffer: core_video.ImageBufferRef) callconv(.C) objc.Boolean;
pub const videoFormatDescriptionMatchesImageBuffer = CMVideoFormatDescriptionMatchesImageBuffer;

extern "CoreMedia" fn CMVideoFormatDescriptionCopyTagCollectionArray(formatDescription: VideoFormatDescriptionRef, tagCollectionsOut: ?*core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const videoFormatDescriptionCopyTagCollectionArray = CMVideoFormatDescriptionCopyTagCollectionArray;

pub const TaggedBufferGroupFormatDescriptionRef = FormatDescriptionRef;

pub const TaggedBufferGroupFormatType = objc.FourCharCode;

pub const MuxedFormatDescriptionRef = FormatDescriptionRef;

pub const MuxedStreamType = objc.FourCharCode;

pub const anon13281 = MuxedStreamType;
pub const anon13281_CMMuxedStreamType_MPEG1System: MuxedStreamType = 1836069235;
pub const anon13281_CMMuxedStreamType_MPEG2Transport: MuxedStreamType = 1836069492;
pub const anon13281_CMMuxedStreamType_MPEG2Program: MuxedStreamType = 1836069488;
pub const anon13281_CMMuxedStreamType_DV: MuxedStreamType = 1685463072;
pub const anon13281_CMMuxedStreamType_EmbeddedDeviceScreenRecording: MuxedStreamType = 1769173536;

extern "CoreMedia" fn CMMuxedFormatDescriptionCreate(
    allocator: core_foundation.AllocatorRef,
    muxType: MuxedStreamType,
    extensions: core_foundation.DictionaryRef,
    formatDescriptionOut: ?*MuxedFormatDescriptionRef,
) callconv(.C) objc.OSStatus;
pub const muxedFormatDescriptionCreate = CMMuxedFormatDescriptionCreate;

pub const ClosedCaptionFormatDescriptionRef = FormatDescriptionRef;

pub const ClosedCaptionFormatType = objc.FourCharCode;

pub const TextFormatDescriptionRef = FormatDescriptionRef;

pub const TextFormatType = objc.FourCharCode;

pub const anon14241 = TextFormatType;
pub const anon14241_CMTextFormatType_QTText: TextFormatType = 1952807028;
pub const anon14241_CMTextFormatType_3GText: TextFormatType = 1954034535;

pub const TextDisplayFlags = objc.uint32_t;

pub const TextJustificationValue = objc.int8_t;

extern "CoreMedia" fn CMTextFormatDescriptionGetDisplayFlags(desc: FormatDescriptionRef, displayFlagsOut: ?*TextDisplayFlags) callconv(.C) objc.OSStatus;
pub const textFormatDescriptionGetDisplayFlags = CMTextFormatDescriptionGetDisplayFlags;

extern "CoreMedia" fn CMTextFormatDescriptionGetJustification(desc: FormatDescriptionRef, horizontaJustificationlOut: ?*TextJustificationValue, verticalJustificationOut: ?*TextJustificationValue) callconv(.C) objc.OSStatus;
pub const textFormatDescriptionGetJustification = CMTextFormatDescriptionGetJustification;

extern "CoreMedia" fn CMTextFormatDescriptionGetDefaultTextBox(
    desc: FormatDescriptionRef,
    originIsAtTopLeft: objc.Boolean,
    heightOfTextTrack: core_foundation.CGFloat,
    defaultTextBoxOut: ?*core_foundation.CGRect,
) callconv(.C) objc.OSStatus;
pub const textFormatDescriptionGetDefaultTextBox = CMTextFormatDescriptionGetDefaultTextBox;

extern "CoreMedia" fn CMTextFormatDescriptionGetDefaultStyle(
    desc: FormatDescriptionRef,
    localFontIDOut: ?*objc.uint16_t,
    boldOut: ?*objc.Boolean,
    italicOut: ?*objc.Boolean,
    underlineOut: ?*objc.Boolean,
    fontSizeOut: ?*core_foundation.CGFloat,
    colorComponentsOut: ?*core_foundation.CGFloat,
) callconv(.C) objc.OSStatus;
pub const textFormatDescriptionGetDefaultStyle = CMTextFormatDescriptionGetDefaultStyle;

extern "CoreMedia" fn CMTextFormatDescriptionGetFontName(desc: FormatDescriptionRef, localFontID: objc.uint16_t, fontNameOut: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const textFormatDescriptionGetFontName = CMTextFormatDescriptionGetFontName;

pub const SubtitleFormatType = objc.FourCharCode;

pub const anon16601 = SubtitleFormatType;
pub const anon16601_CMSubtitleFormatType_3GText: SubtitleFormatType = 1954034535;
pub const anon16601_CMSubtitleFormatType_WebVTT: SubtitleFormatType = 2004251764;

pub const TimeCodeFormatDescriptionRef = FormatDescriptionRef;

pub const TimeCodeFormatType = objc.FourCharCode;

pub const anon16941 = TimeCodeFormatType;
pub const anon16941_CMTimeCodeFormatType_TimeCode32: TimeCodeFormatType = 1953325924;
pub const anon16941_CMTimeCodeFormatType_TimeCode64: TimeCodeFormatType = 1952658996;
pub const anon16941_CMTimeCodeFormatType_Counter32: TimeCodeFormatType = 1668166450;
pub const anon16941_CMTimeCodeFormatType_Counter64: TimeCodeFormatType = 1668167220;

pub const anon17151 = objc.uint32_t;
pub const anon17151_CMTimeCodeFlag_DropFrame: objc.uint32_t = 1;
pub const anon17151_CMTimeCodeFlag_24HourMax: objc.uint32_t = 2;
pub const anon17151_CMTimeCodeFlag_NegTimesOK: objc.uint32_t = 4;

extern "CoreMedia" fn CMTimeCodeFormatDescriptionCreate(
    allocator: core_foundation.AllocatorRef,
    timeCodeFormatType: TimeCodeFormatType,
    frameDuration: Time,
    frameQuanta: objc.uint32_t,
    flags: objc.uint32_t,
    extensions: core_foundation.DictionaryRef,
    formatDescriptionOut: ?*TimeCodeFormatDescriptionRef,
) callconv(.C) objc.OSStatus;
pub const timeCodeFormatDescriptionCreate = CMTimeCodeFormatDescriptionCreate;

extern "CoreMedia" fn CMTimeCodeFormatDescriptionGetFrameDuration(timeCodeFormatDescription: TimeCodeFormatDescriptionRef) callconv(.C) Time;
pub const timeCodeFormatDescriptionGetFrameDuration = CMTimeCodeFormatDescriptionGetFrameDuration;

extern "CoreMedia" fn CMTimeCodeFormatDescriptionGetFrameQuanta(timeCodeFormatDescription: TimeCodeFormatDescriptionRef) callconv(.C) objc.uint32_t;
pub const timeCodeFormatDescriptionGetFrameQuanta = CMTimeCodeFormatDescriptionGetFrameQuanta;

extern "CoreMedia" fn CMTimeCodeFormatDescriptionGetTimeCodeFlags(desc: TimeCodeFormatDescriptionRef) callconv(.C) objc.uint32_t;
pub const timeCodeFormatDescriptionGetTimeCodeFlags = CMTimeCodeFormatDescriptionGetTimeCodeFlags;

pub const MetadataFormatDescriptionRef = FormatDescriptionRef;

pub const MetadataFormatType = objc.FourCharCode;

pub const anon18161 = MetadataFormatType;
pub const anon18161_CMMetadataFormatType_ICY: MetadataFormatType = 1768126752;
pub const anon18161_CMMetadataFormatType_ID3: MetadataFormatType = 1768174368;
pub const anon18161_CMMetadataFormatType_Boxed: MetadataFormatType = 1835360888;
pub const anon18161_CMMetadataFormatType_EMSG: MetadataFormatType = 1701671783;

extern "CoreMedia" fn CMMetadataFormatDescriptionCreateWithKeys(
    allocator: core_foundation.AllocatorRef,
    metadataType: MetadataFormatType,
    keys: core_foundation.ArrayRef,
    formatDescriptionOut: ?*MetadataFormatDescriptionRef,
) callconv(.C) objc.OSStatus;
pub const metadataFormatDescriptionCreateWithKeys = CMMetadataFormatDescriptionCreateWithKeys;

extern "CoreMedia" fn CMMetadataFormatDescriptionCreateWithMetadataSpecifications(
    allocator: core_foundation.AllocatorRef,
    metadataType: MetadataFormatType,
    metadataSpecifications: core_foundation.ArrayRef,
    formatDescriptionOut: ?*MetadataFormatDescriptionRef,
) callconv(.C) objc.OSStatus;
pub const metadataFormatDescriptionCreateWithMetadataSpecifications = CMMetadataFormatDescriptionCreateWithMetadataSpecifications;

extern "CoreMedia" fn CMMetadataFormatDescriptionCreateWithMetadataFormatDescriptionAndMetadataSpecifications(
    allocator: core_foundation.AllocatorRef,
    sourceDescription: MetadataFormatDescriptionRef,
    metadataSpecifications: core_foundation.ArrayRef,
    formatDescriptionOut: ?*MetadataFormatDescriptionRef,
) callconv(.C) objc.OSStatus;
pub const metadataFormatDescriptionCreateWithMetadataFormatDescriptionAndMetadataSpecifications = CMMetadataFormatDescriptionCreateWithMetadataFormatDescriptionAndMetadataSpecifications;

extern "CoreMedia" fn CMMetadataFormatDescriptionCreateByMergingMetadataFormatDescriptions(
    allocator: core_foundation.AllocatorRef,
    sourceDescription: MetadataFormatDescriptionRef,
    otherSourceDescription: MetadataFormatDescriptionRef,
    formatDescriptionOut: ?*MetadataFormatDescriptionRef,
) callconv(.C) objc.OSStatus;
pub const metadataFormatDescriptionCreateByMergingMetadataFormatDescriptions = CMMetadataFormatDescriptionCreateByMergingMetadataFormatDescriptions;

extern "CoreMedia" fn CMMetadataFormatDescriptionGetKeyWithLocalID(desc: MetadataFormatDescriptionRef, localKeyID: objc.OSType) callconv(.C) core_foundation.DictionaryRef;
pub const metadataFormatDescriptionGetKeyWithLocalID = CMMetadataFormatDescriptionGetKeyWithLocalID;

extern "CoreMedia" fn CMMetadataFormatDescriptionGetIdentifiers(desc: MetadataFormatDescriptionRef) callconv(.C) core_foundation.ArrayRef;
pub const metadataFormatDescriptionGetIdentifiers = CMMetadataFormatDescriptionGetIdentifiers;

pub const AttachmentBearerRef = core_foundation.TypeRef;

pub const AttachmentMode = objc.uint32_t;

extern "CoreMedia" fn CMSetAttachment(
    target: AttachmentBearerRef,
    key: core_foundation.StringRef,
    value: core_foundation.TypeRef,
    attachmentMode: AttachmentMode,
) callconv(.C) void;
pub const setAttachment = CMSetAttachment;

extern "CoreMedia" fn CMGetAttachment(target: AttachmentBearerRef, key: core_foundation.StringRef, attachmentModeOut: ?*AttachmentMode) callconv(.C) core_foundation.TypeRef;
pub const getAttachment = CMGetAttachment;

extern "CoreMedia" fn CMRemoveAttachment(target: AttachmentBearerRef, key: core_foundation.StringRef) callconv(.C) void;
pub const removeAttachment = CMRemoveAttachment;

extern "CoreMedia" fn CMRemoveAllAttachments(target: AttachmentBearerRef) callconv(.C) void;
pub const removeAllAttachments = CMRemoveAllAttachments;

extern "CoreMedia" fn CMCopyDictionaryOfAttachments(allocator: core_foundation.AllocatorRef, target: AttachmentBearerRef, attachmentMode: AttachmentMode) callconv(.C) core_foundation.DictionaryRef;
pub const copyDictionaryOfAttachments = CMCopyDictionaryOfAttachments;

extern "CoreMedia" fn CMSetAttachments(target: AttachmentBearerRef, theAttachments: core_foundation.DictionaryRef, attachmentMode: AttachmentMode) callconv(.C) void;
pub const setAttachments = CMSetAttachments;

extern "CoreMedia" fn CMPropagateAttachments(source: AttachmentBearerRef, destination: AttachmentBearerRef) callconv(.C) void;
pub const propagateAttachments = CMPropagateAttachments;

pub const BlockBufferFlags = objc.uint32_t;

pub const OpaqueCMBlockBuffer = extern struct {};

pub const BlockBufferRef = OpaqueCMBlockBuffer;

pub const BlockBufferCustomBlockSource = extern struct {
    version: objc.uint32_t,
    AllocateBlock: ?*const fn (?*anyopaque, objc.size_t) callconv(.C) ?*anyopaque,
    FreeBlock: ?*const fn (?*anyopaque, ?*anyopaque, objc.size_t) callconv(.C) void,
    refCon: ?*anyopaque,
};

extern "CoreMedia" fn CMBlockBufferCreateEmpty(
    structureAllocator: core_foundation.AllocatorRef,
    subBlockCapacity: objc.uint32_t,
    flags: BlockBufferFlags,
    blockBufferOut: ?*BlockBufferRef,
) callconv(.C) objc.OSStatus;
pub const blockBufferCreateEmpty = CMBlockBufferCreateEmpty;

extern "CoreMedia" fn CMBlockBufferCreateWithMemoryBlock(
    structureAllocator: core_foundation.AllocatorRef,
    memoryBlock: ?*anyopaque,
    blockLength: objc.size_t,
    blockAllocator: core_foundation.AllocatorRef,
    customBlockSource: ?*const BlockBufferCustomBlockSource,
    offsetToData: objc.size_t,
    dataLength: objc.size_t,
    flags: BlockBufferFlags,
    blockBufferOut: ?*BlockBufferRef,
) callconv(.C) objc.OSStatus;
pub const blockBufferCreateWithMemoryBlock = CMBlockBufferCreateWithMemoryBlock;

extern "CoreMedia" fn CMBlockBufferCreateWithBufferReference(
    structureAllocator: core_foundation.AllocatorRef,
    bufferReference: BlockBufferRef,
    offsetToData: objc.size_t,
    dataLength: objc.size_t,
    flags: BlockBufferFlags,
    blockBufferOut: ?*BlockBufferRef,
) callconv(.C) objc.OSStatus;
pub const blockBufferCreateWithBufferReference = CMBlockBufferCreateWithBufferReference;

extern "CoreMedia" fn CMBlockBufferCreateContiguous(
    structureAllocator: core_foundation.AllocatorRef,
    sourceBuffer: BlockBufferRef,
    blockAllocator: core_foundation.AllocatorRef,
    customBlockSource: ?*const BlockBufferCustomBlockSource,
    offsetToData: objc.size_t,
    dataLength: objc.size_t,
    flags: BlockBufferFlags,
    blockBufferOut: ?*BlockBufferRef,
) callconv(.C) objc.OSStatus;
pub const blockBufferCreateContiguous = CMBlockBufferCreateContiguous;

extern "CoreMedia" fn CMBlockBufferGetTypeID() callconv(.C) core_foundation.TypeID;
pub const blockBufferGetTypeID = CMBlockBufferGetTypeID;

extern "CoreMedia" fn CMBlockBufferAppendMemoryBlock(
    theBuffer: BlockBufferRef,
    memoryBlock: ?*anyopaque,
    blockLength: objc.size_t,
    blockAllocator: core_foundation.AllocatorRef,
    customBlockSource: ?*const BlockBufferCustomBlockSource,
    offsetToData: objc.size_t,
    dataLength: objc.size_t,
    flags: BlockBufferFlags,
) callconv(.C) objc.OSStatus;
pub const blockBufferAppendMemoryBlock = CMBlockBufferAppendMemoryBlock;

extern "CoreMedia" fn CMBlockBufferAppendBufferReference(
    theBuffer: BlockBufferRef,
    targetBBuf: BlockBufferRef,
    offsetToData: objc.size_t,
    dataLength: objc.size_t,
    flags: BlockBufferFlags,
) callconv(.C) objc.OSStatus;
pub const blockBufferAppendBufferReference = CMBlockBufferAppendBufferReference;

extern "CoreMedia" fn CMBlockBufferAssureBlockMemory(theBuffer: BlockBufferRef) callconv(.C) objc.OSStatus;
pub const blockBufferAssureBlockMemory = CMBlockBufferAssureBlockMemory;

extern "CoreMedia" fn CMBlockBufferAccessDataBytes(
    theBuffer: BlockBufferRef,
    offset: objc.size_t,
    length: objc.size_t,
    temporaryBlock: ?*anyopaque,
    returnedPointerOut: ?*?*c_char,
) callconv(.C) objc.OSStatus;
pub const blockBufferAccessDataBytes = CMBlockBufferAccessDataBytes;

extern "CoreMedia" fn CMBlockBufferCopyDataBytes(
    theSourceBuffer: BlockBufferRef,
    offsetToData: objc.size_t,
    dataLength: objc.size_t,
    destination: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const blockBufferCopyDataBytes = CMBlockBufferCopyDataBytes;

extern "CoreMedia" fn CMBlockBufferReplaceDataBytes(
    sourceBytes: ?*const anyopaque,
    destinationBuffer: BlockBufferRef,
    offsetIntoDestination: objc.size_t,
    dataLength: objc.size_t,
) callconv(.C) objc.OSStatus;
pub const blockBufferReplaceDataBytes = CMBlockBufferReplaceDataBytes;

extern "CoreMedia" fn CMBlockBufferFillDataBytes(
    fillByte: c_char,
    destinationBuffer: BlockBufferRef,
    offsetIntoDestination: objc.size_t,
    dataLength: objc.size_t,
) callconv(.C) objc.OSStatus;
pub const blockBufferFillDataBytes = CMBlockBufferFillDataBytes;

extern "CoreMedia" fn CMBlockBufferGetDataPointer(
    theBuffer: BlockBufferRef,
    offset: objc.size_t,
    lengthAtOffsetOut: ?*objc.size_t,
    totalLengthOut: ?*objc.size_t,
    dataPointerOut: ?*?*c_char,
) callconv(.C) objc.OSStatus;
pub const blockBufferGetDataPointer = CMBlockBufferGetDataPointer;

extern "CoreMedia" fn CMBlockBufferGetDataLength(theBuffer: BlockBufferRef) callconv(.C) objc.size_t;
pub const blockBufferGetDataLength = CMBlockBufferGetDataLength;

extern "CoreMedia" fn CMBlockBufferIsRangeContiguous(theBuffer: BlockBufferRef, offset: objc.size_t, length: objc.size_t) callconv(.C) objc.Boolean;
pub const blockBufferIsRangeContiguous = CMBlockBufferIsRangeContiguous;

extern "CoreMedia" fn CMBlockBufferIsEmpty(theBuffer: BlockBufferRef) callconv(.C) objc.Boolean;
pub const blockBufferIsEmpty = CMBlockBufferIsEmpty;

pub const ImageDescriptionFlavor = core_foundation.StringRef;

extern "CoreMedia" fn CMVideoFormatDescriptionCreateFromBigEndianImageDescriptionData(
    allocator: core_foundation.AllocatorRef,
    imageDescriptionData: ?*const objc.uint8_t,
    size: objc.size_t,
    stringEncoding: core_foundation.StringEncoding,
    flavor: ImageDescriptionFlavor,
    formatDescriptionOut: ?*VideoFormatDescriptionRef,
) callconv(.C) objc.OSStatus;
pub const videoFormatDescriptionCreateFromBigEndianImageDescriptionData = CMVideoFormatDescriptionCreateFromBigEndianImageDescriptionData;

extern "CoreMedia" fn CMVideoFormatDescriptionCreateFromBigEndianImageDescriptionBlockBuffer(
    allocator: core_foundation.AllocatorRef,
    imageDescriptionBlockBuffer: BlockBufferRef,
    stringEncoding: core_foundation.StringEncoding,
    flavor: ImageDescriptionFlavor,
    formatDescriptionOut: ?*VideoFormatDescriptionRef,
) callconv(.C) objc.OSStatus;
pub const videoFormatDescriptionCreateFromBigEndianImageDescriptionBlockBuffer = CMVideoFormatDescriptionCreateFromBigEndianImageDescriptionBlockBuffer;

extern "CoreMedia" fn CMVideoFormatDescriptionCopyAsBigEndianImageDescriptionBlockBuffer(
    allocator: core_foundation.AllocatorRef,
    videoFormatDescription: VideoFormatDescriptionRef,
    stringEncoding: core_foundation.StringEncoding,
    flavor: ImageDescriptionFlavor,
    blockBufferOut: ?*BlockBufferRef,
) callconv(.C) objc.OSStatus;
pub const videoFormatDescriptionCopyAsBigEndianImageDescriptionBlockBuffer = CMVideoFormatDescriptionCopyAsBigEndianImageDescriptionBlockBuffer;

extern "CoreMedia" fn CMSwapBigEndianImageDescriptionToHost(imageDescriptionData: ?*objc.uint8_t, imageDescriptionSize: objc.size_t) callconv(.C) objc.OSStatus;
pub const swapBigEndianImageDescriptionToHost = CMSwapBigEndianImageDescriptionToHost;

extern "CoreMedia" fn CMSwapHostEndianImageDescriptionToBig(imageDescriptionData: ?*objc.uint8_t, imageDescriptionSize: objc.size_t) callconv(.C) objc.OSStatus;
pub const swapHostEndianImageDescriptionToBig = CMSwapHostEndianImageDescriptionToBig;

pub const SoundDescriptionFlavor = core_foundation.StringRef;

extern "CoreMedia" fn CMAudioFormatDescriptionCreateFromBigEndianSoundDescriptionData(
    allocator: core_foundation.AllocatorRef,
    soundDescriptionData: ?*const objc.uint8_t,
    size: objc.size_t,
    flavor: SoundDescriptionFlavor,
    formatDescriptionOut: ?*AudioFormatDescriptionRef,
) callconv(.C) objc.OSStatus;
pub const audioFormatDescriptionCreateFromBigEndianSoundDescriptionData = CMAudioFormatDescriptionCreateFromBigEndianSoundDescriptionData;

extern "CoreMedia" fn CMAudioFormatDescriptionCreateFromBigEndianSoundDescriptionBlockBuffer(
    allocator: core_foundation.AllocatorRef,
    soundDescriptionBlockBuffer: BlockBufferRef,
    flavor: SoundDescriptionFlavor,
    formatDescriptionOut: ?*AudioFormatDescriptionRef,
) callconv(.C) objc.OSStatus;
pub const audioFormatDescriptionCreateFromBigEndianSoundDescriptionBlockBuffer = CMAudioFormatDescriptionCreateFromBigEndianSoundDescriptionBlockBuffer;

extern "CoreMedia" fn CMAudioFormatDescriptionCopyAsBigEndianSoundDescriptionBlockBuffer(
    allocator: core_foundation.AllocatorRef,
    audioFormatDescription: AudioFormatDescriptionRef,
    flavor: SoundDescriptionFlavor,
    blockBufferOut: ?*BlockBufferRef,
) callconv(.C) objc.OSStatus;
pub const audioFormatDescriptionCopyAsBigEndianSoundDescriptionBlockBuffer = CMAudioFormatDescriptionCopyAsBigEndianSoundDescriptionBlockBuffer;

extern "CoreMedia" fn CMDoesBigEndianSoundDescriptionRequireLegacyCBRSampleTableLayout(soundDescriptionBlockBuffer: BlockBufferRef, flavor: SoundDescriptionFlavor) callconv(.C) objc.Boolean;
pub const doesBigEndianSoundDescriptionRequireLegacyCBRSampleTableLayout = CMDoesBigEndianSoundDescriptionRequireLegacyCBRSampleTableLayout;

extern "CoreMedia" fn CMSwapBigEndianSoundDescriptionToHost(soundDescriptionData: ?*objc.uint8_t, soundDescriptionSize: objc.size_t) callconv(.C) objc.OSStatus;
pub const swapBigEndianSoundDescriptionToHost = CMSwapBigEndianSoundDescriptionToHost;

extern "CoreMedia" fn CMSwapHostEndianSoundDescriptionToBig(soundDescriptionData: ?*objc.uint8_t, soundDescriptionSize: objc.size_t) callconv(.C) objc.OSStatus;
pub const swapHostEndianSoundDescriptionToBig = CMSwapHostEndianSoundDescriptionToBig;

pub const TextDescriptionFlavor = core_foundation.StringRef;

extern "CoreMedia" fn CMTextFormatDescriptionCreateFromBigEndianTextDescriptionData(
    allocator: core_foundation.AllocatorRef,
    textDescriptionData: ?*const objc.uint8_t,
    size: objc.size_t,
    flavor: TextDescriptionFlavor,
    mediaType: MediaType,
    formatDescriptionOut: ?*TextFormatDescriptionRef,
) callconv(.C) objc.OSStatus;
pub const textFormatDescriptionCreateFromBigEndianTextDescriptionData = CMTextFormatDescriptionCreateFromBigEndianTextDescriptionData;

extern "CoreMedia" fn CMTextFormatDescriptionCreateFromBigEndianTextDescriptionBlockBuffer(
    allocator: core_foundation.AllocatorRef,
    textDescriptionBlockBuffer: BlockBufferRef,
    flavor: TextDescriptionFlavor,
    mediaType: MediaType,
    formatDescriptionOut: ?*TextFormatDescriptionRef,
) callconv(.C) objc.OSStatus;
pub const textFormatDescriptionCreateFromBigEndianTextDescriptionBlockBuffer = CMTextFormatDescriptionCreateFromBigEndianTextDescriptionBlockBuffer;

extern "CoreMedia" fn CMTextFormatDescriptionCopyAsBigEndianTextDescriptionBlockBuffer(
    allocator: core_foundation.AllocatorRef,
    textFormatDescription: TextFormatDescriptionRef,
    flavor: TextDescriptionFlavor,
    blockBufferOut: ?*BlockBufferRef,
) callconv(.C) objc.OSStatus;
pub const textFormatDescriptionCopyAsBigEndianTextDescriptionBlockBuffer = CMTextFormatDescriptionCopyAsBigEndianTextDescriptionBlockBuffer;

extern "CoreMedia" fn CMSwapBigEndianTextDescriptionToHost(textDescriptionData: ?*objc.uint8_t, textDescriptionSize: objc.size_t) callconv(.C) objc.OSStatus;
pub const swapBigEndianTextDescriptionToHost = CMSwapBigEndianTextDescriptionToHost;

extern "CoreMedia" fn CMSwapHostEndianTextDescriptionToBig(textDescriptionData: ?*objc.uint8_t, textDescriptionSize: objc.size_t) callconv(.C) objc.OSStatus;
pub const swapHostEndianTextDescriptionToBig = CMSwapHostEndianTextDescriptionToBig;

pub const ClosedCaptionDescriptionFlavor = core_foundation.StringRef;

extern "CoreMedia" fn CMClosedCaptionFormatDescriptionCreateFromBigEndianClosedCaptionDescriptionData(
    allocator: core_foundation.AllocatorRef,
    closedCaptionDescriptionData: ?*const objc.uint8_t,
    size: objc.size_t,
    flavor: ClosedCaptionDescriptionFlavor,
    formatDescriptionOut: ?*ClosedCaptionFormatDescriptionRef,
) callconv(.C) objc.OSStatus;
pub const closedCaptionFormatDescriptionCreateFromBigEndianClosedCaptionDescriptionData = CMClosedCaptionFormatDescriptionCreateFromBigEndianClosedCaptionDescriptionData;

extern "CoreMedia" fn CMClosedCaptionFormatDescriptionCreateFromBigEndianClosedCaptionDescriptionBlockBuffer(
    allocator: core_foundation.AllocatorRef,
    closedCaptionDescriptionBlockBuffer: BlockBufferRef,
    flavor: ClosedCaptionDescriptionFlavor,
    formatDescriptionOut: ?*ClosedCaptionFormatDescriptionRef,
) callconv(.C) objc.OSStatus;
pub const closedCaptionFormatDescriptionCreateFromBigEndianClosedCaptionDescriptionBlockBuffer = CMClosedCaptionFormatDescriptionCreateFromBigEndianClosedCaptionDescriptionBlockBuffer;

extern "CoreMedia" fn CMClosedCaptionFormatDescriptionCopyAsBigEndianClosedCaptionDescriptionBlockBuffer(
    allocator: core_foundation.AllocatorRef,
    closedCaptionFormatDescription: ClosedCaptionFormatDescriptionRef,
    flavor: ClosedCaptionDescriptionFlavor,
    blockBufferOut: ?*BlockBufferRef,
) callconv(.C) objc.OSStatus;
pub const closedCaptionFormatDescriptionCopyAsBigEndianClosedCaptionDescriptionBlockBuffer = CMClosedCaptionFormatDescriptionCopyAsBigEndianClosedCaptionDescriptionBlockBuffer;

extern "CoreMedia" fn CMSwapBigEndianClosedCaptionDescriptionToHost(closedCaptionDescriptionData: ?*objc.uint8_t, closedCaptionDescriptionSize: objc.size_t) callconv(.C) objc.OSStatus;
pub const swapBigEndianClosedCaptionDescriptionToHost = CMSwapBigEndianClosedCaptionDescriptionToHost;

extern "CoreMedia" fn CMSwapHostEndianClosedCaptionDescriptionToBig(closedCaptionDescriptionData: ?*objc.uint8_t, closedCaptionDescriptionSize: objc.size_t) callconv(.C) objc.OSStatus;
pub const swapHostEndianClosedCaptionDescriptionToBig = CMSwapHostEndianClosedCaptionDescriptionToBig;

pub const TimeCodeDescriptionFlavor = core_foundation.StringRef;

extern "CoreMedia" fn CMTimeCodeFormatDescriptionCreateFromBigEndianTimeCodeDescriptionData(
    allocator: core_foundation.AllocatorRef,
    timeCodeDescriptionData: ?*const objc.uint8_t,
    size: objc.size_t,
    flavor: TimeCodeDescriptionFlavor,
    formatDescriptionOut: ?*TimeCodeFormatDescriptionRef,
) callconv(.C) objc.OSStatus;
pub const timeCodeFormatDescriptionCreateFromBigEndianTimeCodeDescriptionData = CMTimeCodeFormatDescriptionCreateFromBigEndianTimeCodeDescriptionData;

extern "CoreMedia" fn CMTimeCodeFormatDescriptionCreateFromBigEndianTimeCodeDescriptionBlockBuffer(
    allocator: core_foundation.AllocatorRef,
    timeCodeDescriptionBlockBuffer: BlockBufferRef,
    flavor: TimeCodeDescriptionFlavor,
    formatDescriptionOut: ?*TimeCodeFormatDescriptionRef,
) callconv(.C) objc.OSStatus;
pub const timeCodeFormatDescriptionCreateFromBigEndianTimeCodeDescriptionBlockBuffer = CMTimeCodeFormatDescriptionCreateFromBigEndianTimeCodeDescriptionBlockBuffer;

extern "CoreMedia" fn CMTimeCodeFormatDescriptionCopyAsBigEndianTimeCodeDescriptionBlockBuffer(
    allocator: core_foundation.AllocatorRef,
    timeCodeFormatDescription: TimeCodeFormatDescriptionRef,
    flavor: TimeCodeDescriptionFlavor,
    blockBufferOut: ?*BlockBufferRef,
) callconv(.C) objc.OSStatus;
pub const timeCodeFormatDescriptionCopyAsBigEndianTimeCodeDescriptionBlockBuffer = CMTimeCodeFormatDescriptionCopyAsBigEndianTimeCodeDescriptionBlockBuffer;

extern "CoreMedia" fn CMSwapBigEndianTimeCodeDescriptionToHost(timeCodeDescriptionData: ?*objc.uint8_t, timeCodeDescriptionSize: objc.size_t) callconv(.C) objc.OSStatus;
pub const swapBigEndianTimeCodeDescriptionToHost = CMSwapBigEndianTimeCodeDescriptionToHost;

extern "CoreMedia" fn CMSwapHostEndianTimeCodeDescriptionToBig(timeCodeDescriptionData: ?*objc.uint8_t, timeCodeDescriptionSize: objc.size_t) callconv(.C) objc.OSStatus;
pub const swapHostEndianTimeCodeDescriptionToBig = CMSwapHostEndianTimeCodeDescriptionToBig;

pub const MetadataDescriptionFlavor = core_foundation.StringRef;

extern "CoreMedia" fn CMMetadataFormatDescriptionCreateFromBigEndianMetadataDescriptionData(
    allocator: core_foundation.AllocatorRef,
    metadataDescriptionData: ?*const objc.uint8_t,
    size: objc.size_t,
    flavor: MetadataDescriptionFlavor,
    formatDescriptionOut: ?*MetadataFormatDescriptionRef,
) callconv(.C) objc.OSStatus;
pub const metadataFormatDescriptionCreateFromBigEndianMetadataDescriptionData = CMMetadataFormatDescriptionCreateFromBigEndianMetadataDescriptionData;

extern "CoreMedia" fn CMMetadataFormatDescriptionCreateFromBigEndianMetadataDescriptionBlockBuffer(
    allocator: core_foundation.AllocatorRef,
    metadataDescriptionBlockBuffer: BlockBufferRef,
    flavor: MetadataDescriptionFlavor,
    formatDescriptionOut: ?*MetadataFormatDescriptionRef,
) callconv(.C) objc.OSStatus;
pub const metadataFormatDescriptionCreateFromBigEndianMetadataDescriptionBlockBuffer = CMMetadataFormatDescriptionCreateFromBigEndianMetadataDescriptionBlockBuffer;

extern "CoreMedia" fn CMMetadataFormatDescriptionCopyAsBigEndianMetadataDescriptionBlockBuffer(
    allocator: core_foundation.AllocatorRef,
    metadataFormatDescription: MetadataFormatDescriptionRef,
    flavor: MetadataDescriptionFlavor,
    blockBufferOut: ?*BlockBufferRef,
) callconv(.C) objc.OSStatus;
pub const metadataFormatDescriptionCopyAsBigEndianMetadataDescriptionBlockBuffer = CMMetadataFormatDescriptionCopyAsBigEndianMetadataDescriptionBlockBuffer;

extern "CoreMedia" fn CMSwapBigEndianMetadataDescriptionToHost(metadataDescriptionData: ?*objc.uint8_t, metadataDescriptionSize: objc.size_t) callconv(.C) objc.OSStatus;
pub const swapBigEndianMetadataDescriptionToHost = CMSwapBigEndianMetadataDescriptionToHost;

extern "CoreMedia" fn CMSwapHostEndianMetadataDescriptionToBig(metadataDescriptionData: ?*objc.uint8_t, metadataDescriptionSize: objc.size_t) callconv(.C) objc.OSStatus;
pub const swapHostEndianMetadataDescriptionToBig = CMSwapHostEndianMetadataDescriptionToBig;

pub const opaqueCMBufferQueue = extern struct {};

pub const BufferQueueRef = opaqueCMBufferQueue;

pub const BufferRef = core_foundation.TypeRef;

pub const BufferGetTimeCallback = Time;

pub const BufferGetTimeHandler = Time;

pub const BufferGetBooleanCallback = objc.Boolean;

pub const BufferGetBooleanHandler = objc.Boolean;

pub const BufferCompareCallback = core_foundation.ComparisonResult;

pub const BufferCompareHandler = core_foundation.ComparisonResult;

pub const BufferGetSizeCallback = objc.size_t;

pub const BufferGetSizeHandler = objc.size_t;

pub const BufferCallbacks = extern struct {
    version: objc.uint32_t,
    refcon: ?*anyopaque,
    getDecodeTimeStamp: BufferGetTimeCallback,
    getPresentationTimeStamp: BufferGetTimeCallback,
    getDuration: BufferGetTimeCallback,
    isDataReady: BufferGetBooleanCallback,
    compare: BufferCompareCallback,
    dataBecameReadyNotification: core_foundation.StringRef,
    getSize: BufferGetSizeCallback,
};

pub const BufferHandlers = extern struct {
    version: objc.uintptr_t,
    getDecodeTimeStamp: BufferGetTimeHandler,
    getPresentationTimeStamp: BufferGetTimeHandler,
    getDuration: BufferGetTimeHandler,
    isDataReady: BufferGetBooleanHandler,
    compare: BufferCompareHandler,
    dataBecameReadyNotification: core_foundation.StringRef,
    getSize: BufferGetSizeHandler,
};

extern "CoreMedia" fn CMBufferQueueGetCallbacksForUnsortedSampleBuffers() callconv(.C) ?*const BufferCallbacks;
pub const bufferQueueGetCallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers;

extern "CoreMedia" fn CMBufferQueueGetCallbacksForSampleBuffersSortedByOutputPTS() callconv(.C) ?*const BufferCallbacks;
pub const bufferQueueGetCallbacksForSampleBuffersSortedByOutputPTS = CMBufferQueueGetCallbacksForSampleBuffersSortedByOutputPTS;

extern "CoreMedia" fn CMBufferQueueCreate(
    allocator: core_foundation.AllocatorRef,
    capacity: ItemCount,
    callbacks: ?*const BufferCallbacks,
    queueOut: ?*BufferQueueRef,
) callconv(.C) objc.OSStatus;
pub const bufferQueueCreate = CMBufferQueueCreate;

extern "CoreMedia" fn CMBufferQueueCreateWithHandlers(
    allocator: core_foundation.AllocatorRef,
    capacity: ItemCount,
    handlers: ?*const BufferHandlers,
    queueOut: ?*BufferQueueRef,
) callconv(.C) objc.OSStatus;
pub const bufferQueueCreateWithHandlers = CMBufferQueueCreateWithHandlers;

extern "CoreMedia" fn CMBufferQueueGetTypeID() callconv(.C) core_foundation.TypeID;
pub const bufferQueueGetTypeID = CMBufferQueueGetTypeID;

extern "CoreMedia" fn CMBufferQueueEnqueue(queue: BufferQueueRef, buf: BufferRef) callconv(.C) objc.OSStatus;
pub const bufferQueueEnqueue = CMBufferQueueEnqueue;

extern "CoreMedia" fn CMBufferQueueDequeueAndRetain(queue: BufferQueueRef) callconv(.C) BufferRef;
pub const bufferQueueDequeueAndRetain = CMBufferQueueDequeueAndRetain;

extern "CoreMedia" fn CMBufferQueueDequeueIfDataReadyAndRetain(queue: BufferQueueRef) callconv(.C) BufferRef;
pub const bufferQueueDequeueIfDataReadyAndRetain = CMBufferQueueDequeueIfDataReadyAndRetain;

extern "CoreMedia" fn CMBufferQueueGetHead(queue: BufferQueueRef) callconv(.C) BufferRef;
pub const bufferQueueGetHead = CMBufferQueueGetHead;

extern "CoreMedia" fn CMBufferQueueCopyHead(queue: BufferQueueRef) callconv(.C) BufferRef;
pub const bufferQueueCopyHead = CMBufferQueueCopyHead;

extern "CoreMedia" fn CMBufferQueueIsEmpty(queue: BufferQueueRef) callconv(.C) objc.Boolean;
pub const bufferQueueIsEmpty = CMBufferQueueIsEmpty;

extern "CoreMedia" fn CMBufferQueueMarkEndOfData(queue: BufferQueueRef) callconv(.C) objc.OSStatus;
pub const bufferQueueMarkEndOfData = CMBufferQueueMarkEndOfData;

extern "CoreMedia" fn CMBufferQueueContainsEndOfData(queue: BufferQueueRef) callconv(.C) objc.Boolean;
pub const bufferQueueContainsEndOfData = CMBufferQueueContainsEndOfData;

extern "CoreMedia" fn CMBufferQueueIsAtEndOfData(queue: BufferQueueRef) callconv(.C) objc.Boolean;
pub const bufferQueueIsAtEndOfData = CMBufferQueueIsAtEndOfData;

extern "CoreMedia" fn CMBufferQueueReset(queue: BufferQueueRef) callconv(.C) objc.OSStatus;
pub const bufferQueueReset = CMBufferQueueReset;

extern "CoreMedia" fn CMBufferQueueResetWithCallback(queue: BufferQueueRef, callback: ?*const fn (BufferRef, ?*anyopaque) callconv(.C) void, refcon: ?*anyopaque) callconv(.C) objc.OSStatus;
pub const bufferQueueResetWithCallback = CMBufferQueueResetWithCallback;

extern "CoreMedia" fn CMBufferQueueGetBufferCount(queue: BufferQueueRef) callconv(.C) ItemCount;
pub const bufferQueueGetBufferCount = CMBufferQueueGetBufferCount;

extern "CoreMedia" fn CMBufferQueueGetDuration(queue: BufferQueueRef) callconv(.C) Time;
pub const bufferQueueGetDuration = CMBufferQueueGetDuration;

extern "CoreMedia" fn CMBufferQueueGetMinDecodeTimeStamp(queue: BufferQueueRef) callconv(.C) Time;
pub const bufferQueueGetMinDecodeTimeStamp = CMBufferQueueGetMinDecodeTimeStamp;

extern "CoreMedia" fn CMBufferQueueGetFirstDecodeTimeStamp(queue: BufferQueueRef) callconv(.C) Time;
pub const bufferQueueGetFirstDecodeTimeStamp = CMBufferQueueGetFirstDecodeTimeStamp;

extern "CoreMedia" fn CMBufferQueueGetMinPresentationTimeStamp(queue: BufferQueueRef) callconv(.C) Time;
pub const bufferQueueGetMinPresentationTimeStamp = CMBufferQueueGetMinPresentationTimeStamp;

extern "CoreMedia" fn CMBufferQueueGetFirstPresentationTimeStamp(queue: BufferQueueRef) callconv(.C) Time;
pub const bufferQueueGetFirstPresentationTimeStamp = CMBufferQueueGetFirstPresentationTimeStamp;

extern "CoreMedia" fn CMBufferQueueGetMaxPresentationTimeStamp(queue: BufferQueueRef) callconv(.C) Time;
pub const bufferQueueGetMaxPresentationTimeStamp = CMBufferQueueGetMaxPresentationTimeStamp;

extern "CoreMedia" fn CMBufferQueueGetEndPresentationTimeStamp(queue: BufferQueueRef) callconv(.C) Time;
pub const bufferQueueGetEndPresentationTimeStamp = CMBufferQueueGetEndPresentationTimeStamp;

extern "CoreMedia" fn CMBufferQueueGetTotalSize(queue: BufferQueueRef) callconv(.C) objc.size_t;
pub const bufferQueueGetTotalSize = CMBufferQueueGetTotalSize;

pub const opaqueCMBufferQueueTriggerToken = extern struct {};

pub const BufferQueueTriggerToken = opaqueCMBufferQueueTriggerToken;

pub const BufferQueueTriggerCallback = ?*const fn (?*anyopaque, BufferQueueTriggerToken) callconv(.C) void;

pub const BufferQueueTriggerHandler = *const fn (BufferQueueTriggerToken) callconv(.C) void;

pub const BufferQueueTriggerCondition = objc.int32_t;

pub const anon6851 = BufferQueueTriggerCondition;
pub const anon6851_CMBufferQueueTrigger_WhenDurationBecomesLessThan: BufferQueueTriggerCondition = 1;
pub const anon6851_CMBufferQueueTrigger_WhenDurationBecomesLessThanOrEqualTo: BufferQueueTriggerCondition = 2;
pub const anon6851_CMBufferQueueTrigger_WhenDurationBecomesGreaterThan: BufferQueueTriggerCondition = 3;
pub const anon6851_CMBufferQueueTrigger_WhenDurationBecomesGreaterThanOrEqualTo: BufferQueueTriggerCondition = 4;
pub const anon6851_CMBufferQueueTrigger_WhenMinPresentationTimeStampChanges: BufferQueueTriggerCondition = 5;
pub const anon6851_CMBufferQueueTrigger_WhenMaxPresentationTimeStampChanges: BufferQueueTriggerCondition = 6;
pub const anon6851_CMBufferQueueTrigger_WhenDataBecomesReady: BufferQueueTriggerCondition = 7;
pub const anon6851_CMBufferQueueTrigger_WhenEndOfDataReached: BufferQueueTriggerCondition = 8;
pub const anon6851_CMBufferQueueTrigger_WhenReset: BufferQueueTriggerCondition = 9;
pub const anon6851_CMBufferQueueTrigger_WhenBufferCountBecomesLessThan: BufferQueueTriggerCondition = 10;
pub const anon6851_CMBufferQueueTrigger_WhenBufferCountBecomesGreaterThan: BufferQueueTriggerCondition = 11;
pub const anon6851_CMBufferQueueTrigger_WhenDurationBecomesGreaterThanOrEqualToAndBufferCountBecomesGreaterThan: BufferQueueTriggerCondition = 12;

extern "CoreMedia" fn CMBufferQueueInstallTrigger(
    queue: BufferQueueRef,
    callback: BufferQueueTriggerCallback,
    refcon: ?*anyopaque,
    condition: BufferQueueTriggerCondition,
    time: Time,
    triggerTokenOut: ?*BufferQueueTriggerToken,
) callconv(.C) objc.OSStatus;
pub const bufferQueueInstallTrigger = CMBufferQueueInstallTrigger;

extern "CoreMedia" fn CMBufferQueueInstallTriggerWithIntegerThreshold(
    queue: BufferQueueRef,
    callback: BufferQueueTriggerCallback,
    refcon: ?*anyopaque,
    condition: BufferQueueTriggerCondition,
    threshold: ItemCount,
    triggerTokenOut: ?*BufferQueueTriggerToken,
) callconv(.C) objc.OSStatus;
pub const bufferQueueInstallTriggerWithIntegerThreshold = CMBufferQueueInstallTriggerWithIntegerThreshold;

extern "CoreMedia" fn CMBufferQueueInstallTriggerHandler(
    queue: BufferQueueRef,
    condition: BufferQueueTriggerCondition,
    time: Time,
    triggerTokenOut: ?*BufferQueueTriggerToken,
    handler: BufferQueueTriggerHandler,
) callconv(.C) objc.OSStatus;
pub const bufferQueueInstallTriggerHandler = CMBufferQueueInstallTriggerHandler;

extern "CoreMedia" fn CMBufferQueueInstallTriggerHandlerWithIntegerThreshold(
    queue: BufferQueueRef,
    condition: BufferQueueTriggerCondition,
    threshold: ItemCount,
    triggerTokenOut: ?*BufferQueueTriggerToken,
    handler: BufferQueueTriggerHandler,
) callconv(.C) objc.OSStatus;
pub const bufferQueueInstallTriggerHandlerWithIntegerThreshold = CMBufferQueueInstallTriggerHandlerWithIntegerThreshold;

extern "CoreMedia" fn CMBufferQueueRemoveTrigger(queue: BufferQueueRef, triggerToken: BufferQueueTriggerToken) callconv(.C) objc.OSStatus;
pub const bufferQueueRemoveTrigger = CMBufferQueueRemoveTrigger;

extern "CoreMedia" fn CMBufferQueueTestTrigger(queue: BufferQueueRef, triggerToken: BufferQueueTriggerToken) callconv(.C) objc.Boolean;
pub const bufferQueueTestTrigger = CMBufferQueueTestTrigger;

extern "CoreMedia" fn CMBufferQueueCallForEachBuffer(queue: BufferQueueRef, callback: ?*const fn (BufferRef, ?*anyopaque) callconv(.C) objc.OSStatus, refcon: ?*anyopaque) callconv(.C) objc.OSStatus;
pub const bufferQueueCallForEachBuffer = CMBufferQueueCallForEachBuffer;

pub const BufferValidationCallback = objc.OSStatus;

pub const BufferValidationHandler = objc.OSStatus;

extern "CoreMedia" fn CMBufferQueueSetValidationCallback(queue: BufferQueueRef, callback: BufferValidationCallback, refcon: ?*anyopaque) callconv(.C) objc.OSStatus;
pub const bufferQueueSetValidationCallback = CMBufferQueueSetValidationCallback;

extern "CoreMedia" fn CMBufferQueueSetValidationHandler(queue: BufferQueueRef, handler: BufferValidationHandler) callconv(.C) objc.OSStatus;
pub const bufferQueueSetValidationHandler = CMBufferQueueSetValidationHandler;

pub const opaqueCMSampleBuffer = extern struct {};

pub const SampleBufferRef = opaqueCMSampleBuffer;

pub const SampleTimingInfo = extern struct {
    duration: Time,
    presentationTimeStamp: Time,
    decodeTimeStamp: Time,
};

pub const SampleBufferMakeDataReadyCallback = objc.OSStatus;

pub const SampleBufferMakeDataReadyHandler = objc.OSStatus;

extern "CoreMedia" fn CMSampleBufferCreate(
    allocator: core_foundation.AllocatorRef,
    dataBuffer: BlockBufferRef,
    dataReady: objc.Boolean,
    makeDataReadyCallback: SampleBufferMakeDataReadyCallback,
    makeDataReadyRefcon: ?*anyopaque,
    formatDescription: FormatDescriptionRef,
    numSamples: ItemCount,
    numSampleTimingEntries: ItemCount,
    sampleTimingArray: ?*const SampleTimingInfo,
    numSampleSizeEntries: ItemCount,
    sampleSizeArray: ?*const objc.size_t,
    sampleBufferOut: ?*SampleBufferRef,
) callconv(.C) objc.OSStatus;
pub const sampleBufferCreate = CMSampleBufferCreate;

extern "CoreMedia" fn CMSampleBufferCreateWithMakeDataReadyHandler(
    allocator: core_foundation.AllocatorRef,
    dataBuffer: BlockBufferRef,
    dataReady: objc.Boolean,
    formatDescription: FormatDescriptionRef,
    numSamples: ItemCount,
    numSampleTimingEntries: ItemCount,
    sampleTimingArray: ?*const SampleTimingInfo,
    numSampleSizeEntries: ItemCount,
    sampleSizeArray: ?*const objc.size_t,
    sampleBufferOut: ?*SampleBufferRef,
    makeDataReadyHandler: SampleBufferMakeDataReadyHandler,
) callconv(.C) objc.OSStatus;
pub const sampleBufferCreateWithMakeDataReadyHandler = CMSampleBufferCreateWithMakeDataReadyHandler;

extern "CoreMedia" fn CMSampleBufferCreateReady(
    allocator: core_foundation.AllocatorRef,
    dataBuffer: BlockBufferRef,
    formatDescription: FormatDescriptionRef,
    numSamples: ItemCount,
    numSampleTimingEntries: ItemCount,
    sampleTimingArray: ?*const SampleTimingInfo,
    numSampleSizeEntries: ItemCount,
    sampleSizeArray: ?*const objc.size_t,
    sampleBufferOut: ?*SampleBufferRef,
) callconv(.C) objc.OSStatus;
pub const sampleBufferCreateReady = CMSampleBufferCreateReady;

extern "CoreMedia" fn CMAudioSampleBufferCreateWithPacketDescriptions(
    allocator: core_foundation.AllocatorRef,
    dataBuffer: BlockBufferRef,
    dataReady: objc.Boolean,
    makeDataReadyCallback: SampleBufferMakeDataReadyCallback,
    makeDataReadyRefcon: ?*anyopaque,
    formatDescription: FormatDescriptionRef,
    numSamples: ItemCount,
    presentationTimeStamp: Time,
    packetDescriptions: ?*const core_audio_types.StreamPacketDescription,
    sampleBufferOut: ?*SampleBufferRef,
) callconv(.C) objc.OSStatus;
pub const audioSampleBufferCreateWithPacketDescriptions = CMAudioSampleBufferCreateWithPacketDescriptions;

extern "CoreMedia" fn CMAudioSampleBufferCreateWithPacketDescriptionsAndMakeDataReadyHandler(
    allocator: core_foundation.AllocatorRef,
    dataBuffer: BlockBufferRef,
    dataReady: objc.Boolean,
    formatDescription: FormatDescriptionRef,
    numSamples: ItemCount,
    presentationTimeStamp: Time,
    packetDescriptions: ?*const core_audio_types.StreamPacketDescription,
    sampleBufferOut: ?*SampleBufferRef,
    makeDataReadyHandler: SampleBufferMakeDataReadyHandler,
) callconv(.C) objc.OSStatus;
pub const audioSampleBufferCreateWithPacketDescriptionsAndMakeDataReadyHandler = CMAudioSampleBufferCreateWithPacketDescriptionsAndMakeDataReadyHandler;

extern "CoreMedia" fn CMAudioSampleBufferCreateReadyWithPacketDescriptions(
    allocator: core_foundation.AllocatorRef,
    dataBuffer: BlockBufferRef,
    formatDescription: FormatDescriptionRef,
    numSamples: ItemCount,
    presentationTimeStamp: Time,
    packetDescriptions: ?*const core_audio_types.StreamPacketDescription,
    sampleBufferOut: ?*SampleBufferRef,
) callconv(.C) objc.OSStatus;
pub const audioSampleBufferCreateReadyWithPacketDescriptions = CMAudioSampleBufferCreateReadyWithPacketDescriptions;

extern "CoreMedia" fn CMSampleBufferCreateForImageBuffer(
    allocator: core_foundation.AllocatorRef,
    imageBuffer: core_video.ImageBufferRef,
    dataReady: objc.Boolean,
    makeDataReadyCallback: SampleBufferMakeDataReadyCallback,
    makeDataReadyRefcon: ?*anyopaque,
    formatDescription: VideoFormatDescriptionRef,
    sampleTiming: ?*const SampleTimingInfo,
    sampleBufferOut: ?*SampleBufferRef,
) callconv(.C) objc.OSStatus;
pub const sampleBufferCreateForImageBuffer = CMSampleBufferCreateForImageBuffer;

extern "CoreMedia" fn CMSampleBufferCreateForImageBufferWithMakeDataReadyHandler(
    allocator: core_foundation.AllocatorRef,
    imageBuffer: core_video.ImageBufferRef,
    dataReady: objc.Boolean,
    formatDescription: VideoFormatDescriptionRef,
    sampleTiming: ?*const SampleTimingInfo,
    sampleBufferOut: ?*SampleBufferRef,
    makeDataReadyHandler: SampleBufferMakeDataReadyHandler,
) callconv(.C) objc.OSStatus;
pub const sampleBufferCreateForImageBufferWithMakeDataReadyHandler = CMSampleBufferCreateForImageBufferWithMakeDataReadyHandler;

extern "CoreMedia" fn CMSampleBufferCreateReadyWithImageBuffer(
    allocator: core_foundation.AllocatorRef,
    imageBuffer: core_video.ImageBufferRef,
    formatDescription: VideoFormatDescriptionRef,
    sampleTiming: ?*const SampleTimingInfo,
    sampleBufferOut: ?*SampleBufferRef,
) callconv(.C) objc.OSStatus;
pub const sampleBufferCreateReadyWithImageBuffer = CMSampleBufferCreateReadyWithImageBuffer;

extern "CoreMedia" fn CMSampleBufferCreateCopy(allocator: core_foundation.AllocatorRef, sbuf: SampleBufferRef, sampleBufferOut: ?*SampleBufferRef) callconv(.C) objc.OSStatus;
pub const sampleBufferCreateCopy = CMSampleBufferCreateCopy;

extern "CoreMedia" fn CMSampleBufferCreateCopyWithNewTiming(
    allocator: core_foundation.AllocatorRef,
    originalSBuf: SampleBufferRef,
    numSampleTimingEntries: ItemCount,
    sampleTimingArray: ?*const SampleTimingInfo,
    sampleBufferOut: ?*SampleBufferRef,
) callconv(.C) objc.OSStatus;
pub const sampleBufferCreateCopyWithNewTiming = CMSampleBufferCreateCopyWithNewTiming;

extern "CoreMedia" fn CMSampleBufferCopySampleBufferForRange(
    allocator: core_foundation.AllocatorRef,
    sbuf: SampleBufferRef,
    sampleRange: core_foundation.Range,
    sampleBufferOut: ?*SampleBufferRef,
) callconv(.C) objc.OSStatus;
pub const sampleBufferCopySampleBufferForRange = CMSampleBufferCopySampleBufferForRange;

extern "CoreMedia" fn CMSampleBufferGetTypeID() callconv(.C) core_foundation.TypeID;
pub const sampleBufferGetTypeID = CMSampleBufferGetTypeID;

extern "CoreMedia" fn CMSampleBufferSetDataBuffer(sbuf: SampleBufferRef, dataBuffer: BlockBufferRef) callconv(.C) objc.OSStatus;
pub const sampleBufferSetDataBuffer = CMSampleBufferSetDataBuffer;

extern "CoreMedia" fn CMSampleBufferGetDataBuffer(sbuf: SampleBufferRef) callconv(.C) BlockBufferRef;
pub const sampleBufferGetDataBuffer = CMSampleBufferGetDataBuffer;

extern "CoreMedia" fn CMSampleBufferGetImageBuffer(sbuf: SampleBufferRef) callconv(.C) core_video.ImageBufferRef;
pub const sampleBufferGetImageBuffer = CMSampleBufferGetImageBuffer;

extern "CoreMedia" fn CMSampleBufferSetDataBufferFromAudioBufferList(
    sbuf: SampleBufferRef,
    blockBufferStructureAllocator: core_foundation.AllocatorRef,
    blockBufferBlockAllocator: core_foundation.AllocatorRef,
    flags: objc.uint32_t,
    bufferList: ?*const core_audio_types.BufferList,
) callconv(.C) objc.OSStatus;
pub const sampleBufferSetDataBufferFromAudioBufferList = CMSampleBufferSetDataBufferFromAudioBufferList;

extern "CoreMedia" fn CMSampleBufferGetAudioBufferListWithRetainedBlockBuffer(
    sbuf: SampleBufferRef,
    bufferListSizeNeededOut: ?*objc.size_t,
    bufferListOut: ?*core_audio_types.BufferList,
    bufferListSize: objc.size_t,
    blockBufferStructureAllocator: core_foundation.AllocatorRef,
    blockBufferBlockAllocator: core_foundation.AllocatorRef,
    flags: objc.uint32_t,
    blockBufferOut: ?*BlockBufferRef,
) callconv(.C) objc.OSStatus;
pub const sampleBufferGetAudioBufferListWithRetainedBlockBuffer = CMSampleBufferGetAudioBufferListWithRetainedBlockBuffer;

extern "CoreMedia" fn CMSampleBufferGetAudioStreamPacketDescriptions(
    sbuf: SampleBufferRef,
    packetDescriptionsSize: objc.size_t,
    packetDescriptionsOut: ?*core_audio_types.StreamPacketDescription,
    packetDescriptionsSizeNeededOut: ?*objc.size_t,
) callconv(.C) objc.OSStatus;
pub const sampleBufferGetAudioStreamPacketDescriptions = CMSampleBufferGetAudioStreamPacketDescriptions;

extern "CoreMedia" fn CMSampleBufferGetAudioStreamPacketDescriptionsPtr(sbuf: SampleBufferRef, packetDescriptionsPointerOut: ?*?*const core_audio_types.StreamPacketDescription, packetDescriptionsSizeOut: ?*objc.size_t) callconv(.C) objc.OSStatus;
pub const sampleBufferGetAudioStreamPacketDescriptionsPtr = CMSampleBufferGetAudioStreamPacketDescriptionsPtr;

extern "CoreMedia" fn CMSampleBufferCopyPCMDataIntoAudioBufferList(
    sbuf: SampleBufferRef,
    frameOffset: objc.int32_t,
    numFrames: objc.int32_t,
    bufferList: ?*core_audio_types.BufferList,
) callconv(.C) objc.OSStatus;
pub const sampleBufferCopyPCMDataIntoAudioBufferList = CMSampleBufferCopyPCMDataIntoAudioBufferList;

extern "CoreMedia" fn CMSampleBufferSetDataReady(sbuf: SampleBufferRef) callconv(.C) objc.OSStatus;
pub const sampleBufferSetDataReady = CMSampleBufferSetDataReady;

extern "CoreMedia" fn CMSampleBufferDataIsReady(sbuf: SampleBufferRef) callconv(.C) objc.Boolean;
pub const sampleBufferDataIsReady = CMSampleBufferDataIsReady;

extern "CoreMedia" fn CMSampleBufferSetDataFailed(sbuf: SampleBufferRef, status: objc.OSStatus) callconv(.C) objc.OSStatus;
pub const sampleBufferSetDataFailed = CMSampleBufferSetDataFailed;

extern "CoreMedia" fn CMSampleBufferHasDataFailed(sbuf: SampleBufferRef, statusOut: ?*objc.OSStatus) callconv(.C) objc.Boolean;
pub const sampleBufferHasDataFailed = CMSampleBufferHasDataFailed;

extern "CoreMedia" fn CMSampleBufferMakeDataReady(sbuf: SampleBufferRef) callconv(.C) objc.OSStatus;
pub const sampleBufferMakeDataReady = CMSampleBufferMakeDataReady;

extern "CoreMedia" fn CMSampleBufferTrackDataReadiness(sbuf: SampleBufferRef, sampleBufferToTrack: SampleBufferRef) callconv(.C) objc.OSStatus;
pub const sampleBufferTrackDataReadiness = CMSampleBufferTrackDataReadiness;

extern "CoreMedia" fn CMSampleBufferInvalidate(sbuf: SampleBufferRef) callconv(.C) objc.OSStatus;
pub const sampleBufferInvalidate = CMSampleBufferInvalidate;

pub const SampleBufferInvalidateCallback = ?*const fn (SampleBufferRef, objc.uint64_t) callconv(.C) void;

extern "CoreMedia" fn CMSampleBufferSetInvalidateCallback(sbuf: SampleBufferRef, invalidateCallback: SampleBufferInvalidateCallback, invalidateRefCon: objc.uint64_t) callconv(.C) objc.OSStatus;
pub const sampleBufferSetInvalidateCallback = CMSampleBufferSetInvalidateCallback;

pub const SampleBufferInvalidateHandler = *const fn (SampleBufferRef) callconv(.C) void;

extern "CoreMedia" fn CMSampleBufferSetInvalidateHandler(sbuf: SampleBufferRef, invalidateHandler: SampleBufferInvalidateHandler) callconv(.C) objc.OSStatus;
pub const sampleBufferSetInvalidateHandler = CMSampleBufferSetInvalidateHandler;

extern "CoreMedia" fn CMSampleBufferIsValid(sbuf: SampleBufferRef) callconv(.C) objc.Boolean;
pub const sampleBufferIsValid = CMSampleBufferIsValid;

extern "CoreMedia" fn CMSampleBufferGetNumSamples(sbuf: SampleBufferRef) callconv(.C) ItemCount;
pub const sampleBufferGetNumSamples = CMSampleBufferGetNumSamples;

extern "CoreMedia" fn CMSampleBufferGetDuration(sbuf: SampleBufferRef) callconv(.C) Time;
pub const sampleBufferGetDuration = CMSampleBufferGetDuration;

extern "CoreMedia" fn CMSampleBufferGetPresentationTimeStamp(sbuf: SampleBufferRef) callconv(.C) Time;
pub const sampleBufferGetPresentationTimeStamp = CMSampleBufferGetPresentationTimeStamp;

extern "CoreMedia" fn CMSampleBufferGetDecodeTimeStamp(sbuf: SampleBufferRef) callconv(.C) Time;
pub const sampleBufferGetDecodeTimeStamp = CMSampleBufferGetDecodeTimeStamp;

extern "CoreMedia" fn CMSampleBufferGetOutputDuration(sbuf: SampleBufferRef) callconv(.C) Time;
pub const sampleBufferGetOutputDuration = CMSampleBufferGetOutputDuration;

extern "CoreMedia" fn CMSampleBufferGetOutputPresentationTimeStamp(sbuf: SampleBufferRef) callconv(.C) Time;
pub const sampleBufferGetOutputPresentationTimeStamp = CMSampleBufferGetOutputPresentationTimeStamp;

extern "CoreMedia" fn CMSampleBufferSetOutputPresentationTimeStamp(sbuf: SampleBufferRef, outputPresentationTimeStamp: Time) callconv(.C) objc.OSStatus;
pub const sampleBufferSetOutputPresentationTimeStamp = CMSampleBufferSetOutputPresentationTimeStamp;

extern "CoreMedia" fn CMSampleBufferGetOutputDecodeTimeStamp(sbuf: SampleBufferRef) callconv(.C) Time;
pub const sampleBufferGetOutputDecodeTimeStamp = CMSampleBufferGetOutputDecodeTimeStamp;

extern "CoreMedia" fn CMSampleBufferGetSampleTimingInfoArray(
    sbuf: SampleBufferRef,
    numSampleTimingEntries: ItemCount,
    timingArrayOut: ?*SampleTimingInfo,
    timingArrayEntriesNeededOut: ?*ItemCount,
) callconv(.C) objc.OSStatus;
pub const sampleBufferGetSampleTimingInfoArray = CMSampleBufferGetSampleTimingInfoArray;

extern "CoreMedia" fn CMSampleBufferGetOutputSampleTimingInfoArray(
    sbuf: SampleBufferRef,
    timingArrayEntries: ItemCount,
    timingArrayOut: ?*SampleTimingInfo,
    timingArrayEntriesNeededOut: ?*ItemCount,
) callconv(.C) objc.OSStatus;
pub const sampleBufferGetOutputSampleTimingInfoArray = CMSampleBufferGetOutputSampleTimingInfoArray;

extern "CoreMedia" fn CMSampleBufferGetSampleTimingInfo(sbuf: SampleBufferRef, sampleIndex: ItemIndex, timingInfoOut: ?*SampleTimingInfo) callconv(.C) objc.OSStatus;
pub const sampleBufferGetSampleTimingInfo = CMSampleBufferGetSampleTimingInfo;

extern "CoreMedia" fn CMSampleBufferGetSampleSizeArray(
    sbuf: SampleBufferRef,
    sizeArrayEntries: ItemCount,
    sizeArrayOut: ?*objc.size_t,
    sizeArrayEntriesNeededOut: ?*ItemCount,
) callconv(.C) objc.OSStatus;
pub const sampleBufferGetSampleSizeArray = CMSampleBufferGetSampleSizeArray;

extern "CoreMedia" fn CMSampleBufferGetSampleSize(sbuf: SampleBufferRef, sampleIndex: ItemIndex) callconv(.C) objc.size_t;
pub const sampleBufferGetSampleSize = CMSampleBufferGetSampleSize;

extern "CoreMedia" fn CMSampleBufferGetTotalSampleSize(sbuf: SampleBufferRef) callconv(.C) objc.size_t;
pub const sampleBufferGetTotalSampleSize = CMSampleBufferGetTotalSampleSize;

extern "CoreMedia" fn CMSampleBufferGetFormatDescription(sbuf: SampleBufferRef) callconv(.C) FormatDescriptionRef;
pub const sampleBufferGetFormatDescription = CMSampleBufferGetFormatDescription;

extern "CoreMedia" fn CMSampleBufferGetSampleAttachmentsArray(sbuf: SampleBufferRef, createIfNecessary: objc.Boolean) callconv(.C) core_foundation.ArrayRef;
pub const sampleBufferGetSampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray;

extern "CoreMedia" fn CMSampleBufferCallForEachSample(sbuf: SampleBufferRef, callback: ?*const fn (SampleBufferRef, ItemCount, ?*anyopaque) callconv(.C) objc.OSStatus, refcon: ?*anyopaque) callconv(.C) objc.OSStatus;
pub const sampleBufferCallForEachSample = CMSampleBufferCallForEachSample;

extern "CoreMedia" fn CMSampleBufferCallBlockForEachSample(sbuf: SampleBufferRef, handler: *const fn (SampleBufferRef, ItemCount) callconv(.C) objc.OSStatus) callconv(.C) objc.OSStatus;
pub const sampleBufferCallBlockForEachSample = CMSampleBufferCallBlockForEachSample;

pub const TagError = objc.OSStatus;
pub const TagError__ParamErr: objc.OSStatus = -15730;
pub const TagError__AllocationFailed: objc.OSStatus = -15731;

pub const TagCategory = objc.FourCharCode;
pub const TagCategory__Undefined: objc.FourCharCode = 0;
pub const TagCategory__MediaType: objc.FourCharCode = 1835297121;
pub const TagCategory__MediaSubType: objc.FourCharCode = 1836283234;
pub const TagCategory__TrackID: objc.FourCharCode = 1953653099;
pub const TagCategory__ChannelID: objc.FourCharCode = 1986226286;
pub const TagCategory__VideoLayerID: objc.FourCharCode = 1986814329;
pub const TagCategory__PixelFormat: objc.FourCharCode = 1885960294;
pub const TagCategory__PackingType: objc.FourCharCode = 1885430635;
pub const TagCategory__ProjectionType: objc.FourCharCode = 1886547818;
pub const TagCategory__StereoView: objc.FourCharCode = 1702454643;
pub const TagCategory__StereoViewInterpretation: objc.FourCharCode = 1702455664;

pub const TagDataType = objc.uint32_t;
pub const TagDataType__Invalid: objc.uint32_t = 0;
pub const TagDataType__SInt64: objc.uint32_t = 2;
pub const TagDataType__Float64: objc.uint32_t = 3;
pub const TagDataType__OSType: objc.uint32_t = 5;
pub const TagDataType__Flags: objc.uint32_t = 7;

pub const TagValue = objc.uint64_t;

pub const Tag = extern struct {
    category: TagCategory,
    dataType: TagDataType,
    value: TagValue,
};

extern "CoreMedia" fn CMTagGetValueDataType(tag: Tag) callconv(.C) TagDataType;
pub const tagGetValueDataType = CMTagGetValueDataType;

pub const StereoViewComponents = objc.uint64_t;
pub const StereoViewComponents_View_None: objc.uint64_t = 0;
pub const StereoViewComponents_View_LeftEye: objc.uint64_t = 1;
pub const StereoViewComponents_View_RightEye: objc.uint64_t = 2;

pub const StereoViewInterpretationOptions = objc.uint64_t;
pub const StereoViewInterpretationOptions_Interpretation_Default: objc.uint64_t = 0;
pub const StereoViewInterpretationOptions_Interpretation_StereoOrderReversed: objc.uint64_t = 1;
pub const StereoViewInterpretationOptions_Interpretation_AdditionalViews: objc.uint64_t = 2;

pub const ProjectionType = objc.uint64_t;
pub const ProjectionType__Rectangular: objc.uint64_t = 1919247220;
pub const ProjectionType__Equirectangular: objc.uint64_t = 1701934441;
pub const ProjectionType__HalfEquirectangular: objc.uint64_t = 1751478645;
pub const ProjectionType__Fisheye: objc.uint64_t = 1718186856;

pub const PackingType = objc.uint64_t;
pub const PackingType__None: objc.uint64_t = 1852796517;
pub const PackingType__SideBySide: objc.uint64_t = 1936286821;
pub const PackingType__OverUnder: objc.uint64_t = 1870030194;

extern "CoreMedia" fn CMTagHasSInt64Value(tag: Tag) callconv(.C) objc.Boolean;
pub const tagHasSInt64Value = CMTagHasSInt64Value;

extern "CoreMedia" fn CMTagGetSInt64Value(tag: Tag) callconv(.C) objc.int64_t;
pub const tagGetSInt64Value = CMTagGetSInt64Value;

extern "CoreMedia" fn CMTagHasFloat64Value(tag: Tag) callconv(.C) objc.Boolean;
pub const tagHasFloat64Value = CMTagHasFloat64Value;

extern "CoreMedia" fn CMTagGetFloat64Value(tag: Tag) callconv(.C) objc.Float64;
pub const tagGetFloat64Value = CMTagGetFloat64Value;

extern "CoreMedia" fn CMTagHasOSTypeValue(tag: Tag) callconv(.C) objc.Boolean;
pub const tagHasOSTypeValue = CMTagHasOSTypeValue;

extern "CoreMedia" fn CMTagGetOSTypeValue(tag: Tag) callconv(.C) objc.OSType;
pub const tagGetOSTypeValue = CMTagGetOSTypeValue;

extern "CoreMedia" fn CMTagHasFlagsValue(tag: Tag) callconv(.C) objc.Boolean;
pub const tagHasFlagsValue = CMTagHasFlagsValue;

extern "CoreMedia" fn CMTagGetFlagsValue(tag: Tag) callconv(.C) objc.uint64_t;
pub const tagGetFlagsValue = CMTagGetFlagsValue;

extern "CoreMedia" fn CMTagMakeWithSInt64Value(category: TagCategory, value: objc.int64_t) callconv(.C) Tag;
pub const tagMakeWithSInt64Value = CMTagMakeWithSInt64Value;

extern "CoreMedia" fn CMTagMakeWithFloat64Value(category: TagCategory, value: objc.Float64) callconv(.C) Tag;
pub const tagMakeWithFloat64Value = CMTagMakeWithFloat64Value;

extern "CoreMedia" fn CMTagMakeWithOSTypeValue(category: TagCategory, value: objc.OSType) callconv(.C) Tag;
pub const tagMakeWithOSTypeValue = CMTagMakeWithOSTypeValue;

extern "CoreMedia" fn CMTagMakeWithFlagsValue(category: TagCategory, flagsForTag: objc.uint64_t) callconv(.C) Tag;
pub const tagMakeWithFlagsValue = CMTagMakeWithFlagsValue;

extern "CoreMedia" fn CMTagEqualToTag(tag1: Tag, tag2: Tag) callconv(.C) objc.Boolean;
pub const tagEqualToTag = CMTagEqualToTag;

extern "CoreMedia" fn CMTagCompare(tag1: Tag, tag2: Tag) callconv(.C) core_foundation.ComparisonResult;
pub const tagCompare = CMTagCompare;

extern "CoreMedia" fn CMTagHash(tag: Tag) callconv(.C) core_foundation.HashCode;
pub const tagHash = CMTagHash;

extern "CoreMedia" fn CMTagCopyDescription(allocator: core_foundation.AllocatorRef, tag: Tag) callconv(.C) core_foundation.StringRef;
pub const tagCopyDescription = CMTagCopyDescription;

extern "CoreMedia" fn CMTagCopyAsDictionary(tag: Tag, allocator: core_foundation.AllocatorRef) callconv(.C) core_foundation.DictionaryRef;
pub const tagCopyAsDictionary = CMTagCopyAsDictionary;

extern "CoreMedia" fn CMTagMakeFromDictionary(dict: core_foundation.DictionaryRef) callconv(.C) Tag;
pub const tagMakeFromDictionary = CMTagMakeFromDictionary;

pub const TagCollectionError = objc.OSStatus;
pub const TagCollectionError__ParamErr: objc.OSStatus = -15740;
pub const TagCollectionError__AllocationFailed: objc.OSStatus = -15741;
pub const TagCollectionError__InternalError: objc.OSStatus = -15742;
pub const TagCollectionError__InvalidTag: objc.OSStatus = -15743;
pub const TagCollectionError__InvalidTagCollectionDictionary: objc.OSStatus = -15744;
pub const TagCollectionError__InvalidTagCollectionData: objc.OSStatus = -15745;
pub const TagCollectionError__TagNotFound: objc.OSStatus = -15746;
pub const TagCollectionError__InvalidTagCollectionDataVersion: objc.OSStatus = -15747;
pub const TagCollectionError__ExhaustedBufferSize: objc.OSStatus = -15748;
pub const TagCollectionError__NotYetImplemented: objc.OSStatus = -15749;

pub const OpaqueCMTagCollection = extern struct {};

pub const TagCollectionRef = OpaqueCMTagCollection;

pub const MutableTagCollectionRef = OpaqueCMTagCollection;

extern "CoreMedia" fn CMTagCollectionGetTypeID() callconv(.C) core_foundation.TypeID;
pub const tagCollectionGetTypeID = CMTagCollectionGetTypeID;

pub const TagCollectionApplierFunction = ?*const fn (Tag, ?*anyopaque) callconv(.C) void;

pub const TagCollectionTagFilterFunction = objc.Boolean;

extern "CoreMedia" fn CMTagCollectionCreate(
    allocator: core_foundation.AllocatorRef,
    tags: ?*const Tag,
    tagCount: ItemCount,
    newCollectionOut: ?*TagCollectionRef,
) callconv(.C) objc.OSStatus;
pub const tagCollectionCreate = CMTagCollectionCreate;

extern "CoreMedia" fn CMTagCollectionCreateMutable(allocator: core_foundation.AllocatorRef, capacity: core_foundation.Index, newMutableCollectionOut: ?*MutableTagCollectionRef) callconv(.C) objc.OSStatus;
pub const tagCollectionCreateMutable = CMTagCollectionCreateMutable;

extern "CoreMedia" fn CMTagCollectionCreateCopy(tagCollection: TagCollectionRef, allocator: core_foundation.AllocatorRef, newCollectionCopyOut: ?*TagCollectionRef) callconv(.C) objc.OSStatus;
pub const tagCollectionCreateCopy = CMTagCollectionCreateCopy;

extern "CoreMedia" fn CMTagCollectionCreateMutableCopy(tagCollection: TagCollectionRef, allocator: core_foundation.AllocatorRef, newMutableCollectionCopyOut: ?*MutableTagCollectionRef) callconv(.C) objc.OSStatus;
pub const tagCollectionCreateMutableCopy = CMTagCollectionCreateMutableCopy;

extern "CoreMedia" fn CMTagCollectionCopyDescription(allocator: core_foundation.AllocatorRef, tagCollection: TagCollectionRef) callconv(.C) core_foundation.StringRef;
pub const tagCollectionCopyDescription = CMTagCollectionCopyDescription;

extern "CoreMedia" fn CMTagCollectionGetCount(tagCollection: TagCollectionRef) callconv(.C) ItemCount;
pub const tagCollectionGetCount = CMTagCollectionGetCount;

extern "CoreMedia" fn CMTagCollectionContainsTag(tagCollection: TagCollectionRef, tag: Tag) callconv(.C) objc.Boolean;
pub const tagCollectionContainsTag = CMTagCollectionContainsTag;

extern "CoreMedia" fn CMTagCollectionContainsTagsOfCollection(tagCollection: TagCollectionRef, containedTagCollection: TagCollectionRef) callconv(.C) objc.Boolean;
pub const tagCollectionContainsTagsOfCollection = CMTagCollectionContainsTagsOfCollection;

extern "CoreMedia" fn CMTagCollectionContainsSpecifiedTags(tagCollection: TagCollectionRef, containedTags: ?*const Tag, containedTagCount: ItemCount) callconv(.C) objc.Boolean;
pub const tagCollectionContainsSpecifiedTags = CMTagCollectionContainsSpecifiedTags;

extern "CoreMedia" fn CMTagCollectionContainsCategory(tagCollection: TagCollectionRef, category: TagCategory) callconv(.C) objc.Boolean;
pub const tagCollectionContainsCategory = CMTagCollectionContainsCategory;

extern "CoreMedia" fn CMTagCollectionGetCountOfCategory(tagCollection: TagCollectionRef, category: TagCategory) callconv(.C) ItemCount;
pub const tagCollectionGetCountOfCategory = CMTagCollectionGetCountOfCategory;

extern "CoreMedia" fn CMTagCollectionGetTags(
    tagCollection: TagCollectionRef,
    tagBuffer: ?*Tag,
    tagBufferCount: ItemCount,
    numberOfTagsCopied: ?*ItemCount,
) callconv(.C) objc.OSStatus;
pub const tagCollectionGetTags = CMTagCollectionGetTags;

extern "CoreMedia" fn CMTagCollectionGetTagsWithCategory(
    tagCollection: TagCollectionRef,
    category: TagCategory,
    tagBuffer: ?*Tag,
    tagBufferCount: ItemCount,
    numberOfTagsCopied: ?*ItemCount,
) callconv(.C) objc.OSStatus;
pub const tagCollectionGetTagsWithCategory = CMTagCollectionGetTagsWithCategory;

extern "CoreMedia" fn CMTagCollectionCountTagsWithFilterFunction(tagCollection: TagCollectionRef, filterApplier: TagCollectionTagFilterFunction, context: ?*anyopaque) callconv(.C) ItemCount;
pub const tagCollectionCountTagsWithFilterFunction = CMTagCollectionCountTagsWithFilterFunction;

extern "CoreMedia" fn CMTagCollectionGetTagsWithFilterFunction(
    tagCollection: TagCollectionRef,
    tagBuffer: ?*Tag,
    tagBufferCount: ItemCount,
    numberOfTagsCopied: ?*ItemCount,
    filter: TagCollectionTagFilterFunction,
    context: ?*anyopaque,
) callconv(.C) objc.OSStatus;
pub const tagCollectionGetTagsWithFilterFunction = CMTagCollectionGetTagsWithFilterFunction;

extern "CoreMedia" fn CMTagCollectionCopyTagsOfCategories(
    allocator: core_foundation.AllocatorRef,
    tagCollection: TagCollectionRef,
    categories: ?*const TagCategory,
    categoriesCount: ItemCount,
    collectionWithTagsOfCategories: ?*TagCollectionRef,
) callconv(.C) objc.OSStatus;
pub const tagCollectionCopyTagsOfCategories = CMTagCollectionCopyTagsOfCategories;

extern "CoreMedia" fn CMTagCollectionApply(tagCollection: TagCollectionRef, applier: TagCollectionApplierFunction, context: ?*anyopaque) callconv(.C) void;
pub const tagCollectionApply = CMTagCollectionApply;

extern "CoreMedia" fn CMTagCollectionApplyUntil(tagCollection: TagCollectionRef, applier: TagCollectionTagFilterFunction, context: ?*anyopaque) callconv(.C) Tag;
pub const tagCollectionApplyUntil = CMTagCollectionApplyUntil;

extern "CoreMedia" fn CMTagCollectionIsEmpty(tagCollection: TagCollectionRef) callconv(.C) objc.Boolean;
pub const tagCollectionIsEmpty = CMTagCollectionIsEmpty;

extern "CoreMedia" fn CMTagCollectionCreateIntersection(tagCollection1: TagCollectionRef, tagCollection2: TagCollectionRef, tagCollectionOut: ?*TagCollectionRef) callconv(.C) objc.OSStatus;
pub const tagCollectionCreateIntersection = CMTagCollectionCreateIntersection;

extern "CoreMedia" fn CMTagCollectionCreateUnion(tagCollection1: TagCollectionRef, tagCollection2: TagCollectionRef, tagCollectionOut: ?*TagCollectionRef) callconv(.C) objc.OSStatus;
pub const tagCollectionCreateUnion = CMTagCollectionCreateUnion;

extern "CoreMedia" fn CMTagCollectionCreateDifference(tagCollectionMinuend: TagCollectionRef, tagCollectionSubtrahend: TagCollectionRef, tagCollectionOut: ?*TagCollectionRef) callconv(.C) objc.OSStatus;
pub const tagCollectionCreateDifference = CMTagCollectionCreateDifference;

extern "CoreMedia" fn CMTagCollectionCreateExclusiveOr(tagCollection1: TagCollectionRef, tagCollection2: TagCollectionRef, tagCollectionOut: ?*TagCollectionRef) callconv(.C) objc.OSStatus;
pub const tagCollectionCreateExclusiveOr = CMTagCollectionCreateExclusiveOr;

extern "CoreMedia" fn CMTagCollectionAddTag(tagCollection: MutableTagCollectionRef, tagToAdd: Tag) callconv(.C) objc.OSStatus;
pub const tagCollectionAddTag = CMTagCollectionAddTag;

extern "CoreMedia" fn CMTagCollectionRemoveTag(tagCollection: MutableTagCollectionRef, tagToRemove: Tag) callconv(.C) objc.OSStatus;
pub const tagCollectionRemoveTag = CMTagCollectionRemoveTag;

extern "CoreMedia" fn CMTagCollectionRemoveAllTags(tagCollection: MutableTagCollectionRef) callconv(.C) objc.OSStatus;
pub const tagCollectionRemoveAllTags = CMTagCollectionRemoveAllTags;

extern "CoreMedia" fn CMTagCollectionRemoveAllTagsOfCategory(tagCollection: MutableTagCollectionRef, category: TagCategory) callconv(.C) objc.OSStatus;
pub const tagCollectionRemoveAllTagsOfCategory = CMTagCollectionRemoveAllTagsOfCategory;

extern "CoreMedia" fn CMTagCollectionAddTagsFromCollection(tagCollection: MutableTagCollectionRef, collectionWithTagsToAdd: TagCollectionRef) callconv(.C) objc.OSStatus;
pub const tagCollectionAddTagsFromCollection = CMTagCollectionAddTagsFromCollection;

extern "CoreMedia" fn CMTagCollectionAddTagsFromArray(tagCollection: MutableTagCollectionRef, tags: ?*Tag, tagCount: ItemCount) callconv(.C) objc.OSStatus;
pub const tagCollectionAddTagsFromArray = CMTagCollectionAddTagsFromArray;

extern "CoreMedia" fn CMTagCollectionCopyAsDictionary(tagCollection: TagCollectionRef, allocator: core_foundation.AllocatorRef) callconv(.C) core_foundation.DictionaryRef;
pub const tagCollectionCopyAsDictionary = CMTagCollectionCopyAsDictionary;

extern "CoreMedia" fn CMTagCollectionCreateFromDictionary(dict: core_foundation.DictionaryRef, allocator: core_foundation.AllocatorRef, newCollectionOut: ?*TagCollectionRef) callconv(.C) objc.OSStatus;
pub const tagCollectionCreateFromDictionary = CMTagCollectionCreateFromDictionary;

extern "CoreMedia" fn CMTagCollectionCopyAsData(tagCollection: TagCollectionRef, allocator: core_foundation.AllocatorRef) callconv(.C) core_foundation.DataRef;
pub const tagCollectionCopyAsData = CMTagCollectionCopyAsData;

extern "CoreMedia" fn CMTagCollectionCreateFromData(data: core_foundation.DataRef, allocator: core_foundation.AllocatorRef, newCollectionOut: ?*TagCollectionRef) callconv(.C) objc.OSStatus;
pub const tagCollectionCreateFromData = CMTagCollectionCreateFromData;

pub const TaggedBufferGroupError = objc.OSStatus;
pub const TaggedBufferGroupError__ParamErr: objc.OSStatus = -15780;
pub const TaggedBufferGroupError__AllocationFailed: objc.OSStatus = -15781;
pub const TaggedBufferGroupError__InternalError: objc.OSStatus = -15782;

pub const OpaqueCMTaggedBufferGroup = extern struct {};

pub const TaggedBufferGroupRef = OpaqueCMTaggedBufferGroup;

extern "CoreMedia" fn CMTaggedBufferGroupGetTypeID() callconv(.C) core_foundation.TypeID;
pub const taggedBufferGroupGetTypeID = CMTaggedBufferGroupGetTypeID;

extern "CoreMedia" fn CMTaggedBufferGroupCreate(
    allocator: core_foundation.AllocatorRef,
    tagCollections: core_foundation.ArrayRef,
    buffers: core_foundation.ArrayRef,
    groupOut: ?*TaggedBufferGroupRef,
) callconv(.C) objc.OSStatus;
pub const taggedBufferGroupCreate = CMTaggedBufferGroupCreate;

extern "CoreMedia" fn CMTaggedBufferGroupCreateCombined(allocator: core_foundation.AllocatorRef, taggedBufferGroups: core_foundation.ArrayRef, groupOut: ?*TaggedBufferGroupRef) callconv(.C) objc.OSStatus;
pub const taggedBufferGroupCreateCombined = CMTaggedBufferGroupCreateCombined;

extern "CoreMedia" fn CMTaggedBufferGroupGetCount(group: TaggedBufferGroupRef) callconv(.C) ItemCount;
pub const taggedBufferGroupGetCount = CMTaggedBufferGroupGetCount;

extern "CoreMedia" fn CMTaggedBufferGroupGetTagCollectionAtIndex(group: TaggedBufferGroupRef, index: core_foundation.Index) callconv(.C) TagCollectionRef;
pub const taggedBufferGroupGetTagCollectionAtIndex = CMTaggedBufferGroupGetTagCollectionAtIndex;

extern "CoreMedia" fn CMTaggedBufferGroupGetCVPixelBufferAtIndex(group: TaggedBufferGroupRef, index: core_foundation.Index) callconv(.C) core_video.PixelBufferRef;
pub const taggedBufferGroupGetCVPixelBufferAtIndex = CMTaggedBufferGroupGetCVPixelBufferAtIndex;

extern "CoreMedia" fn CMTaggedBufferGroupGetCVPixelBufferForTag(group: TaggedBufferGroupRef, tag: Tag, indexOut: ?*core_foundation.Index) callconv(.C) core_video.PixelBufferRef;
pub const taggedBufferGroupGetCVPixelBufferForTag = CMTaggedBufferGroupGetCVPixelBufferForTag;

extern "CoreMedia" fn CMTaggedBufferGroupGetCVPixelBufferForTagCollection(group: TaggedBufferGroupRef, tagCollection: TagCollectionRef, indexOut: ?*core_foundation.Index) callconv(.C) core_video.PixelBufferRef;
pub const taggedBufferGroupGetCVPixelBufferForTagCollection = CMTaggedBufferGroupGetCVPixelBufferForTagCollection;

extern "CoreMedia" fn CMTaggedBufferGroupGetCMSampleBufferAtIndex(group: TaggedBufferGroupRef, index: core_foundation.Index) callconv(.C) SampleBufferRef;
pub const taggedBufferGroupGetCMSampleBufferAtIndex = CMTaggedBufferGroupGetCMSampleBufferAtIndex;

extern "CoreMedia" fn CMTaggedBufferGroupGetCMSampleBufferForTag(group: TaggedBufferGroupRef, tag: Tag, indexOut: ?*core_foundation.Index) callconv(.C) SampleBufferRef;
pub const taggedBufferGroupGetCMSampleBufferForTag = CMTaggedBufferGroupGetCMSampleBufferForTag;

extern "CoreMedia" fn CMTaggedBufferGroupGetCMSampleBufferForTagCollection(group: TaggedBufferGroupRef, tagCollection: TagCollectionRef, indexOut: ?*core_foundation.Index) callconv(.C) SampleBufferRef;
pub const taggedBufferGroupGetCMSampleBufferForTagCollection = CMTaggedBufferGroupGetCMSampleBufferForTagCollection;

extern "CoreMedia" fn CMTaggedBufferGroupGetNumberOfMatchesForTagCollection(group: TaggedBufferGroupRef, tagCollection: TagCollectionRef) callconv(.C) ItemCount;
pub const taggedBufferGroupGetNumberOfMatchesForTagCollection = CMTaggedBufferGroupGetNumberOfMatchesForTagCollection;

extern "CoreMedia" fn CMTaggedBufferGroupFormatDescriptionCreateForTaggedBufferGroup(allocator: core_foundation.AllocatorRef, taggedBufferGroup: TaggedBufferGroupRef, formatDescriptionOut: ?*TaggedBufferGroupFormatDescriptionRef) callconv(.C) objc.OSStatus;
pub const taggedBufferGroupFormatDescriptionCreateForTaggedBufferGroup = CMTaggedBufferGroupFormatDescriptionCreateForTaggedBufferGroup;

extern "CoreMedia" fn CMTaggedBufferGroupFormatDescriptionMatchesTaggedBufferGroup(desc: TaggedBufferGroupFormatDescriptionRef, taggedBufferGroup: TaggedBufferGroupRef) callconv(.C) objc.Boolean;
pub const taggedBufferGroupFormatDescriptionMatchesTaggedBufferGroup = CMTaggedBufferGroupFormatDescriptionMatchesTaggedBufferGroup;

extern "CoreMedia" fn CMSampleBufferCreateForTaggedBufferGroup(
    allocator: core_foundation.AllocatorRef,
    taggedBufferGroup: TaggedBufferGroupRef,
    sbufPTS: Time,
    sbufDuration: Time,
    formatDescription: TaggedBufferGroupFormatDescriptionRef,
    sBufOut: ?*SampleBufferRef,
) callconv(.C) objc.OSStatus;
pub const sampleBufferCreateForTaggedBufferGroup = CMSampleBufferCreateForTaggedBufferGroup;

extern "CoreMedia" fn CMSampleBufferGetTaggedBufferGroup(sbuf: SampleBufferRef) callconv(.C) TaggedBufferGroupRef;
pub const sampleBufferGetTaggedBufferGroup = CMSampleBufferGetTaggedBufferGroup;

pub const anon581 = objc.OSStatus;
pub const anon581_CMSimpleQueueError_AllocationFailed: objc.OSStatus = -12770;
pub const anon581_CMSimpleQueueError_RequiredParameterMissing: objc.OSStatus = -12771;
pub const anon581_CMSimpleQueueError_ParameterOutOfRange: objc.OSStatus = -12772;
pub const anon581_CMSimpleQueueError_QueueIsFull: objc.OSStatus = -12773;

pub const opaqueCMSimpleQueue = extern struct {};

pub const SimpleQueueRef = opaqueCMSimpleQueue;

extern "CoreMedia" fn CMSimpleQueueGetTypeID() callconv(.C) core_foundation.TypeID;
pub const simpleQueueGetTypeID = CMSimpleQueueGetTypeID;

extern "CoreMedia" fn CMSimpleQueueCreate(allocator: core_foundation.AllocatorRef, capacity: objc.int32_t, queueOut: ?*SimpleQueueRef) callconv(.C) objc.OSStatus;
pub const simpleQueueCreate = CMSimpleQueueCreate;

extern "CoreMedia" fn CMSimpleQueueEnqueue(queue: SimpleQueueRef, element: ?*const anyopaque) callconv(.C) objc.OSStatus;
pub const simpleQueueEnqueue = CMSimpleQueueEnqueue;

extern "CoreMedia" fn CMSimpleQueueDequeue(queue: SimpleQueueRef) callconv(.C) ?*const anyopaque;
pub const simpleQueueDequeue = CMSimpleQueueDequeue;

extern "CoreMedia" fn CMSimpleQueueGetHead(queue: SimpleQueueRef) callconv(.C) ?*const anyopaque;
pub const simpleQueueGetHead = CMSimpleQueueGetHead;

extern "CoreMedia" fn CMSimpleQueueReset(queue: SimpleQueueRef) callconv(.C) objc.OSStatus;
pub const simpleQueueReset = CMSimpleQueueReset;

extern "CoreMedia" fn CMSimpleQueueGetCapacity(queue: SimpleQueueRef) callconv(.C) objc.int32_t;
pub const simpleQueueGetCapacity = CMSimpleQueueGetCapacity;

extern "CoreMedia" fn CMSimpleQueueGetCount(queue: SimpleQueueRef) callconv(.C) objc.int32_t;
pub const simpleQueueGetCount = CMSimpleQueueGetCount;

pub const OpaqueCMMemoryPool = extern struct {};

pub const MemoryPoolRef = OpaqueCMMemoryPool;

extern "CoreMedia" fn CMMemoryPoolGetTypeID() callconv(.C) core_foundation.TypeID;
pub const memoryPoolGetTypeID = CMMemoryPoolGetTypeID;

extern "CoreMedia" fn CMMemoryPoolCreate(options: core_foundation.DictionaryRef) callconv(.C) MemoryPoolRef;
pub const memoryPoolCreate = CMMemoryPoolCreate;

extern "CoreMedia" fn CMMemoryPoolGetAllocator(pool: MemoryPoolRef) callconv(.C) core_foundation.AllocatorRef;
pub const memoryPoolGetAllocator = CMMemoryPoolGetAllocator;

extern "CoreMedia" fn CMMemoryPoolFlush(pool: MemoryPoolRef) callconv(.C) void;
pub const memoryPoolFlush = CMMemoryPoolFlush;

extern "CoreMedia" fn CMMemoryPoolInvalidate(pool: MemoryPoolRef) callconv(.C) void;
pub const memoryPoolInvalidate = CMMemoryPoolInvalidate;

pub const OpaqueCMClock = extern struct {};

pub const ClockRef = OpaqueCMClock;

pub const OpaqueCMTimebase = extern struct {};

pub const TimebaseRef = OpaqueCMTimebase;

pub const ClockOrTimebaseRef = core_foundation.TypeRef;

extern "CoreMedia" fn CMClockGetTypeID() callconv(.C) core_foundation.TypeID;
pub const clockGetTypeID = CMClockGetTypeID;

extern "CoreMedia" fn CMClockGetHostTimeClock() callconv(.C) ClockRef;
pub const clockGetHostTimeClock = CMClockGetHostTimeClock;

extern "CoreMedia" fn CMClockConvertHostTimeToSystemUnits(hostTime: Time) callconv(.C) objc.uint64_t;
pub const clockConvertHostTimeToSystemUnits = CMClockConvertHostTimeToSystemUnits;

extern "CoreMedia" fn CMClockMakeHostTimeFromSystemUnits(hostTime: objc.uint64_t) callconv(.C) Time;
pub const clockMakeHostTimeFromSystemUnits = CMClockMakeHostTimeFromSystemUnits;

extern "CoreMedia" fn CMClockGetTime(clock: ClockRef) callconv(.C) Time;
pub const clockGetTime = CMClockGetTime;

extern "CoreMedia" fn CMClockGetAnchorTime(clock: ClockRef, clockTimeOut: ?*Time, referenceClockTimeOut: ?*Time) callconv(.C) objc.OSStatus;
pub const clockGetAnchorTime = CMClockGetAnchorTime;

extern "CoreMedia" fn CMClockMightDrift(clock: ClockRef, otherClock: ClockRef) callconv(.C) objc.Boolean;
pub const clockMightDrift = CMClockMightDrift;

extern "CoreMedia" fn CMClockInvalidate(clock: ClockRef) callconv(.C) void;
pub const clockInvalidate = CMClockInvalidate;

extern "CoreMedia" fn CMTimebaseGetTypeID() callconv(.C) core_foundation.TypeID;
pub const timebaseGetTypeID = CMTimebaseGetTypeID;

extern "CoreMedia" fn CMTimebaseCreateWithSourceClock(allocator: core_foundation.AllocatorRef, sourceClock: ClockRef, timebaseOut: ?*TimebaseRef) callconv(.C) objc.OSStatus;
pub const timebaseCreateWithSourceClock = CMTimebaseCreateWithSourceClock;

extern "CoreMedia" fn CMTimebaseCreateWithSourceTimebase(allocator: core_foundation.AllocatorRef, sourceTimebase: TimebaseRef, timebaseOut: ?*TimebaseRef) callconv(.C) objc.OSStatus;
pub const timebaseCreateWithSourceTimebase = CMTimebaseCreateWithSourceTimebase;

extern "CoreMedia" fn CMTimebaseCopySourceTimebase(timebase: TimebaseRef) callconv(.C) TimebaseRef;
pub const timebaseCopySourceTimebase = CMTimebaseCopySourceTimebase;

extern "CoreMedia" fn CMTimebaseCopySourceClock(timebase: TimebaseRef) callconv(.C) ClockRef;
pub const timebaseCopySourceClock = CMTimebaseCopySourceClock;

extern "CoreMedia" fn CMTimebaseCopySource(timebase: TimebaseRef) callconv(.C) ClockOrTimebaseRef;
pub const timebaseCopySource = CMTimebaseCopySource;

extern "CoreMedia" fn CMTimebaseCopyUltimateSourceClock(timebase: TimebaseRef) callconv(.C) ClockRef;
pub const timebaseCopyUltimateSourceClock = CMTimebaseCopyUltimateSourceClock;

extern "CoreMedia" fn CMTimebaseGetMasterTimebase(timebase: TimebaseRef) callconv(.C) TimebaseRef;
pub const timebaseGetMasterTimebase = CMTimebaseGetMasterTimebase;

extern "CoreMedia" fn CMTimebaseGetMasterClock(timebase: TimebaseRef) callconv(.C) ClockRef;
pub const timebaseGetMasterClock = CMTimebaseGetMasterClock;

extern "CoreMedia" fn CMTimebaseGetMaster(timebase: TimebaseRef) callconv(.C) ClockOrTimebaseRef;
pub const timebaseGetMaster = CMTimebaseGetMaster;

extern "CoreMedia" fn CMTimebaseGetUltimateMasterClock(timebase: TimebaseRef) callconv(.C) ClockRef;
pub const timebaseGetUltimateMasterClock = CMTimebaseGetUltimateMasterClock;

extern "CoreMedia" fn CMTimebaseSetSourceClock(timebase: TimebaseRef, newSourceClock: ClockRef) callconv(.C) objc.OSStatus;
pub const timebaseSetSourceClock = CMTimebaseSetSourceClock;

extern "CoreMedia" fn CMTimebaseSetSourceTimebase(timebase: TimebaseRef, newSourceTimebase: TimebaseRef) callconv(.C) objc.OSStatus;
pub const timebaseSetSourceTimebase = CMTimebaseSetSourceTimebase;

extern "CoreMedia" fn CMTimebaseGetTime(timebase: TimebaseRef) callconv(.C) Time;
pub const timebaseGetTime = CMTimebaseGetTime;

extern "CoreMedia" fn CMTimebaseGetTimeWithTimeScale(timebase: TimebaseRef, timescale: TimeScale, method: TimeRoundingMethod) callconv(.C) Time;
pub const timebaseGetTimeWithTimeScale = CMTimebaseGetTimeWithTimeScale;

extern "CoreMedia" fn CMTimebaseSetTime(timebase: TimebaseRef, time: Time) callconv(.C) objc.OSStatus;
pub const timebaseSetTime = CMTimebaseSetTime;

extern "CoreMedia" fn CMTimebaseSetAnchorTime(timebase: TimebaseRef, timebaseTime: Time, immediateSourceTime: Time) callconv(.C) objc.OSStatus;
pub const timebaseSetAnchorTime = CMTimebaseSetAnchorTime;

extern "CoreMedia" fn CMTimebaseGetRate(timebase: TimebaseRef) callconv(.C) objc.Float64;
pub const timebaseGetRate = CMTimebaseGetRate;

extern "CoreMedia" fn CMTimebaseGetTimeAndRate(timebase: TimebaseRef, timeOut: ?*Time, rateOut: ?*objc.Float64) callconv(.C) objc.OSStatus;
pub const timebaseGetTimeAndRate = CMTimebaseGetTimeAndRate;

extern "CoreMedia" fn CMTimebaseSetRate(timebase: TimebaseRef, rate: objc.Float64) callconv(.C) objc.OSStatus;
pub const timebaseSetRate = CMTimebaseSetRate;

extern "CoreMedia" fn CMTimebaseSetRateAndAnchorTime(
    timebase: TimebaseRef,
    rate: objc.Float64,
    timebaseTime: Time,
    immediateSourceTime: Time,
) callconv(.C) objc.OSStatus;
pub const timebaseSetRateAndAnchorTime = CMTimebaseSetRateAndAnchorTime;

extern "CoreMedia" fn CMTimebaseGetEffectiveRate(timebase: TimebaseRef) callconv(.C) objc.Float64;
pub const timebaseGetEffectiveRate = CMTimebaseGetEffectiveRate;

extern "CoreMedia" fn CMTimebaseAddTimer(timebase: TimebaseRef, timer: core_foundation.RunLoopTimerRef, runloop: core_foundation.RunLoopRef) callconv(.C) objc.OSStatus;
pub const timebaseAddTimer = CMTimebaseAddTimer;

extern "CoreMedia" fn CMTimebaseRemoveTimer(timebase: TimebaseRef, timer: core_foundation.RunLoopTimerRef) callconv(.C) objc.OSStatus;
pub const timebaseRemoveTimer = CMTimebaseRemoveTimer;

extern "CoreMedia" fn CMTimebaseSetTimerNextFireTime(
    timebase: TimebaseRef,
    timer: core_foundation.RunLoopTimerRef,
    fireTime: Time,
    flags: objc.uint32_t,
) callconv(.C) objc.OSStatus;
pub const timebaseSetTimerNextFireTime = CMTimebaseSetTimerNextFireTime;

extern "CoreMedia" fn CMTimebaseSetTimerToFireImmediately(timebase: TimebaseRef, timer: core_foundation.RunLoopTimerRef) callconv(.C) objc.OSStatus;
pub const timebaseSetTimerToFireImmediately = CMTimebaseSetTimerToFireImmediately;

extern "CoreMedia" fn CMTimebaseAddTimerDispatchSource(timebase: TimebaseRef, timerSource: objc.dispatch_source_t) callconv(.C) objc.OSStatus;
pub const timebaseAddTimerDispatchSource = CMTimebaseAddTimerDispatchSource;

extern "CoreMedia" fn CMTimebaseRemoveTimerDispatchSource(timebase: TimebaseRef, timerSource: objc.dispatch_source_t) callconv(.C) objc.OSStatus;
pub const timebaseRemoveTimerDispatchSource = CMTimebaseRemoveTimerDispatchSource;

extern "CoreMedia" fn CMTimebaseSetTimerDispatchSourceNextFireTime(
    timebase: TimebaseRef,
    timerSource: objc.dispatch_source_t,
    fireTime: Time,
    flags: objc.uint32_t,
) callconv(.C) objc.OSStatus;
pub const timebaseSetTimerDispatchSourceNextFireTime = CMTimebaseSetTimerDispatchSourceNextFireTime;

extern "CoreMedia" fn CMTimebaseSetTimerDispatchSourceToFireImmediately(timebase: TimebaseRef, timerSource: objc.dispatch_source_t) callconv(.C) objc.OSStatus;
pub const timebaseSetTimerDispatchSourceToFireImmediately = CMTimebaseSetTimerDispatchSourceToFireImmediately;

extern "CoreMedia" fn CMSyncGetRelativeRate(ofClockOrTimebase: ClockOrTimebaseRef, relativeToClockOrTimebase: ClockOrTimebaseRef) callconv(.C) objc.Float64;
pub const syncGetRelativeRate = CMSyncGetRelativeRate;

extern "CoreMedia" fn CMSyncGetRelativeRateAndAnchorTime(
    ofClockOrTimebase: ClockOrTimebaseRef,
    relativeToClockOrTimebase: ClockOrTimebaseRef,
    outRelativeRate: ?*objc.Float64,
    outOfClockOrTimebaseAnchorTime: ?*Time,
    outRelativeToClockOrTimebaseAnchorTime: ?*Time,
) callconv(.C) objc.OSStatus;
pub const syncGetRelativeRateAndAnchorTime = CMSyncGetRelativeRateAndAnchorTime;

extern "CoreMedia" fn CMSyncConvertTime(time: Time, fromClockOrTimebase: ClockOrTimebaseRef, toClockOrTimebase: ClockOrTimebaseRef) callconv(.C) Time;
pub const syncConvertTime = CMSyncConvertTime;

extern "CoreMedia" fn CMSyncMightDrift(clockOrTimebase1: ClockOrTimebaseRef, clockOrTimebase2: ClockOrTimebaseRef) callconv(.C) objc.Boolean;
pub const syncMightDrift = CMSyncMightDrift;

extern "CoreMedia" fn CMSyncGetTime(clockOrTimebase: ClockOrTimebaseRef) callconv(.C) Time;
pub const syncGetTime = CMSyncGetTime;

extern "CoreMedia" fn CMTimebaseNotificationBarrier(timebase: TimebaseRef) callconv(.C) objc.OSStatus;
pub const timebaseNotificationBarrier = CMTimebaseNotificationBarrier;

extern "CoreMedia" fn CMMetadataCreateIdentifierForKeyAndKeySpace(
    allocator: core_foundation.AllocatorRef,
    key: core_foundation.TypeRef,
    keySpace: core_foundation.StringRef,
    identifierOut: ?*core_foundation.StringRef,
) callconv(.C) objc.OSStatus;
pub const metadataCreateIdentifierForKeyAndKeySpace = CMMetadataCreateIdentifierForKeyAndKeySpace;

extern "CoreMedia" fn CMMetadataCreateKeyFromIdentifier(allocator: core_foundation.AllocatorRef, identifier: core_foundation.StringRef, keyOut: ?*core_foundation.TypeRef) callconv(.C) objc.OSStatus;
pub const metadataCreateKeyFromIdentifier = CMMetadataCreateKeyFromIdentifier;

extern "CoreMedia" fn CMMetadataCreateKeyFromIdentifierAsCFData(allocator: core_foundation.AllocatorRef, identifier: core_foundation.StringRef, keyOut: ?*core_foundation.DataRef) callconv(.C) objc.OSStatus;
pub const metadataCreateKeyFromIdentifierAsCFData = CMMetadataCreateKeyFromIdentifierAsCFData;

extern "CoreMedia" fn CMMetadataCreateKeySpaceFromIdentifier(allocator: core_foundation.AllocatorRef, identifier: core_foundation.StringRef, keySpaceOut: ?*core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const metadataCreateKeySpaceFromIdentifier = CMMetadataCreateKeySpaceFromIdentifier;

extern "CoreMedia" fn CMMetadataDataTypeRegistryRegisterDataType(dataType: core_foundation.StringRef, description: core_foundation.StringRef, conformingDataTypes: core_foundation.ArrayRef) callconv(.C) objc.OSStatus;
pub const metadataDataTypeRegistryRegisterDataType = CMMetadataDataTypeRegistryRegisterDataType;

extern "CoreMedia" fn CMMetadataDataTypeRegistryDataTypeIsRegistered(dataType: core_foundation.StringRef) callconv(.C) objc.Boolean;
pub const metadataDataTypeRegistryDataTypeIsRegistered = CMMetadataDataTypeRegistryDataTypeIsRegistered;

extern "CoreMedia" fn CMMetadataDataTypeRegistryGetDataTypeDescription(dataType: core_foundation.StringRef) callconv(.C) core_foundation.StringRef;
pub const metadataDataTypeRegistryGetDataTypeDescription = CMMetadataDataTypeRegistryGetDataTypeDescription;

extern "CoreMedia" fn CMMetadataDataTypeRegistryGetConformingDataTypes(dataType: core_foundation.StringRef) callconv(.C) core_foundation.ArrayRef;
pub const metadataDataTypeRegistryGetConformingDataTypes = CMMetadataDataTypeRegistryGetConformingDataTypes;

extern "CoreMedia" fn CMMetadataDataTypeRegistryDataTypeConformsToDataType(dataType: core_foundation.StringRef, conformsToDataType: core_foundation.StringRef) callconv(.C) objc.Boolean;
pub const metadataDataTypeRegistryDataTypeConformsToDataType = CMMetadataDataTypeRegistryDataTypeConformsToDataType;

extern "CoreMedia" fn CMMetadataDataTypeRegistryGetBaseDataTypes() callconv(.C) core_foundation.ArrayRef;
pub const metadataDataTypeRegistryGetBaseDataTypes = CMMetadataDataTypeRegistryGetBaseDataTypes;

extern "CoreMedia" fn CMMetadataDataTypeRegistryDataTypeIsBaseDataType(dataType: core_foundation.StringRef) callconv(.C) objc.Boolean;
pub const metadataDataTypeRegistryDataTypeIsBaseDataType = CMMetadataDataTypeRegistryDataTypeIsBaseDataType;

extern "CoreMedia" fn CMMetadataDataTypeRegistryGetBaseDataTypeForConformingDataType(dataType: core_foundation.StringRef) callconv(.C) core_foundation.StringRef;
pub const metadataDataTypeRegistryGetBaseDataTypeForConformingDataType = CMMetadataDataTypeRegistryGetBaseDataTypeForConformingDataType;

extern "CoreMedia" fn CMAudioClockCreate(allocator: core_foundation.AllocatorRef, clockOut: ?*ClockRef) callconv(.C) objc.OSStatus;
pub const audioClockCreate = CMAudioClockCreate;

extern "CoreMedia" fn CMAudioDeviceClockCreate(allocator: core_foundation.AllocatorRef, deviceUID: core_foundation.StringRef, clockOut: ?*ClockRef) callconv(.C) objc.OSStatus;
pub const audioDeviceClockCreate = CMAudioDeviceClockCreate;

extern "CoreMedia" fn CMAudioDeviceClockCreateFromAudioDeviceID(allocator: core_foundation.AllocatorRef, deviceID: core_audio.DeviceID, clockOut: ?*ClockRef) callconv(.C) objc.OSStatus;
pub const audioDeviceClockCreateFromAudioDeviceID = CMAudioDeviceClockCreateFromAudioDeviceID;

extern "CoreMedia" fn CMAudioDeviceClockSetAudioDeviceUID(clock: ClockRef, deviceUID: core_foundation.StringRef) callconv(.C) objc.OSStatus;
pub const audioDeviceClockSetAudioDeviceUID = CMAudioDeviceClockSetAudioDeviceUID;

extern "CoreMedia" fn CMAudioDeviceClockSetAudioDeviceID(clock: ClockRef, deviceID: core_audio.DeviceID) callconv(.C) objc.OSStatus;
pub const audioDeviceClockSetAudioDeviceID = CMAudioDeviceClockSetAudioDeviceID;

extern "CoreMedia" fn CMAudioDeviceClockGetAudioDevice(
    clock: ClockRef,
    deviceUIDOut: ?*core_foundation.StringRef,
    deviceIDOut: ?*core_audio.DeviceID,
    trackingDefaultDeviceOut: ?*objc.Boolean,
) callconv(.C) objc.OSStatus;
pub const audioDeviceClockGetAudioDevice = CMAudioDeviceClockGetAudioDevice;
