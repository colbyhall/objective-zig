// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.

pub const _CGLContextObject = extern struct {};

pub const ContextObj = ?*_CGLContextObject;

pub const _CGLPixelFormatObject = extern struct {};

pub const PixelFormatObj = ?*_CGLPixelFormatObject;

pub const _CGLRendererInfoObject = extern struct {};

pub const RendererInfoObj = ?*_CGLRendererInfoObject;

pub const _CGLPBufferObject = extern struct {};

pub const PBufferObj = ?*_CGLPBufferObject;

pub const _CGLPixelFormatAttribute = enum(u32) {
    kCGLPFAAllRenderers = 1,
    kCGLPFATripleBuffer = 3,
    kCGLPFADoubleBuffer = 5,
    kCGLPFAColorSize = 8,
    kCGLPFAAlphaSize = 11,
    kCGLPFADepthSize = 12,
    kCGLPFAStencilSize = 13,
    kCGLPFAMinimumPolicy = 51,
    kCGLPFAMaximumPolicy = 52,
    kCGLPFASampleBuffers = 55,
    kCGLPFASamples = 56,
    kCGLPFAColorFloat = 58,
    kCGLPFAMultisample = 59,
    kCGLPFASupersample = 60,
    kCGLPFASampleAlpha = 61,
    kCGLPFARendererID = 70,
    kCGLPFANoRecovery = 72,
    kCGLPFAAccelerated = 73,
    kCGLPFAClosestPolicy = 74,
    kCGLPFABackingStore = 76,
    kCGLPFABackingVolatile = 77,
    kCGLPFADisplayMask = 84,
    kCGLPFAAllowOfflineRenderers = 96,
    kCGLPFAAcceleratedCompute = 97,
    kCGLPFAOpenGLProfile = 99,
    kCGLPFASupportsAutomaticGraphicsSwitching = 101,
    kCGLPFAVirtualScreenCount = 128,
    kCGLPFAAuxBuffers = 7,
    kCGLPFAAccumSize = 14,
    kCGLPFAAuxDepthStencil = 57,
    kCGLPFAStereo = 6,
    kCGLPFAOffScreen = 53,
    kCGLPFAWindow = 80,
    kCGLPFACompliant = 83,
    kCGLPFAPBuffer = 90,
    kCGLPFARemotePBuffer = 91,
    kCGLPFASingleRenderer = 71,
    kCGLPFARobust = 75,
    kCGLPFAMPSafe = 78,
    kCGLPFAMultiScreen = 81,
    kCGLPFAFullScreen = 54,
};

pub const _CGLRendererProperty = enum(u32) {
    kCGLRPOffScreen = 53,
    kCGLRPRendererID = 70,
    kCGLRPAccelerated = 73,
    kCGLRPBackingStore = 76,
    kCGLRPWindow = 80,
    kCGLRPCompliant = 83,
    kCGLRPDisplayMask = 84,
    kCGLRPBufferModes = 100,
    kCGLRPColorModes = 103,
    kCGLRPAccumModes = 104,
    kCGLRPDepthModes = 105,
    kCGLRPStencilModes = 106,
    kCGLRPMaxAuxBuffers = 107,
    kCGLRPMaxSampleBuffers = 108,
    kCGLRPMaxSamples = 109,
    kCGLRPSampleModes = 110,
    kCGLRPSampleAlpha = 111,
    kCGLRPGPUVertProcCapable = 122,
    kCGLRPGPUFragProcCapable = 123,
    kCGLRPRendererCount = 128,
    kCGLRPOnline = 129,
    kCGLRPAcceleratedCompute = 130,
    kCGLRPVideoMemoryMegabytes = 131,
    kCGLRPTextureMemoryMegabytes = 132,
    kCGLRPMajorGLVersion = 133,
    kCGLRPRegistryIDLow = 140,
    kCGLRPRegistryIDHigh = 141,
    kCGLRPRemovable = 142,
    kCGLRPRobust = 75,
    kCGLRPMPSafe = 78,
    kCGLRPMultiScreen = 81,
    kCGLRPFullScreen = 54,
    kCGLRPVideoMemory = 120,
    kCGLRPTextureMemory = 121,
};

pub const _CGLContextEnable = enum(u32) {
    kCGLCESwapRectangle = 201,
    kCGLCESwapLimit = 203,
    kCGLCERasterization = 221,
    kCGLCEStateValidation = 301,
    kCGLCESurfaceBackingSize = 305,
    kCGLCEDisplayListOptimization = 307,
    kCGLCEMPEngine = 313,
    kCGLCECrashOnRemovedFunctions = 316,
};

pub const _CGLGPURestartStatus = enum(u32) {
    kCGLCPGPURestartStatusNone = 0,
    kCGLCPGPURestartStatusCaused = 1,
    kCGLCPGPURestartStatusBlacklisted = 2,
    kCGLCPGPURestartStatusDenied = 2,
};

pub const _CGLContextParameter = enum(u32) {
    kCGLCPSwapRectangle = 200,
    kCGLCPSwapInterval = 222,
    kCGLCPDispatchTableSize = 224,
    kCGLCPClientStorage = 226,
    kCGLCPSurfaceTexture = 228,
    kCGLCPSurfaceOrder = 235,
    kCGLCPSurfaceOpacity = 236,
    kCGLCPSurfaceBackingSize = 304,
    kCGLCPSurfaceSurfaceVolatile = 306,
    kCGLCPReclaimResources = 308,
    kCGLCPCurrentRendererID = 309,
    kCGLCPGPUVertexProcessing = 310,
    kCGLCPGPUFragmentProcessing = 311,
    kCGLCPHasDrawable = 314,
    kCGLCPMPSwapsInFlight = 315,
    kCGLCPGPURestartStatus = 317,
    kCGLCPAbortOnGPURestartStatusBlacklisted = 318,
    kCGLCPAbortOnGPURestartStatusDenied = 318,
    kCGLCPSupportGPURestart = 319,
    kCGLCPSupportSeparateAddressSpace = 320,
    kCGLCPContextPriorityRequest = 608,
};

pub const CPContextPriorityRequest = enum(u32) {
    kCGLCPContextPriorityRequestHigh = 0,
    kCGLCPContextPriorityRequestNormal = 1,
    kCGLCPContextPriorityRequestLow = 2,
};

pub const _CGLGlobalOption = enum(u32) {
    kCGLGOFormatCacheSize = 501,
    kCGLGOClearFormatCache = 502,
    kCGLGORetainRenderers = 503,
    kCGLGOUseBuildCache = 506,
    kCGLGOResetLibrary = 504,
    kCGLGOUseErrorHandler = 505,
};

pub const _CGLOpenGLProfile = enum(u32) {
    kCGLOGLPVersion_Legacy = 4096,
    kCGLOGLPVersion_3_2_Core = 12800,
    kCGLOGLPVersion_GL3_Core = 12800,
    kCGLOGLPVersion_GL4_Core = 16640,
};

pub const _CGLError = enum(u32) {
    kCGLNoError = 0,
    kCGLBadAttribute = 10000,
    kCGLBadProperty = 10001,
    kCGLBadPixelFormat = 10002,
    kCGLBadRendererInfo = 10003,
    kCGLBadContext = 10004,
    kCGLBadDrawable = 10005,
    kCGLBadDisplay = 10006,
    kCGLBadState = 10007,
    kCGLBadValue = 10008,
    kCGLBadMatch = 10009,
    kCGLBadEnumeration = 10010,
    kCGLBadOffScreen = 10011,
    kCGLBadFullScreen = 10012,
    kCGLBadWindow = 10013,
    kCGLBadAddress = 10014,
    kCGLBadCodeModule = 10015,
    kCGLBadAlloc = 10016,
    kCGLBadConnection = 10017,
};

pub extern "OpenGL" fn SetCurrentContext(ctx: ContextObj) callconv(.C) Error;

pub extern "OpenGL" fn GetCurrentContext() callconv(.C) ContextObj;

pub const GLbitfield = objc.uint32_t;

pub const GLboolean = objc.uint8_t;

pub const GLbyte = objc.int8_t;

pub const GLclampf = f32;

pub const GLenum = objc.uint32_t;

pub const GLfloat = f32;

pub const GLint = objc.int32_t;

pub const GLshort = objc.int16_t;

pub const GLsizei = objc.int32_t;

pub const GLubyte = objc.uint8_t;

pub const GLuint = objc.uint32_t;

pub const GLushort = objc.uint16_t;

pub const GLvoid = void;

pub const GLchar = i8;

pub const GLcharARB = i8;

pub const GLhandleARB = ?*anyopaque;

pub const GLdouble = f64;

pub const GLclampd = f64;

pub const GLfixed = objc.int32_t;

pub const GLhalf = objc.uint16_t;

pub const GLhalfARB = objc.uint16_t;

pub const GLint64 = objc.int64_t;

pub const __GLsync = extern struct {};

pub const GLsync = ?*__GLsync;

pub const GLuint64 = objc.uint64_t;

pub const GLint64EXT = objc.int64_t;

pub const GLuint64EXT = objc.uint64_t;

pub const GLintptr = objc.intptr_t;

pub const GLsizeiptr = objc.intptr_t;

pub const GLintptrARB = objc.intptr_t;

pub const GLsizeiptrARB = objc.intptr_t;

pub const ShareGroupRec = extern struct {};

pub const ShareGroupObj = ?*ShareGroupRec;

pub extern "OpenGL" fn GetShareGroup(ctx: ContextObj) callconv(.C) ShareGroupObj;

pub const _cl_device_id = extern struct {};

pub const cl_device_id = ?*_cl_device_id;

pub extern "OpenGL" fn GetDeviceFromGLRenderer(rendererID: GLint) callconv(.C) cl_device_id;

pub const anon131 = enum(u32) {
    kCGLRendererGenericID = 131584,
    kCGLRendererGenericFloatID = 132096,
    kCGLRendererAppleSWID = 132608,
    kCGLRendererATIRage128ID = 135168,
    kCGLRendererATIRadeonID = 135680,
    kCGLRendererATIRageProID = 136192,
    kCGLRendererATIRadeon8500ID = 136704,
    kCGLRendererATIRadeon9700ID = 137216,
    kCGLRendererATIRadeonX1000ID = 137472,
    kCGLRendererATIRadeonX2000ID = 137728,
    kCGLRendererATIRadeonX3000ID = 137984,
    kCGLRendererATIRadeonX4000ID = 138240,
    kCGLRendererGeForce2MXID = 139264,
    kCGLRendererGeForce3ID = 139776,
    kCGLRendererGeForceFXID = 140288,
    kCGLRendererGeForce8xxxID = 140800,
    kCGLRendererGeForceID = 141056,
    kCGLRendererVTBladeXP2ID = 143360,
    kCGLRendererIntel900ID = 147456,
    kCGLRendererIntelX3100ID = 147968,
    kCGLRendererIntelHDID = 148224,
    kCGLRendererIntelHD4000ID = 148480,
    kCGLRendererIntelHD5000ID = 148736,
    kCGLRendererMesa3DFXID = 262144,
};

pub const __IOSurface = extern struct {};

pub const IOSurfaceRef = ?*__IOSurface;

pub extern "OpenGL" fn TexImageIOSurface2D(ctx: ContextObj, target: GLenum, internal_format: GLenum, width: GLsizei, height: GLsizei, format: GLenum, @"type": GLenum, ioSurface: IOSurfaceRef, plane: GLuint, ) callconv(.C) Error;

pub extern "OpenGL" fn ChoosePixelFormat(attribs: ?*PixelFormatAttribute, pix: ?*PixelFormatObj, npix: ?*GLint) callconv(.C) Error;

pub extern "OpenGL" fn DestroyPixelFormat(pix: PixelFormatObj) callconv(.C) Error;

pub extern "OpenGL" fn DescribePixelFormat(pix: PixelFormatObj, pix_num: GLint, attrib: PixelFormatAttribute, value: ?*GLint, ) callconv(.C) Error;

pub extern "OpenGL" fn ReleasePixelFormat(pix: PixelFormatObj) callconv(.C) void;

pub extern "OpenGL" fn RetainPixelFormat(pix: PixelFormatObj) callconv(.C) PixelFormatObj;

pub extern "OpenGL" fn GetPixelFormatRetainCount(pix: PixelFormatObj) callconv(.C) GLuint;

pub extern "OpenGL" fn QueryRendererInfo(display_mask: GLuint, rend: ?*RendererInfoObj, nrend: ?*GLint) callconv(.C) Error;

pub extern "OpenGL" fn DestroyRendererInfo(rend: RendererInfoObj) callconv(.C) Error;

pub extern "OpenGL" fn DescribeRenderer(rend: RendererInfoObj, rend_num: GLint, prop: RendererProperty, value: ?*GLint, ) callconv(.C) Error;

pub extern "OpenGL" fn CreateContext(pix: PixelFormatObj, share: ContextObj, ctx: ?*ContextObj) callconv(.C) Error;

pub extern "OpenGL" fn DestroyContext(ctx: ContextObj) callconv(.C) Error;

pub extern "OpenGL" fn CopyContext(src: ContextObj, dst: ContextObj, mask: GLbitfield) callconv(.C) Error;

pub extern "OpenGL" fn RetainContext(ctx: ContextObj) callconv(.C) ContextObj;

pub extern "OpenGL" fn ReleaseContext(ctx: ContextObj) callconv(.C) void;

pub extern "OpenGL" fn GetContextRetainCount(ctx: ContextObj) callconv(.C) GLuint;

pub extern "OpenGL" fn GetPixelFormat(ctx: ContextObj) callconv(.C) PixelFormatObj;

pub extern "OpenGL" fn CreatePBuffer(width: GLsizei, height: GLsizei, target: GLenum, internalFormat: GLenum, max_level: GLint, pbuffer: ?*PBufferObj, ) callconv(.C) Error;

pub extern "OpenGL" fn DestroyPBuffer(pbuffer: PBufferObj) callconv(.C) Error;

pub extern "OpenGL" fn DescribePBuffer(obj: PBufferObj, width: ?*GLsizei, height: ?*GLsizei, target: ?*GLenum, internalFormat: ?*GLenum, mipmap: ?*GLint, ) callconv(.C) Error;

pub extern "OpenGL" fn TexImagePBuffer(ctx: ContextObj, pbuffer: PBufferObj, source: GLenum) callconv(.C) Error;

pub extern "OpenGL" fn RetainPBuffer(pbuffer: PBufferObj) callconv(.C) PBufferObj;

pub extern "OpenGL" fn ReleasePBuffer(pbuffer: PBufferObj) callconv(.C) void;

pub extern "OpenGL" fn GetPBufferRetainCount(pbuffer: PBufferObj) callconv(.C) GLuint;

pub extern "OpenGL" fn SetOffScreen(ctx: ContextObj, width: GLsizei, height: GLsizei, rowbytes: GLint, baseaddr: ?*anyopaque, ) callconv(.C) Error;

pub extern "OpenGL" fn GetOffScreen(ctx: ContextObj, width: ?*GLsizei, height: ?*GLsizei, rowbytes: ?*GLint, baseaddr: ?*?*anyopaque, ) callconv(.C) Error;

pub extern "OpenGL" fn SetFullScreen(ctx: ContextObj) callconv(.C) Error;

pub extern "OpenGL" fn SetFullScreenOnDisplay(ctx: ContextObj, display_mask: GLuint) callconv(.C) Error;

pub extern "OpenGL" fn SetPBuffer(ctx: ContextObj, pbuffer: PBufferObj, face: GLenum, level: GLint, screen: GLint, ) callconv(.C) Error;

pub extern "OpenGL" fn GetPBuffer(ctx: ContextObj, pbuffer: ?*PBufferObj, face: ?*GLenum, level: ?*GLint, screen: ?*GLint, ) callconv(.C) Error;

pub extern "OpenGL" fn ClearDrawable(ctx: ContextObj) callconv(.C) Error;

pub extern "OpenGL" fn FlushDrawable(ctx: ContextObj) callconv(.C) Error;

pub extern "OpenGL" fn Enable(ctx: ContextObj, pname: ContextEnable) callconv(.C) Error;

pub extern "OpenGL" fn Disable(ctx: ContextObj, pname: ContextEnable) callconv(.C) Error;

pub extern "OpenGL" fn IsEnabled(ctx: ContextObj, pname: ContextEnable, enable: ?*GLint) callconv(.C) Error;

pub extern "OpenGL" fn SetParameter(ctx: ContextObj, pname: ContextParameter, params: ?*GLint) callconv(.C) Error;

pub extern "OpenGL" fn GetParameter(ctx: ContextObj, pname: ContextParameter, params: ?*GLint) callconv(.C) Error;

pub extern "OpenGL" fn SetVirtualScreen(ctx: ContextObj, screen: GLint) callconv(.C) Error;

pub extern "OpenGL" fn GetVirtualScreen(ctx: ContextObj, screen: ?*GLint) callconv(.C) Error;

pub extern "OpenGL" fn UpdateContext(ctx: ContextObj) callconv(.C) Error;

pub extern "OpenGL" fn SetGlobalOption(pname: GlobalOption, params: ?*GLint) callconv(.C) Error;

pub extern "OpenGL" fn GetGlobalOption(pname: GlobalOption, params: ?*GLint) callconv(.C) Error;

pub extern "OpenGL" fn SetOption(pname: GlobalOption, param: GLint) callconv(.C) Error;

pub extern "OpenGL" fn GetOption(pname: GlobalOption, param: ?*GLint) callconv(.C) Error;

pub extern "OpenGL" fn LockContext(ctx: ContextObj) callconv(.C) Error;

pub extern "OpenGL" fn UnlockContext(ctx: ContextObj) callconv(.C) Error;

pub extern "OpenGL" fn GetVersion(majorvers: ?*GLint, minorvers: ?*GLint) callconv(.C) void;

pub extern "OpenGL" fn ErrorString(@"error": Error) callconv(.C) ?*i8;

