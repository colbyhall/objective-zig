// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const foundation = @import("foundation.zig"); // Framework dependency Foundation.

/// https://developer.apple.com/documentation/CloudKit/CKAsset?language=objc
pub const Asset = opaque {
    pub const InternalInfo = objc.ExternalClass("CKAsset", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn initWithFileURL(self: *@This(), fileURL: ?*foundation.URL) *@This() {
        return objc.msgSend(self, "initWithFileURL:", *@This(), .{fileURL});
    }

    pub fn fileURL(self: *@This()) ?*foundation.URL {
        return objc.msgSend(self, "fileURL", ?*foundation.URL, .{});
    }

};

pub const ReferenceAction = enum(objc.NSUInteger) {
    None = 0,
    DeleteSelf = 1,
};

/// https://developer.apple.com/documentation/CloudKit/CKReference?language=objc
pub const Reference = opaque {
    pub const InternalInfo = objc.ExternalClass("CKReference", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn initWithRecordIDAction(self: *@This(), recordID: ?*RecordID, action: ReferenceAction) *@This() {
        return objc.msgSend(self, "initWithRecordID:action:", *@This(), .{recordID, action});
    }

    pub fn initWithRecordAction(self: *@This(), record: ?*Record, action: ReferenceAction) *@This() {
        return objc.msgSend(self, "initWithRecord:action:", *@This(), .{record, action});
    }

    pub fn referenceAction(self: *@This()) ReferenceAction {
        return objc.msgSend(self, "referenceAction", ReferenceAction, .{});
    }

    pub fn recordID(self: *@This()) ?*RecordID {
        return objc.msgSend(self, "recordID", ?*RecordID, .{});
    }

};

pub const RecordType = ?*foundation.String;

pub const RecordFieldKey = ?*foundation.String;

/// https://developer.apple.com/documentation/CloudKit/CKRecordValue?language=objc
pub const RecordValue = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
};

/// https://developer.apple.com/documentation/CloudKit/CKRecord?language=objc
pub const Record = opaque {
    pub const InternalInfo = objc.ExternalClass("CKRecord", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn initWithRecordType(self: *@This(), recordType: RecordType) *@This() {
        return objc.msgSend(self, "initWithRecordType:", *@This(), .{recordType});
    }

    pub fn initWithRecordTypeRecordID(self: *@This(), recordType: RecordType, recordID: ?*RecordID) *@This() {
        return objc.msgSend(self, "initWithRecordType:recordID:", *@This(), .{recordType, recordID});
    }

    pub fn initWithRecordTypeZoneID(self: *@This(), recordType: RecordType, zoneID: ?*RecordZoneID) *@This() {
        return objc.msgSend(self, "initWithRecordType:zoneID:", *@This(), .{recordType, zoneID});
    }

    pub fn objectForKey(self: *@This(), key: RecordFieldKey) ?*anyopaque {
        return objc.msgSend(self, "objectForKey:", ?*anyopaque, .{key});
    }

    pub fn setObjectForKey(self: *@This(), object: ?*anyopaque, key: RecordFieldKey) void {
        return objc.msgSend(self, "setObject:forKey:", void, .{object, key});
    }

    pub fn allKeys(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "allKeys", ?*anyopaque, .{});
    }

    pub fn allTokens(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "allTokens", ?*anyopaque, .{});
    }

    pub fn objectForKeyedSubscript(self: *@This(), key: RecordFieldKey) ?*anyopaque {
        return objc.msgSend(self, "objectForKeyedSubscript:", ?*anyopaque, .{key});
    }

    pub fn setObjectForKeyedSubscript(self: *@This(), object: ?*anyopaque, key: RecordFieldKey) void {
        return objc.msgSend(self, "setObject:forKeyedSubscript:", void, .{object, key});
    }

    pub fn changedKeys(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "changedKeys", ?*anyopaque, .{});
    }

    pub fn encodeSystemFieldsWithCoder(self: *@This(), coder: ?*foundation.Coder) void {
        return objc.msgSend(self, "encodeSystemFieldsWithCoder:", void, .{coder});
    }

    pub fn setParentReferenceFromRecord(self: *@This(), parentRecord: ?*Record) void {
        return objc.msgSend(self, "setParentReferenceFromRecord:", void, .{parentRecord});
    }

    pub fn setParentReferenceFromRecordID(self: *@This(), parentRecordID: ?*RecordID) void {
        return objc.msgSend(self, "setParentReferenceFromRecordID:", void, .{parentRecordID});
    }

    pub fn recordType(self: *@This()) RecordType {
        return objc.msgSend(self, "recordType", RecordType, .{});
    }

    pub fn recordID(self: *@This()) ?*RecordID {
        return objc.msgSend(self, "recordID", ?*RecordID, .{});
    }

    pub fn recordChangeTag(self: *@This()) ?*NSString {
        return objc.msgSend(self, "recordChangeTag", ?*NSString, .{});
    }

    pub fn creatorUserRecordID(self: *@This()) ?*RecordID {
        return objc.msgSend(self, "creatorUserRecordID", ?*RecordID, .{});
    }

    pub fn creationDate(self: *@This()) ?*foundation.Date {
        return objc.msgSend(self, "creationDate", ?*foundation.Date, .{});
    }

    pub fn lastModifiedUserRecordID(self: *@This()) ?*RecordID {
        return objc.msgSend(self, "lastModifiedUserRecordID", ?*RecordID, .{});
    }

    pub fn modificationDate(self: *@This()) ?*foundation.Date {
        return objc.msgSend(self, "modificationDate", ?*foundation.Date, .{});
    }

    pub fn share(self: *@This()) ?*Reference {
        return objc.msgSend(self, "share", ?*Reference, .{});
    }

    pub fn parent(self: *@This()) ?*Reference {
        return objc.msgSend(self, "parent", ?*Reference, .{});
    }

    pub fn setParent(self: *@This(), parent: ?*Reference) void {
        return objc.msgSend(self, "setParent:", void, .{parent});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKRecordKeyValueSetting?language=objc
pub const RecordKeyValueSetting = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn objectForKey(self: *@This(), key: RecordFieldKey) ?*anyopaque {
        return objc.msgSend(self, "objectForKey:", ?*anyopaque, .{key});
    }

    pub fn setObjectForKey(self: *@This(), object: ?*anyopaque, key: RecordFieldKey) void {
        return objc.msgSend(self, "setObject:forKey:", void, .{object, key});
    }

    pub fn objectForKeyedSubscript(self: *@This(), key: RecordFieldKey) ?*anyopaque {
        return objc.msgSend(self, "objectForKeyedSubscript:", ?*anyopaque, .{key});
    }

    pub fn setObjectForKeyedSubscript(self: *@This(), object: ?*anyopaque, key: RecordFieldKey) void {
        return objc.msgSend(self, "setObject:forKeyedSubscript:", void, .{object, key});
    }

    pub fn allKeys(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "allKeys", ?*anyopaque, .{});
    }

    pub fn changedKeys(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "changedKeys", ?*anyopaque, .{});
    }

};

pub const SubscriptionType = enum(objc.NSInteger) {
    Query = 1,
    RecordZone = 2,
    Database = 3,
};

pub const SubscriptionID = ?*NSString;

/// https://developer.apple.com/documentation/CloudKit/CKSubscription?language=objc
pub const Subscription = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSubscription", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn subscriptionID(self: *@This()) SubscriptionID {
        return objc.msgSend(self, "subscriptionID", SubscriptionID, .{});
    }

    pub fn subscriptionType(self: *@This()) SubscriptionType {
        return objc.msgSend(self, "subscriptionType", SubscriptionType, .{});
    }

    pub fn notificationInfo(self: *@This()) ?*NotificationInfo {
        return objc.msgSend(self, "notificationInfo", ?*NotificationInfo, .{});
    }

    pub fn setNotificationInfo(self: *@This(), notificationInfo: ?*NotificationInfo) void {
        return objc.msgSend(self, "setNotificationInfo:", void, .{notificationInfo});
    }

};

pub const QuerySubscriptionOptions = enum(objc.NSUInteger) {
    FiresOnRecordCreation = 1,
    FiresOnRecordUpdate = 2,
    FiresOnRecordDeletion = 4,
    FiresOnce = 8,
};

/// https://developer.apple.com/documentation/CloudKit/CKQuerySubscription?language=objc
pub const QuerySubscription = opaque {
    pub const InternalInfo = objc.ExternalClass("CKQuerySubscription", @This(), Subscription, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithRecordTypePredicateOptions(self: *@This(), recordType: RecordType, predicate: ?*foundation.Predicate, querySubscriptionOptions: QuerySubscriptionOptions) *@This() {
        return objc.msgSend(self, "initWithRecordType:predicate:options:", *@This(), .{recordType, predicate, querySubscriptionOptions});
    }

    pub fn initWithRecordTypePredicateSubscriptionIDOptions(self: *@This(), recordType: RecordType, predicate: ?*foundation.Predicate, subscriptionID: SubscriptionID, querySubscriptionOptions: QuerySubscriptionOptions, ) *@This() {
        return objc.msgSend(self, "initWithRecordType:predicate:subscriptionID:options:", *@This(), .{recordType, predicate, subscriptionID, querySubscriptionOptions, });
    }

    pub fn initWithCoder(self: *@This(), aDecoder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{aDecoder});
    }

    pub fn recordType(self: *@This()) RecordType {
        return objc.msgSend(self, "recordType", RecordType, .{});
    }

    pub fn predicate(self: *@This()) ?*foundation.Predicate {
        return objc.msgSend(self, "predicate", ?*foundation.Predicate, .{});
    }

    pub fn zoneID(self: *@This()) ?*RecordZoneID {
        return objc.msgSend(self, "zoneID", ?*RecordZoneID, .{});
    }

    pub fn setZoneID(self: *@This(), zoneID: ?*RecordZoneID) void {
        return objc.msgSend(self, "setZoneID:", void, .{zoneID});
    }

    pub fn querySubscriptionOptions(self: *@This()) QuerySubscriptionOptions {
        return objc.msgSend(self, "querySubscriptionOptions", QuerySubscriptionOptions, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKRecordZoneSubscription?language=objc
pub const RecordZoneSubscription = opaque {
    pub const InternalInfo = objc.ExternalClass("CKRecordZoneSubscription", @This(), Subscription, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithZoneID(self: *@This(), zoneID: ?*RecordZoneID) *@This() {
        return objc.msgSend(self, "initWithZoneID:", *@This(), .{zoneID});
    }

    pub fn initWithZoneIDSubscriptionID(self: *@This(), zoneID: ?*RecordZoneID, subscriptionID: SubscriptionID) *@This() {
        return objc.msgSend(self, "initWithZoneID:subscriptionID:", *@This(), .{zoneID, subscriptionID});
    }

    pub fn initWithCoder(self: *@This(), aDecoder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{aDecoder});
    }

    pub fn zoneID(self: *@This()) ?*RecordZoneID {
        return objc.msgSend(self, "zoneID", ?*RecordZoneID, .{});
    }

    pub fn recordType(self: *@This()) RecordType {
        return objc.msgSend(self, "recordType", RecordType, .{});
    }

    pub fn setRecordType(self: *@This(), recordType: RecordType) void {
        return objc.msgSend(self, "setRecordType:", void, .{recordType});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKDatabaseSubscription?language=objc
pub const DatabaseSubscription = opaque {
    pub const InternalInfo = objc.ExternalClass("CKDatabaseSubscription", @This(), Subscription, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn initWithSubscriptionID(self: *@This(), subscriptionID: SubscriptionID) *@This() {
        return objc.msgSend(self, "initWithSubscriptionID:", *@This(), .{subscriptionID});
    }

    pub fn initWithCoder(self: *@This(), aDecoder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{aDecoder});
    }

    pub fn recordType(self: *@This()) RecordType {
        return objc.msgSend(self, "recordType", RecordType, .{});
    }

    pub fn setRecordType(self: *@This(), recordType: RecordType) void {
        return objc.msgSend(self, "setRecordType:", void, .{recordType});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKNotificationInfo?language=objc
pub const NotificationInfo = opaque {
    pub const InternalInfo = objc.ExternalClass("CKNotificationInfo", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn alertBody(self: *@This()) ?*NSString {
        return objc.msgSend(self, "alertBody", ?*NSString, .{});
    }

    pub fn setAlertBody(self: *@This(), alertBody: ?*NSString) void {
        return objc.msgSend(self, "setAlertBody:", void, .{alertBody});
    }

    pub fn alertLocalizationKey(self: *@This()) ?*NSString {
        return objc.msgSend(self, "alertLocalizationKey", ?*NSString, .{});
    }

    pub fn setAlertLocalizationKey(self: *@This(), alertLocalizationKey: ?*NSString) void {
        return objc.msgSend(self, "setAlertLocalizationKey:", void, .{alertLocalizationKey});
    }

    pub fn alertLocalizationArgs(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "alertLocalizationArgs", ?*anyopaque, .{});
    }

    pub fn setAlertLocalizationArgs(self: *@This(), alertLocalizationArgs: ?*anyopaque) void {
        return objc.msgSend(self, "setAlertLocalizationArgs:", void, .{alertLocalizationArgs});
    }

    pub fn title(self: *@This()) ?*NSString {
        return objc.msgSend(self, "title", ?*NSString, .{});
    }

    pub fn setTitle(self: *@This(), title: ?*NSString) void {
        return objc.msgSend(self, "setTitle:", void, .{title});
    }

    pub fn titleLocalizationKey(self: *@This()) ?*NSString {
        return objc.msgSend(self, "titleLocalizationKey", ?*NSString, .{});
    }

    pub fn setTitleLocalizationKey(self: *@This(), titleLocalizationKey: ?*NSString) void {
        return objc.msgSend(self, "setTitleLocalizationKey:", void, .{titleLocalizationKey});
    }

    pub fn titleLocalizationArgs(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "titleLocalizationArgs", ?*anyopaque, .{});
    }

    pub fn setTitleLocalizationArgs(self: *@This(), titleLocalizationArgs: ?*anyopaque) void {
        return objc.msgSend(self, "setTitleLocalizationArgs:", void, .{titleLocalizationArgs});
    }

    pub fn subtitle(self: *@This()) ?*NSString {
        return objc.msgSend(self, "subtitle", ?*NSString, .{});
    }

    pub fn setSubtitle(self: *@This(), subtitle: ?*NSString) void {
        return objc.msgSend(self, "setSubtitle:", void, .{subtitle});
    }

    pub fn subtitleLocalizationKey(self: *@This()) ?*NSString {
        return objc.msgSend(self, "subtitleLocalizationKey", ?*NSString, .{});
    }

    pub fn setSubtitleLocalizationKey(self: *@This(), subtitleLocalizationKey: ?*NSString) void {
        return objc.msgSend(self, "setSubtitleLocalizationKey:", void, .{subtitleLocalizationKey});
    }

    pub fn subtitleLocalizationArgs(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "subtitleLocalizationArgs", ?*anyopaque, .{});
    }

    pub fn setSubtitleLocalizationArgs(self: *@This(), subtitleLocalizationArgs: ?*anyopaque) void {
        return objc.msgSend(self, "setSubtitleLocalizationArgs:", void, .{subtitleLocalizationArgs});
    }

    pub fn alertActionLocalizationKey(self: *@This()) ?*NSString {
        return objc.msgSend(self, "alertActionLocalizationKey", ?*NSString, .{});
    }

    pub fn setAlertActionLocalizationKey(self: *@This(), alertActionLocalizationKey: ?*NSString) void {
        return objc.msgSend(self, "setAlertActionLocalizationKey:", void, .{alertActionLocalizationKey});
    }

    pub fn alertLaunchImage(self: *@This()) ?*NSString {
        return objc.msgSend(self, "alertLaunchImage", ?*NSString, .{});
    }

    pub fn setAlertLaunchImage(self: *@This(), alertLaunchImage: ?*NSString) void {
        return objc.msgSend(self, "setAlertLaunchImage:", void, .{alertLaunchImage});
    }

    pub fn soundName(self: *@This()) ?*NSString {
        return objc.msgSend(self, "soundName", ?*NSString, .{});
    }

    pub fn setSoundName(self: *@This(), soundName: ?*NSString) void {
        return objc.msgSend(self, "setSoundName:", void, .{soundName});
    }

    pub fn desiredKeys(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "desiredKeys", ?*anyopaque, .{});
    }

    pub fn setDesiredKeys(self: *@This(), desiredKeys: ?*anyopaque) void {
        return objc.msgSend(self, "setDesiredKeys:", void, .{desiredKeys});
    }

    pub fn shouldBadge(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "shouldBadge", objc.BOOL, .{});
    }

    pub fn setShouldBadge(self: *@This(), shouldBadge: objc.BOOL) void {
        return objc.msgSend(self, "setShouldBadge:", void, .{shouldBadge});
    }

    pub fn shouldSendContentAvailable(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "shouldSendContentAvailable", objc.BOOL, .{});
    }

    pub fn setShouldSendContentAvailable(self: *@This(), shouldSendContentAvailable: objc.BOOL) void {
        return objc.msgSend(self, "setShouldSendContentAvailable:", void, .{shouldSendContentAvailable});
    }

    pub fn shouldSendMutableContent(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "shouldSendMutableContent", objc.BOOL, .{});
    }

    pub fn setShouldSendMutableContent(self: *@This(), shouldSendMutableContent: objc.BOOL) void {
        return objc.msgSend(self, "setShouldSendMutableContent:", void, .{shouldSendMutableContent});
    }

    pub fn category(self: *@This()) ?*NSString {
        return objc.msgSend(self, "category", ?*NSString, .{});
    }

    pub fn setCategory(self: *@This(), category: ?*NSString) void {
        return objc.msgSend(self, "setCategory:", void, .{category});
    }

    pub fn collapseIDKey(self: *@This()) ?*NSString {
        return objc.msgSend(self, "collapseIDKey", ?*NSString, .{});
    }

    pub fn setCollapseIDKey(self: *@This(), collapseIDKey: ?*NSString) void {
        return objc.msgSend(self, "setCollapseIDKey:", void, .{collapseIDKey});
    }

};

pub const DatabaseScope = enum(objc.NSInteger) {
    Public = 1,
    Private = 2,
    Shared = 3,
};

/// https://developer.apple.com/documentation/CloudKit/CKDatabase?language=objc
pub const Database = opaque {
    pub const InternalInfo = objc.ExternalClass("CKDatabase", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn addOperation(self: *@This(), operation: ?*DatabaseOperation) void {
        return objc.msgSend(self, "addOperation:", void, .{operation});
    }

    pub fn databaseScope(self: *@This()) DatabaseScope {
        return objc.msgSend(self, "databaseScope", DatabaseScope, .{});
    }

};

pub const OperationID = ?*NSString;

/// https://developer.apple.com/documentation/CloudKit/CKOperation?language=objc
pub const Operation = opaque {
    pub const InternalInfo = objc.ExternalClass("CKOperation", @This(), NSOperation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn configuration(self: *@This()) ?*OperationConfiguration {
        return objc.msgSend(self, "configuration", ?*OperationConfiguration, .{});
    }

    pub fn setConfiguration(self: *@This(), configuration: ?*OperationConfiguration) void {
        return objc.msgSend(self, "setConfiguration:", void, .{configuration});
    }

    pub fn group(self: *@This()) ?*OperationGroup {
        return objc.msgSend(self, "group", ?*OperationGroup, .{});
    }

    pub fn setGroup(self: *@This(), group: ?*OperationGroup) void {
        return objc.msgSend(self, "setGroup:", void, .{group});
    }

    pub fn operationID(self: *@This()) OperationID {
        return objc.msgSend(self, "operationID", OperationID, .{});
    }

    pub fn longLivedOperationWasPersistedBlock(self: *@This()) *const fn() callconv(.C) void {
        return objc.msgSend(self, "longLivedOperationWasPersistedBlock", *const fn() callconv(.C) void, .{});
    }

    pub fn setLongLivedOperationWasPersistedBlock(self: *@This(), longLivedOperationWasPersistedBlock: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "setLongLivedOperationWasPersistedBlock:", void, .{longLivedOperationWasPersistedBlock});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKOperationConfiguration?language=objc
pub const OperationConfiguration = opaque {
    pub const InternalInfo = objc.ExternalClass("CKOperationConfiguration", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn container(self: *@This()) ?*Container {
        return objc.msgSend(self, "container", ?*Container, .{});
    }

    pub fn setContainer(self: *@This(), container: ?*Container) void {
        return objc.msgSend(self, "setContainer:", void, .{container});
    }

    pub fn qualityOfService(self: *@This()) foundation.QualityOfService {
        return objc.msgSend(self, "qualityOfService", foundation.QualityOfService, .{});
    }

    pub fn setQualityOfService(self: *@This(), qualityOfService: foundation.QualityOfService) void {
        return objc.msgSend(self, "setQualityOfService:", void, .{qualityOfService});
    }

    pub fn allowsCellularAccess(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "allowsCellularAccess", objc.BOOL, .{});
    }

    pub fn setAllowsCellularAccess(self: *@This(), allowsCellularAccess: objc.BOOL) void {
        return objc.msgSend(self, "setAllowsCellularAccess:", void, .{allowsCellularAccess});
    }

    pub fn isLongLived(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isLongLived", objc.BOOL, .{});
    }

    pub fn setLongLived(self: *@This(), longLived: objc.BOOL) void {
        return objc.msgSend(self, "setLongLived:", void, .{longLived});
    }

    pub fn timeoutIntervalForRequest(self: *@This()) foundation.TimeInterval {
        return objc.msgSend(self, "timeoutIntervalForRequest", foundation.TimeInterval, .{});
    }

    pub fn setTimeoutIntervalForRequest(self: *@This(), timeoutIntervalForRequest: foundation.TimeInterval) void {
        return objc.msgSend(self, "setTimeoutIntervalForRequest:", void, .{timeoutIntervalForRequest});
    }

    pub fn timeoutIntervalForResource(self: *@This()) foundation.TimeInterval {
        return objc.msgSend(self, "timeoutIntervalForResource", foundation.TimeInterval, .{});
    }

    pub fn setTimeoutIntervalForResource(self: *@This(), timeoutIntervalForResource: foundation.TimeInterval) void {
        return objc.msgSend(self, "setTimeoutIntervalForResource:", void, .{timeoutIntervalForResource});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKContainer?language=objc
pub const Container = opaque {
    pub const InternalInfo = objc.ExternalClass("CKContainer", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn defaultContainer(self: *@This()) ?*Container {
        return objc.msgSend(self, "defaultContainer", ?*Container, .{});
    }

    pub fn containerWithIdentifier(self: *@This(), containerIdentifier: ?*NSString) ?*Container {
        return objc.msgSend(self, "containerWithIdentifier:", ?*Container, .{containerIdentifier});
    }

    pub fn addOperation(self: *@This(), operation: ?*Operation) void {
        return objc.msgSend(self, "addOperation:", void, .{operation});
    }

    pub fn containerIdentifier(self: *@This()) ?*NSString {
        return objc.msgSend(self, "containerIdentifier", ?*NSString, .{});
    }

};

pub const AccountStatus = enum(objc.NSInteger) {
    CouldNotDetermine = 0,
    Available = 1,
    Restricted = 2,
    NoAccount = 3,
    TemporarilyUnavailable = 4,
};

pub const ApplicationPermissions = enum(objc.NSUInteger) {
    UserDiscoverability = 1,
};

pub const ApplicationPermissionStatus = enum(objc.NSInteger) {
    InitialState = 0,
    CouldNotComplete = 1,
    Denied = 2,
    Granted = 3,
};

pub const ApplicationPermissionBlock = *const fn(ApplicationPermissionStatus, ?*foundation.Error) callconv(.C) void;

pub const ErrorCode = enum(objc.NSInteger) {
    InternalError = 1,
    PartialFailure = 2,
    NetworkUnavailable = 3,
    NetworkFailure = 4,
    BadContainer = 5,
    ServiceUnavailable = 6,
    RequestRateLimited = 7,
    MissingEntitlement = 8,
    NotAuthenticated = 9,
    PermissionFailure = 10,
    UnknownItem = 11,
    InvalidArguments = 12,
    ResultsTruncated = 13,
    ServerRecordChanged = 14,
    ServerRejectedRequest = 15,
    AssetFileNotFound = 16,
    AssetFileModified = 17,
    IncompatibleVersion = 18,
    ConstraintViolation = 19,
    OperationCancelled = 20,
    ChangeTokenExpired = 21,
    BatchRequestFailed = 22,
    ZoneBusy = 23,
    BadDatabase = 24,
    QuotaExceeded = 25,
    ZoneNotFound = 26,
    LimitExceeded = 27,
    UserDeletedZone = 28,
    TooManyParticipants = 29,
    AlreadyShared = 30,
    ReferenceViolation = 31,
    ManagedAccountRestricted = 32,
    ParticipantMayNeedVerification = 33,
    ServerResponseLost = 34,
    AssetNotAvailable = 35,
    AccountTemporarilyUnavailable = 36,
};

/// https://developer.apple.com/documentation/CloudKit/CKLocationSortDescriptor?language=objc
pub const LocationSortDescriptor = opaque {
    pub const InternalInfo = objc.ExternalClass("CKLocationSortDescriptor", @This(), NSSortDescriptor, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn initWithKeyRelativeLocation(self: *@This(), key: ?*NSString, relativeLocation: ?*CLLocation) *@This() {
        return objc.msgSend(self, "initWithKey:relativeLocation:", *@This(), .{key, relativeLocation});
    }

    pub fn initWithCoder(self: *@This(), aDecoder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{aDecoder});
    }

    pub fn relativeLocation(self: *@This()) ?*CLLocation {
        return objc.msgSend(self, "relativeLocation", ?*CLLocation, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKNotificationID?language=objc
pub const NotificationID = opaque {
    pub const InternalInfo = objc.ExternalClass("CKNotificationID", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;
};

pub const NotificationType = enum(objc.NSInteger) {
    Query = 1,
    RecordZone = 2,
    ReadNotification = 3,
    Database = 4,
};

/// https://developer.apple.com/documentation/CloudKit/CKNotification?language=objc
pub const Notification = opaque {
    pub const InternalInfo = objc.ExternalClass("CKNotification", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn notificationFromRemoteNotificationDictionary(self: *@This(), notificationDictionary: ?*foundation.Dictionary) *@This() {
        return objc.msgSend(self, "notificationFromRemoteNotificationDictionary:", *@This(), .{notificationDictionary});
    }

    pub fn notificationType(self: *@This()) NotificationType {
        return objc.msgSend(self, "notificationType", NotificationType, .{});
    }

    pub fn notificationID(self: *@This()) ?*NotificationID {
        return objc.msgSend(self, "notificationID", ?*NotificationID, .{});
    }

    pub fn containerIdentifier(self: *@This()) ?*NSString {
        return objc.msgSend(self, "containerIdentifier", ?*NSString, .{});
    }

    pub fn subscriptionOwnerUserRecordID(self: *@This()) ?*RecordID {
        return objc.msgSend(self, "subscriptionOwnerUserRecordID", ?*RecordID, .{});
    }

    pub fn isPruned(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "isPruned", objc.BOOL, .{});
    }

    pub fn subscriptionID(self: *@This()) SubscriptionID {
        return objc.msgSend(self, "subscriptionID", SubscriptionID, .{});
    }

};

pub const QueryNotificationReason = enum(objc.NSInteger) {
    RecordCreated = 1,
    RecordUpdated = 2,
    RecordDeleted = 3,
};

/// https://developer.apple.com/documentation/CloudKit/CKQueryNotification?language=objc
pub const QueryNotification = opaque {
    pub const InternalInfo = objc.ExternalClass("CKQueryNotification", @This(), Notification, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn queryNotificationReason(self: *@This()) QueryNotificationReason {
        return objc.msgSend(self, "queryNotificationReason", QueryNotificationReason, .{});
    }

    pub fn recordFields(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "recordFields", ?*anyopaque, .{});
    }

    pub fn recordID(self: *@This()) ?*RecordID {
        return objc.msgSend(self, "recordID", ?*RecordID, .{});
    }

    pub fn databaseScope(self: *@This()) DatabaseScope {
        return objc.msgSend(self, "databaseScope", DatabaseScope, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKRecordZoneNotification?language=objc
pub const RecordZoneNotification = opaque {
    pub const InternalInfo = objc.ExternalClass("CKRecordZoneNotification", @This(), Notification, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn recordZoneID(self: *@This()) ?*RecordZoneID {
        return objc.msgSend(self, "recordZoneID", ?*RecordZoneID, .{});
    }

    pub fn databaseScope(self: *@This()) DatabaseScope {
        return objc.msgSend(self, "databaseScope", DatabaseScope, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKDatabaseNotification?language=objc
pub const DatabaseNotification = opaque {
    pub const InternalInfo = objc.ExternalClass("CKDatabaseNotification", @This(), Notification, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn databaseScope(self: *@This()) DatabaseScope {
        return objc.msgSend(self, "databaseScope", DatabaseScope, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKQuery?language=objc
pub const Query = opaque {
    pub const InternalInfo = objc.ExternalClass("CKQuery", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn initWithCoder(self: *@This(), aDecoder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{aDecoder});
    }

    pub fn initWithRecordTypePredicate(self: *@This(), recordType: RecordType, predicate: ?*foundation.Predicate) *@This() {
        return objc.msgSend(self, "initWithRecordType:predicate:", *@This(), .{recordType, predicate});
    }

    pub fn recordType(self: *@This()) RecordType {
        return objc.msgSend(self, "recordType", RecordType, .{});
    }

    pub fn predicate(self: *@This()) ?*foundation.Predicate {
        return objc.msgSend(self, "predicate", ?*foundation.Predicate, .{});
    }

    pub fn sortDescriptors(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "sortDescriptors", ?*anyopaque, .{});
    }

    pub fn setSortDescriptors(self: *@This(), sortDescriptors: ?*anyopaque) void {
        return objc.msgSend(self, "setSortDescriptors:", void, .{sortDescriptors});
    }

};

pub const RecordZoneCapabilities = enum(objc.NSUInteger) {
    CapabilityFetchChanges = 1,
    CapabilityAtomic = 2,
    CapabilitySharing = 4,
    CapabilityZoneWideSharing = 8,
};

/// https://developer.apple.com/documentation/CloudKit/CKRecordZone?language=objc
pub const RecordZone = opaque {
    pub const InternalInfo = objc.ExternalClass("CKRecordZone", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn defaultRecordZone(self: *@This()) ?*RecordZone {
        return objc.msgSend(self, "defaultRecordZone", ?*RecordZone, .{});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn initWithZoneName(self: *@This(), zoneName: ?*NSString) *@This() {
        return objc.msgSend(self, "initWithZoneName:", *@This(), .{zoneName});
    }

    pub fn initWithZoneID(self: *@This(), zoneID: ?*RecordZoneID) *@This() {
        return objc.msgSend(self, "initWithZoneID:", *@This(), .{zoneID});
    }

    pub fn zoneID(self: *@This()) ?*RecordZoneID {
        return objc.msgSend(self, "zoneID", ?*RecordZoneID, .{});
    }

    pub fn capabilities(self: *@This()) RecordZoneCapabilities {
        return objc.msgSend(self, "capabilities", RecordZoneCapabilities, .{});
    }

    pub fn share(self: *@This()) ?*Reference {
        return objc.msgSend(self, "share", ?*Reference, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKRecordID?language=objc
pub const RecordID = opaque {
    pub const InternalInfo = objc.ExternalClass("CKRecordID", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn initWithRecordName(self: *@This(), recordName: ?*NSString) *@This() {
        return objc.msgSend(self, "initWithRecordName:", *@This(), .{recordName});
    }

    pub fn initWithRecordNameZoneID(self: *@This(), recordName: ?*NSString, zoneID: ?*RecordZoneID) *@This() {
        return objc.msgSend(self, "initWithRecordName:zoneID:", *@This(), .{recordName, zoneID});
    }

    pub fn recordName(self: *@This()) ?*NSString {
        return objc.msgSend(self, "recordName", ?*NSString, .{});
    }

    pub fn zoneID(self: *@This()) ?*RecordZoneID {
        return objc.msgSend(self, "zoneID", ?*RecordZoneID, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKRecordZoneID?language=objc
pub const RecordZoneID = opaque {
    pub const InternalInfo = objc.ExternalClass("CKRecordZoneID", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn initWithZoneNameOwnerName(self: *@This(), zoneName: ?*NSString, ownerName: ?*NSString) *@This() {
        return objc.msgSend(self, "initWithZoneName:ownerName:", *@This(), .{zoneName, ownerName});
    }

    pub fn zoneName(self: *@This()) ?*NSString {
        return objc.msgSend(self, "zoneName", ?*NSString, .{});
    }

    pub fn ownerName(self: *@This()) ?*NSString {
        return objc.msgSend(self, "ownerName", ?*NSString, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKDatabaseOperation?language=objc
pub const DatabaseOperation = opaque {
    pub const InternalInfo = objc.ExternalClass("CKDatabaseOperation", @This(), Operation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn database(self: *@This()) ?*Database {
        return objc.msgSend(self, "database", ?*Database, .{});
    }

    pub fn setDatabase(self: *@This(), database: ?*Database) void {
        return objc.msgSend(self, "setDatabase:", void, .{database});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKServerChangeToken?language=objc
pub const ServerChangeToken = opaque {
    pub const InternalInfo = objc.ExternalClass("CKServerChangeToken", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

};

pub const ShareParticipantAcceptanceStatus = enum(objc.NSInteger) {
    Unknown = 0,
    Pending = 1,
    Accepted = 2,
    Removed = 3,
};

pub const ShareParticipantPermission = enum(objc.NSInteger) {
    Unknown = 0,
    None = 1,
    ReadOnly = 2,
    ReadWrite = 3,
};

pub const ShareParticipantRole = enum(objc.NSInteger) {
    Unknown = 0,
    Owner = 1,
    PrivateUser = 3,
    PublicUser = 4,
};

pub const ShareParticipantType = enum(objc.NSInteger) {
    Unknown = 0,
    Owner = 1,
    PrivateUser = 3,
    PublicUser = 4,
};

/// https://developer.apple.com/documentation/CloudKit/CKShareParticipant?language=objc
pub const ShareParticipant = opaque {
    pub const InternalInfo = objc.ExternalClass("CKShareParticipant", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn userIdentity(self: *@This()) ?*UserIdentity {
        return objc.msgSend(self, "userIdentity", ?*UserIdentity, .{});
    }

    pub fn role(self: *@This()) ShareParticipantRole {
        return objc.msgSend(self, "role", ShareParticipantRole, .{});
    }

    pub fn setRole(self: *@This(), role: ShareParticipantRole) void {
        return objc.msgSend(self, "setRole:", void, .{role});
    }

    pub fn @"type"(self: *@This()) ShareParticipantType {
        return objc.msgSend(self, "type", ShareParticipantType, .{});
    }

    pub fn setType(self: *@This(), @"type": ShareParticipantType) void {
        return objc.msgSend(self, "setType:", void, .{@"type"});
    }

    pub fn acceptanceStatus(self: *@This()) ShareParticipantAcceptanceStatus {
        return objc.msgSend(self, "acceptanceStatus", ShareParticipantAcceptanceStatus, .{});
    }

    pub fn permission(self: *@This()) ShareParticipantPermission {
        return objc.msgSend(self, "permission", ShareParticipantPermission, .{});
    }

    pub fn setPermission(self: *@This(), permission: ShareParticipantPermission) void {
        return objc.msgSend(self, "setPermission:", void, .{permission});
    }

    pub fn participantID(self: *@This()) ?*NSString {
        return objc.msgSend(self, "participantID", ?*NSString, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKShare?language=objc
pub const Share = opaque {
    pub const InternalInfo = objc.ExternalClass("CKShare", @This(), Record, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithRootRecord(self: *@This(), rootRecord: ?*Record) *@This() {
        return objc.msgSend(self, "initWithRootRecord:", *@This(), .{rootRecord});
    }

    pub fn initWithRootRecordShareID(self: *@This(), rootRecord: ?*Record, shareID: ?*RecordID) *@This() {
        return objc.msgSend(self, "initWithRootRecord:shareID:", *@This(), .{rootRecord, shareID});
    }

    pub fn initWithRecordZoneID(self: *@This(), recordZoneID: ?*RecordZoneID) *@This() {
        return objc.msgSend(self, "initWithRecordZoneID:", *@This(), .{recordZoneID});
    }

    pub fn initWithCoder(self: *@This(), aDecoder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{aDecoder});
    }

    pub fn addParticipant(self: *@This(), participant: ?*ShareParticipant) void {
        return objc.msgSend(self, "addParticipant:", void, .{participant});
    }

    pub fn removeParticipant(self: *@This(), participant: ?*ShareParticipant) void {
        return objc.msgSend(self, "removeParticipant:", void, .{participant});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn initWithRecordType(self: *@This(), recordType: RecordType) *@This() {
        return objc.msgSend(self, "initWithRecordType:", *@This(), .{recordType});
    }

    pub fn initWithRecordTypeRecordID(self: *@This(), recordType: RecordType, recordID: ?*RecordID) *@This() {
        return objc.msgSend(self, "initWithRecordType:recordID:", *@This(), .{recordType, recordID});
    }

    pub fn initWithRecordTypeZoneID(self: *@This(), recordType: RecordType, zoneID: ?*RecordZoneID) *@This() {
        return objc.msgSend(self, "initWithRecordType:zoneID:", *@This(), .{recordType, zoneID});
    }

    pub fn publicPermission(self: *@This()) ShareParticipantPermission {
        return objc.msgSend(self, "publicPermission", ShareParticipantPermission, .{});
    }

    pub fn setPublicPermission(self: *@This(), publicPermission: ShareParticipantPermission) void {
        return objc.msgSend(self, "setPublicPermission:", void, .{publicPermission});
    }

    pub fn URL(self: *@This()) ?*foundation.URL {
        return objc.msgSend(self, "URL", ?*foundation.URL, .{});
    }

    pub fn participants(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "participants", ?*anyopaque, .{});
    }

    pub fn owner(self: *@This()) ?*ShareParticipant {
        return objc.msgSend(self, "owner", ?*ShareParticipant, .{});
    }

    pub fn currentUserParticipant(self: *@This()) ?*ShareParticipant {
        return objc.msgSend(self, "currentUserParticipant", ?*ShareParticipant, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKShareMetadata?language=objc
pub const ShareMetadata = opaque {
    pub const InternalInfo = objc.ExternalClass("CKShareMetadata", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn containerIdentifier(self: *@This()) ?*NSString {
        return objc.msgSend(self, "containerIdentifier", ?*NSString, .{});
    }

    pub fn share(self: *@This()) ?*Share {
        return objc.msgSend(self, "share", ?*Share, .{});
    }

    pub fn hierarchicalRootRecordID(self: *@This()) ?*RecordID {
        return objc.msgSend(self, "hierarchicalRootRecordID", ?*RecordID, .{});
    }

    pub fn participantRole(self: *@This()) ShareParticipantRole {
        return objc.msgSend(self, "participantRole", ShareParticipantRole, .{});
    }

    pub fn participantStatus(self: *@This()) ShareParticipantAcceptanceStatus {
        return objc.msgSend(self, "participantStatus", ShareParticipantAcceptanceStatus, .{});
    }

    pub fn participantPermission(self: *@This()) ShareParticipantPermission {
        return objc.msgSend(self, "participantPermission", ShareParticipantPermission, .{});
    }

    pub fn ownerIdentity(self: *@This()) ?*UserIdentity {
        return objc.msgSend(self, "ownerIdentity", ?*UserIdentity, .{});
    }

    pub fn rootRecord(self: *@This()) ?*Record {
        return objc.msgSend(self, "rootRecord", ?*Record, .{});
    }

    pub fn participantType(self: *@This()) ShareParticipantType {
        return objc.msgSend(self, "participantType", ShareParticipantType, .{});
    }

    pub fn rootRecordID(self: *@This()) ?*RecordID {
        return objc.msgSend(self, "rootRecordID", ?*RecordID, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKUserIdentity?language=objc
pub const UserIdentity = opaque {
    pub const InternalInfo = objc.ExternalClass("CKUserIdentity", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn userRecordID(self: *@This()) ?*RecordID {
        return objc.msgSend(self, "userRecordID", ?*RecordID, .{});
    }

    pub fn lookupInfo(self: *@This()) ?*UserIdentityLookupInfo {
        return objc.msgSend(self, "lookupInfo", ?*UserIdentityLookupInfo, .{});
    }

    pub fn nameComponents(self: *@This()) ?*foundation.PersonNameComponents {
        return objc.msgSend(self, "nameComponents", ?*foundation.PersonNameComponents, .{});
    }

    pub fn hasiCloudAccount(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasiCloudAccount", objc.BOOL, .{});
    }

    pub fn contactIdentifiers(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "contactIdentifiers", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKUserIdentityLookupInfo?language=objc
pub const UserIdentityLookupInfo = opaque {
    pub const InternalInfo = objc.ExternalClass("CKUserIdentityLookupInfo", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn initWithEmailAddress(self: *@This(), emailAddress: ?*NSString) *@This() {
        return objc.msgSend(self, "initWithEmailAddress:", *@This(), .{emailAddress});
    }

    pub fn initWithPhoneNumber(self: *@This(), phoneNumber: ?*NSString) *@This() {
        return objc.msgSend(self, "initWithPhoneNumber:", *@This(), .{phoneNumber});
    }

    pub fn initWithUserRecordID(self: *@This(), userRecordID: ?*RecordID) *@This() {
        return objc.msgSend(self, "initWithUserRecordID:", *@This(), .{userRecordID});
    }

    pub fn lookupInfosWithEmails(self: *@This(), emails: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "lookupInfosWithEmails:", ?*anyopaque, .{emails});
    }

    pub fn lookupInfosWithPhoneNumbers(self: *@This(), phoneNumbers: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "lookupInfosWithPhoneNumbers:", ?*anyopaque, .{phoneNumbers});
    }

    pub fn lookupInfosWithRecordIDs(self: *@This(), recordIDs: ?*anyopaque) ?*anyopaque {
        return objc.msgSend(self, "lookupInfosWithRecordIDs:", ?*anyopaque, .{recordIDs});
    }

    pub fn emailAddress(self: *@This()) ?*NSString {
        return objc.msgSend(self, "emailAddress", ?*NSString, .{});
    }

    pub fn phoneNumber(self: *@This()) ?*NSString {
        return objc.msgSend(self, "phoneNumber", ?*NSString, .{});
    }

    pub fn userRecordID(self: *@This()) ?*RecordID {
        return objc.msgSend(self, "userRecordID", ?*RecordID, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKAcceptSharesOperation?language=objc
pub const AcceptSharesOperation = opaque {
    pub const InternalInfo = objc.ExternalClass("CKAcceptSharesOperation", @This(), Operation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithShareMetadatas(self: *@This(), shareMetadatas: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithShareMetadatas:", *@This(), .{shareMetadatas});
    }

    pub fn shareMetadatas(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "shareMetadatas", ?*anyopaque, .{});
    }

    pub fn setShareMetadatas(self: *@This(), shareMetadatas: ?*anyopaque) void {
        return objc.msgSend(self, "setShareMetadatas:", void, .{shareMetadatas});
    }

    pub fn perShareCompletionBlock(self: *@This()) *const fn(?*ShareMetadata, ?*Share, ?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "perShareCompletionBlock", *const fn(?*ShareMetadata, ?*Share, ?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setPerShareCompletionBlock(self: *@This(), perShareCompletionBlock: *const fn(?*ShareMetadata, ?*Share, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setPerShareCompletionBlock:", void, .{perShareCompletionBlock});
    }

    pub fn acceptSharesCompletionBlock(self: *@This()) *const fn(?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "acceptSharesCompletionBlock", *const fn(?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setAcceptSharesCompletionBlock(self: *@This(), acceptSharesCompletionBlock: *const fn(?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setAcceptSharesCompletionBlock:", void, .{acceptSharesCompletionBlock});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKDiscoverAllUserIdentitiesOperation?language=objc
pub const DiscoverAllUserIdentitiesOperation = opaque {
    pub const InternalInfo = objc.ExternalClass("CKDiscoverAllUserIdentitiesOperation", @This(), Operation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn userIdentityDiscoveredBlock(self: *@This()) *const fn(?*UserIdentity) callconv(.C) void {
        return objc.msgSend(self, "userIdentityDiscoveredBlock", *const fn(?*UserIdentity) callconv(.C) void, .{});
    }

    pub fn setUserIdentityDiscoveredBlock(self: *@This(), userIdentityDiscoveredBlock: *const fn(?*UserIdentity) callconv(.C) void) void {
        return objc.msgSend(self, "setUserIdentityDiscoveredBlock:", void, .{userIdentityDiscoveredBlock});
    }

    pub fn discoverAllUserIdentitiesCompletionBlock(self: *@This()) *const fn(?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "discoverAllUserIdentitiesCompletionBlock", *const fn(?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setDiscoverAllUserIdentitiesCompletionBlock(self: *@This(), discoverAllUserIdentitiesCompletionBlock: *const fn(?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setDiscoverAllUserIdentitiesCompletionBlock:", void, .{discoverAllUserIdentitiesCompletionBlock});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKDiscoverUserIdentitiesOperation?language=objc
pub const DiscoverUserIdentitiesOperation = opaque {
    pub const InternalInfo = objc.ExternalClass("CKDiscoverUserIdentitiesOperation", @This(), Operation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithUserIdentityLookupInfos(self: *@This(), userIdentityLookupInfos: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithUserIdentityLookupInfos:", *@This(), .{userIdentityLookupInfos});
    }

    pub fn userIdentityLookupInfos(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "userIdentityLookupInfos", ?*anyopaque, .{});
    }

    pub fn setUserIdentityLookupInfos(self: *@This(), userIdentityLookupInfos: ?*anyopaque) void {
        return objc.msgSend(self, "setUserIdentityLookupInfos:", void, .{userIdentityLookupInfos});
    }

    pub fn userIdentityDiscoveredBlock(self: *@This()) *const fn(?*UserIdentity, ?*UserIdentityLookupInfo) callconv(.C) void {
        return objc.msgSend(self, "userIdentityDiscoveredBlock", *const fn(?*UserIdentity, ?*UserIdentityLookupInfo) callconv(.C) void, .{});
    }

    pub fn setUserIdentityDiscoveredBlock(self: *@This(), userIdentityDiscoveredBlock: *const fn(?*UserIdentity, ?*UserIdentityLookupInfo) callconv(.C) void) void {
        return objc.msgSend(self, "setUserIdentityDiscoveredBlock:", void, .{userIdentityDiscoveredBlock});
    }

    pub fn discoverUserIdentitiesCompletionBlock(self: *@This()) *const fn(?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "discoverUserIdentitiesCompletionBlock", *const fn(?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setDiscoverUserIdentitiesCompletionBlock(self: *@This(), discoverUserIdentitiesCompletionBlock: *const fn(?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setDiscoverUserIdentitiesCompletionBlock:", void, .{discoverUserIdentitiesCompletionBlock});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKFetchDatabaseChangesOperation?language=objc
pub const FetchDatabaseChangesOperation = opaque {
    pub const InternalInfo = objc.ExternalClass("CKFetchDatabaseChangesOperation", @This(), DatabaseOperation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithPreviousServerChangeToken(self: *@This(), previousServerChangeToken: ?*ServerChangeToken) *@This() {
        return objc.msgSend(self, "initWithPreviousServerChangeToken:", *@This(), .{previousServerChangeToken});
    }

    pub fn previousServerChangeToken(self: *@This()) ?*ServerChangeToken {
        return objc.msgSend(self, "previousServerChangeToken", ?*ServerChangeToken, .{});
    }

    pub fn setPreviousServerChangeToken(self: *@This(), previousServerChangeToken: ?*ServerChangeToken) void {
        return objc.msgSend(self, "setPreviousServerChangeToken:", void, .{previousServerChangeToken});
    }

    pub fn resultsLimit(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "resultsLimit", objc.NSUInteger, .{});
    }

    pub fn setResultsLimit(self: *@This(), resultsLimit: objc.NSUInteger) void {
        return objc.msgSend(self, "setResultsLimit:", void, .{resultsLimit});
    }

    pub fn fetchAllChanges(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "fetchAllChanges", objc.BOOL, .{});
    }

    pub fn setFetchAllChanges(self: *@This(), fetchAllChanges: objc.BOOL) void {
        return objc.msgSend(self, "setFetchAllChanges:", void, .{fetchAllChanges});
    }

    pub fn recordZoneWithIDChangedBlock(self: *@This()) *const fn(?*RecordZoneID) callconv(.C) void {
        return objc.msgSend(self, "recordZoneWithIDChangedBlock", *const fn(?*RecordZoneID) callconv(.C) void, .{});
    }

    pub fn setRecordZoneWithIDChangedBlock(self: *@This(), recordZoneWithIDChangedBlock: *const fn(?*RecordZoneID) callconv(.C) void) void {
        return objc.msgSend(self, "setRecordZoneWithIDChangedBlock:", void, .{recordZoneWithIDChangedBlock});
    }

    pub fn recordZoneWithIDWasDeletedBlock(self: *@This()) *const fn(?*RecordZoneID) callconv(.C) void {
        return objc.msgSend(self, "recordZoneWithIDWasDeletedBlock", *const fn(?*RecordZoneID) callconv(.C) void, .{});
    }

    pub fn setRecordZoneWithIDWasDeletedBlock(self: *@This(), recordZoneWithIDWasDeletedBlock: *const fn(?*RecordZoneID) callconv(.C) void) void {
        return objc.msgSend(self, "setRecordZoneWithIDWasDeletedBlock:", void, .{recordZoneWithIDWasDeletedBlock});
    }

    pub fn recordZoneWithIDWasPurgedBlock(self: *@This()) *const fn(?*RecordZoneID) callconv(.C) void {
        return objc.msgSend(self, "recordZoneWithIDWasPurgedBlock", *const fn(?*RecordZoneID) callconv(.C) void, .{});
    }

    pub fn setRecordZoneWithIDWasPurgedBlock(self: *@This(), recordZoneWithIDWasPurgedBlock: *const fn(?*RecordZoneID) callconv(.C) void) void {
        return objc.msgSend(self, "setRecordZoneWithIDWasPurgedBlock:", void, .{recordZoneWithIDWasPurgedBlock});
    }

    pub fn recordZoneWithIDWasDeletedDueToUserEncryptedDataResetBlock(self: *@This()) *const fn(?*RecordZoneID) callconv(.C) void {
        return objc.msgSend(self, "recordZoneWithIDWasDeletedDueToUserEncryptedDataResetBlock", *const fn(?*RecordZoneID) callconv(.C) void, .{});
    }

    pub fn setRecordZoneWithIDWasDeletedDueToUserEncryptedDataResetBlock(self: *@This(), recordZoneWithIDWasDeletedDueToUserEncryptedDataResetBlock: *const fn(?*RecordZoneID) callconv(.C) void) void {
        return objc.msgSend(self, "setRecordZoneWithIDWasDeletedDueToUserEncryptedDataResetBlock:", void, .{recordZoneWithIDWasDeletedDueToUserEncryptedDataResetBlock});
    }

    pub fn changeTokenUpdatedBlock(self: *@This()) *const fn(?*ServerChangeToken) callconv(.C) void {
        return objc.msgSend(self, "changeTokenUpdatedBlock", *const fn(?*ServerChangeToken) callconv(.C) void, .{});
    }

    pub fn setChangeTokenUpdatedBlock(self: *@This(), changeTokenUpdatedBlock: *const fn(?*ServerChangeToken) callconv(.C) void) void {
        return objc.msgSend(self, "setChangeTokenUpdatedBlock:", void, .{changeTokenUpdatedBlock});
    }

    pub fn fetchDatabaseChangesCompletionBlock(self: *@This()) *const fn(?*ServerChangeToken, objc.BOOL, ?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "fetchDatabaseChangesCompletionBlock", *const fn(?*ServerChangeToken, objc.BOOL, ?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setFetchDatabaseChangesCompletionBlock(self: *@This(), fetchDatabaseChangesCompletionBlock: *const fn(?*ServerChangeToken, objc.BOOL, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setFetchDatabaseChangesCompletionBlock:", void, .{fetchDatabaseChangesCompletionBlock});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKFetchNotificationChangesOperation?language=objc
pub const FetchNotificationChangesOperation = opaque {
    pub const InternalInfo = objc.ExternalClass("CKFetchNotificationChangesOperation", @This(), Operation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;
};

/// https://developer.apple.com/documentation/CloudKit/CKFetchRecordChangesOperation?language=objc
pub const FetchRecordChangesOperation = opaque {
    pub const InternalInfo = objc.ExternalClass("CKFetchRecordChangesOperation", @This(), DatabaseOperation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithRecordZoneIDPreviousServerChangeToken(self: *@This(), recordZoneID: ?*RecordZoneID, previousServerChangeToken: ?*ServerChangeToken) *@This() {
        return objc.msgSend(self, "initWithRecordZoneID:previousServerChangeToken:", *@This(), .{recordZoneID, previousServerChangeToken});
    }

    pub fn recordZoneID(self: *@This()) ?*RecordZoneID {
        return objc.msgSend(self, "recordZoneID", ?*RecordZoneID, .{});
    }

    pub fn setRecordZoneID(self: *@This(), recordZoneID: ?*RecordZoneID) void {
        return objc.msgSend(self, "setRecordZoneID:", void, .{recordZoneID});
    }

    pub fn previousServerChangeToken(self: *@This()) ?*ServerChangeToken {
        return objc.msgSend(self, "previousServerChangeToken", ?*ServerChangeToken, .{});
    }

    pub fn setPreviousServerChangeToken(self: *@This(), previousServerChangeToken: ?*ServerChangeToken) void {
        return objc.msgSend(self, "setPreviousServerChangeToken:", void, .{previousServerChangeToken});
    }

    pub fn resultsLimit(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "resultsLimit", objc.NSUInteger, .{});
    }

    pub fn setResultsLimit(self: *@This(), resultsLimit: objc.NSUInteger) void {
        return objc.msgSend(self, "setResultsLimit:", void, .{resultsLimit});
    }

    pub fn desiredKeys(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "desiredKeys", ?*anyopaque, .{});
    }

    pub fn setDesiredKeys(self: *@This(), desiredKeys: ?*anyopaque) void {
        return objc.msgSend(self, "setDesiredKeys:", void, .{desiredKeys});
    }

    pub fn recordChangedBlock(self: *@This()) *const fn(?*Record) callconv(.C) void {
        return objc.msgSend(self, "recordChangedBlock", *const fn(?*Record) callconv(.C) void, .{});
    }

    pub fn setRecordChangedBlock(self: *@This(), recordChangedBlock: *const fn(?*Record) callconv(.C) void) void {
        return objc.msgSend(self, "setRecordChangedBlock:", void, .{recordChangedBlock});
    }

    pub fn recordWithIDWasDeletedBlock(self: *@This()) *const fn(?*RecordID) callconv(.C) void {
        return objc.msgSend(self, "recordWithIDWasDeletedBlock", *const fn(?*RecordID) callconv(.C) void, .{});
    }

    pub fn setRecordWithIDWasDeletedBlock(self: *@This(), recordWithIDWasDeletedBlock: *const fn(?*RecordID) callconv(.C) void) void {
        return objc.msgSend(self, "setRecordWithIDWasDeletedBlock:", void, .{recordWithIDWasDeletedBlock});
    }

    pub fn moreComing(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "moreComing", objc.BOOL, .{});
    }

    pub fn fetchRecordChangesCompletionBlock(self: *@This()) *const fn(?*ServerChangeToken, ?*foundation.Data, ?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "fetchRecordChangesCompletionBlock", *const fn(?*ServerChangeToken, ?*foundation.Data, ?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setFetchRecordChangesCompletionBlock(self: *@This(), fetchRecordChangesCompletionBlock: *const fn(?*ServerChangeToken, ?*foundation.Data, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setFetchRecordChangesCompletionBlock:", void, .{fetchRecordChangesCompletionBlock});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKFetchRecordsOperation?language=objc
pub const FetchRecordsOperation = opaque {
    pub const InternalInfo = objc.ExternalClass("CKFetchRecordsOperation", @This(), DatabaseOperation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithRecordIDs(self: *@This(), recordIDs: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithRecordIDs:", *@This(), .{recordIDs});
    }

    pub fn fetchCurrentUserRecordOperation(self: *@This()) *@This() {
        return objc.msgSend(self, "fetchCurrentUserRecordOperation", *@This(), .{});
    }

    pub fn recordIDs(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "recordIDs", ?*anyopaque, .{});
    }

    pub fn setRecordIDs(self: *@This(), recordIDs: ?*anyopaque) void {
        return objc.msgSend(self, "setRecordIDs:", void, .{recordIDs});
    }

    pub fn desiredKeys(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "desiredKeys", ?*anyopaque, .{});
    }

    pub fn setDesiredKeys(self: *@This(), desiredKeys: ?*anyopaque) void {
        return objc.msgSend(self, "setDesiredKeys:", void, .{desiredKeys});
    }

    pub fn perRecordProgressBlock(self: *@This()) *const fn(?*RecordID, f64) callconv(.C) void {
        return objc.msgSend(self, "perRecordProgressBlock", *const fn(?*RecordID, f64) callconv(.C) void, .{});
    }

    pub fn setPerRecordProgressBlock(self: *@This(), perRecordProgressBlock: *const fn(?*RecordID, f64) callconv(.C) void) void {
        return objc.msgSend(self, "setPerRecordProgressBlock:", void, .{perRecordProgressBlock});
    }

    pub fn perRecordCompletionBlock(self: *@This()) *const fn(?*Record, ?*RecordID, ?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "perRecordCompletionBlock", *const fn(?*Record, ?*RecordID, ?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setPerRecordCompletionBlock(self: *@This(), perRecordCompletionBlock: *const fn(?*Record, ?*RecordID, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setPerRecordCompletionBlock:", void, .{perRecordCompletionBlock});
    }

    pub fn fetchRecordsCompletionBlock(self: *@This()) *const fn(?*anyopaque, ?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "fetchRecordsCompletionBlock", *const fn(?*anyopaque, ?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setFetchRecordsCompletionBlock(self: *@This(), fetchRecordsCompletionBlock: *const fn(?*anyopaque, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setFetchRecordsCompletionBlock:", void, .{fetchRecordsCompletionBlock});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKFetchRecordZoneChangesOperation?language=objc
pub const FetchRecordZoneChangesOperation = opaque {
    pub const InternalInfo = objc.ExternalClass("CKFetchRecordZoneChangesOperation", @This(), DatabaseOperation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithRecordZoneIDsConfigurationsByRecordZoneID(self: *@This(), recordZoneIDs: ?*anyopaque, configurationsByRecordZoneID: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithRecordZoneIDs:configurationsByRecordZoneID:", *@This(), .{recordZoneIDs, configurationsByRecordZoneID});
    }

    pub fn recordZoneIDs(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "recordZoneIDs", ?*anyopaque, .{});
    }

    pub fn setRecordZoneIDs(self: *@This(), recordZoneIDs: ?*anyopaque) void {
        return objc.msgSend(self, "setRecordZoneIDs:", void, .{recordZoneIDs});
    }

    pub fn configurationsByRecordZoneID(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "configurationsByRecordZoneID", ?*anyopaque, .{});
    }

    pub fn setConfigurationsByRecordZoneID(self: *@This(), configurationsByRecordZoneID: ?*anyopaque) void {
        return objc.msgSend(self, "setConfigurationsByRecordZoneID:", void, .{configurationsByRecordZoneID});
    }

    pub fn fetchAllChanges(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "fetchAllChanges", objc.BOOL, .{});
    }

    pub fn setFetchAllChanges(self: *@This(), fetchAllChanges: objc.BOOL) void {
        return objc.msgSend(self, "setFetchAllChanges:", void, .{fetchAllChanges});
    }

    pub fn recordChangedBlock(self: *@This()) *const fn(?*Record) callconv(.C) void {
        return objc.msgSend(self, "recordChangedBlock", *const fn(?*Record) callconv(.C) void, .{});
    }

    pub fn setRecordChangedBlock(self: *@This(), recordChangedBlock: *const fn(?*Record) callconv(.C) void) void {
        return objc.msgSend(self, "setRecordChangedBlock:", void, .{recordChangedBlock});
    }

    pub fn recordWasChangedBlock(self: *@This()) *const fn(?*RecordID, ?*Record, ?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "recordWasChangedBlock", *const fn(?*RecordID, ?*Record, ?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setRecordWasChangedBlock(self: *@This(), recordWasChangedBlock: *const fn(?*RecordID, ?*Record, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setRecordWasChangedBlock:", void, .{recordWasChangedBlock});
    }

    pub fn recordWithIDWasDeletedBlock(self: *@This()) *const fn(?*RecordID, RecordType) callconv(.C) void {
        return objc.msgSend(self, "recordWithIDWasDeletedBlock", *const fn(?*RecordID, RecordType) callconv(.C) void, .{});
    }

    pub fn setRecordWithIDWasDeletedBlock(self: *@This(), recordWithIDWasDeletedBlock: *const fn(?*RecordID, RecordType) callconv(.C) void) void {
        return objc.msgSend(self, "setRecordWithIDWasDeletedBlock:", void, .{recordWithIDWasDeletedBlock});
    }

    pub fn recordZoneChangeTokensUpdatedBlock(self: *@This()) *const fn(?*RecordZoneID, ?*ServerChangeToken, ?*foundation.Data) callconv(.C) void {
        return objc.msgSend(self, "recordZoneChangeTokensUpdatedBlock", *const fn(?*RecordZoneID, ?*ServerChangeToken, ?*foundation.Data) callconv(.C) void, .{});
    }

    pub fn setRecordZoneChangeTokensUpdatedBlock(self: *@This(), recordZoneChangeTokensUpdatedBlock: *const fn(?*RecordZoneID, ?*ServerChangeToken, ?*foundation.Data) callconv(.C) void) void {
        return objc.msgSend(self, "setRecordZoneChangeTokensUpdatedBlock:", void, .{recordZoneChangeTokensUpdatedBlock});
    }

    pub fn recordZoneFetchCompletionBlock(self: *@This()) *const fn(?*RecordZoneID, ?*ServerChangeToken, ?*foundation.Data, objc.BOOL, ?*foundation.Error, ) callconv(.C) void {
        return objc.msgSend(self, "recordZoneFetchCompletionBlock", *const fn(?*RecordZoneID, ?*ServerChangeToken, ?*foundation.Data, objc.BOOL, ?*foundation.Error, ) callconv(.C) void, .{});
    }

    pub fn setRecordZoneFetchCompletionBlock(self: *@This(), recordZoneFetchCompletionBlock: *const fn(?*RecordZoneID, ?*ServerChangeToken, ?*foundation.Data, objc.BOOL, ?*foundation.Error, ) callconv(.C) void) void {
        return objc.msgSend(self, "setRecordZoneFetchCompletionBlock:", void, .{recordZoneFetchCompletionBlock});
    }

    pub fn fetchRecordZoneChangesCompletionBlock(self: *@This()) *const fn(?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "fetchRecordZoneChangesCompletionBlock", *const fn(?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setFetchRecordZoneChangesCompletionBlock(self: *@This(), fetchRecordZoneChangesCompletionBlock: *const fn(?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setFetchRecordZoneChangesCompletionBlock:", void, .{fetchRecordZoneChangesCompletionBlock});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKFetchRecordZoneChangesConfiguration?language=objc
pub const FetchRecordZoneChangesConfiguration = opaque {
    pub const InternalInfo = objc.ExternalClass("CKFetchRecordZoneChangesConfiguration", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn previousServerChangeToken(self: *@This()) ?*ServerChangeToken {
        return objc.msgSend(self, "previousServerChangeToken", ?*ServerChangeToken, .{});
    }

    pub fn setPreviousServerChangeToken(self: *@This(), previousServerChangeToken: ?*ServerChangeToken) void {
        return objc.msgSend(self, "setPreviousServerChangeToken:", void, .{previousServerChangeToken});
    }

    pub fn resultsLimit(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "resultsLimit", objc.NSUInteger, .{});
    }

    pub fn setResultsLimit(self: *@This(), resultsLimit: objc.NSUInteger) void {
        return objc.msgSend(self, "setResultsLimit:", void, .{resultsLimit});
    }

    pub fn desiredKeys(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "desiredKeys", ?*anyopaque, .{});
    }

    pub fn setDesiredKeys(self: *@This(), desiredKeys: ?*anyopaque) void {
        return objc.msgSend(self, "setDesiredKeys:", void, .{desiredKeys});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKFetchRecordZoneChangesOptions?language=objc
pub const FetchRecordZoneChangesOptions = opaque {
    pub const InternalInfo = objc.ExternalClass("CKFetchRecordZoneChangesOptions", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn previousServerChangeToken(self: *@This()) ?*ServerChangeToken {
        return objc.msgSend(self, "previousServerChangeToken", ?*ServerChangeToken, .{});
    }

    pub fn setPreviousServerChangeToken(self: *@This(), previousServerChangeToken: ?*ServerChangeToken) void {
        return objc.msgSend(self, "setPreviousServerChangeToken:", void, .{previousServerChangeToken});
    }

    pub fn resultsLimit(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "resultsLimit", objc.NSUInteger, .{});
    }

    pub fn setResultsLimit(self: *@This(), resultsLimit: objc.NSUInteger) void {
        return objc.msgSend(self, "setResultsLimit:", void, .{resultsLimit});
    }

    pub fn desiredKeys(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "desiredKeys", ?*anyopaque, .{});
    }

    pub fn setDesiredKeys(self: *@This(), desiredKeys: ?*anyopaque) void {
        return objc.msgSend(self, "setDesiredKeys:", void, .{desiredKeys});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKFetchRecordZonesOperation?language=objc
pub const FetchRecordZonesOperation = opaque {
    pub const InternalInfo = objc.ExternalClass("CKFetchRecordZonesOperation", @This(), DatabaseOperation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn fetchAllRecordZonesOperation(self: *@This()) *@This() {
        return objc.msgSend(self, "fetchAllRecordZonesOperation", *@This(), .{});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithRecordZoneIDs(self: *@This(), zoneIDs: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithRecordZoneIDs:", *@This(), .{zoneIDs});
    }

    pub fn recordZoneIDs(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "recordZoneIDs", ?*anyopaque, .{});
    }

    pub fn setRecordZoneIDs(self: *@This(), recordZoneIDs: ?*anyopaque) void {
        return objc.msgSend(self, "setRecordZoneIDs:", void, .{recordZoneIDs});
    }

    pub fn perRecordZoneCompletionBlock(self: *@This()) *const fn(?*RecordZoneID, ?*RecordZone, ?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "perRecordZoneCompletionBlock", *const fn(?*RecordZoneID, ?*RecordZone, ?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setPerRecordZoneCompletionBlock(self: *@This(), perRecordZoneCompletionBlock: *const fn(?*RecordZoneID, ?*RecordZone, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setPerRecordZoneCompletionBlock:", void, .{perRecordZoneCompletionBlock});
    }

    pub fn fetchRecordZonesCompletionBlock(self: *@This()) *const fn(?*anyopaque, ?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "fetchRecordZonesCompletionBlock", *const fn(?*anyopaque, ?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setFetchRecordZonesCompletionBlock(self: *@This(), fetchRecordZonesCompletionBlock: *const fn(?*anyopaque, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setFetchRecordZonesCompletionBlock:", void, .{fetchRecordZonesCompletionBlock});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKFetchShareMetadataOperation?language=objc
pub const FetchShareMetadataOperation = opaque {
    pub const InternalInfo = objc.ExternalClass("CKFetchShareMetadataOperation", @This(), Operation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithShareURLs(self: *@This(), shareURLs: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithShareURLs:", *@This(), .{shareURLs});
    }

    pub fn shareURLs(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "shareURLs", ?*anyopaque, .{});
    }

    pub fn setShareURLs(self: *@This(), shareURLs: ?*anyopaque) void {
        return objc.msgSend(self, "setShareURLs:", void, .{shareURLs});
    }

    pub fn shouldFetchRootRecord(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "shouldFetchRootRecord", objc.BOOL, .{});
    }

    pub fn setShouldFetchRootRecord(self: *@This(), shouldFetchRootRecord: objc.BOOL) void {
        return objc.msgSend(self, "setShouldFetchRootRecord:", void, .{shouldFetchRootRecord});
    }

    pub fn rootRecordDesiredKeys(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "rootRecordDesiredKeys", ?*anyopaque, .{});
    }

    pub fn setRootRecordDesiredKeys(self: *@This(), rootRecordDesiredKeys: ?*anyopaque) void {
        return objc.msgSend(self, "setRootRecordDesiredKeys:", void, .{rootRecordDesiredKeys});
    }

    pub fn perShareMetadataBlock(self: *@This()) *const fn(?*foundation.URL, ?*ShareMetadata, ?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "perShareMetadataBlock", *const fn(?*foundation.URL, ?*ShareMetadata, ?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setPerShareMetadataBlock(self: *@This(), perShareMetadataBlock: *const fn(?*foundation.URL, ?*ShareMetadata, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setPerShareMetadataBlock:", void, .{perShareMetadataBlock});
    }

    pub fn fetchShareMetadataCompletionBlock(self: *@This()) *const fn(?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "fetchShareMetadataCompletionBlock", *const fn(?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setFetchShareMetadataCompletionBlock(self: *@This(), fetchShareMetadataCompletionBlock: *const fn(?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setFetchShareMetadataCompletionBlock:", void, .{fetchShareMetadataCompletionBlock});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKFetchShareParticipantsOperation?language=objc
pub const FetchShareParticipantsOperation = opaque {
    pub const InternalInfo = objc.ExternalClass("CKFetchShareParticipantsOperation", @This(), Operation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithUserIdentityLookupInfos(self: *@This(), userIdentityLookupInfos: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithUserIdentityLookupInfos:", *@This(), .{userIdentityLookupInfos});
    }

    pub fn userIdentityLookupInfos(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "userIdentityLookupInfos", ?*anyopaque, .{});
    }

    pub fn setUserIdentityLookupInfos(self: *@This(), userIdentityLookupInfos: ?*anyopaque) void {
        return objc.msgSend(self, "setUserIdentityLookupInfos:", void, .{userIdentityLookupInfos});
    }

    pub fn shareParticipantFetchedBlock(self: *@This()) *const fn(?*ShareParticipant) callconv(.C) void {
        return objc.msgSend(self, "shareParticipantFetchedBlock", *const fn(?*ShareParticipant) callconv(.C) void, .{});
    }

    pub fn setShareParticipantFetchedBlock(self: *@This(), shareParticipantFetchedBlock: *const fn(?*ShareParticipant) callconv(.C) void) void {
        return objc.msgSend(self, "setShareParticipantFetchedBlock:", void, .{shareParticipantFetchedBlock});
    }

    pub fn perShareParticipantCompletionBlock(self: *@This()) *const fn(?*UserIdentityLookupInfo, ?*ShareParticipant, ?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "perShareParticipantCompletionBlock", *const fn(?*UserIdentityLookupInfo, ?*ShareParticipant, ?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setPerShareParticipantCompletionBlock(self: *@This(), perShareParticipantCompletionBlock: *const fn(?*UserIdentityLookupInfo, ?*ShareParticipant, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setPerShareParticipantCompletionBlock:", void, .{perShareParticipantCompletionBlock});
    }

    pub fn fetchShareParticipantsCompletionBlock(self: *@This()) *const fn(?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "fetchShareParticipantsCompletionBlock", *const fn(?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setFetchShareParticipantsCompletionBlock(self: *@This(), fetchShareParticipantsCompletionBlock: *const fn(?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setFetchShareParticipantsCompletionBlock:", void, .{fetchShareParticipantsCompletionBlock});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKFetchSubscriptionsOperation?language=objc
pub const FetchSubscriptionsOperation = opaque {
    pub const InternalInfo = objc.ExternalClass("CKFetchSubscriptionsOperation", @This(), DatabaseOperation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn fetchAllSubscriptionsOperation(self: *@This()) *@This() {
        return objc.msgSend(self, "fetchAllSubscriptionsOperation", *@This(), .{});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithSubscriptionIDs(self: *@This(), subscriptionIDs: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithSubscriptionIDs:", *@This(), .{subscriptionIDs});
    }

    pub fn subscriptionIDs(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "subscriptionIDs", ?*anyopaque, .{});
    }

    pub fn setSubscriptionIDs(self: *@This(), subscriptionIDs: ?*anyopaque) void {
        return objc.msgSend(self, "setSubscriptionIDs:", void, .{subscriptionIDs});
    }

    pub fn perSubscriptionCompletionBlock(self: *@This()) *const fn(SubscriptionID, ?*Subscription, ?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "perSubscriptionCompletionBlock", *const fn(SubscriptionID, ?*Subscription, ?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setPerSubscriptionCompletionBlock(self: *@This(), perSubscriptionCompletionBlock: *const fn(SubscriptionID, ?*Subscription, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setPerSubscriptionCompletionBlock:", void, .{perSubscriptionCompletionBlock});
    }

    pub fn fetchSubscriptionCompletionBlock(self: *@This()) *const fn(?*anyopaque, ?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "fetchSubscriptionCompletionBlock", *const fn(?*anyopaque, ?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setFetchSubscriptionCompletionBlock(self: *@This(), fetchSubscriptionCompletionBlock: *const fn(?*anyopaque, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setFetchSubscriptionCompletionBlock:", void, .{fetchSubscriptionCompletionBlock});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKFetchWebAuthTokenOperation?language=objc
pub const FetchWebAuthTokenOperation = opaque {
    pub const InternalInfo = objc.ExternalClass("CKFetchWebAuthTokenOperation", @This(), DatabaseOperation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithAPIToken(self: *@This(), APIToken: ?*NSString) *@This() {
        return objc.msgSend(self, "initWithAPIToken:", *@This(), .{APIToken});
    }

    pub fn APIToken(self: *@This()) ?*NSString {
        return objc.msgSend(self, "APIToken", ?*NSString, .{});
    }

    pub fn setAPIToken(self: *@This(), APIToken: ?*NSString) void {
        return objc.msgSend(self, "setAPIToken:", void, .{APIToken});
    }

    pub fn fetchWebAuthTokenCompletionBlock(self: *@This()) *const fn(?*NSString, ?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "fetchWebAuthTokenCompletionBlock", *const fn(?*NSString, ?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setFetchWebAuthTokenCompletionBlock(self: *@This(), fetchWebAuthTokenCompletionBlock: *const fn(?*NSString, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setFetchWebAuthTokenCompletionBlock:", void, .{fetchWebAuthTokenCompletionBlock});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKMarkNotificationsReadOperation?language=objc
pub const MarkNotificationsReadOperation = opaque {
    pub const InternalInfo = objc.ExternalClass("CKMarkNotificationsReadOperation", @This(), Operation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;
};

/// https://developer.apple.com/documentation/CloudKit/CKModifyBadgeOperation?language=objc
pub const ModifyBadgeOperation = opaque {
    pub const InternalInfo = objc.ExternalClass("CKModifyBadgeOperation", @This(), Operation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;
};

pub const RecordSavePolicy = enum(objc.NSInteger) {
    IfServerRecordUnchanged = 0,
    ChangedKeys = 1,
    AllKeys = 2,
};

/// https://developer.apple.com/documentation/CloudKit/CKModifyRecordsOperation?language=objc
pub const ModifyRecordsOperation = opaque {
    pub const InternalInfo = objc.ExternalClass("CKModifyRecordsOperation", @This(), DatabaseOperation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithRecordsToSaveRecordIDsToDelete(self: *@This(), records: ?*anyopaque, recordIDs: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithRecordsToSave:recordIDsToDelete:", *@This(), .{records, recordIDs});
    }

    pub fn recordsToSave(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "recordsToSave", ?*anyopaque, .{});
    }

    pub fn setRecordsToSave(self: *@This(), recordsToSave: ?*anyopaque) void {
        return objc.msgSend(self, "setRecordsToSave:", void, .{recordsToSave});
    }

    pub fn recordIDsToDelete(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "recordIDsToDelete", ?*anyopaque, .{});
    }

    pub fn setRecordIDsToDelete(self: *@This(), recordIDsToDelete: ?*anyopaque) void {
        return objc.msgSend(self, "setRecordIDsToDelete:", void, .{recordIDsToDelete});
    }

    pub fn savePolicy(self: *@This()) RecordSavePolicy {
        return objc.msgSend(self, "savePolicy", RecordSavePolicy, .{});
    }

    pub fn setSavePolicy(self: *@This(), savePolicy: RecordSavePolicy) void {
        return objc.msgSend(self, "setSavePolicy:", void, .{savePolicy});
    }

    pub fn clientChangeTokenData(self: *@This()) ?*foundation.Data {
        return objc.msgSend(self, "clientChangeTokenData", ?*foundation.Data, .{});
    }

    pub fn setClientChangeTokenData(self: *@This(), clientChangeTokenData: ?*foundation.Data) void {
        return objc.msgSend(self, "setClientChangeTokenData:", void, .{clientChangeTokenData});
    }

    pub fn atomic(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "atomic", objc.BOOL, .{});
    }

    pub fn setAtomic(self: *@This(), atomic: objc.BOOL) void {
        return objc.msgSend(self, "setAtomic:", void, .{atomic});
    }

    pub fn perRecordProgressBlock(self: *@This()) *const fn(?*Record, f64) callconv(.C) void {
        return objc.msgSend(self, "perRecordProgressBlock", *const fn(?*Record, f64) callconv(.C) void, .{});
    }

    pub fn setPerRecordProgressBlock(self: *@This(), perRecordProgressBlock: *const fn(?*Record, f64) callconv(.C) void) void {
        return objc.msgSend(self, "setPerRecordProgressBlock:", void, .{perRecordProgressBlock});
    }

    pub fn perRecordCompletionBlock(self: *@This()) *const fn(?*Record, ?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "perRecordCompletionBlock", *const fn(?*Record, ?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setPerRecordCompletionBlock(self: *@This(), perRecordCompletionBlock: *const fn(?*Record, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setPerRecordCompletionBlock:", void, .{perRecordCompletionBlock});
    }

    pub fn perRecordSaveBlock(self: *@This()) *const fn(?*RecordID, ?*Record, ?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "perRecordSaveBlock", *const fn(?*RecordID, ?*Record, ?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setPerRecordSaveBlock(self: *@This(), perRecordSaveBlock: *const fn(?*RecordID, ?*Record, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setPerRecordSaveBlock:", void, .{perRecordSaveBlock});
    }

    pub fn perRecordDeleteBlock(self: *@This()) *const fn(?*RecordID, ?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "perRecordDeleteBlock", *const fn(?*RecordID, ?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setPerRecordDeleteBlock(self: *@This(), perRecordDeleteBlock: *const fn(?*RecordID, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setPerRecordDeleteBlock:", void, .{perRecordDeleteBlock});
    }

    pub fn modifyRecordsCompletionBlock(self: *@This()) *const fn(?*anyopaque, ?*anyopaque, ?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "modifyRecordsCompletionBlock", *const fn(?*anyopaque, ?*anyopaque, ?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setModifyRecordsCompletionBlock(self: *@This(), modifyRecordsCompletionBlock: *const fn(?*anyopaque, ?*anyopaque, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setModifyRecordsCompletionBlock:", void, .{modifyRecordsCompletionBlock});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKModifyRecordZonesOperation?language=objc
pub const ModifyRecordZonesOperation = opaque {
    pub const InternalInfo = objc.ExternalClass("CKModifyRecordZonesOperation", @This(), DatabaseOperation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithRecordZonesToSaveRecordZoneIDsToDelete(self: *@This(), recordZonesToSave: ?*anyopaque, recordZoneIDsToDelete: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithRecordZonesToSave:recordZoneIDsToDelete:", *@This(), .{recordZonesToSave, recordZoneIDsToDelete});
    }

    pub fn recordZonesToSave(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "recordZonesToSave", ?*anyopaque, .{});
    }

    pub fn setRecordZonesToSave(self: *@This(), recordZonesToSave: ?*anyopaque) void {
        return objc.msgSend(self, "setRecordZonesToSave:", void, .{recordZonesToSave});
    }

    pub fn recordZoneIDsToDelete(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "recordZoneIDsToDelete", ?*anyopaque, .{});
    }

    pub fn setRecordZoneIDsToDelete(self: *@This(), recordZoneIDsToDelete: ?*anyopaque) void {
        return objc.msgSend(self, "setRecordZoneIDsToDelete:", void, .{recordZoneIDsToDelete});
    }

    pub fn perRecordZoneSaveBlock(self: *@This()) *const fn(?*RecordZoneID, ?*RecordZone, ?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "perRecordZoneSaveBlock", *const fn(?*RecordZoneID, ?*RecordZone, ?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setPerRecordZoneSaveBlock(self: *@This(), perRecordZoneSaveBlock: *const fn(?*RecordZoneID, ?*RecordZone, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setPerRecordZoneSaveBlock:", void, .{perRecordZoneSaveBlock});
    }

    pub fn perRecordZoneDeleteBlock(self: *@This()) *const fn(?*RecordZoneID, ?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "perRecordZoneDeleteBlock", *const fn(?*RecordZoneID, ?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setPerRecordZoneDeleteBlock(self: *@This(), perRecordZoneDeleteBlock: *const fn(?*RecordZoneID, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setPerRecordZoneDeleteBlock:", void, .{perRecordZoneDeleteBlock});
    }

    pub fn modifyRecordZonesCompletionBlock(self: *@This()) *const fn(?*anyopaque, ?*anyopaque, ?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "modifyRecordZonesCompletionBlock", *const fn(?*anyopaque, ?*anyopaque, ?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setModifyRecordZonesCompletionBlock(self: *@This(), modifyRecordZonesCompletionBlock: *const fn(?*anyopaque, ?*anyopaque, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setModifyRecordZonesCompletionBlock:", void, .{modifyRecordZonesCompletionBlock});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKModifySubscriptionsOperation?language=objc
pub const ModifySubscriptionsOperation = opaque {
    pub const InternalInfo = objc.ExternalClass("CKModifySubscriptionsOperation", @This(), DatabaseOperation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithSubscriptionsToSaveSubscriptionIDsToDelete(self: *@This(), subscriptionsToSave: ?*anyopaque, subscriptionIDsToDelete: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithSubscriptionsToSave:subscriptionIDsToDelete:", *@This(), .{subscriptionsToSave, subscriptionIDsToDelete});
    }

    pub fn subscriptionsToSave(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "subscriptionsToSave", ?*anyopaque, .{});
    }

    pub fn setSubscriptionsToSave(self: *@This(), subscriptionsToSave: ?*anyopaque) void {
        return objc.msgSend(self, "setSubscriptionsToSave:", void, .{subscriptionsToSave});
    }

    pub fn subscriptionIDsToDelete(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "subscriptionIDsToDelete", ?*anyopaque, .{});
    }

    pub fn setSubscriptionIDsToDelete(self: *@This(), subscriptionIDsToDelete: ?*anyopaque) void {
        return objc.msgSend(self, "setSubscriptionIDsToDelete:", void, .{subscriptionIDsToDelete});
    }

    pub fn perSubscriptionSaveBlock(self: *@This()) *const fn(SubscriptionID, ?*Subscription, ?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "perSubscriptionSaveBlock", *const fn(SubscriptionID, ?*Subscription, ?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setPerSubscriptionSaveBlock(self: *@This(), perSubscriptionSaveBlock: *const fn(SubscriptionID, ?*Subscription, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setPerSubscriptionSaveBlock:", void, .{perSubscriptionSaveBlock});
    }

    pub fn perSubscriptionDeleteBlock(self: *@This()) *const fn(SubscriptionID, ?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "perSubscriptionDeleteBlock", *const fn(SubscriptionID, ?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setPerSubscriptionDeleteBlock(self: *@This(), perSubscriptionDeleteBlock: *const fn(SubscriptionID, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setPerSubscriptionDeleteBlock:", void, .{perSubscriptionDeleteBlock});
    }

    pub fn modifySubscriptionsCompletionBlock(self: *@This()) *const fn(?*anyopaque, ?*anyopaque, ?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "modifySubscriptionsCompletionBlock", *const fn(?*anyopaque, ?*anyopaque, ?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setModifySubscriptionsCompletionBlock(self: *@This(), modifySubscriptionsCompletionBlock: *const fn(?*anyopaque, ?*anyopaque, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setModifySubscriptionsCompletionBlock:", void, .{modifySubscriptionsCompletionBlock});
    }

};

pub const OperationGroupTransferSize = enum(objc.NSInteger) {
    Unknown = 0,
    Kilobytes = 1,
    Megabytes = 2,
    TensOfMegabytes = 3,
    HundredsOfMegabytes = 4,
    Gigabytes = 5,
    TensOfGigabytes = 6,
    HundredsOfGigabytes = 7,
};

/// https://developer.apple.com/documentation/CloudKit/CKOperationGroup?language=objc
pub const OperationGroup = opaque {
    pub const InternalInfo = objc.ExternalClass("CKOperationGroup", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithCoder(self: *@This(), aDecoder: ?*foundation.Coder) *@This() {
        return objc.msgSend(self, "initWithCoder:", *@This(), .{aDecoder});
    }

    pub fn operationGroupID(self: *@This()) ?*NSString {
        return objc.msgSend(self, "operationGroupID", ?*NSString, .{});
    }

    pub fn defaultConfiguration(self: *@This()) ?*OperationConfiguration {
        return objc.msgSend(self, "defaultConfiguration", ?*OperationConfiguration, .{});
    }

    pub fn setDefaultConfiguration(self: *@This(), defaultConfiguration: ?*OperationConfiguration) void {
        return objc.msgSend(self, "setDefaultConfiguration:", void, .{defaultConfiguration});
    }

    pub fn name(self: *@This()) ?*NSString {
        return objc.msgSend(self, "name", ?*NSString, .{});
    }

    pub fn setName(self: *@This(), name: ?*NSString) void {
        return objc.msgSend(self, "setName:", void, .{name});
    }

    pub fn quantity(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "quantity", objc.NSUInteger, .{});
    }

    pub fn setQuantity(self: *@This(), quantity: objc.NSUInteger) void {
        return objc.msgSend(self, "setQuantity:", void, .{quantity});
    }

    pub fn expectedSendSize(self: *@This()) OperationGroupTransferSize {
        return objc.msgSend(self, "expectedSendSize", OperationGroupTransferSize, .{});
    }

    pub fn setExpectedSendSize(self: *@This(), expectedSendSize: OperationGroupTransferSize) void {
        return objc.msgSend(self, "setExpectedSendSize:", void, .{expectedSendSize});
    }

    pub fn expectedReceiveSize(self: *@This()) OperationGroupTransferSize {
        return objc.msgSend(self, "expectedReceiveSize", OperationGroupTransferSize, .{});
    }

    pub fn setExpectedReceiveSize(self: *@This(), expectedReceiveSize: OperationGroupTransferSize) void {
        return objc.msgSend(self, "setExpectedReceiveSize:", void, .{expectedReceiveSize});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKQueryCursor?language=objc
pub const QueryCursor = opaque {
    pub const InternalInfo = objc.ExternalClass("CKQueryCursor", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKQueryOperation?language=objc
pub const QueryOperation = opaque {
    pub const InternalInfo = objc.ExternalClass("CKQueryOperation", @This(), DatabaseOperation, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn initWithQuery(self: *@This(), query: ?*Query) *@This() {
        return objc.msgSend(self, "initWithQuery:", *@This(), .{query});
    }

    pub fn initWithCursor(self: *@This(), cursor: ?*QueryCursor) *@This() {
        return objc.msgSend(self, "initWithCursor:", *@This(), .{cursor});
    }

    pub fn query(self: *@This()) ?*Query {
        return objc.msgSend(self, "query", ?*Query, .{});
    }

    pub fn setQuery(self: *@This(), query: ?*Query) void {
        return objc.msgSend(self, "setQuery:", void, .{query});
    }

    pub fn cursor(self: *@This()) ?*QueryCursor {
        return objc.msgSend(self, "cursor", ?*QueryCursor, .{});
    }

    pub fn setCursor(self: *@This(), cursor: ?*QueryCursor) void {
        return objc.msgSend(self, "setCursor:", void, .{cursor});
    }

    pub fn zoneID(self: *@This()) ?*RecordZoneID {
        return objc.msgSend(self, "zoneID", ?*RecordZoneID, .{});
    }

    pub fn setZoneID(self: *@This(), zoneID: ?*RecordZoneID) void {
        return objc.msgSend(self, "setZoneID:", void, .{zoneID});
    }

    pub fn resultsLimit(self: *@This()) objc.NSUInteger {
        return objc.msgSend(self, "resultsLimit", objc.NSUInteger, .{});
    }

    pub fn setResultsLimit(self: *@This(), resultsLimit: objc.NSUInteger) void {
        return objc.msgSend(self, "setResultsLimit:", void, .{resultsLimit});
    }

    pub fn desiredKeys(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "desiredKeys", ?*anyopaque, .{});
    }

    pub fn setDesiredKeys(self: *@This(), desiredKeys: ?*anyopaque) void {
        return objc.msgSend(self, "setDesiredKeys:", void, .{desiredKeys});
    }

    pub fn recordFetchedBlock(self: *@This()) *const fn(?*Record) callconv(.C) void {
        return objc.msgSend(self, "recordFetchedBlock", *const fn(?*Record) callconv(.C) void, .{});
    }

    pub fn setRecordFetchedBlock(self: *@This(), recordFetchedBlock: *const fn(?*Record) callconv(.C) void) void {
        return objc.msgSend(self, "setRecordFetchedBlock:", void, .{recordFetchedBlock});
    }

    pub fn recordMatchedBlock(self: *@This()) *const fn(?*RecordID, ?*Record, ?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "recordMatchedBlock", *const fn(?*RecordID, ?*Record, ?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setRecordMatchedBlock(self: *@This(), recordMatchedBlock: *const fn(?*RecordID, ?*Record, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setRecordMatchedBlock:", void, .{recordMatchedBlock});
    }

    pub fn queryCompletionBlock(self: *@This()) *const fn(?*QueryCursor, ?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "queryCompletionBlock", *const fn(?*QueryCursor, ?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setQueryCompletionBlock(self: *@This(), queryCompletionBlock: *const fn(?*QueryCursor, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setQueryCompletionBlock:", void, .{queryCompletionBlock});
    }

};

pub const SharePreparationCompletionHandler = *const fn(?*Share, ?*foundation.Error) callconv(.C) void;

pub const SharePreparationHandler = *const fn(SharePreparationCompletionHandler) callconv(.C) void;

pub const SharingParticipantAccessOption = enum(objc.NSUInteger) {
    AnyoneWithLink = 1,
    SpecifiedRecipientsOnly = 2,
    Any = 3,
};

pub const SharingParticipantPermissionOption = enum(objc.NSUInteger) {
    ReadOnly = 1,
    ReadWrite = 2,
    Any = 3,
};

/// https://developer.apple.com/documentation/CloudKit/CKAllowedSharingOptions?language=objc
pub const AllowedSharingOptions = opaque {
    pub const InternalInfo = objc.ExternalClass("CKAllowedSharingOptions", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithAllowedParticipantPermissionOptionsAllowedParticipantAccessOptions(self: *@This(), allowedParticipantPermissionOptions: SharingParticipantPermissionOption, allowedParticipantAccessOptions: SharingParticipantAccessOption) *@This() {
        return objc.msgSend(self, "initWithAllowedParticipantPermissionOptions:allowedParticipantAccessOptions:", *@This(), .{allowedParticipantPermissionOptions, allowedParticipantAccessOptions});
    }

    pub fn allowedParticipantPermissionOptions(self: *@This()) SharingParticipantPermissionOption {
        return objc.msgSend(self, "allowedParticipantPermissionOptions", SharingParticipantPermissionOption, .{});
    }

    pub fn setAllowedParticipantPermissionOptions(self: *@This(), allowedParticipantPermissionOptions: SharingParticipantPermissionOption) void {
        return objc.msgSend(self, "setAllowedParticipantPermissionOptions:", void, .{allowedParticipantPermissionOptions});
    }

    pub fn allowedParticipantAccessOptions(self: *@This()) SharingParticipantAccessOption {
        return objc.msgSend(self, "allowedParticipantAccessOptions", SharingParticipantAccessOption, .{});
    }

    pub fn setAllowedParticipantAccessOptions(self: *@This(), allowedParticipantAccessOptions: SharingParticipantAccessOption) void {
        return objc.msgSend(self, "setAllowedParticipantAccessOptions:", void, .{allowedParticipantAccessOptions});
    }

    pub fn standardOptions(self: *@This()) ?*AllowedSharingOptions {
        return objc.msgSend(self, "standardOptions", ?*AllowedSharingOptions, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSystemSharingUIObserver?language=objc
pub const SystemSharingUIObserver = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSystemSharingUIObserver", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn initWithContainer(self: *@This(), container: ?*Container) *@This() {
        return objc.msgSend(self, "initWithContainer:", *@This(), .{container});
    }

    pub fn systemSharingUIDidSaveShareBlock(self: *@This()) *const fn(?*RecordID, ?*Share, ?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "systemSharingUIDidSaveShareBlock", *const fn(?*RecordID, ?*Share, ?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setSystemSharingUIDidSaveShareBlock(self: *@This(), systemSharingUIDidSaveShareBlock: *const fn(?*RecordID, ?*Share, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setSystemSharingUIDidSaveShareBlock:", void, .{systemSharingUIDidSaveShareBlock});
    }

    pub fn systemSharingUIDidStopSharingBlock(self: *@This()) *const fn(?*RecordID, ?*foundation.Error) callconv(.C) void {
        return objc.msgSend(self, "systemSharingUIDidStopSharingBlock", *const fn(?*RecordID, ?*foundation.Error) callconv(.C) void, .{});
    }

    pub fn setSystemSharingUIDidStopSharingBlock(self: *@This(), systemSharingUIDidStopSharingBlock: *const fn(?*RecordID, ?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "setSystemSharingUIDidStopSharingBlock:", void, .{systemSharingUIDidStopSharingBlock});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineState?language=objc
pub const SyncEngineState = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngineState", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn addPendingRecordZoneChanges(self: *@This(), changes: ?*anyopaque) void {
        return objc.msgSend(self, "addPendingRecordZoneChanges:", void, .{changes});
    }

    pub fn removePendingRecordZoneChanges(self: *@This(), changes: ?*anyopaque) void {
        return objc.msgSend(self, "removePendingRecordZoneChanges:", void, .{changes});
    }

    pub fn addPendingDatabaseChanges(self: *@This(), changes: ?*anyopaque) void {
        return objc.msgSend(self, "addPendingDatabaseChanges:", void, .{changes});
    }

    pub fn removePendingDatabaseChanges(self: *@This(), changes: ?*anyopaque) void {
        return objc.msgSend(self, "removePendingDatabaseChanges:", void, .{changes});
    }

    pub fn pendingRecordZoneChanges(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "pendingRecordZoneChanges", ?*anyopaque, .{});
    }

    pub fn pendingDatabaseChanges(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "pendingDatabaseChanges", ?*anyopaque, .{});
    }

    pub fn hasPendingUntrackedChanges(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "hasPendingUntrackedChanges", objc.BOOL, .{});
    }

    pub fn setHasPendingUntrackedChanges(self: *@This(), hasPendingUntrackedChanges: objc.BOOL) void {
        return objc.msgSend(self, "setHasPendingUntrackedChanges:", void, .{hasPendingUntrackedChanges});
    }

    pub fn zoneIDsWithUnfetchedServerChanges(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "zoneIDsWithUnfetchedServerChanges", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineStateSerialization?language=objc
pub const SyncEngineStateSerialization = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngineStateSerialization", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

};

pub const SyncEnginePendingRecordZoneChangeType = enum(objc.NSInteger) {
    SaveRecord = 0,
    DeleteRecord = 1,
};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEnginePendingRecordZoneChange?language=objc
pub const SyncEnginePendingRecordZoneChange = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEnginePendingRecordZoneChange", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithRecordIDType(self: *@This(), recordID: ?*RecordID, @"type": SyncEnginePendingRecordZoneChangeType) *@This() {
        return objc.msgSend(self, "initWithRecordID:type:", *@This(), .{recordID, @"type"});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn recordID(self: *@This()) ?*RecordID {
        return objc.msgSend(self, "recordID", ?*RecordID, .{});
    }

    pub fn @"type"(self: *@This()) SyncEnginePendingRecordZoneChangeType {
        return objc.msgSend(self, "type", SyncEnginePendingRecordZoneChangeType, .{});
    }

};

pub const SyncEnginePendingDatabaseChangeType = enum(objc.NSInteger) {
    SaveZone = 0,
    DeleteZone = 1,
};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEnginePendingDatabaseChange?language=objc
pub const SyncEnginePendingDatabaseChange = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEnginePendingDatabaseChange", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn zoneID(self: *@This()) ?*RecordZoneID {
        return objc.msgSend(self, "zoneID", ?*RecordZoneID, .{});
    }

    pub fn @"type"(self: *@This()) SyncEnginePendingDatabaseChangeType {
        return objc.msgSend(self, "type", SyncEnginePendingDatabaseChangeType, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEnginePendingZoneSave?language=objc
pub const SyncEnginePendingZoneSave = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEnginePendingZoneSave", @This(), SyncEnginePendingDatabaseChange, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithZone(self: *@This(), zone: ?*RecordZone) *@This() {
        return objc.msgSend(self, "initWithZone:", *@This(), .{zone});
    }

    pub fn zone(self: *@This()) ?*RecordZone {
        return objc.msgSend(self, "zone", ?*RecordZone, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEnginePendingZoneDelete?language=objc
pub const SyncEnginePendingZoneDelete = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEnginePendingZoneDelete", @This(), SyncEnginePendingDatabaseChange, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithZoneID(self: *@This(), zoneID: ?*RecordZoneID) *@This() {
        return objc.msgSend(self, "initWithZoneID:", *@This(), .{zoneID});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineRecordZoneChangeBatch?language=objc
pub const SyncEngineRecordZoneChangeBatch = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngineRecordZoneChangeBatch", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithPendingChangesRecordProvider(self: *@This(), pendingChanges: ?*anyopaque, recordProvider: *const fn(?*RecordID) callconv(.C) ?*Record) *@This() {
        return objc.msgSend(self, "initWithPendingChanges:recordProvider:", *@This(), .{pendingChanges, recordProvider});
    }

    pub fn initWithRecordsToSaveRecordIDsToDeleteAtomicByZone(self: *@This(), recordsToSave: ?*anyopaque, recordIDsToDelete: ?*anyopaque, atomicByZone: objc.BOOL) *@This() {
        return objc.msgSend(self, "initWithRecordsToSave:recordIDsToDelete:atomicByZone:", *@This(), .{recordsToSave, recordIDsToDelete, atomicByZone});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn recordsToSave(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "recordsToSave", ?*anyopaque, .{});
    }

    pub fn recordIDsToDelete(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "recordIDsToDelete", ?*anyopaque, .{});
    }

    pub fn atomicByZone(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "atomicByZone", objc.BOOL, .{});
    }

    pub fn setAtomicByZone(self: *@This(), atomicByZone: objc.BOOL) void {
        return objc.msgSend(self, "setAtomicByZone:", void, .{atomicByZone});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngine?language=objc
pub const SyncEngine = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngine", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithConfiguration(self: *@This(), configuration: ?*SyncEngineConfiguration) *@This() {
        return objc.msgSend(self, "initWithConfiguration:", *@This(), .{configuration});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn fetchChangesWithCompletionHandler(self: *@This(), completionHandler: *const fn(?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "fetchChangesWithCompletionHandler:", void, .{completionHandler});
    }

    pub fn fetchChangesWithOptionsCompletionHandler(self: *@This(), options: ?*SyncEngineFetchChangesOptions, completionHandler: *const fn(?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "fetchChangesWithOptions:completionHandler:", void, .{options, completionHandler});
    }

    pub fn sendChangesWithCompletionHandler(self: *@This(), completionHandler: *const fn(?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "sendChangesWithCompletionHandler:", void, .{completionHandler});
    }

    pub fn sendChangesWithOptionsCompletionHandler(self: *@This(), options: ?*SyncEngineSendChangesOptions, completionHandler: *const fn(?*foundation.Error) callconv(.C) void) void {
        return objc.msgSend(self, "sendChangesWithOptions:completionHandler:", void, .{options, completionHandler});
    }

    pub fn cancelOperationsWithCompletionHandler(self: *@This(), completionHandler: *const fn() callconv(.C) void) void {
        return objc.msgSend(self, "cancelOperationsWithCompletionHandler:", void, .{completionHandler});
    }

    pub fn database(self: *@This()) ?*Database {
        return objc.msgSend(self, "database", ?*Database, .{});
    }

    pub fn state(self: *@This()) ?*SyncEngineState {
        return objc.msgSend(self, "state", ?*SyncEngineState, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineDelegate?language=objc
pub const SyncEngineDelegate = opaque {
    pub const InternalInfo = objc.ExternProtocol(@This(), &.{objc.NSObject, });
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;

    pub fn syncEngineHandleEvent(self: *@This(), syncEngine: ?*SyncEngine, event: ?*SyncEngineEvent) void {
        return objc.msgSend(self, "syncEngine:handleEvent:", void, .{syncEngine, event});
    }

    pub fn syncEngineNextRecordZoneChangeBatchForContext(self: *@This(), syncEngine: ?*SyncEngine, context: ?*SyncEngineSendChangesContext) ?*SyncEngineRecordZoneChangeBatch {
        return objc.msgSend(self, "syncEngine:nextRecordZoneChangeBatchForContext:", ?*SyncEngineRecordZoneChangeBatch, .{syncEngine, context});
    }

    pub fn syncEngineNextFetchChangesOptionsForContext(self: *@This(), syncEngine: ?*SyncEngine, context: ?*SyncEngineFetchChangesContext) ?*SyncEngineFetchChangesOptions {
        return objc.msgSend(self, "syncEngine:nextFetchChangesOptionsForContext:", ?*SyncEngineFetchChangesOptions, .{syncEngine, context});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineFetchChangesOptions?language=objc
pub const SyncEngineFetchChangesOptions = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngineFetchChangesOptions", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithScope(self: *@This(), scope: ?*SyncEngineFetchChangesScope) *@This() {
        return objc.msgSend(self, "initWithScope:", *@This(), .{scope});
    }

    pub fn scope(self: *@This()) ?*SyncEngineFetchChangesScope {
        return objc.msgSend(self, "scope", ?*SyncEngineFetchChangesScope, .{});
    }

    pub fn setScope(self: *@This(), scope: ?*SyncEngineFetchChangesScope) void {
        return objc.msgSend(self, "setScope:", void, .{scope});
    }

    pub fn operationGroup(self: *@This()) ?*OperationGroup {
        return objc.msgSend(self, "operationGroup", ?*OperationGroup, .{});
    }

    pub fn setOperationGroup(self: *@This(), operationGroup: ?*OperationGroup) void {
        return objc.msgSend(self, "setOperationGroup:", void, .{operationGroup});
    }

    pub fn prioritizedZoneIDs(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "prioritizedZoneIDs", ?*anyopaque, .{});
    }

    pub fn setPrioritizedZoneIDs(self: *@This(), prioritizedZoneIDs: ?*anyopaque) void {
        return objc.msgSend(self, "setPrioritizedZoneIDs:", void, .{prioritizedZoneIDs});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineFetchChangesScope?language=objc
pub const SyncEngineFetchChangesScope = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngineFetchChangesScope", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithZoneIDs(self: *@This(), zoneIDs: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithZoneIDs:", *@This(), .{zoneIDs});
    }

    pub fn initWithExcludedZoneIDs(self: *@This(), zoneIDs: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithExcludedZoneIDs:", *@This(), .{zoneIDs});
    }

    pub fn containsZoneID(self: *@This(), zoneID: ?*RecordZoneID) objc.BOOL {
        return objc.msgSend(self, "containsZoneID:", objc.BOOL, .{zoneID});
    }

    pub fn zoneIDs(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "zoneIDs", ?*anyopaque, .{});
    }

    pub fn excludedZoneIDs(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "excludedZoneIDs", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineSendChangesOptions?language=objc
pub const SyncEngineSendChangesOptions = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngineSendChangesOptions", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithScope(self: *@This(), scope: ?*SyncEngineSendChangesScope) *@This() {
        return objc.msgSend(self, "initWithScope:", *@This(), .{scope});
    }

    pub fn scope(self: *@This()) ?*SyncEngineSendChangesScope {
        return objc.msgSend(self, "scope", ?*SyncEngineSendChangesScope, .{});
    }

    pub fn setScope(self: *@This(), scope: ?*SyncEngineSendChangesScope) void {
        return objc.msgSend(self, "setScope:", void, .{scope});
    }

    pub fn operationGroup(self: *@This()) ?*OperationGroup {
        return objc.msgSend(self, "operationGroup", ?*OperationGroup, .{});
    }

    pub fn setOperationGroup(self: *@This(), operationGroup: ?*OperationGroup) void {
        return objc.msgSend(self, "setOperationGroup:", void, .{operationGroup});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineSendChangesScope?language=objc
pub const SyncEngineSendChangesScope = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngineSendChangesScope", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithZoneIDs(self: *@This(), zoneIDs: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithZoneIDs:", *@This(), .{zoneIDs});
    }

    pub fn initWithExcludedZoneIDs(self: *@This(), excludedZoneIDs: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithExcludedZoneIDs:", *@This(), .{excludedZoneIDs});
    }

    pub fn initWithRecordIDs(self: *@This(), recordIDs: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithRecordIDs:", *@This(), .{recordIDs});
    }

    pub fn containsRecordID(self: *@This(), recordID: ?*RecordID) objc.BOOL {
        return objc.msgSend(self, "containsRecordID:", objc.BOOL, .{recordID});
    }

    pub fn containsPendingRecordZoneChange(self: *@This(), pendingRecordZoneChange: ?*SyncEnginePendingRecordZoneChange) objc.BOOL {
        return objc.msgSend(self, "containsPendingRecordZoneChange:", objc.BOOL, .{pendingRecordZoneChange});
    }

    pub fn zoneIDs(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "zoneIDs", ?*anyopaque, .{});
    }

    pub fn excludedZoneIDs(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "excludedZoneIDs", ?*anyopaque, .{});
    }

    pub fn recordIDs(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "recordIDs", ?*anyopaque, .{});
    }

};

pub const SyncEngineSyncReason = enum(objc.NSInteger) {
    Scheduled = 0,
    Manual = 1,
};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineFetchChangesContext?language=objc
pub const SyncEngineFetchChangesContext = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngineFetchChangesContext", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn reason(self: *@This()) SyncEngineSyncReason {
        return objc.msgSend(self, "reason", SyncEngineSyncReason, .{});
    }

    pub fn options(self: *@This()) ?*SyncEngineFetchChangesOptions {
        return objc.msgSend(self, "options", ?*SyncEngineFetchChangesOptions, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineSendChangesContext?language=objc
pub const SyncEngineSendChangesContext = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngineSendChangesContext", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn reason(self: *@This()) SyncEngineSyncReason {
        return objc.msgSend(self, "reason", SyncEngineSyncReason, .{});
    }

    pub fn options(self: *@This()) ?*SyncEngineSendChangesOptions {
        return objc.msgSend(self, "options", ?*SyncEngineSendChangesOptions, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineConfiguration?language=objc
pub const SyncEngineConfiguration = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngineConfiguration", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn initWithDatabaseStateSerializationDelegate(self: *@This(), database: ?*Database, stateSerialization: ?*SyncEngineStateSerialization, delegate: ?*anyopaque) *@This() {
        return objc.msgSend(self, "initWithDatabase:stateSerialization:delegate:", *@This(), .{database, stateSerialization, delegate});
    }

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn database(self: *@This()) ?*Database {
        return objc.msgSend(self, "database", ?*Database, .{});
    }

    pub fn setDatabase(self: *@This(), database: ?*Database) void {
        return objc.msgSend(self, "setDatabase:", void, .{database});
    }

    pub fn stateSerialization(self: *@This()) ?*SyncEngineStateSerialization {
        return objc.msgSend(self, "stateSerialization", ?*SyncEngineStateSerialization, .{});
    }

    pub fn setStateSerialization(self: *@This(), stateSerialization: ?*SyncEngineStateSerialization) void {
        return objc.msgSend(self, "setStateSerialization:", void, .{stateSerialization});
    }

    pub fn delegate(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "delegate", ?*anyopaque, .{});
    }

    pub fn setDelegate(self: *@This(), delegate: ?*anyopaque) void {
        return objc.msgSend(self, "setDelegate:", void, .{delegate});
    }

    pub fn automaticallySync(self: *@This()) objc.BOOL {
        return objc.msgSend(self, "automaticallySync", objc.BOOL, .{});
    }

    pub fn setAutomaticallySync(self: *@This(), automaticallySync: objc.BOOL) void {
        return objc.msgSend(self, "setAutomaticallySync:", void, .{automaticallySync});
    }

    pub fn subscriptionID(self: *@This()) SubscriptionID {
        return objc.msgSend(self, "subscriptionID", SubscriptionID, .{});
    }

    pub fn setSubscriptionID(self: *@This(), subscriptionID: SubscriptionID) void {
        return objc.msgSend(self, "setSubscriptionID:", void, .{subscriptionID});
    }

};

pub const SyncEngineEventType = enum(objc.NSInteger) {
    StateUpdate = 0,
    AccountChange = 1,
    FetchedDatabaseChanges = 2,
    FetchedRecordZoneChanges = 3,
    SentDatabaseChanges = 4,
    SentRecordZoneChanges = 5,
    WillFetchChanges = 6,
    WillFetchRecordZoneChanges = 7,
    DidFetchRecordZoneChanges = 8,
    DidFetchChanges = 9,
    WillSendChanges = 10,
    DidSendChanges = 11,
};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineEvent?language=objc
pub const SyncEngineEvent = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngineEvent", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn @"type"(self: *@This()) SyncEngineEventType {
        return objc.msgSend(self, "type", SyncEngineEventType, .{});
    }

    pub fn stateUpdateEvent(self: *@This()) ?*SyncEngineStateUpdateEvent {
        return objc.msgSend(self, "stateUpdateEvent", ?*SyncEngineStateUpdateEvent, .{});
    }

    pub fn accountChangeEvent(self: *@This()) ?*SyncEngineAccountChangeEvent {
        return objc.msgSend(self, "accountChangeEvent", ?*SyncEngineAccountChangeEvent, .{});
    }

    pub fn fetchedDatabaseChangesEvent(self: *@This()) ?*SyncEngineFetchedDatabaseChangesEvent {
        return objc.msgSend(self, "fetchedDatabaseChangesEvent", ?*SyncEngineFetchedDatabaseChangesEvent, .{});
    }

    pub fn fetchedRecordZoneChangesEvent(self: *@This()) ?*SyncEngineFetchedRecordZoneChangesEvent {
        return objc.msgSend(self, "fetchedRecordZoneChangesEvent", ?*SyncEngineFetchedRecordZoneChangesEvent, .{});
    }

    pub fn sentDatabaseChangesEvent(self: *@This()) ?*SyncEngineSentDatabaseChangesEvent {
        return objc.msgSend(self, "sentDatabaseChangesEvent", ?*SyncEngineSentDatabaseChangesEvent, .{});
    }

    pub fn sentRecordZoneChangesEvent(self: *@This()) ?*SyncEngineSentRecordZoneChangesEvent {
        return objc.msgSend(self, "sentRecordZoneChangesEvent", ?*SyncEngineSentRecordZoneChangesEvent, .{});
    }

    pub fn willFetchChangesEvent(self: *@This()) ?*SyncEngineWillFetchChangesEvent {
        return objc.msgSend(self, "willFetchChangesEvent", ?*SyncEngineWillFetchChangesEvent, .{});
    }

    pub fn willFetchRecordZoneChangesEvent(self: *@This()) ?*SyncEngineWillFetchRecordZoneChangesEvent {
        return objc.msgSend(self, "willFetchRecordZoneChangesEvent", ?*SyncEngineWillFetchRecordZoneChangesEvent, .{});
    }

    pub fn didFetchRecordZoneChangesEvent(self: *@This()) ?*SyncEngineDidFetchRecordZoneChangesEvent {
        return objc.msgSend(self, "didFetchRecordZoneChangesEvent", ?*SyncEngineDidFetchRecordZoneChangesEvent, .{});
    }

    pub fn didFetchChangesEvent(self: *@This()) ?*SyncEngineDidFetchChangesEvent {
        return objc.msgSend(self, "didFetchChangesEvent", ?*SyncEngineDidFetchChangesEvent, .{});
    }

    pub fn willSendChangesEvent(self: *@This()) ?*SyncEngineWillSendChangesEvent {
        return objc.msgSend(self, "willSendChangesEvent", ?*SyncEngineWillSendChangesEvent, .{});
    }

    pub fn didSendChangesEvent(self: *@This()) ?*SyncEngineDidSendChangesEvent {
        return objc.msgSend(self, "didSendChangesEvent", ?*SyncEngineDidSendChangesEvent, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineStateUpdateEvent?language=objc
pub const SyncEngineStateUpdateEvent = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngineStateUpdateEvent", @This(), SyncEngineEvent, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn stateSerialization(self: *@This()) ?*SyncEngineStateSerialization {
        return objc.msgSend(self, "stateSerialization", ?*SyncEngineStateSerialization, .{});
    }

};

pub const SyncEngineAccountChangeType = enum(objc.NSInteger) {
    SignIn = 0,
    SignOut = 1,
    SwitchAccounts = 2,
};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineAccountChangeEvent?language=objc
pub const SyncEngineAccountChangeEvent = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngineAccountChangeEvent", @This(), SyncEngineEvent, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn changeType(self: *@This()) SyncEngineAccountChangeType {
        return objc.msgSend(self, "changeType", SyncEngineAccountChangeType, .{});
    }

    pub fn previousUser(self: *@This()) ?*RecordID {
        return objc.msgSend(self, "previousUser", ?*RecordID, .{});
    }

    pub fn currentUser(self: *@This()) ?*RecordID {
        return objc.msgSend(self, "currentUser", ?*RecordID, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineFetchedDatabaseChangesEvent?language=objc
pub const SyncEngineFetchedDatabaseChangesEvent = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngineFetchedDatabaseChangesEvent", @This(), SyncEngineEvent, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn modifications(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "modifications", ?*anyopaque, .{});
    }

    pub fn deletions(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "deletions", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineFetchedRecordZoneChangesEvent?language=objc
pub const SyncEngineFetchedRecordZoneChangesEvent = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngineFetchedRecordZoneChangesEvent", @This(), SyncEngineEvent, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn modifications(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "modifications", ?*anyopaque, .{});
    }

    pub fn deletions(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "deletions", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineSentDatabaseChangesEvent?language=objc
pub const SyncEngineSentDatabaseChangesEvent = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngineSentDatabaseChangesEvent", @This(), SyncEngineEvent, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn savedZones(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "savedZones", ?*anyopaque, .{});
    }

    pub fn failedZoneSaves(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "failedZoneSaves", ?*anyopaque, .{});
    }

    pub fn deletedZoneIDs(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "deletedZoneIDs", ?*anyopaque, .{});
    }

    pub fn failedZoneDeletes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "failedZoneDeletes", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineSentRecordZoneChangesEvent?language=objc
pub const SyncEngineSentRecordZoneChangesEvent = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngineSentRecordZoneChangesEvent", @This(), SyncEngineEvent, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn savedRecords(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "savedRecords", ?*anyopaque, .{});
    }

    pub fn failedRecordSaves(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "failedRecordSaves", ?*anyopaque, .{});
    }

    pub fn deletedRecordIDs(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "deletedRecordIDs", ?*anyopaque, .{});
    }

    pub fn failedRecordDeletes(self: *@This()) ?*anyopaque {
        return objc.msgSend(self, "failedRecordDeletes", ?*anyopaque, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineWillFetchChangesEvent?language=objc
pub const SyncEngineWillFetchChangesEvent = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngineWillFetchChangesEvent", @This(), SyncEngineEvent, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn context(self: *@This()) ?*SyncEngineFetchChangesContext {
        return objc.msgSend(self, "context", ?*SyncEngineFetchChangesContext, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineWillFetchRecordZoneChangesEvent?language=objc
pub const SyncEngineWillFetchRecordZoneChangesEvent = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngineWillFetchRecordZoneChangesEvent", @This(), SyncEngineEvent, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn zoneID(self: *@This()) ?*RecordZoneID {
        return objc.msgSend(self, "zoneID", ?*RecordZoneID, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineDidFetchRecordZoneChangesEvent?language=objc
pub const SyncEngineDidFetchRecordZoneChangesEvent = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngineDidFetchRecordZoneChangesEvent", @This(), SyncEngineEvent, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn zoneID(self: *@This()) ?*RecordZoneID {
        return objc.msgSend(self, "zoneID", ?*RecordZoneID, .{});
    }

    pub fn @"error"(self: *@This()) ?*foundation.Error {
        return objc.msgSend(self, "error", ?*foundation.Error, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineDidFetchChangesEvent?language=objc
pub const SyncEngineDidFetchChangesEvent = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngineDidFetchChangesEvent", @This(), SyncEngineEvent, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn context(self: *@This()) ?*SyncEngineFetchChangesContext {
        return objc.msgSend(self, "context", ?*SyncEngineFetchChangesContext, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineWillSendChangesEvent?language=objc
pub const SyncEngineWillSendChangesEvent = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngineWillSendChangesEvent", @This(), SyncEngineEvent, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn context(self: *@This()) ?*SyncEngineSendChangesContext {
        return objc.msgSend(self, "context", ?*SyncEngineSendChangesContext, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineDidSendChangesEvent?language=objc
pub const SyncEngineDidSendChangesEvent = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngineDidSendChangesEvent", @This(), SyncEngineEvent, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn context(self: *@This()) ?*SyncEngineSendChangesContext {
        return objc.msgSend(self, "context", ?*SyncEngineSendChangesContext, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineFetchedRecordDeletion?language=objc
pub const SyncEngineFetchedRecordDeletion = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngineFetchedRecordDeletion", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn recordID(self: *@This()) ?*RecordID {
        return objc.msgSend(self, "recordID", ?*RecordID, .{});
    }

    pub fn recordType(self: *@This()) RecordType {
        return objc.msgSend(self, "recordType", RecordType, .{});
    }

};

pub const SyncEngineZoneDeletionReason = enum(objc.NSInteger) {
    Deleted = 0,
    Purged = 1,
    EncryptedDataReset = 2,
};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineFetchedZoneDeletion?language=objc
pub const SyncEngineFetchedZoneDeletion = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngineFetchedZoneDeletion", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn zoneID(self: *@This()) ?*RecordZoneID {
        return objc.msgSend(self, "zoneID", ?*RecordZoneID, .{});
    }

    pub fn reason(self: *@This()) SyncEngineZoneDeletionReason {
        return objc.msgSend(self, "reason", SyncEngineZoneDeletionReason, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineFailedRecordSave?language=objc
pub const SyncEngineFailedRecordSave = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngineFailedRecordSave", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn record(self: *@This()) ?*Record {
        return objc.msgSend(self, "record", ?*Record, .{});
    }

    pub fn @"error"(self: *@This()) ?*foundation.Error {
        return objc.msgSend(self, "error", ?*foundation.Error, .{});
    }

};

/// https://developer.apple.com/documentation/CloudKit/CKSyncEngineFailedZoneSave?language=objc
pub const SyncEngineFailedZoneSave = opaque {
    pub const InternalInfo = objc.ExternalClass("CKSyncEngineFailedZoneSave", @This(), NSObject, &.{});
    pub const as = InternalInfo.as;
    pub const retain = InternalInfo.retain;
    pub const release = InternalInfo.release;
    pub const autorelease = InternalInfo.autorelease;
    pub const new = InternalInfo.new;
    pub const alloc = InternalInfo.alloc;
    pub const allocInit = InternalInfo.allocInit;

    pub fn init(self: *@This()) *@This() {
        return objc.msgSend(self, "init", *@This(), .{});
    }

    pub fn new(self: *@This()) *@This() {
        return objc.msgSend(self, "new", *@This(), .{});
    }

    pub fn recordZone(self: *@This()) ?*RecordZone {
        return objc.msgSend(self, "recordZone", ?*RecordZone, .{});
    }

    pub fn @"error"(self: *@This()) ?*foundation.Error {
        return objc.msgSend(self, "error", ?*foundation.Error, .{});
    }

};

