// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.
const core_foundation = @import("core_foundation.zig"); // Framework dependency CoreFoundation.
const core_graphics = @import("core_graphics.zig"); // Framework dependency CoreGraphics.
const opengl = @import("opengl.zig"); // Framework dependency OpenGL.
const io_surface = @import("io_surface.zig"); // Framework dependency IOSurface.
const metal = @import("metal.zig"); // Framework dependency Metal.

pub const OptionFlags = objc.uint64_t;

pub const SMPTETime = extern struct {
    subframes: objc.SInt16,
    subframeDivisor: objc.SInt16,
    counter: objc.UInt32,
    @"type": objc.UInt32,
    flags: objc.UInt32,
    hours: objc.SInt16,
    minutes: objc.SInt16,
    seconds: objc.SInt16,
    frames: objc.SInt16,
};

pub const SMPTETimeType = enum(objc.uint32_t) {
    kCVSMPTETimeType24 = 0,
    kCVSMPTETimeType25 = 1,
    kCVSMPTETimeType30Drop = 2,
    kCVSMPTETimeType30 = 3,
    kCVSMPTETimeType2997 = 4,
    kCVSMPTETimeType2997Drop = 5,
    kCVSMPTETimeType60 = 6,
    kCVSMPTETimeType5994 = 7,
};

pub const SMPTETimeFlags = enum(objc.uint32_t) {
    kCVSMPTETimeValid = 1,
    kCVSMPTETimeRunning = 2,
};

pub const TimeFlags = enum(objc.int32_t) {
    kCVTimeIsIndefinite = 1,
};

pub const Time = extern struct {
    timeValue: objc.int64_t,
    timeScale: objc.int32_t,
    flags: objc.int32_t,
};

pub const TimeStamp = extern struct {
    version: objc.uint32_t,
    videoTimeScale: objc.int32_t,
    videoTime: objc.int64_t,
    hostTime: objc.uint64_t,
    rateScalar: f64,
    videoRefreshPeriod: objc.int64_t,
    smpteTime: SMPTETime,
    flags: objc.uint64_t,
    reserved: objc.uint64_t,
};

pub const TimeStampFlags = enum(objc.uint64_t) {
    kCVTimeStampVideoTimeValid = 1,
    kCVTimeStampHostTimeValid = 2,
    kCVTimeStampSMPTETimeValid = 4,
    kCVTimeStampVideoRefreshPeriodValid = 8,
    kCVTimeStampRateScalarValid = 16,
    kCVTimeStampTopField = 65536,
    kCVTimeStampBottomField = 131072,
    kCVTimeStampVideoHostTimeValid = 3,
    kCVTimeStampIsInterlaced = 196608,
};

pub const Return = objc.int32_t;

pub const anon561 = enum(Return) {
    kCVReturnSuccess = 0,
    kCVReturnFirst = -6660,
    kCVReturnError = -6660,
    kCVReturnInvalidArgument = -6661,
    kCVReturnAllocationFailed = -6662,
    kCVReturnUnsupported = -6663,
    kCVReturnInvalidDisplay = -6670,
    kCVReturnDisplayLinkAlreadyRunning = -6671,
    kCVReturnDisplayLinkNotRunning = -6672,
    kCVReturnDisplayLinkCallbacksNotSet = -6673,
    kCVReturnInvalidPixelFormat = -6680,
    kCVReturnInvalidSize = -6681,
    kCVReturnInvalidPixelBufferAttributes = -6682,
    kCVReturnPixelBufferNotOpenGLCompatible = -6683,
    kCVReturnPixelBufferNotMetalCompatible = -6684,
    kCVReturnWouldExceedAllocationThreshold = -6689,
    kCVReturnPoolAllocationFailed = -6690,
    kCVReturnInvalidPoolAttributes = -6691,
    kCVReturnRetry = -6692,
    kCVReturnLast = -6699,
};

pub extern "CoreVideo" fn GetCurrentHostTime() callconv(.C) objc.uint64_t;

pub extern "CoreVideo" fn GetHostClockFrequency() callconv(.C) f64;

pub extern "CoreVideo" fn GetHostClockMinimumTimeDelta() callconv(.C) objc.uint32_t;

pub const __CVDisplayLink = extern struct {};

pub const DisplayLinkRef = ?*__CVDisplayLink;

pub const DisplayLinkOutputCallback = ?*const fn(DisplayLinkRef, ?*TimeStamp, ?*TimeStamp, OptionFlags, ?*OptionFlags, ?*anyopaque, ) callconv(.C) Return;

pub const DisplayLinkOutputHandler = *const fn(DisplayLinkRef, ?*TimeStamp, ?*TimeStamp, OptionFlags, ?*OptionFlags, ) callconv(.C) Return;

pub extern "CoreVideo" fn DisplayLinkGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreVideo" fn DisplayLinkCreateWithCGDisplays(displayArray: ?*core_graphics.DirectDisplayID, count: core_foundation.Index, displayLinkOut: ?*DisplayLinkRef) callconv(.C) Return;

pub extern "CoreVideo" fn DisplayLinkCreateWithOpenGLDisplayMask(mask: core_graphics.OpenGLDisplayMask, displayLinkOut: ?*DisplayLinkRef) callconv(.C) Return;

pub extern "CoreVideo" fn DisplayLinkCreateWithCGDisplay(displayID: core_graphics.DirectDisplayID, displayLinkOut: ?*DisplayLinkRef) callconv(.C) Return;

pub extern "CoreVideo" fn DisplayLinkCreateWithActiveCGDisplays(displayLinkOut: ?*DisplayLinkRef) callconv(.C) Return;

pub extern "CoreVideo" fn DisplayLinkSetCurrentCGDisplay(displayLink: DisplayLinkRef, displayID: core_graphics.DirectDisplayID) callconv(.C) Return;

pub extern "CoreVideo" fn DisplayLinkSetCurrentCGDisplayFromOpenGLContext(displayLink: DisplayLinkRef, cglContext: opengl.ContextObj, cglPixelFormat: opengl.PixelFormatObj) callconv(.C) Return;

pub extern "CoreVideo" fn DisplayLinkGetCurrentCGDisplay(displayLink: DisplayLinkRef) callconv(.C) core_graphics.DirectDisplayID;

pub extern "CoreVideo" fn DisplayLinkSetOutputCallback(displayLink: DisplayLinkRef, callback: DisplayLinkOutputCallback, userInfo: ?*anyopaque) callconv(.C) Return;

pub extern "CoreVideo" fn DisplayLinkSetOutputHandler(displayLink: DisplayLinkRef, handler: DisplayLinkOutputHandler) callconv(.C) Return;

pub extern "CoreVideo" fn DisplayLinkStart(displayLink: DisplayLinkRef) callconv(.C) Return;

pub extern "CoreVideo" fn DisplayLinkStop(displayLink: DisplayLinkRef) callconv(.C) Return;

pub extern "CoreVideo" fn DisplayLinkGetNominalOutputVideoRefreshPeriod(displayLink: DisplayLinkRef) callconv(.C) Time;

pub extern "CoreVideo" fn DisplayLinkGetOutputVideoLatency(displayLink: DisplayLinkRef) callconv(.C) Time;

pub extern "CoreVideo" fn DisplayLinkGetActualOutputVideoRefreshPeriod(displayLink: DisplayLinkRef) callconv(.C) f64;

pub extern "CoreVideo" fn DisplayLinkIsRunning(displayLink: DisplayLinkRef) callconv(.C) objc.Boolean;

pub extern "CoreVideo" fn DisplayLinkGetCurrentTime(displayLink: DisplayLinkRef, outTime: ?*TimeStamp) callconv(.C) Return;

pub extern "CoreVideo" fn DisplayLinkTranslateTime(displayLink: DisplayLinkRef, inTime: ?*TimeStamp, outTime: ?*TimeStamp) callconv(.C) Return;

pub extern "CoreVideo" fn DisplayLinkRetain(displayLink: DisplayLinkRef) callconv(.C) DisplayLinkRef;

pub extern "CoreVideo" fn DisplayLinkRelease(displayLink: DisplayLinkRef) callconv(.C) void;

pub const AttachmentMode = enum(objc.uint32_t) {
    kCVAttachmentMode_ShouldNotPropagate = 0,
    kCVAttachmentMode_ShouldPropagate = 1,
};

pub const __CVBuffer = extern struct {};

pub const BufferRef = ?*__CVBuffer;

pub extern "CoreVideo" fn BufferRetain(buffer: BufferRef) callconv(.C) BufferRef;

pub extern "CoreVideo" fn BufferRelease(buffer: BufferRef) callconv(.C) void;

pub extern "CoreVideo" fn BufferSetAttachment(buffer: BufferRef, key: core_foundation.StringRef, value: core_foundation.TypeRef, attachmentMode: AttachmentMode, ) callconv(.C) void;

pub extern "CoreVideo" fn BufferGetAttachment(buffer: BufferRef, key: core_foundation.StringRef, attachmentMode: ?*AttachmentMode) callconv(.C) core_foundation.TypeRef;

pub extern "CoreVideo" fn BufferRemoveAttachment(buffer: BufferRef, key: core_foundation.StringRef) callconv(.C) void;

pub extern "CoreVideo" fn BufferRemoveAllAttachments(buffer: BufferRef) callconv(.C) void;

pub extern "CoreVideo" fn BufferGetAttachments(buffer: BufferRef, attachmentMode: AttachmentMode) callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreVideo" fn BufferSetAttachments(buffer: BufferRef, theAttachments: core_foundation.DictionaryRef, attachmentMode: AttachmentMode) callconv(.C) void;

pub extern "CoreVideo" fn BufferPropagateAttachments(sourceBuffer: BufferRef, destinationBuffer: BufferRef) callconv(.C) void;

pub extern "CoreVideo" fn BufferCopyAttachments(buffer: BufferRef, attachmentMode: AttachmentMode) callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreVideo" fn BufferCopyAttachment(buffer: BufferRef, key: core_foundation.StringRef, attachmentMode: ?*AttachmentMode) callconv(.C) core_foundation.TypeRef;

pub extern "CoreVideo" fn BufferHasAttachment(buffer: BufferRef, key: core_foundation.StringRef) callconv(.C) objc.Boolean;

pub const anon2531 = enum(u32) {
    kCVVersatileBayer_BayerPattern_RGGB = 0,
    kCVVersatileBayer_BayerPattern_GRBG = 1,
    kCVVersatileBayer_BayerPattern_GBRG = 2,
    kCVVersatileBayer_BayerPattern_BGGR = 3,
};

pub const anon1431 = enum(objc.OSType) {
    kCVPixelFormatType_Lossless_32BGRA = 641877825,
    kCVPixelFormatType_Lossless_64RGBAHalf = 642934849,
    kCVPixelFormatType_Lossless_420YpCbCr8BiPlanarVideoRange = 641234480,
    kCVPixelFormatType_Lossless_420YpCbCr8BiPlanarFullRange = 641230384,
    kCVPixelFormatType_Lossless_420YpCbCr10PackedBiPlanarVideoRange = 645428784,
    kCVPixelFormatType_Lossless_422YpCbCr10PackedBiPlanarVideoRange = 645428786,
    kCVPixelFormatType_Lossless_420YpCbCr10PackedBiPlanarFullRange = 645424688,
};

pub const anon1741 = enum(objc.OSType) {
    kCVPixelFormatType_Lossy_32BGRA = 759318337,
    kCVPixelFormatType_Lossy_420YpCbCr8BiPlanarVideoRange = 758674992,
    kCVPixelFormatType_Lossy_420YpCbCr8BiPlanarFullRange = 758670896,
    kCVPixelFormatType_Lossy_420YpCbCr10PackedBiPlanarVideoRange = 762869296,
    kCVPixelFormatType_Lossy_422YpCbCr10PackedBiPlanarVideoRange = 762869298,
};

pub const anon351 = enum(objc.OSType) {
    kCVPixelFormatType_1Monochrome = 1,
    kCVPixelFormatType_2Indexed = 2,
    kCVPixelFormatType_4Indexed = 4,
    kCVPixelFormatType_8Indexed = 8,
    kCVPixelFormatType_1IndexedGray_WhiteIsZero = 33,
    kCVPixelFormatType_2IndexedGray_WhiteIsZero = 34,
    kCVPixelFormatType_4IndexedGray_WhiteIsZero = 36,
    kCVPixelFormatType_8IndexedGray_WhiteIsZero = 40,
    kCVPixelFormatType_16BE555 = 16,
    kCVPixelFormatType_16LE555 = 1278555445,
    kCVPixelFormatType_16LE5551 = 892679473,
    kCVPixelFormatType_16BE565 = 1110783541,
    kCVPixelFormatType_16LE565 = 1278555701,
    kCVPixelFormatType_24RGB = 24,
    kCVPixelFormatType_24BGR = 842285639,
    kCVPixelFormatType_32ARGB = 32,
    kCVPixelFormatType_32BGRA = 1111970369,
    kCVPixelFormatType_32ABGR = 1094862674,
    kCVPixelFormatType_32RGBA = 1380401729,
    kCVPixelFormatType_64ARGB = 1647719521,
    kCVPixelFormatType_64RGBALE = 1815491698,
    kCVPixelFormatType_48RGB = 1647589490,
    kCVPixelFormatType_32AlphaGray = 1647522401,
    kCVPixelFormatType_16Gray = 1647392359,
    kCVPixelFormatType_30RGB = 1378955371,
    kCVPixelFormatType_30RGB_r210 = 1915892016,
    kCVPixelFormatType_422YpCbCr8 = 846624121,
    kCVPixelFormatType_4444YpCbCrA8 = 1983131704,
    kCVPixelFormatType_4444YpCbCrA8R = 1916022840,
    kCVPixelFormatType_4444AYpCbCr8 = 2033463352,
    kCVPixelFormatType_4444AYpCbCr16 = 2033463606,
    kCVPixelFormatType_4444AYpCbCrFloat = 1916036716,
    kCVPixelFormatType_444YpCbCr8 = 1983066168,
    kCVPixelFormatType_422YpCbCr16 = 1983000886,
    kCVPixelFormatType_422YpCbCr10 = 1983000880,
    kCVPixelFormatType_444YpCbCr10 = 1983131952,
    kCVPixelFormatType_420YpCbCr8Planar = 2033463856,
    kCVPixelFormatType_420YpCbCr8PlanarFullRange = 1714696752,
    kCVPixelFormatType_422YpCbCr_4A_8BiPlanar = 1630697081,
    kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange = 875704438,
    kCVPixelFormatType_420YpCbCr8BiPlanarFullRange = 875704422,
    kCVPixelFormatType_422YpCbCr8BiPlanarVideoRange = 875704950,
    kCVPixelFormatType_422YpCbCr8BiPlanarFullRange = 875704934,
    kCVPixelFormatType_444YpCbCr8BiPlanarVideoRange = 875836534,
    kCVPixelFormatType_444YpCbCr8BiPlanarFullRange = 875836518,
    kCVPixelFormatType_422YpCbCr8_yuvs = 2037741171,
    kCVPixelFormatType_422YpCbCr8FullRange = 2037741158,
    kCVPixelFormatType_OneComponent8 = 1278226488,
    kCVPixelFormatType_TwoComponent8 = 843264056,
    kCVPixelFormatType_30RGBLEPackedWideGamut = 1999843442,
    kCVPixelFormatType_ARGB2101010LEPacked = 1815162994,
    kCVPixelFormatType_40ARGBLEWideGamut = 1999908961,
    kCVPixelFormatType_40ARGBLEWideGamutPremultiplied = 1999908973,
    kCVPixelFormatType_OneComponent10 = 1278226736,
    kCVPixelFormatType_OneComponent12 = 1278226738,
    kCVPixelFormatType_OneComponent16 = 1278226742,
    kCVPixelFormatType_TwoComponent16 = 843264310,
    kCVPixelFormatType_OneComponent16Half = 1278226536,
    kCVPixelFormatType_OneComponent32Float = 1278226534,
    kCVPixelFormatType_TwoComponent16Half = 843264104,
    kCVPixelFormatType_TwoComponent32Float = 843264102,
    kCVPixelFormatType_64RGBAHalf = 1380411457,
    kCVPixelFormatType_128RGBAFloat = 1380410945,
    kCVPixelFormatType_14Bayer_GRBG = 1735549492,
    kCVPixelFormatType_14Bayer_RGGB = 1919379252,
    kCVPixelFormatType_14Bayer_BGGR = 1650943796,
    kCVPixelFormatType_14Bayer_GBRG = 1734505012,
    kCVPixelFormatType_DisparityFloat16 = 1751411059,
    kCVPixelFormatType_DisparityFloat32 = 1717856627,
    kCVPixelFormatType_DepthFloat16 = 1751410032,
    kCVPixelFormatType_DepthFloat32 = 1717855600,
    kCVPixelFormatType_420YpCbCr10BiPlanarVideoRange = 2016686640,
    kCVPixelFormatType_422YpCbCr10BiPlanarVideoRange = 2016686642,
    kCVPixelFormatType_444YpCbCr10BiPlanarVideoRange = 2016687156,
    kCVPixelFormatType_420YpCbCr10BiPlanarFullRange = 2019963440,
    kCVPixelFormatType_422YpCbCr10BiPlanarFullRange = 2019963442,
    kCVPixelFormatType_444YpCbCr10BiPlanarFullRange = 2019963956,
    kCVPixelFormatType_420YpCbCr8VideoRange_8A_TriPlanar = 1982882104,
    kCVPixelFormatType_16VersatileBayer = 1651519798,
    kCVPixelFormatType_64RGBA_DownscaledProResRAW = 1651521076,
    kCVPixelFormatType_422YpCbCr16BiPlanarVideoRange = 1937125938,
    kCVPixelFormatType_444YpCbCr16BiPlanarVideoRange = 1937126452,
    kCVPixelFormatType_444YpCbCr16VideoRange_16A_TriPlanar = 1932812659,
};

pub extern "CoreVideo" fn YCbCrMatrixGetIntegerCodePointForString(yCbCrMatrixString: core_foundation.StringRef) callconv(.C) i32;

pub extern "CoreVideo" fn ColorPrimariesGetIntegerCodePointForString(colorPrimariesString: core_foundation.StringRef) callconv(.C) i32;

pub extern "CoreVideo" fn TransferFunctionGetIntegerCodePointForString(transferFunctionString: core_foundation.StringRef) callconv(.C) i32;

pub extern "CoreVideo" fn YCbCrMatrixGetStringForIntegerCodePoint(yCbCrMatrixCodePoint: i32) callconv(.C) core_foundation.StringRef;

pub extern "CoreVideo" fn ColorPrimariesGetStringForIntegerCodePoint(colorPrimariesCodePoint: i32) callconv(.C) core_foundation.StringRef;

pub extern "CoreVideo" fn TransferFunctionGetStringForIntegerCodePoint(transferFunctionCodePoint: i32) callconv(.C) core_foundation.StringRef;

pub const ImageBufferRef = BufferRef;

pub extern "CoreVideo" fn ImageBufferGetEncodedSize(imageBuffer: ImageBufferRef) callconv(.C) core_foundation.CGSize;

pub extern "CoreVideo" fn ImageBufferGetDisplaySize(imageBuffer: ImageBufferRef) callconv(.C) core_foundation.CGSize;

pub extern "CoreVideo" fn ImageBufferGetCleanRect(imageBuffer: ImageBufferRef) callconv(.C) core_foundation.CGRect;

pub extern "CoreVideo" fn ImageBufferIsFlipped(imageBuffer: ImageBufferRef) callconv(.C) objc.Boolean;

pub extern "CoreVideo" fn ImageBufferGetColorSpace(imageBuffer: ImageBufferRef) callconv(.C) core_graphics.ColorSpaceRef;

pub extern "CoreVideo" fn ImageBufferCreateColorSpaceFromAttachments(attachments: core_foundation.DictionaryRef) callconv(.C) core_graphics.ColorSpaceRef;

pub const PixelBufferLockFlags = enum(OptionFlags) {
    kCVPixelBufferLock_ReadOnly = 1,
};

pub const PlanarComponentInfo = extern struct {
    offset: objc.int32_t,
    rowBytes: objc.uint32_t,
};

pub const PlanarPixelBufferInfo = extern struct {
    componentInfo: [1] PlanarComponentInfo,
};

pub const PlanarPixelBufferInfo_YCbCrPlanar = extern struct {
    componentInfoY: PlanarComponentInfo,
    componentInfoCb: PlanarComponentInfo,
    componentInfoCr: PlanarComponentInfo,
};

pub const PlanarPixelBufferInfo_YCbCrBiPlanar = extern struct {
    componentInfoY: PlanarComponentInfo,
    componentInfoCbCr: PlanarComponentInfo,
};

pub const PixelBufferRef = ImageBufferRef;

pub extern "CoreVideo" fn PixelBufferGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreVideo" fn PixelBufferRetain(texture: PixelBufferRef) callconv(.C) PixelBufferRef;

pub extern "CoreVideo" fn PixelBufferRelease(texture: PixelBufferRef) callconv(.C) void;

pub extern "CoreVideo" fn PixelBufferCreateResolvedAttributesDictionary(allocator: core_foundation.AllocatorRef, attributes: core_foundation.ArrayRef, resolvedDictionaryOut: ?*core_foundation.DictionaryRef) callconv(.C) Return;

pub extern "CoreVideo" fn PixelBufferCreate(allocator: core_foundation.AllocatorRef, width: objc.size_t, height: objc.size_t, pixelFormatType: objc.OSType, pixelBufferAttributes: core_foundation.DictionaryRef, pixelBufferOut: ?*PixelBufferRef, ) callconv(.C) Return;

pub const PixelBufferReleaseBytesCallback = ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) void;

pub extern "CoreVideo" fn PixelBufferCreateWithBytes(allocator: core_foundation.AllocatorRef, width: objc.size_t, height: objc.size_t, pixelFormatType: objc.OSType, baseAddress: ?*anyopaque, bytesPerRow: objc.size_t, releaseCallback: PixelBufferReleaseBytesCallback, releaseRefCon: ?*anyopaque, pixelBufferAttributes: core_foundation.DictionaryRef, pixelBufferOut: ?*PixelBufferRef, ) callconv(.C) Return;

pub const PixelBufferReleasePlanarBytesCallback = ?*const fn(?*anyopaque, ?*anyopaque, objc.size_t, objc.size_t, ?*?*anyopaque, ) callconv(.C) void;

pub extern "CoreVideo" fn PixelBufferCreateWithPlanarBytes(allocator: core_foundation.AllocatorRef, width: objc.size_t, height: objc.size_t, pixelFormatType: objc.OSType, dataPtr: ?*anyopaque, dataSize: objc.size_t, numberOfPlanes: objc.size_t, planeBaseAddress: ?*?*anyopaque, planeWidth: ?*objc.size_t, planeHeight: ?*objc.size_t, planeBytesPerRow: ?*objc.size_t, releaseCallback: PixelBufferReleasePlanarBytesCallback, releaseRefCon: ?*anyopaque, pixelBufferAttributes: core_foundation.DictionaryRef, pixelBufferOut: ?*PixelBufferRef, ) callconv(.C) Return;

pub extern "CoreVideo" fn PixelBufferLockBaseAddress(pixelBuffer: PixelBufferRef, lockFlags: PixelBufferLockFlags) callconv(.C) Return;

pub extern "CoreVideo" fn PixelBufferUnlockBaseAddress(pixelBuffer: PixelBufferRef, unlockFlags: PixelBufferLockFlags) callconv(.C) Return;

pub extern "CoreVideo" fn PixelBufferGetWidth(pixelBuffer: PixelBufferRef) callconv(.C) objc.size_t;

pub extern "CoreVideo" fn PixelBufferGetHeight(pixelBuffer: PixelBufferRef) callconv(.C) objc.size_t;

pub extern "CoreVideo" fn PixelBufferGetPixelFormatType(pixelBuffer: PixelBufferRef) callconv(.C) objc.OSType;

pub extern "CoreVideo" fn PixelBufferGetBaseAddress(pixelBuffer: PixelBufferRef) callconv(.C) ?*anyopaque;

pub extern "CoreVideo" fn PixelBufferGetBytesPerRow(pixelBuffer: PixelBufferRef) callconv(.C) objc.size_t;

pub extern "CoreVideo" fn PixelBufferGetDataSize(pixelBuffer: PixelBufferRef) callconv(.C) objc.size_t;

pub extern "CoreVideo" fn PixelBufferIsPlanar(pixelBuffer: PixelBufferRef) callconv(.C) objc.Boolean;

pub extern "CoreVideo" fn PixelBufferGetPlaneCount(pixelBuffer: PixelBufferRef) callconv(.C) objc.size_t;

pub extern "CoreVideo" fn PixelBufferGetWidthOfPlane(pixelBuffer: PixelBufferRef, planeIndex: objc.size_t) callconv(.C) objc.size_t;

pub extern "CoreVideo" fn PixelBufferGetHeightOfPlane(pixelBuffer: PixelBufferRef, planeIndex: objc.size_t) callconv(.C) objc.size_t;

pub extern "CoreVideo" fn PixelBufferGetBaseAddressOfPlane(pixelBuffer: PixelBufferRef, planeIndex: objc.size_t) callconv(.C) ?*anyopaque;

pub extern "CoreVideo" fn PixelBufferGetBytesPerRowOfPlane(pixelBuffer: PixelBufferRef, planeIndex: objc.size_t) callconv(.C) objc.size_t;

pub extern "CoreVideo" fn PixelBufferGetExtendedPixels(pixelBuffer: PixelBufferRef, extraColumnsOnLeft: ?*objc.size_t, extraColumnsOnRight: ?*objc.size_t, extraRowsOnTop: ?*objc.size_t, extraRowsOnBottom: ?*objc.size_t, ) callconv(.C) void;

pub extern "CoreVideo" fn PixelBufferFillExtendedPixels(pixelBuffer: PixelBufferRef) callconv(.C) Return;

pub extern "CoreVideo" fn PixelBufferCopyCreationAttributes(pixelBuffer: PixelBufferRef) callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreVideo" fn PixelBufferGetIOSurface(pixelBuffer: PixelBufferRef) callconv(.C) io_surface.Ref;

pub extern "CoreVideo" fn PixelBufferCreateWithIOSurface(allocator: core_foundation.AllocatorRef, surface: io_surface.Ref, pixelBufferAttributes: core_foundation.DictionaryRef, pixelBufferOut: ?*PixelBufferRef, ) callconv(.C) Return;

pub const __CVPixelBufferPool = extern struct {};

pub const PixelBufferPoolRef = ?*__CVPixelBufferPool;

pub extern "CoreVideo" fn PixelBufferPoolGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreVideo" fn PixelBufferPoolRetain(pixelBufferPool: PixelBufferPoolRef) callconv(.C) PixelBufferPoolRef;

pub extern "CoreVideo" fn PixelBufferPoolRelease(pixelBufferPool: PixelBufferPoolRef) callconv(.C) void;

pub extern "CoreVideo" fn PixelBufferPoolCreate(allocator: core_foundation.AllocatorRef, poolAttributes: core_foundation.DictionaryRef, pixelBufferAttributes: core_foundation.DictionaryRef, poolOut: ?*PixelBufferPoolRef, ) callconv(.C) Return;

pub extern "CoreVideo" fn PixelBufferPoolGetAttributes(pool: PixelBufferPoolRef) callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreVideo" fn PixelBufferPoolGetPixelBufferAttributes(pool: PixelBufferPoolRef) callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreVideo" fn PixelBufferPoolCreatePixelBuffer(allocator: core_foundation.AllocatorRef, pixelBufferPool: PixelBufferPoolRef, pixelBufferOut: ?*PixelBufferRef) callconv(.C) Return;

pub extern "CoreVideo" fn PixelBufferPoolCreatePixelBufferWithAuxAttributes(allocator: core_foundation.AllocatorRef, pixelBufferPool: PixelBufferPoolRef, auxAttributes: core_foundation.DictionaryRef, pixelBufferOut: ?*PixelBufferRef, ) callconv(.C) Return;

pub const PixelBufferPoolFlushFlags = enum(OptionFlags) {
    kCVPixelBufferPoolFlushExcessBuffers = 1,
};

pub extern "CoreVideo" fn PixelBufferPoolFlush(pool: PixelBufferPoolRef, options: PixelBufferPoolFlushFlags) callconv(.C) void;

pub const OpenGLBufferRef = ImageBufferRef;

pub extern "CoreVideo" fn OpenGLBufferGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreVideo" fn OpenGLBufferRetain(buffer: OpenGLBufferRef) callconv(.C) OpenGLBufferRef;

pub extern "CoreVideo" fn OpenGLBufferRelease(buffer: OpenGLBufferRef) callconv(.C) void;

pub extern "CoreVideo" fn OpenGLBufferCreate(allocator: core_foundation.AllocatorRef, width: objc.size_t, height: objc.size_t, attributes: core_foundation.DictionaryRef, bufferOut: ?*OpenGLBufferRef, ) callconv(.C) Return;

pub extern "CoreVideo" fn OpenGLBufferGetAttributes(openGLBuffer: OpenGLBufferRef) callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreVideo" fn OpenGLBufferAttach(openGLBuffer: OpenGLBufferRef, cglContext: opengl.ContextObj, face: opengl.GLenum, level: opengl.GLint, screen: opengl.GLint, ) callconv(.C) Return;

pub const __CVOpenGLBufferPool = extern struct {};

pub const OpenGLBufferPoolRef = ?*__CVOpenGLBufferPool;

pub extern "CoreVideo" fn OpenGLBufferPoolGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreVideo" fn OpenGLBufferPoolRetain(openGLBufferPool: OpenGLBufferPoolRef) callconv(.C) OpenGLBufferPoolRef;

pub extern "CoreVideo" fn OpenGLBufferPoolRelease(openGLBufferPool: OpenGLBufferPoolRef) callconv(.C) void;

pub extern "CoreVideo" fn OpenGLBufferPoolCreate(allocator: core_foundation.AllocatorRef, poolAttributes: core_foundation.DictionaryRef, openGLBufferAttributes: core_foundation.DictionaryRef, poolOut: ?*OpenGLBufferPoolRef, ) callconv(.C) Return;

pub extern "CoreVideo" fn OpenGLBufferPoolGetAttributes(pool: OpenGLBufferPoolRef) callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreVideo" fn OpenGLBufferPoolGetOpenGLBufferAttributes(pool: OpenGLBufferPoolRef) callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreVideo" fn OpenGLBufferPoolCreateOpenGLBuffer(allocator: core_foundation.AllocatorRef, openGLBufferPool: OpenGLBufferPoolRef, openGLBufferOut: ?*OpenGLBufferRef) callconv(.C) Return;

pub const OpenGLTextureRef = ImageBufferRef;

pub extern "CoreVideo" fn OpenGLTextureGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreVideo" fn OpenGLTextureRetain(texture: OpenGLTextureRef) callconv(.C) OpenGLTextureRef;

pub extern "CoreVideo" fn OpenGLTextureRelease(texture: OpenGLTextureRef) callconv(.C) void;

pub extern "CoreVideo" fn OpenGLTextureGetTarget(image: OpenGLTextureRef) callconv(.C) opengl.GLenum;

pub extern "CoreVideo" fn OpenGLTextureGetName(image: OpenGLTextureRef) callconv(.C) opengl.GLuint;

pub extern "CoreVideo" fn OpenGLTextureIsFlipped(image: OpenGLTextureRef) callconv(.C) objc.Boolean;

pub extern "CoreVideo" fn OpenGLTextureGetCleanTexCoords(image: OpenGLTextureRef, lowerLeft: ?*opengl.GLfloat, lowerRight: ?*opengl.GLfloat, upperRight: ?*opengl.GLfloat, upperLeft: ?*opengl.GLfloat, ) callconv(.C) void;

pub const __CVOpenGLTextureCache = extern struct {};

pub const OpenGLTextureCacheRef = ?*__CVOpenGLTextureCache;

pub extern "CoreVideo" fn OpenGLTextureCacheGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreVideo" fn OpenGLTextureCacheRetain(textureCache: OpenGLTextureCacheRef) callconv(.C) OpenGLTextureCacheRef;

pub extern "CoreVideo" fn OpenGLTextureCacheRelease(textureCache: OpenGLTextureCacheRef) callconv(.C) void;

pub extern "CoreVideo" fn OpenGLTextureCacheCreate(allocator: core_foundation.AllocatorRef, cacheAttributes: core_foundation.DictionaryRef, cglContext: opengl.ContextObj, cglPixelFormat: opengl.PixelFormatObj, textureAttributes: core_foundation.DictionaryRef, cacheOut: ?*OpenGLTextureCacheRef, ) callconv(.C) Return;

pub extern "CoreVideo" fn OpenGLTextureCacheCreateTextureFromImage(allocator: core_foundation.AllocatorRef, textureCache: OpenGLTextureCacheRef, sourceImage: ImageBufferRef, attributes: core_foundation.DictionaryRef, textureOut: ?*OpenGLTextureRef, ) callconv(.C) Return;

pub extern "CoreVideo" fn OpenGLTextureCacheFlush(textureCache: OpenGLTextureCacheRef, options: OptionFlags) callconv(.C) void;

pub const MetalTextureRef = ImageBufferRef;

pub extern "CoreVideo" fn MetalTextureGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreVideo" fn MetalTextureGetTexture(image: MetalTextureRef) callconv(.C) ?*anyopaque;

pub extern "CoreVideo" fn MetalTextureIsFlipped(image: MetalTextureRef) callconv(.C) objc.Boolean;

pub extern "CoreVideo" fn MetalTextureGetCleanTexCoords(image: MetalTextureRef, lowerLeft: ?*f32, lowerRight: ?*f32, upperRight: ?*f32, upperLeft: ?*f32, ) callconv(.C) void;

pub const __CVMetalTextureCache = extern struct {};

pub const MetalTextureCacheRef = ?*__CVMetalTextureCache;

pub extern "CoreVideo" fn MetalTextureCacheGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreVideo" fn MetalTextureCacheCreate(allocator: core_foundation.AllocatorRef, cacheAttributes: core_foundation.DictionaryRef, metalDevice: ?*anyopaque, textureAttributes: core_foundation.DictionaryRef, cacheOut: ?*MetalTextureCacheRef, ) callconv(.C) Return;

pub extern "CoreVideo" fn MetalTextureCacheCreateTextureFromImage(allocator: core_foundation.AllocatorRef, textureCache: MetalTextureCacheRef, sourceImage: ImageBufferRef, textureAttributes: core_foundation.DictionaryRef, pixelFormat: metal.PixelFormat, width: objc.size_t, height: objc.size_t, planeIndex: objc.size_t, textureOut: ?*MetalTextureRef, ) callconv(.C) Return;

pub extern "CoreVideo" fn MetalTextureCacheFlush(textureCache: MetalTextureCacheRef, options: OptionFlags) callconv(.C) void;

pub const MetalBufferRef = BufferRef;

pub extern "CoreVideo" fn MetalBufferGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreVideo" fn MetalBufferGetBuffer(buffer: MetalBufferRef) callconv(.C) ?*anyopaque;

pub const __CVMetalBufferCache = extern struct {};

pub const MetalBufferCacheRef = ?*__CVMetalBufferCache;

pub extern "CoreVideo" fn MetalBufferCacheGetTypeID() callconv(.C) core_foundation.TypeID;

pub extern "CoreVideo" fn MetalBufferCacheCreate(allocator: core_foundation.AllocatorRef, cacheAttributes: core_foundation.DictionaryRef, metalDevice: ?*anyopaque, cacheOut: ?*MetalBufferCacheRef, ) callconv(.C) Return;

pub extern "CoreVideo" fn MetalBufferCacheCreateBufferFromImage(allocator: core_foundation.AllocatorRef, bufferCache: MetalBufferCacheRef, imageBuffer: ImageBufferRef, bufferOut: ?*MetalBufferRef, ) callconv(.C) Return;

pub extern "CoreVideo" fn MetalBufferCacheFlush(bufferCache: MetalBufferCacheRef, options: OptionFlags) callconv(.C) void;

pub const FillExtendedPixelsCallBack = ?*const fn(PixelBufferRef, ?*anyopaque) callconv(.C) objc.Boolean;

pub const FillExtendedPixelsCallBackData = extern struct {
    version: core_foundation.Index,
    fillCallBack: FillExtendedPixelsCallBack,
    refCon: ?*anyopaque,
};

pub extern "CoreVideo" fn PixelFormatDescriptionCreateWithPixelFormatType(allocator: core_foundation.AllocatorRef, pixelFormat: objc.OSType) callconv(.C) core_foundation.DictionaryRef;

pub extern "CoreVideo" fn PixelFormatDescriptionArrayCreateWithAllPixelFormatTypes(allocator: core_foundation.AllocatorRef) callconv(.C) core_foundation.ArrayRef;

pub extern "CoreVideo" fn PixelFormatDescriptionRegisterDescriptionWithPixelFormatType(description: core_foundation.DictionaryRef, pixelFormat: objc.OSType) callconv(.C) void;

pub extern "CoreVideo" fn IsCompressedPixelFormatAvailable(pixelFormatType: objc.OSType) callconv(.C) objc.Boolean;

