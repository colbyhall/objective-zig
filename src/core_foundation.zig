// THIS FILE IS AUTOGENERATED. MODIFICATIONS WILL NOT BE MAINTAINED.

const std = @import("std");
const objc = @import("objc.zig"); // Objective-C Runtime in zig.

pub const AllocatorTypeID = u64;

pub const TypeID = u64;

pub const OptionFlags = u64;

pub const HashCode = u64;

pub const Index = i64;

pub const TypeRef = ?*anyopaque;

pub const __CFString = extern struct {};

pub const StringRef = ?*__CFString;

pub const MutableStringRef = ?*__CFString;

pub const PropertyListRef = TypeRef;

pub const ComparisonResult = enum(Index) {
CompareLessThan = -1,
CompareEqualTo = 0,
CompareGreaterThan = 1,
};

pub const ComparatorFunction = ?*const fn(?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) ComparisonResult;

pub const Range = extern struct {
    location: Index,
    length: Index,
};

extern "CoreFoundation" fn CFRangeMake(loc: Index, len: Index) callconv(.C) Range;
pub const rangeMake = CFRangeMake;

extern "CoreFoundation" fn __CFRangeMake(loc: Index, len: Index) callconv(.C) Range;
pub const cfRangeMake = __CFRangeMake;

pub const __CFNull = extern struct {};

pub const NullRef = ?*__CFNull;

extern "CoreFoundation" fn CFNullGetTypeID() callconv(.C) TypeID;
pub const nullGetTypeID = CFNullGetTypeID;

pub const __CFAllocator = extern struct {};

pub const AllocatorRef = ?*__CFAllocator;

pub const AllocatorRetainCallBack = ?*const fn(?*anyopaque) callconv(.C) ?*anyopaque;

pub const AllocatorReleaseCallBack = ?*const fn(?*anyopaque) callconv(.C) void;

pub const AllocatorCopyDescriptionCallBack = ?*const fn(?*anyopaque) callconv(.C) StringRef;

pub const AllocatorAllocateCallBack = ?*const fn(Index, OptionFlags, ?*anyopaque) callconv(.C) ?*anyopaque;

pub const AllocatorReallocateCallBack = ?*const fn(?*anyopaque, Index, OptionFlags, ?*anyopaque, ) callconv(.C) ?*anyopaque;

pub const AllocatorDeallocateCallBack = ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) void;

pub const AllocatorPreferredSizeCallBack = ?*const fn(Index, OptionFlags, ?*anyopaque) callconv(.C) Index;

pub const AllocatorContext = extern struct {
    version: Index,
    info: ?*anyopaque,
    retain: AllocatorRetainCallBack,
    release: AllocatorReleaseCallBack,
    copyDescription: AllocatorCopyDescriptionCallBack,
    allocate: AllocatorAllocateCallBack,
    reallocate: AllocatorReallocateCallBack,
    deallocate: AllocatorDeallocateCallBack,
    preferredSize: AllocatorPreferredSizeCallBack,
};

extern "CoreFoundation" fn CFAllocatorGetTypeID() callconv(.C) TypeID;
pub const allocatorGetTypeID = CFAllocatorGetTypeID;

extern "CoreFoundation" fn CFAllocatorSetDefault(allocator: AllocatorRef) callconv(.C) void;
pub const allocatorSetDefault = CFAllocatorSetDefault;

extern "CoreFoundation" fn CFAllocatorGetDefault() callconv(.C) AllocatorRef;
pub const allocatorGetDefault = CFAllocatorGetDefault;

extern "CoreFoundation" fn CFAllocatorCreate(allocator: AllocatorRef, context: ?*AllocatorContext) callconv(.C) AllocatorRef;
pub const allocatorCreate = CFAllocatorCreate;

extern "CoreFoundation" fn CFAllocatorAllocateTyped(allocator: AllocatorRef, size: Index, descriptor: AllocatorTypeID, hint: OptionFlags, ) callconv(.C) ?*anyopaque;
pub const allocatorAllocateTyped = CFAllocatorAllocateTyped;

extern "CoreFoundation" fn CFAllocatorReallocateTyped(allocator: AllocatorRef, ptr: ?*anyopaque, newsize: Index, descriptor: AllocatorTypeID, hint: OptionFlags, ) callconv(.C) ?*anyopaque;
pub const allocatorReallocateTyped = CFAllocatorReallocateTyped;

extern "CoreFoundation" fn CFAllocatorAllocateBytes(allocator: AllocatorRef, size: Index, hint: OptionFlags) callconv(.C) ?*anyopaque;
pub const allocatorAllocateBytes = CFAllocatorAllocateBytes;

extern "CoreFoundation" fn CFAllocatorReallocateBytes(allocator: AllocatorRef, ptr: ?*anyopaque, newsize: Index, hint: OptionFlags, ) callconv(.C) ?*anyopaque;
pub const allocatorReallocateBytes = CFAllocatorReallocateBytes;

extern "CoreFoundation" fn CFAllocatorAllocate(allocator: AllocatorRef, size: Index, hint: OptionFlags) callconv(.C) ?*anyopaque;
pub const allocatorAllocate = CFAllocatorAllocate;

extern "CoreFoundation" fn CFAllocatorReallocate(allocator: AllocatorRef, ptr: ?*anyopaque, newsize: Index, hint: OptionFlags, ) callconv(.C) ?*anyopaque;
pub const allocatorReallocate = CFAllocatorReallocate;

extern "CoreFoundation" fn CFAllocatorDeallocate(allocator: AllocatorRef, ptr: ?*anyopaque) callconv(.C) void;
pub const allocatorDeallocate = CFAllocatorDeallocate;

extern "CoreFoundation" fn CFAllocatorGetPreferredSizeForSize(allocator: AllocatorRef, size: Index, hint: OptionFlags) callconv(.C) Index;
pub const allocatorGetPreferredSizeForSize = CFAllocatorGetPreferredSizeForSize;

extern "CoreFoundation" fn CFAllocatorGetContext(allocator: AllocatorRef, context: ?*AllocatorContext) callconv(.C) void;
pub const allocatorGetContext = CFAllocatorGetContext;

extern "CoreFoundation" fn CFGetTypeID(cf: TypeRef) callconv(.C) TypeID;
pub const getTypeID = CFGetTypeID;

extern "CoreFoundation" fn CFCopyTypeIDDescription(type_id: TypeID) callconv(.C) StringRef;
pub const copyTypeIDDescription = CFCopyTypeIDDescription;

extern "CoreFoundation" fn CFRetain(cf: TypeRef) callconv(.C) TypeRef;
pub const retain = CFRetain;

extern "CoreFoundation" fn CFRelease(cf: TypeRef) callconv(.C) void;
pub const release = CFRelease;

extern "CoreFoundation" fn CFAutorelease(arg: TypeRef) callconv(.C) TypeRef;
pub const autorelease = CFAutorelease;

extern "CoreFoundation" fn CFGetRetainCount(cf: TypeRef) callconv(.C) Index;
pub const getRetainCount = CFGetRetainCount;

extern "CoreFoundation" fn CFEqual(cf1: TypeRef, cf2: TypeRef) callconv(.C) objc.Boolean;
pub const equal = CFEqual;

extern "CoreFoundation" fn CFHash(cf: TypeRef) callconv(.C) HashCode;
pub const hash = CFHash;

extern "CoreFoundation" fn CFCopyDescription(cf: TypeRef) callconv(.C) StringRef;
pub const copyDescription = CFCopyDescription;

extern "CoreFoundation" fn CFGetAllocator(cf: TypeRef) callconv(.C) AllocatorRef;
pub const getAllocator = CFGetAllocator;

extern "CoreFoundation" fn CFMakeCollectable(cf: TypeRef) callconv(.C) TypeRef;
pub const makeCollectable = CFMakeCollectable;

pub const ArrayRetainCallBack = ?*const fn(AllocatorRef, ?*anyopaque) callconv(.C) ?*anyopaque;

pub const ArrayReleaseCallBack = ?*const fn(AllocatorRef, ?*anyopaque) callconv(.C) void;

pub const ArrayCopyDescriptionCallBack = ?*const fn(?*anyopaque) callconv(.C) StringRef;

pub const ArrayEqualCallBack = ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) objc.Boolean;

pub const ArrayCallBacks = extern struct {
    version: Index,
    retain: ArrayRetainCallBack,
    release: ArrayReleaseCallBack,
    copyDescription: ArrayCopyDescriptionCallBack,
    equal: ArrayEqualCallBack,
};

pub const ArrayApplierFunction = ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) void;

pub const __CFArray = extern struct {};

pub const ArrayRef = ?*__CFArray;

pub const MutableArrayRef = ?*__CFArray;

extern "CoreFoundation" fn CFArrayGetTypeID() callconv(.C) TypeID;
pub const arrayGetTypeID = CFArrayGetTypeID;

extern "CoreFoundation" fn CFArrayCreate(allocator: AllocatorRef, values: ?*?*anyopaque, numValues: Index, callBacks: ?*ArrayCallBacks, ) callconv(.C) ArrayRef;
pub const arrayCreate = CFArrayCreate;

extern "CoreFoundation" fn CFArrayCreateCopy(allocator: AllocatorRef, theArray: ArrayRef) callconv(.C) ArrayRef;
pub const arrayCreateCopy = CFArrayCreateCopy;

extern "CoreFoundation" fn CFArrayCreateMutable(allocator: AllocatorRef, capacity: Index, callBacks: ?*ArrayCallBacks) callconv(.C) MutableArrayRef;
pub const arrayCreateMutable = CFArrayCreateMutable;

extern "CoreFoundation" fn CFArrayCreateMutableCopy(allocator: AllocatorRef, capacity: Index, theArray: ArrayRef) callconv(.C) MutableArrayRef;
pub const arrayCreateMutableCopy = CFArrayCreateMutableCopy;

extern "CoreFoundation" fn CFArrayGetCount(theArray: ArrayRef) callconv(.C) Index;
pub const arrayGetCount = CFArrayGetCount;

extern "CoreFoundation" fn CFArrayGetCountOfValue(theArray: ArrayRef, range: Range, value: ?*anyopaque) callconv(.C) Index;
pub const arrayGetCountOfValue = CFArrayGetCountOfValue;

extern "CoreFoundation" fn CFArrayContainsValue(theArray: ArrayRef, range: Range, value: ?*anyopaque) callconv(.C) objc.Boolean;
pub const arrayContainsValue = CFArrayContainsValue;

extern "CoreFoundation" fn CFArrayGetValueAtIndex(theArray: ArrayRef, idx: Index) callconv(.C) ?*anyopaque;
pub const arrayGetValueAtIndex = CFArrayGetValueAtIndex;

extern "CoreFoundation" fn CFArrayGetValues(theArray: ArrayRef, range: Range, values: ?*?*anyopaque) callconv(.C) void;
pub const arrayGetValues = CFArrayGetValues;

extern "CoreFoundation" fn CFArrayApplyFunction(theArray: ArrayRef, range: Range, applier: ArrayApplierFunction, context: ?*anyopaque, ) callconv(.C) void;
pub const arrayApplyFunction = CFArrayApplyFunction;

extern "CoreFoundation" fn CFArrayGetFirstIndexOfValue(theArray: ArrayRef, range: Range, value: ?*anyopaque) callconv(.C) Index;
pub const arrayGetFirstIndexOfValue = CFArrayGetFirstIndexOfValue;

extern "CoreFoundation" fn CFArrayGetLastIndexOfValue(theArray: ArrayRef, range: Range, value: ?*anyopaque) callconv(.C) Index;
pub const arrayGetLastIndexOfValue = CFArrayGetLastIndexOfValue;

extern "CoreFoundation" fn CFArrayBSearchValues(theArray: ArrayRef, range: Range, value: ?*anyopaque, comparator: ComparatorFunction, context: ?*anyopaque, ) callconv(.C) Index;
pub const arrayBSearchValues = CFArrayBSearchValues;

extern "CoreFoundation" fn CFArrayAppendValue(theArray: MutableArrayRef, value: ?*anyopaque) callconv(.C) void;
pub const arrayAppendValue = CFArrayAppendValue;

extern "CoreFoundation" fn CFArrayInsertValueAtIndex(theArray: MutableArrayRef, idx: Index, value: ?*anyopaque) callconv(.C) void;
pub const arrayInsertValueAtIndex = CFArrayInsertValueAtIndex;

extern "CoreFoundation" fn CFArraySetValueAtIndex(theArray: MutableArrayRef, idx: Index, value: ?*anyopaque) callconv(.C) void;
pub const arraySetValueAtIndex = CFArraySetValueAtIndex;

extern "CoreFoundation" fn CFArrayRemoveValueAtIndex(theArray: MutableArrayRef, idx: Index) callconv(.C) void;
pub const arrayRemoveValueAtIndex = CFArrayRemoveValueAtIndex;

extern "CoreFoundation" fn CFArrayRemoveAllValues(theArray: MutableArrayRef) callconv(.C) void;
pub const arrayRemoveAllValues = CFArrayRemoveAllValues;

extern "CoreFoundation" fn CFArrayReplaceValues(theArray: MutableArrayRef, range: Range, newValues: ?*?*anyopaque, newCount: Index, ) callconv(.C) void;
pub const arrayReplaceValues = CFArrayReplaceValues;

extern "CoreFoundation" fn CFArrayExchangeValuesAtIndices(theArray: MutableArrayRef, idx1: Index, idx2: Index) callconv(.C) void;
pub const arrayExchangeValuesAtIndices = CFArrayExchangeValuesAtIndices;

extern "CoreFoundation" fn CFArraySortValues(theArray: MutableArrayRef, range: Range, comparator: ComparatorFunction, context: ?*anyopaque, ) callconv(.C) void;
pub const arraySortValues = CFArraySortValues;

extern "CoreFoundation" fn CFArrayAppendArray(theArray: MutableArrayRef, otherArray: ArrayRef, otherRange: Range) callconv(.C) void;
pub const arrayAppendArray = CFArrayAppendArray;

pub const BagRetainCallBack = ?*const fn(AllocatorRef, ?*anyopaque) callconv(.C) ?*anyopaque;

pub const BagReleaseCallBack = ?*const fn(AllocatorRef, ?*anyopaque) callconv(.C) void;

pub const BagCopyDescriptionCallBack = ?*const fn(?*anyopaque) callconv(.C) StringRef;

pub const BagEqualCallBack = ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) objc.Boolean;

pub const BagHashCallBack = ?*const fn(?*anyopaque) callconv(.C) HashCode;

pub const BagCallBacks = extern struct {
    version: Index,
    retain: BagRetainCallBack,
    release: BagReleaseCallBack,
    copyDescription: BagCopyDescriptionCallBack,
    equal: BagEqualCallBack,
    hash: BagHashCallBack,
};

pub const BagApplierFunction = ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) void;

pub const __CFBag = extern struct {};

pub const BagRef = ?*__CFBag;

pub const MutableBagRef = ?*__CFBag;

extern "CoreFoundation" fn CFBagGetTypeID() callconv(.C) TypeID;
pub const bagGetTypeID = CFBagGetTypeID;

extern "CoreFoundation" fn CFBagCreate(allocator: AllocatorRef, values: ?*?*anyopaque, numValues: Index, callBacks: ?*BagCallBacks, ) callconv(.C) BagRef;
pub const bagCreate = CFBagCreate;

extern "CoreFoundation" fn CFBagCreateCopy(allocator: AllocatorRef, theBag: BagRef) callconv(.C) BagRef;
pub const bagCreateCopy = CFBagCreateCopy;

extern "CoreFoundation" fn CFBagCreateMutable(allocator: AllocatorRef, capacity: Index, callBacks: ?*BagCallBacks) callconv(.C) MutableBagRef;
pub const bagCreateMutable = CFBagCreateMutable;

extern "CoreFoundation" fn CFBagCreateMutableCopy(allocator: AllocatorRef, capacity: Index, theBag: BagRef) callconv(.C) MutableBagRef;
pub const bagCreateMutableCopy = CFBagCreateMutableCopy;

extern "CoreFoundation" fn CFBagGetCount(theBag: BagRef) callconv(.C) Index;
pub const bagGetCount = CFBagGetCount;

extern "CoreFoundation" fn CFBagGetCountOfValue(theBag: BagRef, value: ?*anyopaque) callconv(.C) Index;
pub const bagGetCountOfValue = CFBagGetCountOfValue;

extern "CoreFoundation" fn CFBagContainsValue(theBag: BagRef, value: ?*anyopaque) callconv(.C) objc.Boolean;
pub const bagContainsValue = CFBagContainsValue;

extern "CoreFoundation" fn CFBagGetValue(theBag: BagRef, value: ?*anyopaque) callconv(.C) ?*anyopaque;
pub const bagGetValue = CFBagGetValue;

extern "CoreFoundation" fn CFBagGetValueIfPresent(theBag: BagRef, candidate: ?*anyopaque, value: ?*?*anyopaque) callconv(.C) objc.Boolean;
pub const bagGetValueIfPresent = CFBagGetValueIfPresent;

extern "CoreFoundation" fn CFBagGetValues(theBag: BagRef, values: ?*?*anyopaque) callconv(.C) void;
pub const bagGetValues = CFBagGetValues;

extern "CoreFoundation" fn CFBagApplyFunction(theBag: BagRef, applier: BagApplierFunction, context: ?*anyopaque) callconv(.C) void;
pub const bagApplyFunction = CFBagApplyFunction;

extern "CoreFoundation" fn CFBagAddValue(theBag: MutableBagRef, value: ?*anyopaque) callconv(.C) void;
pub const bagAddValue = CFBagAddValue;

extern "CoreFoundation" fn CFBagReplaceValue(theBag: MutableBagRef, value: ?*anyopaque) callconv(.C) void;
pub const bagReplaceValue = CFBagReplaceValue;

extern "CoreFoundation" fn CFBagSetValue(theBag: MutableBagRef, value: ?*anyopaque) callconv(.C) void;
pub const bagSetValue = CFBagSetValue;

extern "CoreFoundation" fn CFBagRemoveValue(theBag: MutableBagRef, value: ?*anyopaque) callconv(.C) void;
pub const bagRemoveValue = CFBagRemoveValue;

extern "CoreFoundation" fn CFBagRemoveAllValues(theBag: MutableBagRef) callconv(.C) void;
pub const bagRemoveAllValues = CFBagRemoveAllValues;

pub const BinaryHeapCompareContext = extern struct {
    version: Index,
    info: ?*anyopaque,
    retain: ?*const fn(?*anyopaque) callconv(.C) ?*anyopaque,
    release: ?*const fn(?*anyopaque) callconv(.C) void,
    copyDescription: ?*const fn(?*anyopaque) callconv(.C) StringRef,
};

pub const BinaryHeapCallBacks = extern struct {
    version: Index,
    retain: ?*const fn(AllocatorRef, ?*anyopaque) callconv(.C) ?*anyopaque,
    release: ?*const fn(AllocatorRef, ?*anyopaque) callconv(.C) void,
    copyDescription: ?*const fn(?*anyopaque) callconv(.C) StringRef,
    compare: ?*const fn(?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) ComparisonResult,
};

pub const BinaryHeapApplierFunction = ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) void;

pub const __CFBinaryHeap = extern struct {};

pub const BinaryHeapRef = ?*__CFBinaryHeap;

extern "CoreFoundation" fn CFBinaryHeapGetTypeID() callconv(.C) TypeID;
pub const binaryHeapGetTypeID = CFBinaryHeapGetTypeID;

extern "CoreFoundation" fn CFBinaryHeapCreate(allocator: AllocatorRef, capacity: Index, callBacks: ?*BinaryHeapCallBacks, compareContext: ?*BinaryHeapCompareContext, ) callconv(.C) BinaryHeapRef;
pub const binaryHeapCreate = CFBinaryHeapCreate;

extern "CoreFoundation" fn CFBinaryHeapCreateCopy(allocator: AllocatorRef, capacity: Index, heap: BinaryHeapRef) callconv(.C) BinaryHeapRef;
pub const binaryHeapCreateCopy = CFBinaryHeapCreateCopy;

extern "CoreFoundation" fn CFBinaryHeapGetCount(heap: BinaryHeapRef) callconv(.C) Index;
pub const binaryHeapGetCount = CFBinaryHeapGetCount;

extern "CoreFoundation" fn CFBinaryHeapGetCountOfValue(heap: BinaryHeapRef, value: ?*anyopaque) callconv(.C) Index;
pub const binaryHeapGetCountOfValue = CFBinaryHeapGetCountOfValue;

extern "CoreFoundation" fn CFBinaryHeapContainsValue(heap: BinaryHeapRef, value: ?*anyopaque) callconv(.C) objc.Boolean;
pub const binaryHeapContainsValue = CFBinaryHeapContainsValue;

extern "CoreFoundation" fn CFBinaryHeapGetMinimum(heap: BinaryHeapRef) callconv(.C) ?*anyopaque;
pub const binaryHeapGetMinimum = CFBinaryHeapGetMinimum;

extern "CoreFoundation" fn CFBinaryHeapGetMinimumIfPresent(heap: BinaryHeapRef, value: ?*?*anyopaque) callconv(.C) objc.Boolean;
pub const binaryHeapGetMinimumIfPresent = CFBinaryHeapGetMinimumIfPresent;

extern "CoreFoundation" fn CFBinaryHeapGetValues(heap: BinaryHeapRef, values: ?*?*anyopaque) callconv(.C) void;
pub const binaryHeapGetValues = CFBinaryHeapGetValues;

extern "CoreFoundation" fn CFBinaryHeapApplyFunction(heap: BinaryHeapRef, applier: BinaryHeapApplierFunction, context: ?*anyopaque) callconv(.C) void;
pub const binaryHeapApplyFunction = CFBinaryHeapApplyFunction;

extern "CoreFoundation" fn CFBinaryHeapAddValue(heap: BinaryHeapRef, value: ?*anyopaque) callconv(.C) void;
pub const binaryHeapAddValue = CFBinaryHeapAddValue;

extern "CoreFoundation" fn CFBinaryHeapRemoveMinimumValue(heap: BinaryHeapRef) callconv(.C) void;
pub const binaryHeapRemoveMinimumValue = CFBinaryHeapRemoveMinimumValue;

extern "CoreFoundation" fn CFBinaryHeapRemoveAllValues(heap: BinaryHeapRef) callconv(.C) void;
pub const binaryHeapRemoveAllValues = CFBinaryHeapRemoveAllValues;

pub const Bit = objc.UInt32;

pub const __CFBitVector = extern struct {};

pub const BitVectorRef = ?*__CFBitVector;

pub const MutableBitVectorRef = ?*__CFBitVector;

extern "CoreFoundation" fn CFBitVectorGetTypeID() callconv(.C) TypeID;
pub const bitVectorGetTypeID = CFBitVectorGetTypeID;

extern "CoreFoundation" fn CFBitVectorCreate(allocator: AllocatorRef, bytes: ?*objc.UInt8, numBits: Index) callconv(.C) BitVectorRef;
pub const bitVectorCreate = CFBitVectorCreate;

extern "CoreFoundation" fn CFBitVectorCreateCopy(allocator: AllocatorRef, bv: BitVectorRef) callconv(.C) BitVectorRef;
pub const bitVectorCreateCopy = CFBitVectorCreateCopy;

extern "CoreFoundation" fn CFBitVectorCreateMutable(allocator: AllocatorRef, capacity: Index) callconv(.C) MutableBitVectorRef;
pub const bitVectorCreateMutable = CFBitVectorCreateMutable;

extern "CoreFoundation" fn CFBitVectorCreateMutableCopy(allocator: AllocatorRef, capacity: Index, bv: BitVectorRef) callconv(.C) MutableBitVectorRef;
pub const bitVectorCreateMutableCopy = CFBitVectorCreateMutableCopy;

extern "CoreFoundation" fn CFBitVectorGetCount(bv: BitVectorRef) callconv(.C) Index;
pub const bitVectorGetCount = CFBitVectorGetCount;

extern "CoreFoundation" fn CFBitVectorGetCountOfBit(bv: BitVectorRef, range: Range, value: Bit) callconv(.C) Index;
pub const bitVectorGetCountOfBit = CFBitVectorGetCountOfBit;

extern "CoreFoundation" fn CFBitVectorContainsBit(bv: BitVectorRef, range: Range, value: Bit) callconv(.C) objc.Boolean;
pub const bitVectorContainsBit = CFBitVectorContainsBit;

extern "CoreFoundation" fn CFBitVectorGetBitAtIndex(bv: BitVectorRef, idx: Index) callconv(.C) Bit;
pub const bitVectorGetBitAtIndex = CFBitVectorGetBitAtIndex;

extern "CoreFoundation" fn CFBitVectorGetBits(bv: BitVectorRef, range: Range, bytes: ?*objc.UInt8) callconv(.C) void;
pub const bitVectorGetBits = CFBitVectorGetBits;

extern "CoreFoundation" fn CFBitVectorGetFirstIndexOfBit(bv: BitVectorRef, range: Range, value: Bit) callconv(.C) Index;
pub const bitVectorGetFirstIndexOfBit = CFBitVectorGetFirstIndexOfBit;

extern "CoreFoundation" fn CFBitVectorGetLastIndexOfBit(bv: BitVectorRef, range: Range, value: Bit) callconv(.C) Index;
pub const bitVectorGetLastIndexOfBit = CFBitVectorGetLastIndexOfBit;

extern "CoreFoundation" fn CFBitVectorSetCount(bv: MutableBitVectorRef, count: Index) callconv(.C) void;
pub const bitVectorSetCount = CFBitVectorSetCount;

extern "CoreFoundation" fn CFBitVectorFlipBitAtIndex(bv: MutableBitVectorRef, idx: Index) callconv(.C) void;
pub const bitVectorFlipBitAtIndex = CFBitVectorFlipBitAtIndex;

extern "CoreFoundation" fn CFBitVectorFlipBits(bv: MutableBitVectorRef, range: Range) callconv(.C) void;
pub const bitVectorFlipBits = CFBitVectorFlipBits;

extern "CoreFoundation" fn CFBitVectorSetBitAtIndex(bv: MutableBitVectorRef, idx: Index, value: Bit) callconv(.C) void;
pub const bitVectorSetBitAtIndex = CFBitVectorSetBitAtIndex;

extern "CoreFoundation" fn CFBitVectorSetBits(bv: MutableBitVectorRef, range: Range, value: Bit) callconv(.C) void;
pub const bitVectorSetBits = CFBitVectorSetBits;

extern "CoreFoundation" fn CFBitVectorSetAllBits(bv: MutableBitVectorRef, value: Bit) callconv(.C) void;
pub const bitVectorSetAllBits = CFBitVectorSetAllBits;

pub const anon701 = enum(OptionFlags) {
CFNotificationDeliverImmediately = 1,
CFNotificationPostToAllSessions = 2,
};

pub const __CFByteOrder = enum(u32) {
CFByteOrderUnknown = 0,
CFByteOrderLittleEndian = 1,
CFByteOrderBigEndian = 2,
};

pub const ByteOrder = Index;

extern "CoreFoundation" fn CFByteOrderGetCurrent() callconv(.C) ByteOrder;
pub const byteOrderGetCurrent = CFByteOrderGetCurrent;

extern "CoreFoundation" fn CFSwapInt16(arg: objc.uint16_t) callconv(.C) objc.uint16_t;
pub const swapInt16 = CFSwapInt16;

extern "CoreFoundation" fn CFSwapInt32(arg: objc.uint32_t) callconv(.C) objc.uint32_t;
pub const swapInt32 = CFSwapInt32;

extern "CoreFoundation" fn CFSwapInt64(arg: objc.uint64_t) callconv(.C) objc.uint64_t;
pub const swapInt64 = CFSwapInt64;

extern "CoreFoundation" fn CFSwapInt16BigToHost(arg: objc.uint16_t) callconv(.C) objc.uint16_t;
pub const swapInt16BigToHost = CFSwapInt16BigToHost;

extern "CoreFoundation" fn CFSwapInt32BigToHost(arg: objc.uint32_t) callconv(.C) objc.uint32_t;
pub const swapInt32BigToHost = CFSwapInt32BigToHost;

extern "CoreFoundation" fn CFSwapInt64BigToHost(arg: objc.uint64_t) callconv(.C) objc.uint64_t;
pub const swapInt64BigToHost = CFSwapInt64BigToHost;

extern "CoreFoundation" fn CFSwapInt16HostToBig(arg: objc.uint16_t) callconv(.C) objc.uint16_t;
pub const swapInt16HostToBig = CFSwapInt16HostToBig;

extern "CoreFoundation" fn CFSwapInt32HostToBig(arg: objc.uint32_t) callconv(.C) objc.uint32_t;
pub const swapInt32HostToBig = CFSwapInt32HostToBig;

extern "CoreFoundation" fn CFSwapInt64HostToBig(arg: objc.uint64_t) callconv(.C) objc.uint64_t;
pub const swapInt64HostToBig = CFSwapInt64HostToBig;

extern "CoreFoundation" fn CFSwapInt16LittleToHost(arg: objc.uint16_t) callconv(.C) objc.uint16_t;
pub const swapInt16LittleToHost = CFSwapInt16LittleToHost;

extern "CoreFoundation" fn CFSwapInt32LittleToHost(arg: objc.uint32_t) callconv(.C) objc.uint32_t;
pub const swapInt32LittleToHost = CFSwapInt32LittleToHost;

extern "CoreFoundation" fn CFSwapInt64LittleToHost(arg: objc.uint64_t) callconv(.C) objc.uint64_t;
pub const swapInt64LittleToHost = CFSwapInt64LittleToHost;

extern "CoreFoundation" fn CFSwapInt16HostToLittle(arg: objc.uint16_t) callconv(.C) objc.uint16_t;
pub const swapInt16HostToLittle = CFSwapInt16HostToLittle;

extern "CoreFoundation" fn CFSwapInt32HostToLittle(arg: objc.uint32_t) callconv(.C) objc.uint32_t;
pub const swapInt32HostToLittle = CFSwapInt32HostToLittle;

extern "CoreFoundation" fn CFSwapInt64HostToLittle(arg: objc.uint64_t) callconv(.C) objc.uint64_t;
pub const swapInt64HostToLittle = CFSwapInt64HostToLittle;

pub const SwappedFloat32 = extern struct {
    v: objc.uint32_t,
};

pub const SwappedFloat64 = extern struct {
    v: objc.uint64_t,
};

extern "CoreFoundation" fn CFConvertFloat32HostToSwapped(arg: objc.Float32) callconv(.C) SwappedFloat32;
pub const convertFloat32HostToSwapped = CFConvertFloat32HostToSwapped;

extern "CoreFoundation" fn CFConvertFloat32SwappedToHost(arg: SwappedFloat32) callconv(.C) objc.Float32;
pub const convertFloat32SwappedToHost = CFConvertFloat32SwappedToHost;

extern "CoreFoundation" fn CFConvertFloat64HostToSwapped(arg: objc.Float64) callconv(.C) SwappedFloat64;
pub const convertFloat64HostToSwapped = CFConvertFloat64HostToSwapped;

extern "CoreFoundation" fn CFConvertFloat64SwappedToHost(arg: SwappedFloat64) callconv(.C) objc.Float64;
pub const convertFloat64SwappedToHost = CFConvertFloat64SwappedToHost;

extern "CoreFoundation" fn CFConvertFloatHostToSwapped(arg: f32) callconv(.C) SwappedFloat32;
pub const convertFloatHostToSwapped = CFConvertFloatHostToSwapped;

extern "CoreFoundation" fn CFConvertFloatSwappedToHost(arg: SwappedFloat32) callconv(.C) f32;
pub const convertFloatSwappedToHost = CFConvertFloatSwappedToHost;

extern "CoreFoundation" fn CFConvertDoubleHostToSwapped(arg: f64) callconv(.C) SwappedFloat64;
pub const convertDoubleHostToSwapped = CFConvertDoubleHostToSwapped;

extern "CoreFoundation" fn CFConvertDoubleSwappedToHost(arg: SwappedFloat64) callconv(.C) f64;
pub const convertDoubleSwappedToHost = CFConvertDoubleSwappedToHost;

pub const DictionaryRetainCallBack = ?*const fn(AllocatorRef, ?*anyopaque) callconv(.C) ?*anyopaque;

pub const DictionaryReleaseCallBack = ?*const fn(AllocatorRef, ?*anyopaque) callconv(.C) void;

pub const DictionaryCopyDescriptionCallBack = ?*const fn(?*anyopaque) callconv(.C) StringRef;

pub const DictionaryEqualCallBack = ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) objc.Boolean;

pub const DictionaryHashCallBack = ?*const fn(?*anyopaque) callconv(.C) HashCode;

pub const DictionaryKeyCallBacks = extern struct {
    version: Index,
    retain: DictionaryRetainCallBack,
    release: DictionaryReleaseCallBack,
    copyDescription: DictionaryCopyDescriptionCallBack,
    equal: DictionaryEqualCallBack,
    hash: DictionaryHashCallBack,
};

pub const DictionaryValueCallBacks = extern struct {
    version: Index,
    retain: DictionaryRetainCallBack,
    release: DictionaryReleaseCallBack,
    copyDescription: DictionaryCopyDescriptionCallBack,
    equal: DictionaryEqualCallBack,
};

pub const DictionaryApplierFunction = ?*const fn(?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) void;

pub const __CFDictionary = extern struct {};

pub const DictionaryRef = ?*__CFDictionary;

pub const MutableDictionaryRef = ?*__CFDictionary;

extern "CoreFoundation" fn CFDictionaryGetTypeID() callconv(.C) TypeID;
pub const dictionaryGetTypeID = CFDictionaryGetTypeID;

extern "CoreFoundation" fn CFDictionaryCreate(allocator: AllocatorRef, keys: ?*?*anyopaque, values: ?*?*anyopaque, numValues: Index, keyCallBacks: ?*DictionaryKeyCallBacks, valueCallBacks: ?*DictionaryValueCallBacks, ) callconv(.C) DictionaryRef;
pub const dictionaryCreate = CFDictionaryCreate;

extern "CoreFoundation" fn CFDictionaryCreateCopy(allocator: AllocatorRef, theDict: DictionaryRef) callconv(.C) DictionaryRef;
pub const dictionaryCreateCopy = CFDictionaryCreateCopy;

extern "CoreFoundation" fn CFDictionaryCreateMutable(allocator: AllocatorRef, capacity: Index, keyCallBacks: ?*DictionaryKeyCallBacks, valueCallBacks: ?*DictionaryValueCallBacks, ) callconv(.C) MutableDictionaryRef;
pub const dictionaryCreateMutable = CFDictionaryCreateMutable;

extern "CoreFoundation" fn CFDictionaryCreateMutableCopy(allocator: AllocatorRef, capacity: Index, theDict: DictionaryRef) callconv(.C) MutableDictionaryRef;
pub const dictionaryCreateMutableCopy = CFDictionaryCreateMutableCopy;

extern "CoreFoundation" fn CFDictionaryGetCount(theDict: DictionaryRef) callconv(.C) Index;
pub const dictionaryGetCount = CFDictionaryGetCount;

extern "CoreFoundation" fn CFDictionaryGetCountOfKey(theDict: DictionaryRef, key: ?*anyopaque) callconv(.C) Index;
pub const dictionaryGetCountOfKey = CFDictionaryGetCountOfKey;

extern "CoreFoundation" fn CFDictionaryGetCountOfValue(theDict: DictionaryRef, value: ?*anyopaque) callconv(.C) Index;
pub const dictionaryGetCountOfValue = CFDictionaryGetCountOfValue;

extern "CoreFoundation" fn CFDictionaryContainsKey(theDict: DictionaryRef, key: ?*anyopaque) callconv(.C) objc.Boolean;
pub const dictionaryContainsKey = CFDictionaryContainsKey;

extern "CoreFoundation" fn CFDictionaryContainsValue(theDict: DictionaryRef, value: ?*anyopaque) callconv(.C) objc.Boolean;
pub const dictionaryContainsValue = CFDictionaryContainsValue;

extern "CoreFoundation" fn CFDictionaryGetValue(theDict: DictionaryRef, key: ?*anyopaque) callconv(.C) ?*anyopaque;
pub const dictionaryGetValue = CFDictionaryGetValue;

extern "CoreFoundation" fn CFDictionaryGetValueIfPresent(theDict: DictionaryRef, key: ?*anyopaque, value: ?*?*anyopaque) callconv(.C) objc.Boolean;
pub const dictionaryGetValueIfPresent = CFDictionaryGetValueIfPresent;

extern "CoreFoundation" fn CFDictionaryGetKeysAndValues(theDict: DictionaryRef, keys: ?*?*anyopaque, values: ?*?*anyopaque) callconv(.C) void;
pub const dictionaryGetKeysAndValues = CFDictionaryGetKeysAndValues;

extern "CoreFoundation" fn CFDictionaryApplyFunction(theDict: DictionaryRef, applier: DictionaryApplierFunction, context: ?*anyopaque) callconv(.C) void;
pub const dictionaryApplyFunction = CFDictionaryApplyFunction;

extern "CoreFoundation" fn CFDictionaryAddValue(theDict: MutableDictionaryRef, key: ?*anyopaque, value: ?*anyopaque) callconv(.C) void;
pub const dictionaryAddValue = CFDictionaryAddValue;

extern "CoreFoundation" fn CFDictionarySetValue(theDict: MutableDictionaryRef, key: ?*anyopaque, value: ?*anyopaque) callconv(.C) void;
pub const dictionarySetValue = CFDictionarySetValue;

extern "CoreFoundation" fn CFDictionaryReplaceValue(theDict: MutableDictionaryRef, key: ?*anyopaque, value: ?*anyopaque) callconv(.C) void;
pub const dictionaryReplaceValue = CFDictionaryReplaceValue;

extern "CoreFoundation" fn CFDictionaryRemoveValue(theDict: MutableDictionaryRef, key: ?*anyopaque) callconv(.C) void;
pub const dictionaryRemoveValue = CFDictionaryRemoveValue;

extern "CoreFoundation" fn CFDictionaryRemoveAllValues(theDict: MutableDictionaryRef) callconv(.C) void;
pub const dictionaryRemoveAllValues = CFDictionaryRemoveAllValues;

pub const NotificationName = StringRef;

pub const __CFNotificationCenter = extern struct {};

pub const NotificationCenterRef = ?*__CFNotificationCenter;

pub const NotificationCallback = ?*const fn(NotificationCenterRef, ?*anyopaque, NotificationName, ?*anyopaque, DictionaryRef, ) callconv(.C) void;

pub const NotificationSuspensionBehavior = enum(Index) {
Drop = 1,
Coalesce = 2,
Hold = 3,
DeliverImmediately = 4,
};

extern "CoreFoundation" fn CFNotificationCenterGetTypeID() callconv(.C) TypeID;
pub const notificationCenterGetTypeID = CFNotificationCenterGetTypeID;

extern "CoreFoundation" fn CFNotificationCenterGetLocalCenter() callconv(.C) NotificationCenterRef;
pub const notificationCenterGetLocalCenter = CFNotificationCenterGetLocalCenter;

extern "CoreFoundation" fn CFNotificationCenterGetDistributedCenter() callconv(.C) NotificationCenterRef;
pub const notificationCenterGetDistributedCenter = CFNotificationCenterGetDistributedCenter;

extern "CoreFoundation" fn CFNotificationCenterGetDarwinNotifyCenter() callconv(.C) NotificationCenterRef;
pub const notificationCenterGetDarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter;

extern "CoreFoundation" fn CFNotificationCenterAddObserver(center: NotificationCenterRef, observer: ?*anyopaque, callBack: NotificationCallback, name: StringRef, object: ?*anyopaque, suspensionBehavior: NotificationSuspensionBehavior, ) callconv(.C) void;
pub const notificationCenterAddObserver = CFNotificationCenterAddObserver;

extern "CoreFoundation" fn CFNotificationCenterRemoveObserver(center: NotificationCenterRef, observer: ?*anyopaque, name: NotificationName, object: ?*anyopaque, ) callconv(.C) void;
pub const notificationCenterRemoveObserver = CFNotificationCenterRemoveObserver;

extern "CoreFoundation" fn CFNotificationCenterRemoveEveryObserver(center: NotificationCenterRef, observer: ?*anyopaque) callconv(.C) void;
pub const notificationCenterRemoveEveryObserver = CFNotificationCenterRemoveEveryObserver;

extern "CoreFoundation" fn CFNotificationCenterPostNotification(center: NotificationCenterRef, name: NotificationName, object: ?*anyopaque, userInfo: DictionaryRef, deliverImmediately: objc.Boolean, ) callconv(.C) void;
pub const notificationCenterPostNotification = CFNotificationCenterPostNotification;

extern "CoreFoundation" fn CFNotificationCenterPostNotificationWithOptions(center: NotificationCenterRef, name: NotificationName, object: ?*anyopaque, userInfo: DictionaryRef, options: OptionFlags, ) callconv(.C) void;
pub const notificationCenterPostNotificationWithOptions = CFNotificationCenterPostNotificationWithOptions;

pub const LocaleIdentifier = StringRef;

pub const LocaleKey = StringRef;

pub const __CFLocale = extern struct {};

pub const LocaleRef = ?*__CFLocale;

extern "CoreFoundation" fn CFLocaleGetTypeID() callconv(.C) TypeID;
pub const localeGetTypeID = CFLocaleGetTypeID;

extern "CoreFoundation" fn CFLocaleGetSystem() callconv(.C) LocaleRef;
pub const localeGetSystem = CFLocaleGetSystem;

extern "CoreFoundation" fn CFLocaleCopyCurrent() callconv(.C) LocaleRef;
pub const localeCopyCurrent = CFLocaleCopyCurrent;

extern "CoreFoundation" fn CFLocaleCopyAvailableLocaleIdentifiers() callconv(.C) ArrayRef;
pub const localeCopyAvailableLocaleIdentifiers = CFLocaleCopyAvailableLocaleIdentifiers;

extern "CoreFoundation" fn CFLocaleCopyISOLanguageCodes() callconv(.C) ArrayRef;
pub const localeCopyISOLanguageCodes = CFLocaleCopyISOLanguageCodes;

extern "CoreFoundation" fn CFLocaleCopyISOCountryCodes() callconv(.C) ArrayRef;
pub const localeCopyISOCountryCodes = CFLocaleCopyISOCountryCodes;

extern "CoreFoundation" fn CFLocaleCopyISOCurrencyCodes() callconv(.C) ArrayRef;
pub const localeCopyISOCurrencyCodes = CFLocaleCopyISOCurrencyCodes;

extern "CoreFoundation" fn CFLocaleCopyCommonISOCurrencyCodes() callconv(.C) ArrayRef;
pub const localeCopyCommonISOCurrencyCodes = CFLocaleCopyCommonISOCurrencyCodes;

extern "CoreFoundation" fn CFLocaleCopyPreferredLanguages() callconv(.C) ArrayRef;
pub const localeCopyPreferredLanguages = CFLocaleCopyPreferredLanguages;

extern "CoreFoundation" fn CFLocaleCreateCanonicalLanguageIdentifierFromString(allocator: AllocatorRef, localeIdentifier: StringRef) callconv(.C) LocaleIdentifier;
pub const localeCreateCanonicalLanguageIdentifierFromString = CFLocaleCreateCanonicalLanguageIdentifierFromString;

extern "CoreFoundation" fn CFLocaleCreateCanonicalLocaleIdentifierFromString(allocator: AllocatorRef, localeIdentifier: StringRef) callconv(.C) LocaleIdentifier;
pub const localeCreateCanonicalLocaleIdentifierFromString = CFLocaleCreateCanonicalLocaleIdentifierFromString;

extern "CoreFoundation" fn CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(allocator: AllocatorRef, lcode: objc.LangCode, rcode: objc.RegionCode) callconv(.C) LocaleIdentifier;
pub const localeCreateCanonicalLocaleIdentifierFromScriptManagerCodes = CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes;

extern "CoreFoundation" fn CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(allocator: AllocatorRef, lcid: objc.uint32_t) callconv(.C) LocaleIdentifier;
pub const localeCreateLocaleIdentifierFromWindowsLocaleCode = CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode;

extern "CoreFoundation" fn CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(localeIdentifier: LocaleIdentifier) callconv(.C) objc.uint32_t;
pub const localeGetWindowsLocaleCodeFromLocaleIdentifier = CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier;

pub const LocaleLanguageDirection = enum(Index) {
Unknown = 0,
LeftToRight = 1,
RightToLeft = 2,
TopToBottom = 3,
BottomToTop = 4,
};

extern "CoreFoundation" fn CFLocaleGetLanguageCharacterDirection(isoLangCode: StringRef) callconv(.C) LocaleLanguageDirection;
pub const localeGetLanguageCharacterDirection = CFLocaleGetLanguageCharacterDirection;

extern "CoreFoundation" fn CFLocaleGetLanguageLineDirection(isoLangCode: StringRef) callconv(.C) LocaleLanguageDirection;
pub const localeGetLanguageLineDirection = CFLocaleGetLanguageLineDirection;

extern "CoreFoundation" fn CFLocaleCreateComponentsFromLocaleIdentifier(allocator: AllocatorRef, localeID: LocaleIdentifier) callconv(.C) DictionaryRef;
pub const localeCreateComponentsFromLocaleIdentifier = CFLocaleCreateComponentsFromLocaleIdentifier;

extern "CoreFoundation" fn CFLocaleCreateLocaleIdentifierFromComponents(allocator: AllocatorRef, dictionary: DictionaryRef) callconv(.C) LocaleIdentifier;
pub const localeCreateLocaleIdentifierFromComponents = CFLocaleCreateLocaleIdentifierFromComponents;

extern "CoreFoundation" fn CFLocaleCreate(allocator: AllocatorRef, localeIdentifier: LocaleIdentifier) callconv(.C) LocaleRef;
pub const localeCreate = CFLocaleCreate;

extern "CoreFoundation" fn CFLocaleCreateCopy(allocator: AllocatorRef, locale: LocaleRef) callconv(.C) LocaleRef;
pub const localeCreateCopy = CFLocaleCreateCopy;

extern "CoreFoundation" fn CFLocaleGetIdentifier(locale: LocaleRef) callconv(.C) LocaleIdentifier;
pub const localeGetIdentifier = CFLocaleGetIdentifier;

extern "CoreFoundation" fn CFLocaleGetValue(locale: LocaleRef, key: LocaleKey) callconv(.C) TypeRef;
pub const localeGetValue = CFLocaleGetValue;

extern "CoreFoundation" fn CFLocaleCopyDisplayNameForPropertyValue(displayLocale: LocaleRef, key: LocaleKey, value: StringRef) callconv(.C) StringRef;
pub const localeCopyDisplayNameForPropertyValue = CFLocaleCopyDisplayNameForPropertyValue;

pub const CalendarIdentifier = StringRef;

pub const TimeInterval = f64;

pub const AbsoluteTime = TimeInterval;

extern "CoreFoundation" fn CFAbsoluteTimeGetCurrent() callconv(.C) AbsoluteTime;
pub const absoluteTimeGetCurrent = CFAbsoluteTimeGetCurrent;

pub const __CFDate = extern struct {};

pub const DateRef = ?*__CFDate;

extern "CoreFoundation" fn CFDateGetTypeID() callconv(.C) TypeID;
pub const dateGetTypeID = CFDateGetTypeID;

extern "CoreFoundation" fn CFDateCreate(allocator: AllocatorRef, at: AbsoluteTime) callconv(.C) DateRef;
pub const dateCreate = CFDateCreate;

extern "CoreFoundation" fn CFDateGetAbsoluteTime(theDate: DateRef) callconv(.C) AbsoluteTime;
pub const dateGetAbsoluteTime = CFDateGetAbsoluteTime;

extern "CoreFoundation" fn CFDateGetTimeIntervalSinceDate(theDate: DateRef, otherDate: DateRef) callconv(.C) TimeInterval;
pub const dateGetTimeIntervalSinceDate = CFDateGetTimeIntervalSinceDate;

extern "CoreFoundation" fn CFDateCompare(theDate: DateRef, otherDate: DateRef, context: ?*anyopaque) callconv(.C) ComparisonResult;
pub const dateCompare = CFDateCompare;

pub const __CFTimeZone = extern struct {};

pub const TimeZoneRef = ?*__CFTimeZone;

pub const GregorianDate = extern struct {
    year: objc.SInt32,
    month: objc.SInt8,
    day: objc.SInt8,
    hour: objc.SInt8,
    minute: objc.SInt8,
    second: f64,
};

pub const GregorianUnits = extern struct {
    years: objc.SInt32,
    months: objc.SInt32,
    days: objc.SInt32,
    hours: objc.SInt32,
    minutes: objc.SInt32,
    seconds: f64,
};

pub const GregorianUnitFlags = enum(OptionFlags) {
UnitsYears = 1,
UnitsMonths = 2,
UnitsDays = 4,
UnitsHours = 8,
UnitsMinutes = 16,
UnitsSeconds = 32,
AllUnits = 16777215,
};

extern "CoreFoundation" fn CFGregorianDateIsValid(gdate: GregorianDate, unitFlags: OptionFlags) callconv(.C) objc.Boolean;
pub const gregorianDateIsValid = CFGregorianDateIsValid;

extern "CoreFoundation" fn CFGregorianDateGetAbsoluteTime(gdate: GregorianDate, tz: TimeZoneRef) callconv(.C) AbsoluteTime;
pub const gregorianDateGetAbsoluteTime = CFGregorianDateGetAbsoluteTime;

extern "CoreFoundation" fn CFAbsoluteTimeGetGregorianDate(at: AbsoluteTime, tz: TimeZoneRef) callconv(.C) GregorianDate;
pub const absoluteTimeGetGregorianDate = CFAbsoluteTimeGetGregorianDate;

extern "CoreFoundation" fn CFAbsoluteTimeAddGregorianUnits(at: AbsoluteTime, tz: TimeZoneRef, units: GregorianUnits) callconv(.C) AbsoluteTime;
pub const absoluteTimeAddGregorianUnits = CFAbsoluteTimeAddGregorianUnits;

extern "CoreFoundation" fn CFAbsoluteTimeGetDifferenceAsGregorianUnits(at1: AbsoluteTime, at2: AbsoluteTime, tz: TimeZoneRef, unitFlags: OptionFlags, ) callconv(.C) GregorianUnits;
pub const absoluteTimeGetDifferenceAsGregorianUnits = CFAbsoluteTimeGetDifferenceAsGregorianUnits;

extern "CoreFoundation" fn CFAbsoluteTimeGetDayOfWeek(at: AbsoluteTime, tz: TimeZoneRef) callconv(.C) objc.SInt32;
pub const absoluteTimeGetDayOfWeek = CFAbsoluteTimeGetDayOfWeek;

extern "CoreFoundation" fn CFAbsoluteTimeGetDayOfYear(at: AbsoluteTime, tz: TimeZoneRef) callconv(.C) objc.SInt32;
pub const absoluteTimeGetDayOfYear = CFAbsoluteTimeGetDayOfYear;

extern "CoreFoundation" fn CFAbsoluteTimeGetWeekOfYear(at: AbsoluteTime, tz: TimeZoneRef) callconv(.C) objc.SInt32;
pub const absoluteTimeGetWeekOfYear = CFAbsoluteTimeGetWeekOfYear;

pub const __CFData = extern struct {};

pub const DataRef = ?*__CFData;

pub const MutableDataRef = ?*__CFData;

extern "CoreFoundation" fn CFDataGetTypeID() callconv(.C) TypeID;
pub const dataGetTypeID = CFDataGetTypeID;

extern "CoreFoundation" fn CFDataCreate(allocator: AllocatorRef, bytes: ?*objc.UInt8, length: Index) callconv(.C) DataRef;
pub const dataCreate = CFDataCreate;

extern "CoreFoundation" fn CFDataCreateWithBytesNoCopy(allocator: AllocatorRef, bytes: ?*objc.UInt8, length: Index, bytesDeallocator: AllocatorRef, ) callconv(.C) DataRef;
pub const dataCreateWithBytesNoCopy = CFDataCreateWithBytesNoCopy;

extern "CoreFoundation" fn CFDataCreateCopy(allocator: AllocatorRef, theData: DataRef) callconv(.C) DataRef;
pub const dataCreateCopy = CFDataCreateCopy;

extern "CoreFoundation" fn CFDataCreateMutable(allocator: AllocatorRef, capacity: Index) callconv(.C) MutableDataRef;
pub const dataCreateMutable = CFDataCreateMutable;

extern "CoreFoundation" fn CFDataCreateMutableCopy(allocator: AllocatorRef, capacity: Index, theData: DataRef) callconv(.C) MutableDataRef;
pub const dataCreateMutableCopy = CFDataCreateMutableCopy;

extern "CoreFoundation" fn CFDataGetLength(theData: DataRef) callconv(.C) Index;
pub const dataGetLength = CFDataGetLength;

extern "CoreFoundation" fn CFDataGetBytePtr(theData: DataRef) callconv(.C) ?*objc.UInt8;
pub const dataGetBytePtr = CFDataGetBytePtr;

extern "CoreFoundation" fn CFDataGetMutableBytePtr(theData: MutableDataRef) callconv(.C) ?*objc.UInt8;
pub const dataGetMutableBytePtr = CFDataGetMutableBytePtr;

extern "CoreFoundation" fn CFDataGetBytes(theData: DataRef, range: Range, buffer: ?*objc.UInt8) callconv(.C) void;
pub const dataGetBytes = CFDataGetBytes;

extern "CoreFoundation" fn CFDataSetLength(theData: MutableDataRef, length: Index) callconv(.C) void;
pub const dataSetLength = CFDataSetLength;

extern "CoreFoundation" fn CFDataIncreaseLength(theData: MutableDataRef, extraLength: Index) callconv(.C) void;
pub const dataIncreaseLength = CFDataIncreaseLength;

extern "CoreFoundation" fn CFDataAppendBytes(theData: MutableDataRef, bytes: ?*objc.UInt8, length: Index) callconv(.C) void;
pub const dataAppendBytes = CFDataAppendBytes;

extern "CoreFoundation" fn CFDataReplaceBytes(theData: MutableDataRef, range: Range, newBytes: ?*objc.UInt8, newLength: Index, ) callconv(.C) void;
pub const dataReplaceBytes = CFDataReplaceBytes;

extern "CoreFoundation" fn CFDataDeleteBytes(theData: MutableDataRef, range: Range) callconv(.C) void;
pub const dataDeleteBytes = CFDataDeleteBytes;

pub const DataSearchFlags = enum(OptionFlags) {
Backwards = 1,
Anchored = 2,
};

extern "CoreFoundation" fn CFDataFind(theData: DataRef, dataToFind: DataRef, searchRange: Range, compareOptions: DataSearchFlags, ) callconv(.C) Range;
pub const dataFind = CFDataFind;

pub const __CFCharacterSet = extern struct {};

pub const CharacterSetRef = ?*__CFCharacterSet;

pub const MutableCharacterSetRef = ?*__CFCharacterSet;

pub const CharacterSetPredefinedSet = enum(Index) {
Control = 1,
Whitespace = 2,
WhitespaceAndNewline = 3,
DecimalDigit = 4,
Letter = 5,
LowercaseLetter = 6,
UppercaseLetter = 7,
NonBase = 8,
Decomposable = 9,
AlphaNumeric = 10,
Punctuation = 11,
CapitalizedLetter = 13,
Symbol = 14,
Newline = 15,
Illegal = 12,
};

extern "CoreFoundation" fn CFCharacterSetGetTypeID() callconv(.C) TypeID;
pub const characterSetGetTypeID = CFCharacterSetGetTypeID;

extern "CoreFoundation" fn CFCharacterSetGetPredefined(theSetIdentifier: CharacterSetPredefinedSet) callconv(.C) CharacterSetRef;
pub const characterSetGetPredefined = CFCharacterSetGetPredefined;

extern "CoreFoundation" fn CFCharacterSetCreateWithCharactersInRange(alloc: AllocatorRef, theRange: Range) callconv(.C) CharacterSetRef;
pub const characterSetCreateWithCharactersInRange = CFCharacterSetCreateWithCharactersInRange;

extern "CoreFoundation" fn CFCharacterSetCreateWithCharactersInString(alloc: AllocatorRef, theString: StringRef) callconv(.C) CharacterSetRef;
pub const characterSetCreateWithCharactersInString = CFCharacterSetCreateWithCharactersInString;

extern "CoreFoundation" fn CFCharacterSetCreateWithBitmapRepresentation(alloc: AllocatorRef, theData: DataRef) callconv(.C) CharacterSetRef;
pub const characterSetCreateWithBitmapRepresentation = CFCharacterSetCreateWithBitmapRepresentation;

extern "CoreFoundation" fn CFCharacterSetCreateInvertedSet(alloc: AllocatorRef, theSet: CharacterSetRef) callconv(.C) CharacterSetRef;
pub const characterSetCreateInvertedSet = CFCharacterSetCreateInvertedSet;

extern "CoreFoundation" fn CFCharacterSetIsSupersetOfSet(theSet: CharacterSetRef, theOtherset: CharacterSetRef) callconv(.C) objc.Boolean;
pub const characterSetIsSupersetOfSet = CFCharacterSetIsSupersetOfSet;

extern "CoreFoundation" fn CFCharacterSetHasMemberInPlane(theSet: CharacterSetRef, thePlane: Index) callconv(.C) objc.Boolean;
pub const characterSetHasMemberInPlane = CFCharacterSetHasMemberInPlane;

extern "CoreFoundation" fn CFCharacterSetCreateMutable(alloc: AllocatorRef) callconv(.C) MutableCharacterSetRef;
pub const characterSetCreateMutable = CFCharacterSetCreateMutable;

extern "CoreFoundation" fn CFCharacterSetCreateCopy(alloc: AllocatorRef, theSet: CharacterSetRef) callconv(.C) CharacterSetRef;
pub const characterSetCreateCopy = CFCharacterSetCreateCopy;

extern "CoreFoundation" fn CFCharacterSetCreateMutableCopy(alloc: AllocatorRef, theSet: CharacterSetRef) callconv(.C) MutableCharacterSetRef;
pub const characterSetCreateMutableCopy = CFCharacterSetCreateMutableCopy;

extern "CoreFoundation" fn CFCharacterSetIsCharacterMember(theSet: CharacterSetRef, theChar: objc.UniChar) callconv(.C) objc.Boolean;
pub const characterSetIsCharacterMember = CFCharacterSetIsCharacterMember;

extern "CoreFoundation" fn CFCharacterSetIsLongCharacterMember(theSet: CharacterSetRef, theChar: objc.UTF32Char) callconv(.C) objc.Boolean;
pub const characterSetIsLongCharacterMember = CFCharacterSetIsLongCharacterMember;

extern "CoreFoundation" fn CFCharacterSetCreateBitmapRepresentation(alloc: AllocatorRef, theSet: CharacterSetRef) callconv(.C) DataRef;
pub const characterSetCreateBitmapRepresentation = CFCharacterSetCreateBitmapRepresentation;

extern "CoreFoundation" fn CFCharacterSetAddCharactersInRange(theSet: MutableCharacterSetRef, theRange: Range) callconv(.C) void;
pub const characterSetAddCharactersInRange = CFCharacterSetAddCharactersInRange;

extern "CoreFoundation" fn CFCharacterSetRemoveCharactersInRange(theSet: MutableCharacterSetRef, theRange: Range) callconv(.C) void;
pub const characterSetRemoveCharactersInRange = CFCharacterSetRemoveCharactersInRange;

extern "CoreFoundation" fn CFCharacterSetAddCharactersInString(theSet: MutableCharacterSetRef, theString: StringRef) callconv(.C) void;
pub const characterSetAddCharactersInString = CFCharacterSetAddCharactersInString;

extern "CoreFoundation" fn CFCharacterSetRemoveCharactersInString(theSet: MutableCharacterSetRef, theString: StringRef) callconv(.C) void;
pub const characterSetRemoveCharactersInString = CFCharacterSetRemoveCharactersInString;

extern "CoreFoundation" fn CFCharacterSetUnion(theSet: MutableCharacterSetRef, theOtherSet: CharacterSetRef) callconv(.C) void;
pub const characterSetUnion = CFCharacterSetUnion;

extern "CoreFoundation" fn CFCharacterSetIntersect(theSet: MutableCharacterSetRef, theOtherSet: CharacterSetRef) callconv(.C) void;
pub const characterSetIntersect = CFCharacterSetIntersect;

extern "CoreFoundation" fn CFCharacterSetInvert(theSet: MutableCharacterSetRef) callconv(.C) void;
pub const characterSetInvert = CFCharacterSetInvert;

pub const ErrorDomain = StringRef;

pub const __CFError = extern struct {};

pub const ErrorRef = ?*__CFError;

extern "CoreFoundation" fn CFErrorGetTypeID() callconv(.C) TypeID;
pub const errorGetTypeID = CFErrorGetTypeID;

extern "CoreFoundation" fn CFErrorCreate(allocator: AllocatorRef, domain: ErrorDomain, code: Index, userInfo: DictionaryRef, ) callconv(.C) ErrorRef;
pub const errorCreate = CFErrorCreate;

extern "CoreFoundation" fn CFErrorCreateWithUserInfoKeysAndValues(allocator: AllocatorRef, domain: ErrorDomain, code: Index, userInfoKeys: ?*?*const anyopaque, userInfoValues: ?*?*const anyopaque, numUserInfoValues: Index, ) callconv(.C) ErrorRef;
pub const errorCreateWithUserInfoKeysAndValues = CFErrorCreateWithUserInfoKeysAndValues;

extern "CoreFoundation" fn CFErrorGetDomain(err: ErrorRef) callconv(.C) ErrorDomain;
pub const errorGetDomain = CFErrorGetDomain;

extern "CoreFoundation" fn CFErrorGetCode(err: ErrorRef) callconv(.C) Index;
pub const errorGetCode = CFErrorGetCode;

extern "CoreFoundation" fn CFErrorCopyUserInfo(err: ErrorRef) callconv(.C) DictionaryRef;
pub const errorCopyUserInfo = CFErrorCopyUserInfo;

extern "CoreFoundation" fn CFErrorCopyDescription(err: ErrorRef) callconv(.C) StringRef;
pub const errorCopyDescription = CFErrorCopyDescription;

extern "CoreFoundation" fn CFErrorCopyFailureReason(err: ErrorRef) callconv(.C) StringRef;
pub const errorCopyFailureReason = CFErrorCopyFailureReason;

extern "CoreFoundation" fn CFErrorCopyRecoverySuggestion(err: ErrorRef) callconv(.C) StringRef;
pub const errorCopyRecoverySuggestion = CFErrorCopyRecoverySuggestion;

pub const StringEncoding = objc.UInt32;

pub const StringBuiltInEncodings = enum(StringEncoding) {
EncodingMacRoman = 0,
EncodingWindowsLatin1 = 1280,
EncodingISOLatin1 = 513,
EncodingNextStepLatin = 2817,
EncodingASCII = 1536,
EncodingUnicode = 256,
EncodingUTF8 = 134217984,
EncodingNonLossyASCII = 3071,
EncodingUTF16 = 256,
EncodingUTF16BE = 268435712,
EncodingUTF16LE = 335544576,
EncodingUTF32 = 201326848,
EncodingUTF32BE = 402653440,
EncodingUTF32LE = 469762304,
};

extern "CoreFoundation" fn CFStringGetTypeID() callconv(.C) TypeID;
pub const stringGetTypeID = CFStringGetTypeID;

extern "CoreFoundation" fn CFStringCreateWithPascalString(alloc: AllocatorRef, pStr: objc.ConstStr255Param, encoding: StringEncoding) callconv(.C) StringRef;
pub const stringCreateWithPascalString = CFStringCreateWithPascalString;

extern "CoreFoundation" fn CFStringCreateWithCString(alloc: AllocatorRef, cStr: ?*i8, encoding: StringEncoding) callconv(.C) StringRef;
pub const stringCreateWithCString = CFStringCreateWithCString;

extern "CoreFoundation" fn CFStringCreateWithBytes(alloc: AllocatorRef, bytes: ?*objc.UInt8, numBytes: Index, encoding: StringEncoding, isExternalRepresentation: objc.Boolean, ) callconv(.C) StringRef;
pub const stringCreateWithBytes = CFStringCreateWithBytes;

extern "CoreFoundation" fn CFStringCreateWithCharacters(alloc: AllocatorRef, chars: ?*objc.UniChar, numChars: Index) callconv(.C) StringRef;
pub const stringCreateWithCharacters = CFStringCreateWithCharacters;

extern "CoreFoundation" fn CFStringCreateWithPascalStringNoCopy(alloc: AllocatorRef, pStr: objc.ConstStr255Param, encoding: StringEncoding, contentsDeallocator: AllocatorRef, ) callconv(.C) StringRef;
pub const stringCreateWithPascalStringNoCopy = CFStringCreateWithPascalStringNoCopy;

extern "CoreFoundation" fn CFStringCreateWithCStringNoCopy(alloc: AllocatorRef, cStr: ?*i8, encoding: StringEncoding, contentsDeallocator: AllocatorRef, ) callconv(.C) StringRef;
pub const stringCreateWithCStringNoCopy = CFStringCreateWithCStringNoCopy;

extern "CoreFoundation" fn CFStringCreateWithBytesNoCopy(alloc: AllocatorRef, bytes: ?*objc.UInt8, numBytes: Index, encoding: StringEncoding, isExternalRepresentation: objc.Boolean, contentsDeallocator: AllocatorRef, ) callconv(.C) StringRef;
pub const stringCreateWithBytesNoCopy = CFStringCreateWithBytesNoCopy;

extern "CoreFoundation" fn CFStringCreateWithCharactersNoCopy(alloc: AllocatorRef, chars: ?*objc.UniChar, numChars: Index, contentsDeallocator: AllocatorRef, ) callconv(.C) StringRef;
pub const stringCreateWithCharactersNoCopy = CFStringCreateWithCharactersNoCopy;

extern "CoreFoundation" fn CFStringCreateWithSubstring(alloc: AllocatorRef, str: StringRef, range: Range) callconv(.C) StringRef;
pub const stringCreateWithSubstring = CFStringCreateWithSubstring;

extern "CoreFoundation" fn CFStringCreateCopy(alloc: AllocatorRef, theString: StringRef) callconv(.C) StringRef;
pub const stringCreateCopy = CFStringCreateCopy;

extern "CoreFoundation" fn CFStringCreateWithFormat(alloc: AllocatorRef, formatOptions: DictionaryRef, format: StringRef) callconv(.C) StringRef;
pub const stringCreateWithFormat = CFStringCreateWithFormat;

extern "CoreFoundation" fn CFStringCreateWithFormatAndArguments(alloc: AllocatorRef, formatOptions: DictionaryRef, format: StringRef, arguments: objc.va_list, ) callconv(.C) StringRef;
pub const stringCreateWithFormatAndArguments = CFStringCreateWithFormatAndArguments;

extern "CoreFoundation" fn CFStringCreateStringWithValidatedFormat(alloc: AllocatorRef, formatOptions: DictionaryRef, validFormatSpecifiers: StringRef, format: StringRef, errorPtr: ?*ErrorRef, ) callconv(.C) StringRef;
pub const stringCreateStringWithValidatedFormat = CFStringCreateStringWithValidatedFormat;

extern "CoreFoundation" fn CFStringCreateStringWithValidatedFormatAndArguments(alloc: AllocatorRef, formatOptions: DictionaryRef, validFormatSpecifiers: StringRef, format: StringRef, arguments: objc.va_list, errorPtr: ?*ErrorRef, ) callconv(.C) StringRef;
pub const stringCreateStringWithValidatedFormatAndArguments = CFStringCreateStringWithValidatedFormatAndArguments;

extern "CoreFoundation" fn CFStringCreateMutable(alloc: AllocatorRef, maxLength: Index) callconv(.C) MutableStringRef;
pub const stringCreateMutable = CFStringCreateMutable;

extern "CoreFoundation" fn CFStringCreateMutableCopy(alloc: AllocatorRef, maxLength: Index, theString: StringRef) callconv(.C) MutableStringRef;
pub const stringCreateMutableCopy = CFStringCreateMutableCopy;

extern "CoreFoundation" fn CFStringCreateMutableWithExternalCharactersNoCopy(alloc: AllocatorRef, chars: ?*objc.UniChar, numChars: Index, capacity: Index, externalCharactersAllocator: AllocatorRef, ) callconv(.C) MutableStringRef;
pub const stringCreateMutableWithExternalCharactersNoCopy = CFStringCreateMutableWithExternalCharactersNoCopy;

extern "CoreFoundation" fn CFStringGetLength(theString: StringRef) callconv(.C) Index;
pub const stringGetLength = CFStringGetLength;

extern "CoreFoundation" fn CFStringGetCharacterAtIndex(theString: StringRef, idx: Index) callconv(.C) objc.UniChar;
pub const stringGetCharacterAtIndex = CFStringGetCharacterAtIndex;

extern "CoreFoundation" fn CFStringGetCharacters(theString: StringRef, range: Range, buffer: ?*objc.UniChar) callconv(.C) void;
pub const stringGetCharacters = CFStringGetCharacters;

extern "CoreFoundation" fn CFStringGetPascalString(theString: StringRef, buffer: objc.StringPtr, bufferSize: Index, encoding: StringEncoding, ) callconv(.C) objc.Boolean;
pub const stringGetPascalString = CFStringGetPascalString;

extern "CoreFoundation" fn CFStringGetCString(theString: StringRef, buffer: ?*i8, bufferSize: Index, encoding: StringEncoding, ) callconv(.C) objc.Boolean;
pub const stringGetCString = CFStringGetCString;

extern "CoreFoundation" fn CFStringGetPascalStringPtr(theString: StringRef, encoding: StringEncoding) callconv(.C) objc.ConstStringPtr;
pub const stringGetPascalStringPtr = CFStringGetPascalStringPtr;

extern "CoreFoundation" fn CFStringGetCStringPtr(theString: StringRef, encoding: StringEncoding) callconv(.C) ?*i8;
pub const stringGetCStringPtr = CFStringGetCStringPtr;

extern "CoreFoundation" fn CFStringGetCharactersPtr(theString: StringRef) callconv(.C) ?*objc.UniChar;
pub const stringGetCharactersPtr = CFStringGetCharactersPtr;

extern "CoreFoundation" fn CFStringGetBytes(theString: StringRef, range: Range, encoding: StringEncoding, lossByte: objc.UInt8, isExternalRepresentation: objc.Boolean, buffer: ?*objc.UInt8, maxBufLen: Index, usedBufLen: ?*Index, ) callconv(.C) Index;
pub const stringGetBytes = CFStringGetBytes;

extern "CoreFoundation" fn CFStringCreateFromExternalRepresentation(alloc: AllocatorRef, data: DataRef, encoding: StringEncoding) callconv(.C) StringRef;
pub const stringCreateFromExternalRepresentation = CFStringCreateFromExternalRepresentation;

extern "CoreFoundation" fn CFStringCreateExternalRepresentation(alloc: AllocatorRef, theString: StringRef, encoding: StringEncoding, lossByte: objc.UInt8, ) callconv(.C) DataRef;
pub const stringCreateExternalRepresentation = CFStringCreateExternalRepresentation;

extern "CoreFoundation" fn CFStringGetSmallestEncoding(theString: StringRef) callconv(.C) StringEncoding;
pub const stringGetSmallestEncoding = CFStringGetSmallestEncoding;

extern "CoreFoundation" fn CFStringGetFastestEncoding(theString: StringRef) callconv(.C) StringEncoding;
pub const stringGetFastestEncoding = CFStringGetFastestEncoding;

extern "CoreFoundation" fn CFStringGetSystemEncoding() callconv(.C) StringEncoding;
pub const stringGetSystemEncoding = CFStringGetSystemEncoding;

extern "CoreFoundation" fn CFStringGetMaximumSizeForEncoding(length: Index, encoding: StringEncoding) callconv(.C) Index;
pub const stringGetMaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding;

extern "CoreFoundation" fn CFStringGetFileSystemRepresentation(string: StringRef, buffer: ?*i8, maxBufLen: Index) callconv(.C) objc.Boolean;
pub const stringGetFileSystemRepresentation = CFStringGetFileSystemRepresentation;

extern "CoreFoundation" fn CFStringGetMaximumSizeOfFileSystemRepresentation(string: StringRef) callconv(.C) Index;
pub const stringGetMaximumSizeOfFileSystemRepresentation = CFStringGetMaximumSizeOfFileSystemRepresentation;

extern "CoreFoundation" fn CFStringCreateWithFileSystemRepresentation(alloc: AllocatorRef, buffer: ?*i8) callconv(.C) StringRef;
pub const stringCreateWithFileSystemRepresentation = CFStringCreateWithFileSystemRepresentation;

pub const StringCompareFlags = enum(OptionFlags) {
CompareCaseInsensitive = 1,
CompareBackwards = 4,
CompareAnchored = 8,
CompareNonliteral = 16,
CompareLocalized = 32,
CompareNumerically = 64,
CompareDiacriticInsensitive = 128,
CompareWidthInsensitive = 256,
CompareForcedOrdering = 512,
};

extern "CoreFoundation" fn CFStringCompareWithOptionsAndLocale(theString1: StringRef, theString2: StringRef, rangeToCompare: Range, compareOptions: StringCompareFlags, locale: LocaleRef, ) callconv(.C) ComparisonResult;
pub const stringCompareWithOptionsAndLocale = CFStringCompareWithOptionsAndLocale;

extern "CoreFoundation" fn CFStringCompareWithOptions(theString1: StringRef, theString2: StringRef, rangeToCompare: Range, compareOptions: StringCompareFlags, ) callconv(.C) ComparisonResult;
pub const stringCompareWithOptions = CFStringCompareWithOptions;

extern "CoreFoundation" fn CFStringCompare(theString1: StringRef, theString2: StringRef, compareOptions: StringCompareFlags) callconv(.C) ComparisonResult;
pub const stringCompare = CFStringCompare;

extern "CoreFoundation" fn CFStringFindWithOptionsAndLocale(theString: StringRef, stringToFind: StringRef, rangeToSearch: Range, searchOptions: StringCompareFlags, locale: LocaleRef, result: ?*Range, ) callconv(.C) objc.Boolean;
pub const stringFindWithOptionsAndLocale = CFStringFindWithOptionsAndLocale;

extern "CoreFoundation" fn CFStringFindWithOptions(theString: StringRef, stringToFind: StringRef, rangeToSearch: Range, searchOptions: StringCompareFlags, result: ?*Range, ) callconv(.C) objc.Boolean;
pub const stringFindWithOptions = CFStringFindWithOptions;

extern "CoreFoundation" fn CFStringCreateArrayWithFindResults(alloc: AllocatorRef, theString: StringRef, stringToFind: StringRef, rangeToSearch: Range, compareOptions: StringCompareFlags, ) callconv(.C) ArrayRef;
pub const stringCreateArrayWithFindResults = CFStringCreateArrayWithFindResults;

extern "CoreFoundation" fn CFStringFind(theString: StringRef, stringToFind: StringRef, compareOptions: StringCompareFlags) callconv(.C) Range;
pub const stringFind = CFStringFind;

extern "CoreFoundation" fn CFStringHasPrefix(theString: StringRef, prefix: StringRef) callconv(.C) objc.Boolean;
pub const stringHasPrefix = CFStringHasPrefix;

extern "CoreFoundation" fn CFStringHasSuffix(theString: StringRef, suffix: StringRef) callconv(.C) objc.Boolean;
pub const stringHasSuffix = CFStringHasSuffix;

extern "CoreFoundation" fn CFStringGetRangeOfComposedCharactersAtIndex(theString: StringRef, theIndex: Index) callconv(.C) Range;
pub const stringGetRangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex;

extern "CoreFoundation" fn CFStringFindCharacterFromSet(theString: StringRef, theSet: CharacterSetRef, rangeToSearch: Range, searchOptions: StringCompareFlags, result: ?*Range, ) callconv(.C) objc.Boolean;
pub const stringFindCharacterFromSet = CFStringFindCharacterFromSet;

extern "CoreFoundation" fn CFStringGetLineBounds(theString: StringRef, range: Range, lineBeginIndex: ?*Index, lineEndIndex: ?*Index, contentsEndIndex: ?*Index, ) callconv(.C) void;
pub const stringGetLineBounds = CFStringGetLineBounds;

extern "CoreFoundation" fn CFStringGetParagraphBounds(string: StringRef, range: Range, parBeginIndex: ?*Index, parEndIndex: ?*Index, contentsEndIndex: ?*Index, ) callconv(.C) void;
pub const stringGetParagraphBounds = CFStringGetParagraphBounds;

extern "CoreFoundation" fn CFStringGetHyphenationLocationBeforeIndex(string: StringRef, location: Index, limitRange: Range, options: OptionFlags, locale: LocaleRef, character: ?*objc.UTF32Char, ) callconv(.C) Index;
pub const stringGetHyphenationLocationBeforeIndex = CFStringGetHyphenationLocationBeforeIndex;

extern "CoreFoundation" fn CFStringIsHyphenationAvailableForLocale(locale: LocaleRef) callconv(.C) objc.Boolean;
pub const stringIsHyphenationAvailableForLocale = CFStringIsHyphenationAvailableForLocale;

extern "CoreFoundation" fn CFStringCreateByCombiningStrings(alloc: AllocatorRef, theArray: ArrayRef, separatorString: StringRef) callconv(.C) StringRef;
pub const stringCreateByCombiningStrings = CFStringCreateByCombiningStrings;

extern "CoreFoundation" fn CFStringCreateArrayBySeparatingStrings(alloc: AllocatorRef, theString: StringRef, separatorString: StringRef) callconv(.C) ArrayRef;
pub const stringCreateArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings;

extern "CoreFoundation" fn CFStringGetIntValue(str: StringRef) callconv(.C) objc.SInt32;
pub const stringGetIntValue = CFStringGetIntValue;

extern "CoreFoundation" fn CFStringGetDoubleValue(str: StringRef) callconv(.C) f64;
pub const stringGetDoubleValue = CFStringGetDoubleValue;

extern "CoreFoundation" fn CFStringAppend(theString: MutableStringRef, appendedString: StringRef) callconv(.C) void;
pub const stringAppend = CFStringAppend;

extern "CoreFoundation" fn CFStringAppendCharacters(theString: MutableStringRef, chars: ?*objc.UniChar, numChars: Index) callconv(.C) void;
pub const stringAppendCharacters = CFStringAppendCharacters;

extern "CoreFoundation" fn CFStringAppendPascalString(theString: MutableStringRef, pStr: objc.ConstStr255Param, encoding: StringEncoding) callconv(.C) void;
pub const stringAppendPascalString = CFStringAppendPascalString;

extern "CoreFoundation" fn CFStringAppendCString(theString: MutableStringRef, cStr: ?*i8, encoding: StringEncoding) callconv(.C) void;
pub const stringAppendCString = CFStringAppendCString;

extern "CoreFoundation" fn CFStringAppendFormat(theString: MutableStringRef, formatOptions: DictionaryRef, format: StringRef) callconv(.C) void;
pub const stringAppendFormat = CFStringAppendFormat;

extern "CoreFoundation" fn CFStringAppendFormatAndArguments(theString: MutableStringRef, formatOptions: DictionaryRef, format: StringRef, arguments: objc.va_list, ) callconv(.C) void;
pub const stringAppendFormatAndArguments = CFStringAppendFormatAndArguments;

extern "CoreFoundation" fn CFStringInsert(str: MutableStringRef, idx: Index, insertedStr: StringRef) callconv(.C) void;
pub const stringInsert = CFStringInsert;

extern "CoreFoundation" fn CFStringDelete(theString: MutableStringRef, range: Range) callconv(.C) void;
pub const stringDelete = CFStringDelete;

extern "CoreFoundation" fn CFStringReplace(theString: MutableStringRef, range: Range, replacement: StringRef) callconv(.C) void;
pub const stringReplace = CFStringReplace;

extern "CoreFoundation" fn CFStringReplaceAll(theString: MutableStringRef, replacement: StringRef) callconv(.C) void;
pub const stringReplaceAll = CFStringReplaceAll;

extern "CoreFoundation" fn CFStringFindAndReplace(theString: MutableStringRef, stringToFind: StringRef, replacementString: StringRef, rangeToSearch: Range, compareOptions: StringCompareFlags, ) callconv(.C) Index;
pub const stringFindAndReplace = CFStringFindAndReplace;

extern "CoreFoundation" fn CFStringSetExternalCharactersNoCopy(theString: MutableStringRef, chars: ?*objc.UniChar, length: Index, capacity: Index, ) callconv(.C) void;
pub const stringSetExternalCharactersNoCopy = CFStringSetExternalCharactersNoCopy;

extern "CoreFoundation" fn CFStringPad(theString: MutableStringRef, padString: StringRef, length: Index, indexIntoPad: Index, ) callconv(.C) void;
pub const stringPad = CFStringPad;

extern "CoreFoundation" fn CFStringTrim(theString: MutableStringRef, trimString: StringRef) callconv(.C) void;
pub const stringTrim = CFStringTrim;

extern "CoreFoundation" fn CFStringTrimWhitespace(theString: MutableStringRef) callconv(.C) void;
pub const stringTrimWhitespace = CFStringTrimWhitespace;

extern "CoreFoundation" fn CFStringLowercase(theString: MutableStringRef, locale: LocaleRef) callconv(.C) void;
pub const stringLowercase = CFStringLowercase;

extern "CoreFoundation" fn CFStringUppercase(theString: MutableStringRef, locale: LocaleRef) callconv(.C) void;
pub const stringUppercase = CFStringUppercase;

extern "CoreFoundation" fn CFStringCapitalize(theString: MutableStringRef, locale: LocaleRef) callconv(.C) void;
pub const stringCapitalize = CFStringCapitalize;

pub const StringNormalizationForm = enum(Index) {
D = 0,
KD = 1,
C = 2,
KC = 3,
};

extern "CoreFoundation" fn CFStringNormalize(theString: MutableStringRef, theForm: StringNormalizationForm) callconv(.C) void;
pub const stringNormalize = CFStringNormalize;

extern "CoreFoundation" fn CFStringFold(theString: MutableStringRef, theFlags: StringCompareFlags, theLocale: LocaleRef) callconv(.C) void;
pub const stringFold = CFStringFold;

extern "CoreFoundation" fn CFStringTransform(string: MutableStringRef, range: ?*Range, transform: StringRef, reverse: objc.Boolean, ) callconv(.C) objc.Boolean;
pub const stringTransform = CFStringTransform;

extern "CoreFoundation" fn CFStringIsEncodingAvailable(encoding: StringEncoding) callconv(.C) objc.Boolean;
pub const stringIsEncodingAvailable = CFStringIsEncodingAvailable;

extern "CoreFoundation" fn CFStringGetListOfAvailableEncodings() callconv(.C) ?*StringEncoding;
pub const stringGetListOfAvailableEncodings = CFStringGetListOfAvailableEncodings;

extern "CoreFoundation" fn CFStringGetNameOfEncoding(encoding: StringEncoding) callconv(.C) StringRef;
pub const stringGetNameOfEncoding = CFStringGetNameOfEncoding;

extern "CoreFoundation" fn CFStringConvertEncodingToNSStringEncoding(encoding: StringEncoding) callconv(.C) u64;
pub const stringConvertEncodingToNSStringEncoding = CFStringConvertEncodingToNSStringEncoding;

extern "CoreFoundation" fn CFStringConvertNSStringEncodingToEncoding(encoding: u64) callconv(.C) StringEncoding;
pub const stringConvertNSStringEncodingToEncoding = CFStringConvertNSStringEncodingToEncoding;

extern "CoreFoundation" fn CFStringConvertEncodingToWindowsCodepage(encoding: StringEncoding) callconv(.C) objc.UInt32;
pub const stringConvertEncodingToWindowsCodepage = CFStringConvertEncodingToWindowsCodepage;

extern "CoreFoundation" fn CFStringConvertWindowsCodepageToEncoding(codepage: objc.UInt32) callconv(.C) StringEncoding;
pub const stringConvertWindowsCodepageToEncoding = CFStringConvertWindowsCodepageToEncoding;

extern "CoreFoundation" fn CFStringConvertIANACharSetNameToEncoding(theString: StringRef) callconv(.C) StringEncoding;
pub const stringConvertIANACharSetNameToEncoding = CFStringConvertIANACharSetNameToEncoding;

extern "CoreFoundation" fn CFStringConvertEncodingToIANACharSetName(encoding: StringEncoding) callconv(.C) StringRef;
pub const stringConvertEncodingToIANACharSetName = CFStringConvertEncodingToIANACharSetName;

extern "CoreFoundation" fn CFStringGetMostCompatibleMacStringEncoding(encoding: StringEncoding) callconv(.C) StringEncoding;
pub const stringGetMostCompatibleMacStringEncoding = CFStringGetMostCompatibleMacStringEncoding;

pub const StringInlineBuffer = extern struct {
    buffer: [64] objc.UniChar,
    theString: StringRef,
    directUniCharBuffer: ?*objc.UniChar,
    directCStringBuffer: ?*i8,
    rangeToBuffer: Range,
    bufferedRangeStart: Index,
    bufferedRangeEnd: Index,
};

extern "CoreFoundation" fn CFStringInitInlineBuffer(str: StringRef, buf: ?*StringInlineBuffer, range: Range) callconv(.C) void;
pub const stringInitInlineBuffer = CFStringInitInlineBuffer;

extern "CoreFoundation" fn CFStringGetCharacterFromInlineBuffer(buf: ?*StringInlineBuffer, idx: Index) callconv(.C) objc.UniChar;
pub const stringGetCharacterFromInlineBuffer = CFStringGetCharacterFromInlineBuffer;

extern "CoreFoundation" fn CFStringIsSurrogateHighCharacter(character: objc.UniChar) callconv(.C) objc.Boolean;
pub const stringIsSurrogateHighCharacter = CFStringIsSurrogateHighCharacter;

extern "CoreFoundation" fn CFStringIsSurrogateLowCharacter(character: objc.UniChar) callconv(.C) objc.Boolean;
pub const stringIsSurrogateLowCharacter = CFStringIsSurrogateLowCharacter;

extern "CoreFoundation" fn CFStringGetLongCharacterForSurrogatePair(surrogateHigh: objc.UniChar, surrogateLow: objc.UniChar) callconv(.C) objc.UTF32Char;
pub const stringGetLongCharacterForSurrogatePair = CFStringGetLongCharacterForSurrogatePair;

extern "CoreFoundation" fn CFStringGetSurrogatePairForLongCharacter(character: objc.UTF32Char, surrogates: ?*objc.UniChar) callconv(.C) objc.Boolean;
pub const stringGetSurrogatePairForLongCharacter = CFStringGetSurrogatePairForLongCharacter;

extern "CoreFoundation" fn CFShow(obj: TypeRef) callconv(.C) void;
pub const show = CFShow;

extern "CoreFoundation" fn CFShowStr(str: StringRef) callconv(.C) void;
pub const showStr = CFShowStr;

extern "CoreFoundation" fn __CFStringMakeConstantString(cStr: ?*i8) callconv(.C) StringRef;
pub const cfStringMakeConstantString = __CFStringMakeConstantString;

extern "CoreFoundation" fn CFTimeZoneGetTypeID() callconv(.C) TypeID;
pub const timeZoneGetTypeID = CFTimeZoneGetTypeID;

extern "CoreFoundation" fn CFTimeZoneCopySystem() callconv(.C) TimeZoneRef;
pub const timeZoneCopySystem = CFTimeZoneCopySystem;

extern "CoreFoundation" fn CFTimeZoneResetSystem() callconv(.C) void;
pub const timeZoneResetSystem = CFTimeZoneResetSystem;

extern "CoreFoundation" fn CFTimeZoneCopyDefault() callconv(.C) TimeZoneRef;
pub const timeZoneCopyDefault = CFTimeZoneCopyDefault;

extern "CoreFoundation" fn CFTimeZoneSetDefault(tz: TimeZoneRef) callconv(.C) void;
pub const timeZoneSetDefault = CFTimeZoneSetDefault;

extern "CoreFoundation" fn CFTimeZoneCopyKnownNames() callconv(.C) ArrayRef;
pub const timeZoneCopyKnownNames = CFTimeZoneCopyKnownNames;

extern "CoreFoundation" fn CFTimeZoneCopyAbbreviationDictionary() callconv(.C) DictionaryRef;
pub const timeZoneCopyAbbreviationDictionary = CFTimeZoneCopyAbbreviationDictionary;

extern "CoreFoundation" fn CFTimeZoneSetAbbreviationDictionary(dict: DictionaryRef) callconv(.C) void;
pub const timeZoneSetAbbreviationDictionary = CFTimeZoneSetAbbreviationDictionary;

extern "CoreFoundation" fn CFTimeZoneCreate(allocator: AllocatorRef, name: StringRef, data: DataRef) callconv(.C) TimeZoneRef;
pub const timeZoneCreate = CFTimeZoneCreate;

extern "CoreFoundation" fn CFTimeZoneCreateWithTimeIntervalFromGMT(allocator: AllocatorRef, ti: TimeInterval) callconv(.C) TimeZoneRef;
pub const timeZoneCreateWithTimeIntervalFromGMT = CFTimeZoneCreateWithTimeIntervalFromGMT;

extern "CoreFoundation" fn CFTimeZoneCreateWithName(allocator: AllocatorRef, name: StringRef, tryAbbrev: objc.Boolean) callconv(.C) TimeZoneRef;
pub const timeZoneCreateWithName = CFTimeZoneCreateWithName;

extern "CoreFoundation" fn CFTimeZoneGetName(tz: TimeZoneRef) callconv(.C) StringRef;
pub const timeZoneGetName = CFTimeZoneGetName;

extern "CoreFoundation" fn CFTimeZoneGetData(tz: TimeZoneRef) callconv(.C) DataRef;
pub const timeZoneGetData = CFTimeZoneGetData;

extern "CoreFoundation" fn CFTimeZoneGetSecondsFromGMT(tz: TimeZoneRef, at: AbsoluteTime) callconv(.C) TimeInterval;
pub const timeZoneGetSecondsFromGMT = CFTimeZoneGetSecondsFromGMT;

extern "CoreFoundation" fn CFTimeZoneCopyAbbreviation(tz: TimeZoneRef, at: AbsoluteTime) callconv(.C) StringRef;
pub const timeZoneCopyAbbreviation = CFTimeZoneCopyAbbreviation;

extern "CoreFoundation" fn CFTimeZoneIsDaylightSavingTime(tz: TimeZoneRef, at: AbsoluteTime) callconv(.C) objc.Boolean;
pub const timeZoneIsDaylightSavingTime = CFTimeZoneIsDaylightSavingTime;

extern "CoreFoundation" fn CFTimeZoneGetDaylightSavingTimeOffset(tz: TimeZoneRef, at: AbsoluteTime) callconv(.C) TimeInterval;
pub const timeZoneGetDaylightSavingTimeOffset = CFTimeZoneGetDaylightSavingTimeOffset;

extern "CoreFoundation" fn CFTimeZoneGetNextDaylightSavingTimeTransition(tz: TimeZoneRef, at: AbsoluteTime) callconv(.C) AbsoluteTime;
pub const timeZoneGetNextDaylightSavingTimeTransition = CFTimeZoneGetNextDaylightSavingTimeTransition;

pub const TimeZoneNameStyle = enum(Index) {
Standard = 0,
ShortStandard = 1,
DaylightSaving = 2,
ShortDaylightSaving = 3,
Generic = 4,
ShortGeneric = 5,
};

extern "CoreFoundation" fn CFTimeZoneCopyLocalizedName(tz: TimeZoneRef, style: TimeZoneNameStyle, locale: LocaleRef) callconv(.C) StringRef;
pub const timeZoneCopyLocalizedName = CFTimeZoneCopyLocalizedName;

pub const __CFCalendar = extern struct {};

pub const CalendarRef = ?*__CFCalendar;

extern "CoreFoundation" fn CFCalendarGetTypeID() callconv(.C) TypeID;
pub const calendarGetTypeID = CFCalendarGetTypeID;

extern "CoreFoundation" fn CFCalendarCopyCurrent() callconv(.C) CalendarRef;
pub const calendarCopyCurrent = CFCalendarCopyCurrent;

extern "CoreFoundation" fn CFCalendarCreateWithIdentifier(allocator: AllocatorRef, identifier: CalendarIdentifier) callconv(.C) CalendarRef;
pub const calendarCreateWithIdentifier = CFCalendarCreateWithIdentifier;

extern "CoreFoundation" fn CFCalendarGetIdentifier(calendar: CalendarRef) callconv(.C) CalendarIdentifier;
pub const calendarGetIdentifier = CFCalendarGetIdentifier;

extern "CoreFoundation" fn CFCalendarCopyLocale(calendar: CalendarRef) callconv(.C) LocaleRef;
pub const calendarCopyLocale = CFCalendarCopyLocale;

extern "CoreFoundation" fn CFCalendarSetLocale(calendar: CalendarRef, locale: LocaleRef) callconv(.C) void;
pub const calendarSetLocale = CFCalendarSetLocale;

extern "CoreFoundation" fn CFCalendarCopyTimeZone(calendar: CalendarRef) callconv(.C) TimeZoneRef;
pub const calendarCopyTimeZone = CFCalendarCopyTimeZone;

extern "CoreFoundation" fn CFCalendarSetTimeZone(calendar: CalendarRef, tz: TimeZoneRef) callconv(.C) void;
pub const calendarSetTimeZone = CFCalendarSetTimeZone;

extern "CoreFoundation" fn CFCalendarGetFirstWeekday(calendar: CalendarRef) callconv(.C) Index;
pub const calendarGetFirstWeekday = CFCalendarGetFirstWeekday;

extern "CoreFoundation" fn CFCalendarSetFirstWeekday(calendar: CalendarRef, wkdy: Index) callconv(.C) void;
pub const calendarSetFirstWeekday = CFCalendarSetFirstWeekday;

extern "CoreFoundation" fn CFCalendarGetMinimumDaysInFirstWeek(calendar: CalendarRef) callconv(.C) Index;
pub const calendarGetMinimumDaysInFirstWeek = CFCalendarGetMinimumDaysInFirstWeek;

extern "CoreFoundation" fn CFCalendarSetMinimumDaysInFirstWeek(calendar: CalendarRef, mwd: Index) callconv(.C) void;
pub const calendarSetMinimumDaysInFirstWeek = CFCalendarSetMinimumDaysInFirstWeek;

pub const CalendarUnit = enum(OptionFlags) {
Era = 2,
Year = 4,
Month = 8,
Day = 16,
Hour = 32,
Minute = 64,
Second = 128,
Week = 256,
Weekday = 512,
WeekdayOrdinal = 1024,
Quarter = 2048,
WeekOfMonth = 4096,
WeekOfYear = 8192,
YearForWeekOfYear = 16384,
DayOfYear = 65536,
};

extern "CoreFoundation" fn CFCalendarGetMinimumRangeOfUnit(calendar: CalendarRef, unit: CalendarUnit) callconv(.C) Range;
pub const calendarGetMinimumRangeOfUnit = CFCalendarGetMinimumRangeOfUnit;

extern "CoreFoundation" fn CFCalendarGetMaximumRangeOfUnit(calendar: CalendarRef, unit: CalendarUnit) callconv(.C) Range;
pub const calendarGetMaximumRangeOfUnit = CFCalendarGetMaximumRangeOfUnit;

extern "CoreFoundation" fn CFCalendarGetRangeOfUnit(calendar: CalendarRef, smallerUnit: CalendarUnit, biggerUnit: CalendarUnit, at: AbsoluteTime, ) callconv(.C) Range;
pub const calendarGetRangeOfUnit = CFCalendarGetRangeOfUnit;

extern "CoreFoundation" fn CFCalendarGetOrdinalityOfUnit(calendar: CalendarRef, smallerUnit: CalendarUnit, biggerUnit: CalendarUnit, at: AbsoluteTime, ) callconv(.C) Index;
pub const calendarGetOrdinalityOfUnit = CFCalendarGetOrdinalityOfUnit;

extern "CoreFoundation" fn CFCalendarGetTimeRangeOfUnit(calendar: CalendarRef, unit: CalendarUnit, at: AbsoluteTime, startp: ?*AbsoluteTime, tip: ?*TimeInterval, ) callconv(.C) objc.Boolean;
pub const calendarGetTimeRangeOfUnit = CFCalendarGetTimeRangeOfUnit;

extern "CoreFoundation" fn CFCalendarComposeAbsoluteTime(calendar: CalendarRef, at: ?*AbsoluteTime, componentDesc: ?*i8) callconv(.C) objc.Boolean;
pub const calendarComposeAbsoluteTime = CFCalendarComposeAbsoluteTime;

extern "CoreFoundation" fn CFCalendarDecomposeAbsoluteTime(calendar: CalendarRef, at: AbsoluteTime, componentDesc: ?*i8) callconv(.C) objc.Boolean;
pub const calendarDecomposeAbsoluteTime = CFCalendarDecomposeAbsoluteTime;

pub const anon1061 = enum(OptionFlags) {
CFCalendarComponentsWrap = 1,
};

extern "CoreFoundation" fn CFCalendarAddComponents(calendar: CalendarRef, at: ?*AbsoluteTime, options: OptionFlags, componentDesc: ?*i8, ) callconv(.C) objc.Boolean;
pub const calendarAddComponents = CFCalendarAddComponents;

extern "CoreFoundation" fn CFCalendarGetComponentDifference(calendar: CalendarRef, startingAT: AbsoluteTime, resultAT: AbsoluteTime, options: OptionFlags, componentDesc: ?*i8, ) callconv(.C) objc.Boolean;
pub const calendarGetComponentDifference = CFCalendarGetComponentDifference;

pub const CGFloat = f64;

pub const CGPoint = extern struct {};

pub const CGSize = extern struct {};

pub const CGVector = extern struct {};

pub const CGRect = extern struct {};

pub const CGRectEdge = enum(objc.uint32_t) {
MinXEdge = 0,
MinYEdge = 1,
MaxXEdge = 2,
MaxYEdge = 3,
};

pub const CGAffineTransform = extern struct {
    a: CGFloat,
    b: CGFloat,
    c: CGFloat,
    d: CGFloat,
    tx: CGFloat,
    ty: CGFloat,
};

pub const CGAffineTransformComponents = extern struct {
    scale: CGSize,
    horizontalShear: CGFloat,
    rotation: CGFloat,
    translation: CGVector,
};

pub const DateFormatterKey = StringRef;

pub const __CFDateFormatter = extern struct {};

pub const DateFormatterRef = ?*__CFDateFormatter;

extern "CoreFoundation" fn CFDateFormatterCreateDateFormatFromTemplate(allocator: AllocatorRef, tmplate: StringRef, options: OptionFlags, locale: LocaleRef, ) callconv(.C) StringRef;
pub const dateFormatterCreateDateFormatFromTemplate = CFDateFormatterCreateDateFormatFromTemplate;

extern "CoreFoundation" fn CFDateFormatterGetTypeID() callconv(.C) TypeID;
pub const dateFormatterGetTypeID = CFDateFormatterGetTypeID;

pub const DateFormatterStyle = enum(Index) {
NoStyle = 0,
ShortStyle = 1,
MediumStyle = 2,
LongStyle = 3,
FullStyle = 4,
};

pub const ISO8601DateFormatOptions = enum(OptionFlags) {
WithYear = 1,
WithMonth = 2,
WithWeekOfYear = 4,
WithDay = 16,
WithTime = 32,
WithTimeZone = 64,
WithSpaceBetweenDateAndTime = 128,
WithDashSeparatorInDate = 256,
WithColonSeparatorInTime = 512,
WithColonSeparatorInTimeZone = 1024,
WithFractionalSeconds = 2048,
WithFullDate = 275,
WithFullTime = 1632,
WithInternetDateTime = 1907,
};

extern "CoreFoundation" fn CFDateFormatterCreateISO8601Formatter(allocator: AllocatorRef, formatOptions: ISO8601DateFormatOptions) callconv(.C) DateFormatterRef;
pub const dateFormatterCreateISO8601Formatter = CFDateFormatterCreateISO8601Formatter;

extern "CoreFoundation" fn CFDateFormatterCreate(allocator: AllocatorRef, locale: LocaleRef, dateStyle: DateFormatterStyle, timeStyle: DateFormatterStyle, ) callconv(.C) DateFormatterRef;
pub const dateFormatterCreate = CFDateFormatterCreate;

extern "CoreFoundation" fn CFDateFormatterGetLocale(formatter: DateFormatterRef) callconv(.C) LocaleRef;
pub const dateFormatterGetLocale = CFDateFormatterGetLocale;

extern "CoreFoundation" fn CFDateFormatterGetDateStyle(formatter: DateFormatterRef) callconv(.C) DateFormatterStyle;
pub const dateFormatterGetDateStyle = CFDateFormatterGetDateStyle;

extern "CoreFoundation" fn CFDateFormatterGetTimeStyle(formatter: DateFormatterRef) callconv(.C) DateFormatterStyle;
pub const dateFormatterGetTimeStyle = CFDateFormatterGetTimeStyle;

extern "CoreFoundation" fn CFDateFormatterGetFormat(formatter: DateFormatterRef) callconv(.C) StringRef;
pub const dateFormatterGetFormat = CFDateFormatterGetFormat;

extern "CoreFoundation" fn CFDateFormatterSetFormat(formatter: DateFormatterRef, formatString: StringRef) callconv(.C) void;
pub const dateFormatterSetFormat = CFDateFormatterSetFormat;

extern "CoreFoundation" fn CFDateFormatterCreateStringWithDate(allocator: AllocatorRef, formatter: DateFormatterRef, date: DateRef) callconv(.C) StringRef;
pub const dateFormatterCreateStringWithDate = CFDateFormatterCreateStringWithDate;

extern "CoreFoundation" fn CFDateFormatterCreateStringWithAbsoluteTime(allocator: AllocatorRef, formatter: DateFormatterRef, at: AbsoluteTime) callconv(.C) StringRef;
pub const dateFormatterCreateStringWithAbsoluteTime = CFDateFormatterCreateStringWithAbsoluteTime;

extern "CoreFoundation" fn CFDateFormatterCreateDateFromString(allocator: AllocatorRef, formatter: DateFormatterRef, string: StringRef, rangep: ?*Range, ) callconv(.C) DateRef;
pub const dateFormatterCreateDateFromString = CFDateFormatterCreateDateFromString;

extern "CoreFoundation" fn CFDateFormatterGetAbsoluteTimeFromString(formatter: DateFormatterRef, string: StringRef, rangep: ?*Range, atp: ?*AbsoluteTime, ) callconv(.C) objc.Boolean;
pub const dateFormatterGetAbsoluteTimeFromString = CFDateFormatterGetAbsoluteTimeFromString;

extern "CoreFoundation" fn CFDateFormatterSetProperty(formatter: DateFormatterRef, key: StringRef, value: TypeRef) callconv(.C) void;
pub const dateFormatterSetProperty = CFDateFormatterSetProperty;

extern "CoreFoundation" fn CFDateFormatterCopyProperty(formatter: DateFormatterRef, key: DateFormatterKey) callconv(.C) TypeRef;
pub const dateFormatterCopyProperty = CFDateFormatterCopyProperty;

pub const __CFBoolean = extern struct {};

pub const BooleanRef = ?*__CFBoolean;

extern "CoreFoundation" fn CFBooleanGetTypeID() callconv(.C) TypeID;
pub const booleanGetTypeID = CFBooleanGetTypeID;

extern "CoreFoundation" fn CFBooleanGetValue(boolean: BooleanRef) callconv(.C) objc.Boolean;
pub const booleanGetValue = CFBooleanGetValue;

pub const NumberType = enum(Index) {
SInt8Type = 1,
SInt16Type = 2,
SInt32Type = 3,
SInt64Type = 4,
Float32Type = 5,
Float64Type = 6,
CharType = 7,
ShortType = 8,
IntType = 9,
LongType = 10,
LongLongType = 11,
FloatType = 12,
DoubleType = 13,
CFIndexType = 14,
NSIntegerType = 15,
CGFloatType = 16,
MaxType = 16,
};

pub const __CFNumber = extern struct {};

pub const NumberRef = ?*__CFNumber;

extern "CoreFoundation" fn CFNumberGetTypeID() callconv(.C) TypeID;
pub const numberGetTypeID = CFNumberGetTypeID;

extern "CoreFoundation" fn CFNumberCreate(allocator: AllocatorRef, theType: NumberType, valuePtr: ?*anyopaque) callconv(.C) NumberRef;
pub const numberCreate = CFNumberCreate;

extern "CoreFoundation" fn CFNumberGetType(number: NumberRef) callconv(.C) NumberType;
pub const numberGetType = CFNumberGetType;

extern "CoreFoundation" fn CFNumberGetByteSize(number: NumberRef) callconv(.C) Index;
pub const numberGetByteSize = CFNumberGetByteSize;

extern "CoreFoundation" fn CFNumberIsFloatType(number: NumberRef) callconv(.C) objc.Boolean;
pub const numberIsFloatType = CFNumberIsFloatType;

extern "CoreFoundation" fn CFNumberGetValue(number: NumberRef, theType: NumberType, valuePtr: ?*anyopaque) callconv(.C) objc.Boolean;
pub const numberGetValue = CFNumberGetValue;

extern "CoreFoundation" fn CFNumberCompare(number: NumberRef, otherNumber: NumberRef, context: ?*anyopaque) callconv(.C) ComparisonResult;
pub const numberCompare = CFNumberCompare;

pub const NumberFormatterKey = StringRef;

pub const __CFNumberFormatter = extern struct {};

pub const NumberFormatterRef = ?*__CFNumberFormatter;

extern "CoreFoundation" fn CFNumberFormatterGetTypeID() callconv(.C) TypeID;
pub const numberFormatterGetTypeID = CFNumberFormatterGetTypeID;

pub const NumberFormatterStyle = enum(Index) {
NoStyle = 0,
DecimalStyle = 1,
CurrencyStyle = 2,
PercentStyle = 3,
ScientificStyle = 4,
SpellOutStyle = 5,
OrdinalStyle = 6,
CurrencyISOCodeStyle = 8,
CurrencyPluralStyle = 9,
CurrencyAccountingStyle = 10,
};

extern "CoreFoundation" fn CFNumberFormatterCreate(allocator: AllocatorRef, locale: LocaleRef, style: NumberFormatterStyle) callconv(.C) NumberFormatterRef;
pub const numberFormatterCreate = CFNumberFormatterCreate;

extern "CoreFoundation" fn CFNumberFormatterGetLocale(formatter: NumberFormatterRef) callconv(.C) LocaleRef;
pub const numberFormatterGetLocale = CFNumberFormatterGetLocale;

extern "CoreFoundation" fn CFNumberFormatterGetStyle(formatter: NumberFormatterRef) callconv(.C) NumberFormatterStyle;
pub const numberFormatterGetStyle = CFNumberFormatterGetStyle;

extern "CoreFoundation" fn CFNumberFormatterGetFormat(formatter: NumberFormatterRef) callconv(.C) StringRef;
pub const numberFormatterGetFormat = CFNumberFormatterGetFormat;

extern "CoreFoundation" fn CFNumberFormatterSetFormat(formatter: NumberFormatterRef, formatString: StringRef) callconv(.C) void;
pub const numberFormatterSetFormat = CFNumberFormatterSetFormat;

extern "CoreFoundation" fn CFNumberFormatterCreateStringWithNumber(allocator: AllocatorRef, formatter: NumberFormatterRef, number: NumberRef) callconv(.C) StringRef;
pub const numberFormatterCreateStringWithNumber = CFNumberFormatterCreateStringWithNumber;

extern "CoreFoundation" fn CFNumberFormatterCreateStringWithValue(allocator: AllocatorRef, formatter: NumberFormatterRef, numberType: NumberType, valuePtr: ?*anyopaque, ) callconv(.C) StringRef;
pub const numberFormatterCreateStringWithValue = CFNumberFormatterCreateStringWithValue;

pub const NumberFormatterOptionFlags = enum(OptionFlags) {
ParseIntegersOnly = 1,
};

extern "CoreFoundation" fn CFNumberFormatterCreateNumberFromString(allocator: AllocatorRef, formatter: NumberFormatterRef, string: StringRef, rangep: ?*Range, options: OptionFlags, ) callconv(.C) NumberRef;
pub const numberFormatterCreateNumberFromString = CFNumberFormatterCreateNumberFromString;

extern "CoreFoundation" fn CFNumberFormatterGetValueFromString(formatter: NumberFormatterRef, string: StringRef, rangep: ?*Range, numberType: NumberType, valuePtr: ?*anyopaque, ) callconv(.C) objc.Boolean;
pub const numberFormatterGetValueFromString = CFNumberFormatterGetValueFromString;

extern "CoreFoundation" fn CFNumberFormatterSetProperty(formatter: NumberFormatterRef, key: NumberFormatterKey, value: TypeRef) callconv(.C) void;
pub const numberFormatterSetProperty = CFNumberFormatterSetProperty;

extern "CoreFoundation" fn CFNumberFormatterCopyProperty(formatter: NumberFormatterRef, key: NumberFormatterKey) callconv(.C) TypeRef;
pub const numberFormatterCopyProperty = CFNumberFormatterCopyProperty;

pub const NumberFormatterRoundingMode = enum(Index) {
Ceiling = 0,
Floor = 1,
Down = 2,
Up = 3,
HalfEven = 4,
HalfDown = 5,
HalfUp = 6,
};

pub const NumberFormatterPadPosition = enum(Index) {
BeforePrefix = 0,
AfterPrefix = 1,
BeforeSuffix = 2,
AfterSuffix = 3,
};

extern "CoreFoundation" fn CFNumberFormatterGetDecimalInfoForCurrencyCode(currencyCode: StringRef, defaultFractionDigits: ?*objc.int32_t, roundingIncrement: ?*f64) callconv(.C) objc.Boolean;
pub const numberFormatterGetDecimalInfoForCurrencyCode = CFNumberFormatterGetDecimalInfoForCurrencyCode;

extern "CoreFoundation" fn CFPreferencesCopyAppValue(key: StringRef, applicationID: StringRef) callconv(.C) PropertyListRef;
pub const preferencesCopyAppValue = CFPreferencesCopyAppValue;

extern "CoreFoundation" fn CFPreferencesGetAppBooleanValue(key: StringRef, applicationID: StringRef, keyExistsAndHasValidFormat: ?*objc.Boolean) callconv(.C) objc.Boolean;
pub const preferencesGetAppBooleanValue = CFPreferencesGetAppBooleanValue;

extern "CoreFoundation" fn CFPreferencesGetAppIntegerValue(key: StringRef, applicationID: StringRef, keyExistsAndHasValidFormat: ?*objc.Boolean) callconv(.C) Index;
pub const preferencesGetAppIntegerValue = CFPreferencesGetAppIntegerValue;

extern "CoreFoundation" fn CFPreferencesSetAppValue(key: StringRef, value: PropertyListRef, applicationID: StringRef) callconv(.C) void;
pub const preferencesSetAppValue = CFPreferencesSetAppValue;

extern "CoreFoundation" fn CFPreferencesAddSuitePreferencesToApp(applicationID: StringRef, suiteID: StringRef) callconv(.C) void;
pub const preferencesAddSuitePreferencesToApp = CFPreferencesAddSuitePreferencesToApp;

extern "CoreFoundation" fn CFPreferencesRemoveSuitePreferencesFromApp(applicationID: StringRef, suiteID: StringRef) callconv(.C) void;
pub const preferencesRemoveSuitePreferencesFromApp = CFPreferencesRemoveSuitePreferencesFromApp;

extern "CoreFoundation" fn CFPreferencesAppSynchronize(applicationID: StringRef) callconv(.C) objc.Boolean;
pub const preferencesAppSynchronize = CFPreferencesAppSynchronize;

extern "CoreFoundation" fn CFPreferencesCopyValue(key: StringRef, applicationID: StringRef, userName: StringRef, hostName: StringRef, ) callconv(.C) PropertyListRef;
pub const preferencesCopyValue = CFPreferencesCopyValue;

extern "CoreFoundation" fn CFPreferencesCopyMultiple(keysToFetch: ArrayRef, applicationID: StringRef, userName: StringRef, hostName: StringRef, ) callconv(.C) DictionaryRef;
pub const preferencesCopyMultiple = CFPreferencesCopyMultiple;

extern "CoreFoundation" fn CFPreferencesSetValue(key: StringRef, value: PropertyListRef, applicationID: StringRef, userName: StringRef, hostName: StringRef, ) callconv(.C) void;
pub const preferencesSetValue = CFPreferencesSetValue;

extern "CoreFoundation" fn CFPreferencesSetMultiple(keysToSet: DictionaryRef, keysToRemove: ArrayRef, applicationID: StringRef, userName: StringRef, hostName: StringRef, ) callconv(.C) void;
pub const preferencesSetMultiple = CFPreferencesSetMultiple;

extern "CoreFoundation" fn CFPreferencesSynchronize(applicationID: StringRef, userName: StringRef, hostName: StringRef) callconv(.C) objc.Boolean;
pub const preferencesSynchronize = CFPreferencesSynchronize;

extern "CoreFoundation" fn CFPreferencesCopyApplicationList(userName: StringRef, hostName: StringRef) callconv(.C) ArrayRef;
pub const preferencesCopyApplicationList = CFPreferencesCopyApplicationList;

extern "CoreFoundation" fn CFPreferencesCopyKeyList(applicationID: StringRef, userName: StringRef, hostName: StringRef) callconv(.C) ArrayRef;
pub const preferencesCopyKeyList = CFPreferencesCopyKeyList;

extern "CoreFoundation" fn CFPreferencesAppValueIsForced(key: StringRef, applicationID: StringRef) callconv(.C) objc.Boolean;
pub const preferencesAppValueIsForced = CFPreferencesAppValueIsForced;

pub const URLPathStyle = enum(Index) {
OSIXPathStyle = 0,
HFSPathStyle = 1,
WindowsPathStyle = 2,
};

pub const __CFURL = extern struct {};

pub const URLRef = ?*__CFURL;

extern "CoreFoundation" fn CFURLGetTypeID() callconv(.C) TypeID;
pub const urlGetTypeID = CFURLGetTypeID;

extern "CoreFoundation" fn CFURLCreateWithBytes(allocator: AllocatorRef, URLBytes: ?*objc.UInt8, length: Index, encoding: StringEncoding, baseURL: URLRef, ) callconv(.C) URLRef;
pub const urlCreateWithBytes = CFURLCreateWithBytes;

extern "CoreFoundation" fn CFURLCreateData(allocator: AllocatorRef, url: URLRef, encoding: StringEncoding, escapeWhitespace: objc.Boolean, ) callconv(.C) DataRef;
pub const urlCreateData = CFURLCreateData;

extern "CoreFoundation" fn CFURLCreateWithString(allocator: AllocatorRef, URLString: StringRef, baseURL: URLRef) callconv(.C) URLRef;
pub const urlCreateWithString = CFURLCreateWithString;

extern "CoreFoundation" fn CFURLCreateAbsoluteURLWithBytes(alloc: AllocatorRef, relativeURLBytes: ?*objc.UInt8, length: Index, encoding: StringEncoding, baseURL: URLRef, useCompatibilityMode: objc.Boolean, ) callconv(.C) URLRef;
pub const urlCreateAbsoluteURLWithBytes = CFURLCreateAbsoluteURLWithBytes;

extern "CoreFoundation" fn CFURLCreateWithFileSystemPath(allocator: AllocatorRef, filePath: StringRef, pathStyle: URLPathStyle, isDirectory: objc.Boolean, ) callconv(.C) URLRef;
pub const urlCreateWithFileSystemPath = CFURLCreateWithFileSystemPath;

extern "CoreFoundation" fn CFURLCreateFromFileSystemRepresentation(allocator: AllocatorRef, buffer: ?*objc.UInt8, bufLen: Index, isDirectory: objc.Boolean, ) callconv(.C) URLRef;
pub const urlCreateFromFileSystemRepresentation = CFURLCreateFromFileSystemRepresentation;

extern "CoreFoundation" fn CFURLCreateWithFileSystemPathRelativeToBase(allocator: AllocatorRef, filePath: StringRef, pathStyle: URLPathStyle, isDirectory: objc.Boolean, baseURL: URLRef, ) callconv(.C) URLRef;
pub const urlCreateWithFileSystemPathRelativeToBase = CFURLCreateWithFileSystemPathRelativeToBase;

extern "CoreFoundation" fn CFURLCreateFromFileSystemRepresentationRelativeToBase(allocator: AllocatorRef, buffer: ?*objc.UInt8, bufLen: Index, isDirectory: objc.Boolean, baseURL: URLRef, ) callconv(.C) URLRef;
pub const urlCreateFromFileSystemRepresentationRelativeToBase = CFURLCreateFromFileSystemRepresentationRelativeToBase;

extern "CoreFoundation" fn CFURLGetFileSystemRepresentation(url: URLRef, resolveAgainstBase: objc.Boolean, buffer: ?*objc.UInt8, maxBufLen: Index, ) callconv(.C) objc.Boolean;
pub const urlGetFileSystemRepresentation = CFURLGetFileSystemRepresentation;

extern "CoreFoundation" fn CFURLCopyAbsoluteURL(relativeURL: URLRef) callconv(.C) URLRef;
pub const urlCopyAbsoluteURL = CFURLCopyAbsoluteURL;

extern "CoreFoundation" fn CFURLGetString(anURL: URLRef) callconv(.C) StringRef;
pub const urlGetString = CFURLGetString;

extern "CoreFoundation" fn CFURLGetBaseURL(anURL: URLRef) callconv(.C) URLRef;
pub const urlGetBaseURL = CFURLGetBaseURL;

extern "CoreFoundation" fn CFURLCanBeDecomposed(anURL: URLRef) callconv(.C) objc.Boolean;
pub const urlCanBeDecomposed = CFURLCanBeDecomposed;

extern "CoreFoundation" fn CFURLCopyScheme(anURL: URLRef) callconv(.C) StringRef;
pub const urlCopyScheme = CFURLCopyScheme;

extern "CoreFoundation" fn CFURLCopyNetLocation(anURL: URLRef) callconv(.C) StringRef;
pub const urlCopyNetLocation = CFURLCopyNetLocation;

extern "CoreFoundation" fn CFURLCopyPath(anURL: URLRef) callconv(.C) StringRef;
pub const urlCopyPath = CFURLCopyPath;

extern "CoreFoundation" fn CFURLCopyStrictPath(anURL: URLRef, isAbsolute: ?*objc.Boolean) callconv(.C) StringRef;
pub const urlCopyStrictPath = CFURLCopyStrictPath;

extern "CoreFoundation" fn CFURLCopyFileSystemPath(anURL: URLRef, pathStyle: URLPathStyle) callconv(.C) StringRef;
pub const urlCopyFileSystemPath = CFURLCopyFileSystemPath;

extern "CoreFoundation" fn CFURLHasDirectoryPath(anURL: URLRef) callconv(.C) objc.Boolean;
pub const urlHasDirectoryPath = CFURLHasDirectoryPath;

extern "CoreFoundation" fn CFURLCopyResourceSpecifier(anURL: URLRef) callconv(.C) StringRef;
pub const urlCopyResourceSpecifier = CFURLCopyResourceSpecifier;

extern "CoreFoundation" fn CFURLCopyHostName(anURL: URLRef) callconv(.C) StringRef;
pub const urlCopyHostName = CFURLCopyHostName;

extern "CoreFoundation" fn CFURLGetPortNumber(anURL: URLRef) callconv(.C) objc.SInt32;
pub const urlGetPortNumber = CFURLGetPortNumber;

extern "CoreFoundation" fn CFURLCopyUserName(anURL: URLRef) callconv(.C) StringRef;
pub const urlCopyUserName = CFURLCopyUserName;

extern "CoreFoundation" fn CFURLCopyPassword(anURL: URLRef) callconv(.C) StringRef;
pub const urlCopyPassword = CFURLCopyPassword;

extern "CoreFoundation" fn CFURLCopyParameterString(anURL: URLRef, charactersToLeaveEscaped: StringRef) callconv(.C) StringRef;
pub const urlCopyParameterString = CFURLCopyParameterString;

extern "CoreFoundation" fn CFURLCopyQueryString(anURL: URLRef, charactersToLeaveEscaped: StringRef) callconv(.C) StringRef;
pub const urlCopyQueryString = CFURLCopyQueryString;

extern "CoreFoundation" fn CFURLCopyFragment(anURL: URLRef, charactersToLeaveEscaped: StringRef) callconv(.C) StringRef;
pub const urlCopyFragment = CFURLCopyFragment;

extern "CoreFoundation" fn CFURLCopyLastPathComponent(url: URLRef) callconv(.C) StringRef;
pub const urlCopyLastPathComponent = CFURLCopyLastPathComponent;

extern "CoreFoundation" fn CFURLCopyPathExtension(url: URLRef) callconv(.C) StringRef;
pub const urlCopyPathExtension = CFURLCopyPathExtension;

extern "CoreFoundation" fn CFURLCreateCopyAppendingPathComponent(allocator: AllocatorRef, url: URLRef, pathComponent: StringRef, isDirectory: objc.Boolean, ) callconv(.C) URLRef;
pub const urlCreateCopyAppendingPathComponent = CFURLCreateCopyAppendingPathComponent;

extern "CoreFoundation" fn CFURLCreateCopyDeletingLastPathComponent(allocator: AllocatorRef, url: URLRef) callconv(.C) URLRef;
pub const urlCreateCopyDeletingLastPathComponent = CFURLCreateCopyDeletingLastPathComponent;

extern "CoreFoundation" fn CFURLCreateCopyAppendingPathExtension(allocator: AllocatorRef, url: URLRef, extension: StringRef) callconv(.C) URLRef;
pub const urlCreateCopyAppendingPathExtension = CFURLCreateCopyAppendingPathExtension;

extern "CoreFoundation" fn CFURLCreateCopyDeletingPathExtension(allocator: AllocatorRef, url: URLRef) callconv(.C) URLRef;
pub const urlCreateCopyDeletingPathExtension = CFURLCreateCopyDeletingPathExtension;

extern "CoreFoundation" fn CFURLGetBytes(url: URLRef, buffer: ?*objc.UInt8, bufferLength: Index) callconv(.C) Index;
pub const urlGetBytes = CFURLGetBytes;

pub const URLComponentType = enum(Index) {
Scheme = 1,
NetLocation = 2,
Path = 3,
ResourceSpecifier = 4,
User = 5,
Password = 6,
UserInfo = 7,
Host = 8,
Port = 9,
ParameterString = 10,
Query = 11,
Fragment = 12,
};

extern "CoreFoundation" fn CFURLGetByteRangeForComponent(url: URLRef, component: URLComponentType, rangeIncludingSeparators: ?*Range) callconv(.C) Range;
pub const urlGetByteRangeForComponent = CFURLGetByteRangeForComponent;

extern "CoreFoundation" fn CFURLCreateStringByReplacingPercentEscapes(allocator: AllocatorRef, originalString: StringRef, charactersToLeaveEscaped: StringRef) callconv(.C) StringRef;
pub const urlCreateStringByReplacingPercentEscapes = CFURLCreateStringByReplacingPercentEscapes;

extern "CoreFoundation" fn CFURLCreateStringByReplacingPercentEscapesUsingEncoding(allocator: AllocatorRef, origString: StringRef, charsToLeaveEscaped: StringRef, encoding: StringEncoding, ) callconv(.C) StringRef;
pub const urlCreateStringByReplacingPercentEscapesUsingEncoding = CFURLCreateStringByReplacingPercentEscapesUsingEncoding;

extern "CoreFoundation" fn CFURLCreateStringByAddingPercentEscapes(allocator: AllocatorRef, originalString: StringRef, charactersToLeaveUnescaped: StringRef, legalURLCharactersToBeEscaped: StringRef, encoding: StringEncoding, ) callconv(.C) StringRef;
pub const urlCreateStringByAddingPercentEscapes = CFURLCreateStringByAddingPercentEscapes;

extern "CoreFoundation" fn CFURLIsFileReferenceURL(url: URLRef) callconv(.C) objc.Boolean;
pub const urlIsFileReferenceURL = CFURLIsFileReferenceURL;

extern "CoreFoundation" fn CFURLCreateFileReferenceURL(allocator: AllocatorRef, url: URLRef, @"error": ?*ErrorRef) callconv(.C) URLRef;
pub const urlCreateFileReferenceURL = CFURLCreateFileReferenceURL;

extern "CoreFoundation" fn CFURLCreateFilePathURL(allocator: AllocatorRef, url: URLRef, @"error": ?*ErrorRef) callconv(.C) URLRef;
pub const urlCreateFilePathURL = CFURLCreateFilePathURL;

pub const FSRef = extern struct {};

extern "CoreFoundation" fn CFURLCreateFromFSRef(allocator: AllocatorRef, fsRef: ?*FSRef) callconv(.C) URLRef;
pub const urlCreateFromFSRef = CFURLCreateFromFSRef;

extern "CoreFoundation" fn CFURLGetFSRef(url: URLRef, fsRef: ?*FSRef) callconv(.C) objc.Boolean;
pub const urlGetFSRef = CFURLGetFSRef;

extern "CoreFoundation" fn CFURLCopyResourcePropertyForKey(url: URLRef, key: StringRef, propertyValueTypeRefPtr: ?*anyopaque, @"error": ?*ErrorRef, ) callconv(.C) objc.Boolean;
pub const urlCopyResourcePropertyForKey = CFURLCopyResourcePropertyForKey;

extern "CoreFoundation" fn CFURLCopyResourcePropertiesForKeys(url: URLRef, keys: ArrayRef, @"error": ?*ErrorRef) callconv(.C) DictionaryRef;
pub const urlCopyResourcePropertiesForKeys = CFURLCopyResourcePropertiesForKeys;

extern "CoreFoundation" fn CFURLSetResourcePropertyForKey(url: URLRef, key: StringRef, propertyValue: TypeRef, @"error": ?*ErrorRef, ) callconv(.C) objc.Boolean;
pub const urlSetResourcePropertyForKey = CFURLSetResourcePropertyForKey;

extern "CoreFoundation" fn CFURLSetResourcePropertiesForKeys(url: URLRef, keyedPropertyValues: DictionaryRef, @"error": ?*ErrorRef) callconv(.C) objc.Boolean;
pub const urlSetResourcePropertiesForKeys = CFURLSetResourcePropertiesForKeys;

extern "CoreFoundation" fn CFURLClearResourcePropertyCacheForKey(url: URLRef, key: StringRef) callconv(.C) void;
pub const urlClearResourcePropertyCacheForKey = CFURLClearResourcePropertyCacheForKey;

extern "CoreFoundation" fn CFURLClearResourcePropertyCache(url: URLRef) callconv(.C) void;
pub const urlClearResourcePropertyCache = CFURLClearResourcePropertyCache;

extern "CoreFoundation" fn CFURLSetTemporaryResourcePropertyForKey(url: URLRef, key: StringRef, propertyValue: TypeRef) callconv(.C) void;
pub const urlSetTemporaryResourcePropertyForKey = CFURLSetTemporaryResourcePropertyForKey;

extern "CoreFoundation" fn CFURLResourceIsReachable(url: URLRef, @"error": ?*ErrorRef) callconv(.C) objc.Boolean;
pub const urlResourceIsReachable = CFURLResourceIsReachable;

pub const URLBookmarkCreationOptions = enum(OptionFlags) {
MinimalBookmarkMask = 512,
SuitableForBookmarkFile = 1024,
WithSecurityScope = 2048,
SecurityScopeAllowOnlyReadAccess = 4096,
WithoutImplicitSecurityScope = 536870912,
PreferFileIDResolutionMask = 256,
};

pub const URLBookmarkResolutionOptions = enum(OptionFlags) {
WithoutUIMask = 256,
WithoutMountingMask = 512,
WithSecurityScope = 1024,
WithoutImplicitStartAccessing = 32768,
BookmarkResolutionWithoutUIMask = 256,
BookmarkResolutionWithoutMountingMask = 512,
};

pub const URLBookmarkFileCreationOptions = OptionFlags;

extern "CoreFoundation" fn CFURLCreateBookmarkData(allocator: AllocatorRef, url: URLRef, options: URLBookmarkCreationOptions, resourcePropertiesToInclude: ArrayRef, relativeToURL: URLRef, @"error": ?*ErrorRef, ) callconv(.C) DataRef;
pub const urlCreateBookmarkData = CFURLCreateBookmarkData;

extern "CoreFoundation" fn CFURLCreateByResolvingBookmarkData(allocator: AllocatorRef, bookmark: DataRef, options: URLBookmarkResolutionOptions, relativeToURL: URLRef, resourcePropertiesToInclude: ArrayRef, isStale: ?*objc.Boolean, @"error": ?*ErrorRef, ) callconv(.C) URLRef;
pub const urlCreateByResolvingBookmarkData = CFURLCreateByResolvingBookmarkData;

extern "CoreFoundation" fn CFURLCreateResourcePropertiesForKeysFromBookmarkData(allocator: AllocatorRef, resourcePropertiesToReturn: ArrayRef, bookmark: DataRef) callconv(.C) DictionaryRef;
pub const urlCreateResourcePropertiesForKeysFromBookmarkData = CFURLCreateResourcePropertiesForKeysFromBookmarkData;

extern "CoreFoundation" fn CFURLCreateResourcePropertyForKeyFromBookmarkData(allocator: AllocatorRef, resourcePropertyKey: StringRef, bookmark: DataRef) callconv(.C) TypeRef;
pub const urlCreateResourcePropertyForKeyFromBookmarkData = CFURLCreateResourcePropertyForKeyFromBookmarkData;

extern "CoreFoundation" fn CFURLCreateBookmarkDataFromFile(allocator: AllocatorRef, fileURL: URLRef, errorRef: ?*ErrorRef) callconv(.C) DataRef;
pub const urlCreateBookmarkDataFromFile = CFURLCreateBookmarkDataFromFile;

extern "CoreFoundation" fn CFURLWriteBookmarkDataToFile(bookmarkRef: DataRef, fileURL: URLRef, options: URLBookmarkFileCreationOptions, errorRef: ?*ErrorRef, ) callconv(.C) objc.Boolean;
pub const urlWriteBookmarkDataToFile = CFURLWriteBookmarkDataToFile;

extern "CoreFoundation" fn CFURLCreateBookmarkDataFromAliasRecord(allocatorRef: AllocatorRef, aliasRecordDataRef: DataRef) callconv(.C) DataRef;
pub const urlCreateBookmarkDataFromAliasRecord = CFURLCreateBookmarkDataFromAliasRecord;

extern "CoreFoundation" fn CFURLStartAccessingSecurityScopedResource(url: URLRef) callconv(.C) objc.Boolean;
pub const urlStartAccessingSecurityScopedResource = CFURLStartAccessingSecurityScopedResource;

extern "CoreFoundation" fn CFURLStopAccessingSecurityScopedResource(url: URLRef) callconv(.C) void;
pub const urlStopAccessingSecurityScopedResource = CFURLStopAccessingSecurityScopedResource;

pub const RunLoopMode = StringRef;

pub const __CFRunLoop = extern struct {};

pub const RunLoopRef = ?*__CFRunLoop;

pub const __CFRunLoopSource = extern struct {};

pub const RunLoopSourceRef = ?*__CFRunLoopSource;

pub const __CFRunLoopObserver = extern struct {};

pub const RunLoopObserverRef = ?*__CFRunLoopObserver;

pub const __CFRunLoopTimer = extern struct {};

pub const RunLoopTimerRef = ?*__CFRunLoopTimer;

pub const RunLoopRunResult = enum(objc.SInt32) {
Finished = 1,
Stopped = 2,
TimedOut = 3,
HandledSource = 4,
};

pub const RunLoopActivity = enum(OptionFlags) {
Entry = 1,
BeforeTimers = 2,
BeforeSources = 4,
BeforeWaiting = 32,
AfterWaiting = 64,
Exit = 128,
AllActivities = 268435455,
};

extern "CoreFoundation" fn CFRunLoopGetTypeID() callconv(.C) TypeID;
pub const runLoopGetTypeID = CFRunLoopGetTypeID;

extern "CoreFoundation" fn CFRunLoopGetCurrent() callconv(.C) RunLoopRef;
pub const runLoopGetCurrent = CFRunLoopGetCurrent;

extern "CoreFoundation" fn CFRunLoopGetMain() callconv(.C) RunLoopRef;
pub const runLoopGetMain = CFRunLoopGetMain;

extern "CoreFoundation" fn CFRunLoopCopyCurrentMode(rl: RunLoopRef) callconv(.C) RunLoopMode;
pub const runLoopCopyCurrentMode = CFRunLoopCopyCurrentMode;

extern "CoreFoundation" fn CFRunLoopCopyAllModes(rl: RunLoopRef) callconv(.C) ArrayRef;
pub const runLoopCopyAllModes = CFRunLoopCopyAllModes;

extern "CoreFoundation" fn CFRunLoopAddCommonMode(rl: RunLoopRef, mode: RunLoopMode) callconv(.C) void;
pub const runLoopAddCommonMode = CFRunLoopAddCommonMode;

extern "CoreFoundation" fn CFRunLoopGetNextTimerFireDate(rl: RunLoopRef, mode: RunLoopMode) callconv(.C) AbsoluteTime;
pub const runLoopGetNextTimerFireDate = CFRunLoopGetNextTimerFireDate;

extern "CoreFoundation" fn CFRunLoopRun() callconv(.C) void;
pub const runLoopRun = CFRunLoopRun;

extern "CoreFoundation" fn CFRunLoopRunInMode(mode: RunLoopMode, seconds: TimeInterval, returnAfterSourceHandled: objc.Boolean) callconv(.C) RunLoopRunResult;
pub const runLoopRunInMode = CFRunLoopRunInMode;

extern "CoreFoundation" fn CFRunLoopIsWaiting(rl: RunLoopRef) callconv(.C) objc.Boolean;
pub const runLoopIsWaiting = CFRunLoopIsWaiting;

extern "CoreFoundation" fn CFRunLoopWakeUp(rl: RunLoopRef) callconv(.C) void;
pub const runLoopWakeUp = CFRunLoopWakeUp;

extern "CoreFoundation" fn CFRunLoopStop(rl: RunLoopRef) callconv(.C) void;
pub const runLoopStop = CFRunLoopStop;

extern "CoreFoundation" fn CFRunLoopPerformBlock(rl: RunLoopRef, mode: TypeRef, block: *const fn() callconv(.C) void) callconv(.C) void;
pub const runLoopPerformBlock = CFRunLoopPerformBlock;

extern "CoreFoundation" fn CFRunLoopContainsSource(rl: RunLoopRef, source: RunLoopSourceRef, mode: RunLoopMode) callconv(.C) objc.Boolean;
pub const runLoopContainsSource = CFRunLoopContainsSource;

extern "CoreFoundation" fn CFRunLoopAddSource(rl: RunLoopRef, source: RunLoopSourceRef, mode: RunLoopMode) callconv(.C) void;
pub const runLoopAddSource = CFRunLoopAddSource;

extern "CoreFoundation" fn CFRunLoopRemoveSource(rl: RunLoopRef, source: RunLoopSourceRef, mode: RunLoopMode) callconv(.C) void;
pub const runLoopRemoveSource = CFRunLoopRemoveSource;

extern "CoreFoundation" fn CFRunLoopContainsObserver(rl: RunLoopRef, observer: RunLoopObserverRef, mode: RunLoopMode) callconv(.C) objc.Boolean;
pub const runLoopContainsObserver = CFRunLoopContainsObserver;

extern "CoreFoundation" fn CFRunLoopAddObserver(rl: RunLoopRef, observer: RunLoopObserverRef, mode: RunLoopMode) callconv(.C) void;
pub const runLoopAddObserver = CFRunLoopAddObserver;

extern "CoreFoundation" fn CFRunLoopRemoveObserver(rl: RunLoopRef, observer: RunLoopObserverRef, mode: RunLoopMode) callconv(.C) void;
pub const runLoopRemoveObserver = CFRunLoopRemoveObserver;

extern "CoreFoundation" fn CFRunLoopContainsTimer(rl: RunLoopRef, timer: RunLoopTimerRef, mode: RunLoopMode) callconv(.C) objc.Boolean;
pub const runLoopContainsTimer = CFRunLoopContainsTimer;

extern "CoreFoundation" fn CFRunLoopAddTimer(rl: RunLoopRef, timer: RunLoopTimerRef, mode: RunLoopMode) callconv(.C) void;
pub const runLoopAddTimer = CFRunLoopAddTimer;

extern "CoreFoundation" fn CFRunLoopRemoveTimer(rl: RunLoopRef, timer: RunLoopTimerRef, mode: RunLoopMode) callconv(.C) void;
pub const runLoopRemoveTimer = CFRunLoopRemoveTimer;

pub const RunLoopSourceContext = extern struct {
    version: Index,
    info: ?*anyopaque,
    retain: ?*const fn(?*anyopaque) callconv(.C) ?*anyopaque,
    release: ?*const fn(?*anyopaque) callconv(.C) void,
    copyDescription: ?*const fn(?*anyopaque) callconv(.C) StringRef,
    equal: ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) objc.Boolean,
    hash: ?*const fn(?*anyopaque) callconv(.C) HashCode,
    schedule: ?*const fn(?*anyopaque, RunLoopRef, RunLoopMode) callconv(.C) void,
    cancel: ?*const fn(?*anyopaque, RunLoopRef, RunLoopMode) callconv(.C) void,
    perform: ?*const fn(?*anyopaque) callconv(.C) void,
};

pub const RunLoopSourceContext1 = extern struct {
    version: Index,
    info: ?*anyopaque,
    retain: ?*const fn(?*anyopaque) callconv(.C) ?*anyopaque,
    release: ?*const fn(?*anyopaque) callconv(.C) void,
    copyDescription: ?*const fn(?*anyopaque) callconv(.C) StringRef,
    equal: ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) objc.Boolean,
    hash: ?*const fn(?*anyopaque) callconv(.C) HashCode,
    getPort: ?*const fn(?*anyopaque) callconv(.C) objc.mach_port_t,
    perform: ?*const fn(?*anyopaque, Index, AllocatorRef, ?*anyopaque, ) callconv(.C) ?*anyopaque,
};

extern "CoreFoundation" fn CFRunLoopSourceGetTypeID() callconv(.C) TypeID;
pub const runLoopSourceGetTypeID = CFRunLoopSourceGetTypeID;

extern "CoreFoundation" fn CFRunLoopSourceCreate(allocator: AllocatorRef, order: Index, context: ?*RunLoopSourceContext) callconv(.C) RunLoopSourceRef;
pub const runLoopSourceCreate = CFRunLoopSourceCreate;

extern "CoreFoundation" fn CFRunLoopSourceGetOrder(source: RunLoopSourceRef) callconv(.C) Index;
pub const runLoopSourceGetOrder = CFRunLoopSourceGetOrder;

extern "CoreFoundation" fn CFRunLoopSourceInvalidate(source: RunLoopSourceRef) callconv(.C) void;
pub const runLoopSourceInvalidate = CFRunLoopSourceInvalidate;

extern "CoreFoundation" fn CFRunLoopSourceIsValid(source: RunLoopSourceRef) callconv(.C) objc.Boolean;
pub const runLoopSourceIsValid = CFRunLoopSourceIsValid;

extern "CoreFoundation" fn CFRunLoopSourceGetContext(source: RunLoopSourceRef, context: ?*RunLoopSourceContext) callconv(.C) void;
pub const runLoopSourceGetContext = CFRunLoopSourceGetContext;

extern "CoreFoundation" fn CFRunLoopSourceSignal(source: RunLoopSourceRef) callconv(.C) void;
pub const runLoopSourceSignal = CFRunLoopSourceSignal;

pub const RunLoopObserverContext = extern struct {
    version: Index,
    info: ?*anyopaque,
    retain: ?*const fn(?*anyopaque) callconv(.C) ?*anyopaque,
    release: ?*const fn(?*anyopaque) callconv(.C) void,
    copyDescription: ?*const fn(?*anyopaque) callconv(.C) StringRef,
};

pub const RunLoopObserverCallBack = ?*const fn(RunLoopObserverRef, RunLoopActivity, ?*anyopaque) callconv(.C) void;

extern "CoreFoundation" fn CFRunLoopObserverGetTypeID() callconv(.C) TypeID;
pub const runLoopObserverGetTypeID = CFRunLoopObserverGetTypeID;

extern "CoreFoundation" fn CFRunLoopObserverCreate(allocator: AllocatorRef, activities: OptionFlags, repeats: objc.Boolean, order: Index, callout: RunLoopObserverCallBack, context: ?*RunLoopObserverContext, ) callconv(.C) RunLoopObserverRef;
pub const runLoopObserverCreate = CFRunLoopObserverCreate;

extern "CoreFoundation" fn CFRunLoopObserverCreateWithHandler(allocator: AllocatorRef, activities: OptionFlags, repeats: objc.Boolean, order: Index, block: *const fn(RunLoopObserverRef, RunLoopActivity) callconv(.C) void, ) callconv(.C) RunLoopObserverRef;
pub const runLoopObserverCreateWithHandler = CFRunLoopObserverCreateWithHandler;

extern "CoreFoundation" fn CFRunLoopObserverGetActivities(observer: RunLoopObserverRef) callconv(.C) OptionFlags;
pub const runLoopObserverGetActivities = CFRunLoopObserverGetActivities;

extern "CoreFoundation" fn CFRunLoopObserverDoesRepeat(observer: RunLoopObserverRef) callconv(.C) objc.Boolean;
pub const runLoopObserverDoesRepeat = CFRunLoopObserverDoesRepeat;

extern "CoreFoundation" fn CFRunLoopObserverGetOrder(observer: RunLoopObserverRef) callconv(.C) Index;
pub const runLoopObserverGetOrder = CFRunLoopObserverGetOrder;

extern "CoreFoundation" fn CFRunLoopObserverInvalidate(observer: RunLoopObserverRef) callconv(.C) void;
pub const runLoopObserverInvalidate = CFRunLoopObserverInvalidate;

extern "CoreFoundation" fn CFRunLoopObserverIsValid(observer: RunLoopObserverRef) callconv(.C) objc.Boolean;
pub const runLoopObserverIsValid = CFRunLoopObserverIsValid;

extern "CoreFoundation" fn CFRunLoopObserverGetContext(observer: RunLoopObserverRef, context: ?*RunLoopObserverContext) callconv(.C) void;
pub const runLoopObserverGetContext = CFRunLoopObserverGetContext;

pub const RunLoopTimerContext = extern struct {
    version: Index,
    info: ?*anyopaque,
    retain: ?*const fn(?*anyopaque) callconv(.C) ?*anyopaque,
    release: ?*const fn(?*anyopaque) callconv(.C) void,
    copyDescription: ?*const fn(?*anyopaque) callconv(.C) StringRef,
};

pub const RunLoopTimerCallBack = ?*const fn(RunLoopTimerRef, ?*anyopaque) callconv(.C) void;

extern "CoreFoundation" fn CFRunLoopTimerGetTypeID() callconv(.C) TypeID;
pub const runLoopTimerGetTypeID = CFRunLoopTimerGetTypeID;

extern "CoreFoundation" fn CFRunLoopTimerCreate(allocator: AllocatorRef, fireDate: AbsoluteTime, interval: TimeInterval, flags: OptionFlags, order: Index, callout: RunLoopTimerCallBack, context: ?*RunLoopTimerContext, ) callconv(.C) RunLoopTimerRef;
pub const runLoopTimerCreate = CFRunLoopTimerCreate;

extern "CoreFoundation" fn CFRunLoopTimerCreateWithHandler(allocator: AllocatorRef, fireDate: AbsoluteTime, interval: TimeInterval, flags: OptionFlags, order: Index, block: *const fn(RunLoopTimerRef) callconv(.C) void, ) callconv(.C) RunLoopTimerRef;
pub const runLoopTimerCreateWithHandler = CFRunLoopTimerCreateWithHandler;

extern "CoreFoundation" fn CFRunLoopTimerGetNextFireDate(timer: RunLoopTimerRef) callconv(.C) AbsoluteTime;
pub const runLoopTimerGetNextFireDate = CFRunLoopTimerGetNextFireDate;

extern "CoreFoundation" fn CFRunLoopTimerSetNextFireDate(timer: RunLoopTimerRef, fireDate: AbsoluteTime) callconv(.C) void;
pub const runLoopTimerSetNextFireDate = CFRunLoopTimerSetNextFireDate;

extern "CoreFoundation" fn CFRunLoopTimerGetInterval(timer: RunLoopTimerRef) callconv(.C) TimeInterval;
pub const runLoopTimerGetInterval = CFRunLoopTimerGetInterval;

extern "CoreFoundation" fn CFRunLoopTimerDoesRepeat(timer: RunLoopTimerRef) callconv(.C) objc.Boolean;
pub const runLoopTimerDoesRepeat = CFRunLoopTimerDoesRepeat;

extern "CoreFoundation" fn CFRunLoopTimerGetOrder(timer: RunLoopTimerRef) callconv(.C) Index;
pub const runLoopTimerGetOrder = CFRunLoopTimerGetOrder;

extern "CoreFoundation" fn CFRunLoopTimerInvalidate(timer: RunLoopTimerRef) callconv(.C) void;
pub const runLoopTimerInvalidate = CFRunLoopTimerInvalidate;

extern "CoreFoundation" fn CFRunLoopTimerIsValid(timer: RunLoopTimerRef) callconv(.C) objc.Boolean;
pub const runLoopTimerIsValid = CFRunLoopTimerIsValid;

extern "CoreFoundation" fn CFRunLoopTimerGetContext(timer: RunLoopTimerRef, context: ?*RunLoopTimerContext) callconv(.C) void;
pub const runLoopTimerGetContext = CFRunLoopTimerGetContext;

extern "CoreFoundation" fn CFRunLoopTimerGetTolerance(timer: RunLoopTimerRef) callconv(.C) TimeInterval;
pub const runLoopTimerGetTolerance = CFRunLoopTimerGetTolerance;

extern "CoreFoundation" fn CFRunLoopTimerSetTolerance(timer: RunLoopTimerRef, tolerance: TimeInterval) callconv(.C) void;
pub const runLoopTimerSetTolerance = CFRunLoopTimerSetTolerance;

pub const __CFSocket = extern struct {};

pub const SocketRef = ?*__CFSocket;

pub const SocketError = enum(Index) {
Success = 0,
 = -1,
Timeout = -2,
};

pub const SocketSignature = extern struct {
    protocolFamily: objc.SInt32,
    socketType: objc.SInt32,
    protocol: objc.SInt32,
    address: DataRef,
};

pub const SocketCallBackType = enum(OptionFlags) {
NoCallBack = 0,
ReadCallBack = 1,
AcceptCallBack = 2,
DataCallBack = 3,
ConnectCallBack = 4,
WriteCallBack = 8,
};

pub const anon1231 = enum(OptionFlags) {
CFSocketAutomaticallyReenableReadCallBack = 1,
CFSocketAutomaticallyReenableAcceptCallBack = 2,
CFSocketAutomaticallyReenableDataCallBack = 3,
CFSocketAutomaticallyReenableWriteCallBack = 8,
CFSocketLeaveErrors = 64,
CFSocketCloseOnInvalidate = 128,
};

pub const SocketCallBack = ?*const fn(SocketRef, SocketCallBackType, DataRef, ?*anyopaque, ?*anyopaque, ) callconv(.C) void;

pub const SocketContext = extern struct {
    version: Index,
    info: ?*anyopaque,
    retain: ?*const fn(?*anyopaque) callconv(.C) ?*anyopaque,
    release: ?*const fn(?*anyopaque) callconv(.C) void,
    copyDescription: ?*const fn(?*anyopaque) callconv(.C) StringRef,
};

pub const SocketNativeHandle = i32;

extern "CoreFoundation" fn CFSocketGetTypeID() callconv(.C) TypeID;
pub const socketGetTypeID = CFSocketGetTypeID;

extern "CoreFoundation" fn CFSocketCreate(allocator: AllocatorRef, protocolFamily: objc.SInt32, socketType: objc.SInt32, protocol: objc.SInt32, callBackTypes: OptionFlags, callout: SocketCallBack, context: ?*SocketContext, ) callconv(.C) SocketRef;
pub const socketCreate = CFSocketCreate;

extern "CoreFoundation" fn CFSocketCreateWithNative(allocator: AllocatorRef, sock: SocketNativeHandle, callBackTypes: OptionFlags, callout: SocketCallBack, context: ?*SocketContext, ) callconv(.C) SocketRef;
pub const socketCreateWithNative = CFSocketCreateWithNative;

extern "CoreFoundation" fn CFSocketCreateWithSocketSignature(allocator: AllocatorRef, signature: ?*SocketSignature, callBackTypes: OptionFlags, callout: SocketCallBack, context: ?*SocketContext, ) callconv(.C) SocketRef;
pub const socketCreateWithSocketSignature = CFSocketCreateWithSocketSignature;

extern "CoreFoundation" fn CFSocketCreateConnectedToSocketSignature(allocator: AllocatorRef, signature: ?*SocketSignature, callBackTypes: OptionFlags, callout: SocketCallBack, context: ?*SocketContext, timeout: TimeInterval, ) callconv(.C) SocketRef;
pub const socketCreateConnectedToSocketSignature = CFSocketCreateConnectedToSocketSignature;

extern "CoreFoundation" fn CFSocketSetAddress(s: SocketRef, address: DataRef) callconv(.C) SocketError;
pub const socketSetAddress = CFSocketSetAddress;

extern "CoreFoundation" fn CFSocketConnectToAddress(s: SocketRef, address: DataRef, timeout: TimeInterval) callconv(.C) SocketError;
pub const socketConnectToAddress = CFSocketConnectToAddress;

extern "CoreFoundation" fn CFSocketInvalidate(s: SocketRef) callconv(.C) void;
pub const socketInvalidate = CFSocketInvalidate;

extern "CoreFoundation" fn CFSocketIsValid(s: SocketRef) callconv(.C) objc.Boolean;
pub const socketIsValid = CFSocketIsValid;

extern "CoreFoundation" fn CFSocketCopyAddress(s: SocketRef) callconv(.C) DataRef;
pub const socketCopyAddress = CFSocketCopyAddress;

extern "CoreFoundation" fn CFSocketCopyPeerAddress(s: SocketRef) callconv(.C) DataRef;
pub const socketCopyPeerAddress = CFSocketCopyPeerAddress;

extern "CoreFoundation" fn CFSocketGetContext(s: SocketRef, context: ?*SocketContext) callconv(.C) void;
pub const socketGetContext = CFSocketGetContext;

extern "CoreFoundation" fn CFSocketGetNative(s: SocketRef) callconv(.C) SocketNativeHandle;
pub const socketGetNative = CFSocketGetNative;

extern "CoreFoundation" fn CFSocketCreateRunLoopSource(allocator: AllocatorRef, s: SocketRef, order: Index) callconv(.C) RunLoopSourceRef;
pub const socketCreateRunLoopSource = CFSocketCreateRunLoopSource;

extern "CoreFoundation" fn CFSocketGetSocketFlags(s: SocketRef) callconv(.C) OptionFlags;
pub const socketGetSocketFlags = CFSocketGetSocketFlags;

extern "CoreFoundation" fn CFSocketSetSocketFlags(s: SocketRef, flags: OptionFlags) callconv(.C) void;
pub const socketSetSocketFlags = CFSocketSetSocketFlags;

extern "CoreFoundation" fn CFSocketDisableCallBacks(s: SocketRef, callBackTypes: OptionFlags) callconv(.C) void;
pub const socketDisableCallBacks = CFSocketDisableCallBacks;

extern "CoreFoundation" fn CFSocketEnableCallBacks(s: SocketRef, callBackTypes: OptionFlags) callconv(.C) void;
pub const socketEnableCallBacks = CFSocketEnableCallBacks;

extern "CoreFoundation" fn CFSocketSendData(s: SocketRef, address: DataRef, data: DataRef, timeout: TimeInterval, ) callconv(.C) SocketError;
pub const socketSendData = CFSocketSendData;

extern "CoreFoundation" fn CFSocketRegisterValue(nameServerSignature: ?*SocketSignature, timeout: TimeInterval, name: StringRef, value: PropertyListRef, ) callconv(.C) SocketError;
pub const socketRegisterValue = CFSocketRegisterValue;

extern "CoreFoundation" fn CFSocketCopyRegisteredValue(nameServerSignature: ?*SocketSignature, timeout: TimeInterval, name: StringRef, value: ?*PropertyListRef, nameServerAddress: ?*DataRef, ) callconv(.C) SocketError;
pub const socketCopyRegisteredValue = CFSocketCopyRegisteredValue;

extern "CoreFoundation" fn CFSocketRegisterSocketSignature(nameServerSignature: ?*SocketSignature, timeout: TimeInterval, name: StringRef, signature: ?*SocketSignature, ) callconv(.C) SocketError;
pub const socketRegisterSocketSignature = CFSocketRegisterSocketSignature;

extern "CoreFoundation" fn CFSocketCopyRegisteredSocketSignature(nameServerSignature: ?*SocketSignature, timeout: TimeInterval, name: StringRef, signature: ?*SocketSignature, nameServerAddress: ?*DataRef, ) callconv(.C) SocketError;
pub const socketCopyRegisteredSocketSignature = CFSocketCopyRegisteredSocketSignature;

extern "CoreFoundation" fn CFSocketUnregister(nameServerSignature: ?*SocketSignature, timeout: TimeInterval, name: StringRef) callconv(.C) SocketError;
pub const socketUnregister = CFSocketUnregister;

extern "CoreFoundation" fn CFSocketSetDefaultNameRegistryPortNumber(port: objc.UInt16) callconv(.C) void;
pub const socketSetDefaultNameRegistryPortNumber = CFSocketSetDefaultNameRegistryPortNumber;

extern "CoreFoundation" fn CFSocketGetDefaultNameRegistryPortNumber() callconv(.C) objc.UInt16;
pub const socketGetDefaultNameRegistryPortNumber = CFSocketGetDefaultNameRegistryPortNumber;

pub const StreamError = extern struct {
    domain: Index,
    @"error": objc.SInt32,
};

pub const StreamPropertyKey = StringRef;

pub const StreamStatus = enum(Index) {
NotOpen = 0,
Opening = 1,
Open = 2,
Reading = 3,
Writing = 4,
AtEnd = 5,
Closed = 6,
Error = 7,
};

pub const StreamEventType = enum(OptionFlags) {
None = 0,
OpenCompleted = 1,
HasBytesAvailable = 2,
CanAcceptBytes = 4,
ErrorOccurred = 8,
EndEncountered = 16,
};

pub const StreamClientContext = extern struct {
    version: Index,
    info: ?*anyopaque,
    retain: ?*const fn(?*anyopaque) callconv(.C) ?*anyopaque,
    release: ?*const fn(?*anyopaque) callconv(.C) void,
    copyDescription: ?*const fn(?*anyopaque) callconv(.C) StringRef,
};

pub const __CFReadStream = extern struct {};

pub const ReadStreamRef = ?*__CFReadStream;

pub const __CFWriteStream = extern struct {};

pub const WriteStreamRef = ?*__CFWriteStream;

pub const ReadStreamClientCallBack = ?*const fn(ReadStreamRef, StreamEventType, ?*anyopaque) callconv(.C) void;

pub const WriteStreamClientCallBack = ?*const fn(WriteStreamRef, StreamEventType, ?*anyopaque) callconv(.C) void;

extern "CoreFoundation" fn CFReadStreamGetTypeID() callconv(.C) TypeID;
pub const readStreamGetTypeID = CFReadStreamGetTypeID;

extern "CoreFoundation" fn CFWriteStreamGetTypeID() callconv(.C) TypeID;
pub const writeStreamGetTypeID = CFWriteStreamGetTypeID;

extern "CoreFoundation" fn CFReadStreamCreateWithBytesNoCopy(alloc: AllocatorRef, bytes: ?*objc.UInt8, length: Index, bytesDeallocator: AllocatorRef, ) callconv(.C) ReadStreamRef;
pub const readStreamCreateWithBytesNoCopy = CFReadStreamCreateWithBytesNoCopy;

extern "CoreFoundation" fn CFWriteStreamCreateWithBuffer(alloc: AllocatorRef, buffer: ?*objc.UInt8, bufferCapacity: Index) callconv(.C) WriteStreamRef;
pub const writeStreamCreateWithBuffer = CFWriteStreamCreateWithBuffer;

extern "CoreFoundation" fn CFWriteStreamCreateWithAllocatedBuffers(alloc: AllocatorRef, bufferAllocator: AllocatorRef) callconv(.C) WriteStreamRef;
pub const writeStreamCreateWithAllocatedBuffers = CFWriteStreamCreateWithAllocatedBuffers;

extern "CoreFoundation" fn CFReadStreamCreateWithFile(alloc: AllocatorRef, fileURL: URLRef) callconv(.C) ReadStreamRef;
pub const readStreamCreateWithFile = CFReadStreamCreateWithFile;

extern "CoreFoundation" fn CFWriteStreamCreateWithFile(alloc: AllocatorRef, fileURL: URLRef) callconv(.C) WriteStreamRef;
pub const writeStreamCreateWithFile = CFWriteStreamCreateWithFile;

extern "CoreFoundation" fn CFStreamCreateBoundPair(alloc: AllocatorRef, readStream: ?*ReadStreamRef, writeStream: ?*WriteStreamRef, transferBufferSize: Index, ) callconv(.C) void;
pub const streamCreateBoundPair = CFStreamCreateBoundPair;

extern "CoreFoundation" fn CFStreamCreatePairWithSocket(alloc: AllocatorRef, sock: SocketNativeHandle, readStream: ?*ReadStreamRef, writeStream: ?*WriteStreamRef, ) callconv(.C) void;
pub const streamCreatePairWithSocket = CFStreamCreatePairWithSocket;

extern "CoreFoundation" fn CFStreamCreatePairWithSocketToHost(alloc: AllocatorRef, host: StringRef, port: objc.UInt32, readStream: ?*ReadStreamRef, writeStream: ?*WriteStreamRef, ) callconv(.C) void;
pub const streamCreatePairWithSocketToHost = CFStreamCreatePairWithSocketToHost;

extern "CoreFoundation" fn CFStreamCreatePairWithPeerSocketSignature(alloc: AllocatorRef, signature: ?*SocketSignature, readStream: ?*ReadStreamRef, writeStream: ?*WriteStreamRef, ) callconv(.C) void;
pub const streamCreatePairWithPeerSocketSignature = CFStreamCreatePairWithPeerSocketSignature;

extern "CoreFoundation" fn CFReadStreamGetStatus(stream: ReadStreamRef) callconv(.C) StreamStatus;
pub const readStreamGetStatus = CFReadStreamGetStatus;

extern "CoreFoundation" fn CFWriteStreamGetStatus(stream: WriteStreamRef) callconv(.C) StreamStatus;
pub const writeStreamGetStatus = CFWriteStreamGetStatus;

extern "CoreFoundation" fn CFReadStreamCopyError(stream: ReadStreamRef) callconv(.C) ErrorRef;
pub const readStreamCopyError = CFReadStreamCopyError;

extern "CoreFoundation" fn CFWriteStreamCopyError(stream: WriteStreamRef) callconv(.C) ErrorRef;
pub const writeStreamCopyError = CFWriteStreamCopyError;

extern "CoreFoundation" fn CFReadStreamOpen(stream: ReadStreamRef) callconv(.C) objc.Boolean;
pub const readStreamOpen = CFReadStreamOpen;

extern "CoreFoundation" fn CFWriteStreamOpen(stream: WriteStreamRef) callconv(.C) objc.Boolean;
pub const writeStreamOpen = CFWriteStreamOpen;

extern "CoreFoundation" fn CFReadStreamClose(stream: ReadStreamRef) callconv(.C) void;
pub const readStreamClose = CFReadStreamClose;

extern "CoreFoundation" fn CFWriteStreamClose(stream: WriteStreamRef) callconv(.C) void;
pub const writeStreamClose = CFWriteStreamClose;

extern "CoreFoundation" fn CFReadStreamHasBytesAvailable(stream: ReadStreamRef) callconv(.C) objc.Boolean;
pub const readStreamHasBytesAvailable = CFReadStreamHasBytesAvailable;

extern "CoreFoundation" fn CFReadStreamRead(stream: ReadStreamRef, buffer: ?*objc.UInt8, bufferLength: Index) callconv(.C) Index;
pub const readStreamRead = CFReadStreamRead;

extern "CoreFoundation" fn CFReadStreamGetBuffer(stream: ReadStreamRef, maxBytesToRead: Index, numBytesRead: ?*Index) callconv(.C) ?*objc.UInt8;
pub const readStreamGetBuffer = CFReadStreamGetBuffer;

extern "CoreFoundation" fn CFWriteStreamCanAcceptBytes(stream: WriteStreamRef) callconv(.C) objc.Boolean;
pub const writeStreamCanAcceptBytes = CFWriteStreamCanAcceptBytes;

extern "CoreFoundation" fn CFWriteStreamWrite(stream: WriteStreamRef, buffer: ?*objc.UInt8, bufferLength: Index) callconv(.C) Index;
pub const writeStreamWrite = CFWriteStreamWrite;

extern "CoreFoundation" fn CFReadStreamCopyProperty(stream: ReadStreamRef, propertyName: StreamPropertyKey) callconv(.C) TypeRef;
pub const readStreamCopyProperty = CFReadStreamCopyProperty;

extern "CoreFoundation" fn CFWriteStreamCopyProperty(stream: WriteStreamRef, propertyName: StreamPropertyKey) callconv(.C) TypeRef;
pub const writeStreamCopyProperty = CFWriteStreamCopyProperty;

extern "CoreFoundation" fn CFReadStreamSetProperty(stream: ReadStreamRef, propertyName: StreamPropertyKey, propertyValue: TypeRef) callconv(.C) objc.Boolean;
pub const readStreamSetProperty = CFReadStreamSetProperty;

extern "CoreFoundation" fn CFWriteStreamSetProperty(stream: WriteStreamRef, propertyName: StreamPropertyKey, propertyValue: TypeRef) callconv(.C) objc.Boolean;
pub const writeStreamSetProperty = CFWriteStreamSetProperty;

extern "CoreFoundation" fn CFReadStreamSetClient(stream: ReadStreamRef, streamEvents: OptionFlags, clientCB: ReadStreamClientCallBack, clientContext: ?*StreamClientContext, ) callconv(.C) objc.Boolean;
pub const readStreamSetClient = CFReadStreamSetClient;

extern "CoreFoundation" fn CFWriteStreamSetClient(stream: WriteStreamRef, streamEvents: OptionFlags, clientCB: WriteStreamClientCallBack, clientContext: ?*StreamClientContext, ) callconv(.C) objc.Boolean;
pub const writeStreamSetClient = CFWriteStreamSetClient;

extern "CoreFoundation" fn CFReadStreamScheduleWithRunLoop(stream: ReadStreamRef, runLoop: RunLoopRef, runLoopMode: RunLoopMode) callconv(.C) void;
pub const readStreamScheduleWithRunLoop = CFReadStreamScheduleWithRunLoop;

extern "CoreFoundation" fn CFWriteStreamScheduleWithRunLoop(stream: WriteStreamRef, runLoop: RunLoopRef, runLoopMode: RunLoopMode) callconv(.C) void;
pub const writeStreamScheduleWithRunLoop = CFWriteStreamScheduleWithRunLoop;

extern "CoreFoundation" fn CFReadStreamUnscheduleFromRunLoop(stream: ReadStreamRef, runLoop: RunLoopRef, runLoopMode: RunLoopMode) callconv(.C) void;
pub const readStreamUnscheduleFromRunLoop = CFReadStreamUnscheduleFromRunLoop;

extern "CoreFoundation" fn CFWriteStreamUnscheduleFromRunLoop(stream: WriteStreamRef, runLoop: RunLoopRef, runLoopMode: RunLoopMode) callconv(.C) void;
pub const writeStreamUnscheduleFromRunLoop = CFWriteStreamUnscheduleFromRunLoop;

extern "CoreFoundation" fn CFReadStreamSetDispatchQueue(stream: ReadStreamRef, q: objc.dispatch_queue_t) callconv(.C) void;
pub const readStreamSetDispatchQueue = CFReadStreamSetDispatchQueue;

extern "CoreFoundation" fn CFWriteStreamSetDispatchQueue(stream: WriteStreamRef, q: objc.dispatch_queue_t) callconv(.C) void;
pub const writeStreamSetDispatchQueue = CFWriteStreamSetDispatchQueue;

extern "CoreFoundation" fn CFReadStreamCopyDispatchQueue(stream: ReadStreamRef) callconv(.C) objc.dispatch_queue_t;
pub const readStreamCopyDispatchQueue = CFReadStreamCopyDispatchQueue;

extern "CoreFoundation" fn CFWriteStreamCopyDispatchQueue(stream: WriteStreamRef) callconv(.C) objc.dispatch_queue_t;
pub const writeStreamCopyDispatchQueue = CFWriteStreamCopyDispatchQueue;

pub const StreamErrorDomain = enum(Index) {
Custom = -1,
POSIX = 1,
MacOSStatus = 2,
};

extern "CoreFoundation" fn CFReadStreamGetError(stream: ReadStreamRef) callconv(.C) StreamError;
pub const readStreamGetError = CFReadStreamGetError;

extern "CoreFoundation" fn CFWriteStreamGetError(stream: WriteStreamRef) callconv(.C) StreamError;
pub const writeStreamGetError = CFWriteStreamGetError;

pub const PropertyListMutabilityOptions = enum(OptionFlags) {
Immutable = 0,
MutableContainers = 1,
MutableContainersAndLeaves = 2,
};

extern "CoreFoundation" fn CFPropertyListCreateFromXMLData(allocator: AllocatorRef, xmlData: DataRef, mutabilityOption: OptionFlags, errorString: ?*StringRef, ) callconv(.C) PropertyListRef;
pub const propertyListCreateFromXMLData = CFPropertyListCreateFromXMLData;

extern "CoreFoundation" fn CFPropertyListCreateXMLData(allocator: AllocatorRef, propertyList: PropertyListRef) callconv(.C) DataRef;
pub const propertyListCreateXMLData = CFPropertyListCreateXMLData;

extern "CoreFoundation" fn CFPropertyListCreateDeepCopy(allocator: AllocatorRef, propertyList: PropertyListRef, mutabilityOption: OptionFlags) callconv(.C) PropertyListRef;
pub const propertyListCreateDeepCopy = CFPropertyListCreateDeepCopy;

pub const PropertyListFormat = enum(Index) {
OpenStepFormat = 1,
XMLFormat_v1_0 = 100,
BinaryFormat_v1_0 = 200,
};

extern "CoreFoundation" fn CFPropertyListIsValid(plist: PropertyListRef, format: PropertyListFormat) callconv(.C) objc.Boolean;
pub const propertyListIsValid = CFPropertyListIsValid;

extern "CoreFoundation" fn CFPropertyListWriteToStream(propertyList: PropertyListRef, stream: WriteStreamRef, format: PropertyListFormat, errorString: ?*StringRef, ) callconv(.C) Index;
pub const propertyListWriteToStream = CFPropertyListWriteToStream;

extern "CoreFoundation" fn CFPropertyListCreateFromStream(allocator: AllocatorRef, stream: ReadStreamRef, streamLength: Index, mutabilityOption: OptionFlags, format: ?*PropertyListFormat, errorString: ?*StringRef, ) callconv(.C) PropertyListRef;
pub const propertyListCreateFromStream = CFPropertyListCreateFromStream;

pub const anon1211 = enum(OptionFlags) {
CFUserNotificationNoDefaultButtonFlag = 32,
CFUserNotificationUseRadioButtonsFlag = 64,
};

extern "CoreFoundation" fn CFPropertyListCreateWithData(allocator: AllocatorRef, data: DataRef, options: OptionFlags, format: ?*PropertyListFormat, @"error": ?*ErrorRef, ) callconv(.C) PropertyListRef;
pub const propertyListCreateWithData = CFPropertyListCreateWithData;

extern "CoreFoundation" fn CFPropertyListCreateWithStream(allocator: AllocatorRef, stream: ReadStreamRef, streamLength: Index, options: OptionFlags, format: ?*PropertyListFormat, @"error": ?*ErrorRef, ) callconv(.C) PropertyListRef;
pub const propertyListCreateWithStream = CFPropertyListCreateWithStream;

extern "CoreFoundation" fn CFPropertyListWrite(propertyList: PropertyListRef, stream: WriteStreamRef, format: PropertyListFormat, options: OptionFlags, @"error": ?*ErrorRef, ) callconv(.C) Index;
pub const propertyListWrite = CFPropertyListWrite;

extern "CoreFoundation" fn CFPropertyListCreateData(allocator: AllocatorRef, propertyList: PropertyListRef, format: PropertyListFormat, options: OptionFlags, @"error": ?*ErrorRef, ) callconv(.C) DataRef;
pub const propertyListCreateData = CFPropertyListCreateData;

pub const SetRetainCallBack = ?*const fn(AllocatorRef, ?*anyopaque) callconv(.C) ?*anyopaque;

pub const SetReleaseCallBack = ?*const fn(AllocatorRef, ?*anyopaque) callconv(.C) void;

pub const SetCopyDescriptionCallBack = ?*const fn(?*anyopaque) callconv(.C) StringRef;

pub const SetEqualCallBack = ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) objc.Boolean;

pub const SetHashCallBack = ?*const fn(?*anyopaque) callconv(.C) HashCode;

pub const SetCallBacks = extern struct {
    version: Index,
    retain: SetRetainCallBack,
    release: SetReleaseCallBack,
    copyDescription: SetCopyDescriptionCallBack,
    equal: SetEqualCallBack,
    hash: SetHashCallBack,
};

pub const SetApplierFunction = ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) void;

pub const __CFSet = extern struct {};

pub const SetRef = ?*__CFSet;

pub const MutableSetRef = ?*__CFSet;

extern "CoreFoundation" fn CFSetGetTypeID() callconv(.C) TypeID;
pub const setGetTypeID = CFSetGetTypeID;

extern "CoreFoundation" fn CFSetCreate(allocator: AllocatorRef, values: ?*?*anyopaque, numValues: Index, callBacks: ?*SetCallBacks, ) callconv(.C) SetRef;
pub const setCreate = CFSetCreate;

extern "CoreFoundation" fn CFSetCreateCopy(allocator: AllocatorRef, theSet: SetRef) callconv(.C) SetRef;
pub const setCreateCopy = CFSetCreateCopy;

extern "CoreFoundation" fn CFSetCreateMutable(allocator: AllocatorRef, capacity: Index, callBacks: ?*SetCallBacks) callconv(.C) MutableSetRef;
pub const setCreateMutable = CFSetCreateMutable;

extern "CoreFoundation" fn CFSetCreateMutableCopy(allocator: AllocatorRef, capacity: Index, theSet: SetRef) callconv(.C) MutableSetRef;
pub const setCreateMutableCopy = CFSetCreateMutableCopy;

extern "CoreFoundation" fn CFSetGetCount(theSet: SetRef) callconv(.C) Index;
pub const setGetCount = CFSetGetCount;

extern "CoreFoundation" fn CFSetGetCountOfValue(theSet: SetRef, value: ?*anyopaque) callconv(.C) Index;
pub const setGetCountOfValue = CFSetGetCountOfValue;

extern "CoreFoundation" fn CFSetContainsValue(theSet: SetRef, value: ?*anyopaque) callconv(.C) objc.Boolean;
pub const setContainsValue = CFSetContainsValue;

extern "CoreFoundation" fn CFSetGetValue(theSet: SetRef, value: ?*anyopaque) callconv(.C) ?*anyopaque;
pub const setGetValue = CFSetGetValue;

extern "CoreFoundation" fn CFSetGetValueIfPresent(theSet: SetRef, candidate: ?*anyopaque, value: ?*?*anyopaque) callconv(.C) objc.Boolean;
pub const setGetValueIfPresent = CFSetGetValueIfPresent;

extern "CoreFoundation" fn CFSetGetValues(theSet: SetRef, values: ?*?*anyopaque) callconv(.C) void;
pub const setGetValues = CFSetGetValues;

extern "CoreFoundation" fn CFSetApplyFunction(theSet: SetRef, applier: SetApplierFunction, context: ?*anyopaque) callconv(.C) void;
pub const setApplyFunction = CFSetApplyFunction;

extern "CoreFoundation" fn CFSetAddValue(theSet: MutableSetRef, value: ?*anyopaque) callconv(.C) void;
pub const setAddValue = CFSetAddValue;

extern "CoreFoundation" fn CFSetReplaceValue(theSet: MutableSetRef, value: ?*anyopaque) callconv(.C) void;
pub const setReplaceValue = CFSetReplaceValue;

extern "CoreFoundation" fn CFSetSetValue(theSet: MutableSetRef, value: ?*anyopaque) callconv(.C) void;
pub const setSetValue = CFSetSetValue;

extern "CoreFoundation" fn CFSetRemoveValue(theSet: MutableSetRef, value: ?*anyopaque) callconv(.C) void;
pub const setRemoveValue = CFSetRemoveValue;

extern "CoreFoundation" fn CFSetRemoveAllValues(theSet: MutableSetRef) callconv(.C) void;
pub const setRemoveAllValues = CFSetRemoveAllValues;

pub const StringEncodings = enum(Index) {
MacJapanese = 1,
MacChineseTrad = 2,
MacKorean = 3,
MacArabic = 4,
MacHebrew = 5,
MacGreek = 6,
MacCyrillic = 7,
MacDevanagari = 9,
MacGurmukhi = 10,
MacGujarati = 11,
MacOriya = 12,
MacBengali = 13,
MacTamil = 14,
MacTelugu = 15,
MacKannada = 16,
MacMalayalam = 17,
MacSinhalese = 18,
MacBurmese = 19,
MacKhmer = 20,
MacThai = 21,
MacLaotian = 22,
MacGeorgian = 23,
MacArmenian = 24,
MacChineseSimp = 25,
MacTibetan = 26,
MacMongolian = 27,
MacEthiopic = 28,
MacCentralEurRoman = 29,
MacVietnamese = 30,
MacExtArabic = 31,
MacSymbol = 33,
MacDingbats = 34,
MacTurkish = 35,
MacCroatian = 36,
MacIcelandic = 37,
MacRomanian = 38,
MacCeltic = 39,
MacGaelic = 40,
MacFarsi = 140,
MacUkrainian = 152,
MacInuit = 236,
MacVT100 = 252,
MacHFS = 255,
ISOLatin2 = 514,
ISOLatin3 = 515,
ISOLatin4 = 516,
ISOLatinCyrillic = 517,
ISOLatinArabic = 518,
ISOLatinGreek = 519,
ISOLatinHebrew = 520,
ISOLatin5 = 521,
ISOLatin6 = 522,
ISOLatinThai = 523,
ISOLatin7 = 525,
ISOLatin8 = 526,
ISOLatin9 = 527,
ISOLatin10 = 528,
DOSLatinUS = 1024,
DOSGreek = 1029,
DOSBalticRim = 1030,
DOSLatin1 = 1040,
DOSGreek1 = 1041,
DOSLatin2 = 1042,
DOSCyrillic = 1043,
DOSTurkish = 1044,
DOSPortuguese = 1045,
DOSIcelandic = 1046,
DOSHebrew = 1047,
DOSCanadianFrench = 1048,
DOSArabic = 1049,
DOSNordic = 1050,
DOSRussian = 1051,
DOSGreek2 = 1052,
DOSThai = 1053,
DOSJapanese = 1056,
DOSChineseSimplif = 1057,
DOSKorean = 1058,
DOSChineseTrad = 1059,
WindowsLatin2 = 1281,
WindowsCyrillic = 1282,
WindowsGreek = 1283,
WindowsLatin5 = 1284,
WindowsHebrew = 1285,
WindowsArabic = 1286,
WindowsBalticRim = 1287,
WindowsVietnamese = 1288,
WindowsKoreanJohab = 1296,
ANSEL = 1537,
JIS_X0201_76 = 1568,
JIS_X0208_83 = 1569,
JIS_X0208_90 = 1570,
JIS_X0212_90 = 1571,
JIS_C6226_78 = 1572,
ShiftJIS_X0213 = 1576,
ShiftJIS_X0213_MenKuTen = 1577,
GB_2312_80 = 1584,
GBK_95 = 1585,
GB_18030_2000 = 1586,
KSC_5601_87 = 1600,
KSC_5601_92_Johab = 1601,
CNS_11643_92_P1 = 1617,
CNS_11643_92_P2 = 1618,
CNS_11643_92_P3 = 1619,
ISO_2022_JP = 2080,
ISO_2022_JP_2 = 2081,
ISO_2022_JP_1 = 2082,
ISO_2022_JP_3 = 2083,
ISO_2022_CN = 2096,
ISO_2022_CN_EXT = 2097,
ISO_2022_KR = 2112,
EUC_JP = 2336,
EUC_CN = 2352,
EUC_TW = 2353,
EUC_KR = 2368,
ShiftJIS = 2561,
KOI8_R = 2562,
Big5 = 2563,
MacRomanLatin1 = 2564,
HZ_GB_2312 = 2565,
Big5_HKSCS_1999 = 2566,
VISCII = 2567,
KOI8_U = 2568,
Big5_E = 2569,
NextStepJapanese = 2818,
EBCDIC_US = 3073,
EBCDIC_CP037 = 3074,
UTF7 = 67109120,
UTF7_IMAP = 2576,
ShiftJIS_X0213_00 = 1576,
};

pub const TreeRetainCallBack = ?*const fn(?*anyopaque) callconv(.C) ?*anyopaque;

pub const TreeReleaseCallBack = ?*const fn(?*anyopaque) callconv(.C) void;

pub const TreeCopyDescriptionCallBack = ?*const fn(?*anyopaque) callconv(.C) StringRef;

pub const TreeContext = extern struct {
    version: Index,
    info: ?*anyopaque,
    retain: TreeRetainCallBack,
    release: TreeReleaseCallBack,
    copyDescription: TreeCopyDescriptionCallBack,
};

pub const TreeApplierFunction = ?*const fn(?*anyopaque, ?*anyopaque) callconv(.C) void;

pub const __CFTree = extern struct {};

pub const TreeRef = ?*__CFTree;

extern "CoreFoundation" fn CFTreeGetTypeID() callconv(.C) TypeID;
pub const treeGetTypeID = CFTreeGetTypeID;

extern "CoreFoundation" fn CFTreeCreate(allocator: AllocatorRef, context: ?*TreeContext) callconv(.C) TreeRef;
pub const treeCreate = CFTreeCreate;

extern "CoreFoundation" fn CFTreeGetParent(tree: TreeRef) callconv(.C) TreeRef;
pub const treeGetParent = CFTreeGetParent;

extern "CoreFoundation" fn CFTreeGetNextSibling(tree: TreeRef) callconv(.C) TreeRef;
pub const treeGetNextSibling = CFTreeGetNextSibling;

extern "CoreFoundation" fn CFTreeGetFirstChild(tree: TreeRef) callconv(.C) TreeRef;
pub const treeGetFirstChild = CFTreeGetFirstChild;

extern "CoreFoundation" fn CFTreeGetContext(tree: TreeRef, context: ?*TreeContext) callconv(.C) void;
pub const treeGetContext = CFTreeGetContext;

extern "CoreFoundation" fn CFTreeGetChildCount(tree: TreeRef) callconv(.C) Index;
pub const treeGetChildCount = CFTreeGetChildCount;

extern "CoreFoundation" fn CFTreeGetChildAtIndex(tree: TreeRef, idx: Index) callconv(.C) TreeRef;
pub const treeGetChildAtIndex = CFTreeGetChildAtIndex;

extern "CoreFoundation" fn CFTreeGetChildren(tree: TreeRef, children: ?*TreeRef) callconv(.C) void;
pub const treeGetChildren = CFTreeGetChildren;

extern "CoreFoundation" fn CFTreeApplyFunctionToChildren(tree: TreeRef, applier: TreeApplierFunction, context: ?*anyopaque) callconv(.C) void;
pub const treeApplyFunctionToChildren = CFTreeApplyFunctionToChildren;

extern "CoreFoundation" fn CFTreeFindRoot(tree: TreeRef) callconv(.C) TreeRef;
pub const treeFindRoot = CFTreeFindRoot;

extern "CoreFoundation" fn CFTreeSetContext(tree: TreeRef, context: ?*TreeContext) callconv(.C) void;
pub const treeSetContext = CFTreeSetContext;

extern "CoreFoundation" fn CFTreePrependChild(tree: TreeRef, newChild: TreeRef) callconv(.C) void;
pub const treePrependChild = CFTreePrependChild;

extern "CoreFoundation" fn CFTreeAppendChild(tree: TreeRef, newChild: TreeRef) callconv(.C) void;
pub const treeAppendChild = CFTreeAppendChild;

extern "CoreFoundation" fn CFTreeInsertSibling(tree: TreeRef, newSibling: TreeRef) callconv(.C) void;
pub const treeInsertSibling = CFTreeInsertSibling;

extern "CoreFoundation" fn CFTreeRemove(tree: TreeRef) callconv(.C) void;
pub const treeRemove = CFTreeRemove;

extern "CoreFoundation" fn CFTreeRemoveAllChildren(tree: TreeRef) callconv(.C) void;
pub const treeRemoveAllChildren = CFTreeRemoveAllChildren;

extern "CoreFoundation" fn CFTreeSortChildren(tree: TreeRef, comparator: ComparatorFunction, context: ?*anyopaque) callconv(.C) void;
pub const treeSortChildren = CFTreeSortChildren;

extern "CoreFoundation" fn CFURLCreateDataAndPropertiesFromResource(alloc: AllocatorRef, url: URLRef, resourceData: ?*DataRef, properties: ?*DictionaryRef, desiredProperties: ArrayRef, errorCode: ?*objc.SInt32, ) callconv(.C) objc.Boolean;
pub const urlCreateDataAndPropertiesFromResource = CFURLCreateDataAndPropertiesFromResource;

extern "CoreFoundation" fn CFURLWriteDataAndPropertiesToResource(url: URLRef, dataToWrite: DataRef, propertiesToWrite: DictionaryRef, errorCode: ?*objc.SInt32, ) callconv(.C) objc.Boolean;
pub const urlWriteDataAndPropertiesToResource = CFURLWriteDataAndPropertiesToResource;

extern "CoreFoundation" fn CFURLDestroyResource(url: URLRef, errorCode: ?*objc.SInt32) callconv(.C) objc.Boolean;
pub const urlDestroyResource = CFURLDestroyResource;

extern "CoreFoundation" fn CFURLCreatePropertyFromResource(alloc: AllocatorRef, url: URLRef, property: StringRef, errorCode: ?*objc.SInt32, ) callconv(.C) TypeRef;
pub const urlCreatePropertyFromResource = CFURLCreatePropertyFromResource;

pub const URLError = enum(Index) {
UnknownError = -10,
UnknownSchemeError = -11,
ResourceNotFoundError = -12,
ResourceAccessViolationError = -13,
RemoteHostUnavailableError = -14,
ImproperArgumentsError = -15,
UnknownPropertyKeyError = -16,
PropertyKeyUnavailableError = -17,
TimeoutError = -18,
};

pub const __CFUUID = extern struct {};

pub const UUIDRef = ?*__CFUUID;

pub const UUIDBytes = extern struct {
    byte0: objc.UInt8,
    byte1: objc.UInt8,
    byte2: objc.UInt8,
    byte3: objc.UInt8,
    byte4: objc.UInt8,
    byte5: objc.UInt8,
    byte6: objc.UInt8,
    byte7: objc.UInt8,
    byte8: objc.UInt8,
    byte9: objc.UInt8,
    byte10: objc.UInt8,
    byte11: objc.UInt8,
    byte12: objc.UInt8,
    byte13: objc.UInt8,
    byte14: objc.UInt8,
    byte15: objc.UInt8,
};

extern "CoreFoundation" fn CFUUIDGetTypeID() callconv(.C) TypeID;
pub const uuidGetTypeID = CFUUIDGetTypeID;

extern "CoreFoundation" fn CFUUIDCreate(alloc: AllocatorRef) callconv(.C) UUIDRef;
pub const uuidCreate = CFUUIDCreate;

extern "CoreFoundation" fn CFUUIDCreateWithBytes(alloc: AllocatorRef, byte0: objc.UInt8, byte1: objc.UInt8, byte2: objc.UInt8, byte3: objc.UInt8, byte4: objc.UInt8, byte5: objc.UInt8, byte6: objc.UInt8, byte7: objc.UInt8, byte8: objc.UInt8, byte9: objc.UInt8, byte10: objc.UInt8, byte11: objc.UInt8, byte12: objc.UInt8, byte13: objc.UInt8, byte14: objc.UInt8, byte15: objc.UInt8, ) callconv(.C) UUIDRef;
pub const uuidCreateWithBytes = CFUUIDCreateWithBytes;

extern "CoreFoundation" fn CFUUIDCreateFromString(alloc: AllocatorRef, uuidStr: StringRef) callconv(.C) UUIDRef;
pub const uuidCreateFromString = CFUUIDCreateFromString;

extern "CoreFoundation" fn CFUUIDCreateString(alloc: AllocatorRef, uuid: UUIDRef) callconv(.C) StringRef;
pub const uuidCreateString = CFUUIDCreateString;

extern "CoreFoundation" fn CFUUIDGetConstantUUIDWithBytes(alloc: AllocatorRef, byte0: objc.UInt8, byte1: objc.UInt8, byte2: objc.UInt8, byte3: objc.UInt8, byte4: objc.UInt8, byte5: objc.UInt8, byte6: objc.UInt8, byte7: objc.UInt8, byte8: objc.UInt8, byte9: objc.UInt8, byte10: objc.UInt8, byte11: objc.UInt8, byte12: objc.UInt8, byte13: objc.UInt8, byte14: objc.UInt8, byte15: objc.UInt8, ) callconv(.C) UUIDRef;
pub const uuidGetConstantUUIDWithBytes = CFUUIDGetConstantUUIDWithBytes;

extern "CoreFoundation" fn CFUUIDGetUUIDBytes(uuid: UUIDRef) callconv(.C) UUIDBytes;
pub const uuidGetUUIDBytes = CFUUIDGetUUIDBytes;

extern "CoreFoundation" fn CFUUIDCreateFromUUIDBytes(alloc: AllocatorRef, bytes: UUIDBytes) callconv(.C) UUIDRef;
pub const uuidCreateFromUUIDBytes = CFUUIDCreateFromUUIDBytes;

extern "CoreFoundation" fn CFCopyHomeDirectoryURL() callconv(.C) URLRef;
pub const copyHomeDirectoryURL = CFCopyHomeDirectoryURL;

pub const __CFBundle = extern struct {};

pub const BundleRef = ?*__CFBundle;

pub const PlugInRef = ?*__CFBundle;

extern "CoreFoundation" fn CFBundleGetMainBundle() callconv(.C) BundleRef;
pub const bundleGetMainBundle = CFBundleGetMainBundle;

extern "CoreFoundation" fn CFBundleGetBundleWithIdentifier(bundleID: StringRef) callconv(.C) BundleRef;
pub const bundleGetBundleWithIdentifier = CFBundleGetBundleWithIdentifier;

extern "CoreFoundation" fn CFBundleGetAllBundles() callconv(.C) ArrayRef;
pub const bundleGetAllBundles = CFBundleGetAllBundles;

extern "CoreFoundation" fn CFBundleGetTypeID() callconv(.C) TypeID;
pub const bundleGetTypeID = CFBundleGetTypeID;

extern "CoreFoundation" fn CFBundleCreate(allocator: AllocatorRef, bundleURL: URLRef) callconv(.C) BundleRef;
pub const bundleCreate = CFBundleCreate;

extern "CoreFoundation" fn CFBundleCreateBundlesFromDirectory(allocator: AllocatorRef, directoryURL: URLRef, bundleType: StringRef) callconv(.C) ArrayRef;
pub const bundleCreateBundlesFromDirectory = CFBundleCreateBundlesFromDirectory;

extern "CoreFoundation" fn CFBundleCopyBundleURL(bundle: BundleRef) callconv(.C) URLRef;
pub const bundleCopyBundleURL = CFBundleCopyBundleURL;

extern "CoreFoundation" fn CFBundleGetValueForInfoDictionaryKey(bundle: BundleRef, key: StringRef) callconv(.C) TypeRef;
pub const bundleGetValueForInfoDictionaryKey = CFBundleGetValueForInfoDictionaryKey;

extern "CoreFoundation" fn CFBundleGetInfoDictionary(bundle: BundleRef) callconv(.C) DictionaryRef;
pub const bundleGetInfoDictionary = CFBundleGetInfoDictionary;

extern "CoreFoundation" fn CFBundleGetLocalInfoDictionary(bundle: BundleRef) callconv(.C) DictionaryRef;
pub const bundleGetLocalInfoDictionary = CFBundleGetLocalInfoDictionary;

extern "CoreFoundation" fn CFBundleGetPackageInfo(bundle: BundleRef, packageType: ?*objc.UInt32, packageCreator: ?*objc.UInt32) callconv(.C) void;
pub const bundleGetPackageInfo = CFBundleGetPackageInfo;

extern "CoreFoundation" fn CFBundleGetIdentifier(bundle: BundleRef) callconv(.C) StringRef;
pub const bundleGetIdentifier = CFBundleGetIdentifier;

extern "CoreFoundation" fn CFBundleGetVersionNumber(bundle: BundleRef) callconv(.C) objc.UInt32;
pub const bundleGetVersionNumber = CFBundleGetVersionNumber;

extern "CoreFoundation" fn CFBundleGetDevelopmentRegion(bundle: BundleRef) callconv(.C) StringRef;
pub const bundleGetDevelopmentRegion = CFBundleGetDevelopmentRegion;

extern "CoreFoundation" fn CFBundleCopySupportFilesDirectoryURL(bundle: BundleRef) callconv(.C) URLRef;
pub const bundleCopySupportFilesDirectoryURL = CFBundleCopySupportFilesDirectoryURL;

extern "CoreFoundation" fn CFBundleCopyResourcesDirectoryURL(bundle: BundleRef) callconv(.C) URLRef;
pub const bundleCopyResourcesDirectoryURL = CFBundleCopyResourcesDirectoryURL;

extern "CoreFoundation" fn CFBundleCopyPrivateFrameworksURL(bundle: BundleRef) callconv(.C) URLRef;
pub const bundleCopyPrivateFrameworksURL = CFBundleCopyPrivateFrameworksURL;

extern "CoreFoundation" fn CFBundleCopySharedFrameworksURL(bundle: BundleRef) callconv(.C) URLRef;
pub const bundleCopySharedFrameworksURL = CFBundleCopySharedFrameworksURL;

extern "CoreFoundation" fn CFBundleCopySharedSupportURL(bundle: BundleRef) callconv(.C) URLRef;
pub const bundleCopySharedSupportURL = CFBundleCopySharedSupportURL;

extern "CoreFoundation" fn CFBundleCopyBuiltInPlugInsURL(bundle: BundleRef) callconv(.C) URLRef;
pub const bundleCopyBuiltInPlugInsURL = CFBundleCopyBuiltInPlugInsURL;

extern "CoreFoundation" fn CFBundleCopyInfoDictionaryInDirectory(bundleURL: URLRef) callconv(.C) DictionaryRef;
pub const bundleCopyInfoDictionaryInDirectory = CFBundleCopyInfoDictionaryInDirectory;

extern "CoreFoundation" fn CFBundleGetPackageInfoInDirectory(url: URLRef, packageType: ?*objc.UInt32, packageCreator: ?*objc.UInt32) callconv(.C) objc.Boolean;
pub const bundleGetPackageInfoInDirectory = CFBundleGetPackageInfoInDirectory;

extern "CoreFoundation" fn CFBundleCopyResourceURL(bundle: BundleRef, resourceName: StringRef, resourceType: StringRef, subDirName: StringRef, ) callconv(.C) URLRef;
pub const bundleCopyResourceURL = CFBundleCopyResourceURL;

extern "CoreFoundation" fn CFBundleCopyResourceURLsOfType(bundle: BundleRef, resourceType: StringRef, subDirName: StringRef) callconv(.C) ArrayRef;
pub const bundleCopyResourceURLsOfType = CFBundleCopyResourceURLsOfType;

extern "CoreFoundation" fn CFBundleCopyLocalizedString(bundle: BundleRef, key: StringRef, value: StringRef, tableName: StringRef, ) callconv(.C) StringRef;
pub const bundleCopyLocalizedString = CFBundleCopyLocalizedString;

extern "CoreFoundation" fn CFBundleCopyResourceURLInDirectory(bundleURL: URLRef, resourceName: StringRef, resourceType: StringRef, subDirName: StringRef, ) callconv(.C) URLRef;
pub const bundleCopyResourceURLInDirectory = CFBundleCopyResourceURLInDirectory;

extern "CoreFoundation" fn CFBundleCopyResourceURLsOfTypeInDirectory(bundleURL: URLRef, resourceType: StringRef, subDirName: StringRef) callconv(.C) ArrayRef;
pub const bundleCopyResourceURLsOfTypeInDirectory = CFBundleCopyResourceURLsOfTypeInDirectory;

extern "CoreFoundation" fn CFBundleCopyBundleLocalizations(bundle: BundleRef) callconv(.C) ArrayRef;
pub const bundleCopyBundleLocalizations = CFBundleCopyBundleLocalizations;

extern "CoreFoundation" fn CFBundleCopyPreferredLocalizationsFromArray(locArray: ArrayRef) callconv(.C) ArrayRef;
pub const bundleCopyPreferredLocalizationsFromArray = CFBundleCopyPreferredLocalizationsFromArray;

extern "CoreFoundation" fn CFBundleCopyLocalizationsForPreferences(locArray: ArrayRef, prefArray: ArrayRef) callconv(.C) ArrayRef;
pub const bundleCopyLocalizationsForPreferences = CFBundleCopyLocalizationsForPreferences;

extern "CoreFoundation" fn CFBundleCopyResourceURLForLocalization(bundle: BundleRef, resourceName: StringRef, resourceType: StringRef, subDirName: StringRef, localizationName: StringRef, ) callconv(.C) URLRef;
pub const bundleCopyResourceURLForLocalization = CFBundleCopyResourceURLForLocalization;

extern "CoreFoundation" fn CFBundleCopyResourceURLsOfTypeForLocalization(bundle: BundleRef, resourceType: StringRef, subDirName: StringRef, localizationName: StringRef, ) callconv(.C) ArrayRef;
pub const bundleCopyResourceURLsOfTypeForLocalization = CFBundleCopyResourceURLsOfTypeForLocalization;

extern "CoreFoundation" fn CFBundleCopyInfoDictionaryForURL(url: URLRef) callconv(.C) DictionaryRef;
pub const bundleCopyInfoDictionaryForURL = CFBundleCopyInfoDictionaryForURL;

extern "CoreFoundation" fn CFBundleCopyLocalizationsForURL(url: URLRef) callconv(.C) ArrayRef;
pub const bundleCopyLocalizationsForURL = CFBundleCopyLocalizationsForURL;

extern "CoreFoundation" fn CFBundleCopyExecutableArchitecturesForURL(url: URLRef) callconv(.C) ArrayRef;
pub const bundleCopyExecutableArchitecturesForURL = CFBundleCopyExecutableArchitecturesForURL;

extern "CoreFoundation" fn CFBundleCopyExecutableURL(bundle: BundleRef) callconv(.C) URLRef;
pub const bundleCopyExecutableURL = CFBundleCopyExecutableURL;

pub const anon2441 = enum(u32) {
CFBundleExecutableArchitectureI386 = 7,
CFBundleExecutableArchitecturePPC = 18,
CFBundleExecutableArchitectureX86_64 = 16777223,
CFBundleExecutableArchitecturePPC64 = 16777234,
CFBundleExecutableArchitectureARM64 = 16777228,
};

extern "CoreFoundation" fn CFBundleCopyExecutableArchitectures(bundle: BundleRef) callconv(.C) ArrayRef;
pub const bundleCopyExecutableArchitectures = CFBundleCopyExecutableArchitectures;

extern "CoreFoundation" fn CFBundlePreflightExecutable(bundle: BundleRef, @"error": ?*ErrorRef) callconv(.C) objc.Boolean;
pub const bundlePreflightExecutable = CFBundlePreflightExecutable;

extern "CoreFoundation" fn CFBundleLoadExecutableAndReturnError(bundle: BundleRef, @"error": ?*ErrorRef) callconv(.C) objc.Boolean;
pub const bundleLoadExecutableAndReturnError = CFBundleLoadExecutableAndReturnError;

extern "CoreFoundation" fn CFBundleLoadExecutable(bundle: BundleRef) callconv(.C) objc.Boolean;
pub const bundleLoadExecutable = CFBundleLoadExecutable;

extern "CoreFoundation" fn CFBundleIsExecutableLoaded(bundle: BundleRef) callconv(.C) objc.Boolean;
pub const bundleIsExecutableLoaded = CFBundleIsExecutableLoaded;

extern "CoreFoundation" fn CFBundleUnloadExecutable(bundle: BundleRef) callconv(.C) void;
pub const bundleUnloadExecutable = CFBundleUnloadExecutable;

extern "CoreFoundation" fn CFBundleGetFunctionPointerForName(bundle: BundleRef, functionName: StringRef) callconv(.C) ?*anyopaque;
pub const bundleGetFunctionPointerForName = CFBundleGetFunctionPointerForName;

extern "CoreFoundation" fn CFBundleGetFunctionPointersForNames(bundle: BundleRef, functionNames: ArrayRef, ftbl: *?*anyopaque) callconv(.C) void;
pub const bundleGetFunctionPointersForNames = CFBundleGetFunctionPointersForNames;

extern "CoreFoundation" fn CFBundleGetDataPointerForName(bundle: BundleRef, symbolName: StringRef) callconv(.C) ?*anyopaque;
pub const bundleGetDataPointerForName = CFBundleGetDataPointerForName;

extern "CoreFoundation" fn CFBundleGetDataPointersForNames(bundle: BundleRef, symbolNames: ArrayRef, stbl: *?*anyopaque) callconv(.C) void;
pub const bundleGetDataPointersForNames = CFBundleGetDataPointersForNames;

extern "CoreFoundation" fn CFBundleCopyAuxiliaryExecutableURL(bundle: BundleRef, executableName: StringRef) callconv(.C) URLRef;
pub const bundleCopyAuxiliaryExecutableURL = CFBundleCopyAuxiliaryExecutableURL;

extern "CoreFoundation" fn CFBundleIsExecutableLoadable(bundle: BundleRef) callconv(.C) objc.Boolean;
pub const bundleIsExecutableLoadable = CFBundleIsExecutableLoadable;

extern "CoreFoundation" fn CFBundleIsExecutableLoadableForURL(url: URLRef) callconv(.C) objc.Boolean;
pub const bundleIsExecutableLoadableForURL = CFBundleIsExecutableLoadableForURL;

extern "CoreFoundation" fn CFBundleIsArchitectureLoadable(arch: objc.cpu_type_t) callconv(.C) objc.Boolean;
pub const bundleIsArchitectureLoadable = CFBundleIsArchitectureLoadable;

extern "CoreFoundation" fn CFBundleGetPlugIn(bundle: BundleRef) callconv(.C) PlugInRef;
pub const bundleGetPlugIn = CFBundleGetPlugIn;

pub const BundleRefNum = i32;

extern "CoreFoundation" fn CFBundleOpenBundleResourceMap(bundle: BundleRef) callconv(.C) BundleRefNum;
pub const bundleOpenBundleResourceMap = CFBundleOpenBundleResourceMap;

extern "CoreFoundation" fn CFBundleOpenBundleResourceFiles(bundle: BundleRef, refNum: ?*BundleRefNum, localizedRefNum: ?*BundleRefNum) callconv(.C) objc.SInt32;
pub const bundleOpenBundleResourceFiles = CFBundleOpenBundleResourceFiles;

extern "CoreFoundation" fn CFBundleCloseBundleResourceMap(bundle: BundleRef, refNum: BundleRefNum) callconv(.C) void;
pub const bundleCloseBundleResourceMap = CFBundleCloseBundleResourceMap;

pub const __CFMessagePort = extern struct {};

pub const MessagePortRef = ?*__CFMessagePort;

pub const anon231 = enum(objc.SInt32) {
CFMessagePortSuccess = 0,
CFMessagePortSendTimeout = -1,
CFMessagePortReceiveTimeout = -2,
CFMessagePortIsInvalid = -3,
CFMessagePortTransportError = -4,
CFMessagePortBecameInvalidError = -5,
};

pub const MessagePortContext = extern struct {
    version: Index,
    info: ?*anyopaque,
    retain: ?*const fn(?*anyopaque) callconv(.C) ?*anyopaque,
    release: ?*const fn(?*anyopaque) callconv(.C) void,
    copyDescription: ?*const fn(?*anyopaque) callconv(.C) StringRef,
};

pub const MessagePortCallBack = ?*const fn(MessagePortRef, objc.SInt32, DataRef, ?*anyopaque, ) callconv(.C) DataRef;

pub const MessagePortInvalidationCallBack = ?*const fn(MessagePortRef, ?*anyopaque) callconv(.C) void;

extern "CoreFoundation" fn CFMessagePortGetTypeID() callconv(.C) TypeID;
pub const messagePortGetTypeID = CFMessagePortGetTypeID;

extern "CoreFoundation" fn CFMessagePortCreateLocal(allocator: AllocatorRef, name: StringRef, callout: MessagePortCallBack, context: ?*MessagePortContext, shouldFreeInfo: ?*objc.Boolean, ) callconv(.C) MessagePortRef;
pub const messagePortCreateLocal = CFMessagePortCreateLocal;

extern "CoreFoundation" fn CFMessagePortCreateRemote(allocator: AllocatorRef, name: StringRef) callconv(.C) MessagePortRef;
pub const messagePortCreateRemote = CFMessagePortCreateRemote;

extern "CoreFoundation" fn CFMessagePortIsRemote(ms: MessagePortRef) callconv(.C) objc.Boolean;
pub const messagePortIsRemote = CFMessagePortIsRemote;

extern "CoreFoundation" fn CFMessagePortGetName(ms: MessagePortRef) callconv(.C) StringRef;
pub const messagePortGetName = CFMessagePortGetName;

extern "CoreFoundation" fn CFMessagePortSetName(ms: MessagePortRef, newName: StringRef) callconv(.C) objc.Boolean;
pub const messagePortSetName = CFMessagePortSetName;

extern "CoreFoundation" fn CFMessagePortGetContext(ms: MessagePortRef, context: ?*MessagePortContext) callconv(.C) void;
pub const messagePortGetContext = CFMessagePortGetContext;

extern "CoreFoundation" fn CFMessagePortInvalidate(ms: MessagePortRef) callconv(.C) void;
pub const messagePortInvalidate = CFMessagePortInvalidate;

extern "CoreFoundation" fn CFMessagePortIsValid(ms: MessagePortRef) callconv(.C) objc.Boolean;
pub const messagePortIsValid = CFMessagePortIsValid;

extern "CoreFoundation" fn CFMessagePortGetInvalidationCallBack(ms: MessagePortRef) callconv(.C) MessagePortInvalidationCallBack;
pub const messagePortGetInvalidationCallBack = CFMessagePortGetInvalidationCallBack;

extern "CoreFoundation" fn CFMessagePortSetInvalidationCallBack(ms: MessagePortRef, callout: MessagePortInvalidationCallBack) callconv(.C) void;
pub const messagePortSetInvalidationCallBack = CFMessagePortSetInvalidationCallBack;

extern "CoreFoundation" fn CFMessagePortSendRequest(remote: MessagePortRef, msgid: objc.SInt32, data: DataRef, sendTimeout: TimeInterval, rcvTimeout: TimeInterval, replyMode: StringRef, returnData: ?*DataRef, ) callconv(.C) objc.SInt32;
pub const messagePortSendRequest = CFMessagePortSendRequest;

extern "CoreFoundation" fn CFMessagePortCreateRunLoopSource(allocator: AllocatorRef, local: MessagePortRef, order: Index) callconv(.C) RunLoopSourceRef;
pub const messagePortCreateRunLoopSource = CFMessagePortCreateRunLoopSource;

extern "CoreFoundation" fn CFMessagePortSetDispatchQueue(ms: MessagePortRef, queue: objc.dispatch_queue_t) callconv(.C) void;
pub const messagePortSetDispatchQueue = CFMessagePortSetDispatchQueue;

pub const PlugInDynamicRegisterFunction = ?*const fn(PlugInRef) callconv(.C) void;

pub const PlugInUnloadFunction = ?*const fn(PlugInRef) callconv(.C) void;

pub const PlugInFactoryFunction = ?*const fn(AllocatorRef, UUIDRef) callconv(.C) ?*anyopaque;

extern "CoreFoundation" fn CFPlugInGetTypeID() callconv(.C) TypeID;
pub const plugInGetTypeID = CFPlugInGetTypeID;

extern "CoreFoundation" fn CFPlugInCreate(allocator: AllocatorRef, plugInURL: URLRef) callconv(.C) PlugInRef;
pub const plugInCreate = CFPlugInCreate;

extern "CoreFoundation" fn CFPlugInGetBundle(plugIn: PlugInRef) callconv(.C) BundleRef;
pub const plugInGetBundle = CFPlugInGetBundle;

extern "CoreFoundation" fn CFPlugInSetLoadOnDemand(plugIn: PlugInRef, flag: objc.Boolean) callconv(.C) void;
pub const plugInSetLoadOnDemand = CFPlugInSetLoadOnDemand;

extern "CoreFoundation" fn CFPlugInIsLoadOnDemand(plugIn: PlugInRef) callconv(.C) objc.Boolean;
pub const plugInIsLoadOnDemand = CFPlugInIsLoadOnDemand;

extern "CoreFoundation" fn CFPlugInFindFactoriesForPlugInType(typeUUID: UUIDRef) callconv(.C) ArrayRef;
pub const plugInFindFactoriesForPlugInType = CFPlugInFindFactoriesForPlugInType;

extern "CoreFoundation" fn CFPlugInFindFactoriesForPlugInTypeInPlugIn(typeUUID: UUIDRef, plugIn: PlugInRef) callconv(.C) ArrayRef;
pub const plugInFindFactoriesForPlugInTypeInPlugIn = CFPlugInFindFactoriesForPlugInTypeInPlugIn;

extern "CoreFoundation" fn CFPlugInInstanceCreate(allocator: AllocatorRef, factoryUUID: UUIDRef, typeUUID: UUIDRef) callconv(.C) ?*anyopaque;
pub const plugInInstanceCreate = CFPlugInInstanceCreate;

extern "CoreFoundation" fn CFPlugInRegisterFactoryFunction(factoryUUID: UUIDRef, func: PlugInFactoryFunction) callconv(.C) objc.Boolean;
pub const plugInRegisterFactoryFunction = CFPlugInRegisterFactoryFunction;

extern "CoreFoundation" fn CFPlugInRegisterFactoryFunctionByName(factoryUUID: UUIDRef, plugIn: PlugInRef, functionName: StringRef) callconv(.C) objc.Boolean;
pub const plugInRegisterFactoryFunctionByName = CFPlugInRegisterFactoryFunctionByName;

extern "CoreFoundation" fn CFPlugInUnregisterFactory(factoryUUID: UUIDRef) callconv(.C) objc.Boolean;
pub const plugInUnregisterFactory = CFPlugInUnregisterFactory;

extern "CoreFoundation" fn CFPlugInRegisterPlugInType(factoryUUID: UUIDRef, typeUUID: UUIDRef) callconv(.C) objc.Boolean;
pub const plugInRegisterPlugInType = CFPlugInRegisterPlugInType;

extern "CoreFoundation" fn CFPlugInUnregisterPlugInType(factoryUUID: UUIDRef, typeUUID: UUIDRef) callconv(.C) objc.Boolean;
pub const plugInUnregisterPlugInType = CFPlugInUnregisterPlugInType;

extern "CoreFoundation" fn CFPlugInAddInstanceForFactory(factoryID: UUIDRef) callconv(.C) void;
pub const plugInAddInstanceForFactory = CFPlugInAddInstanceForFactory;

extern "CoreFoundation" fn CFPlugInRemoveInstanceForFactory(factoryID: UUIDRef) callconv(.C) void;
pub const plugInRemoveInstanceForFactory = CFPlugInRemoveInstanceForFactory;

pub const __CFPlugInInstance = extern struct {};

pub const PlugInInstanceRef = ?*__CFPlugInInstance;

pub const PlugInInstanceGetInterfaceFunction = ?*const fn(PlugInInstanceRef, StringRef, ?*?*anyopaque) callconv(.C) objc.Boolean;

pub const PlugInInstanceDeallocateInstanceDataFunction = ?*const fn(?*anyopaque) callconv(.C) void;

extern "CoreFoundation" fn CFPlugInInstanceGetInterfaceFunctionTable(instance: PlugInInstanceRef, interfaceName: StringRef, ftbl: ?*?*anyopaque) callconv(.C) objc.Boolean;
pub const plugInInstanceGetInterfaceFunctionTable = CFPlugInInstanceGetInterfaceFunctionTable;

extern "CoreFoundation" fn CFPlugInInstanceGetFactoryName(instance: PlugInInstanceRef) callconv(.C) StringRef;
pub const plugInInstanceGetFactoryName = CFPlugInInstanceGetFactoryName;

extern "CoreFoundation" fn CFPlugInInstanceGetInstanceData(instance: PlugInInstanceRef) callconv(.C) ?*anyopaque;
pub const plugInInstanceGetInstanceData = CFPlugInInstanceGetInstanceData;

extern "CoreFoundation" fn CFPlugInInstanceGetTypeID() callconv(.C) TypeID;
pub const plugInInstanceGetTypeID = CFPlugInInstanceGetTypeID;

extern "CoreFoundation" fn CFPlugInInstanceCreateWithInstanceDataSize(allocator: AllocatorRef, instanceDataSize: Index, deallocateInstanceFunction: PlugInInstanceDeallocateInstanceDataFunction, factoryName: StringRef, getInterfaceFunction: PlugInInstanceGetInterfaceFunction, ) callconv(.C) PlugInInstanceRef;
pub const plugInInstanceCreateWithInstanceDataSize = CFPlugInInstanceCreateWithInstanceDataSize;

pub const __CFMachPort = extern struct {};

pub const MachPortRef = ?*__CFMachPort;

pub const MachPortContext = extern struct {
    version: Index,
    info: ?*anyopaque,
    retain: ?*const fn(?*anyopaque) callconv(.C) ?*anyopaque,
    release: ?*const fn(?*anyopaque) callconv(.C) void,
    copyDescription: ?*const fn(?*anyopaque) callconv(.C) StringRef,
};

pub const MachPortCallBack = ?*const fn(MachPortRef, ?*anyopaque, Index, ?*anyopaque, ) callconv(.C) void;

pub const MachPortInvalidationCallBack = ?*const fn(MachPortRef, ?*anyopaque) callconv(.C) void;

extern "CoreFoundation" fn CFMachPortGetTypeID() callconv(.C) TypeID;
pub const machPortGetTypeID = CFMachPortGetTypeID;

extern "CoreFoundation" fn CFMachPortCreate(allocator: AllocatorRef, callout: MachPortCallBack, context: ?*MachPortContext, shouldFreeInfo: ?*objc.Boolean, ) callconv(.C) MachPortRef;
pub const machPortCreate = CFMachPortCreate;

extern "CoreFoundation" fn CFMachPortCreateWithPort(allocator: AllocatorRef, portNum: objc.mach_port_t, callout: MachPortCallBack, context: ?*MachPortContext, shouldFreeInfo: ?*objc.Boolean, ) callconv(.C) MachPortRef;
pub const machPortCreateWithPort = CFMachPortCreateWithPort;

extern "CoreFoundation" fn CFMachPortGetPort(port: MachPortRef) callconv(.C) objc.mach_port_t;
pub const machPortGetPort = CFMachPortGetPort;

extern "CoreFoundation" fn CFMachPortGetContext(port: MachPortRef, context: ?*MachPortContext) callconv(.C) void;
pub const machPortGetContext = CFMachPortGetContext;

extern "CoreFoundation" fn CFMachPortInvalidate(port: MachPortRef) callconv(.C) void;
pub const machPortInvalidate = CFMachPortInvalidate;

extern "CoreFoundation" fn CFMachPortIsValid(port: MachPortRef) callconv(.C) objc.Boolean;
pub const machPortIsValid = CFMachPortIsValid;

extern "CoreFoundation" fn CFMachPortGetInvalidationCallBack(port: MachPortRef) callconv(.C) MachPortInvalidationCallBack;
pub const machPortGetInvalidationCallBack = CFMachPortGetInvalidationCallBack;

extern "CoreFoundation" fn CFMachPortSetInvalidationCallBack(port: MachPortRef, callout: MachPortInvalidationCallBack) callconv(.C) void;
pub const machPortSetInvalidationCallBack = CFMachPortSetInvalidationCallBack;

extern "CoreFoundation" fn CFMachPortCreateRunLoopSource(allocator: AllocatorRef, port: MachPortRef, order: Index) callconv(.C) RunLoopSourceRef;
pub const machPortCreateRunLoopSource = CFMachPortCreateRunLoopSource;

pub const __CFAttributedString = extern struct {};

pub const AttributedStringRef = ?*__CFAttributedString;

pub const MutableAttributedStringRef = ?*__CFAttributedString;

extern "CoreFoundation" fn CFAttributedStringGetTypeID() callconv(.C) TypeID;
pub const attributedStringGetTypeID = CFAttributedStringGetTypeID;

extern "CoreFoundation" fn CFAttributedStringCreate(alloc: AllocatorRef, str: StringRef, attributes: DictionaryRef) callconv(.C) AttributedStringRef;
pub const attributedStringCreate = CFAttributedStringCreate;

extern "CoreFoundation" fn CFAttributedStringCreateWithSubstring(alloc: AllocatorRef, aStr: AttributedStringRef, range: Range) callconv(.C) AttributedStringRef;
pub const attributedStringCreateWithSubstring = CFAttributedStringCreateWithSubstring;

extern "CoreFoundation" fn CFAttributedStringCreateCopy(alloc: AllocatorRef, aStr: AttributedStringRef) callconv(.C) AttributedStringRef;
pub const attributedStringCreateCopy = CFAttributedStringCreateCopy;

extern "CoreFoundation" fn CFAttributedStringGetString(aStr: AttributedStringRef) callconv(.C) StringRef;
pub const attributedStringGetString = CFAttributedStringGetString;

extern "CoreFoundation" fn CFAttributedStringGetLength(aStr: AttributedStringRef) callconv(.C) Index;
pub const attributedStringGetLength = CFAttributedStringGetLength;

extern "CoreFoundation" fn CFAttributedStringGetAttributes(aStr: AttributedStringRef, loc: Index, effectiveRange: ?*Range) callconv(.C) DictionaryRef;
pub const attributedStringGetAttributes = CFAttributedStringGetAttributes;

extern "CoreFoundation" fn CFAttributedStringGetAttribute(aStr: AttributedStringRef, loc: Index, attrName: StringRef, effectiveRange: ?*Range, ) callconv(.C) TypeRef;
pub const attributedStringGetAttribute = CFAttributedStringGetAttribute;

extern "CoreFoundation" fn CFAttributedStringGetAttributesAndLongestEffectiveRange(aStr: AttributedStringRef, loc: Index, inRange: Range, longestEffectiveRange: ?*Range, ) callconv(.C) DictionaryRef;
pub const attributedStringGetAttributesAndLongestEffectiveRange = CFAttributedStringGetAttributesAndLongestEffectiveRange;

extern "CoreFoundation" fn CFAttributedStringGetAttributeAndLongestEffectiveRange(aStr: AttributedStringRef, loc: Index, attrName: StringRef, inRange: Range, longestEffectiveRange: ?*Range, ) callconv(.C) TypeRef;
pub const attributedStringGetAttributeAndLongestEffectiveRange = CFAttributedStringGetAttributeAndLongestEffectiveRange;

extern "CoreFoundation" fn CFAttributedStringCreateMutableCopy(alloc: AllocatorRef, maxLength: Index, aStr: AttributedStringRef) callconv(.C) MutableAttributedStringRef;
pub const attributedStringCreateMutableCopy = CFAttributedStringCreateMutableCopy;

extern "CoreFoundation" fn CFAttributedStringCreateMutable(alloc: AllocatorRef, maxLength: Index) callconv(.C) MutableAttributedStringRef;
pub const attributedStringCreateMutable = CFAttributedStringCreateMutable;

extern "CoreFoundation" fn CFAttributedStringReplaceString(aStr: MutableAttributedStringRef, range: Range, replacement: StringRef) callconv(.C) void;
pub const attributedStringReplaceString = CFAttributedStringReplaceString;

extern "CoreFoundation" fn CFAttributedStringGetMutableString(aStr: MutableAttributedStringRef) callconv(.C) MutableStringRef;
pub const attributedStringGetMutableString = CFAttributedStringGetMutableString;

extern "CoreFoundation" fn CFAttributedStringSetAttributes(aStr: MutableAttributedStringRef, range: Range, replacement: DictionaryRef, clearOtherAttributes: objc.Boolean, ) callconv(.C) void;
pub const attributedStringSetAttributes = CFAttributedStringSetAttributes;

extern "CoreFoundation" fn CFAttributedStringSetAttribute(aStr: MutableAttributedStringRef, range: Range, attrName: StringRef, value: TypeRef, ) callconv(.C) void;
pub const attributedStringSetAttribute = CFAttributedStringSetAttribute;

extern "CoreFoundation" fn CFAttributedStringRemoveAttribute(aStr: MutableAttributedStringRef, range: Range, attrName: StringRef) callconv(.C) void;
pub const attributedStringRemoveAttribute = CFAttributedStringRemoveAttribute;

extern "CoreFoundation" fn CFAttributedStringReplaceAttributedString(aStr: MutableAttributedStringRef, range: Range, replacement: AttributedStringRef) callconv(.C) void;
pub const attributedStringReplaceAttributedString = CFAttributedStringReplaceAttributedString;

extern "CoreFoundation" fn CFAttributedStringBeginEditing(aStr: MutableAttributedStringRef) callconv(.C) void;
pub const attributedStringBeginEditing = CFAttributedStringBeginEditing;

extern "CoreFoundation" fn CFAttributedStringEndEditing(aStr: MutableAttributedStringRef) callconv(.C) void;
pub const attributedStringEndEditing = CFAttributedStringEndEditing;

extern "CoreFoundation" fn CFAttributedStringGetBidiLevelsAndResolvedDirections() callconv(.C) i32;
pub const attributedStringGetBidiLevelsAndResolvedDirections = CFAttributedStringGetBidiLevelsAndResolvedDirections;

pub const __CFURLEnumerator = extern struct {};

pub const URLEnumeratorRef = ?*__CFURLEnumerator;

extern "CoreFoundation" fn CFURLEnumeratorGetTypeID() callconv(.C) TypeID;
pub const urlEnumeratorGetTypeID = CFURLEnumeratorGetTypeID;

pub const URLEnumeratorOptions = enum(OptionFlags) {
DefaultBehavior = 0,
DescendRecursively = 1,
SkipInvisibles = 2,
GenerateFileReferenceURLs = 4,
SkipPackageContents = 8,
IncludeDirectoriesPreOrder = 16,
IncludeDirectoriesPostOrder = 32,
GenerateRelativePathURLs = 64,
};

extern "CoreFoundation" fn CFURLEnumeratorCreateForDirectoryURL(alloc: AllocatorRef, directoryURL: URLRef, option: URLEnumeratorOptions, propertyKeys: ArrayRef, ) callconv(.C) URLEnumeratorRef;
pub const urlEnumeratorCreateForDirectoryURL = CFURLEnumeratorCreateForDirectoryURL;

extern "CoreFoundation" fn CFURLEnumeratorCreateForMountedVolumes(alloc: AllocatorRef, option: URLEnumeratorOptions, propertyKeys: ArrayRef) callconv(.C) URLEnumeratorRef;
pub const urlEnumeratorCreateForMountedVolumes = CFURLEnumeratorCreateForMountedVolumes;

pub const URLEnumeratorResult = enum(Index) {
Success = 1,
End = 2,
Error = 3,
DirectoryPostOrderSuccess = 4,
};

extern "CoreFoundation" fn CFURLEnumeratorGetNextURL(enumerator: URLEnumeratorRef, url: ?*URLRef, @"error": ?*ErrorRef) callconv(.C) URLEnumeratorResult;
pub const urlEnumeratorGetNextURL = CFURLEnumeratorGetNextURL;

extern "CoreFoundation" fn CFURLEnumeratorSkipDescendents(enumerator: URLEnumeratorRef) callconv(.C) void;
pub const urlEnumeratorSkipDescendents = CFURLEnumeratorSkipDescendents;

extern "CoreFoundation" fn CFURLEnumeratorGetDescendentLevel(enumerator: URLEnumeratorRef) callconv(.C) Index;
pub const urlEnumeratorGetDescendentLevel = CFURLEnumeratorGetDescendentLevel;

extern "CoreFoundation" fn CFURLEnumeratorGetSourceDidChange(enumerator: URLEnumeratorRef) callconv(.C) objc.Boolean;
pub const urlEnumeratorGetSourceDidChange = CFURLEnumeratorGetSourceDidChange;

pub const __CFFileSecurity = extern struct {};

pub const FileSecurityRef = ?*__CFFileSecurity;

extern "CoreFoundation" fn CFFileSecurityGetTypeID() callconv(.C) TypeID;
pub const fileSecurityGetTypeID = CFFileSecurityGetTypeID;

extern "CoreFoundation" fn CFFileSecurityCreate(allocator: AllocatorRef) callconv(.C) FileSecurityRef;
pub const fileSecurityCreate = CFFileSecurityCreate;

extern "CoreFoundation" fn CFFileSecurityCreateCopy(allocator: AllocatorRef, fileSec: FileSecurityRef) callconv(.C) FileSecurityRef;
pub const fileSecurityCreateCopy = CFFileSecurityCreateCopy;

extern "CoreFoundation" fn CFFileSecurityCopyOwnerUUID(fileSec: FileSecurityRef, ownerUUID: ?*UUIDRef) callconv(.C) objc.Boolean;
pub const fileSecurityCopyOwnerUUID = CFFileSecurityCopyOwnerUUID;

extern "CoreFoundation" fn CFFileSecuritySetOwnerUUID(fileSec: FileSecurityRef, ownerUUID: UUIDRef) callconv(.C) objc.Boolean;
pub const fileSecuritySetOwnerUUID = CFFileSecuritySetOwnerUUID;

extern "CoreFoundation" fn CFFileSecurityCopyGroupUUID(fileSec: FileSecurityRef, groupUUID: ?*UUIDRef) callconv(.C) objc.Boolean;
pub const fileSecurityCopyGroupUUID = CFFileSecurityCopyGroupUUID;

extern "CoreFoundation" fn CFFileSecuritySetGroupUUID(fileSec: FileSecurityRef, groupUUID: UUIDRef) callconv(.C) objc.Boolean;
pub const fileSecuritySetGroupUUID = CFFileSecuritySetGroupUUID;

extern "CoreFoundation" fn CFFileSecurityCopyAccessControlList(fileSec: FileSecurityRef, accessControlList: ?*objc.acl_t) callconv(.C) objc.Boolean;
pub const fileSecurityCopyAccessControlList = CFFileSecurityCopyAccessControlList;

extern "CoreFoundation" fn CFFileSecuritySetAccessControlList(fileSec: FileSecurityRef, accessControlList: objc.acl_t) callconv(.C) objc.Boolean;
pub const fileSecuritySetAccessControlList = CFFileSecuritySetAccessControlList;

extern "CoreFoundation" fn CFFileSecurityGetOwner(fileSec: FileSecurityRef, owner: ?*objc.uid_t) callconv(.C) objc.Boolean;
pub const fileSecurityGetOwner = CFFileSecurityGetOwner;

extern "CoreFoundation" fn CFFileSecuritySetOwner(fileSec: FileSecurityRef, owner: objc.uid_t) callconv(.C) objc.Boolean;
pub const fileSecuritySetOwner = CFFileSecuritySetOwner;

extern "CoreFoundation" fn CFFileSecurityGetGroup(fileSec: FileSecurityRef, group: ?*objc.gid_t) callconv(.C) objc.Boolean;
pub const fileSecurityGetGroup = CFFileSecurityGetGroup;

extern "CoreFoundation" fn CFFileSecuritySetGroup(fileSec: FileSecurityRef, group: objc.gid_t) callconv(.C) objc.Boolean;
pub const fileSecuritySetGroup = CFFileSecuritySetGroup;

extern "CoreFoundation" fn CFFileSecurityGetMode(fileSec: FileSecurityRef, mode: ?*objc.mode_t) callconv(.C) objc.Boolean;
pub const fileSecurityGetMode = CFFileSecurityGetMode;

extern "CoreFoundation" fn CFFileSecuritySetMode(fileSec: FileSecurityRef, mode: objc.mode_t) callconv(.C) objc.Boolean;
pub const fileSecuritySetMode = CFFileSecuritySetMode;

pub const FileSecurityClearOptions = enum(OptionFlags) {
Owner = 1,
Group = 2,
Mode = 4,
OwnerUUID = 8,
GroupUUID = 16,
AccessControlList = 32,
};

extern "CoreFoundation" fn CFFileSecurityClearProperties(fileSec: FileSecurityRef, clearPropertyMask: FileSecurityClearOptions) callconv(.C) objc.Boolean;
pub const fileSecurityClearProperties = CFFileSecurityClearProperties;

extern "CoreFoundation" fn CFStringTokenizerCopyBestStringLanguage(string: StringRef, range: Range) callconv(.C) StringRef;
pub const stringTokenizerCopyBestStringLanguage = CFStringTokenizerCopyBestStringLanguage;

pub const __CFStringTokenizer = extern struct {};

pub const StringTokenizerRef = ?*__CFStringTokenizer;

pub const anon651 = enum(OptionFlags) {
CFStringTokenizerUnitWord = 0,
CFStringTokenizerUnitSentence = 1,
CFStringTokenizerUnitParagraph = 2,
CFStringTokenizerUnitLineBreak = 3,
CFStringTokenizerUnitWordBoundary = 4,
CFStringTokenizerAttributeLatinTranscription = 65536,
CFStringTokenizerAttributeLanguage = 131072,
};

pub const StringTokenizerTokenType = enum(OptionFlags) {
None = 0,
Normal = 1,
HasSubTokensMask = 2,
HasDerivedSubTokensMask = 4,
HasHasNumbersMask = 8,
HasNonLettersMask = 16,
IsCJWordMask = 32,
};

extern "CoreFoundation" fn CFStringTokenizerGetTypeID() callconv(.C) TypeID;
pub const stringTokenizerGetTypeID = CFStringTokenizerGetTypeID;

extern "CoreFoundation" fn CFStringTokenizerCreate(alloc: AllocatorRef, string: StringRef, range: Range, options: OptionFlags, locale: LocaleRef, ) callconv(.C) StringTokenizerRef;
pub const stringTokenizerCreate = CFStringTokenizerCreate;

extern "CoreFoundation" fn CFStringTokenizerSetString(tokenizer: StringTokenizerRef, string: StringRef, range: Range) callconv(.C) void;
pub const stringTokenizerSetString = CFStringTokenizerSetString;

extern "CoreFoundation" fn CFStringTokenizerGoToTokenAtIndex(tokenizer: StringTokenizerRef, index: Index) callconv(.C) StringTokenizerTokenType;
pub const stringTokenizerGoToTokenAtIndex = CFStringTokenizerGoToTokenAtIndex;

extern "CoreFoundation" fn CFStringTokenizerAdvanceToNextToken(tokenizer: StringTokenizerRef) callconv(.C) StringTokenizerTokenType;
pub const stringTokenizerAdvanceToNextToken = CFStringTokenizerAdvanceToNextToken;

extern "CoreFoundation" fn CFStringTokenizerGetCurrentTokenRange(tokenizer: StringTokenizerRef) callconv(.C) Range;
pub const stringTokenizerGetCurrentTokenRange = CFStringTokenizerGetCurrentTokenRange;

extern "CoreFoundation" fn CFStringTokenizerCopyCurrentTokenAttribute(tokenizer: StringTokenizerRef, attribute: OptionFlags) callconv(.C) TypeRef;
pub const stringTokenizerCopyCurrentTokenAttribute = CFStringTokenizerCopyCurrentTokenAttribute;

extern "CoreFoundation" fn CFStringTokenizerGetCurrentSubTokens(tokenizer: StringTokenizerRef, ranges: ?*Range, maxRangeLength: Index, derivedSubTokens: MutableArrayRef, ) callconv(.C) Index;
pub const stringTokenizerGetCurrentSubTokens = CFStringTokenizerGetCurrentSubTokens;

pub const FileDescriptorNativeDescriptor = i32;

pub const __CFFileDescriptor = extern struct {};

pub const FileDescriptorRef = ?*__CFFileDescriptor;

pub const anon181 = enum(OptionFlags) {
CFFileDescriptorReadCallBack = 1,
CFFileDescriptorWriteCallBack = 2,
};

pub const FileDescriptorCallBack = ?*const fn(FileDescriptorRef, OptionFlags, ?*anyopaque) callconv(.C) void;

pub const FileDescriptorContext = extern struct {
    version: Index,
    info: ?*anyopaque,
    retain: ?*const fn(?*anyopaque) callconv(.C) ?*anyopaque,
    release: ?*const fn(?*anyopaque) callconv(.C) void,
    copyDescription: ?*const fn(?*anyopaque) callconv(.C) StringRef,
};

extern "CoreFoundation" fn CFFileDescriptorGetTypeID() callconv(.C) TypeID;
pub const fileDescriptorGetTypeID = CFFileDescriptorGetTypeID;

extern "CoreFoundation" fn CFFileDescriptorCreate(allocator: AllocatorRef, fd: FileDescriptorNativeDescriptor, closeOnInvalidate: objc.Boolean, callout: FileDescriptorCallBack, context: ?*FileDescriptorContext, ) callconv(.C) FileDescriptorRef;
pub const fileDescriptorCreate = CFFileDescriptorCreate;

extern "CoreFoundation" fn CFFileDescriptorGetNativeDescriptor(f: FileDescriptorRef) callconv(.C) FileDescriptorNativeDescriptor;
pub const fileDescriptorGetNativeDescriptor = CFFileDescriptorGetNativeDescriptor;

extern "CoreFoundation" fn CFFileDescriptorGetContext(f: FileDescriptorRef, context: ?*FileDescriptorContext) callconv(.C) void;
pub const fileDescriptorGetContext = CFFileDescriptorGetContext;

extern "CoreFoundation" fn CFFileDescriptorEnableCallBacks(f: FileDescriptorRef, callBackTypes: OptionFlags) callconv(.C) void;
pub const fileDescriptorEnableCallBacks = CFFileDescriptorEnableCallBacks;

extern "CoreFoundation" fn CFFileDescriptorDisableCallBacks(f: FileDescriptorRef, callBackTypes: OptionFlags) callconv(.C) void;
pub const fileDescriptorDisableCallBacks = CFFileDescriptorDisableCallBacks;

extern "CoreFoundation" fn CFFileDescriptorInvalidate(f: FileDescriptorRef) callconv(.C) void;
pub const fileDescriptorInvalidate = CFFileDescriptorInvalidate;

extern "CoreFoundation" fn CFFileDescriptorIsValid(f: FileDescriptorRef) callconv(.C) objc.Boolean;
pub const fileDescriptorIsValid = CFFileDescriptorIsValid;

extern "CoreFoundation" fn CFFileDescriptorCreateRunLoopSource(allocator: AllocatorRef, f: FileDescriptorRef, order: Index) callconv(.C) RunLoopSourceRef;
pub const fileDescriptorCreateRunLoopSource = CFFileDescriptorCreateRunLoopSource;

pub const __CFUserNotification = extern struct {};

pub const UserNotificationRef = ?*__CFUserNotification;

pub const UserNotificationCallBack = ?*const fn(UserNotificationRef, OptionFlags) callconv(.C) void;

extern "CoreFoundation" fn CFUserNotificationGetTypeID() callconv(.C) TypeID;
pub const userNotificationGetTypeID = CFUserNotificationGetTypeID;

extern "CoreFoundation" fn CFUserNotificationCreate(allocator: AllocatorRef, timeout: TimeInterval, flags: OptionFlags, @"error": ?*objc.SInt32, dictionary: DictionaryRef, ) callconv(.C) UserNotificationRef;
pub const userNotificationCreate = CFUserNotificationCreate;

extern "CoreFoundation" fn CFUserNotificationReceiveResponse(userNotification: UserNotificationRef, timeout: TimeInterval, responseFlags: ?*OptionFlags) callconv(.C) objc.SInt32;
pub const userNotificationReceiveResponse = CFUserNotificationReceiveResponse;

extern "CoreFoundation" fn CFUserNotificationGetResponseValue(userNotification: UserNotificationRef, key: StringRef, idx: Index) callconv(.C) StringRef;
pub const userNotificationGetResponseValue = CFUserNotificationGetResponseValue;

extern "CoreFoundation" fn CFUserNotificationGetResponseDictionary(userNotification: UserNotificationRef) callconv(.C) DictionaryRef;
pub const userNotificationGetResponseDictionary = CFUserNotificationGetResponseDictionary;

extern "CoreFoundation" fn CFUserNotificationUpdate(userNotification: UserNotificationRef, timeout: TimeInterval, flags: OptionFlags, dictionary: DictionaryRef, ) callconv(.C) objc.SInt32;
pub const userNotificationUpdate = CFUserNotificationUpdate;

extern "CoreFoundation" fn CFUserNotificationCancel(userNotification: UserNotificationRef) callconv(.C) objc.SInt32;
pub const userNotificationCancel = CFUserNotificationCancel;

extern "CoreFoundation" fn CFUserNotificationCreateRunLoopSource(allocator: AllocatorRef, userNotification: UserNotificationRef, callout: UserNotificationCallBack, order: Index, ) callconv(.C) RunLoopSourceRef;
pub const userNotificationCreateRunLoopSource = CFUserNotificationCreateRunLoopSource;

extern "CoreFoundation" fn CFUserNotificationDisplayNotice(timeout: TimeInterval, flags: OptionFlags, iconURL: URLRef, soundURL: URLRef, localizationURL: URLRef, alertHeader: StringRef, alertMessage: StringRef, defaultButtonTitle: StringRef, ) callconv(.C) objc.SInt32;
pub const userNotificationDisplayNotice = CFUserNotificationDisplayNotice;

extern "CoreFoundation" fn CFUserNotificationDisplayAlert(timeout: TimeInterval, flags: OptionFlags, iconURL: URLRef, soundURL: URLRef, localizationURL: URLRef, alertHeader: StringRef, alertMessage: StringRef, defaultButtonTitle: StringRef, alternateButtonTitle: StringRef, otherButtonTitle: StringRef, responseFlags: ?*OptionFlags, ) callconv(.C) objc.SInt32;
pub const userNotificationDisplayAlert = CFUserNotificationDisplayAlert;

pub const anon1071 = enum(OptionFlags) {
CFUserNotificationStopAlertLevel = 0,
CFUserNotificationNoteAlertLevel = 1,
CFUserNotificationCautionAlertLevel = 2,
CFUserNotificationPlainAlertLevel = 3,
};

pub const anon1141 = enum(OptionFlags) {
CFUserNotificationDefaultResponse = 0,
CFUserNotificationAlternateResponse = 1,
CFUserNotificationOtherResponse = 2,
CFUserNotificationCancelResponse = 3,
};

extern "CoreFoundation" fn CFUserNotificationCheckBoxChecked(i: Index) callconv(.C) OptionFlags;
pub const userNotificationCheckBoxChecked = CFUserNotificationCheckBoxChecked;

extern "CoreFoundation" fn CFUserNotificationSecureTextField(i: Index) callconv(.C) OptionFlags;
pub const userNotificationSecureTextField = CFUserNotificationSecureTextField;

extern "CoreFoundation" fn CFUserNotificationPopUpSelection(n: Index) callconv(.C) OptionFlags;
pub const userNotificationPopUpSelection = CFUserNotificationPopUpSelection;

pub const anon301 = enum(Index) {
CFXMLNodeCurrentVersion = 1,
};

pub const __CFXMLNode = extern struct {};

pub const XMLNodeRef = ?*__CFXMLNode;

pub const XMLTreeRef = TreeRef;

pub const XMLNodeTypeCode = enum(Index) {
Document = 1,
Element = 2,
Attribute = 3,
ProcessingInstruction = 4,
Comment = 5,
Text = 6,
DATASection = 7,
DocumentFragment = 8,
Entity = 9,
EntityReference = 10,
DocumentType = 11,
Whitespace = 12,
Notation = 13,
ElementTypeDeclaration = 14,
AttributeListDeclaration = 15,
};

pub const XMLElementInfo = extern struct {
    attributes: DictionaryRef,
    attributeOrder: ArrayRef,
    isEmpty: objc.Boolean,
    _reserved: [3] i8,
};

pub const XMLProcessingInstructionInfo = extern struct {
    dataString: StringRef,
};

pub const XMLDocumentInfo = extern struct {
    sourceURL: URLRef,
    encoding: StringEncoding,
};

pub const XMLExternalID = extern struct {
    systemID: URLRef,
    publicID: StringRef,
};

pub const XMLDocumentTypeInfo = extern struct {
    externalID: XMLExternalID,
};

pub const XMLNotationInfo = extern struct {
    externalID: XMLExternalID,
};

pub const XMLElementTypeDeclarationInfo = extern struct {
    contentDescription: StringRef,
};

pub const XMLAttributeDeclarationInfo = extern struct {
    attributeName: StringRef,
    typeString: StringRef,
    defaultString: StringRef,
};

pub const XMLAttributeListDeclarationInfo = extern struct {
    numberOfAttributes: Index,
    attributes: ?*XMLAttributeDeclarationInfo,
};

pub const XMLEntityTypeCode = enum(Index) {
Parameter = 0,
ParsedInternal = 1,
ParsedExternal = 2,
Unparsed = 3,
Character = 4,
};

pub const XMLEntityInfo = extern struct {
    entityType: XMLEntityTypeCode,
    replacementText: StringRef,
    entityID: XMLExternalID,
    notationName: StringRef,
};

pub const XMLEntityReferenceInfo = extern struct {
    entityType: XMLEntityTypeCode,
};

extern "CoreFoundation" fn CFXMLNodeGetTypeID() callconv(.C) TypeID;
pub const xmlNodeGetTypeID = CFXMLNodeGetTypeID;

extern "CoreFoundation" fn CFXMLNodeCreate(alloc: AllocatorRef, xmlType: XMLNodeTypeCode, dataString: StringRef, additionalInfoPtr: ?*anyopaque, version: Index, ) callconv(.C) XMLNodeRef;
pub const xmlNodeCreate = CFXMLNodeCreate;

extern "CoreFoundation" fn CFXMLNodeCreateCopy(alloc: AllocatorRef, origNode: XMLNodeRef) callconv(.C) XMLNodeRef;
pub const xmlNodeCreateCopy = CFXMLNodeCreateCopy;

extern "CoreFoundation" fn CFXMLNodeGetTypeCode(node: XMLNodeRef) callconv(.C) XMLNodeTypeCode;
pub const xmlNodeGetTypeCode = CFXMLNodeGetTypeCode;

extern "CoreFoundation" fn CFXMLNodeGetString(node: XMLNodeRef) callconv(.C) StringRef;
pub const xmlNodeGetString = CFXMLNodeGetString;

extern "CoreFoundation" fn CFXMLNodeGetInfoPtr(node: XMLNodeRef) callconv(.C) ?*anyopaque;
pub const xmlNodeGetInfoPtr = CFXMLNodeGetInfoPtr;

extern "CoreFoundation" fn CFXMLNodeGetVersion(node: XMLNodeRef) callconv(.C) Index;
pub const xmlNodeGetVersion = CFXMLNodeGetVersion;

extern "CoreFoundation" fn CFXMLTreeCreateWithNode(allocator: AllocatorRef, node: XMLNodeRef) callconv(.C) XMLTreeRef;
pub const xmlTreeCreateWithNode = CFXMLTreeCreateWithNode;

extern "CoreFoundation" fn CFXMLTreeGetNode(xmlTree: XMLTreeRef) callconv(.C) XMLNodeRef;
pub const xmlTreeGetNode = CFXMLTreeGetNode;

pub const __CFXMLParser = extern struct {};

pub const XMLParserRef = ?*__CFXMLParser;

pub const XMLParserOptions = enum(OptionFlags) {
ValidateDocument = 1,
SkipMetaData = 2,
ReplacePhysicalEntities = 4,
SkipWhitespace = 8,
ResolveExternalEntities = 16,
AddImpliedAttributes = 32,
AllOptions = 16777215,
NoOptions = 0,
};

pub const XMLParserStatusCode = enum(Index) {
StatusParseNotBegun = -2,
StatusParseInProgress = -1,
StatusParseSuccessful = 0,
ErrorUnexpectedEOF = 1,
ErrorUnknownEncoding = 2,
ErrorEncodingConversionFailure = 3,
ErrorMalformedProcessingInstruction = 4,
ErrorMalformedDTD = 5,
ErrorMalformedName = 6,
ErrorMalformedCDSect = 7,
ErrorMalformedCloseTag = 8,
ErrorMalformedStartTag = 9,
ErrorMalformedDocument = 10,
ErrorElementlessDocument = 11,
ErrorMalformedComment = 12,
ErrorMalformedCharacterReference = 13,
ErrorMalformedParsedCharacterData = 14,
ErrorNoData = 15,
};

pub const XMLParserCreateXMLStructureCallBack = ?*const fn(XMLParserRef, XMLNodeRef, ?*anyopaque) callconv(.C) ?*anyopaque;

pub const XMLParserAddChildCallBack = ?*const fn(XMLParserRef, ?*anyopaque, ?*anyopaque, ?*anyopaque, ) callconv(.C) void;

pub const XMLParserEndXMLStructureCallBack = ?*const fn(XMLParserRef, ?*anyopaque, ?*anyopaque) callconv(.C) void;

pub const XMLParserResolveExternalEntityCallBack = ?*const fn(XMLParserRef, ?*XMLExternalID, ?*anyopaque) callconv(.C) DataRef;

pub const XMLParserHandleErrorCallBack = ?*const fn(XMLParserRef, XMLParserStatusCode, ?*anyopaque) callconv(.C) objc.Boolean;

pub const XMLParserCallBacks = extern struct {
    version: Index,
    createXMLStructure: XMLParserCreateXMLStructureCallBack,
    addChild: XMLParserAddChildCallBack,
    endXMLStructure: XMLParserEndXMLStructureCallBack,
    resolveExternalEntity: XMLParserResolveExternalEntityCallBack,
    handleError: XMLParserHandleErrorCallBack,
};

pub const XMLParserRetainCallBack = ?*const fn(?*anyopaque) callconv(.C) ?*anyopaque;

pub const XMLParserReleaseCallBack = ?*const fn(?*anyopaque) callconv(.C) void;

pub const XMLParserCopyDescriptionCallBack = ?*const fn(?*anyopaque) callconv(.C) StringRef;

pub const XMLParserContext = extern struct {
    version: Index,
    info: ?*anyopaque,
    retain: XMLParserRetainCallBack,
    release: XMLParserReleaseCallBack,
    copyDescription: XMLParserCopyDescriptionCallBack,
};

extern "CoreFoundation" fn CFXMLParserGetTypeID() callconv(.C) TypeID;
pub const xmlParserGetTypeID = CFXMLParserGetTypeID;

extern "CoreFoundation" fn CFXMLParserCreate(allocator: AllocatorRef, xmlData: DataRef, dataSource: URLRef, parseOptions: OptionFlags, versionOfNodes: Index, callBacks: ?*XMLParserCallBacks, context: ?*XMLParserContext, ) callconv(.C) XMLParserRef;
pub const xmlParserCreate = CFXMLParserCreate;

extern "CoreFoundation" fn CFXMLParserCreateWithDataFromURL(allocator: AllocatorRef, dataSource: URLRef, parseOptions: OptionFlags, versionOfNodes: Index, callBacks: ?*XMLParserCallBacks, context: ?*XMLParserContext, ) callconv(.C) XMLParserRef;
pub const xmlParserCreateWithDataFromURL = CFXMLParserCreateWithDataFromURL;

extern "CoreFoundation" fn CFXMLParserGetContext(parser: XMLParserRef, context: ?*XMLParserContext) callconv(.C) void;
pub const xmlParserGetContext = CFXMLParserGetContext;

extern "CoreFoundation" fn CFXMLParserGetCallBacks(parser: XMLParserRef, callBacks: ?*XMLParserCallBacks) callconv(.C) void;
pub const xmlParserGetCallBacks = CFXMLParserGetCallBacks;

extern "CoreFoundation" fn CFXMLParserGetSourceURL(parser: XMLParserRef) callconv(.C) URLRef;
pub const xmlParserGetSourceURL = CFXMLParserGetSourceURL;

extern "CoreFoundation" fn CFXMLParserGetLocation(parser: XMLParserRef) callconv(.C) Index;
pub const xmlParserGetLocation = CFXMLParserGetLocation;

extern "CoreFoundation" fn CFXMLParserGetLineNumber(parser: XMLParserRef) callconv(.C) Index;
pub const xmlParserGetLineNumber = CFXMLParserGetLineNumber;

extern "CoreFoundation" fn CFXMLParserGetDocument(parser: XMLParserRef) callconv(.C) ?*anyopaque;
pub const xmlParserGetDocument = CFXMLParserGetDocument;

extern "CoreFoundation" fn CFXMLParserGetStatusCode(parser: XMLParserRef) callconv(.C) XMLParserStatusCode;
pub const xmlParserGetStatusCode = CFXMLParserGetStatusCode;

extern "CoreFoundation" fn CFXMLParserCopyErrorDescription(parser: XMLParserRef) callconv(.C) StringRef;
pub const xmlParserCopyErrorDescription = CFXMLParserCopyErrorDescription;

extern "CoreFoundation" fn CFXMLParserAbort(parser: XMLParserRef, errorCode: XMLParserStatusCode, errorDescription: StringRef) callconv(.C) void;
pub const xmlParserAbort = CFXMLParserAbort;

extern "CoreFoundation" fn CFXMLParserParse(parser: XMLParserRef) callconv(.C) objc.Boolean;
pub const xmlParserParse = CFXMLParserParse;

extern "CoreFoundation" fn CFXMLTreeCreateFromData(allocator: AllocatorRef, xmlData: DataRef, dataSource: URLRef, parseOptions: OptionFlags, versionOfNodes: Index, ) callconv(.C) XMLTreeRef;
pub const xmlTreeCreateFromData = CFXMLTreeCreateFromData;

extern "CoreFoundation" fn CFXMLTreeCreateFromDataWithError(allocator: AllocatorRef, xmlData: DataRef, dataSource: URLRef, parseOptions: OptionFlags, versionOfNodes: Index, errorDict: ?*DictionaryRef, ) callconv(.C) XMLTreeRef;
pub const xmlTreeCreateFromDataWithError = CFXMLTreeCreateFromDataWithError;

extern "CoreFoundation" fn CFXMLTreeCreateWithDataFromURL(allocator: AllocatorRef, dataSource: URLRef, parseOptions: OptionFlags, versionOfNodes: Index, ) callconv(.C) XMLTreeRef;
pub const xmlTreeCreateWithDataFromURL = CFXMLTreeCreateWithDataFromURL;

extern "CoreFoundation" fn CFXMLTreeCreateXMLData(allocator: AllocatorRef, xmlTree: XMLTreeRef) callconv(.C) DataRef;
pub const xmlTreeCreateXMLData = CFXMLTreeCreateXMLData;

extern "CoreFoundation" fn CFXMLCreateStringByEscapingEntities(allocator: AllocatorRef, string: StringRef, entitiesDictionary: DictionaryRef) callconv(.C) StringRef;
pub const xmlCreateStringByEscapingEntities = CFXMLCreateStringByEscapingEntities;

extern "CoreFoundation" fn CFXMLCreateStringByUnescapingEntities(allocator: AllocatorRef, string: StringRef, entitiesDictionary: DictionaryRef) callconv(.C) StringRef;
pub const xmlCreateStringByUnescapingEntities = CFXMLCreateStringByUnescapingEntities;

